Command line args: clojush.problems.software.number-io :parent-selection :tournament :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
epigenetic-markers = []
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :tournament
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
report-simplifications = 0
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [[82.57529455411907 -89] -6.424705445880932]
Train Case:   1 | Input/Output: [[45.575853032061985 56] 101.57585303206199]
Train Case:   2 | Input/Output: [[15.37223864987645 -10] 5.372238649876451]
Train Case:   3 | Input/Output: [[68.83807648400597 -18] 50.83807648400597]
Train Case:   4 | Input/Output: [[72.36867452463872 77] 149.36867452463872]
Train Case:   5 | Input/Output: [[-45.098773143163214 -41] -86.09877314316321]
Train Case:   6 | Input/Output: [[80.25631493785335 19] 99.25631493785335]
Train Case:   7 | Input/Output: [[31.2759538142615 69] 100.2759538142615]
Train Case:   8 | Input/Output: [[29.850866764879726 26] 55.850866764879726]
Train Case:   9 | Input/Output: [[-83.49804786210811 -37] -120.49804786210811]
Train Case:  10 | Input/Output: [[74.39539262015126 -24] 50.395392620151256]
Train Case:  11 | Input/Output: [[-7.644444340780581 -79] -86.64444434078058]
Train Case:  12 | Input/Output: [[-42.76625482867804 86] 43.23374517132196]
Train Case:  13 | Input/Output: [[-67.35759887253334 -2] -69.35759887253334]
Train Case:  14 | Input/Output: [[50.625723815875205 -83] -32.374276184124795]
Train Case:  15 | Input/Output: [[66.20349314101946 -45] 21.203493141019464]
Train Case:  16 | Input/Output: [[-2.705870996432452 9] 6.294129003567548]
Train Case:  17 | Input/Output: [[-35.79226606596795 64] 28.20773393403205]
Train Case:  18 | Input/Output: [[-60.89780333501202 64] 3.1021966649879786]
Train Case:  19 | Input/Output: [[59.40587153445642 58] 117.40587153445642]
Train Case:  20 | Input/Output: [[55.196840429185386 50] 105.19684042918539]
Train Case:  21 | Input/Output: [[-16.280938054648203 -79] -95.2809380546482]
Train Case:  22 | Input/Output: [[69.79286246046107 76] 145.79286246046107]
Train Case:  23 | Input/Output: [[57.31043537538861 -54] 3.3104353753886073]
Train Case:  24 | Input/Output: [[45.40294174310574 15] 60.40294174310574]
Test Case:   0 | Input/Output: [[40.708416832478974 -83] -42.291583167521026]
Test Case:   1 | Input/Output: [[-82.81085106938892 18] -64.81085106938892]
Test Case:   2 | Input/Output: [[77.17947913311855 40] 117.17947913311855]
Test Case:   3 | Input/Output: [[-88.29035094875088 36] -52.290350948750884]
Test Case:   4 | Input/Output: [[-93.83477352532101 -12] -105.83477352532101]
Test Case:   5 | Input/Output: [[-20.81525104269764 -6] -26.81525104269764]
Test Case:   6 | Input/Output: [[95.27221480152076 16] 111.27221480152076]
Test Case:   7 | Input/Output: [[-39.64209217919379 -5] -44.64209217919379]
Test Case:   8 | Input/Output: [[-43.27610263920045 4] -39.27610263920045]
Test Case:   9 | Input/Output: [[-3.2425146137719167 -1] -4.242514613771917]
Test Case:  10 | Input/Output: [[-23.73183148295604 -62] -85.73183148295604]
Test Case:  11 | Input/Output: [[-62.45477123492527 52] -10.454771234925268]
Test Case:  12 | Input/Output: [[-9.516818791895545 28] 18.483181208104455]
Test Case:  13 | Input/Output: [[-39.640989186261024 79] 39.359010813738976]
Test Case:  14 | Input/Output: [[-32.56380138864475 64] 31.436198611355252]
Test Case:  15 | Input/Output: [[41.08235130507637 -73] -31.917648694923628]
Test Case:  16 | Input/Output: [[-78.56701417841128 -27] -105.56701417841128]
Test Case:  17 | Input/Output: [[96.69467642750408 -96] 0.6946764275040778]
Test Case:  18 | Input/Output: [[87.93413335362504 71] 158.93413335362504]
Test Case:  19 | Input/Output: [[59.82566790454328 26] 85.82566790454328]
Test Case:  20 | Input/Output: [[-58.09717534945589 -36] -94.09717534945588]
Test Case:  21 | Input/Output: [[61.67256632180394 6] 67.67256632180394]
Test Case:  22 | Input/Output: [[55.575861722405875 31] 86.57586172240588]
Test Case:  23 | Input/Output: [[59.86900647315673 73] 132.86900647315673]
Test Case:  24 | Input/Output: [[63.953131739627054 87] 150.95313173962705]
Test Case:  25 | Input/Output: [[-57.61622891201845 -36] -93.61622891201844]
Test Case:  26 | Input/Output: [[63.34029392402758 45] 108.34029392402758]
Test Case:  27 | Input/Output: [[42.932289222541186 -29] 13.932289222541186]
Test Case:  28 | Input/Output: [[95.0753885260855 74] 169.0753885260855]
Test Case:  29 | Input/Output: [[76.00173294588706 -10] 66.00173294588706]
Test Case:  30 | Input/Output: [[-97.91870089242249 -30] -127.91870089242249]
Test Case:  31 | Input/Output: [[27.01962618786773 51] 78.01962618786773]
Test Case:  32 | Input/Output: [[94.20368374043733 -100] -5.796316259562673]
Test Case:  33 | Input/Output: [[58.19772261727795 -61] -2.8022773827220533]
Test Case:  34 | Input/Output: [[95.88733275807436 24] 119.88733275807436]
Test Case:  35 | Input/Output: [[62.07159043229464 76] 138.07159043229464]
Test Case:  36 | Input/Output: [[-64.57877340817204 -43] -107.57877340817204]
Test Case:  37 | Input/Output: [[2.090243782627965 -70] -67.90975621737203]
Test Case:  38 | Input/Output: [[23.346670058999038 73] 96.34667005899904]
Test Case:  39 | Input/Output: [[-64.70697742584406 7] -57.70697742584406]
Test Case:  40 | Input/Output: [[-14.552019666824108 88] 73.44798033317589]
Test Case:  41 | Input/Output: [[-24.356874341187336 64] 39.643125658812664]
Test Case:  42 | Input/Output: [[-64.98289842396434 -14] -78.98289842396434]
Test Case:  43 | Input/Output: [[-54.35129920888184 2] -52.35129920888184]
Test Case:  44 | Input/Output: [[-3.3748214544071544 57] 53.625178545592846]
Test Case:  45 | Input/Output: [[90.6924652496499 -26] 64.6924652496499]
Test Case:  46 | Input/Output: [[54.1002382158365 -45] 9.100238215836498]
Test Case:  47 | Input/Output: [[-39.481605459995265 -12] -51.481605459995265]
Test Case:  48 | Input/Output: [[-32.506437276676124 66] 33.493562723323876]
Test Case:  49 | Input/Output: [[66.37391955961152 43] 109.37391955961152]
Test Case:  50 | Input/Output: [[-68.1801658586004 96] 27.819834141399596]
Test Case:  51 | Input/Output: [[-30.207193586049414 0] -30.207193586049414]
Test Case:  52 | Input/Output: [[2.3701714699307104 -18] -15.62982853006929]
Test Case:  53 | Input/Output: [[-41.68369062793451 55] 13.31630937206549]
Test Case:  54 | Input/Output: [[-18.664053545156662 3] -15.664053545156662]
Test Case:  55 | Input/Output: [[-74.86323512177847 -100] -174.86323512177847]
Test Case:  56 | Input/Output: [[-1.143316752591474 -63] -64.14331675259147]
Test Case:  57 | Input/Output: [[-91.96056469441918 -74] -165.9605646944192]
Test Case:  58 | Input/Output: [[44.81999652145342 -84] -39.18000347854658]
Test Case:  59 | Input/Output: [[-84.38033716430316 60] -24.380337164303157]
Test Case:  60 | Input/Output: [[33.4532196400674 -46] -12.546780359932598]
Test Case:  61 | Input/Output: [[-93.38385280324411 97] 3.6161471967558896]
Test Case:  62 | Input/Output: [[-67.17128530662043 32] -35.17128530662043]
Test Case:  63 | Input/Output: [[47.392388357998726 97] 144.39238835799873]
Test Case:  64 | Input/Output: [[-78.10866488804741 -78] -156.10866488804743]
Test Case:  65 | Input/Output: [[90.72281757209396 -75] 15.722817572093959]
Test Case:  66 | Input/Output: [[9.34091924894878 -46] -36.65908075105122]
Test Case:  67 | Input/Output: [[81.09310274576129 -51] 30.093102745761286]
Test Case:  68 | Input/Output: [[-6.991686759818009 10] 3.008313240181991]
Test Case:  69 | Input/Output: [[84.85720640002378 12] 96.85720640002378]
Test Case:  70 | Input/Output: [[67.73768460940542 26] 93.73768460940542]
Test Case:  71 | Input/Output: [[83.49241090281089 53] 136.4924109028109]
Test Case:  72 | Input/Output: [[10.50898325022122 34] 44.50898325022122]
Test Case:  73 | Input/Output: [[-45.28292344519962 -4] -49.28292344519962]
Test Case:  74 | Input/Output: [[-18.314535065959063 85] 66.68546493404094]
Test Case:  75 | Input/Output: [[33.493536192222166 74] 107.49353619222217]
Test Case:  76 | Input/Output: [[75.69547448852882 -38] 37.695474488528816]
Test Case:  77 | Input/Output: [[-1.8864432206718789 -23] -24.88644322067188]
Test Case:  78 | Input/Output: [[-93.43808102924093 75] -18.438081029240934]
Test Case:  79 | Input/Output: [[66.08976543440278 -40] 26.08976543440278]
Test Case:  80 | Input/Output: [[-41.784052737157616 -48] -89.78405273715762]
Test Case:  81 | Input/Output: [[0.8372349780398309 -76] -75.16276502196017]
Test Case:  82 | Input/Output: [[-45.34276293477932 -44] -89.34276293477933]
Test Case:  83 | Input/Output: [[54.534731937108205 -63] -8.465268062891795]
Test Case:  84 | Input/Output: [[26.054370570154717 -46] -19.945629429845283]
Test Case:  85 | Input/Output: [[17.978853921517185 42] 59.978853921517185]
Test Case:  86 | Input/Output: [[-65.29385591678823 -22] -87.29385591678823]
Test Case:  87 | Input/Output: [[34.15438256879142 80] 114.15438256879142]
Test Case:  88 | Input/Output: [[-62.281934178140055 77] 14.718065821859945]
Test Case:  89 | Input/Output: [[40.08330250304991 3] 43.08330250304991]
Test Case:  90 | Input/Output: [[-85.31814553357671 -38] -123.31814553357671]
Test Case:  91 | Input/Output: [[-54.075747616396264 18] -36.075747616396264]
Test Case:  92 | Input/Output: [[45.53246145609046 53] 98.53246145609046]
Test Case:  93 | Input/Output: [[58.255506838171414 -24] 34.255506838171414]
Test Case:  94 | Input/Output: [[-66.43639457819981 48] -18.43639457819981]
Test Case:  95 | Input/Output: [[4.424190589706228 -7] -2.575809410293772]
Test Case:  96 | Input/Output: [[-75.92693685679228 -17] -92.92693685679228]
Test Case:  97 | Input/Output: [[-78.68691543631991 48] -30.686915436319907]
Test Case:  98 | Input/Output: [[-73.18170192772382 43] -30.18170192772382]
Test Case:  99 | Input/Output: [[5.284613643933781 63] 68.28461364393378]
Test Case: 100 | Input/Output: [[-50.32473411442808 -25] -75.32473411442808]
Test Case: 101 | Input/Output: [[7.973220482040148 54] 61.97322048204015]
Test Case: 102 | Input/Output: [[-79.78165350732367 -30] -109.78165350732367]
Test Case: 103 | Input/Output: [[33.340503954853574 53] 86.34050395485357]
Test Case: 104 | Input/Output: [[61.59412759661106 80] 141.59412759661106]
Test Case: 105 | Input/Output: [[-4.116567592183259 -28] -32.11656759218326]
Test Case: 106 | Input/Output: [[50.081766811508714 45] 95.08176681150871]
Test Case: 107 | Input/Output: [[-41.23880912234683 51] 9.76119087765317]
Test Case: 108 | Input/Output: [[-80.6411010889342 -63] -143.6411010889342]
Test Case: 109 | Input/Output: [[42.51316213595345 28] 70.51316213595345]
Test Case: 110 | Input/Output: [[93.16882191029251 -8] 85.16882191029251]
Test Case: 111 | Input/Output: [[36.46121227205464 -36] 0.4612122720546381]
Test Case: 112 | Input/Output: [[-85.92607181196668 -89] -174.92607181196666]
Test Case: 113 | Input/Output: [[64.35503017013764 83] 147.35503017013764]
Test Case: 114 | Input/Output: [[-23.89762451156531 50] 26.10237548843469]
Test Case: 115 | Input/Output: [[-13.142097277416624 -81] -94.14209727741662]
Test Case: 116 | Input/Output: [[86.97355660985812 77] 163.97355660985812]
Test Case: 117 | Input/Output: [[33.68973330303601 -100] -66.31026669696399]
Test Case: 118 | Input/Output: [[56.41574613079831 32] 88.41574613079831]
Test Case: 119 | Input/Output: [[51.843110754152434 -91] -39.156889245847566]
Test Case: 120 | Input/Output: [[-9.980090923684187 12] 2.0199090763158125]
Test Case: 121 | Input/Output: [[80.04636371908123 -99] -18.953636280918772]
Test Case: 122 | Input/Output: [[64.17014941365963 -59] 5.1701494136596295]
Test Case: 123 | Input/Output: [[-48.6520103120704 54] 5.347989687929598]
Test Case: 124 | Input/Output: [[-17.46059432022882 92] 74.53940567977118]
Test Case: 125 | Input/Output: [[-59.55659058030904 17] -42.55659058030904]
Test Case: 126 | Input/Output: [[20.588761208594903 -84] -63.4112387914051]
Test Case: 127 | Input/Output: [[74.5781075840303 7] 81.5781075840303]
Test Case: 128 | Input/Output: [[56.59100695060772 54] 110.59100695060772]
Test Case: 129 | Input/Output: [[21.974894978140625 94] 115.97489497814063]
Test Case: 130 | Input/Output: [[-28.5917322068823 -65] -93.5917322068823]
Test Case: 131 | Input/Output: [[33.79920628497402 49] 82.79920628497402]
Test Case: 132 | Input/Output: [[-51.4518954413387 -6] -57.4518954413387]
Test Case: 133 | Input/Output: [[-39.98500488182728 56] 16.01499511817272]
Test Case: 134 | Input/Output: [[14.528055829538886 54] 68.52805582953889]
Test Case: 135 | Input/Output: [[51.0861176405225 -37] 14.086117640522502]
Test Case: 136 | Input/Output: [[-86.5826187083241 -25] -111.5826187083241]
Test Case: 137 | Input/Output: [[-98.44623096512646 78] -20.44623096512646]
Test Case: 138 | Input/Output: [[-64.19333177656416 54] -10.193331776564165]
Test Case: 139 | Input/Output: [[41.577753963001214 47] 88.57775396300121]
Test Case: 140 | Input/Output: [[-92.28170393630471 -93] -185.28170393630472]
Test Case: 141 | Input/Output: [[29.325326165242473 5] 34.32532616524247]
Test Case: 142 | Input/Output: [[-3.3819159599348154 6] 2.6180840400651846]
Test Case: 143 | Input/Output: [[0.1985922133208362 89] 89.19859221332084]
Test Case: 144 | Input/Output: [[17.42495471486538 -17] 0.42495471486537895]
Test Case: 145 | Input/Output: [[75.04377950399959 77] 152.0437795039996]
Test Case: 146 | Input/Output: [[-98.69886821325626 41] -57.69886821325626]
Test Case: 147 | Input/Output: [[90.51398991726941 -37] 53.51398991726941]
Test Case: 148 | Input/Output: [[10.469541728202557 87] 97.46954172820256]
Test Case: 149 | Input/Output: [[76.2510457373387 95] 171.2510457373387]
Test Case: 150 | Input/Output: [[42.57407761372039 -7] 35.57407761372039]
Test Case: 151 | Input/Output: [[-32.53225547862304 -31] -63.53225547862304]
Test Case: 152 | Input/Output: [[53.15700184280675 19] 72.15700184280675]
Test Case: 153 | Input/Output: [[53.282161203928496 49] 102.2821612039285]
Test Case: 154 | Input/Output: [[3.5992014817622504 -63] -59.40079851823775]
Test Case: 155 | Input/Output: [[-54.608350135742214 34] -20.608350135742214]
Test Case: 156 | Input/Output: [[-22.77210351508414 -14] -36.77210351508414]
Test Case: 157 | Input/Output: [[98.74546467890778 -76] 22.74546467890778]
Test Case: 158 | Input/Output: [[16.371159527285585 -30] -13.628840472714415]
Test Case: 159 | Input/Output: [[-79.24483321864298 80] 0.7551667813570191]
Test Case: 160 | Input/Output: [[84.22803989321034 -28] 56.22803989321034]
Test Case: 161 | Input/Output: [[-29.99151135358548 -86] -115.99151135358548]
Test Case: 162 | Input/Output: [[-40.20688657193987 -95] -135.20688657193986]
Test Case: 163 | Input/Output: [[-95.09333524963928 -5] -100.09333524963928]
Test Case: 164 | Input/Output: [[-28.322144539999258 -55] -83.32214453999926]
Test Case: 165 | Input/Output: [[22.000374804447205 42] 64.0003748044472]
Test Case: 166 | Input/Output: [[57.52507879929982 21] 78.52507879929982]
Test Case: 167 | Input/Output: [[-34.62445557427711 91] 56.37554442572289]
Test Case: 168 | Input/Output: [[94.61453676509731 65] 159.6145367650973]
Test Case: 169 | Input/Output: [[-27.957554988101904 74] 46.042445011898096]
Test Case: 170 | Input/Output: [[-46.25648712656012 -40] -86.25648712656012]
Test Case: 171 | Input/Output: [[80.8301886350061 -57] 23.830188635006095]
Test Case: 172 | Input/Output: [[48.97505645954135 3] 51.97505645954135]
Test Case: 173 | Input/Output: [[74.59477346754946 -38] 36.59477346754946]
Test Case: 174 | Input/Output: [[92.01942670696772 69] 161.01942670696772]
Test Case: 175 | Input/Output: [[-6.663046438442578 41] 34.33695356155742]
Test Case: 176 | Input/Output: [[-82.3591686257938 80] -2.3591686257937994]
Test Case: 177 | Input/Output: [[74.8049586247133 -10] 64.8049586247133]
Test Case: 178 | Input/Output: [[-40.69613519604343 -96] -136.69613519604343]
Test Case: 179 | Input/Output: [[56.83034475114809 94] 150.8303447511481]
Test Case: 180 | Input/Output: [[33.935030896769376 -63] -29.064969103230624]
Test Case: 181 | Input/Output: [[-91.22250351753945 37] -54.22250351753945]
Test Case: 182 | Input/Output: [[-6.0940472860293795 14] 7.9059527139706205]
Test Case: 183 | Input/Output: [[30.683514371993198 9] 39.6835143719932]
Test Case: 184 | Input/Output: [[-74.73460345878406 64] -10.734603458784065]
Test Case: 185 | Input/Output: [[54.673863186670815 -49] 5.673863186670815]
Test Case: 186 | Input/Output: [[64.71874905212954 98] 162.71874905212954]
Test Case: 187 | Input/Output: [[-53.476553416181005 59] 5.523446583818995]
Test Case: 188 | Input/Output: [[-28.826454307512364 -95] -123.82645430751236]
Test Case: 189 | Input/Output: [[15.888441914390071 56] 71.88844191439007]
Test Case: 190 | Input/Output: [[30.73119864078285 -52] -21.26880135921715]
Test Case: 191 | Input/Output: [[-12.642204892181283 94] 81.35779510781872]
Test Case: 192 | Input/Output: [[18.431022508015275 51] 69.43102250801527]
Test Case: 193 | Input/Output: [[16.663245327605708 -97] -80.33675467239429]
Test Case: 194 | Input/Output: [[31.67140186208769 -19] 12.671401862087691]
Test Case: 195 | Input/Output: [[88.3583919056189 -34] 54.3583919056189]
Test Case: 196 | Input/Output: [[57.969817669601866 -26] 31.969817669601866]
Test Case: 197 | Input/Output: [[53.32468369745234 -4] 49.32468369745234]
Test Case: 198 | Input/Output: [[42.56334463503069 -67] -24.43665536496931]
Test Case: 199 | Input/Output: [[-0.2022445268762567 -81] -81.20224452687626]
Test Case: 200 | Input/Output: [[-50.97582756912982 94] 43.02417243087018]
Test Case: 201 | Input/Output: [[7.9577298359745186 59] 66.95772983597452]
Test Case: 202 | Input/Output: [[90.56237171313762 -48] 42.56237171313762]
Test Case: 203 | Input/Output: [[-77.47179436945217 -43] -120.47179436945217]
Test Case: 204 | Input/Output: [[68.74104741951373 -80] -11.258952580486266]
Test Case: 205 | Input/Output: [[-56.696691256684396 52] -4.696691256684396]
Test Case: 206 | Input/Output: [[78.22059979476214 63] 141.22059979476214]
Test Case: 207 | Input/Output: [[4.2652909608155625 18] 22.265290960815562]
Test Case: 208 | Input/Output: [[77.34119905973981 -61] 16.341199059739807]
Test Case: 209 | Input/Output: [[16.66368948327434 95] 111.66368948327434]
Test Case: 210 | Input/Output: [[-76.42264813328354 16] -60.422648133283545]
Test Case: 211 | Input/Output: [[73.22604772986034 -83] -9.77395227013966]
Test Case: 212 | Input/Output: [[-48.86090293060972 5] -43.86090293060972]
Test Case: 213 | Input/Output: [[-0.11649501129278406 -10] -10.116495011292784]
Test Case: 214 | Input/Output: [[86.09886128167614 -87] -0.9011387183238639]
Test Case: 215 | Input/Output: [[62.66734452195524 -76] -13.332655478044757]
Test Case: 216 | Input/Output: [[-76.233047999823 -58] -134.233047999823]
Test Case: 217 | Input/Output: [[-99.8889336865973 -60] -159.88893368659728]
Test Case: 218 | Input/Output: [[67.00686056200291 -99] -31.993139437997087]
Test Case: 219 | Input/Output: [[25.201072984408412 2] 27.201072984408412]
Test Case: 220 | Input/Output: [[-55.567210482369525 -5] -60.567210482369525]
Test Case: 221 | Input/Output: [[11.71535606485432 64] 75.71535606485432]
Test Case: 222 | Input/Output: [[43.540303881187754 -10] 33.540303881187754]
Test Case: 223 | Input/Output: [[65.38622685482528 54] 119.38622685482528]
Test Case: 224 | Input/Output: [[-46.024963816655614 7] -39.024963816655614]
Test Case: 225 | Input/Output: [[-51.36945304982292 -85] -136.36945304982294]
Test Case: 226 | Input/Output: [[-1.8382767246153833 -55] -56.83827672461538]
Test Case: 227 | Input/Output: [[81.76355490341524 -1] 80.76355490341524]
Test Case: 228 | Input/Output: [[47.57468670452636 75] 122.57468670452636]
Test Case: 229 | Input/Output: [[-94.19566403335618 -66] -160.1956640333562]
Test Case: 230 | Input/Output: [[84.08338995718717 -97] -12.916610042812835]
Test Case: 231 | Input/Output: [[-79.79844770211841 -6] -85.79844770211841]
Test Case: 232 | Input/Output: [[94.21117525485047 44] 138.21117525485047]
Test Case: 233 | Input/Output: [[72.89268437156622 57] 129.89268437156622]
Test Case: 234 | Input/Output: [[-43.69547236897273 53] 9.30452763102727]
Test Case: 235 | Input/Output: [[-90.18545006442702 -62] -152.18545006442702]
Test Case: 236 | Input/Output: [[-38.45867055539638 51] 12.541329444603619]
Test Case: 237 | Input/Output: [[-93.7454445644305 57] -36.7454445644305]
Test Case: 238 | Input/Output: [[-16.57885584299538 -80] -96.57885584299538]
Test Case: 239 | Input/Output: [[-13.871825890791655 12] -1.871825890791655]
Test Case: 240 | Input/Output: [[-73.62426142761322 13] -60.62426142761322]
Test Case: 241 | Input/Output: [[3.065162573031273 -6] -2.934837426968727]
Test Case: 242 | Input/Output: [[68.25807439669785 84] 152.25807439669785]
Test Case: 243 | Input/Output: [[-80.25526510129012 88] 7.744734898709879]
Test Case: 244 | Input/Output: [[3.959524789152553 -76] -72.04047521084745]
Test Case: 245 | Input/Output: [[67.80592311020618 -65] 2.80592311020618]
Test Case: 246 | Input/Output: [[-67.21735033928732 60] -7.2173503392873215]
Test Case: 247 | Input/Output: [[44.15270555313671 56] 100.15270555313671]
Test Case: 248 | Input/Output: [[-3.4479030372227157 -66] -69.44790303722272]
Test Case: 249 | Input/Output: [[-1.392690487481076 84] 82.60730951251892]
Test Case: 250 | Input/Output: [[54.00874417951775 88] 142.00874417951775]
Test Case: 251 | Input/Output: [[-77.82740992693073 86] 8.172590073069273]
Test Case: 252 | Input/Output: [[57.66839183396695 -35] 22.66839183396695]
Test Case: 253 | Input/Output: [[43.346421356927465 37] 80.34642135692746]
Test Case: 254 | Input/Output: [[39.06592755853825 -2] 37.06592755853825]
Test Case: 255 | Input/Output: [[-97.25524906888879 -51] -148.2552490688888]
Test Case: 256 | Input/Output: [[-72.82435897489954 -72] -144.82435897489955]
Test Case: 257 | Input/Output: [[98.12405381661057 -19] 79.12405381661057]
Test Case: 258 | Input/Output: [[58.524881258260706 -36] 22.524881258260706]
Test Case: 259 | Input/Output: [[59.71183187189527 58] 117.71183187189527]
Test Case: 260 | Input/Output: [[50.85730490974811 -94] -43.14269509025189]
Test Case: 261 | Input/Output: [[-76.26748316998373 14] -62.267483169983734]
Test Case: 262 | Input/Output: [[54.545744005007634 35] 89.54574400500763]
Test Case: 263 | Input/Output: [[-36.21865197513054 -43] -79.21865197513054]
Test Case: 264 | Input/Output: [[47.17636625253391 56] 103.17636625253391]
Test Case: 265 | Input/Output: [[95.63720065921024 51] 146.63720065921024]
Test Case: 266 | Input/Output: [[11.34963719344313 3] 14.34963719344313]
Test Case: 267 | Input/Output: [[-38.10628686224429 -61] -99.10628686224429]
Test Case: 268 | Input/Output: [[-4.492705815638814 94] 89.50729418436119]
Test Case: 269 | Input/Output: [[-76.00386940388988 -96] -172.0038694038899]
Test Case: 270 | Input/Output: [[12.773441159360317 13] 25.773441159360317]
Test Case: 271 | Input/Output: [[23.483532925965108 37] 60.48353292596511]
Test Case: 272 | Input/Output: [[-59.556337937988644 93] 33.443662062011356]
Test Case: 273 | Input/Output: [[-56.180926307347654 -19] -75.18092630734765]
Test Case: 274 | Input/Output: [[-5.903967140342445 4] -1.903967140342445]
Test Case: 275 | Input/Output: [[84.25654573741281 -50] 34.25654573741281]
Test Case: 276 | Input/Output: [[-85.67892392895409 -9] -94.67892392895409]
Test Case: 277 | Input/Output: [[-32.55151994173001 -25] -57.55151994173001]
Test Case: 278 | Input/Output: [[23.999994979496194 -23] 0.9999949794961935]
Test Case: 279 | Input/Output: [[-43.03638751908736 93] 49.96361248091264]
Test Case: 280 | Input/Output: [[38.282022434188576 72] 110.28202243418858]
Test Case: 281 | Input/Output: [[-52.72005684464733 74] 21.27994315535267]
Test Case: 282 | Input/Output: [[12.20727481235133 -80] -67.79272518764867]
Test Case: 283 | Input/Output: [[-25.14316002974462 -4] -29.14316002974462]
Test Case: 284 | Input/Output: [[-87.0703010179401 42] -45.070301017940096]
Test Case: 285 | Input/Output: [[-56.54683737104919 69] 12.453162628950807]
Test Case: 286 | Input/Output: [[84.45100620168327 -26] 58.45100620168327]
Test Case: 287 | Input/Output: [[52.452762930115284 -80] -27.547237069884716]
Test Case: 288 | Input/Output: [[-22.523548728639284 85] 62.476451271360716]
Test Case: 289 | Input/Output: [[-27.399830220804077 85] 57.60016977919592]
Test Case: 290 | Input/Output: [[-92.22435599579737 -15] -107.22435599579737]
Test Case: 291 | Input/Output: [[77.00351955697303 -43] 34.00351955697303]
Test Case: 292 | Input/Output: [[53.20142102191073 -74] -20.798578978089267]
Test Case: 293 | Input/Output: [[94.25588472618 1] 95.25588472618]
Test Case: 294 | Input/Output: [[33.940878310722866 -98] -64.05912168927713]
Test Case: 295 | Input/Output: [[-92.79187827638027 -94] -186.79187827638026]
Test Case: 296 | Input/Output: [[66.9491111599298 -3] 63.9491111599298]
Test Case: 297 | Input/Output: [[-86.99700545036886 -59] -145.99700545036887]
Test Case: 298 | Input/Output: [[57.194748710850575 51] 108.19474871085058]
Test Case: 299 | Input/Output: [[-51.56815769121532 -61] -112.56815769121532]
Test Case: 300 | Input/Output: [[-42.76128850597847 -2] -44.76128850597847]
Test Case: 301 | Input/Output: [[0.7959090182693984 -85] -84.2040909817306]
Test Case: 302 | Input/Output: [[-6.34944770069292 67] 60.65055229930708]
Test Case: 303 | Input/Output: [[46.70699415699269 -74] -27.293005843007307]
Test Case: 304 | Input/Output: [[37.39923364850321 -55] -17.600766351496787]
Test Case: 305 | Input/Output: [[-71.32125466498908 23] -48.321254664989084]
Test Case: 306 | Input/Output: [[55.73593677234567 51] 106.73593677234567]
Test Case: 307 | Input/Output: [[47.878421944482426 -63] -15.121578055517574]
Test Case: 308 | Input/Output: [[-89.86762101715746 36] -53.86762101715746]
Test Case: 309 | Input/Output: [[64.26830833754772 54] 118.26830833754772]
Test Case: 310 | Input/Output: [[-32.03448478828976 86] 53.96551521171024]
Test Case: 311 | Input/Output: [[-15.970728536561126 -4] -19.970728536561126]
Test Case: 312 | Input/Output: [[4.3179938828064195 -75] -70.68200611719358]
Test Case: 313 | Input/Output: [[-68.0131146976332 -34] -102.0131146976332]
Test Case: 314 | Input/Output: [[-17.925743240166852 -9] -26.925743240166852]
Test Case: 315 | Input/Output: [[-48.11709536377413 -82] -130.11709536377413]
Test Case: 316 | Input/Output: [[80.93139925255869 10] 90.93139925255869]
Test Case: 317 | Input/Output: [[10.45256864253679 62] 72.45256864253679]
Test Case: 318 | Input/Output: [[54.053585627908916 -75] -20.946414372091084]
Test Case: 319 | Input/Output: [[38.51301405884578 5] 43.51301405884578]
Test Case: 320 | Input/Output: [[72.9723787741888 -96] -23.027621225811203]
Test Case: 321 | Input/Output: [[32.23038724302975 -40] -7.769612756970247]
Test Case: 322 | Input/Output: [[35.808686982341555 -83] -47.191313017658445]
Test Case: 323 | Input/Output: [[4.212005636820493 -76] -71.78799436317951]
Test Case: 324 | Input/Output: [[-8.847545801497361 59] 50.15245419850264]
Test Case: 325 | Input/Output: [[54.54372869149472 -5] 49.54372869149472]
Test Case: 326 | Input/Output: [[-28.844469590795654 -31] -59.844469590795654]
Test Case: 327 | Input/Output: [[-32.877800058837764 -20] -52.877800058837764]
Test Case: 328 | Input/Output: [[8.235242425407023 7] 15.235242425407023]
Test Case: 329 | Input/Output: [[-4.600880460291037 -97] -101.60088046029104]
Test Case: 330 | Input/Output: [[57.892372032067726 -1] 56.892372032067726]
Test Case: 331 | Input/Output: [[-57.52696039158782 -90] -147.5269603915878]
Test Case: 332 | Input/Output: [[70.94619755805203 59] 129.94619755805203]
Test Case: 333 | Input/Output: [[-94.5964146684494 66] -28.5964146684494]
Test Case: 334 | Input/Output: [[40.60729597881033 -58] -17.392704021189672]
Test Case: 335 | Input/Output: [[-52.620976179649844 6] -46.620976179649844]
Test Case: 336 | Input/Output: [[3.675626985501097 -6] -2.324373014498903]
Test Case: 337 | Input/Output: [[-98.52881062723928 -93] -191.5288106272393]
Test Case: 338 | Input/Output: [[58.15960099721491 100] 158.1596009972149]
Test Case: 339 | Input/Output: [[-96.18475025164904 -98] -194.18475025164904]
Test Case: 340 | Input/Output: [[39.298864991603836 -41] -1.7011350083961645]
Test Case: 341 | Input/Output: [[-7.186040712077897 75] 67.8139592879221]
Test Case: 342 | Input/Output: [[-46.82901626090881 -28] -74.82901626090882]
Test Case: 343 | Input/Output: [[37.04898903649911 -16] 21.04898903649911]
Test Case: 344 | Input/Output: [[2.2969492652717918 92] 94.29694926527179]
Test Case: 345 | Input/Output: [[-31.00937453806661 38] 6.990625461933391]
Test Case: 346 | Input/Output: [[-60.61151556330429 -89] -149.6115155633043]
Test Case: 347 | Input/Output: [[84.53540516052462 -67] 17.53540516052462]
Test Case: 348 | Input/Output: [[43.75233226283089 -47] -3.2476677371691096]
Test Case: 349 | Input/Output: [[-47.342364777646864 -65] -112.34236477764686]
Test Case: 350 | Input/Output: [[-7.191747669105865 -78] -85.19174766910587]
Test Case: 351 | Input/Output: [[-51.58001961908014 57] 5.41998038091986]
Test Case: 352 | Input/Output: [[-21.85927618266716 -64] -85.85927618266716]
Test Case: 353 | Input/Output: [[91.01344511802009 28] 119.01344511802009]
Test Case: 354 | Input/Output: [[48.931794774275744 -78] -29.068205225724256]
Test Case: 355 | Input/Output: [[95.58348102961565 5] 100.58348102961565]
Test Case: 356 | Input/Output: [[80.30539894683443 -99] -18.69460105316557]
Test Case: 357 | Input/Output: [[68.41908700236385 78] 146.41908700236385]
Test Case: 358 | Input/Output: [[52.80220344169507 80] 132.80220344169507]
Test Case: 359 | Input/Output: [[-18.52710757294534 -96] -114.52710757294534]
Test Case: 360 | Input/Output: [[99.20768865620713 -66] 33.207688656207125]
Test Case: 361 | Input/Output: [[60.052559922343306 44] 104.0525599223433]
Test Case: 362 | Input/Output: [[-29.149074877797105 24] -5.149074877797105]
Test Case: 363 | Input/Output: [[24.869212269615517 33] 57.86921226961552]
Test Case: 364 | Input/Output: [[67.16931222096073 -60] 7.169312220960734]
Test Case: 365 | Input/Output: [[-89.46794267482052 45] -44.46794267482052]
Test Case: 366 | Input/Output: [[71.48849120268179 86] 157.4884912026818]
Test Case: 367 | Input/Output: [[-28.45655159755107 4] -24.45655159755107]
Test Case: 368 | Input/Output: [[52.45469415108903 17] 69.45469415108903]
Test Case: 369 | Input/Output: [[-54.35364306806636 19] -35.35364306806636]
Test Case: 370 | Input/Output: [[-94.17130136254339 25] -69.17130136254339]
Test Case: 371 | Input/Output: [[-53.00630348656805 -97] -150.00630348656804]
Test Case: 372 | Input/Output: [[-38.98861901300741 -50] -88.98861901300741]
Test Case: 373 | Input/Output: [[-78.14772519841198 26] -52.147725198411976]
Test Case: 374 | Input/Output: [[92.25517250790975 -57] 35.25517250790975]
Test Case: 375 | Input/Output: [[29.23301718539659 -13] 16.23301718539659]
Test Case: 376 | Input/Output: [[-4.268276909528154 61] 56.731723090471846]
Test Case: 377 | Input/Output: [[55.22522605611729 -56] -0.7747739438827068]
Test Case: 378 | Input/Output: [[52.39099866070512 -7] 45.39099866070512]
Test Case: 379 | Input/Output: [[-89.8299179843733 -79] -168.8299179843733]
Test Case: 380 | Input/Output: [[87.8826932835054 16] 103.8826932835054]
Test Case: 381 | Input/Output: [[80.59517474153557 88] 168.59517474153557]
Test Case: 382 | Input/Output: [[-42.46904646243479 -50] -92.46904646243479]
Test Case: 383 | Input/Output: [[24.174121881252404 26] 50.174121881252404]
Test Case: 384 | Input/Output: [[-48.93450953034881 -74] -122.9345095303488]
Test Case: 385 | Input/Output: [[-4.353181815465334 6] 1.6468181845346663]
Test Case: 386 | Input/Output: [[29.190560064654875 25] 54.190560064654875]
Test Case: 387 | Input/Output: [[-92.98523555637543 4] -88.98523555637543]
Test Case: 388 | Input/Output: [[25.926183942849065 82] 107.92618394284906]
Test Case: 389 | Input/Output: [[39.39679941756765 -41] -1.6032005824323505]
Test Case: 390 | Input/Output: [[-88.7765720342357 -4] -92.7765720342357]
Test Case: 391 | Input/Output: [[-3.97660639849353 -38] -41.97660639849353]
Test Case: 392 | Input/Output: [[-47.838156025461245 -57] -104.83815602546125]
Test Case: 393 | Input/Output: [[54.95054847862312 45] 99.95054847862312]
Test Case: 394 | Input/Output: [[-25.54696805104011 54] 28.45303194895989]
Test Case: 395 | Input/Output: [[-42.35326551471081 46] 3.646734485289187]
Test Case: 396 | Input/Output: [[28.51357755015323 43] 71.51357755015323]
Test Case: 397 | Input/Output: [[-64.3242777294862 -95] -159.3242777294862]
Test Case: 398 | Input/Output: [[63.727794949708425 78] 141.72779494970843]
Test Case: 399 | Input/Output: [[29.212302935831474 26] 55.212302935831474]
Test Case: 400 | Input/Output: [[7.167354227874512 61] 68.16735422787451]
Test Case: 401 | Input/Output: [[-2.5772608191570754 -75] -77.57726081915708]
Test Case: 402 | Input/Output: [[24.93345649706795 100] 124.93345649706795]
Test Case: 403 | Input/Output: [[-61.58670943761004 15] -46.58670943761004]
Test Case: 404 | Input/Output: [[46.544776565446256 -16] 30.544776565446256]
Test Case: 405 | Input/Output: [[-94.3477901456507 77] -17.347790145650706]
Test Case: 406 | Input/Output: [[49.3018808129585 69] 118.3018808129585]
Test Case: 407 | Input/Output: [[-15.68462245866877 70] 54.31537754133123]
Test Case: 408 | Input/Output: [[-68.019236976649 -70] -138.01923697664898]
Test Case: 409 | Input/Output: [[-21.593651682115606 -97] -118.5936516821156]
Test Case: 410 | Input/Output: [[-21.541192287598605 -98] -119.5411922875986]
Test Case: 411 | Input/Output: [[-25.68725371420497 67] 41.31274628579503]
Test Case: 412 | Input/Output: [[4.85566833562774 -86] -81.14433166437226]
Test Case: 413 | Input/Output: [[-8.674303053733667 5] -3.6743030537336665]
Test Case: 414 | Input/Output: [[67.11686392224607 -31] 36.11686392224607]
Test Case: 415 | Input/Output: [[12.034346603106869 36] 48.03434660310687]
Test Case: 416 | Input/Output: [[35.90358655099325 30] 65.90358655099325]
Test Case: 417 | Input/Output: [[5.043068168907183 1] 6.043068168907183]
Test Case: 418 | Input/Output: [[-54.86675274688804 -22] -76.86675274688804]
Test Case: 419 | Input/Output: [[-40.511103993590126 -75] -115.51110399359013]
Test Case: 420 | Input/Output: [[13.981937586570268 -77] -63.01806241342973]
Test Case: 421 | Input/Output: [[27.26514846060506 -53] -25.73485153939494]
Test Case: 422 | Input/Output: [[-46.96123284808231 43] -3.961232848082311]
Test Case: 423 | Input/Output: [[20.75889827005257 -78] -57.24110172994743]
Test Case: 424 | Input/Output: [[46.01329539643797 -57] -10.986704603562032]
Test Case: 425 | Input/Output: [[-22.438020642835383 -62] -84.43802064283538]
Test Case: 426 | Input/Output: [[-22.310814794648294 81] 58.689185205351706]
Test Case: 427 | Input/Output: [[-12.12308031229621 17] 4.87691968770379]
Test Case: 428 | Input/Output: [[31.61624501526029 -1] 30.61624501526029]
Test Case: 429 | Input/Output: [[-46.99786761523512 -10] -56.99786761523512]
Test Case: 430 | Input/Output: [[-94.87947340976169 -4] -98.87947340976169]
Test Case: 431 | Input/Output: [[63.98314645042501 72] 135.983146450425]
Test Case: 432 | Input/Output: [[5.151917885492537 5] 10.151917885492537]
Test Case: 433 | Input/Output: [[-64.25124934912733 -15] -79.25124934912733]
Test Case: 434 | Input/Output: [[68.98686188318405 -30] 38.98686188318405]
Test Case: 435 | Input/Output: [[41.19240655315511 91] 132.1924065531551]
Test Case: 436 | Input/Output: [[-99.05894796226006 -71] -170.05894796226005]
Test Case: 437 | Input/Output: [[94.01873399176901 78] 172.018733991769]
Test Case: 438 | Input/Output: [[-66.17727727885105 62] -4.177277278851051]
Test Case: 439 | Input/Output: [[-5.010799893896717 55] 49.98920010610328]
Test Case: 440 | Input/Output: [[31.548347705831645 -73] -41.451652294168355]
Test Case: 441 | Input/Output: [[62.23468951078877 -43] 19.23468951078877]
Test Case: 442 | Input/Output: [[63.55388304941542 -21] 42.55388304941542]
Test Case: 443 | Input/Output: [[-51.67159083302224 -38] -89.67159083302224]
Test Case: 444 | Input/Output: [[26.347050517608466 42] 68.34705051760847]
Test Case: 445 | Input/Output: [[-75.41499760461024 -89] -164.41499760461022]
Test Case: 446 | Input/Output: [[89.47297327151702 23] 112.47297327151702]
Test Case: 447 | Input/Output: [[-3.587154854583474 -74] -77.58715485458347]
Test Case: 448 | Input/Output: [[40.63531294554099 17] 57.63531294554099]
Test Case: 449 | Input/Output: [[63.53677016290831 57] 120.53677016290831]
Test Case: 450 | Input/Output: [[64.69877757232786 21] 85.69877757232786]
Test Case: 451 | Input/Output: [[52.47832921588022 84] 136.47832921588022]
Test Case: 452 | Input/Output: [[73.84548421216235 -74] -0.15451578783765285]
Test Case: 453 | Input/Output: [[28.411819166297704 -31] -2.588180833702296]
Test Case: 454 | Input/Output: [[-45.55037948103775 -89] -134.55037948103774]
Test Case: 455 | Input/Output: [[81.68426298660424 85] 166.68426298660424]
Test Case: 456 | Input/Output: [[15.716451704684104 65] 80.7164517046841]
Test Case: 457 | Input/Output: [[6.0230379063627595 34] 40.02303790636276]
Test Case: 458 | Input/Output: [[10.32363921406656 -13] -2.67636078593344]
Test Case: 459 | Input/Output: [[-68.23496816857788 75] 6.765031831422121]
Test Case: 460 | Input/Output: [[-37.11757836561749 47] 9.88242163438251]
Test Case: 461 | Input/Output: [[-94.03791411678846 90] -4.037914116788457]
Test Case: 462 | Input/Output: [[69.52780524671252 -24] 45.52780524671252]
Test Case: 463 | Input/Output: [[-98.18342439617902 68] -30.18342439617902]
Test Case: 464 | Input/Output: [[56.98734124528079 -72] -15.012658754719212]
Test Case: 465 | Input/Output: [[25.43494118961847 -41] -15.56505881038153]
Test Case: 466 | Input/Output: [[87.17748791561422 -37] 50.17748791561422]
Test Case: 467 | Input/Output: [[-24.88199094840317 -47] -71.88199094840317]
Test Case: 468 | Input/Output: [[73.73133725214848 -46] 27.731337252148478]
Test Case: 469 | Input/Output: [[-35.31516976622113 64] 28.684830233778868]
Test Case: 470 | Input/Output: [[32.392400187055415 63] 95.39240018705542]
Test Case: 471 | Input/Output: [[-31.633496882952628 25] -6.6334968829526275]
Test Case: 472 | Input/Output: [[-9.134334740166736 72] 62.865665259833264]
Test Case: 473 | Input/Output: [[88.84192711210758 62] 150.84192711210758]
Test Case: 474 | Input/Output: [[43.53579044878123 67] 110.53579044878123]
Test Case: 475 | Input/Output: [[-70.29440535923806 97] 26.705594640761944]
Test Case: 476 | Input/Output: [[95.60835046420527 -40] 55.60835046420527]
Test Case: 477 | Input/Output: [[-6.614007453813954 52] 45.385992546186046]
Test Case: 478 | Input/Output: [[-70.24657778973409 -77] -147.2465777897341]
Test Case: 479 | Input/Output: [[-30.014116716549694 35] 4.985883283450306]
Test Case: 480 | Input/Output: [[19.181052730947542 -78] -58.81894726905246]
Test Case: 481 | Input/Output: [[-4.379059424086336 30] 25.620940575913664]
Test Case: 482 | Input/Output: [[-84.67741060859436 -14] -98.67741060859436]
Test Case: 483 | Input/Output: [[5.616000738695277 56] 61.61600073869528]
Test Case: 484 | Input/Output: [[-38.50105101323658 73] 34.49894898676342]
Test Case: 485 | Input/Output: [[-55.77043375306043 -18] -73.77043375306043]
Test Case: 486 | Input/Output: [[-22.16336187917736 40] 17.83663812082264]
Test Case: 487 | Input/Output: [[-62.36719982509031 -95] -157.36719982509032]
Test Case: 488 | Input/Output: [[-4.0560709755939115 36] 31.94392902440609]
Test Case: 489 | Input/Output: [[71.92880094959662 95] 166.92880094959662]
Test Case: 490 | Input/Output: [[-76.1373078180641 -45] -121.1373078180641]
Test Case: 491 | Input/Output: [[81.27691136859767 -84] -2.7230886314023337]
Test Case: 492 | Input/Output: [[62.21980033739567 -25] 37.21980033739567]
Test Case: 493 | Input/Output: [[-19.119415546532508 -46] -65.11941554653251]
Test Case: 494 | Input/Output: [[45.9419959269855 73] 118.9419959269855]
Test Case: 495 | Input/Output: [[-90.0295509107681 -77] -167.02955091076808]
Test Case: 496 | Input/Output: [[76.04896391106843 84] 160.04896391106843]
Test Case: 497 | Input/Output: [[87.79940894984165 5] 92.79940894984165]
Test Case: 498 | Input/Output: [[5.3227176000256975 -19] -13.677282399974303]
Test Case: 499 | Input/Output: [[-85.51145221334282 -51] -136.5114522133428]
Test Case: 500 | Input/Output: [[57.00855113286306 73] 130.00855113286306]
Test Case: 501 | Input/Output: [[84.94551280532957 35] 119.94551280532957]
Test Case: 502 | Input/Output: [[-51.55742997605239 -14] -65.55742997605239]
Test Case: 503 | Input/Output: [[-30.82197728835736 14] -16.82197728835736]
Test Case: 504 | Input/Output: [[-69.18133506786518 -3] -72.18133506786518]
Test Case: 505 | Input/Output: [[77.39093949676914 29] 106.39093949676914]
Test Case: 506 | Input/Output: [[59.01359573234109 -39] 20.013595732341088]
Test Case: 507 | Input/Output: [[34.211243445183925 16] 50.211243445183925]
Test Case: 508 | Input/Output: [[40.27646296690037 34] 74.27646296690037]
Test Case: 509 | Input/Output: [[59.96406959377049 58] 117.96406959377049]
Test Case: 510 | Input/Output: [[17.720660101899483 31] 48.72066010189948]
Test Case: 511 | Input/Output: [[92.09999196877021 -86] 6.099991968770212]
Test Case: 512 | Input/Output: [[31.807261078037982 -84] -52.19273892196202]
Test Case: 513 | Input/Output: [[-2.273231787698606 98] 95.7267682123014]
Test Case: 514 | Input/Output: [[-72.19033108229988 57] -15.190331082299878]
Test Case: 515 | Input/Output: [[-51.52166881792986 -6] -57.52166881792986]
Test Case: 516 | Input/Output: [[-38.07551251738561 -39] -77.07551251738562]
Test Case: 517 | Input/Output: [[-51.17621466861062 -56] -107.17621466861061]
Test Case: 518 | Input/Output: [[2.043630449778732 39] 41.04363044977873]
Test Case: 519 | Input/Output: [[-61.49092415044972 -54] -115.49092415044973]
Test Case: 520 | Input/Output: [[15.5747996761922 -99] -83.4252003238078]
Test Case: 521 | Input/Output: [[31.386941792709536 -19] 12.386941792709536]
Test Case: 522 | Input/Output: [[-32.66250256107499 82] 49.33749743892501]
Test Case: 523 | Input/Output: [[8.79745966658298 90] 98.79745966658298]
Test Case: 524 | Input/Output: [[10.550897248278261 -4] 6.550897248278261]
Test Case: 525 | Input/Output: [[-38.03551940647747 57] 18.96448059352253]
Test Case: 526 | Input/Output: [[-88.69020401153105 62] -26.69020401153105]
Test Case: 527 | Input/Output: [[-65.67167802140128 -73] -138.67167802140128]
Test Case: 528 | Input/Output: [[47.93524240808267 59] 106.93524240808267]
Test Case: 529 | Input/Output: [[-24.958179342152505 -53] -77.9581793421525]
Test Case: 530 | Input/Output: [[40.936656153813004 -52] -11.063343846186996]
Test Case: 531 | Input/Output: [[-20.529472289736532 -68] -88.52947228973653]
Test Case: 532 | Input/Output: [[-27.736176855076494 -39] -66.7361768550765]
Test Case: 533 | Input/Output: [[37.27668779078226 -54] -16.723312209217738]
Test Case: 534 | Input/Output: [[61.46486614950771 44] 105.46486614950771]
Test Case: 535 | Input/Output: [[-42.24793180882804 -14] -56.24793180882804]
Test Case: 536 | Input/Output: [[-25.497297111086525 -22] -47.497297111086525]
Test Case: 537 | Input/Output: [[-62.64124807121048 -76] -138.64124807121047]
Test Case: 538 | Input/Output: [[-53.59996959853053 57] 3.400030401469472]
Test Case: 539 | Input/Output: [[72.61810948117417 97] 169.61810948117417]
Test Case: 540 | Input/Output: [[-70.67524828596146 58] -12.675248285961459]
Test Case: 541 | Input/Output: [[-43.42828248810413 92] 48.57171751189587]
Test Case: 542 | Input/Output: [[49.11241904619999 69] 118.11241904619999]
Test Case: 543 | Input/Output: [[14.127064004608883 -12] 2.127064004608883]
Test Case: 544 | Input/Output: [[15.142382755303757 -14] 1.1423827553037569]
Test Case: 545 | Input/Output: [[99.4507559826746 94] 193.4507559826746]
Test Case: 546 | Input/Output: [[72.67735360133577 60] 132.67735360133577]
Test Case: 547 | Input/Output: [[-98.33816092485405 29] -69.33816092485405]
Test Case: 548 | Input/Output: [[1.7583207292077674 45] 46.75832072920777]
Test Case: 549 | Input/Output: [[-49.82516649659683 -43] -92.82516649659684]
Test Case: 550 | Input/Output: [[14.837433170422827 62] 76.83743317042283]
Test Case: 551 | Input/Output: [[19.991350224285014 99] 118.99135022428501]
Test Case: 552 | Input/Output: [[19.189168149324587 95] 114.18916814932459]
Test Case: 553 | Input/Output: [[-94.95701881797942 -38] -132.95701881797942]
Test Case: 554 | Input/Output: [[29.910477577149038 87] 116.91047757714904]
Test Case: 555 | Input/Output: [[-99.00441364784565 22] -77.00441364784565]
Test Case: 556 | Input/Output: [[95.64481705128048 50] 145.64481705128048]
Test Case: 557 | Input/Output: [[-26.585638363895598 9] -17.585638363895598]
Test Case: 558 | Input/Output: [[88.74835729762734 -70] 18.748357297627336]
Test Case: 559 | Input/Output: [[20.536302728926856 -79] -58.463697271073144]
Test Case: 560 | Input/Output: [[10.243608771605281 56] 66.24360877160528]
Test Case: 561 | Input/Output: [[2.7866601486638416 28] 30.78666014866384]
Test Case: 562 | Input/Output: [[-26.541547438085985 89] 62.458452561914015]
Test Case: 563 | Input/Output: [[-52.1745190513311 -34] -86.1745190513311]
Test Case: 564 | Input/Output: [[-11.892845087778213 -81] -92.89284508777821]
Test Case: 565 | Input/Output: [[-44.653808750340865 -85] -129.65380875034086]
Test Case: 566 | Input/Output: [[-28.081715651907956 -85] -113.08171565190796]
Test Case: 567 | Input/Output: [[37.631993739313884 56] 93.63199373931388]
Test Case: 568 | Input/Output: [[-28.443140252529147 96] 67.55685974747085]
Test Case: 569 | Input/Output: [[55.58462984125484 -1] 54.58462984125484]
Test Case: 570 | Input/Output: [[12.904651779571537 -40] -27.095348220428463]
Test Case: 571 | Input/Output: [[-11.633223224208052 -72] -83.63322322420805]
Test Case: 572 | Input/Output: [[-71.86856227512209 -31] -102.86856227512209]
Test Case: 573 | Input/Output: [[19.064761628060637 99] 118.06476162806064]
Test Case: 574 | Input/Output: [[86.56457549150741 7] 93.56457549150741]
Test Case: 575 | Input/Output: [[34.24097969833261 -96] -61.75902030166739]
Test Case: 576 | Input/Output: [[54.49365233245834 -38] 16.49365233245834]
Test Case: 577 | Input/Output: [[-42.294908843529335 -54] -96.29490884352933]
Test Case: 578 | Input/Output: [[-98.90219721686763 -63] -161.90219721686765]
Test Case: 579 | Input/Output: [[-83.19843113750427 40] -43.19843113750427]
Test Case: 580 | Input/Output: [[17.73319202362731 -66] -48.26680797637269]
Test Case: 581 | Input/Output: [[88.43154349890753 76] 164.43154349890753]
Test Case: 582 | Input/Output: [[33.19857092006694 -74] -40.80142907993306]
Test Case: 583 | Input/Output: [[-60.06084105828231 77] 16.939158941717693]
Test Case: 584 | Input/Output: [[7.6272610185058625 -80] -72.37273898149414]
Test Case: 585 | Input/Output: [[-7.316491793100965 98] 90.68350820689903]
Test Case: 586 | Input/Output: [[84.45919761150193 39] 123.45919761150193]
Test Case: 587 | Input/Output: [[-68.22605845252949 72] 3.773941547470514]
Test Case: 588 | Input/Output: [[96.18404033070394 81] 177.18404033070394]
Test Case: 589 | Input/Output: [[-75.34773308139171 -24] -99.34773308139171]
Test Case: 590 | Input/Output: [[-91.97480503538125 -96] -187.97480503538125]
Test Case: 591 | Input/Output: [[68.03458794936003 -83] -14.96541205063997]
Test Case: 592 | Input/Output: [[75.24015660776209 59] 134.2401566077621]
Test Case: 593 | Input/Output: [[-94.83723656942489 -63] -157.83723656942487]
Test Case: 594 | Input/Output: [[19.85113788440303 47] 66.85113788440303]
Test Case: 595 | Input/Output: [[-60.68527390515819 43] -17.68527390515819]
Test Case: 596 | Input/Output: [[41.75451788593608 40] 81.75451788593608]
Test Case: 597 | Input/Output: [[33.57676355231925 -57] -23.42323644768075]
Test Case: 598 | Input/Output: [[61.19451634917118 31] 92.19451634917118]
Test Case: 599 | Input/Output: [[4.481950304401906 -82] -77.5180496955981]
Test Case: 600 | Input/Output: [[-60.92965050628043 42] -18.92965050628043]
Test Case: 601 | Input/Output: [[-26.654089415891576 51] 24.345910584108424]
Test Case: 602 | Input/Output: [[67.19868563766883 -78] -10.80131436233117]
Test Case: 603 | Input/Output: [[-49.13070234055117 37] -12.130702340551167]
Test Case: 604 | Input/Output: [[-94.45818427161754 -43] -137.45818427161754]
Test Case: 605 | Input/Output: [[-0.4147293895415487 -13] -13.414729389541549]
Test Case: 606 | Input/Output: [[86.84537525037527 -20] 66.84537525037527]
Test Case: 607 | Input/Output: [[-12.75486164371469 -67] -79.75486164371469]
Test Case: 608 | Input/Output: [[62.495142895412215 -39] 23.495142895412215]
Test Case: 609 | Input/Output: [[-55.86700234670732 21] -34.86700234670732]
Test Case: 610 | Input/Output: [[-96.64683009333397 -38] -134.64683009333396]
Test Case: 611 | Input/Output: [[-38.60821635897034 66] 27.39178364102966]
Test Case: 612 | Input/Output: [[97.5814655878986 -11] 86.5814655878986]
Test Case: 613 | Input/Output: [[-86.66043396015755 54] -32.66043396015755]
Test Case: 614 | Input/Output: [[-30.047643530381606 -41] -71.0476435303816]
Test Case: 615 | Input/Output: [[41.90382809746717 68] 109.90382809746717]
Test Case: 616 | Input/Output: [[-66.42255201401224 98] 31.57744798598776]
Test Case: 617 | Input/Output: [[91.03243385101948 -59] 32.032433851019476]
Test Case: 618 | Input/Output: [[-67.39352599951307 66] -1.3935259995130735]
Test Case: 619 | Input/Output: [[76.23255666108983 58] 134.23255666108983]
Test Case: 620 | Input/Output: [[-18.418658665079747 -72] -90.41865866507975]
Test Case: 621 | Input/Output: [[-74.06949311077906 -13] -87.06949311077906]
Test Case: 622 | Input/Output: [[26.801920930050386 99] 125.80192093005039]
Test Case: 623 | Input/Output: [[-30.558189317770996 42] 11.441810682229004]
Test Case: 624 | Input/Output: [[8.621918667289123 -67] -58.37808133271088]
Test Case: 625 | Input/Output: [[-18.45281752498684 90] 71.54718247501316]
Test Case: 626 | Input/Output: [[-25.162235949963545 -57] -82.16223594996355]
Test Case: 627 | Input/Output: [[30.656665248738022 77] 107.65666524873802]
Test Case: 628 | Input/Output: [[-30.1353216457304 -18] -48.1353216457304]
Test Case: 629 | Input/Output: [[-71.09220163848363 17] -54.09220163848363]
Test Case: 630 | Input/Output: [[18.386176671027272 73] 91.38617667102727]
Test Case: 631 | Input/Output: [[95.09609484542668 -78] 17.096094845426677]
Test Case: 632 | Input/Output: [[97.73873552481405 77] 174.73873552481405]
Test Case: 633 | Input/Output: [[-14.742777029281598 -77] -91.7427770292816]
Test Case: 634 | Input/Output: [[-39.36682004956518 -49] -88.36682004956518]
Test Case: 635 | Input/Output: [[-82.04310383735049 -85] -167.0431038373505]
Test Case: 636 | Input/Output: [[-3.0387066712777084 -33] -36.03870667127771]
Test Case: 637 | Input/Output: [[25.22317786625878 -66] -40.77682213374122]
Test Case: 638 | Input/Output: [[-20.68079884555945 97] 76.31920115444055]
Test Case: 639 | Input/Output: [[13.261860391114737 -20] -6.7381396088852625]
Test Case: 640 | Input/Output: [[-50.5085618545138 10] -40.5085618545138]
Test Case: 641 | Input/Output: [[91.4255211596676 -93] -1.5744788403324037]
Test Case: 642 | Input/Output: [[22.199358000768626 -9] 13.199358000768626]
Test Case: 643 | Input/Output: [[13.117191381119369 -41] -27.88280861888063]
Test Case: 644 | Input/Output: [[58.52506514809593 -84] -25.474934851904067]
Test Case: 645 | Input/Output: [[-8.645289777624868 -69] -77.64528977762487]
Test Case: 646 | Input/Output: [[-35.79603229832966 26] -9.796032298329663]
Test Case: 647 | Input/Output: [[-34.044272725196805 -66] -100.0442727251968]
Test Case: 648 | Input/Output: [[77.32899938187401 -38] 39.32899938187401]
Test Case: 649 | Input/Output: [[57.06029021052862 84] 141.06029021052862]
Test Case: 650 | Input/Output: [[75.58259283989221 -72] 3.5825928398922144]
Test Case: 651 | Input/Output: [[-12.084611478503035 -17] -29.084611478503035]
Test Case: 652 | Input/Output: [[-41.876874252491916 88] 46.123125747508084]
Test Case: 653 | Input/Output: [[-8.814272728748989 13] 4.185727271251011]
Test Case: 654 | Input/Output: [[77.80389426413595 91] 168.80389426413595]
Test Case: 655 | Input/Output: [[-67.71707024713582 -78] -145.71707024713584]
Test Case: 656 | Input/Output: [[16.853181172942925 -2] 14.853181172942925]
Test Case: 657 | Input/Output: [[-51.194241196339796 99] 47.805758803660204]
Test Case: 658 | Input/Output: [[-65.95989454050132 -15] -80.95989454050132]
Test Case: 659 | Input/Output: [[21.243810151987645 -52] -30.756189848012355]
Test Case: 660 | Input/Output: [[-56.61118171019592 -69] -125.61118171019592]
Test Case: 661 | Input/Output: [[64.88571388946158 -79] -14.114286110538416]
Test Case: 662 | Input/Output: [[13.97300603629968 17] 30.97300603629968]
Test Case: 663 | Input/Output: [[34.66702705737271 21] 55.66702705737271]
Test Case: 664 | Input/Output: [[67.32049106186247 -39] 28.32049106186247]
Test Case: 665 | Input/Output: [[-78.72833958545344 60] -18.72833958545344]
Test Case: 666 | Input/Output: [[79.41524854512147 -19] 60.41524854512147]
Test Case: 667 | Input/Output: [[11.776116903085153 -19] -7.223883096914847]
Test Case: 668 | Input/Output: [[-59.21297556348044 97] 37.78702443651956]
Test Case: 669 | Input/Output: [[-58.297332748709586 -69] -127.29733274870958]
Test Case: 670 | Input/Output: [[-7.985672134476545 69] 61.014327865523455]
Test Case: 671 | Input/Output: [[-43.951782492568505 -55] -98.9517824925685]
Test Case: 672 | Input/Output: [[-43.114576320018315 -35] -78.11457632001832]
Test Case: 673 | Input/Output: [[-89.44879736606539 -99] -188.44879736606538]
Test Case: 674 | Input/Output: [[-19.12629462578282 12] -7.126294625782819]
Test Case: 675 | Input/Output: [[-71.6833778836569 32] -39.6833778836569]
Test Case: 676 | Input/Output: [[-71.13551547600684 -44] -115.13551547600684]
Test Case: 677 | Input/Output: [[86.04332457818796 -47] 39.04332457818796]
Test Case: 678 | Input/Output: [[-37.27693988335319 -2] -39.27693988335319]
Test Case: 679 | Input/Output: [[64.38126786826265 -98] -33.618732131737346]
Test Case: 680 | Input/Output: [[71.85183312605858 8] 79.85183312605858]
Test Case: 681 | Input/Output: [[-22.7458237439822 -80] -102.7458237439822]
Test Case: 682 | Input/Output: [[-20.75730407709395 92] 71.24269592290605]
Test Case: 683 | Input/Output: [[73.2056183208714 37] 110.2056183208714]
Test Case: 684 | Input/Output: [[-27.95563851460001 61] 33.04436148539999]
Test Case: 685 | Input/Output: [[44.33328822412102 -59] -14.66671177587898]
Test Case: 686 | Input/Output: [[-42.526074253263026 82] 39.473925746736974]
Test Case: 687 | Input/Output: [[59.20772913461522 30] 89.20772913461522]
Test Case: 688 | Input/Output: [[23.342973465505395 -99] -75.6570265344946]
Test Case: 689 | Input/Output: [[17.7641089379281 -42] -24.2358910620719]
Test Case: 690 | Input/Output: [[-97.38076774253692 -30] -127.38076774253692]
Test Case: 691 | Input/Output: [[-41.46960863168769 45] 3.5303913683123085]
Test Case: 692 | Input/Output: [[85.99818780874563 -48] 37.99818780874563]
Test Case: 693 | Input/Output: [[-46.98428359629927 90] 43.01571640370073]
Test Case: 694 | Input/Output: [[-7.909968641385689 -28] -35.90996864138569]
Test Case: 695 | Input/Output: [[58.747466498871006 -7] 51.747466498871006]
Test Case: 696 | Input/Output: [[-71.13608773835503 26] -45.13608773835503]
Test Case: 697 | Input/Output: [[-31.866542461810738 -55] -86.86654246181074]
Test Case: 698 | Input/Output: [[-76.4345966894168 -22] -98.4345966894168]
Test Case: 699 | Input/Output: [[96.80955490532145 -43] 53.80955490532145]
Test Case: 700 | Input/Output: [[24.55995495299348 -58] -33.44004504700652]
Test Case: 701 | Input/Output: [[-62.44095478073257 34] -28.440954780732568]
Test Case: 702 | Input/Output: [[35.613223993997764 7] 42.613223993997764]
Test Case: 703 | Input/Output: [[76.0385590302534 72] 148.0385590302534]
Test Case: 704 | Input/Output: [[32.88998777382602 70] 102.88998777382602]
Test Case: 705 | Input/Output: [[-48.64146653581764 68] 19.358533464182358]
Test Case: 706 | Input/Output: [[29.425557731712928 -23] 6.425557731712928]
Test Case: 707 | Input/Output: [[25.509532037458357 -6] 19.509532037458357]
Test Case: 708 | Input/Output: [[-26.112879611086342 -39] -65.11287961108634]
Test Case: 709 | Input/Output: [[-76.36336351441446 47] -29.36336351441446]
Test Case: 710 | Input/Output: [[46.2437801260848 34] 80.2437801260848]
Test Case: 711 | Input/Output: [[48.009032880663426 13] 61.009032880663426]
Test Case: 712 | Input/Output: [[-21.721237193516885 -52] -73.72123719351688]
Test Case: 713 | Input/Output: [[50.99128871138035 -53] -2.0087112886196508]
Test Case: 714 | Input/Output: [[-78.16059562816787 -36] -114.16059562816787]
Test Case: 715 | Input/Output: [[-14.015965370863825 -30] -44.015965370863825]
Test Case: 716 | Input/Output: [[2.5057731759057873 -54] -51.49422682409421]
Test Case: 717 | Input/Output: [[-42.41075701231918 -41] -83.41075701231918]
Test Case: 718 | Input/Output: [[-20.862093357226513 95] 74.13790664277349]
Test Case: 719 | Input/Output: [[-42.02610301899543 37] -5.026103018995428]
Test Case: 720 | Input/Output: [[94.18126033076302 0] 94.18126033076302]
Test Case: 721 | Input/Output: [[88.75878965371825 -58] 30.758789653718253]
Test Case: 722 | Input/Output: [[-30.49179344640835 1] -29.49179344640835]
Test Case: 723 | Input/Output: [[-81.20519691346841 -62] -143.2051969134684]
Test Case: 724 | Input/Output: [[-78.41943790365191 -76] -154.4194379036519]
Test Case: 725 | Input/Output: [[-98.36503749693837 -100] -198.36503749693838]
Test Case: 726 | Input/Output: [[-49.625774812599424 -22] -71.62577481259942]
Test Case: 727 | Input/Output: [[-71.36185079932991 23] -48.361850799329915]
Test Case: 728 | Input/Output: [[-16.241505285471575 -62] -78.24150528547158]
Test Case: 729 | Input/Output: [[-80.7580754998099 84] 3.2419245001900947]
Test Case: 730 | Input/Output: [[1.5239224406893328 66] 67.52392244068933]
Test Case: 731 | Input/Output: [[24.474957001469335 22] 46.474957001469335]
Test Case: 732 | Input/Output: [[54.11428554436023 41] 95.11428554436023]
Test Case: 733 | Input/Output: [[-67.7513096189044 22] -45.7513096189044]
Test Case: 734 | Input/Output: [[-32.572097308831616 -94] -126.57209730883162]
Test Case: 735 | Input/Output: [[30.821306245380498 -36] -5.178693754619502]
Test Case: 736 | Input/Output: [[22.526066352277894 -32] -9.473933647722106]
Test Case: 737 | Input/Output: [[-92.85254003279128 4] -88.85254003279128]
Test Case: 738 | Input/Output: [[33.32685597445945 74] 107.32685597445945]
Test Case: 739 | Input/Output: [[99.57734560394812 -37] 62.57734560394812]
Test Case: 740 | Input/Output: [[97.76837064827885 -46] 51.76837064827885]
Test Case: 741 | Input/Output: [[-47.88065813343538 82] 34.11934186656462]
Test Case: 742 | Input/Output: [[-46.883339749223055 74] 27.116660250776945]
Test Case: 743 | Input/Output: [[22.17391716846234 93] 115.17391716846234]
Test Case: 744 | Input/Output: [[47.80878893671334 -32] 15.808788936713341]
Test Case: 745 | Input/Output: [[5.9801682308547015 -49] -43.0198317691453]
Test Case: 746 | Input/Output: [[75.70954987575513 28] 103.70954987575513]
Test Case: 747 | Input/Output: [[-61.831267459122394 48] -13.831267459122394]
Test Case: 748 | Input/Output: [[51.93389017055472 37] 88.93389017055472]
Test Case: 749 | Input/Output: [[3.413399962946613 -52] -48.58660003705339]
Test Case: 750 | Input/Output: [[14.097740457154046 99] 113.09774045715405]
Test Case: 751 | Input/Output: [[-86.1954060509733 -52] -138.1954060509733]
Test Case: 752 | Input/Output: [[51.37968617243803 3] 54.37968617243803]
Test Case: 753 | Input/Output: [[22.826328924641388 -82] -59.17367107535861]
Test Case: 754 | Input/Output: [[18.393758782407872 15] 33.39375878240787]
Test Case: 755 | Input/Output: [[-36.156990281829884 -75] -111.15699028182988]
Test Case: 756 | Input/Output: [[71.7947131442329 21] 92.7947131442329]
Test Case: 757 | Input/Output: [[86.01495691138072 39] 125.01495691138072]
Test Case: 758 | Input/Output: [[88.09919493970258 -88] 0.09919493970258486]
Test Case: 759 | Input/Output: [[90.50537619754141 -96] -5.494623802458591]
Test Case: 760 | Input/Output: [[-74.16482276775918 2] -72.16482276775918]
Test Case: 761 | Input/Output: [[-66.00516890558863 21] -45.00516890558863]
Test Case: 762 | Input/Output: [[89.76090940861522 61] 150.76090940861522]
Test Case: 763 | Input/Output: [[65.39478146296398 -84] -18.605218537036023]
Test Case: 764 | Input/Output: [[55.02881515892034 -84] -28.971184841079662]
Test Case: 765 | Input/Output: [[53.26831557720567 61] 114.26831557720567]
Test Case: 766 | Input/Output: [[-93.10856251300928 -23] -116.10856251300928]
Test Case: 767 | Input/Output: [[7.861784312408389 81] 88.86178431240839]
Test Case: 768 | Input/Output: [[-73.27544730505436 -36] -109.27544730505436]
Test Case: 769 | Input/Output: [[82.06159738321895 -87] -4.9384026167810475]
Test Case: 770 | Input/Output: [[-47.995225136194406 -20] -67.9952251361944]
Test Case: 771 | Input/Output: [[87.31482210091215 100] 187.31482210091215]
Test Case: 772 | Input/Output: [[-46.592613313622856 -32] -78.59261331362285]
Test Case: 773 | Input/Output: [[74.53768905097661 66] 140.5376890509766]
Test Case: 774 | Input/Output: [[-58.823079893874386 67] 8.176920106125614]
Test Case: 775 | Input/Output: [[-11.472746830217645 -12] -23.472746830217645]
Test Case: 776 | Input/Output: [[57.984955459785624 1] 58.984955459785624]
Test Case: 777 | Input/Output: [[-62.79839640475819 43] -19.798396404758194]
Test Case: 778 | Input/Output: [[77.60727422439578 -99] -21.39272577560422]
Test Case: 779 | Input/Output: [[-10.975451684765432 8] -2.9754516847654315]
Test Case: 780 | Input/Output: [[88.36318046618607 -54] 34.363180466186066]
Test Case: 781 | Input/Output: [[-4.397610104033191 -39] -43.39761010403319]
Test Case: 782 | Input/Output: [[54.98980136941381 -55] -0.010198630586188528]
Test Case: 783 | Input/Output: [[7.235961932683367 -95] -87.76403806731663]
Test Case: 784 | Input/Output: [[74.9202832418326 -38] 36.92028324183261]
Test Case: 785 | Input/Output: [[-6.331932079945929 25] 18.66806792005407]
Test Case: 786 | Input/Output: [[-84.47351139189058 83] -1.4735113918905824]
Test Case: 787 | Input/Output: [[-96.50125964960787 -12] -108.50125964960787]
Test Case: 788 | Input/Output: [[-1.7754785291366204 27] 25.22452147086338]
Test Case: 789 | Input/Output: [[22.430669314742488 -33] -10.569330685257512]
Test Case: 790 | Input/Output: [[73.93918016886741 -93] -19.06081983113259]
Test Case: 791 | Input/Output: [[93.78163571887418 -39] 54.781635718874185]
Test Case: 792 | Input/Output: [[38.178291026377025 -88] -49.821708973622975]
Test Case: 793 | Input/Output: [[-79.3498235876454 71] -8.349823587645403]
Test Case: 794 | Input/Output: [[54.28086205283145 -66] -11.719137947168548]
Test Case: 795 | Input/Output: [[34.83726771503879 39] 73.83726771503879]
Test Case: 796 | Input/Output: [[71.65849134082373 -21] 50.65849134082373]
Test Case: 797 | Input/Output: [[-65.24081048616691 -40] -105.24081048616691]
Test Case: 798 | Input/Output: [[60.114971712272194 100] 160.1149717122722]
Test Case: 799 | Input/Output: [[-41.15177162900845 -74] -115.15177162900845]
Test Case: 800 | Input/Output: [[73.80447259221847 -20] 53.804472592218474]
Test Case: 801 | Input/Output: [[-56.273995167350876 -55] -111.27399516735088]
Test Case: 802 | Input/Output: [[46.473272730241604 -45] 1.4732727302416038]
Test Case: 803 | Input/Output: [[8.17372313400007 45] 53.17372313400007]
Test Case: 804 | Input/Output: [[-93.97609747806742 29] -64.97609747806742]
Test Case: 805 | Input/Output: [[59.85678891900045 44] 103.85678891900045]
Test Case: 806 | Input/Output: [[4.217502363483931 20] 24.21750236348393]
Test Case: 807 | Input/Output: [[71.10554758035869 27] 98.10554758035869]
Test Case: 808 | Input/Output: [[-36.604929424821144 -43] -79.60492942482114]
Test Case: 809 | Input/Output: [[-31.78293054816615 1] -30.78293054816615]
Test Case: 810 | Input/Output: [[-67.79007151685126 -47] -114.79007151685126]
Test Case: 811 | Input/Output: [[-5.677711214848387 -70] -75.67771121484839]
Test Case: 812 | Input/Output: [[68.53076625588665 -55] 13.530766255886647]
Test Case: 813 | Input/Output: [[80.96228388719985 0] 80.96228388719985]
Test Case: 814 | Input/Output: [[-61.406331071539036 -45] -106.40633107153903]
Test Case: 815 | Input/Output: [[17.091068075705067 -95] -77.90893192429493]
Test Case: 816 | Input/Output: [[45.61529754612047 -39] 6.615297546120473]
Test Case: 817 | Input/Output: [[17.558301304686637 -43] -25.441698695313363]
Test Case: 818 | Input/Output: [[-82.85180707263093 -10] -92.85180707263093]
Test Case: 819 | Input/Output: [[-91.05889800471803 20] -71.05889800471803]
Test Case: 820 | Input/Output: [[-30.03213607565158 -17] -47.03213607565158]
Test Case: 821 | Input/Output: [[57.217768672222405 -57] 0.21776867222240526]
Test Case: 822 | Input/Output: [[39.00678859206198 -59] -19.99321140793802]
Test Case: 823 | Input/Output: [[56.760977838511565 51] 107.76097783851156]
Test Case: 824 | Input/Output: [[-37.1964987303844 73] 35.8035012696156]
Test Case: 825 | Input/Output: [[59.664978072417 21] 80.664978072417]
Test Case: 826 | Input/Output: [[7.510066536231719 18] 25.51006653623172]
Test Case: 827 | Input/Output: [[50.59174624123193 53] 103.59174624123193]
Test Case: 828 | Input/Output: [[13.36745250807914 15] 28.36745250807914]
Test Case: 829 | Input/Output: [[-94.17337614175727 -97] -191.17337614175727]
Test Case: 830 | Input/Output: [[-57.68028565304852 65] 7.3197143469514785]
Test Case: 831 | Input/Output: [[-92.87506677076163 50] -42.875066770761634]
Test Case: 832 | Input/Output: [[42.39644389615225 55] 97.39644389615225]
Test Case: 833 | Input/Output: [[29.176186071426883 71] 100.17618607142688]
Test Case: 834 | Input/Output: [[11.869140767151933 21] 32.86914076715193]
Test Case: 835 | Input/Output: [[-38.15527804278736 -31] -69.15527804278736]
Test Case: 836 | Input/Output: [[4.116287472000451 -30] -25.88371252799955]
Test Case: 837 | Input/Output: [[-81.89668464566115 -80] -161.89668464566114]
Test Case: 838 | Input/Output: [[52.67243756563113 -38] 14.672437565631128]
Test Case: 839 | Input/Output: [[-8.754057071043576 -51] -59.754057071043576]
Test Case: 840 | Input/Output: [[1.1365734263130776 -43] -41.86342657368692]
Test Case: 841 | Input/Output: [[8.782501357409984 75] 83.78250135740998]
Test Case: 842 | Input/Output: [[-81.92504782945424 -71] -152.92504782945423]
Test Case: 843 | Input/Output: [[-5.807269283765109 74] 68.19273071623489]
Test Case: 844 | Input/Output: [[6.409771747050598 -46] -39.5902282529494]
Test Case: 845 | Input/Output: [[-85.1576015562739 85] -0.15760155627390304]
Test Case: 846 | Input/Output: [[5.953796993875798 -37] -31.046203006124202]
Test Case: 847 | Input/Output: [[3.127154510356519 -97] -93.87284548964348]
Test Case: 848 | Input/Output: [[67.26896567809888 49] 116.26896567809888]
Test Case: 849 | Input/Output: [[-3.8268652403147456 40] 36.173134759685254]
Test Case: 850 | Input/Output: [[-36.70402695346 -55] -91.70402695346]
Test Case: 851 | Input/Output: [[-20.30975952484981 4] -16.30975952484981]
Test Case: 852 | Input/Output: [[96.26443255863202 87] 183.26443255863202]
Test Case: 853 | Input/Output: [[-2.6962727225574383 -63] -65.69627272255744]
Test Case: 854 | Input/Output: [[-86.12920140752598 -5] -91.12920140752598]
Test Case: 855 | Input/Output: [[96.5584826676816 -61] 35.5584826676816]
Test Case: 856 | Input/Output: [[63.142188652514164 -88] -24.857811347485836]
Test Case: 857 | Input/Output: [[-77.56312975863757 -70] -147.56312975863756]
Test Case: 858 | Input/Output: [[94.12148716263812 67] 161.12148716263812]
Test Case: 859 | Input/Output: [[80.16395584198955 -35] 45.16395584198955]
Test Case: 860 | Input/Output: [[-54.29092304696734 32] -22.290923046967343]
Test Case: 861 | Input/Output: [[-78.48587773069886 -98] -176.48587773069886]
Test Case: 862 | Input/Output: [[-9.877132459912062 43] 33.12286754008794]
Test Case: 863 | Input/Output: [[87.50874787641447 -56] 31.508747876414475]
Test Case: 864 | Input/Output: [[-13.657516953746068 -96] -109.65751695374607]
Test Case: 865 | Input/Output: [[53.49851900798623 25] 78.49851900798623]
Test Case: 866 | Input/Output: [[0.2744131633727136 63] 63.274413163372714]
Test Case: 867 | Input/Output: [[-57.59977795367408 52] -5.599777953674078]
Test Case: 868 | Input/Output: [[40.12056564268005 85] 125.12056564268005]
Test Case: 869 | Input/Output: [[41.37944364365421 -72] -30.620556356345787]
Test Case: 870 | Input/Output: [[98.06613874081137 -45] 53.06613874081137]
Test Case: 871 | Input/Output: [[-2.909991971229303 1] -1.909991971229303]
Test Case: 872 | Input/Output: [[0.6545156919373483 71] 71.65451569193735]
Test Case: 873 | Input/Output: [[6.361927458574868 55] 61.36192745857487]
Test Case: 874 | Input/Output: [[-3.325185437339144 -56] -59.325185437339144]
Test Case: 875 | Input/Output: [[15.790267214176382 -77] -61.20973278582362]
Test Case: 876 | Input/Output: [[-77.13328038988124 42] -35.133280389881236]
Test Case: 877 | Input/Output: [[-62.259621688555164 -96] -158.25962168855517]
Test Case: 878 | Input/Output: [[-96.40758840890923 -59] -155.40758840890925]
Test Case: 879 | Input/Output: [[-40.79449697834205 -64] -104.79449697834205]
Test Case: 880 | Input/Output: [[-33.29016730851535 59] 25.70983269148465]
Test Case: 881 | Input/Output: [[19.543576139189625 -13] 6.543576139189625]
Test Case: 882 | Input/Output: [[-47.01673504096973 -77] -124.01673504096973]
Test Case: 883 | Input/Output: [[86.25885601179792 -49] 37.25885601179792]
Test Case: 884 | Input/Output: [[57.93751167799573 29] 86.93751167799573]
Test Case: 885 | Input/Output: [[7.858138612640914 -87] -79.14186138735909]
Test Case: 886 | Input/Output: [[10.729953720522147 -68] -57.27004627947785]
Test Case: 887 | Input/Output: [[-88.50404221072488 40] -48.504042210724876]
Test Case: 888 | Input/Output: [[86.8860304663338 32] 118.8860304663338]
Test Case: 889 | Input/Output: [[67.68512936174298 -18] 49.68512936174298]
Test Case: 890 | Input/Output: [[0.5429967847059487 97] 97.54299678470595]
Test Case: 891 | Input/Output: [[37.81480360293335 75] 112.81480360293335]
Test Case: 892 | Input/Output: [[38.09594565946648 -54] -15.90405434053352]
Test Case: 893 | Input/Output: [[-89.45482550701661 98] 8.545174492983392]
Test Case: 894 | Input/Output: [[12.2477208117038 -65] -52.7522791882962]
Test Case: 895 | Input/Output: [[34.79003538411504 -21] 13.790035384115043]
Test Case: 896 | Input/Output: [[34.426664565176594 100] 134.4266645651766]
Test Case: 897 | Input/Output: [[-67.42273516460449 -31] -98.42273516460449]
Test Case: 898 | Input/Output: [[66.65083854087024 -27] 39.65083854087024]
Test Case: 899 | Input/Output: [[-66.1431512735522 42] -24.143151273552206]
Test Case: 900 | Input/Output: [[-54.16503860433015 -82] -136.16503860433016]
Test Case: 901 | Input/Output: [[47.91911607959872 46] 93.91911607959872]
Test Case: 902 | Input/Output: [[-43.23570440331188 40] -3.2357044033118783]
Test Case: 903 | Input/Output: [[68.43230241627231 -23] 45.43230241627231]
Test Case: 904 | Input/Output: [[36.348780577580385 -26] 10.348780577580385]
Test Case: 905 | Input/Output: [[11.618988532512347 -89] -77.38101146748765]
Test Case: 906 | Input/Output: [[58.52208082557678 -35] 23.52208082557678]
Test Case: 907 | Input/Output: [[-70.31288755887795 -12] -82.31288755887795]
Test Case: 908 | Input/Output: [[26.382629585898414 -97] -70.61737041410159]
Test Case: 909 | Input/Output: [[-44.02784236510313 -50] -94.02784236510314]
Test Case: 910 | Input/Output: [[-34.460108723094265 -79] -113.46010872309427]
Test Case: 911 | Input/Output: [[-2.5577654139030273 96] 93.44223458609697]
Test Case: 912 | Input/Output: [[72.84145241505001 -93] -20.158547584949986]
Test Case: 913 | Input/Output: [[-46.76538541844919 -49] -95.7653854184492]
Test Case: 914 | Input/Output: [[-53.338333403218165 56] 2.661666596781835]
Test Case: 915 | Input/Output: [[-79.46788738590938 -30] -109.46788738590938]
Test Case: 916 | Input/Output: [[54.26931031927694 -97] -42.73068968072306]
Test Case: 917 | Input/Output: [[95.44697888607695 -38] 57.44697888607695]
Test Case: 918 | Input/Output: [[51.64399701569204 53] 104.64399701569204]
Test Case: 919 | Input/Output: [[-6.572416418669903 -69] -75.5724164186699]
Test Case: 920 | Input/Output: [[19.108844757172278 -16] 3.108844757172278]
Test Case: 921 | Input/Output: [[55.930845166362275 -59] -3.0691548336377252]
Test Case: 922 | Input/Output: [[96.04847996877609 95] 191.0484799687761]
Test Case: 923 | Input/Output: [[-39.354945623797356 -64] -103.35494562379736]
Test Case: 924 | Input/Output: [[42.31384821625721 -1] 41.31384821625721]
Test Case: 925 | Input/Output: [[30.248368226699995 -98] -67.7516317733]
Test Case: 926 | Input/Output: [[51.12114672747694 -90] -38.87885327252306]
Test Case: 927 | Input/Output: [[4.781335665989701 -87] -82.2186643340103]
Test Case: 928 | Input/Output: [[81.32554791732451 3] 84.32554791732451]
Test Case: 929 | Input/Output: [[-19.247961784289075 -88] -107.24796178428907]
Test Case: 930 | Input/Output: [[-18.84823078972859 10] -8.84823078972859]
Test Case: 931 | Input/Output: [[61.58590131803797 35] 96.58590131803797]
Test Case: 932 | Input/Output: [[-25.62677649413061 93] 67.37322350586939]
Test Case: 933 | Input/Output: [[-35.48267680536756 -6] -41.48267680536756]
Test Case: 934 | Input/Output: [[58.81817180347028 40] 98.81817180347028]
Test Case: 935 | Input/Output: [[65.40725962195793 64] 129.40725962195793]
Test Case: 936 | Input/Output: [[79.23624688215256 -97] -17.763753117847443]
Test Case: 937 | Input/Output: [[91.73805172329955 -100] -8.261948276700451]
Test Case: 938 | Input/Output: [[-34.38326334111086 -64] -98.38326334111086]
Test Case: 939 | Input/Output: [[-33.03208512169272 -60] -93.03208512169272]
Test Case: 940 | Input/Output: [[-75.48478138556432 -12] -87.48478138556432]
Test Case: 941 | Input/Output: [[92.53470370080083 18] 110.53470370080083]
Test Case: 942 | Input/Output: [[-25.662848175939118 85] 59.33715182406088]
Test Case: 943 | Input/Output: [[-14.211524573124422 -69] -83.21152457312442]
Test Case: 944 | Input/Output: [[13.769848923207334 7] 20.769848923207334]
Test Case: 945 | Input/Output: [[-46.975969054931134 3] -43.975969054931134]
Test Case: 946 | Input/Output: [[41.32830714318513 -20] 21.32830714318513]
Test Case: 947 | Input/Output: [[-34.44358294873612 77] 42.55641705126388]
Test Case: 948 | Input/Output: [[7.776919225266383 27] 34.77691922526638]
Test Case: 949 | Input/Output: [[-31.940024144981876 44] 12.059975855018124]
Test Case: 950 | Input/Output: [[-70.16891336545193 6] -64.16891336545193]
Test Case: 951 | Input/Output: [[47.57662295380655 59] 106.57662295380655]
Test Case: 952 | Input/Output: [[94.77173834539002 92] 186.77173834539002]
Test Case: 953 | Input/Output: [[82.2541292007048 -62] 20.254129200704796]
Test Case: 954 | Input/Output: [[-19.31069733960649 -20] -39.31069733960649]
Test Case: 955 | Input/Output: [[45.383469251243525 81] 126.38346925124353]
Test Case: 956 | Input/Output: [[-44.222529405072784 -83] -127.22252940507278]
Test Case: 957 | Input/Output: [[-13.467227566873646 -6] -19.467227566873646]
Test Case: 958 | Input/Output: [[26.561118460785877 -77] -50.43888153921412]
Test Case: 959 | Input/Output: [[-29.877846195088082 47] 17.122153804911918]
Test Case: 960 | Input/Output: [[24.7943245709684 -49] -24.2056754290316]
Test Case: 961 | Input/Output: [[53.238161211633724 -4] 49.238161211633724]
Test Case: 962 | Input/Output: [[-17.882727664767103 -96] -113.8827276647671]
Test Case: 963 | Input/Output: [[-40.77100679935166 89] 48.22899320064834]
Test Case: 964 | Input/Output: [[40.523359015250946 -59] -18.476640984749054]
Test Case: 965 | Input/Output: [[-46.60514653582537 81] 34.39485346417463]
Test Case: 966 | Input/Output: [[21.274055362084084 59] 80.27405536208408]
Test Case: 967 | Input/Output: [[43.81588813228842 -96] -52.18411186771158]
Test Case: 968 | Input/Output: [[26.951081379429297 -3] 23.951081379429297]
Test Case: 969 | Input/Output: [[74.76456903652306 30] 104.76456903652306]
Test Case: 970 | Input/Output: [[-2.2896155778944944 80] 77.7103844221055]
Test Case: 971 | Input/Output: [[28.651721772176245 -81] -52.348278227823755]
Test Case: 972 | Input/Output: [[-97.43858357410129 -40] -137.4385835741013]
Test Case: 973 | Input/Output: [[-71.90896823515986 -40] -111.90896823515986]
Test Case: 974 | Input/Output: [[-90.2118580662181 61] -29.2118580662181]
Test Case: 975 | Input/Output: [[1.3571762740288023 -90] -88.6428237259712]
Test Case: 976 | Input/Output: [[23.918510049938064 -47] -23.081489950061936]
Test Case: 977 | Input/Output: [[69.17552403135241 -27] 42.17552403135241]
Test Case: 978 | Input/Output: [[-72.24901385062907 -50] -122.24901385062907]
Test Case: 979 | Input/Output: [[-83.90757672316518 12] -71.90757672316518]
Test Case: 980 | Input/Output: [[46.46576220339148 -61] -14.534237796608522]
Test Case: 981 | Input/Output: [[-61.16015013794702 20] -41.16015013794702]
Test Case: 982 | Input/Output: [[-49.67926847169779 -47] -96.67926847169778]
Test Case: 983 | Input/Output: [[17.116636590469312 -56] -38.88336340953069]
Test Case: 984 | Input/Output: [[19.822490456247266 -54] -34.177509543752734]
Test Case: 985 | Input/Output: [[82.48693536491501 62] 144.486935364915]
Test Case: 986 | Input/Output: [[65.51679699031575 49] 114.51679699031575]
Test Case: 987 | Input/Output: [[24.436188567492636 -66] -41.563811432507364]
Test Case: 988 | Input/Output: [[74.63033728430369 52] 126.63033728430369]
Test Case: 989 | Input/Output: [[45.53833807350057 44] 89.53833807350057]
Test Case: 990 | Input/Output: [[-64.43056477765631 -42] -106.43056477765631]
Test Case: 991 | Input/Output: [[62.444748534811424 -98] -35.555251465188576]
Test Case: 992 | Input/Output: [[-7.064362861416939 52] 44.93563713858306]
Test Case: 993 | Input/Output: [[-4.026401983442881 -47] -51.02640198344288]
Test Case: 994 | Input/Output: [[53.27742603154084 -58] -4.722573968459159]
Test Case: 995 | Input/Output: [[-55.62896931805403 43] -12.628969318054033]
Test Case: 996 | Input/Output: [[-10.205276888207877 -93] -103.20527688820788]
Test Case: 997 | Input/Output: [[-25.288860800498014 29] 3.711139199501986]
Test Case: 998 | Input/Output: [[-50.52569492688504 13] -37.52569492688504]
Test Case: 999 | Input/Output: [[44.10732491441138 36] 80.10732491441138]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove vector_boolean_pushall zip_insert_left_fromcode exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup vector_integer_butlast vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse exec_k vector_integer_yank float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times genome_dup return_code_pop char_swap integer_max return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank zip_shove vector_integer_flush vector_integer_subvec vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean integer_min exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add code_stackdepth exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse integer_swap string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.11.1-1-SNAPSHOTHash of last Git commit = 8a64f874173fae27ed1a77827849de0fade43c2b
GitHub link = https://github.com/lspector/Clojush/commit/8a64f874173fae27ed1a77827849de0fade43c2b
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = []
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :tournament
pop-when-tagging = true
population-size = 1000
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
random-screen = false
random-seed = -72 99 109 1 109 -95 7 -61 123 -100 -8 65 -53 117 76 58
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Number IO problem report - generation 0
Test total error for best: 65301.88489999999
Test mean error for best: 32.65094
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: 



-7        
Correct output: 101.5758530321 | Program output: 



105       
Correct output: 5.3722386499   | Program output: 



39        
Correct output: 50.838076484   | Program output: 



50        
Correct output: 149.3686745246 | Program output: 



149       
Correct output: -86.0987731432 | Program output: 



8         
Correct output: 99.2563149379  | Program output: 



99        
Correct output: 100.2759538143 | Program output: 



118       
Correct output: 55.8508667649  | Program output: 



75        
Correct output: -120.4980478621 | Program output: 



12        
Correct output: 50.3953926202  | Program output: 



50        
Correct output: -86.6444443408 | Program output: 



-30       
Correct output: 43.2337451713  | Program output: 



135       
Correct output: -69.3575988725 | Program output: 



47        
Correct output: -32.3742761841 | Program output: 



-33       
Correct output: 21.203493141   | Program output: 



21        
Correct output: 6.2941290036   | Program output: 



58        
Correct output: 28.207733934   | Program output: 



113       
Correct output: 3.102196665    | Program output: 



113       
Correct output: 117.4058715345 | Program output: 



117       
Correct output: 105.1968404292 | Program output: 



105       
Correct output: -95.2809380546 | Program output: 



-30       
Correct output: 145.7928624605 | Program output: 



145       
Correct output: 3.3104353754   | Program output: 



3         
Correct output: 60.4029417431  | Program output: 



64        
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_items} {:instruction integer_pop} {:instruction float_sub} {:instruction integer_dup_times} {:instruction tag_integer_288} {:instruction integer_inc} {:instruction integer_pop} {:instruction integer_dup} {:instruction in1} {:instruction integer_max} {:instruction integer_rot} {:instruction float_inc} {:instruction tag_float_448} {:instruction integer_max} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_sub} {:instruction print_float} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction integer_pop} {:instruction float_sin} {:instruction in2} {:instruction in2} {:instruction integer_dup_items} {:instruction integer_div} {:instruction float_mult} {:instruction print_float} {:instruction integer_min} {:instruction integer_rot} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_swap} {:instruction print_newline} {:instruction float_min} {:instruction in2} {:instruction float_mod} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_tan} {:instruction integer_inc} {:instruction 49.56626396002278} {:instruction float_stackdepth} {:instruction float_swap} {:instruction integer_mod} {:instruction integer_rot} {:instruction integer_min} {:instruction integer_rot} {:instruction tagged_220} {:instruction print_newline} {:instruction float_sin} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_shove} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_mod} {:instruction float_rot} {:instruction print_newline} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction float_yank} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_321} {:instruction float_inc} {:instruction print_newline} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_stackdepth})
Best program: (float_dup_items integer_pop float_sub integer_dup_times tag_integer_288 integer_inc integer_pop integer_dup in1 integer_max integer_rot float_inc tag_float_448 integer_max float_yankdup integer_shove integer_sub print_float integer_stackdepth integer_shove integer_pop float_sin in2 in2 integer_dup_items integer_div float_mult print_float integer_min integer_rot float_swap integer_stackdepth float_swap print_newline float_min in2 float_mod float_stackdepth float_stackdepth float_inc float_dec float_frominteger float_tan integer_inc 49.56626396002278 float_stackdepth float_swap integer_mod integer_rot integer_min integer_rot tagged_220 print_newline float_sin integer_sub float_sub integer_div float_shove float_max float_swap float_mod in1 integer_flush float_max in2 float_mult float_mult float_sub float_mod float_rot print_newline integer_fromfloat integer_add float_swap float_dup float_flush float_yank tag_float_22 float_shove float_dup_times tag_float_321 float_inc print_newline print_integer float_swap float_sin integer_stackdepth float_stackdepth integer_pop float_swap integer_stackdepth)
Errors: [0.5753 12 3.4241 13 33.6278 10 0.8381 11 0.3687 13 94.0988 13 0.2563 11 17.724 13 19.1491 12 132.498 14 0.3954 11 56.6444 12 91.7663 11 116.3576 13 0.6257 14 0.2035 11 51.7059 12 84.7923 11 109.8978 10 0.4059 13 0.1968 12 65.2809 12 0.7929 12 0.3104 11 3.5971 12]
Total: 1184.5330999999999
Mean: 23.690662
Genome size: 91
Size: 92
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 18720.1672645
Median total errors in population: 25330.0
Error averages by case: (733.031831599999 13.064 740.5711825000021 13.333 722.7020573999991 11.903 733.3737076000011 11.706 753.499172699999 13.54 741.6255719000008 13.354 737.4043695000012 12.56 738.7009668999991 13.361 727.2058533999998 12.638 750.3325950000021 14.17 733.2555502 12.53 741.8564094999986 13.467 733.3567792999993 13.301 737.8157144999984 13.428 735.7842118000011 13.967 732.2689382999982 11.692 715.2221301000008 12.241 728.8949791000014 12.426 726.2485906000005 11.527 743.593759800002 13.355 740.405531 13.268 745.3688128000017 13.316 750.0406197000003 13.375 727.6263562999994 11.747 728.2455729999983 12.467)
Error minima by case: (0.5753 9 1.5759 3 0.5095 1 0.8381 2 0.3687 3 0.9012 1 0.2563 1 0.276 2 0.3183 2 20.498 2 0.3954 2 0.3556 1 3.0968 8 1.0 1 0.6257 7 0.2035 2 0.0276 8 2.7923 8 0.1022 7 0.4059 3 0.1968 2 1.1169 1 0.7929 3 0.3104 2 3.5971 2)
Average genome size in population (length): 49.059
Average program size in population (points): 50.059
Average percent parens in population: 0.045
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 2
Genome diversity (% unique Plush genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.295
Error (vector) diversity:			 0.323
Behavioral diversity:				 0.347
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 1230765
--- Timings ---
Current time: 1529614887228 milliseconds
Total Time:           3.4 seconds
Initialization:       0.1 seconds,  3.2%
Reproduction:         0.6 seconds, 16.7%
Fitness Testing:      2.7 seconds, 80.1%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Number IO problem report - generation 1
Test total error for best: 65301.88489999999
Test mean error for best: 32.65094
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: 



-7        
Correct output: 101.5758530321 | Program output: 



105       
Correct output: 5.3722386499   | Program output: 



39        
Correct output: 50.838076484   | Program output: 



50        
Correct output: 149.3686745246 | Program output: 



149       
Correct output: -86.0987731432 | Program output: 



8         
Correct output: 99.2563149379  | Program output: 



99        
Correct output: 100.2759538143 | Program output: 



118       
Correct output: 55.8508667649  | Program output: 



75        
Correct output: -120.4980478621 | Program output: 



12        
Correct output: 50.3953926202  | Program output: 



50        
Correct output: -86.6444443408 | Program output: 



-30       
Correct output: 43.2337451713  | Program output: 



135       
Correct output: -69.3575988725 | Program output: 



47        
Correct output: -32.3742761841 | Program output: 



-33       
Correct output: 21.203493141   | Program output: 



21        
Correct output: 6.2941290036   | Program output: 



58        
Correct output: 28.207733934   | Program output: 



113       
Correct output: 3.102196665    | Program output: 



113       
Correct output: 117.4058715345 | Program output: 



117       
Correct output: 105.1968404292 | Program output: 



105       
Correct output: -95.2809380546 | Program output: 



-30       
Correct output: 145.7928624605 | Program output: 



145       
Correct output: 3.3104353754   | Program output: 



3         
Correct output: 60.4029417431  | Program output: 



64        
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_items} {:instruction integer_pop} {:instruction float_sub} {:instruction integer_dup_times} {:instruction tag_integer_288} {:instruction integer_inc} {:instruction integer_pop} {:instruction integer_dup} {:instruction in1} {:instruction integer_max} {:instruction integer_rot} {:instruction float_inc} {:instruction tag_float_448} {:instruction integer_max} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_sub} {:instruction print_float} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction integer_pop} {:instruction float_sin} {:instruction in2} {:instruction in2} {:instruction integer_dup_items} {:instruction integer_div} {:instruction float_mult} {:instruction print_float} {:instruction integer_min} {:instruction integer_rot} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_swap} {:instruction print_newline} {:instruction float_min} {:instruction in2} {:instruction float_mod} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_tan} {:instruction integer_inc} {:instruction 49.56626396002278} {:instruction float_stackdepth} {:instruction float_swap} {:instruction integer_mod} {:instruction integer_rot} {:instruction integer_min} {:instruction integer_rot} {:instruction tagged_220} {:instruction print_newline} {:instruction float_sin} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_shove} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_mod} {:instruction float_rot} {:instruction print_newline} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction float_yank} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_321} {:instruction float_inc} {:instruction print_newline} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_stackdepth})
Best program: (float_dup_items integer_pop float_sub integer_dup_times tag_integer_288 integer_inc integer_pop integer_dup in1 integer_max integer_rot float_inc tag_float_448 integer_max float_yankdup integer_shove integer_sub print_float integer_stackdepth integer_shove integer_pop float_sin in2 in2 integer_dup_items integer_div float_mult print_float integer_min integer_rot float_swap integer_stackdepth float_swap print_newline float_min in2 float_mod float_stackdepth float_stackdepth float_inc float_dec float_frominteger float_tan integer_inc 49.56626396002278 float_stackdepth float_swap integer_mod integer_rot integer_min integer_rot tagged_220 print_newline float_sin integer_sub float_sub integer_div float_shove float_max float_swap float_mod in1 integer_flush float_max in2 float_mult float_mult float_sub float_mod float_rot print_newline integer_fromfloat integer_add float_swap float_dup float_flush float_yank tag_float_22 float_shove float_dup_times tag_float_321 float_inc print_newline print_integer float_swap float_sin integer_stackdepth float_stackdepth integer_pop float_swap integer_stackdepth)
Errors: [0.5753 12 3.4241 13 33.6278 10 0.8381 11 0.3687 13 94.0988 13 0.2563 11 17.724 13 19.1491 12 132.498 14 0.3954 11 56.6444 12 91.7663 11 116.3576 13 0.6257 14 0.2035 11 51.7059 12 84.7923 11 109.8978 10 0.4059 13 0.1968 12 65.2809 12 0.7929 12 0.3104 11 3.5971 12]
Total: 1184.5330999999999
Mean: 23.690662
Genome size: 91
Size: 92
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 7600.865637899997
Median total errors in population: 1927.7623
Error averages by case: (290.9427546999999 12.121 303.1977414999991 10.779 258.3902692000014 9.716 283.63479589999827 9.488 332.0159165999984 11.162 302.76721920000034 10.708 297.385517900001 10.143 304.22365630000235 10.84 275.5044078999992 10.286 320.8577165000009 11.52 285.29398440000006 10.099 307.1371973999981 10.912 291.1436639000003 12.673 289.23704419999814 10.724 294.84373869999996 13.012 281.5609933000009 9.505 248.4924932999999 11.676 279.36324970000004 12.031 275.7197709999998 11.168 310.7631659000025 10.781 306.00832429999963 10.495 312.8585325000025 10.679 328.4177123000001 10.834 276.39292209999877 9.509 273.8168491999973 10.035)
Error minima by case: (0.5753 8 3.4241 3 0.5095 1 0.8381 2 0.3687 3 0.9012 1 0.2563 1 11.276 2 0.3183 2 22.7915 2 0.3954 2 0.3556 1 3.0968 8 1.0 1 0.6257 9 0.2035 2 0.0276 8 0.1997 8 0.1022 7 0.4059 3 0.1968 2 1.1169 1 0.7929 3 0.3104 2 3.5971 2)
Average genome size in population (length): 61.794
Average program size in population (points): 62.794
Average percent parens in population: 0.021
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.5
Median age in population: 1.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.804
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.804
Total error diversity:				 0.304
Error (vector) diversity:			 0.327
Behavioral diversity:				 0.356
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 2781193
--- Timings ---
Current time: 1529614891129 milliseconds
Total Time:           8.0 seconds
Initialization:       0.1 seconds,  1.4%
Reproduction:         2.4 seconds, 29.7%
Fitness Testing:      4.3 seconds, 53.6%
Report:               1.2 seconds, 15.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Number IO problem report - generation 2
Test total error for best: 37000.47220000001
Test mean error for best: 18.50024
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: 


-7         
Correct output: 101.5758530321 | Program output: 


100        
Correct output: 5.3722386499   | Program output: 


5          
Correct output: 50.838076484   | Program output: 


50         
Correct output: 149.3686745246 | Program output: 


148        
Correct output: -86.0987731432 | Program output: 


-41        
Correct output: 99.2563149379  | Program output: 


98         
Correct output: 100.2759538143 | Program output: 


99         
Correct output: 55.8508667649  | Program output: 


54         
Correct output: -120.4980478621 | Program output: 


-37        
Correct output: 50.3953926202  | Program output: 


50         
Correct output: -86.6444443408 | Program output: 


-79        
Correct output: 43.2337451713  | Program output: 


43         
Correct output: -69.3575988725 | Program output: 


-2         
Correct output: -32.3742761841 | Program output: 


-33        
Correct output: 21.203493141   | Program output: 


21         
Correct output: 6.2941290036   | Program output: 


7          
Correct output: 28.207733934   | Program output: 


28         
Correct output: 3.102196665    | Program output: 


3          
Correct output: 117.4058715345 | Program output: 


116        
Correct output: 105.1968404292 | Program output: 


104        
Correct output: -95.2809380546 | Program output: 


-79        
Correct output: 145.7928624605 | Program output: 


144        
Correct output: 3.3104353754   | Program output: 


3          
Correct output: 60.4029417431  | Program output: 


59         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_swap} {:instruction float_frominteger} {:instruction in2} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_min} {:instruction integer_dup_items} {:instruction integer_yankdup} {:instruction integer_max} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_mod} {:instruction 81} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction integer_rot} {:instruction float_max} {:instruction float_mult} {:instruction float_cos} {:instruction float_yank} {:instruction tag_float_152} {:instruction integer_dup_times} {:instruction float_min} {:instruction in2} {:instruction in1} {:instruction in1} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_swap} {:instruction float_dup_times} {:instruction integer_add} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_min} {:instruction in2} {:instruction integer_dup} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction print_newline} {:instruction float_sin} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_shove} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_mod} {:instruction float_rot} {:instruction print_newline} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction float_yank} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_321} {:instruction float_inc} {:instruction print_newline} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_stackdepth})
Best program: (float_add integer_swap float_frominteger in2 float_frominteger integer_dup_items integer_swap integer_swap float_min integer_dup_items integer_yankdup integer_max float_max float_dup_items integer_mod 81 float_yankdup float_swap integer_div in2 integer_rot float_max float_mult float_cos float_yank tag_float_152 integer_dup_times float_min in2 in1 in1 integer_yank float_dec integer_swap float_dup_times integer_add float_sub integer_dec integer_min in2 integer_dup integer_add integer_stackdepth print_newline float_sin integer_sub float_sub integer_div float_shove float_max float_swap float_mod in1 integer_flush float_max in2 float_mult float_mult float_sub float_mod float_rot print_newline integer_fromfloat integer_add float_swap float_dup float_flush float_yank tag_float_22 float_shove float_dup_times tag_float_321 float_inc print_newline print_integer float_swap float_sin integer_stackdepth float_stackdepth integer_pop float_swap integer_stackdepth)
Errors: [0.5753 12 1.5759 13 0.3722 12 0.8381 11 1.3687 13 45.0988 13 1.2563 12 1.276 13 1.8509 11 83.498 14 0.3954 11 7.6444 14 0.2337 11 67.3576 13 0.6257 13 0.2035 10 0.7059 12 0.2077 11 0.1022 11 1.4059 13 1.1968 11 16.2809 13 1.7929 13 0.3104 11 1.4029 12]
Total: 540.5760999999999
Mean: 10.811522
Genome size: 82
Size: 83
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4799.1914271
Median total errors in population: 1379.0
Error averages by case: (211.37615679999982 11.969 186.1063271999997 7.047 150.02910479999994 5.647 164.91749169999946 5.998 208.14434769999986 7.123 186.90870610000078 6.423 165.88952179999993 6.134 193.97494390000054 6.945 160.45692870000008 6.401 191.85839059999998 7.587 170.38040679999992 6.269 206.57992169999943 6.489 204.6372566 12.711 160.16572459999992 6.024 206.41674910000006 12.771 181.4211488000003 6.007 146.82890160000008 11.888 188.88786530000016 12.729 191.17536630000038 11.745 189.82262870000054 6.999 183.4582058000006 6.39 207.6053280000007 6.48 205.90030100000013 6.987 184.06627389999977 5.988 155.10942959999986 6.323)
Error minima by case: (0.5753 8 0.5759 3 0.3722 1 0.8381 2 0.3687 3 4.0988 1 0.2563 1 0.276 2 0.8509 2 29.318 2 0.3954 2 0.6444 1 0.2337 9 1.0 1 0.6257 9 0.2035 2 0.7059 8 0.2077 9 0.1022 8 0.4059 3 0.1968 2 3.2809 1 0.7929 3 0.0495 2 0.4029 2)
Average genome size in population (length): 62.231
Average program size in population (points): 63.231
Average percent parens in population: 0.018
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.943
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.756
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.756
Total error diversity:				 0.179
Error (vector) diversity:			 0.192
Behavioral diversity:				 0.208
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 4342218
--- Timings ---
Current time: 1529614894789 milliseconds
Total Time:          11.6 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         3.9 seconds, 33.5%
Fitness Testing:      5.8 seconds, 50.2%
Report:               1.8 seconds, 15.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Number IO problem report - generation 3
Test total error for best: 12886.997099999991
Test mean error for best: 6.44350
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: 


-7         
Correct output: 101.5758530321 | Program output: 


101        
Correct output: 5.3722386499   | Program output: 


5          
Correct output: 50.838076484   | Program output: 


50         
Correct output: 149.3686745246 | Program output: 


149        
Correct output: -86.0987731432 | Program output: 


-86        
Correct output: 99.2563149379  | Program output: 


99         
Correct output: 100.2759538143 | Program output: 


100        
Correct output: 55.8508667649  | Program output: 


55         
Correct output: -120.4980478621 | Program output: 


-120       
Correct output: 50.3953926202  | Program output: 


50         
Correct output: -86.6444443408 | Program output: 


-86        
Correct output: 43.2337451713  | Program output: 


44         
Correct output: -69.3575988725 | Program output: 


-69        
Correct output: -32.3742761841 | Program output: 


-33        
Correct output: 21.203493141   | Program output: 


21         
Correct output: 6.2941290036   | Program output: 


7          
Correct output: 28.207733934   | Program output: 


29         
Correct output: 3.102196665    | Program output: 


4          
Correct output: 117.4058715345 | Program output: 


117        
Correct output: 105.1968404292 | Program output: 


105        
Correct output: -95.2809380546 | Program output: 


-95        
Correct output: 145.7928624605 | Program output: 


145        
Correct output: 3.3104353754   | Program output: 


3          
Correct output: 60.4029417431  | Program output: 


60         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_tan} {:instruction float_pop} {:instruction integer_mult} {:instruction integer_dup_items} {:instruction float_flush} {:instruction integer_yankdup} {:instruction float_yank} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_shove} {:instruction float_dec} {:instruction float_tan} {:instruction integer_dup} {:instruction integer_max} {:instruction float_add} {:instruction integer_min} {:instruction print_integer} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_mult} {:instruction float_inc} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction print_float} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_shove} {:instruction float_add} {:instruction integer_dup_items} {:instruction print_float} {:instruction in2} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction float_stackdepth} {:instruction float_swap} {:instruction integer_mod} {:instruction integer_rot} {:instruction integer_min} {:instruction integer_rot} {:instruction tagged_220} {:instruction print_newline} {:instruction float_sin} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_shove} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_mod} {:instruction float_rot} {:instruction print_newline} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction float_yank} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_321} {:instruction float_inc} {:instruction print_newline} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_stackdepth})
Best program: (float_tan float_pop integer_mult integer_dup_items float_flush integer_yankdup float_yank float_rot integer_mod integer_dup_items float_shove float_dec float_tan integer_dup integer_max float_add integer_min print_integer integer_div float_dup_items float_mult float_inc integer_mod integer_stackdepth integer_mult print_float float_inc integer_inc integer_shove float_add integer_dup_items print_float in2 integer_fromfloat float_dup_items float_stackdepth float_swap integer_mod integer_rot integer_min integer_rot tagged_220 print_newline float_sin integer_sub float_sub integer_div float_shove float_max float_swap float_mod in1 integer_flush float_max in2 float_mult float_mult float_sub float_mod float_rot print_newline integer_fromfloat integer_add float_swap float_dup float_flush float_yank tag_float_22 float_shove float_dup_times tag_float_321 float_inc print_newline print_integer float_swap float_sin integer_stackdepth float_stackdepth integer_pop float_swap integer_stackdepth)
Errors: [0.5753 12 0.5759 12 0.3722 12 0.8381 11 0.3687 13 0.0988 13 0.2563 11 0.276 13 0.8509 12 0.498 14 0.3954 11 0.6444 14 0.7663 12 0.3576 13 0.6257 13 0.2035 10 0.7059 12 0.7923 10 0.8978 11 0.4059 13 0.1968 12 0.2809 12 0.7929 12 0.3104 11 0.4029 12]
Total: 313.4888999999999
Mean: 6.269778
Genome size: 81
Size: 82
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 5371.906533599999
Median total errors in population: 1341.0
Error averages by case: (238.27127439999992 11.799 212.7682466 5.202 176.44409190000002 3.701 182.81626919999988 4.179 229.94976649999998 5.246 204.78023930000015 4.236 183.74118309999994 4.012 223.13612659999998 4.964 188.8560967 4.346 203.19792109999997 5.439 187.53261839999996 4.286 233.6755341999999 4.111 239.1446848999999 12.401 174.58233059999998 3.673 233.67202730000008 12.773 203.71391880000007 4.129 177.17321070000003 11.729 221.49192850000003 12.606 221.9477493000001 11.705 214.55062460000013 5.251 208.0834903000001 4.637 233.98051900000016 4.42 229.1302622 5.197 210.61056269999992 4.206 180.0648567 4.343)
Error minima by case: (0.5753 9 0.5759 2 0.3722 1 0.8381 2 0.3687 2 0.0988 1 0.2563 1 0.276 2 0.8509 2 0.498 2 0.3954 2 0.6444 1 0.2337 9 0.3576 1 0.6257 10 0.2035 2 0.2941 10 0.2077 9 0.1022 8 0.4059 2 0.1968 1 0.2809 1 0.7929 2 0.3104 2 0.4029 2)
Average genome size in population (length): 61.244
Average program size in population (points): 62.244
Average percent parens in population: 0.018
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.408
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 74
Genome diversity (% unique Plush genomes):	 0.699
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 74
Syntactic diversity (% unique Push programs):	 0.699
Total error diversity:				 0.081
Error (vector) diversity:			 0.089
Behavioral diversity:				 0.096
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 5877343
--- Timings ---
Current time: 1529614898200 milliseconds
Total Time:          15.1 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         5.3 seconds, 34.8%
Fitness Testing:      7.4 seconds, 48.8%
Report:               2.4 seconds, 15.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Number IO problem report - generation 4
Test total error for best: 12765.997099999995
Test mean error for best: 6.38300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: 

-7          
Correct output: 101.5758530321 | Program output: 

101         
Correct output: 5.3722386499   | Program output: 

5           
Correct output: 50.838076484   | Program output: 

50          
Correct output: 149.3686745246 | Program output: 

149         
Correct output: -86.0987731432 | Program output: 

-86         
Correct output: 99.2563149379  | Program output: 

99          
Correct output: 100.2759538143 | Program output: 

100         
Correct output: 55.8508667649  | Program output: 

55          
Correct output: -120.4980478621 | Program output: 

-120        
Correct output: 50.3953926202  | Program output: 

50          
Correct output: -86.6444443408 | Program output: 

-86         
Correct output: 43.2337451713  | Program output: 

44          
Correct output: -69.3575988725 | Program output: 

-69         
Correct output: -32.3742761841 | Program output: 

-33         
Correct output: 21.203493141   | Program output: 

21          
Correct output: 6.2941290036   | Program output: 

7           
Correct output: 28.207733934   | Program output: 

29          
Correct output: 3.102196665    | Program output: 

4           
Correct output: 117.4058715345 | Program output: 

117         
Correct output: 105.1968404292 | Program output: 

105         
Correct output: -95.2809380546 | Program output: 

-95         
Correct output: 145.7928624605 | Program output: 

145         
Correct output: 3.3104353754   | Program output: 

3           
Correct output: 60.4029417431  | Program output: 

60          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction float_dup} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction -80} {:instruction integer_dup_times} {:instruction integer_mult} {:instruction float_mod} {:instruction float_yank} {:instruction float_dup_items} {:instruction integer_inc} {:instruction tag_float_474} {:instruction float_flush} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_frominteger} {:instruction integer_dec} {:instruction in1} {:instruction integer_dec} {:instruction float_add} {:instruction integer_max} {:instruction float_mod} {:instruction float_pop} {:instruction float_tan} {:instruction float_pop} {:instruction integer_sub} {:instruction tag_integer_188} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction float_pop} {:instruction integer_mult} {:instruction in2} {:instruction float_mod} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction integer_div} {:instruction float_dup} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_add} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_shove} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_mod} {:instruction float_rot} {:instruction print_newline} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction float_yank} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_321} {:instruction float_inc} {:instruction print_newline} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_stackdepth})
Best program: (integer_pop integer_stackdepth integer_sub float_dup float_swap integer_fromfloat -80 integer_dup_times integer_mult float_mod float_yank float_dup_items integer_inc tag_float_474 float_flush integer_dup integer_dec integer_pop integer_dup_times float_frominteger integer_dec in1 integer_dec float_add integer_max float_mod float_pop float_tan float_pop integer_sub tag_integer_188 integer_stackdepth integer_yank float_pop integer_mult in2 float_mod float_stackdepth float_stackdepth integer_div float_dup float_cos integer_fromfloat integer_add float_add float_add integer_sub float_sub integer_div float_shove float_max float_swap float_mod in1 float_mod in1 integer_flush float_max in2 float_mult float_mult float_sub float_mod float_rot print_newline integer_fromfloat integer_add float_swap float_dup float_flush float_yank tag_float_22 float_shove float_dup_times tag_float_321 float_inc print_newline print_integer float_swap float_sin integer_stackdepth float_stackdepth integer_pop float_swap integer_stackdepth)
Errors: [0.5753 12 0.5759 11 0.3722 12 0.8381 11 0.3687 13 0.0988 13 0.2563 11 0.276 13 0.8509 12 0.498 13 0.3954 11 0.6444 13 0.7663 12 0.3576 13 0.6257 13 0.2035 10 0.7059 12 0.7923 10 0.8978 11 0.4059 13 0.1968 12 0.2809 12 0.7929 12 0.3104 11 0.4029 12]
Total: 310.4888999999999
Mean: 6.209778
Genome size: 85
Size: 86
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 5111.608347900001
Median total errors in population: 1339.0
Error averages by case: (221.90897769999967 11.717 200.73665429999997 6.153 168.22026179999997 4.936 173.6448961999995 4.991 216.00903369999986 6.261 196.05886090000067 4.925 175.26445310000005 4.56 210.39911989999996 5.658 180.13817680000008 5.258 198.7408074999999 6.431 177.7863631000001 5.13 218.0255020999996 4.853 225.91180119999962 11.78 171.83590539999977 4.785 217.83974660000032 12.783 191.70468120000038 4.909 168.5375490000001 11.633 209.83263710000008 12.241 212.0853760000004 11.354 202.3009395000005 6.25 196.59048470000042 6.022 219.04103850000058 5.391 215.25467330000006 6.146 197.55384679999955 4.967 171.7965615 5.256)
Error minima by case: (0.4247 8 0.5759 3 0.3722 1 0.1619 2 0.3687 3 0.0988 1 0.2563 1 0.276 2 0.8509 2 0.498 2 0.3954 2 0.3556 1 0.2337 9 0.0 0 0.3743 10 0.2035 2 0.2941 9 0.2077 9 0.1022 9 0.4059 2 0.1968 2 0.2809 1 0.2071 3 0.3104 2 0.4029 2)
Average genome size in population (length): 60.438
Average program size in population (points): 61.438
Average percent parens in population: 0.017
Minimum age in population: 4.0
Maximum age in population: 7.5
Average age in population: 5.857875
Median age in population: 5.875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 109
Genome diversity (% unique Plush genomes):	 0.684
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 109
Syntactic diversity (% unique Push programs):	 0.684
Total error diversity:				 0.081
Error (vector) diversity:			 0.091
Behavioral diversity:				 0.098
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 7393194
--- Timings ---
Current time: 1529614901610 milliseconds
Total Time:          18.5 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         6.6 seconds, 35.8%
Fitness Testing:      9.0 seconds, 48.3%
Report:               2.8 seconds, 15.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Number IO problem report - generation 5
Test total error for best: 12765.997099999995
Test mean error for best: 6.38300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: 

-7          
Correct output: 101.5758530321 | Program output: 

101         
Correct output: 5.3722386499   | Program output: 

5           
Correct output: 50.838076484   | Program output: 

50          
Correct output: 149.3686745246 | Program output: 

149         
Correct output: -86.0987731432 | Program output: 

-86         
Correct output: 99.2563149379  | Program output: 

99          
Correct output: 100.2759538143 | Program output: 

100         
Correct output: 55.8508667649  | Program output: 

55          
Correct output: -120.4980478621 | Program output: 

-120        
Correct output: 50.3953926202  | Program output: 

50          
Correct output: -86.6444443408 | Program output: 

-86         
Correct output: 43.2337451713  | Program output: 

44          
Correct output: -69.3575988725 | Program output: 

-69         
Correct output: -32.3742761841 | Program output: 

-33         
Correct output: 21.203493141   | Program output: 

21          
Correct output: 6.2941290036   | Program output: 

7           
Correct output: 28.207733934   | Program output: 

29          
Correct output: 3.102196665    | Program output: 

4           
Correct output: 117.4058715345 | Program output: 

117         
Correct output: 105.1968404292 | Program output: 

105         
Correct output: -95.2809380546 | Program output: 

-95         
Correct output: 145.7928624605 | Program output: 

145         
Correct output: 3.3104353754   | Program output: 

3           
Correct output: 60.4029417431  | Program output: 

60          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction float_dup} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction -80} {:instruction integer_dup_times} {:instruction integer_mult} {:instruction float_mod} {:instruction float_yank} {:instruction float_dup_items} {:instruction integer_inc} {:instruction tag_float_474} {:instruction float_flush} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_frominteger} {:instruction integer_dec} {:instruction in1} {:instruction integer_dec} {:instruction float_add} {:instruction integer_max} {:instruction float_mod} {:instruction float_pop} {:instruction float_tan} {:instruction float_pop} {:instruction integer_sub} {:instruction tag_integer_188} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction float_pop} {:instruction integer_mult} {:instruction in2} {:instruction float_mod} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction integer_div} {:instruction float_dup} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_add} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_shove} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_mod} {:instruction float_rot} {:instruction print_newline} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction float_yank} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_321} {:instruction float_inc} {:instruction print_newline} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_stackdepth})
Best program: (integer_pop integer_stackdepth integer_sub float_dup float_swap integer_fromfloat -80 integer_dup_times integer_mult float_mod float_yank float_dup_items integer_inc tag_float_474 float_flush integer_dup integer_dec integer_pop integer_dup_times float_frominteger integer_dec in1 integer_dec float_add integer_max float_mod float_pop float_tan float_pop integer_sub tag_integer_188 integer_stackdepth integer_yank float_pop integer_mult in2 float_mod float_stackdepth float_stackdepth integer_div float_dup float_cos integer_fromfloat integer_add float_add float_add integer_sub float_sub integer_div float_shove float_max float_swap float_mod in1 float_mod in1 integer_flush float_max in2 float_mult float_mult float_sub float_mod float_rot print_newline integer_fromfloat integer_add float_swap float_dup float_flush float_yank tag_float_22 float_shove float_dup_times tag_float_321 float_inc print_newline print_integer float_swap float_sin integer_stackdepth float_stackdepth integer_pop float_swap integer_stackdepth)
Errors: [0.5753 12 0.5759 11 0.3722 12 0.8381 11 0.3687 13 0.0988 13 0.2563 11 0.276 13 0.8509 12 0.498 13 0.3954 11 0.6444 13 0.7663 12 0.3576 13 0.6257 13 0.2035 10 0.7059 12 0.7923 10 0.8978 11 0.4059 13 0.1968 12 0.2809 12 0.7929 12 0.3104 11 0.4029 12]
Total: 310.4888999999999
Mean: 6.209778
Genome size: 85
Size: 86
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 5329.040213599999
Median total errors in population: 1339.0
Error averages by case: (209.05637439999887 11.976 202.2916927999997 9.26 182.7692408000004 8.102 185.4206810999984 7.981 209.94319519999942 9.595 213.64768220000218 8.83 189.8168424000005 7.815 207.43318790000075 9.239 191.90529829999957 8.504 229.02311679999937 10.145 187.67964270000058 8.179 211.81198999999876 8.934 227.2524392999988 11.755 210.1805628999985 8.836 206.72363240000092 13.212 193.3921161000011 7.73 183.5971729000003 11.793 217.16970800000027 11.818 225.65183520000133 11.007 201.91540970000162 9.581 198.5415295000014 9.09 214.95136010000186 8.978 209.68726720000018 9.22 195.50106979999856 7.91 185.58816589999924 8.599)
Error minima by case: (0.4247 7 0.5759 3 0.3722 1 0.1619 2 0.3687 3 0.0988 1 0.2563 1 0.276 2 0.8509 2 0.498 2 0.3954 2 0.3556 1 0.2337 9 0.3576 1 0.3743 11 0.2035 2 0.2941 8 0.2077 8 0.1022 9 0.4059 3 0.1968 2 0.2809 1 0.2071 3 0.3104 2 0.4029 2)
Average genome size in population (length): 71.289
Average program size in population (points): 72.289
Average percent parens in population: 0.015
Minimum age in population: 5.0
Maximum age in population: 9.125
Average age in population: 7.3578125
Median age in population: 7.375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 46
Genome diversity (% unique Plush genomes):	 0.817
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 46
Syntactic diversity (% unique Push programs):	 0.817
Total error diversity:				 0.143
Error (vector) diversity:			 0.153
Behavioral diversity:				 0.162
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 9181519
--- Timings ---
Current time: 1529614905111 milliseconds
Total Time:          22.1 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         8.0 seconds, 36.2%
Fitness Testing:     10.7 seconds, 48.4%
Report:               3.3 seconds, 14.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Number IO problem report - generation 6
Test total error for best: 12297.997099999995
Test mean error for best: 6.14900
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: 
-7           
Correct output: 101.5758530321 | Program output: 
101          
Correct output: 5.3722386499   | Program output: 
5            
Correct output: 50.838076484   | Program output: 
50           
Correct output: 149.3686745246 | Program output: 
149          
Correct output: -86.0987731432 | Program output: 
-86          
Correct output: 99.2563149379  | Program output: 
99           
Correct output: 100.2759538143 | Program output: 
100          
Correct output: 55.8508667649  | Program output: 
55           
Correct output: -120.4980478621 | Program output: 
-120         
Correct output: 50.3953926202  | Program output: 
50           
Correct output: -86.6444443408 | Program output: 
-86          
Correct output: 43.2337451713  | Program output: 
44           
Correct output: -69.3575988725 | Program output: 
-69          
Correct output: -32.3742761841 | Program output: 
-33          
Correct output: 21.203493141   | Program output: 
21           
Correct output: 6.2941290036   | Program output: 
7            
Correct output: 28.207733934   | Program output: 
29           
Correct output: 3.102196665    | Program output: 
4            
Correct output: 117.4058715345 | Program output: 
117          
Correct output: 105.1968404292 | Program output: 
105          
Correct output: -95.2809380546 | Program output: 
-95          
Correct output: 145.7928624605 | Program output: 
145          
Correct output: 3.3104353754   | Program output: 
3            
Correct output: 60.4029417431  | Program output: 
60           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_tan} {:instruction float_pop} {:instruction integer_mult} {:instruction integer_dup_items} {:instruction float_flush} {:instruction integer_yankdup} {:instruction float_yank} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_shove} {:instruction float_dec} {:instruction float_tan} {:instruction integer_dup} {:instruction integer_max} {:instruction float_add} {:instruction integer_min} {:instruction print_integer} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_mult} {:instruction float_inc} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction print_float} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_shove} {:instruction float_add} {:instruction integer_dup_items} {:instruction print_float} {:instruction in2} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction float_sin} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_shove} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_mod} {:instruction float_rot} {:instruction print_newline} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction float_yank} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_321} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_stackdepth})
Best program: (float_tan float_pop integer_mult integer_dup_items float_flush integer_yankdup float_yank float_rot integer_mod integer_dup_items float_shove float_dec float_tan integer_dup integer_max float_add integer_min print_integer integer_div float_dup_items float_mult float_inc integer_mod integer_stackdepth integer_mult print_float float_inc integer_inc integer_shove float_add integer_dup_items print_float in2 integer_fromfloat float_dup_items float_sin integer_sub float_sub integer_div float_shove float_max float_swap float_mod in1 float_mod in1 integer_flush float_max in2 float_mult float_mult float_sub float_mod float_rot print_newline integer_fromfloat integer_add float_swap float_dup float_flush float_yank tag_float_22 float_shove float_dup_times tag_float_321 print_integer float_swap float_sin integer_stackdepth float_stackdepth integer_pop float_swap integer_stackdepth)
Errors: [0.5753 12 0.5759 11 0.3722 12 0.8381 11 0.3687 12 0.0988 12 0.2563 11 0.276 12 0.8509 11 0.498 12 0.3954 11 0.6444 12 0.7663 12 0.3576 12 0.6257 12 0.2035 10 0.7059 12 0.7923 10 0.8978 11 0.4059 12 0.1968 12 0.2809 12 0.7929 12 0.3104 11 0.4029 12]
Total: 301.48889999999994
Mean: 6.029778
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3012.515407699998
Median total errors in population: 542.1642999999999
Error averages by case: (104.3253514999983 12.113 106.21855410000013 11.935 97.25669679999925 11.552 101.1853655999989 10.863 108.65565230000134 12.795 120.1035848000021 12.707 105.3919600999987 11.153 107.1426479999991 12.766 104.34792820000048 11.649 140.26030400000212 13.578 102.42322579999912 11.082 104.76865160000044 13.212 115.04243280000094 11.853 128.00660240000184 12.792 102.38002359999996 13.208 100.8187300000017 10.208 96.26818750000047 11.732 113.31487340000038 10.977 121.53798800000081 10.557 106.87867929999885 12.763 105.89036000000077 11.83 107.9553604999989 12.318 108.79231410000028 12.166 100.20511200000098 10.789 104.89282130000055 11.854)
Error minima by case: (0.4247 10 0.4241 3 0.3722 1 0.1619 2 0.3687 3 0.0988 1 0.2563 1 0.276 2 0.1491 2 0.498 3 0.3954 2 0.3556 1 0.2337 10 0.3576 1 0.3743 11 0.2035 2 0.2941 10 0.2077 9 0.1022 8 0.4059 3 0.1968 2 0.2809 2 0.2071 3 0.3104 2 0.4029 2)
Average genome size in population (length): 81.976
Average program size in population (points): 82.976
Average percent parens in population: 0.012
Minimum age in population: 6.5625
Maximum age in population: 10.71875
Average age in population: 8.955
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.834
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.834
Total error diversity:				 0.181
Error (vector) diversity:			 0.195
Behavioral diversity:				 0.203
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 11234544
--- Timings ---
Current time: 1529614908650 milliseconds
Total Time:          25.7 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:         9.4 seconds, 36.6%
Fitness Testing:     12.4 seconds, 48.4%
Report:               3.7 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Number IO problem report - generation 7
Test total error for best: 12297.997099999995
Test mean error for best: 6.14900
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: 
-7           
Correct output: 101.5758530321 | Program output: 
101          
Correct output: 5.3722386499   | Program output: 
5            
Correct output: 50.838076484   | Program output: 
50           
Correct output: 149.3686745246 | Program output: 
149          
Correct output: -86.0987731432 | Program output: 
-86          
Correct output: 99.2563149379  | Program output: 
99           
Correct output: 100.2759538143 | Program output: 
100          
Correct output: 55.8508667649  | Program output: 
55           
Correct output: -120.4980478621 | Program output: 
-120         
Correct output: 50.3953926202  | Program output: 
50           
Correct output: -86.6444443408 | Program output: 
-86          
Correct output: 43.2337451713  | Program output: 
44           
Correct output: -69.3575988725 | Program output: 
-69          
Correct output: -32.3742761841 | Program output: 
-33          
Correct output: 21.203493141   | Program output: 
21           
Correct output: 6.2941290036   | Program output: 
7            
Correct output: 28.207733934   | Program output: 
29           
Correct output: 3.102196665    | Program output: 
4            
Correct output: 117.4058715345 | Program output: 
117          
Correct output: 105.1968404292 | Program output: 
105          
Correct output: -95.2809380546 | Program output: 
-95          
Correct output: 145.7928624605 | Program output: 
145          
Correct output: 3.3104353754   | Program output: 
3            
Correct output: 60.4029417431  | Program output: 
60           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction float_dup} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction -80} {:instruction integer_dup_times} {:instruction integer_mult} {:instruction float_mod} {:instruction float_yank} {:instruction float_dup_items} {:instruction integer_inc} {:instruction tag_float_474} {:instruction float_flush} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction in1} {:instruction integer_dec} {:instruction in1} {:instruction integer_dec} {:instruction float_add} {:instruction integer_max} {:instruction float_mod} {:instruction float_pop} {:instruction float_tan} {:instruction float_pop} {:instruction integer_sub} {:instruction tag_integer_188} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction float_pop} {:instruction integer_mult} {:instruction float_mult} {:instruction integer_flush} {:instruction float_shove} {:instruction -12.674213871904968} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_min} {:instruction integer_div} {:instruction float_dup} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_pop} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_shove} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_mod} {:instruction float_rot} {:instruction print_newline} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_stackdepth})
Best program: (integer_pop integer_stackdepth integer_sub float_dup float_swap integer_fromfloat -80 integer_dup_times integer_mult float_mod float_yank float_dup_items integer_inc tag_float_474 float_flush integer_dup integer_dec integer_pop integer_dup_times in1 integer_dec in1 integer_dec float_add integer_max float_mod float_pop float_tan float_pop integer_sub tag_integer_188 integer_stackdepth integer_yank float_pop integer_mult float_mult integer_flush float_shove -12.674213871904968 float_dec integer_flush integer_min integer_div float_dup float_cos integer_fromfloat integer_add float_pop float_add integer_sub float_sub integer_div float_shove float_max float_swap float_mod in1 integer_flush float_max in2 float_max in2 float_mult float_mult float_sub float_mod float_rot print_newline integer_fromfloat integer_add float_swap print_integer float_swap float_sin integer_stackdepth float_stackdepth integer_pop float_swap integer_stackdepth)
Errors: [0.5753 12 0.5759 11 0.3722 12 0.8381 11 0.3687 12 0.0988 12 0.2563 11 0.276 12 0.8509 11 0.498 12 0.3954 11 0.6444 12 0.7663 12 0.3576 12 0.6257 12 0.2035 10 0.7059 12 0.7923 10 0.8978 11 0.4059 12 0.1968 12 0.2809 12 0.7929 12 0.3104 11 0.4029 12]
Total: 301.48889999999994
Mean: 6.029778
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2839.6502663999977
Median total errors in population: 313.4888999999999
Error averages by case: (103.5788965999984 12.1 101.95560889999962 11.83 95.75490359999911 11.883 102.11465159999858 10.988 104.04376900000177 12.952 103.396584800002 12.935 102.37923729999828 11.202 101.2927759999991 12.958 99.67843210000099 11.924 108.53780600000212 13.555 102.15555439999876 11.2 98.85258480000083 13.475 101.81767080000127 12.063 103.98931760000156 12.984 102.42782820000045 13.099 101.70253300000165 10.237 93.64077810000056 11.836 99.50749450000049 10.411 101.37931380000119 10.834 102.68013299999903 12.926 101.95241280000128 12.06 100.77992229999903 12.182 104.2166514000003 12.176 101.33249440000094 10.948 99.69491140000059 12.03)
Error minima by case: (0.4247 6 0.4241 7 0.3722 4 0.1619 6 0.3687 7 0.0988 6 0.2563 5 0.276 6 0.1491 6 0.498 7 0.3954 6 0.3556 6 0.2337 6 0.3576 5 0.3743 7 0.2035 6 0.2941 5 0.2077 6 0.1022 5 0.4059 7 0.1968 6 0.2809 6 0.2071 7 0.3104 5 0.4029 6)
Average genome size in population (length): 81.441
Average program size in population (points): 82.441
Average percent parens in population: 0.012
Minimum age in population: 8.125
Maximum age in population: 12.484375
Average age in population: 10.426765625
Median age in population: 10.484375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.824
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.824
Total error diversity:				 0.133
Error (vector) diversity:			 0.144
Behavioral diversity:				 0.152
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 13271469
--- Timings ---
Current time: 1529614912115 milliseconds
Total Time:          29.1 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        10.8 seconds, 37.0%
Fitness Testing:     14.1 seconds, 48.4%
Report:               4.1 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Number IO problem report - generation 8
Test total error for best: 12297.997099999995
Test mean error for best: 6.14900
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: 
-7           
Correct output: 101.5758530321 | Program output: 
101          
Correct output: 5.3722386499   | Program output: 
5            
Correct output: 50.838076484   | Program output: 
50           
Correct output: 149.3686745246 | Program output: 
149          
Correct output: -86.0987731432 | Program output: 
-86          
Correct output: 99.2563149379  | Program output: 
99           
Correct output: 100.2759538143 | Program output: 
100          
Correct output: 55.8508667649  | Program output: 
55           
Correct output: -120.4980478621 | Program output: 
-120         
Correct output: 50.3953926202  | Program output: 
50           
Correct output: -86.6444443408 | Program output: 
-86          
Correct output: 43.2337451713  | Program output: 
44           
Correct output: -69.3575988725 | Program output: 
-69          
Correct output: -32.3742761841 | Program output: 
-33          
Correct output: 21.203493141   | Program output: 
21           
Correct output: 6.2941290036   | Program output: 
7            
Correct output: 28.207733934   | Program output: 
29           
Correct output: 3.102196665    | Program output: 
4            
Correct output: 117.4058715345 | Program output: 
117          
Correct output: 105.1968404292 | Program output: 
105          
Correct output: -95.2809380546 | Program output: 
-95          
Correct output: 145.7928624605 | Program output: 
145          
Correct output: 3.3104353754   | Program output: 
3            
Correct output: 60.4029417431  | Program output: 
60           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction float_pop} {:instruction integer_mult} {:instruction integer_dup_items} {:instruction float_flush} {:instruction integer_yankdup} {:instruction float_yank} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_shove} {:instruction float_dec} {:instruction float_tan} {:instruction integer_dup} {:instruction integer_max} {:instruction float_add} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_mult} {:instruction float_inc} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction print_float} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_shove} {:instruction float_add} {:instruction integer_dup_items} {:instruction float_pop} {:instruction in2} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction float_sin} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_shove} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_mod} {:instruction float_rot} {:instruction print_newline} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction float_yank} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_321} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_stackdepth})
Best program: (integer_max float_pop integer_mult integer_dup_items float_flush integer_yankdup float_yank float_rot integer_mod integer_dup_items float_shove float_dec float_tan integer_dup integer_max float_add integer_fromfloat print_integer integer_div float_dup_items float_mult float_inc integer_mod integer_stackdepth integer_mult print_float float_inc integer_inc integer_shove float_add integer_dup_items float_pop in2 integer_fromfloat float_dup_items float_sin integer_sub float_sub integer_div float_shove float_max float_swap float_mod in1 float_mod in1 integer_flush float_max in2 float_mult float_mult float_sub float_mod float_rot print_newline integer_fromfloat integer_add float_swap float_dup float_flush float_yank tag_float_22 float_shove float_dup_times tag_float_321 print_integer float_swap float_sin integer_stackdepth integer_flush float_yankdup float_swap integer_stackdepth)
Errors: [0.5753 12 0.5759 11 0.3722 12 0.8381 11 0.3687 12 0.0988 12 0.2563 11 0.276 12 0.8509 11 0.498 12 0.3954 11 0.6444 12 0.7663 12 0.3576 12 0.6257 12 0.2035 10 0.7059 12 0.7923 10 0.8978 11 0.4059 12 0.1968 12 0.2809 12 0.7929 12 0.3104 11 0.4029 12]
Total: 301.48889999999994
Mean: 6.029778
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2546.662723599997
Median total errors in population: 310.4888999999999
Error averages by case: (90.68210139999847 12.057 91.46746180000031 11.408 84.43785879999919 11.939 89.96708979999916 11.005 94.05004220000126 12.936 90.18692000000134 12.938 91.88269519999898 11.174 90.77567599999907 12.913 88.68795910000021 11.96 94.24419600000145 13.177 90.04025319999924 11.187 87.34060440000007 13.112 90.17949640000133 12.082 90.5611248000015 12.97 90.01958240000005 13.002 89.12860300000155 10.199 82.54260290000065 11.858 88.71102440000048 10.255 89.72137840000069 10.877 92.29474539999902 12.889 91.49051360000053 12.112 88.38209089999911 12.186 94.15736740000033 12.136 88.45932320000092 10.946 87.91901290000051 12.015)
Error minima by case: (0.4247 5 0.4241 6 0.3722 4 0.1619 5 0.3687 6 0.0988 6 0.2563 5 0.276 6 0.1491 5 0.498 7 0.3954 5 0.3556 6 0.2337 5 0.3576 5 0.3743 6 0.2035 5 0.2941 4 0.2077 5 0.1022 4 0.4059 6 0.1968 5 0.2809 6 0.2071 6 0.3104 4 0.4029 5)
Average genome size in population (length): 80.865
Average program size in population (points): 81.865
Average percent parens in population: 0.012
Minimum age in population: 9.5
Maximum age in population: 13.734375
Average age in population: 11.7960390625
Median age in population: 11.80859375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.828
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.828
Total error diversity:				 0.076
Error (vector) diversity:			 0.081
Behavioral diversity:				 0.088
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 15293219
--- Timings ---
Current time: 1529614915492 milliseconds
Total Time:          32.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        12.1 seconds, 37.2%
Fitness Testing:     15.7 seconds, 48.3%
Report:               4.6 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Number IO problem report - generation 9
Test total error for best: 11491.997099999995
Test mean error for best: 5.74600
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7
           
Correct output: 101.5758530321 | Program output: 101
          
Correct output: 5.3722386499   | Program output: 5
            
Correct output: 50.838076484   | Program output: 50
           
Correct output: 149.3686745246 | Program output: 149
          
Correct output: -86.0987731432 | Program output: -86
          
Correct output: 99.2563149379  | Program output: 99
           
Correct output: 100.2759538143 | Program output: 100
          
Correct output: 55.8508667649  | Program output: 55
           
Correct output: -120.4980478621 | Program output: -120
         
Correct output: 50.3953926202  | Program output: 50
           
Correct output: -86.6444443408 | Program output: -86
          
Correct output: 43.2337451713  | Program output: 44
           
Correct output: -69.3575988725 | Program output: -69
          
Correct output: -32.3742761841 | Program output: -33
          
Correct output: 21.203493141   | Program output: 21
           
Correct output: 6.2941290036   | Program output: 7
            
Correct output: 28.207733934   | Program output: 29
           
Correct output: 3.102196665    | Program output: 4
            
Correct output: 117.4058715345 | Program output: 117
          
Correct output: 105.1968404292 | Program output: 105
          
Correct output: -95.2809380546 | Program output: -95
          
Correct output: 145.7928624605 | Program output: 145
          
Correct output: 3.3104353754   | Program output: 3
            
Correct output: 60.4029417431  | Program output: 60
           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_dup} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction -80} {:instruction integer_dup_times} {:instruction integer_mult} {:instruction float_mod} {:instruction float_yank} {:instruction float_dup_items} {:instruction integer_inc} {:instruction tag_float_474} {:instruction float_flush} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_tan} {:instruction float_pop} {:instruction integer_sub} {:instruction tag_integer_188} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction float_pop} {:instruction integer_mult} {:instruction in2} {:instruction float_mod} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction integer_div} {:instruction float_dup} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_add} {:instruction float_add} {:instruction float_dup} {:instruction float_sub} {:instruction integer_div} {:instruction float_shove} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_div} {:instruction in2} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_321} {:instruction float_inc} {:instruction print_newline} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_stackdepth})
Best program: (integer_sub float_dup float_swap integer_fromfloat -80 integer_dup_times integer_mult float_mod float_yank float_dup_items integer_inc tag_float_474 float_flush integer_dup integer_dec integer_pop integer_dup_times float_pop float_tan float_pop integer_sub tag_integer_188 integer_stackdepth integer_yank float_pop integer_mult in2 float_mod float_stackdepth float_stackdepth integer_div float_dup float_cos integer_fromfloat integer_add float_add float_add float_dup float_sub integer_div float_shove integer_fromfloat float_swap float_mod in1 float_mod in1 integer_flush float_div in2 float_mult in1 integer_fromfloat integer_add float_swap float_dup float_flush print_integer tag_float_78 float_shove float_dup_times tag_float_321 float_inc print_newline print_integer float_swap float_sin integer_stackdepth float_stackdepth integer_pop float_swap integer_stackdepth)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.7663 11 0.3576 11 0.6257 11 0.2035 10 0.7059 12 0.7923 10 0.8978 11 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 285.4889
Mean: 5.709778
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2844.6255958999977
Median total errors in population: 310.4888999999999
Error averages by case: (104.64529419999825 12.071 104.0473365999998 11.375 91.91569279999923 11.892 103.8999753999982 10.995 106.72382470000214 12.676 103.0923272000023 12.67 104.74728769999814 11.156 102.70246399999901 12.659 99.67858120000079 11.714 107.09220800000244 12.889 103.93276359999841 11.202 94.81738240000048 12.801 102.63346930000154 12.08 103.59369440000174 12.699 103.73919130000071 12.78 103.00392250000179 10.202 87.5778380000006 11.877 100.9557245000006 10.315 101.92970700000141 10.864 105.11300379999894 12.617 104.22818400000138 12.098 96.99524819999912 12.165 106.89054490000031 12.113 102.23318400000105 10.934 101.60374620000066 11.989)
Error minima by case: (0.4247 10 0.4241 6 0.3722 4 0.1619 5 0.3687 6 0.0988 6 0.2563 5 0.276 6 0.1491 5 0.498 7 0.3954 5 0.3556 5 0.2337 11 0.3576 4 0.3743 11 0.2035 5 0.2941 9 0.2077 9 0.1022 8 0.4059 6 0.1968 5 0.2809 5 0.2071 6 0.3104 4 0.4029 5)
Average genome size in population (length): 78.993
Average program size in population (points): 79.993
Average percent parens in population: 0.013
Minimum age in population: 10.75
Maximum age in population: 15.0703125
Average age in population: 13.2980625
Median age in population: 13.359375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.876
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.876
Total error diversity:				 0.095
Error (vector) diversity:			 0.098
Behavioral diversity:				 0.107
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 17268169
--- Timings ---
Current time: 1529614918873 milliseconds
Total Time:          35.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        13.5 seconds, 37.5%
Fitness Testing:     17.3 seconds, 48.2%
Report:               5.0 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Number IO problem report - generation 10
Test total error for best: 11475.997099999995
Test mean error for best: 5.73800
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 44            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 7             
Correct output: 28.207733934   | Program output: 29            
Correct output: 3.102196665    | Program output: 4             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction float_dup} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction -80} {:instruction integer_dup_times} {:instruction integer_mult} {:instruction float_mod} {:instruction float_yank} {:instruction float_dup_items} {:instruction integer_inc} {:instruction integer_yankdup} {:instruction integer_max} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_mod} {:instruction 81} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction integer_rot} {:instruction float_max} {:instruction float_mult} {:instruction float_cos} {:instruction float_yank} {:instruction tag_float_152} {:instruction integer_dup_times} {:instruction float_min} {:instruction in2} {:instruction in1} {:instruction in1} {:instruction integer_yank} {:instruction float_pop} {:instruction integer_yank} {:instruction float_pop} {:instruction integer_mult} {:instruction in2} {:instruction float_mod} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction integer_div} {:instruction float_dup} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_add} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_shove} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction integer_add} {:instruction float_max} {:instruction in2} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction float_yank} {:instruction tag_float_321} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_stackdepth})
Best program: (integer_pop integer_stackdepth integer_sub float_dup float_swap integer_fromfloat -80 integer_dup_times integer_mult float_mod float_yank float_dup_items integer_inc integer_yankdup integer_max float_max float_dup_items integer_mod 81 float_yankdup float_swap integer_div in2 integer_rot float_max float_mult float_cos float_yank tag_float_152 integer_dup_times float_min in2 in1 in1 integer_yank float_pop integer_yank float_pop integer_mult in2 float_mod float_stackdepth float_stackdepth integer_div float_dup float_cos integer_fromfloat integer_add float_add float_add integer_sub float_sub integer_div float_shove float_max float_swap float_mod in1 float_mod in1 integer_add float_max in2 integer_fromfloat integer_add float_swap float_dup float_flush float_yank tag_float_321 print_integer float_swap float_sin integer_stackdepth float_stackdepth integer_pop float_swap integer_stackdepth)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.7663 11 0.3576 11 0.6257 11 0.2035 10 0.7059 12 0.7923 10 0.8978 11 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 285.4889
Mean: 5.709778
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2951.883449799998
Median total errors in population: 301.48889999999994
Error averages by case: (107.17404719999831 12.029 109.88859879999961 11.346 95.32958139999913 11.847 105.81640639999846 10.951 113.19433500000214 12.253 107.024536800002 12.244 110.69993239999816 11.138 108.83700599999901 12.23 105.32982440000097 11.296 112.2397220000021 12.451 106.02655839999863 11.196 101.12342760000064 12.345 107.64378940000152 12.061 107.37783360000172 12.263 106.37644270000047 12.333 104.37877500000171 10.195 93.16606210000059 11.851 105.5876570000006 10.303 106.00205380000132 10.864 111.2185861999989 12.181 110.11618950000133 12.073 103.02603469999896 12.123 113.28077300000031 12.08 103.159007600001 10.905 105.36126880000063 11.947)
Error minima by case: (0.4247 10 0.4241 6 0.3722 2 0.1619 3 0.3687 6 0.0988 3 0.2563 5 0.276 6 0.1491 5 0.498 4 0.3954 3 0.3556 3 0.2337 10 0.3576 2 0.3743 11 0.2035 3 0.2941 10 0.2077 9 0.1022 9 0.4059 6 0.1968 6 0.2809 3 0.2071 6 0.3104 3 0.4029 5)
Average genome size in population (length): 77.526
Average program size in population (points): 78.526
Average percent parens in population: 0.013
Minimum age in population: 12.1484375
Maximum age in population: 16.54296875
Average age in population: 14.716677734375
Median age in population: 14.751953125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.874
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.874
Total error diversity:				 0.081
Error (vector) diversity:			 0.085
Behavioral diversity:				 0.09
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 19206369
--- Timings ---
Current time: 1529614922239 milliseconds
Total Time:          39.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        14.8 seconds, 37.7%
Fitness Testing:     18.9 seconds, 48.2%
Report:               5.4 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Number IO problem report - generation 11
Test total error for best: 11491.997099999995
Test mean error for best: 5.74600
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7
           
Correct output: 101.5758530321 | Program output: 101
          
Correct output: 5.3722386499   | Program output: 5
            
Correct output: 50.838076484   | Program output: 50
           
Correct output: 149.3686745246 | Program output: 149
          
Correct output: -86.0987731432 | Program output: -86
          
Correct output: 99.2563149379  | Program output: 99
           
Correct output: 100.2759538143 | Program output: 100
          
Correct output: 55.8508667649  | Program output: 55
           
Correct output: -120.4980478621 | Program output: -120
         
Correct output: 50.3953926202  | Program output: 50
           
Correct output: -86.6444443408 | Program output: -86
          
Correct output: 43.2337451713  | Program output: 44
           
Correct output: -69.3575988725 | Program output: -69
          
Correct output: -32.3742761841 | Program output: -33
          
Correct output: 21.203493141   | Program output: 21
           
Correct output: 6.2941290036   | Program output: 7
            
Correct output: 28.207733934   | Program output: 29
           
Correct output: 3.102196665    | Program output: 4
            
Correct output: 117.4058715345 | Program output: 117
          
Correct output: 105.1968404292 | Program output: 105
          
Correct output: -95.2809380546 | Program output: -95
          
Correct output: 145.7928624605 | Program output: 145
          
Correct output: 3.3104353754   | Program output: 3
            
Correct output: 60.4029417431  | Program output: 60
           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_dup} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction -80} {:instruction integer_dup_times} {:instruction integer_mult} {:instruction float_mod} {:instruction float_yank} {:instruction float_dup_items} {:instruction integer_inc} {:instruction tag_float_474} {:instruction float_flush} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_tan} {:instruction float_pop} {:instruction integer_sub} {:instruction tag_integer_188} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction float_pop} {:instruction integer_mult} {:instruction in2} {:instruction float_mod} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction integer_div} {:instruction float_dup} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_add} {:instruction float_add} {:instruction float_dup} {:instruction float_sub} {:instruction integer_div} {:instruction float_shove} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_dup_times} {:instruction in1} {:instruction integer_flush} {:instruction float_div} {:instruction in2} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_321} {:instruction float_inc} {:instruction print_newline} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_stackdepth})
Best program: (integer_sub float_dup float_swap integer_fromfloat -80 integer_dup_times integer_mult float_mod float_yank float_dup_items integer_inc tag_float_474 float_flush integer_dup integer_dec integer_pop integer_dup_times float_pop float_tan float_pop integer_sub tag_integer_188 integer_stackdepth integer_yank float_pop integer_mult in2 float_mod float_stackdepth float_stackdepth integer_div float_dup float_cos integer_fromfloat integer_add float_add float_add float_dup float_sub integer_div float_shove integer_fromfloat float_swap float_mod in1 float_dup_times in1 integer_flush float_div in2 float_mult in1 integer_fromfloat integer_add float_swap float_dup float_flush print_integer tag_float_78 float_shove float_dup_times tag_float_321 float_inc print_newline print_integer float_swap float_sin integer_stackdepth float_stackdepth integer_pop float_swap integer_stackdepth)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.7663 11 0.3576 11 0.6257 11 0.2035 10 0.7059 12 0.7923 10 0.8978 11 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 285.4889
Mean: 5.709778
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2809.696358199997
Median total errors in population: 301.48889999999994
Error averages by case: (106.06167669999812 11.905 101.41707439999982 11.284 92.29853659999894 11.752 101.20911119999862 10.831 103.92483960000192 12.007 104.47484520000214 11.997 101.8373866999983 11.125 100.82850999999893 11.989 97.66759250000064 11.153 108.51273000000248 12.169 101.25093079999877 11.155 102.92849440000074 12.084 98.43870890000161 11.953 104.71861520000174 12.012 105.56545950000067 12.104 99.77340300000186 10.159 89.31279060000065 11.871 96.6230919000006 10.256 96.40372500000115 10.877 102.46123319999889 11.955 101.54139130000114 11.931 103.65106839999885 11.971 104.09555940000031 11.937 97.13518040000115 10.923 98.33640330000061 11.828)
Error minima by case: (0.4247 10 0.4241 3 0.3722 1 0.1619 2 0.3687 3 0.0988 2 0.2563 2 0.276 3 0.1491 2 0.498 3 0.3954 2 0.3556 2 0.2337 10 0.3576 1 0.3743 10 0.2035 2 0.2941 10 0.2077 9 0.1022 8 0.4059 3 0.1968 2 0.2809 2 0.2071 3 0.3104 2 0.4029 2)
Average genome size in population (length): 77.025
Average program size in population (points): 78.025
Average percent parens in population: 0.013
Minimum age in population: 13.5234375
Maximum age in population: 18.052734375
Average age in population: 16.1456201171875
Median age in population: 16.16748046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.871
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.871
Total error diversity:				 0.074
Error (vector) diversity:			 0.08
Behavioral diversity:				 0.084
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 21132094
--- Timings ---
Current time: 1529614925498 milliseconds
Total Time:          42.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        16.1 seconds, 37.9%
Fitness Testing:     20.4 seconds, 48.1%
Report:               5.8 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Number IO problem report - generation 12
Test total error for best: 11475.997099999995
Test mean error for best: 5.73800
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 44            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 7             
Correct output: 28.207733934   | Program output: 29            
Correct output: 3.102196665    | Program output: 4             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_tan} {:instruction float_pop} {:instruction integer_mult} {:instruction integer_dup_items} {:instruction float_flush} {:instruction integer_yankdup} {:instruction float_yank} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_shove} {:instruction float_dec} {:instruction float_tan} {:instruction integer_dup} {:instruction integer_max} {:instruction float_add} {:instruction integer_min} {:instruction print_integer} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_mult} {:instruction float_inc} {:instruction float_div} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction print_float} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_shove} {:instruction float_add} {:instruction integer_dup_items} {:instruction print_float} {:instruction in2} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction float_sin} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_shove} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_mod} {:instruction float_rot} {:instruction float_max} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_add} {:instruction float_dup} {:instruction float_flush} {:instruction float_yank} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_321} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction 66.65161401686979} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_stackdepth})
Best program: (float_tan float_pop integer_mult integer_dup_items float_flush integer_yankdup float_yank integer_swap integer_mod integer_dup_items float_shove float_dec float_tan integer_dup integer_max float_add integer_min print_integer integer_div float_dup_items float_mult float_inc float_div integer_stackdepth integer_mult print_float float_inc integer_inc integer_shove float_add integer_dup_items print_float in2 integer_fromfloat float_dup_items float_sin integer_sub float_sub integer_div float_shove float_max float_swap float_mod in1 float_mod in1 integer_flush float_max in2 float_mult float_mult float_sub float_mod float_rot float_max integer_fromfloat integer_add float_add float_dup float_flush float_yank tag_float_22 float_shove float_dup_times tag_float_321 print_integer float_swap float_sin integer_stackdepth 66.65161401686979 integer_pop float_swap integer_stackdepth)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.7663 11 0.3576 11 0.6257 11 0.2035 10 0.7059 12 0.7923 10 0.8978 11 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 285.4889
Mean: 5.709778
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2676.7383396999976
Median total errors in population: 301.48889999999994
Error averages by case: (102.34359539999832 11.508 96.6886261999998 11.309 84.12922279999916 11.397 93.3271273999986 10.469 98.45543240000157 11.648 101.18393200000213 11.623 96.14502669999843 11.148 94.95238569999907 11.62 93.47165480000095 11.182 105.1932120000022 11.807 92.49278079999881 11.181 97.0139384000008 11.712 97.08067750000149 11.605 101.03140960000172 11.631 101.7915712000005 11.707 93.23009580000172 10.177 81.52637570000061 11.859 95.20532280000062 10.271 94.02037680000124 10.853 96.68515289999897 11.599 95.83968500000115 11.586 98.36843919999895 11.614 98.50229410000031 11.586 91.24193300000098 10.931 93.31807150000066 11.477)
Error minima by case: (0.4247 10 0.4241 4 0.3722 2 0.1619 3 0.3687 4 0.0988 3 0.2563 3 0.276 4 0.1491 3 0.498 4 0.3954 3 0.6444 3 0.7663 10 0.3576 2 0.3743 10 0.2035 3 0.7059 9 0.7923 9 0.8978 8 0.4059 4 0.1968 3 0.2809 3 0.2071 4 0.3104 3 0.4029 3)
Average genome size in population (length): 77.041
Average program size in population (points): 78.041
Average percent parens in population: 0.013
Minimum age in population: 15.04296875
Maximum age in population: 19.66748046875
Average age in population: 17.6224931640625
Median age in population: 17.673095703125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.856
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.856
Total error diversity:				 0.068
Error (vector) diversity:			 0.072
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 23058194
--- Timings ---
Current time: 1529614928719 milliseconds
Total Time:          45.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        17.4 seconds, 38.1%
Fitness Testing:     21.9 seconds, 48.0%
Report:               6.3 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Number IO problem report - generation 13
Test total error for best: 11475.997099999995
Test mean error for best: 5.73800
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 44            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 7             
Correct output: 28.207733934   | Program output: 29            
Correct output: 3.102196665    | Program output: 4             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction float_pop} {:instruction integer_mult} {:instruction integer_dup_items} {:instruction float_flush} {:instruction integer_yankdup} {:instruction float_yank} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_shove} {:instruction float_add} {:instruction print_integer} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_dup} {:instruction integer_min} {:instruction print_integer} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_mult} {:instruction float_inc} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction print_float} {:instruction float_inc} {:instruction integer_min} {:instruction integer_shove} {:instruction float_add} {:instruction integer_dup_items} {:instruction print_float} {:instruction in2} {:instruction integer_yank} {:instruction integer_div} {:instruction float_max} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_add} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_shove} {:instruction float_tan} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_mod} {:instruction float_rot} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction float_yank} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_321} {:instruction float_inc} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_stackdepth})
Best program: (float_dup float_pop integer_mult integer_dup_items float_flush integer_yankdup float_yank float_rot integer_mod integer_dup_items float_shove float_add print_integer integer_dup integer_max integer_dup integer_min print_integer integer_div float_dup_items float_mult float_inc integer_mod integer_stackdepth integer_mult print_float float_inc integer_min integer_shove float_add integer_dup_items print_float in2 integer_yank integer_div float_max float_cos integer_fromfloat integer_add float_add float_add integer_sub float_sub integer_div float_shove float_tan float_swap float_mod in1 integer_flush float_max in2 float_mult float_mult float_sub float_mod float_rot integer_dup_times integer_fromfloat integer_add float_swap float_dup float_flush float_yank tag_float_22 float_shove float_dup_times tag_float_321 float_inc float_flush print_integer float_swap float_sin integer_stackdepth float_stackdepth integer_pop float_swap integer_stackdepth)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.7663 11 0.3576 11 0.6257 11 0.2035 10 0.7059 12 0.7923 10 0.8978 11 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 285.4889
Mean: 5.709778
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2572.4453637999977
Median total errors in population: 285.4889
Error averages by case: (106.83141769999824 11.202 89.2044255000001 11.294 78.96347979999905 11.12 89.42642379999874 10.182 92.15636710000132 11.339 103.67483320000272 11.294 89.09539489999877 11.144 88.22185899999904 11.325 85.50289060000044 11.188 107.09222000000264 11.451 89.57301419999897 11.192 100.81393840000116 11.389 87.43587150000153 11.287 103.61962160000185 11.308 105.88668850000099 11.365 88.94399200000174 10.193 71.59123820000059 11.849 85.68727740000062 10.258 83.9182356000006 10.845 90.16333679999886 11.29 89.17441860000079 11.285 101.87943919999879 11.29 92.2733308000003 11.295 86.60539340000106 10.949 86.19825600000065 11.178)
Error minima by case: (0.4247 3 0.4241 6 0.3722 2 0.1619 4 0.3687 6 0.0988 5 0.2563 4 0.276 6 0.1491 4 0.498 5 0.3954 4 0.3556 3 0.2337 4 0.3576 4 0.3743 4 0.2035 4 0.2941 9 0.2077 9 0.1022 4 0.4059 6 0.1968 5 0.2809 3 0.2071 6 0.3104 3 0.4029 4)
Average genome size in population (length): 76.01
Average program size in population (points): 77.01
Average percent parens in population: 0.013
Minimum age in population: 16.7958984375
Maximum age in population: 21.195068359375
Average age in population: 19.0994365234375
Median age in population: 19.116943359375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.85
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.85
Total error diversity:				 0.088
Error (vector) diversity:			 0.088
Behavioral diversity:				 0.092
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 24958494
--- Timings ---
Current time: 1529614932023 milliseconds
Total Time:          49.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        18.8 seconds, 38.3%
Fitness Testing:     23.5 seconds, 47.9%
Report:               6.6 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Number IO problem report - generation 14
Test total error for best: 11475.997099999995
Test mean error for best: 5.73800
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 44            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 7             
Correct output: 28.207733934   | Program output: 29            
Correct output: 3.102196665    | Program output: 4             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_tan} {:instruction float_pop} {:instruction integer_mult} {:instruction tagged_142} {:instruction float_flush} {:instruction integer_yankdup} {:instruction float_yank} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_tan} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_min} {:instruction integer_dup_items} {:instruction integer_yankdup} {:instruction integer_max} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_mod} {:instruction 81} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_mult} {:instruction float_mult} {:instruction float_inc} {:instruction float_div} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction print_float} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_shove} {:instruction float_add} {:instruction integer_dup_items} {:instruction print_float} {:instruction in2} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction float_sin} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_shove} {:instruction float_max} {:instruction float_swap} {:instruction integer_max} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_mod} {:instruction float_rot} {:instruction float_max} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction float_yank} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_321} {:instruction float_mult} {:instruction float_sub} {:instruction float_mod} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction float_yank} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_321} {:instruction float_inc} {:instruction float_flush} {:instruction float_yank} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_dup_times} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_stackdepth})
Best program: (float_tan float_pop integer_mult tagged_142 float_flush integer_yankdup float_yank integer_swap integer_mod integer_dup_items integer_mult float_dec float_tan float_frominteger integer_dup_items integer_swap integer_swap float_min integer_dup_items integer_yankdup integer_max float_max float_dup_items integer_mod 81 float_yankdup float_swap integer_div in2 integer_rot float_dup_times float_mult float_mult float_inc float_div integer_stackdepth integer_mult print_float float_inc integer_inc integer_shove float_add integer_dup_items print_float in2 integer_fromfloat float_dup_items float_sin integer_sub float_sub integer_div float_shove float_max float_swap integer_max in1 float_mod in1 integer_flush float_max in2 float_mult float_mult float_sub float_mod float_rot float_max integer_fromfloat integer_add float_swap float_dup float_flush float_yank tag_float_22 float_shove float_dup_times tag_float_321 float_mult float_sub float_mod float_swap integer_fromfloat integer_add float_swap float_dup float_flush float_yank tag_float_22 float_shove float_dup_times tag_float_321 float_inc float_flush float_yank tag_float_22 float_shove float_dup_times float_cos print_integer float_swap float_sin integer_stackdepth float_stackdepth integer_pop float_swap integer_stackdepth)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.7663 11 0.3576 11 0.6257 11 0.2035 10 0.7059 12 0.7923 10 0.8978 11 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 285.4889
Mean: 5.709778
Genome size: 106
Size: 107
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2435.3241636999974
Median total errors in population: 285.4889
Error averages by case: (92.08065029999841 11.189 86.88151900000015 11.303 73.47816669999939 11.105 83.72914969999916 10.165 89.90015420000115 11.33 93.97073440000165 11.272 85.45097999999905 11.161 86.40757049999918 11.303 81.72751090000025 11.172 97.77771400000167 11.449 83.79973849999932 11.194 91.81387160000057 11.381 86.13712120000119 11.294 92.85419120000148 11.295 91.95198990000009 11.366 82.7925910000015 10.178 72.48846420000058 11.841 84.09986910000056 10.256 80.80584150000028 10.838 87.94819639999915 11.292 86.79500200000074 11.278 93.161439199999 11.278 89.9200887000003 11.28 79.28791070000074 10.939 81.73569880000065 11.169)
Error minima by case: (0.4247 10 0.4241 5 0.3722 2 0.1619 4 0.3687 5 0.0988 5 0.2563 4 0.276 5 0.1491 4 0.498 6 0.3954 4 0.3556 4 0.2337 9 0.3576 3 0.3743 10 0.2035 4 0.2941 9 0.2077 9 0.1022 8 0.4059 5 0.1968 4 0.2809 4 0.2071 5 0.3104 3 0.4029 4)
Average genome size in population (length): 76.212
Average program size in population (points): 77.212
Average percent parens in population: 0.013
Minimum age in population: 17.7958984375
Maximum age in population: 22.81982421875
Average age in population: 20.61263330078125
Median age in population: 20.66180419921875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.898
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.898
Total error diversity:				 0.083
Error (vector) diversity:			 0.083
Behavioral diversity:				 0.088
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 26863844
--- Timings ---
Current time: 1529614935346 milliseconds
Total Time:          52.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        20.1 seconds, 38.6%
Fitness Testing:     24.9 seconds, 47.8%
Report:               7.0 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Number IO problem report - generation 15
Test total error for best: 11475.997099999995
Test mean error for best: 5.73800
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 44            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 7             
Correct output: 28.207733934   | Program output: 29            
Correct output: 3.102196665    | Program output: 4             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_dup} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction -80} {:instruction integer_dup_times} {:instruction integer_mult} {:instruction float_mod} {:instruction float_yank} {:instruction float_dup_items} {:instruction integer_inc} {:instruction tag_float_474} {:instruction integer_flush} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_tan} {:instruction float_pop} {:instruction integer_sub} {:instruction tag_integer_188} {:instruction float_yank} {:instruction tag_float_152} {:instruction integer_dup_times} {:instruction float_min} {:instruction tag_integer_188} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction float_pop} {:instruction integer_mult} {:instruction float_mult} {:instruction integer_flush} {:instruction float_shove} {:instruction -12.674213871904968} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_min} {:instruction integer_div} {:instruction float_dup} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_pop} {:instruction float_stackdepth} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction integer_mod} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction float_yank} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_321} {:instruction float_inc} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_stackdepth})
Best program: (integer_sub float_dup float_swap integer_fromfloat -80 integer_dup_times integer_mult float_mod float_yank float_dup_items integer_inc tag_float_474 integer_flush integer_dup integer_dec integer_pop integer_dup_times float_pop float_tan float_pop integer_sub tag_integer_188 float_yank tag_float_152 integer_dup_times float_min tag_integer_188 integer_stackdepth integer_yank float_pop integer_mult float_mult integer_flush float_shove -12.674213871904968 float_dec integer_flush integer_min integer_div float_dup float_cos integer_fromfloat integer_add float_pop float_stackdepth integer_sub float_sub integer_div integer_mod float_max float_swap float_mod in1 integer_flush float_max in2 float_max in2 float_mult integer_fromfloat integer_add float_swap float_dup float_flush float_yank tag_float_22 float_shove float_dup_times tag_float_321 float_inc float_flush print_integer float_swap float_sin integer_stackdepth float_stackdepth integer_pop float_swap integer_stackdepth)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.7663 11 0.3576 11 0.6257 11 0.2035 10 0.7059 12 0.7923 10 0.8978 11 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 285.4889
Mean: 5.709778
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2579.8978780999973
Median total errors in population: 285.4889
Error averages by case: (100.76407429999816 11.196 91.49270429999972 11.277 78.692041199999 11.113 89.33344309999887 10.163 93.7147008000018 11.308 100.99642600000222 11.285 91.27884549999834 11.149 91.06984589999894 11.293 89.0873402000009 11.183 104.1532080000021 11.45 89.38572359999907 11.189 100.02822720000083 11.381 92.15180100000163 11.272 100.26940960000182 11.305 100.33157680000045 11.348 88.99675670000182 10.18 74.05200120000065 11.863 90.64592580000064 10.239 85.74631840000092 10.855 92.09041709999883 11.286 91.2864033000011 11.268 100.54843919999881 11.291 93.87098020000032 11.27 82.60759970000113 10.96 89.00766900000063 11.172)
Error minima by case: (0.5753 10 0.5759 6 0.3722 2 0.8381 4 0.3687 6 0.0988 5 0.2563 4 0.276 6 0.8509 4 0.498 6 0.3954 4 0.3556 5 0.2337 9 0.3576 3 0.6257 10 0.2035 4 0.2941 10 0.2077 9 0.1022 8 0.4059 6 0.1968 5 0.2809 5 0.7929 6 0.3104 3 0.4029 4)
Average genome size in population (length): 76.161
Average program size in population (points): 77.161
Average percent parens in population: 0.013
Minimum age in population: 18.7958984375
Maximum age in population: 23.83740234375
Average age in population: 22.07230987548828
Median age in population: 22.14389038085938
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.917
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.917
Total error diversity:				 0.072
Error (vector) diversity:			 0.073
Behavioral diversity:				 0.079
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 28767969
--- Timings ---
Current time: 1529614938602 milliseconds
Total Time:          55.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        21.5 seconds, 38.7%
Fitness Testing:     26.4 seconds, 47.5%
Report:               7.6 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Number IO problem report - generation 16
Test total error for best: 11583.47230000002
Test mean error for best: 5.79174
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -87           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -121          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -87           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -70           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -96           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_dup} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction -80} {:instruction integer_dup_times} {:instruction integer_mult} {:instruction float_mod} {:instruction float_yank} {:instruction float_dup_items} {:instruction integer_inc} {:instruction tag_float_474} {:instruction float_flush} {:instruction float_dup} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_tan} {:instruction float_pop} {:instruction integer_mod} {:instruction 81} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_sin} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_shove} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_321} {:instruction float_yank} {:instruction tag_float_22} {:instruction float_shove} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction integer_stackdepth})
Best program: (integer_sub float_dup float_swap integer_fromfloat -80 integer_dup_times integer_mult float_mod float_yank float_dup_items integer_inc tag_float_474 float_flush float_dup float_swap integer_fromfloat integer_dup integer_pop integer_pop integer_dup_times float_pop float_tan float_pop integer_mod 81 float_yankdup float_swap integer_div in2 integer_rot float_dup_items float_sin integer_sub float_sub integer_div float_shove float_max float_swap float_mod in1 float_mod float_mod in1 float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_sub integer_div float_sin float_max integer_fromfloat float_mult in1 integer_fromfloat integer_add float_swap float_dup float_flush print_integer tag_float_78 float_shove float_dup_times tag_float_22 float_shove float_dup_times tag_float_321 float_yank tag_float_22 float_shove print_integer float_swap float_sin integer_stackdepth)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.9012 11 0.2563 11 0.276 11 0.8509 11 0.502 11 0.3954 11 0.3556 12 0.2337 11 0.6424 12 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.7191 11 0.7929 11 0.3104 11 0.4029 11]
Total: 284.40489999999994
Mean: 5.688098
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2675.600816699998
Median total errors in population: 285.4889
Error averages by case: (105.49227909999851 11.155 96.93603549999939 11.234 78.14736819999935 11.065 92.66623489999866 10.137 99.16286240000177 11.281 104.89915100000219 11.235 95.97361059999828 11.103 96.59143119999929 11.268 92.49674850000108 11.157 107.96221790000206 11.394 92.70123849999877 11.129 102.88331730000102 11.318 96.38141620000131 11.265 105.06420220000145 11.245 105.36321370000088 11.307 91.46059510000143 10.122 77.13866410000064 11.879 94.59217800000059 10.238 87.50088120000109 10.885 97.8110031999991 11.231 96.90381630000152 11.221 104.42855999999905 11.226 99.36857420000031 11.217 83.43977690000072 10.929 92.86044050000059 11.134)
Error minima by case: (0.4247 10 0.4241 3 0.3722 1 0.1619 2 0.3687 3 0.0988 2 0.2563 2 0.276 3 0.1491 2 0.498 3 0.3954 2 0.3556 2 0.2337 10 0.3576 1 0.3743 10 0.2035 2 0.2941 9 0.2077 9 0.1022 8 0.4059 3 0.1968 2 0.2809 2 0.2071 3 0.3104 2 0.4029 2)
Average genome size in population (length): 76.214
Average program size in population (points): 77.214
Average percent parens in population: 0.013
Minimum age in population: 20.9368896484375
Maximum age in population: 25.6968994140625
Average age in population: 23.54292736816406
Median age in population: 23.56446838378906
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.912
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.912
Total error diversity:				 0.08
Error (vector) diversity:			 0.082
Behavioral diversity:				 0.086
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 30673469
--- Timings ---
Current time: 1529614941891 milliseconds
Total Time:          58.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        22.9 seconds, 38.8%
Fitness Testing:     27.9 seconds, 47.4%
Report:               8.0 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Number IO problem report - generation 17
Test total error for best: 11583.47230000002
Test mean error for best: 5.79174
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -87           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -121          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -87           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -70           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -96           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_dup} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction -80} {:instruction integer_dup_times} {:instruction integer_mult} {:instruction float_mod} {:instruction float_yank} {:instruction float_dup_items} {:instruction integer_inc} {:instruction tag_float_474} {:instruction float_flush} {:instruction float_dup} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_tan} {:instruction float_pop} {:instruction integer_mod} {:instruction 81} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_sin} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_yank} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_321} {:instruction float_yank} {:instruction tag_float_22} {:instruction float_shove} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction integer_stackdepth})
Best program: (integer_sub float_dup float_swap integer_fromfloat -80 integer_dup_times integer_mult float_mod float_yank float_dup_items integer_inc tag_float_474 float_flush float_dup float_swap integer_fromfloat integer_dup integer_pop integer_pop integer_dup_times float_pop float_tan float_pop integer_mod 81 float_yankdup float_swap integer_div in2 integer_rot float_dup_items float_sin integer_sub float_sub integer_div float_yank float_max float_swap float_mod in1 float_mod float_mod in1 float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_sub integer_div float_sin float_max integer_fromfloat float_mult in1 integer_fromfloat integer_add float_swap float_dup float_flush print_integer tag_float_78 float_shove float_dup_times tag_float_22 float_shove float_dup_times tag_float_321 float_yank tag_float_22 float_shove print_integer float_swap float_sin integer_stackdepth)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.9012 11 0.2563 11 0.276 11 0.8509 11 0.502 11 0.3954 11 0.3556 12 0.2337 11 0.6424 12 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.7191 11 0.7929 11 0.3104 11 0.4029 11]
Total: 284.40489999999994
Mean: 5.688098
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2672.7473072999983
Median total errors in population: 285.4889
Error averages by case: (101.2492248999985 11.159 99.69704409999963 11.252 76.20908679999955 11.104 97.2253635999986 10.145 102.34753230000163 11.301 102.34043800000205 11.247 99.80162749999847 11.117 98.94665199999923 11.278 94.76998020000103 11.161 106.54471800000205 11.411 97.25641239999881 11.146 98.58971640000095 11.354 95.4663051000013 11.256 101.79247600000146 11.276 101.90720810000052 11.317 95.32976800000147 10.143 69.60811040000061 11.86 93.45009710000058 10.206 80.36784560000045 10.847 100.84544529999913 11.252 99.8625406000012 11.234 100.12647289999911 11.247 102.4831017000003 11.228 83.2674996000007 10.942 95.63264070000061 11.147)
Error minima by case: (0.4247 10 0.4241 6 0.3722 2 0.1619 4 0.3687 6 0.0988 5 0.2563 4 0.276 6 0.1491 4 0.498 6 0.3954 4 0.3556 4 0.2337 8 0.3576 4 0.3743 10 0.2035 4 0.2941 10 0.2077 9 0.1022 8 0.4059 6 0.1968 5 0.2809 4 0.2071 6 0.3104 3 0.4029 4)
Average genome size in population (length): 76.063
Average program size in population (points): 77.063
Average percent parens in population: 0.013
Minimum age in population: 22.113525390625
Maximum age in population: 27.11579895019531
Average age in population: 25.00806605529785
Median age in population: 25.03204345703125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.919
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.919
Total error diversity:				 0.074
Error (vector) diversity:			 0.074
Behavioral diversity:				 0.081
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 32575194
--- Timings ---
Current time: 1529614945059 milliseconds
Total Time:          62.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        24.2 seconds, 39.0%
Fitness Testing:     29.3 seconds, 47.3%
Report:               8.4 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Number IO problem report - generation 18
Test total error for best: 11583.47230000002
Test mean error for best: 5.79174
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -87           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -121          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -87           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -70           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -96           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_dup} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction -80} {:instruction integer_dup_times} {:instruction integer_mult} {:instruction float_mod} {:instruction float_yank} {:instruction float_dup_items} {:instruction integer_inc} {:instruction tag_float_474} {:instruction float_flush} {:instruction float_dup} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_tan} {:instruction float_pop} {:instruction integer_mod} {:instruction 81} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_sin} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_yank} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction -54.66743452354172} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_321} {:instruction float_yank} {:instruction tag_float_22} {:instruction float_shove} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction integer_stackdepth})
Best program: (integer_sub float_dup float_swap integer_fromfloat -80 integer_dup_times integer_mult float_mod float_yank float_dup_items integer_inc tag_float_474 float_flush float_dup float_swap integer_fromfloat integer_dup integer_pop integer_pop integer_dup_times float_pop float_tan float_pop integer_mod 81 float_yankdup float_swap integer_div in2 integer_rot float_dup_items float_sin integer_sub float_sub integer_div float_yank float_max float_swap float_mod in1 float_mod float_mod in1 float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_sub integer_div float_sin float_max -54.66743452354172 float_mult in1 integer_fromfloat integer_add float_swap float_dup float_flush print_integer tag_float_78 float_shove float_dup_times tag_float_22 float_shove float_dup_times tag_float_321 float_yank tag_float_22 float_shove print_integer float_swap float_sin integer_stackdepth)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.9012 11 0.2563 11 0.276 11 0.8509 11 0.502 11 0.3954 11 0.3556 12 0.2337 11 0.6424 12 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.7191 11 0.7929 11 0.3104 11 0.4029 11]
Total: 284.40489999999994
Mean: 5.688098
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2739.4439301999973
Median total errors in population: 285.4889
Error averages by case: (108.5896224999982 11.149 98.62640319999988 11.232 81.58747769999933 11.076 97.16658049999864 10.131 101.19055390000172 11.27 109.38664450000228 11.238 99.19095789999837 11.102 97.93351069999923 11.261 93.96396310000063 11.132 113.42006330000235 11.396 97.31814299999887 11.137 104.31898050000096 11.356 97.2918609000014 11.253 108.3991353000017 11.273 108.87857680000067 11.325 95.67224200000165 10.144 74.58598390000061 11.823 95.39832280000066 10.215 88.95468180000054 10.821 99.69899969999904 11.226 98.87822050000136 11.209 106.30126909999909 11.244 101.27857850000031 11.221 89.44116340000082 10.912 94.7039947000007 11.122)
Error minima by case: (0.4247 9 0.4241 6 0.3722 2 0.1619 4 0.3687 6 0.0988 5 0.2563 4 0.276 6 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 10 0.3576 4 0.3743 9 0.2035 4 0.2941 8 0.2077 8 0.1022 8 0.4059 6 0.1968 5 0.2809 5 0.2071 6 0.3104 3 0.4029 4)
Average genome size in population (length): 75.507
Average program size in population (points): 76.507
Average percent parens in population: 0.013
Minimum age in population: 23.4898681640625
Maximum age in population: 28.35064697265625
Average age in population: 26.42711660003662
Median age in population: 26.47203063964844
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.937
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.937
Total error diversity:				 0.079
Error (vector) diversity:			 0.082
Behavioral diversity:				 0.087
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 34463019
--- Timings ---
Current time: 1529614948394 milliseconds
Total Time:          65.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        25.6 seconds, 39.1%
Fitness Testing:     30.8 seconds, 47.1%
Report:               8.9 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Number IO problem report - generation 19
Test total error for best: 11583.47230000002
Test mean error for best: 5.79174
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -87           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -121          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -87           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -70           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -96           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_dup} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction -80} {:instruction integer_dup_times} {:instruction integer_mult} {:instruction float_mod} {:instruction float_yank} {:instruction float_dup_items} {:instruction integer_flush} {:instruction tag_float_474} {:instruction float_flush} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_tan} {:instruction float_pop} {:instruction integer_mod} {:instruction 81} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_sin} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_shove} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_min} {:instruction float_dup_times} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_321} {:instruction float_yank} {:instruction tag_float_22} {:instruction float_shove} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction integer_stackdepth})
Best program: (integer_sub float_dup float_swap integer_fromfloat -80 integer_dup_times integer_mult float_mod float_yank float_dup_items integer_flush tag_float_474 float_flush integer_dup float_swap integer_fromfloat integer_dup integer_pop integer_pop integer_dup_times float_pop float_tan float_pop integer_mod 81 float_yankdup float_swap integer_div in2 integer_rot float_dup_items float_sin integer_sub float_sub integer_div float_shove float_max float_swap float_mod in1 float_mod float_mod in1 float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_sub integer_div float_sin float_max integer_fromfloat float_mult in1 integer_fromfloat integer_add float_swap float_dup float_flush print_integer tag_float_78 float_min float_dup_times tag_float_22 float_shove float_dup_times tag_float_321 float_yank tag_float_22 float_shove print_integer float_swap float_sin integer_stackdepth)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.9012 11 0.2563 11 0.276 11 0.8509 11 0.502 11 0.3954 11 0.3556 12 0.2337 11 0.6424 12 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.7191 11 0.7929 11 0.3104 11 0.4029 11]
Total: 284.40489999999994
Mean: 5.688098
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2515.999474899998
Median total errors in population: 285.4889
Error averages by case: (97.30870379999847 11.138 89.93851059999974 11.222 75.82223679999946 11.085 87.95392789999886 10.116 92.88882080000145 11.252 97.10661800000162 11.204 89.13809149999872 11.105 90.53704799999925 11.24 86.52314060000074 11.13 99.9325200000017 11.338 87.76885779999903 11.138 94.67027840000064 11.358 88.74919910000109 11.216 96.98155120000119 11.296 97.97383940000059 11.294 86.74344150000148 10.129 72.72053900000049 11.802 87.49287570000047 10.176 82.23670020000051 10.797 91.6688277999991 11.222 90.8591100000011 11.204 95.66974239999927 11.197 92.11700170000029 11.206 79.77096880000066 10.936 86.49892390000058 11.127)
Error minima by case: (0.4247 10 0.4241 5 0.3722 2 0.1619 4 0.3687 5 0.0988 5 0.2563 4 0.276 5 0.1491 4 0.498 5 0.3954 4 0.3556 4 0.2337 10 0.3576 3 0.3743 9 0.2035 4 0.2941 9 0.1787 7 0.1022 8 0.4059 5 0.1968 4 0.2809 4 0.2071 5 0.3104 3 0.4029 4)
Average genome size in population (length): 76.375
Average program size in population (points): 77.375
Average percent parens in population: 0.013
Minimum age in population: 25.68344116210938
Maximum age in population: 29.97194671630859
Average age in population: 28.04676591491699
Median age in population: 28.12166213989258
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.886
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.886
Total error diversity:				 0.068
Error (vector) diversity:			 0.071
Behavioral diversity:				 0.076
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 36372619
--- Timings ---
Current time: 1529614951666 milliseconds
Total Time:          68.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.9 seconds, 39.2%
Fitness Testing:     32.3 seconds, 47.1%
Report:               9.3 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Number IO problem report - generation 20
Test total error for best: 11583.47230000002
Test mean error for best: 5.79174
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -87           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -121          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -87           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -70           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -96           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_dup} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction -80} {:instruction integer_dup_times} {:instruction integer_mult} {:instruction float_mod} {:instruction float_rot} {:instruction float_dup_items} {:instruction integer_inc} {:instruction tag_float_474} {:instruction float_flush} {:instruction float_dup} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_tan} {:instruction float_pop} {:instruction integer_mod} {:instruction 81} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_sin} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_shove} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_min} {:instruction float_dup_times} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_321} {:instruction float_yank} {:instruction tag_float_22} {:instruction float_shove} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction integer_stackdepth})
Best program: (integer_sub float_dup float_swap integer_fromfloat -80 integer_dup_times integer_mult float_mod float_rot float_dup_items integer_inc tag_float_474 float_flush float_dup float_swap integer_fromfloat integer_dup integer_pop integer_pop integer_dup_times float_pop float_tan float_pop integer_mod 81 float_yankdup float_swap integer_div in2 integer_rot float_dup_items float_sin integer_sub float_sub integer_div float_shove float_max float_swap float_mod in1 float_mod float_mod in1 float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_sub integer_div float_sin float_max integer_fromfloat float_mult in1 integer_fromfloat integer_add float_swap float_dup float_flush print_integer tag_float_78 float_min float_dup_times tag_float_22 float_shove float_dup_times tag_float_321 float_yank tag_float_22 float_shove print_integer float_swap float_sin integer_stackdepth)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.9012 11 0.2563 11 0.276 11 0.8509 11 0.502 11 0.3954 11 0.3556 12 0.2337 11 0.6424 12 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.7191 11 0.7929 11 0.3104 11 0.4029 11]
Total: 284.40489999999994
Mean: 5.688098
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2506.570534199998
Median total errors in population: 285.4889
Error averages by case: (95.5861435999983 11.155 88.25373460000007 11.293 75.52086439999928 11.121 87.018039299999 10.139 90.58628310000138 11.275 98.51698440000062 11.224 88.35844099999869 11.143 88.04069499999909 11.279 85.08545940000032 11.16 101.19846400000061 11.388 87.2032386999992 11.206 98.07725520000028 11.64 90.04481250000026 11.221 97.74004880000047 11.541 96.24806280000037 11.338 86.72481120000168 10.195 70.94707010000015 11.543 88.81588070000011 10.193 84.5183333000001 10.528 89.07798929999898 11.259 88.19114010000088 11.254 98.83047219999972 11.231 90.78427710000031 11.244 79.08852940000081 10.908 84.46450400000064 11.171)
Error minima by case: (0.4247 10 0.4241 6 0.3722 2 0.1619 4 0.3687 6 0.0988 5 0.014 4 0.276 6 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 10 0.3576 4 0.3743 9 0.2035 4 0.2941 10 0.2077 9 0.1022 8 0.4059 6 0.1968 5 0.2809 5 0.2071 6 0.3104 3 0.4029 4)
Average genome size in population (length): 78.257
Average program size in population (points): 79.257
Average percent parens in population: 0.013
Minimum age in population: 26.88509368896484
Maximum age in population: 31.5759391784668
Average age in population: 29.69255440139771
Median age in population: 29.71483421325684
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.868
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.868
Total error diversity:				 0.088
Error (vector) diversity:			 0.093
Behavioral diversity:				 0.098
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 38329244
--- Timings ---
Current time: 1529614955014 milliseconds
Total Time:          71.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.2 seconds, 39.2%
Fitness Testing:     33.9 seconds, 47.1%
Report:               9.7 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Number IO problem report - generation 21
Test total error for best: 11486.670699999997
Test mean error for best: 5.74334
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 7             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_dup} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction -80} {:instruction integer_dup_times} {:instruction integer_mult} {:instruction float_mod} {:instruction float_yank} {:instruction float_dup_items} {:instruction integer_inc} {:instruction tag_float_474} {:instruction float_flush} {:instruction float_dup} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_tan} {:instruction integer_dup_times} {:instruction float_pop} {:instruction integer_mult} {:instruction float_sub} {:instruction integer_div} {:instruction float_shove} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction integer_mod} {:instruction 81} {:instruction float_yankdup} {:instruction in2} {:instruction integer_div} {:instruction in2} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_sin} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_yank} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_321} {:instruction float_yank} {:instruction tag_float_22} {:instruction float_shove} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction integer_stackdepth})
Best program: (integer_sub float_dup float_swap integer_fromfloat -80 integer_dup_times integer_mult float_mod float_yank float_dup_items integer_inc tag_float_474 float_flush float_dup float_swap integer_fromfloat integer_dup integer_pop integer_pop integer_dup_times float_pop float_tan integer_dup_times float_pop integer_mult float_sub integer_div float_shove float_max float_swap float_mod in1 integer_mod 81 float_yankdup in2 integer_div in2 integer_rot float_dup_items float_sin integer_sub float_sub integer_div float_yank float_max float_swap float_mod in1 float_mod float_mod in1 float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_sub integer_div float_sin float_max integer_fromfloat float_mult in1 integer_fromfloat integer_add float_swap float_dup float_flush print_integer tag_float_78 float_shove float_dup_times tag_float_22 float_shove float_dup_times tag_float_321 float_yank tag_float_22 float_shove print_integer float_swap float_sin integer_stackdepth)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.7059 12 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 282.5761
Mean: 5.651522
Genome size: 93
Size: 94
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 1925.3476469999969
Median total errors in population: 284.40489999999994
Error averages by case: (74.11796159999895 11.148 63.74046410000116 11.291 57.26842749999982 11.131 65.44285220000054 10.13 68.32092179999985 11.264 74.00154919999989 11.166 65.16310630000045 11.156 65.05510339999964 11.293 60.109030099999494 11.161 76.18807999999973 11.319 65.82915060000056 11.23 72.8669572000004 11.994 66.50356799999942 11.151 68.1416111999994 11.89 73.46398169999931 11.338 67.93950240000086 10.2 42.10351809999964 11.122 64.76126639999968 10.168 64.64328380000045 10.108 64.70022459999956 11.265 63.77916509999953 11.238 73.35987580000037 11.201 66.69037800000032 11.249 61.54498750000037 10.891 62.33468040000045 11.174)
Error minima by case: (0.4247 9 0.4241 10 0.3722 10 0.1619 8 0.3687 9 0.0988 9 0.2563 10 0.276 9 0.1491 10 0.498 9 0.3954 10 0.3556 10 0.2337 10 0.3576 10 0.3743 9 0.2035 9 0.2941 9 0.2077 9 0.1022 8 0.4059 10 0.1968 9 0.2809 10 0.2071 10 0.3104 8 0.4029 10)
Average genome size in population (length): 82.132
Average program size in population (points): 83.132
Average percent parens in population: 0.012
Minimum age in population: 28.56162643432617
Maximum age in population: 33.07841110229492
Average age in population: 31.26233950996399
Median age in population: 31.30838537216187
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.835
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.835
Total error diversity:				 0.071
Error (vector) diversity:			 0.075
Behavioral diversity:				 0.076
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 40382594
--- Timings ---
Current time: 1529614958426 milliseconds
Total Time:          75.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        29.6 seconds, 39.3%
Fitness Testing:     35.4 seconds, 47.0%
Report:              10.2 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Number IO problem report - generation 22
Test total error for best: 11475.707300000007
Test mean error for best: 5.73785
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 44            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction tag_float_715} {:instruction integer_swap} {:instruction float_frominteger} {:instruction in2} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_min} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_max} {:instruction float_max} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_frominteger} {:instruction integer_dec} {:instruction in1} {:instruction integer_dec} {:instruction float_add} {:instruction float_add} {:instruction integer_max} {:instruction float_mod} {:instruction 81} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_sin} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_321} {:instruction float_yank} {:instruction tag_float_22} {:instruction float_shove} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction integer_stackdepth})
Best program: (integer_pop tag_float_715 integer_swap float_frominteger in2 float_frominteger integer_dup_items integer_swap float_min integer_dup_items integer_min integer_max float_max integer_pop integer_dup_times float_frominteger integer_dec in1 integer_dec float_add float_add integer_max float_mod 81 float_yankdup float_swap integer_div in2 float_dup_times float_dup_items float_sin integer_sub float_sub integer_div integer_dup_times float_max float_swap float_mod in1 float_mod float_mod in1 float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_sub integer_div float_sin float_max tag_float_518 float_mult in1 integer_fromfloat integer_add float_swap float_dup float_flush print_integer tag_float_78 float_shove float_dup_times tag_float_22 float_shove float_dup_times tag_float_321 float_yank tag_float_22 float_shove print_integer float_swap float_sin integer_stackdepth)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.7663 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.69689999999997
Mean: 5.633938
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2322.7715519999974
Median total errors in population: 284.40489999999994
Error averages by case: (91.67725579999845 11.123 82.04000920000014 11.305 67.61610739999966 11.098 79.99378079999956 10.076 86.88473780000108 11.265 90.70177079999895 11.157 82.89747009999911 11.121 82.45873499999936 11.276 76.35873370000012 11.154 93.89860999999892 11.343 80.66763519999971 11.235 90.9072911999997 12.021 83.39415909999893 11.157 84.58095599999908 11.891 90.89269370000015 11.386 81.40733450000126 10.193 42.7073071999996 11.073 80.81443369999951 10.173 78.33329579999968 10.025 83.51806229999926 11.253 82.2553633000007 11.236 92.24253870000062 11.203 86.06625430000032 11.237 75.27485060000055 10.805 78.24016580000055 11.136)
Error minima by case: (0.4247 10 0.4241 6 0.3722 2 0.1619 4 0.3687 6 0.0988 5 0.2563 4 0.276 5 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 10 0.3576 4 0.3743 9 0.2035 4 0.2941 9 0.2077 9 0.1022 8 0.4059 6 0.1968 5 0.2809 5 0.2071 6 0.3104 3 0.4029 4)
Average genome size in population (length): 82.726
Average program size in population (points): 83.726
Average percent parens in population: 0.012
Minimum age in population: 30.18345642089844
Maximum age in population: 34.51921319961548
Average age in population: 32.69109338617325
Median age in population: 32.72976207733154
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.896
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.896
Total error diversity:				 0.091
Error (vector) diversity:			 0.093
Behavioral diversity:				 0.093
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 42450794
--- Timings ---
Current time: 1529614961799 milliseconds
Total Time:          78.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        30.9 seconds, 39.3%
Fitness Testing:     37.0 seconds, 47.0%
Report:              10.7 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Number IO problem report - generation 23
Test total error for best: 11475.707300000007
Test mean error for best: 5.73785
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 44            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction tag_float_715} {:instruction integer_swap} {:instruction float_frominteger} {:instruction in2} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_min} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_max} {:instruction float_max} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_frominteger} {:instruction integer_dec} {:instruction in1} {:instruction integer_dec} {:instruction float_add} {:instruction float_add} {:instruction integer_max} {:instruction float_mod} {:instruction 81} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_sin} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_321} {:instruction float_yank} {:instruction tag_float_22} {:instruction float_shove} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction integer_stackdepth})
Best program: (integer_pop tag_float_715 integer_swap float_frominteger in2 float_frominteger integer_dup_items integer_swap float_min integer_dup_items integer_min integer_max float_max integer_pop integer_dup_times float_frominteger integer_dec in1 integer_dec float_add float_add integer_max float_mod 81 float_yankdup float_swap integer_div in2 float_dup_times float_dup_items float_sin integer_sub float_sub integer_div integer_dup_times float_max float_swap float_mod in1 float_mod float_mod in1 float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_sub integer_div float_sin float_max tag_float_518 float_mult in1 integer_fromfloat integer_add float_swap float_dup float_flush print_integer tag_float_78 float_shove float_dup_times tag_float_22 float_shove float_dup_times tag_float_321 float_yank tag_float_22 float_shove print_integer float_swap float_sin integer_stackdepth)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.7663 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.69689999999997
Mean: 5.633938
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2485.6412651999976
Median total errors in population: 284.40489999999994
Error averages by case: (93.91928219999845 11.164 90.27279199999992 11.313 77.71249979999936 11.12 88.02549889999887 10.101 93.16945600000166 11.257 91.8776239999987 11.162 89.64600619999864 11.166 89.94560399999914 11.279 87.15583570000085 11.157 94.1035299999987 11.326 88.36906259999903 11.247 91.66155639999941 11.995 90.63406839999871 11.143 87.23404159999899 11.867 94.40003480000054 11.376 89.25249150000153 10.227 57.11769419999951 11.115 89.90754399999948 10.163 89.22848179999903 10.056 91.17697429999906 11.278 89.936396800001 11.263 91.61999940000064 11.2 93.32375200000033 11.25 81.56490400000068 10.855 87.14513460000063 11.161)
Error minima by case: (0.5753 10 0.5759 6 0.3722 3 0.8381 5 0.3687 6 0.0988 4 0.2563 5 0.276 6 0.8509 5 0.498 5 0.3954 5 0.3556 4 0.2337 9 0.3576 3 0.6257 9 0.2035 5 0.2941 9 0.2077 9 0.1022 8 0.4059 6 0.1968 5 0.2809 4 0.7929 6 0.3104 5 0.4029 5)
Average genome size in population (length): 83.662
Average program size in population (points): 84.662
Average percent parens in population: 0.012
Minimum age in population: 31.32218170166016
Maximum age in population: 36.16307187080383
Average age in population: 34.15501781320572
Median age in population: 34.19972550868988
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.909
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.909
Total error diversity:				 0.083
Error (vector) diversity:			 0.086
Behavioral diversity:				 0.087
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 44542357
--- Timings ---
Current time: 1529614965265 milliseconds
Total Time:          82.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        32.3 seconds, 39.3%
Fitness Testing:     38.6 seconds, 47.0%
Report:              11.2 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Number IO problem report - generation 24
Test total error for best: 11432.010300000004
Test mean error for best: 5.71601
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction tag_float_715} {:instruction integer_swap} {:instruction float_frominteger} {:instruction in2} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_min} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_max} {:instruction float_max} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_frominteger} {:instruction integer_dec} {:instruction in1} {:instruction integer_dec} {:instruction float_add} {:instruction float_add} {:instruction integer_max} {:instruction float_mod} {:instruction 81} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_sin} {:instruction integer_sub} {:instruction float_sub} {:instruction float_sub} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_inc} {:instruction tag_float_321} {:instruction float_yank} {:instruction tag_float_22} {:instruction float_shove} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction integer_stackdepth})
Best program: (integer_pop tag_float_715 integer_swap float_frominteger in2 float_frominteger integer_dup_items integer_swap float_min integer_dup_items integer_min integer_max float_max integer_pop integer_dup_times float_frominteger integer_dec in1 integer_dec float_add float_add integer_max float_mod 81 float_yankdup float_swap integer_div in2 float_dup_times float_dup_items float_sin integer_sub float_sub float_sub integer_dup_times float_max float_swap float_mod in1 float_mod float_mod in1 float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_sub integer_div float_sin float_max tag_float_518 float_mult in1 integer_fromfloat integer_add float_swap float_dup float_flush print_integer tag_float_78 float_shove float_dup_times tag_float_22 float_shove float_inc tag_float_321 float_yank tag_float_22 float_shove print_integer float_swap float_sin integer_stackdepth)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2629.368190999997
Median total errors in population: 284.40489999999994
Error averages by case: (98.26713159999859 11.142 99.80507689999989 11.346 78.25002179999957 11.142 91.64916319999907 10.102 101.3228035000015 11.298 98.82818919999956 11.17 97.45873679999853 11.167 97.2186036999991 11.307 93.9243713000009 11.176 101.56897799999962 11.374 92.10226549999915 11.256 96.40863279999985 11.881 97.31692029999861 11.16 94.84558079999951 11.749 98.91815770000055 11.392 91.98185110000131 10.244 55.56575359999974 11.213 95.49130869999946 10.159 93.20118959999927 10.04 101.10011059999896 11.307 97.84357870000103 11.278 96.81653900000028 11.211 103.47816560000031 11.281 84.1291504000006 10.826 94.47791060000064 11.177)
Error minima by case: (0.4247 2 0.0 3 0.0 1 0.0 2 0.0 3 0.0988 3 0.0 2 0.0 3 0.0 2 0.498 4 0.0 2 0.3556 3 0.0 2 0.3576 3 0.3743 3 0.0 2 0.0 1 0.0 2 0.0 1 0.0 3 0.0 3 0.2809 3 0.0 3 0.0 1 0.0 2)
Average genome size in population (length): 85.606
Average program size in population (points): 86.606
Average percent parens in population: 0.012
Minimum age in population: 33.19622373580933
Maximum age in population: 37.58404803276062
Average age in population: 35.60310020244122
Median age in population: 35.65685963630676
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.911
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.911
Total error diversity:				 0.112
Error (vector) diversity:			 0.117
Behavioral diversity:				 0.117
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 46682584
--- Timings ---
Current time: 1529614968697 milliseconds
Total Time:          85.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        33.6 seconds, 39.2%
Fitness Testing:     40.3 seconds, 47.0%
Report:              11.6 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Number IO problem report - generation 25
Test total error for best: 11476.9491
Test mean error for best: 5.73847
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_dup} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction -80} {:instruction float_flush} {:instruction integer_mult} {:instruction float_mod} {:instruction float_yank} {:instruction float_dup_items} {:instruction integer_inc} {:instruction tag_float_474} {:instruction float_flush} {:instruction float_dup} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_dup_times} {:instruction float_pop} {:instruction integer_mult} {:instruction float_sub} {:instruction integer_div} {:instruction float_shove} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction integer_mod} {:instruction 81} {:instruction float_yankdup} {:instruction integer_mult} {:instruction integer_div} {:instruction in2} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_sin} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_yank} {:instruction float_max} {:instruction float_swap} {:instruction integer_dup_items} {:instruction in1} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_321} {:instruction float_yank} {:instruction tag_float_22} {:instruction float_shove} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction integer_stackdepth})
Best program: (integer_sub float_dup float_swap integer_fromfloat -80 float_flush integer_mult float_mod float_yank float_dup_items integer_inc tag_float_474 float_flush float_dup float_swap integer_fromfloat integer_dup integer_pop integer_pop integer_dup_times integer_inc float_tan integer_dup_times float_pop integer_mult float_sub integer_div float_shove float_max float_swap float_mod in1 integer_mod 81 float_yankdup integer_mult integer_div in2 integer_rot float_dup_items float_sin integer_sub float_sub integer_div float_yank float_max float_swap integer_dup_items in1 float_mod float_mod in1 float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_sub integer_div float_sin float_max integer_fromfloat float_mult in1 integer_fromfloat integer_add float_swap float_dup float_flush print_integer tag_float_78 float_shove float_dup_times tag_float_22 float_shove float_dup_times tag_float_321 float_yank tag_float_22 float_shove print_integer float_swap float_sin integer_stackdepth)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 93
Size: 94
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2774.554263199999
Median total errors in population: 284.40489999999994
Error averages by case: (101.0306255999984 11.162 109.8861534999994 11.369 80.17003339999934 11.149 93.23660359999907 10.094 111.91003160000211 11.302 96.7360112000005 11.217 109.98585499999797 11.177 108.35456799999899 11.31 104.53511590000139 11.181 99.98185000000059 11.402 93.76892239999927 11.267 96.70087400000014 11.642 110.49051889999885 11.209 93.58996320000033 11.463 98.89952080000016 11.442 95.41504950000147 10.254 51.355354300000045 11.458 109.2707202999995 10.2 108.51120359999878 10.076 111.10882679999895 11.305 108.13087040000153 11.281 95.20269689999982 11.242 112.99544430000033 11.291 87.64717920000074 10.824 108.13627080000064 11.187)
Error minima by case: (0.4247 10 0.4241 6 0.3722 2 0.1619 4 0.3687 6 0.0988 5 0.2563 4 0.276 6 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 10 0.3576 4 0.3743 9 0.2035 4 0.2941 9 0.2077 9 0.1022 8 0.4059 6 0.1968 5 0.2809 5 0.2071 6 0.3104 3 0.4029 4)
Average genome size in population (length): 89.014
Average program size in population (points): 90.014
Average percent parens in population: 0.011
Minimum age in population: 34.26898193359375
Maximum age in population: 38.88966858386993
Average age in population: 36.96381770092249
Median age in population: 36.99677106738091
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.893
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.893
Total error diversity:				 0.135
Error (vector) diversity:			 0.141
Behavioral diversity:				 0.143
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 48908151
--- Timings ---
Current time: 1529614972254 milliseconds
Total Time:          89.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        34.9 seconds, 39.2%
Fitness Testing:     42.0 seconds, 47.1%
Report:              12.1 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Number IO problem report - generation 26
Test total error for best: 11475.9327
Test mean error for best: 5.73797
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction tag_float_715} {:instruction integer_swap} {:instruction float_frominteger} {:instruction in2} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_min} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_max} {:instruction float_max} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_add} {:instruction float_add} {:instruction integer_max} {:instruction float_mod} {:instruction 81} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 96.80697452437909} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_mod} {:instruction -53.070917232121495} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction float_mod} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_min} {:instruction float_dup_times} {:instruction tag_float_22} {:instruction tag_float_78} {:instruction float_min} {:instruction float_dup_times} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_pop} {:instruction tag_float_321} {:instruction float_yank} {:instruction tag_float_22} {:instruction float_shove} {:instruction tag_float_321} {:instruction float_yank} {:instruction tag_float_22})
Best program: (integer_pop tag_float_715 integer_swap float_frominteger in2 float_frominteger integer_dup_items integer_swap float_min integer_dup_items integer_min integer_max float_max integer_pop integer_dec float_add float_add integer_max float_mod 81 float_yankdup float_swap integer_div in2 float_dup_times float_dup_items 96.80697452437909 integer_sub float_sub integer_div integer_dup_times float_max float_swap float_mod in1 float_mod float_mod -53.070917232121495 float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_sub integer_div float_sin float_max tag_float_518 float_mult in1 integer_fromfloat integer_add float_swap float_swap float_dup float_flush print_integer float_swap float_dup float_flush print_integer integer_fromfloat integer_add float_swap float_dup float_swap float_dup float_flush print_integer float_mod float_rot integer_swap integer_fromfloat integer_add float_swap float_min float_dup_times tag_float_22 tag_float_78 float_min float_dup_times tag_float_22 float_shove float_pop tag_float_321 float_yank tag_float_22 float_shove tag_float_321 float_yank tag_float_22)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 100
Size: 101
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2618.5594819000007
Median total errors in population: 282.5761
Error averages by case: (83.52696589999859 11.134 114.1901761999995 11.306 68.2499597999994 11.105 77.16006099999956 10.059 117.997287900002 11.265 83.50110000000082 11.177 114.11429799999831 11.126 114.5697496999991 11.26 110.55896100000103 11.12 84.5864960000007 11.329 77.33634069999971 11.192 84.18194439999988 11.384 102.31472389999925 11.173 81.34868400000114 11.191 85.0895543999997 11.372 77.48560510000145 10.186 45.71411910000015 11.56 104.75294699999958 10.174 104.9211235999991 10.074 115.23362789999902 11.244 115.24324360000125 11.244 84.67312439999927 11.182 117.23066530000033 11.246 70.29097560000086 10.817 108.22974740000055 11.138)
Error minima by case: (0.4247 10 0.4241 6 0.3722 2 0.1619 4 0.3687 6 0.0988 5 0.2563 4 0.276 6 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 10 0.3576 4 0.3743 10 0.2035 4 0.2941 9 0.2077 9 0.1022 8 0.4059 6 0.1968 5 0.2809 5 0.2071 6 0.3104 3 0.4029 4)
Average genome size in population (length): 90.675
Average program size in population (points): 91.675
Average percent parens in population: 0.011
Minimum age in population: 35.57709980010986
Maximum age in population: 40.23032033443451
Average age in population: 38.28594608417153
Median age in population: 38.31771315634251
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.878
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.878
Total error diversity:				 0.137
Error (vector) diversity:			 0.144
Behavioral diversity:				 0.148
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 51175219
--- Timings ---
Current time: 1529614975952 milliseconds
Total Time:          92.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        36.3 seconds, 39.1%
Fitness Testing:     43.8 seconds, 47.2%
Report:              12.6 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Number IO problem report - generation 27
Test total error for best: 11432.010300000004
Test mean error for best: 5.71601
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction tag_float_715} {:instruction integer_swap} {:instruction float_frominteger} {:instruction in2} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_min} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_max} {:instruction float_max} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_frominteger} {:instruction integer_dec} {:instruction in1} {:instruction integer_dec} {:instruction float_add} {:instruction float_add} {:instruction integer_max} {:instruction float_mod} {:instruction 81} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_sin} {:instruction integer_sub} {:instruction float_sub} {:instruction float_sub} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_min} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_inc} {:instruction tag_float_321} {:instruction float_yank} {:instruction tag_float_22} {:instruction float_shove} {:instruction print_integer} {:instruction float_swap} {:instruction 8} {:instruction integer_stackdepth})
Best program: (integer_pop tag_float_715 integer_swap float_frominteger in2 float_frominteger integer_dup_items integer_swap float_min integer_dup_items integer_min integer_max float_max integer_pop integer_dup_times float_frominteger integer_dec in1 integer_dec float_add float_add integer_max float_mod 81 float_yankdup float_swap integer_div in2 float_dup_times float_dup_items float_sin integer_sub float_sub float_sub integer_dup_times float_max float_swap float_mod in1 float_mod float_mod in1 float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_min float_add integer_sub float_sub integer_div float_sin float_max tag_float_518 float_mult in1 integer_fromfloat integer_add float_swap float_dup float_flush print_integer tag_float_78 float_shove float_dup_times tag_float_22 float_shove float_inc tag_float_321 float_yank tag_float_22 float_shove print_integer float_swap 8 integer_stackdepth)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2813.5397574000003
Median total errors in population: 282.5761
Error averages by case: (94.36515869999846 11.137 124.03703929999934 11.327 67.9770688999994 11.122 80.75277959999987 10.068 127.53244480000235 11.277 90.19337240000179 11.193 122.2382057999977 11.143 122.37492049999875 11.269 118.09155780000137 11.134 92.36244400000176 11.358 81.24937229999993 11.228 89.96614280000082 11.393 117.0612542999993 11.203 87.64206720000125 11.158 93.95704040000066 11.419 81.62775630000152 10.22 58.57481789999985 11.317 116.3314718999995 10.195 113.55835689999866 10.11 125.33133849999868 11.256 124.27298790000162 11.258 89.46697839999926 11.206 127.6475573000003 11.256 73.6720988000008 10.814 117.05752470000066 11.137)
Error minima by case: (0.5753 10 0.5759 5 0.3722 2 0.8381 4 0.3687 3 0.0988 5 0.2563 2 0.276 3 0.8509 2 0.498 6 0.3954 4 0.3556 5 0.2337 9 0.3576 3 0.6257 10 0.2035 4 0.2941 9 0.2077 9 0.1022 9 0.4059 5 0.1968 2 0.2809 5 0.7929 5 0.3104 3 0.4029 4)
Average genome size in population (length): 88.283
Average program size in population (points): 89.283
Average percent parens in population: 0.011
Minimum age in population: 37.05532455444336
Maximum age in population: 41.49209517240524
Average age in population: 39.51491634587944
Median age in population: 39.57557278126478
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.847
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.847
Total error diversity:				 0.156
Error (vector) diversity:			 0.165
Behavioral diversity:				 0.168
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 53382437
--- Timings ---
Current time: 1529614979567 milliseconds
Total Time:          96.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        37.6 seconds, 39.0%
Fitness Testing:     45.6 seconds, 47.3%
Report:              13.1 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Number IO problem report - generation 28
Test total error for best: 11476.9491
Test mean error for best: 5.73847
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_dup} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction -80} {:instruction integer_dup_times} {:instruction integer_mult} {:instruction integer_pop} {:instruction float_yank} {:instruction float_dup_items} {:instruction integer_inc} {:instruction tag_float_474} {:instruction float_flush} {:instruction float_dup} {:instruction float_flush} {:instruction float_dup} {:instruction float_swap} {:instruction integer_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_tan} {:instruction integer_dup_times} {:instruction float_pop} {:instruction integer_mult} {:instruction float_sub} {:instruction integer_div} {:instruction float_shove} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction integer_mod} {:instruction 81} {:instruction float_yankdup} {:instruction in2} {:instruction integer_div} {:instruction in2} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_sin} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_yank} {:instruction float_max} {:instruction float_swap} {:instruction integer_dup_items} {:instruction in1} {:instruction float_mod} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_321} {:instruction float_yank} {:instruction tag_float_22} {:instruction float_shove} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction integer_stackdepth})
Best program: (integer_sub float_dup float_swap integer_fromfloat -80 integer_dup_times integer_mult integer_pop float_yank float_dup_items integer_inc tag_float_474 float_flush float_dup float_flush float_dup float_swap integer_dec integer_dup float_dec integer_pop integer_dup_times float_pop float_tan integer_dup_times float_pop integer_mult float_sub integer_div float_shove float_max float_swap float_mod in1 integer_mod 81 float_yankdup in2 integer_div in2 integer_rot float_dup_items float_sin integer_sub float_sub integer_div float_yank float_max float_swap integer_dup_items in1 float_mod float_mod float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_sub integer_div float_sin float_max integer_fromfloat float_mult in1 integer_fromfloat integer_add float_swap float_dup float_flush print_integer tag_float_78 float_shove float_dup_times tag_float_22 float_shove float_dup_times tag_float_321 float_yank tag_float_22 float_shove print_integer float_swap float_sin integer_stackdepth)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 94
Size: 95
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2930.5537311
Median total errors in population: 281.69689999999997
Error averages by case: (88.13281529999838 11.117 136.46915979999892 11.317 62.49915519999951 11.112 81.65628229999975 10.044 139.9648903000023 11.27 89.87824960000135 11.186 134.9833736999977 11.11 135.3935438999991 11.28 128.18832950000171 11.13 92.93140400000124 11.333 82.02964819999985 11.184 90.73794240000025 11.375 125.97690569999915 11.2 88.6259280000014 11.175 90.54817450000009 11.357 81.6433615000015 10.19 59.44227669999966 11.173 128.28799989999956 10.153 121.00706499999846 10.105 136.183685299999 11.22 136.02714220000206 11.233 91.1981019999991 11.192 140.10776430000033 11.244 66.29279640000063 10.797 126.72873540000069 11.122)
Error minima by case: (0.4247 10 0.4241 6 0.3722 2 0.1619 4 0.3687 6 0.0988 9 0.2563 4 0.276 6 0.1491 4 0.498 10 0.3954 4 0.3556 10 0.2337 10 0.3576 10 0.3743 10 0.2035 4 0.2941 9 0.2077 8 0.1022 8 0.4059 6 0.1968 5 0.2809 9 0.2071 6 0.3104 3 0.0 4)
Average genome size in population (length): 88.707
Average program size in population (points): 89.707
Average percent parens in population: 0.011
Minimum age in population: 38.05532455444336
Maximum age in population: 42.79439229518175
Average age in population: 40.80096304107457
Median age in population: 40.83269765973091
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.88
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.88
Total error diversity:				 0.151
Error (vector) diversity:			 0.157
Behavioral diversity:				 0.159
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 55600240
--- Timings ---
Current time: 1529614983212 milliseconds
Total Time:         100.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        39.0 seconds, 38.9%
Fitness Testing:     47.4 seconds, 47.3%
Report:              13.6 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Number IO problem report - generation 29
Test total error for best: 11475.830700000002
Test mean error for best: 5.73792
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction tag_float_715} {:instruction integer_swap} {:instruction float_frominteger} {:instruction in2} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_min} {:instruction integer_dup} {:instruction integer_min} {:instruction 81} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction integer_dup_times} {:instruction float_sin} {:instruction integer_sub} {:instruction float_sub} {:instruction float_sub} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_321} {:instruction float_yank} {:instruction tag_float_22} {:instruction float_shove} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction integer_stackdepth})
Best program: (integer_pop tag_float_715 integer_swap float_frominteger in2 float_frominteger integer_dup_items integer_swap float_min integer_dup integer_min 81 float_yankdup float_swap integer_div in2 float_dup_times integer_dup_times float_sin integer_sub float_sub float_sub integer_dup_times float_max float_swap float_mod in1 float_mod float_mod in1 float_mod float_mod in1 float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_sub tag_float_518 float_mult in1 integer_fromfloat integer_add float_swap float_dup float_flush print_integer tag_float_78 float_shove float_dup_times tag_float_22 float_shove float_dup_times tag_float_321 float_yank tag_float_22 float_shove print_integer float_swap float_sin integer_stackdepth)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3342.3500276999994
Median total errors in population: 281.16429999999997
Error averages by case: (110.42915869999842 11.146 148.19836499999872 11.322 86.5526148999992 11.14 105.07682229999845 10.109 152.27817470000113 11.298 111.36068080000207 11.228 147.22191579999856 11.149 148.3157496000002 11.306 143.43346560000091 11.149 114.81196200000203 11.399 106.45235099999857 11.229 110.96976560000093 11.421 135.10448049999908 11.199 108.91877600000146 11.23 110.94616330000083 11.401 105.8429440000016 10.23 69.70310349999956 11.152 136.21879219999954 10.183 122.78934969999867 10.111 148.58621400000015 11.263 148.4853206000022 11.255 111.46504579999906 11.24 151.47748020000031 11.262 89.86145020000087 10.849 141.41988169999988 11.159)
Error minima by case: (0.4247 9 0.4241 5 0.3722 3 0.1619 4 0.3687 5 0.0988 5 0.2563 4 0.276 5 0.1491 4 0.498 6 0.3954 4 0.3556 5 0.2337 9 0.3576 3 0.3743 10 0.2035 4 0.2941 9 0.2077 8 0.1022 8 0.4059 5 0.1968 4 0.2809 5 0.2071 5 0.3104 4 0.4029 4)
Average genome size in population (length): 88.755
Average program size in population (points): 89.755
Average percent parens in population: 0.011
Minimum age in population: 39.05532455444336
Maximum age in population: 44.07297472283244
Average age in population: 42.22209006230533
Median age in population: 42.27090888097882
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.889
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.889
Total error diversity:				 0.141
Error (vector) diversity:			 0.141
Behavioral diversity:				 0.142
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 57819217
--- Timings ---
Current time: 1529614986835 milliseconds
Total Time:         103.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        40.3 seconds, 38.9%
Fitness Testing:     49.2 seconds, 47.4%
Report:              14.1 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Number IO problem report - generation 30
Test total error for best: 11476.5633
Test mean error for best: 5.73828
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_min} {:instruction float_flush} {:instruction integer_min} {:instruction integer_max} {:instruction float_max} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_frominteger} {:instruction integer_dec} {:instruction in1} {:instruction integer_dec} {:instruction float_add} {:instruction float_add} {:instruction integer_max} {:instruction float_mod} {:instruction 81} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 96.80697452437909} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_321} {:instruction print_integer} {:instruction tag_float_22} {:instruction float_shove} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction integer_stackdepth})
Best program: (integer_dup_items integer_swap float_min float_flush integer_min integer_max float_max integer_pop integer_dup_times float_frominteger integer_dec in1 integer_dec float_add float_add integer_max float_mod 81 float_yankdup float_swap integer_div in2 float_dup_times float_dup_items 96.80697452437909 integer_sub float_sub integer_div integer_dup_times float_max float_swap float_mod in1 float_mod float_mod in1 float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_sub integer_div float_sin float_max tag_float_518 float_mult in1 integer_fromfloat integer_add float_swap float_swap float_dup float_flush print_integer float_flush print_integer float_swap float_dup float_flush print_integer tag_float_78 float_shove float_dup_times tag_float_22 float_shove float_dup_times tag_float_321 print_integer tag_float_22 float_shove print_integer float_swap float_sin integer_stackdepth)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3122.323742999999
Median total errors in population: 281.16429999999997
Error averages by case: (100.02292679999847 11.151 136.45587649999908 11.388 79.91382259999932 11.15 95.13222259999925 10.083 139.67323320000196 11.327 97.60316280000107 11.227 136.34488449999807 11.172 137.14073599999927 11.343 132.0313781000015 11.167 100.44243600000098 11.408 95.65996839999943 11.252 99.14458680000003 11.435 135.343132799999 11.224 96.62127920000128 11.205 100.8258950999999 11.436 96.43081100000144 10.243 72.26061689999955 11.131 135.08423499999952 10.199 128.9711879999987 10.108 136.48137309999922 11.297 136.4892112000018 11.293 99.3278210999991 11.25 139.75686440000032 11.311 84.71052320000076 10.812 133.65055770000043 11.193)
Error minima by case: (0.4247 10 0.4241 5 0.3722 2 0.1619 4 0.3687 5 0.0988 5 0.2563 4 0.276 5 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 9 0.3576 4 0.3743 9 0.2035 4 0.2941 9 0.2077 9 0.1022 8 0.4059 5 0.1968 4 0.2809 5 0.2071 5 0.3104 3 0.4029 4)
Average genome size in population (length): 88.486
Average program size in population (points): 89.486
Average percent parens in population: 0.011
Minimum age in population: 40.05532455444336
Maximum age in population: 45.42761552892625
Average age in population: 43.62739802084863
Median age in population: 43.70267457515001
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.918
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.918
Total error diversity:				 0.148
Error (vector) diversity:			 0.152
Behavioral diversity:				 0.156
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 60031560
--- Timings ---
Current time: 1529614990413 milliseconds
Total Time:         107.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        41.7 seconds, 38.8%
Fitness Testing:     50.9 seconds, 47.5%
Report:              14.6 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Number IO problem report - generation 31
Test total error for best: 11476.5633
Test mean error for best: 5.73828
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction tag_float_715} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_min} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_max} {:instruction float_max} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_frominteger} {:instruction integer_dec} {:instruction in1} {:instruction integer_dec} {:instruction float_add} {:instruction float_dup_items} {:instruction integer_max} {:instruction float_mod} {:instruction 81} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 96.80697452437909} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_max} {:instruction integer_rot} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_max} {:instruction float_sin} {:instruction float_max} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_swap} {:instruction float_dup} {:instruction integer_dup_times} {:instruction print_integer} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_321} {:instruction print_integer} {:instruction tag_float_22} {:instruction float_shove} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_sin} {:instruction integer_stackdepth})
Best program: (integer_pop tag_float_715 integer_dup_items integer_swap float_min integer_dup_items integer_min integer_max float_max integer_pop integer_dup_times float_frominteger integer_dec in1 integer_dec float_add float_dup_items integer_max float_mod 81 float_yankdup float_swap integer_div in2 float_dup_times float_dup_items 96.80697452437909 integer_sub float_sub integer_div integer_dup_times float_max integer_rot float_mod in1 float_mod float_mod in1 float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_sub integer_max float_sin float_max tag_float_518 float_mult in1 integer_fromfloat integer_add float_swap float_swap float_dup integer_dup_times print_integer float_swap float_dup float_flush print_integer tag_float_78 float_shove float_dup_times tag_float_22 float_shove float_dup_times tag_float_321 print_integer tag_float_22 float_shove print_integer float_yankdup float_sin integer_stackdepth)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2754.963900199999
Median total errors in population: 281.16429999999997
Error averages by case: (88.76008939999844 11.14 118.8807772999992 11.346 67.92315469999924 11.132 82.81393739999884 10.105 122.25649180000242 11.31 84.18215080000178 11.203 119.43613119999762 11.153 118.23681069999894 11.326 113.86771330000138 11.159 87.40391000000167 11.357 83.207445899999 11.221 83.83423120000077 11.393 119.06876579999883 11.184 83.61000080000132 11.218 89.4498002000005 11.363 82.98962520000154 10.218 67.76887639999961 11.142 118.77999109999955 10.182 115.75407089999861 10.107 119.5830104999989 11.272 118.6303097000017 11.272 83.5302255999992 11.223 122.26532330000028 11.274 72.59069910000083 10.843 113.81435790000062 11.183)
Error minima by case: (0.4247 2 0.0 3 0.0 1 0.0 2 0.0 3 0.0988 3 0.0 2 0.0 3 0.0 2 0.498 4 0.0 2 0.3556 3 0.0 2 0.3576 3 0.3743 3 0.0 2 0.0 1 0.0 2 0.0 1 0.0 3 0.0 3 0.2809 3 0.0 3 0.0 1 0.0 2)
Average genome size in population (length): 87.892
Average program size in population (points): 88.892
Average percent parens in population: 0.011
Minimum age in population: 42.14114929735661
Maximum age in population: 47.22357951104641
Average age in population: 45.04268054678198
Median age in population: 45.06572842225432
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.924
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.924
Total error diversity:				 0.144
Error (vector) diversity:			 0.146
Behavioral diversity:				 0.15
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 62229027
--- Timings ---
Current time: 1529614994062 milliseconds
Total Time:         111.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        43.1 seconds, 38.8%
Fitness Testing:     52.7 seconds, 47.5%
Report:              15.1 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Number IO problem report - generation 32
Test total error for best: 11475.9327
Test mean error for best: 5.73797
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction tag_float_715} {:instruction integer_swap} {:instruction float_frominteger} {:instruction in2} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_min} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_max} {:instruction float_max} {:instruction float_swap} {:instruction integer_dec} {:instruction float_add} {:instruction float_add} {:instruction integer_max} {:instruction float_mod} {:instruction 81} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 96.80697452437909} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_mod} {:instruction -53.070917232121495} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction tagged_562} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_shove} {:instruction float_sin} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_swap} {:instruction print_integer} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_321} {:instruction float_shove} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction integer_stackdepth})
Best program: (integer_pop tag_float_715 integer_swap float_frominteger in2 float_frominteger integer_dup_items integer_swap float_min integer_dup_items integer_min integer_max float_max float_swap integer_dec float_add float_add integer_max float_mod 81 float_yankdup float_swap integer_div in2 float_dup_times float_dup_items 96.80697452437909 integer_sub float_sub integer_div integer_dup_times float_max float_swap float_mod in1 float_mod float_mod -53.070917232121495 float_mod in1 integer_flush float_max in2 float_mult tagged_562 float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_sub integer_shove float_sin float_sub integer_div float_sin float_max tag_float_518 float_mult in1 integer_fromfloat integer_add float_swap float_swap print_integer float_swap float_dup float_flush print_integer tag_float_78 float_shove float_dup_times tag_float_22 float_shove float_dup_times tag_float_321 float_shove print_integer float_swap float_sin integer_stackdepth)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2743.5625821000003
Median total errors in population: 281.16429999999997
Error averages by case: (92.9212550999987 11.146 115.63088779999927 11.341 70.76672899999954 11.121 85.2085177999994 10.093 118.029293200002 11.296 89.93708800000118 11.21 115.01146219999802 11.146 112.85467299999911 11.327 110.46014810000135 11.144 94.49547200000144 11.364 85.66552419999944 11.223 91.72534320000025 11.408 113.66322849999897 11.215 90.85163040000118 11.222 92.2551577000004 11.416 85.62170900000118 10.208 50.7864446999996 11.141 113.35350969999959 10.196 107.70648779999871 10.11 117.90490999999902 11.265 115.5745501000015 11.237 92.07173119999919 11.245 119.0359291000003 11.255 77.1621202000006 10.835 108.53878010000064 11.166)
Error minima by case: (0.5753 10 0.5759 3 0.3722 2 0.8381 4 0.3687 3 0.0988 5 0.2563 4 0.276 3 0.8509 2 0.498 6 0.3954 4 0.3556 4 0.2337 9 0.3576 4 0.6257 10 0.2035 4 0.2941 10 0.2077 8 0.1022 8 0.4059 3 0.1968 2 0.2809 5 0.7929 3 0.3104 3 0.4029 2)
Average genome size in population (length): 88.217
Average program size in population (points): 89.217
Average percent parens in population: 0.011
Minimum age in population: 43.89143467321992
Maximum age in population: 48.33912876993418
Average age in population: 46.43937767663691
Median age in population: 46.464905052213
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.924
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.924
Total error diversity:				 0.157
Error (vector) diversity:			 0.159
Behavioral diversity:				 0.161
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 64434669
--- Timings ---
Current time: 1529614997553 milliseconds
Total Time:         114.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        44.4 seconds, 38.8%
Fitness Testing:     54.4 seconds, 47.5%
Report:              15.5 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Number IO problem report - generation 33
Test total error for best: 11475.9327
Test mean error for best: 5.73797
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction tag_float_715} {:instruction integer_swap} {:instruction float_frominteger} {:instruction in2} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_swap} {:instruction float_min} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_max} {:instruction float_max} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_add} {:instruction float_add} {:instruction integer_max} {:instruction float_mod} {:instruction 81} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 96.80697452437909} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_mod} {:instruction -53.070917232121495} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_shove} {:instruction float_mod} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_flush} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_321} {:instruction print_integer} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_22} {:instruction float_shove} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction integer_stackdepth})
Best program: (integer_pop tag_float_715 integer_swap float_frominteger in2 float_frominteger integer_flush integer_swap float_min integer_dup_items integer_min integer_max float_max integer_pop integer_dec float_add float_add integer_max float_mod 81 float_yankdup float_swap integer_div in2 float_dup_times float_dup_items 96.80697452437909 integer_sub float_sub integer_div integer_dup_times float_max float_swap float_mod in1 float_mod float_mod -53.070917232121495 float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_sub integer_div float_sin float_max tag_float_518 float_mult in1 integer_fromfloat integer_add float_swap float_swap float_mod float_flush print_integer float_swap float_dup float_flush print_integer tag_float_78 float_shove float_mod float_rot integer_swap integer_fromfloat integer_add float_swap float_flush print_integer tag_float_78 float_shove float_dup_times tag_float_22 float_shove float_dup_times tag_float_321 print_integer float_shove float_dup_times tag_float_22 float_shove print_integer float_swap float_sin integer_stackdepth)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 96
Size: 97
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2721.136488399999
Median total errors in population: 281.16429999999997
Error averages by case: (88.91853349999825 11.132 117.3545051999991 11.329 65.67109819999942 11.125 80.51607709999911 10.057 120.38647980000238 11.255 87.51606400000169 11.169 116.76364849999764 11.136 117.11664569999894 11.27 113.76083860000112 11.128 90.4929420000017 11.354 80.95810909999928 11.224 88.36920960000064 11.388 112.24121619999877 11.175 84.6672128000015 11.167 89.0190763000004 11.393 81.3202085000015 10.225 64.35600699999956 11.122 111.01293089999953 10.173 109.42196509999893 10.08 118.24532519999886 11.257 117.25176740000185 11.253 87.72782109999913 11.19 120.53858280000031 11.243 72.22572700000073 10.794 109.50849680000067 11.137)
Error minima by case: (0.5753 10 0.0 2 0.3722 1 0.8381 2 0.0 2 0.0988 2 0.0 2 0.0 2 0.0 2 0.498 3 0.3954 2 0.3556 2 0.0 3 0.3576 1 0.6257 9 0.2035 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.2809 2 0.0 2 0.3104 2 0.0 2)
Average genome size in population (length): 87.654
Average program size in population (points): 88.654
Average percent parens in population: 0.011
Minimum age in population: 45.04698047041893
Maximum age in population: 49.92549119144678
Average age in population: 47.83386958571943
Median age in population: 47.83769921609201
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.918
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.918
Total error diversity:				 0.145
Error (vector) diversity:			 0.148
Behavioral diversity:				 0.15
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 66626221
--- Timings ---
Current time: 1529615001181 milliseconds
Total Time:         118.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        45.8 seconds, 38.8%
Fitness Testing:     56.2 seconds, 47.6%
Report:              16.0 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Number IO problem report - generation 34
Test total error for best: 26106.530300000057
Test mean error for best: 13.05327
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction in2} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction in2} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_min} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_max} {:instruction float_max} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_frominteger} {:instruction float_mod} {:instruction in1} {:instruction integer_dup_items} {:instruction float_add} {:instruction float_add} {:instruction integer_max} {:instruction float_mod} {:instruction float_dup_items} {:instruction 96.80697452437909} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 96.80697452437909} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction tagged_651} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_swap} {:instruction float_max} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_shove} {:instruction float_dup_times} {:instruction float_dup} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_321} {:instruction float_yank} {:instruction tag_float_22} {:instruction float_shove} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction integer_stackdepth})
Best program: (float_frominteger in2 float_frominteger integer_dup_items in2 float_frominteger integer_dup_items integer_swap float_min integer_dup_items integer_min integer_max float_max integer_pop integer_dup_times float_frominteger float_mod in1 integer_dup_items float_add float_add integer_max float_mod float_dup_items 96.80697452437909 integer_sub float_sub integer_div float_swap integer_div in2 float_dup_times float_yankdup float_swap integer_div in2 float_dup_times float_dup_items 96.80697452437909 integer_sub float_sub integer_div tagged_651 float_max float_swap float_mod in1 float_mod float_mod in1 float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_sub integer_div float_sin float_sub float_add integer_sub float_sub integer_div float_swap float_max integer_fromfloat float_yank in1 integer_fromfloat integer_add float_swap float_dup float_flush print_integer tag_float_78 float_shove float_dup_times float_dup float_shove float_dup_times tag_float_321 float_yank tag_float_22 float_shove print_integer float_swap float_sin integer_stackdepth)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 97
Size: 98
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2384.9702598999997
Median total errors in population: 281.16429999999997
Error averages by case: (79.1112128999984 11.118 100.93458389999967 11.3 51.14776479999958 11.077 69.0458390000001 10.031 104.31348100000173 11.233 78.90704000000129 11.142 100.81786229999827 11.11 100.73215959999902 11.229 96.08462920000105 11.109 81.65039600000118 11.285 69.87513550000018 11.17 79.73538640000024 11.33 97.36683509999881 11.169 76.9275768000014 11.15 81.80266610000017 11.352 71.02732110000143 10.181 52.28144959999958 11.143 95.74281519999954 10.165 88.97639349999899 10.111 101.08408579999897 11.238 100.00323420000126 11.227 79.15987729999914 11.161 103.46800750000031 11.222 54.73300700000051 10.797 94.87050010000061 11.121)
Error minima by case: (0.4247 10 0.4241 5 0.3722 2 0.1619 4 0.3687 5 0.0988 5 0.2563 4 0.276 5 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 9 0.3576 4 0.3743 9 0.2035 4 0.2941 9 0.2077 9 0.1022 8 0.4059 5 0.1968 5 0.2809 5 0.2071 5 0.3104 3 0.4029 4)
Average genome size in population (length): 87.802
Average program size in population (points): 88.802
Average percent parens in population: 0.011
Minimum age in population: 46.04698047041893
Maximum age in population: 51.28450174280442
Average age in population: 49.17880568821402
Median age in population: 49.24277741479455
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.929
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.929
Total error diversity:				 0.138
Error (vector) diversity:			 0.14
Behavioral diversity:				 0.141
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 68821450
--- Timings ---
Current time: 1529615004694 milliseconds
Total Time:         121.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        47.1 seconds, 38.7%
Fitness Testing:     57.9 seconds, 47.6%
Report:              16.5 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Number IO problem report - generation 35
Test total error for best: 11476.9491
Test mean error for best: 5.73847
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_dup} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction -80} {:instruction integer_dup_times} {:instruction integer_mult} {:instruction float_mod} {:instruction float_yank} {:instruction float_dup_items} {:instruction float_sub} {:instruction tag_float_474} {:instruction float_flush} {:instruction integer_dup_items} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_tan} {:instruction integer_dup_times} {:instruction float_pop} {:instruction integer_mult} {:instruction float_sub} {:instruction integer_div} {:instruction float_shove} {:instruction integer_rot} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction integer_mod} {:instruction 81} {:instruction float_yankdup} {:instruction in2} {:instruction integer_div} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_sin} {:instruction integer_shove} {:instruction float_sub} {:instruction integer_div} {:instruction float_yank} {:instruction float_max} {:instruction float_swap} {:instruction float_dup_items} {:instruction in1} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction float_mod} {:instruction float_yank} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_shove} {:instruction float_dup_times} {:instruction float_dup} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_321} {:instruction float_yank} {:instruction tag_float_22} {:instruction float_shove} {:instruction print_integer} {:instruction float_swap})
Best program: (integer_sub float_dup float_swap integer_fromfloat -80 integer_dup_times integer_mult float_mod float_yank float_dup_items float_sub tag_float_474 float_flush integer_dup_items float_swap integer_fromfloat integer_dup integer_pop integer_pop integer_dup_times float_pop float_tan integer_dup_times float_pop integer_mult float_sub integer_div float_shove integer_rot float_swap float_mod in1 integer_mod 81 float_yankdup in2 integer_div integer_yankdup integer_rot float_dup_items float_sin integer_shove float_sub integer_div float_yank float_max float_swap float_dup_items in1 float_mod float_mod in1 float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_sub integer_div float_sin float_max float_mod float_yank in1 integer_fromfloat integer_add float_swap float_dup float_flush print_integer tag_float_78 float_shove float_dup_times float_dup float_shove float_dup_times tag_float_321 float_yank tag_float_22 float_shove print_integer float_swap)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 91
Size: 92
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2639.3871737
Median total errors in population: 281.16429999999997
Error averages by case: (88.33430929999845 11.138 108.48745709999983 11.362 70.22052219999925 11.138 86.4050131999992 10.079 111.69913770000184 11.284 89.15263280000124 11.191 106.22941799999835 11.198 108.16829199999887 11.29 103.19381770000071 11.171 91.16688200000112 11.364 86.80724879999941 11.242 89.8635416000002 11.385 101.36618189999878 11.199 86.05351040000139 11.181 90.6544091 11.384 86.79810200000155 10.239 64.35669539999955 11.142 100.07333529999953 10.187 96.6602759999992 10.11 109.45066809999884 11.289 108.36465760000111 11.298 89.25024809999918 11.208 111.8156159000003 11.288 72.61211040000083 10.832 105.84009110000063 11.164)
Error minima by case: (0.4247 10 0.4241 6 0.3722 2 0.1619 4 0.3687 6 0.0988 5 0.2563 4 0.276 6 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 9 0.3576 4 0.3743 10 0.2035 4 0.2941 9 0.2077 9 0.1022 8 0.4059 6 0.1968 5 0.2809 5 0.2071 6 0.3104 3 0.4029 4)
Average genome size in population (length): 87.815
Average program size in population (points): 88.815
Average percent parens in population: 0.011
Minimum age in population: 47.53804922290146
Maximum age in population: 52.61689549521543
Average age in population: 50.60325747908425
Median age in population: 50.64266050324659
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.921
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.921
Total error diversity:				 0.121
Error (vector) diversity:			 0.124
Behavioral diversity:				 0.126
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 71016966
--- Timings ---
Current time: 1529615008253 milliseconds
Total Time:         125.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        48.4 seconds, 38.7%
Fitness Testing:     59.6 seconds, 47.6%
Report:              17.0 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Number IO problem report - generation 36
Test total error for best: 11473.813500000006
Test mean error for best: 5.73691
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_219} {:instruction integer_swap} {:instruction float_min} {:instruction integer_dup_items} {:instruction integer_min} {:instruction float_max} {:instruction float_max} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_frominteger} {:instruction integer_dec} {:instruction in1} {:instruction integer_dec} {:instruction float_add} {:instruction float_add} {:instruction integer_max} {:instruction float_mod} {:instruction 81} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_pop} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sin} {:instruction float_max} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction -18.69034963954863} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction tag_float_321} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_321} {:instruction print_integer} {:instruction tag_float_22} {:instruction integer_pop} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction float_tan})
Best program: (tag_float_219 integer_swap float_min integer_dup_items integer_min float_max float_max integer_pop integer_dup_times float_frominteger integer_dec in1 integer_dec float_add float_add integer_max float_mod 81 float_yankdup float_swap integer_div in2 float_dup_times float_dup_items integer_dup_times integer_sub float_sub integer_div float_stackdepth float_max float_swap float_mod in1 float_mod float_pop float_mod float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_sub integer_mod float_sin float_max tag_float_518 float_mult in1 integer_fromfloat integer_add float_swap float_swap float_dup float_flush print_integer -18.69034963954863 float_dup float_flush print_integer tag_float_78 float_shove float_shove float_inc tag_float_321 float_shove float_dup_times tag_float_22 float_shove float_dup_times tag_float_321 print_integer tag_float_22 integer_pop print_integer float_swap float_sin float_tan)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2802.906651799999
Median total errors in population: 281.16429999999997
Error averages by case: (94.44402319999833 11.171 116.3236465999994 11.4 72.67093039999914 11.161 89.67199939999915 10.113 120.7968400000021 11.33 92.35377960000129 11.235 115.464862899998 11.214 117.13278799999894 11.325 111.4543478000013 11.191 95.24546000000127 11.409 90.25249159999937 11.276 93.64212120000019 11.445 115.3150687999988 11.212 90.39149120000155 11.245 95.31876100000002 11.441 90.77794800000166 10.279 65.92126129999957 11.138 112.9854332999995 10.208 106.30734019999889 10.114 117.78936799999889 11.331 116.85929100000153 11.327 93.88888849999903 11.259 121.0581076000003 11.324 78.19428040000095 10.859 111.4341218000007 11.205)
Error minima by case: (0.4247 10 0.4241 3 0.3722 10 0.1619 8 0.3687 3 0.0988 9 0.2563 2 0.276 3 0.1491 2 0.498 9 0.3954 9 0.3556 10 0.2337 9 0.3576 9 0.3743 10 0.2035 8 0.2941 9 0.2077 9 0.1022 8 0.4059 3 0.1968 2 0.2809 9 0.2071 3 0.3104 8 0.4029 2)
Average genome size in population (length): 87.996
Average program size in population (points): 88.996
Average percent parens in population: 0.011
Minimum age in population: 48.53804922290146
Maximum age in population: 54.25106884809793
Average age in population: 52.03161397311321
Median age in population: 52.08632059540832
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.926
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.926
Total error diversity:				 0.129
Error (vector) diversity:			 0.132
Behavioral diversity:				 0.134
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 73217058
--- Timings ---
Current time: 1529615011842 milliseconds
Total Time:         128.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.8 seconds, 38.6%
Fitness Testing:     61.4 seconds, 47.7%
Report:              17.5 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Number IO problem report - generation 37
Test total error for best: 11475.9327
Test mean error for best: 5.73797
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_dup} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction -80} {:instruction integer_dup_times} {:instruction integer_mult} {:instruction float_mod} {:instruction integer_inc} {:instruction tag_float_474} {:instruction float_sin} {:instruction float_dup} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction integer_inc} {:instruction tag_float_474} {:instruction float_flush} {:instruction float_dup} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_pop} {:instruction in2} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup_times} {:instruction float_pop} {:instruction integer_yank} {:instruction float_pop} {:instruction float_max} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_tan} {:instruction integer_dup_times} {:instruction float_pop} {:instruction integer_mult} {:instruction float_sub} {:instruction integer_div} {:instruction float_shove} {:instruction float_max} {:instruction float_sub} {:instruction integer_div} {:instruction integer_shove} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction 81} {:instruction in1} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_sin} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_add} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction -54.66743452354172} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_pop} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction float_dup_times} {:instruction tag_float_22} {:instruction float_shove} {:instruction integer_inc} {:instruction tag_float_321} {:instruction float_yank} {:instruction tag_float_22} {:instruction float_shove} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction integer_stackdepth})
Best program: (integer_sub float_dup float_swap integer_fromfloat -80 integer_dup_times integer_mult float_mod integer_inc tag_float_474 float_sin float_dup float_swap integer_fromfloat integer_inc tag_float_474 float_flush float_dup float_swap integer_fromfloat integer_dup integer_pop float_pop in2 float_swap integer_fromfloat integer_dup integer_pop integer_pop integer_dup_times float_min float_tan integer_dup_times float_pop integer_yank float_pop float_max integer_pop integer_dup_times float_pop float_tan integer_dup_times float_pop integer_mult float_sub integer_div float_shove float_max float_sub integer_div integer_shove float_max float_swap float_mod in1 float_mod 81 in1 float_swap integer_div in2 integer_rot float_dup_items float_sin integer_sub float_sub integer_div float_add float_max float_swap float_mod in1 float_mod float_mod in1 float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_sub integer_div float_sin float_max -54.66743452354172 float_mult in1 integer_fromfloat integer_add float_swap float_pop float_flush print_integer float_swap float_dup_times tag_float_22 float_shove integer_inc tag_float_321 float_yank tag_float_22 float_shove print_integer float_swap float_sin integer_stackdepth)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 115
Size: 116
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2547.0896681
Median total errors in population: 281.16429999999997
Error averages by case: (83.15683169999828 11.139 106.69471169999949 11.353 65.26473019999926 11.132 77.27647289999953 10.096 109.42752250000198 11.289 83.06979160000128 11.191 103.13593079999826 11.202 106.66615349999896 11.325 101.3737292000011 11.166 85.3939740000015 11.337 77.53069219999975 11.239 84.15567720000018 11.395 103.38204559999875 11.184 82.94234560000147 11.206 84.3473129999998 11.353 77.56011170000156 10.223 59.25321329999954 11.139 102.8422910999995 10.18 98.79779099999904 10.102 108.38994879999889 11.314 107.35658000000149 11.293 84.43820309999907 11.21 109.62530850000032 11.294 68.30208030000081 10.869 100.2922186000007 11.183)
Error minima by case: (0.5753 2 0.0 3 0.0 1 0.0 2 0.0 3 0.0988 3 0.0 2 0.0 3 0.0 2 0.498 4 0.0 2 0.3556 3 0.0 2 0.3576 3 0.6257 3 0.0 2 0.0 1 0.0 2 0.0 1 0.0 3 0.0 3 0.2809 3 0.0 3 0.0 1 0.0 2)
Average genome size in population (length): 87.471
Average program size in population (points): 88.471
Average percent parens in population: 0.011
Minimum age in population: 49.53804922290146
Maximum age in population: 55.54298798010859
Average age in population: 53.42939745490375
Median age in population: 53.47478545785998
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.924
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.924
Total error diversity:				 0.133
Error (vector) diversity:			 0.136
Behavioral diversity:				 0.138
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 75404038
--- Timings ---
Current time: 1529615015406 milliseconds
Total Time:         132.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.1 seconds, 38.6%
Fitness Testing:     63.1 seconds, 47.7%
Report:              18.0 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Number IO problem report - generation 38
Test total error for best: 11475.9327
Test mean error for best: 5.73797
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_min} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_max} {:instruction float_max} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_frominteger} {:instruction integer_dec} {:instruction in1} {:instruction integer_dec} {:instruction float_add} {:instruction float_mod} {:instruction 81} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 97.07646621927347} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction float_mod} {:instruction float_yank} {:instruction float_dup_items} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction -18.69034963954863} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_dec} {:instruction float_dup_times} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_rot} {:instruction tag_float_437} {:instruction print_integer} {:instruction tag_float_22} {:instruction float_shove} {:instruction print_integer} {:instruction float_swap} {:instruction float_yank} {:instruction tag_float_22} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_321} {:instruction float_yank} {:instruction tag_float_22} {:instruction float_shove} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction integer_stackdepth})
Best program: (integer_dup_items integer_swap float_min integer_dup_items integer_min integer_max float_max integer_pop integer_dup_times float_frominteger integer_dec in1 integer_dec float_add float_mod 81 float_yankdup float_swap integer_div in2 float_dup_times float_dup_items 97.07646621927347 integer_sub float_sub integer_div integer_dup_times float_max float_swap float_mod integer_stackdepth float_mod float_mod float_yank float_dup_items in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub integer_shove integer_div float_sin float_max tag_float_518 float_mult in1 integer_fromfloat integer_add float_swap float_swap float_dup float_flush print_integer -18.69034963954863 float_dup float_flush print_integer tag_float_78 float_dec float_dup_times tag_float_22 float_shove float_rot tag_float_437 print_integer tag_float_22 float_shove print_integer float_swap float_yank tag_float_22 tag_float_22 float_shove float_dup_times tag_float_321 float_yank tag_float_22 float_shove print_integer float_swap float_sin integer_stackdepth)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 91
Size: 92
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2610.2152803
Median total errors in population: 281.16429999999997
Error averages by case: (90.0915562999982 11.159 103.2664469999993 11.327 68.84051089999916 11.096 80.80067999999973 10.068 107.87675410000232 11.238 89.65106400000121 11.18 103.37552489999781 11.17 104.33738599999896 11.284 99.27521000000115 11.133 92.01893400000144 11.347 82.21984039999998 11.226 91.35620960000033 11.376 106.8084731999988 11.19 85.80414000000164 11.184 90.95890629999995 11.401 82.86905300000178 10.206 67.81895089999955 11.126 104.5700696999995 10.196 102.23058519999881 10.095 104.85403279999888 11.275 104.8338599000017 11.255 91.44985479999897 11.204 108.0428085000003 11.266 73.45460640000097 10.821 97.44182240000069 11.145)
Error minima by case: (0.4247 10 0.0 2 0.3722 2 0.1619 4 0.0 2 0.0988 5 0.0 2 0.0 2 0.0 2 0.498 6 0.3954 4 0.3556 4 0.2337 3 0.3576 4 0.3743 10 0.2035 4 0.2941 2 0.2077 3 0.1022 3 0.0 2 0.0 2 0.2809 5 0.0 2 0.3104 3 0.0 2)
Average genome size in population (length): 87.747
Average program size in population (points): 88.747
Average percent parens in population: 0.011
Minimum age in population: 50.53804922290146
Maximum age in population: 56.97199866727897
Average age in population: 54.8769384919242
Median age in population: 54.91950222378728
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.906
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.906
Total error diversity:				 0.153
Error (vector) diversity:			 0.156
Behavioral diversity:				 0.158
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 77597955
--- Timings ---
Current time: 1529615019092 milliseconds
Total Time:         135.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.4 seconds, 38.6%
Fitness Testing:     64.9 seconds, 47.7%
Report:              18.5 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Number IO problem report - generation 39
Test total error for best: 11476.5633
Test mean error for best: 5.73828
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_min} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_max} {:instruction float_max} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_frominteger} {:instruction in1} {:instruction in1} {:instruction integer_dec} {:instruction float_add} {:instruction float_add} {:instruction integer_max} {:instruction float_add} {:instruction integer_max} {:instruction float_mod} {:instruction 81} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 97.20027408926207} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction tag_float_518} {:instruction float_max} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_swap} {:instruction float_dup} {:instruction integer_min} {:instruction print_integer} {:instruction float_swap} {:instruction float_flush} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_253} {:instruction float_shove} {:instruction float_inc} {:instruction tag_float_321} {:instruction float_yank} {:instruction tag_float_22} {:instruction float_shove} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction integer_stackdepth})
Best program: (integer_dup_items integer_swap float_min integer_dup_items integer_min integer_max float_max integer_pop integer_dup_times float_frominteger in1 in1 integer_dec float_add float_add integer_max float_add integer_max float_mod 81 float_yankdup float_swap integer_div in2 float_dup_times float_dup_items 97.20027408926207 integer_sub float_sub integer_div integer_dup_times float_max float_swap float_mod in1 float_mod float_mod in1 float_mod in1 float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_sub float_add integer_sub float_sub integer_div float_sin float_max tag_float_518 float_max tag_float_518 float_mult in1 integer_fromfloat integer_add float_swap float_swap float_dup integer_min print_integer float_swap float_flush print_integer tag_float_78 float_shove float_dup_times tag_float_253 float_shove float_inc tag_float_321 float_yank tag_float_22 float_shove print_integer float_swap float_sin integer_stackdepth)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2840.2053844999996
Median total errors in population: 281.16429999999997
Error averages by case: (94.11415869999844 11.133 119.70535939999938 11.372 72.71417239999971 11.11 89.06763219999918 10.08 124.43906960000226 11.319 95.27575560000135 11.204 119.19560549999795 11.184 119.92136469999892 11.32 116.4004219000012 11.18 98.1674240000013 11.382 88.74029479999929 11.234 94.08558680000027 11.415 112.88180199999887 11.217 94.15792800000142 11.2 95.5384091000002 11.386 90.12027050000137 10.215 67.6964813999996 11.142 112.10394309999954 10.202 108.36872109999901 10.099 121.94213439999886 11.32 121.41696050000154 11.311 94.18075369999912 11.234 123.80322180000032 11.288 75.97962720000054 10.818 113.62828610000062 11.195)
Error minima by case: (0.4247 10 0.4241 5 0.3722 2 0.1619 4 0.3687 5 0.0988 5 0.2563 4 0.276 5 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 10 0.3576 4 0.3743 10 0.2035 4 0.2941 9 0.2077 8 0.1022 7 0.4059 5 0.1968 4 0.2809 5 0.2071 5 0.3104 3 0.4029 4)
Average genome size in population (length): 87.237
Average program size in population (points): 88.237
Average percent parens in population: 0.011
Minimum age in population: 53.98558493291785
Maximum age in population: 58.29205399771672
Average age in population: 56.3265446312592
Median age in population: 56.33828348170027
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.911
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.911
Total error diversity:				 0.145
Error (vector) diversity:			 0.148
Behavioral diversity:				 0.149
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 79779111
--- Timings ---
Current time: 1529615022635 milliseconds
Total Time:         139.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.8 seconds, 38.5%
Fitness Testing:     66.6 seconds, 47.7%
Report:              19.1 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Number IO problem report - generation 40
Test total error for best: 11476.9491
Test mean error for best: 5.73847
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction float_mod} {:instruction -80} {:instruction integer_dup_times} {:instruction integer_min} {:instruction float_mod} {:instruction float_yank} {:instruction integer_dup_items} {:instruction integer_mult} {:instruction float_mod} {:instruction float_yank} {:instruction float_dup_items} {:instruction integer_inc} {:instruction tag_float_474} {:instruction integer_mult} {:instruction float_sub} {:instruction float_dup} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_tan} {:instruction integer_dup_times} {:instruction float_pop} {:instruction integer_mult} {:instruction float_sub} {:instruction integer_div} {:instruction float_shove} {:instruction float_max} {:instruction float_div} {:instruction float_mod} {:instruction in1} {:instruction integer_mod} {:instruction 81} {:instruction float_yankdup} {:instruction in2} {:instruction integer_div} {:instruction in2} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_sin} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_yank} {:instruction float_max} {:instruction float_swap} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_dup_times} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_shove} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_sin} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_22} {:instruction float_swap} {:instruction float_sin} {:instruction integer_stackdepth})
Best program: (integer_dup_items float_mod -80 integer_dup_times integer_min float_mod float_yank integer_dup_items integer_mult float_mod float_yank float_dup_items integer_inc tag_float_474 integer_mult float_sub float_dup float_swap integer_fromfloat print_integer integer_pop integer_pop integer_dup_times float_pop float_tan integer_dup_times float_pop integer_mult float_sub integer_div float_shove float_max float_div float_mod in1 integer_mod 81 float_yankdup in2 integer_div in2 integer_rot float_dup_items float_sin integer_sub float_sub integer_div float_yank float_max float_swap integer_dup_items in1 integer_dup_times float_mod in1 float_mod in1 float_shove float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_sin integer_sub float_sub integer_div float_sin float_max integer_fromfloat float_mult in1 integer_fromfloat integer_add integer_yankdup float_dup float_flush print_integer tag_float_78 float_shove float_dup_times tag_float_22 float_swap float_sin integer_stackdepth)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 89
Size: 90
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2685.4458861000003
Median total errors in population: 281.16429999999997
Error averages by case: (90.32093879999853 11.122 111.95699209999938 11.351 66.78377309999942 11.126 84.9154202999995 10.088 115.2065376000022 11.293 90.60534840000092 11.213 110.08232159999795 11.176 111.55676519999899 11.326 105.75415950000122 11.162 93.25191400000095 11.381 85.30235919999963 11.227 90.64609759999995 11.405 107.3517025999989 11.209 88.49257680000123 11.2 91.86304599999977 11.371 84.90697900000156 10.2 59.076395299999575 11.132 108.0672654999995 10.195 106.63540419999897 10.077 111.96326179999892 11.298 111.37422350000153 11.271 91.19512449999918 11.227 115.2938103000003 11.273 71.25805650000068 10.814 105.28141270000069 11.167)
Error minima by case: (0.4247 9 0.4241 5 0.3722 2 0.1619 4 0.3687 5 0.0988 5 0.2563 4 0.276 5 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 8 0.3576 4 0.3743 11 0.2035 4 0.2941 9 0.2077 9 0.1022 8 0.4059 5 0.1968 4 0.2809 5 0.2071 5 0.3104 3 0.4029 4)
Average genome size in population (length): 87.52
Average program size in population (points): 88.52
Average percent parens in population: 0.011
Minimum age in population: 55.40669205397717
Maximum age in population: 60.0257419169593
Average age in population: 57.77722923058026
Median age in population: 57.86587253480866
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.928
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.928
Total error diversity:				 0.158
Error (vector) diversity:			 0.164
Behavioral diversity:				 0.165
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 81967431
--- Timings ---
Current time: 1529615026188 milliseconds
Total Time:         143.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.1 seconds, 38.5%
Fitness Testing:     68.3 seconds, 47.8%
Report:              19.5 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Number IO problem report - generation 41
Test total error for best: 11476.5633
Test mean error for best: 5.73828
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_frominteger} {:instruction integer_dec} {:instruction in1} {:instruction integer_dec} {:instruction float_add} {:instruction float_add} {:instruction integer_max} {:instruction float_mod} {:instruction 81} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_cos} {:instruction 96.80697452437909} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction integer_div} {:instruction in1} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_swap} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction integer_yank} {:instruction float_shove} {:instruction integer_add} {:instruction float_swap} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_321} {:instruction print_integer} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_sin} {:instruction integer_stackdepth})
Best program: (integer_pop integer_dup_times float_frominteger integer_dec in1 integer_dec float_add float_add integer_max float_mod 81 float_yankdup float_swap integer_div in2 float_dup_times float_cos 96.80697452437909 integer_sub float_sub integer_div integer_dup_times float_max float_swap integer_div in1 float_mod float_mod in1 float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_sub integer_div float_sin float_max tag_float_518 float_mult in1 integer_fromfloat integer_add float_swap float_swap integer_add float_swap float_dup float_flush print_integer integer_yank float_shove integer_add float_swap float_swap float_dup float_flush print_integer float_swap float_dup float_flush print_integer tag_float_78 float_shove float_dup_times tag_float_22 float_shove float_dup_times tag_float_321 print_integer tag_float_22 float_shove float_stackdepth float_sin integer_stackdepth)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2614.1936944000004
Median total errors in population: 281.16429999999997
Error averages by case: (92.10062189999869 11.12 102.42109559999996 11.321 72.14053789999954 11.122 87.86020799999918 10.085 106.2930085000015 11.265 91.33396780000129 11.192 102.3078080999987 11.183 102.83009849999915 11.294 98.21678050000065 11.154 94.6049641000013 11.332 88.25938839999931 11.2 91.31909790000047 11.358 101.59713749999902 11.172 90.42369220000111 11.208 93.61778400000016 11.361 88.5046315000013 10.198 66.95526649999958 11.161 99.0432613999996 10.173 91.42988189999944 10.14 103.73043959999906 11.284 101.48398120000098 11.27 91.73420599999935 11.203 105.61251050000031 11.265 75.00684950000056 10.851 99.2824754000006 11.172)
Error minima by case: (0.4247 9 0.4241 6 0.3722 2 0.1619 4 0.3687 6 0.0988 5 0.2563 4 0.276 6 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 9 0.3576 4 0.3743 10 0.2035 4 0.2941 10 0.2077 9 0.1022 8 0.4059 6 0.1968 5 0.2809 5 0.2071 6 0.3104 3 0.4029 4)
Average genome size in population (length): 87.836
Average program size in population (points): 88.836
Average percent parens in population: 0.011
Minimum age in population: 56.69286961682155
Maximum age in population: 61.51583680245585
Average age in population: 59.19103379371436
Median age in population: 59.17225056983852
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.922
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.922
Total error diversity:				 0.133
Error (vector) diversity:			 0.134
Behavioral diversity:				 0.137
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 84163778
--- Timings ---
Current time: 1529615029814 milliseconds
Total Time:         146.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.4 seconds, 38.5%
Fitness Testing:     70.2 seconds, 47.8%
Report:              20.0 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Number IO problem report - generation 42
Test total error for best: 11475.9327
Test mean error for best: 5.73797
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction tag_float_715} {:instruction integer_dec} {:instruction float_min} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_max} {:instruction float_max} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_add} {:instruction integer_dec} {:instruction in1} {:instruction -38} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 97.01551207413878} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_dup_times} {:instruction float_max} {:instruction float_stackdepth} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction float_flush} {:instruction print_integer} {:instruction tag_float_78} {:instruction integer_dec} {:instruction float_dup_times} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_321} {:instruction float_yank} {:instruction tag_float_9930} {:instruction float_shove} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction integer_stackdepth})
Best program: (float_dup_times tag_float_715 integer_dec float_min integer_dup_items integer_min integer_max float_max integer_pop integer_dup_times float_add integer_dec in1 -38 float_swap integer_div in2 float_dup_times float_dup_items 97.01551207413878 integer_sub float_sub integer_div float_dup_times float_max float_stackdepth float_mod in1 float_mod float_mod in1 float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_sub integer_div float_sin float_max tag_float_518 float_mult in1 integer_fromfloat integer_add float_swap float_swap float_dup float_flush float_flush print_integer tag_float_78 integer_dec float_dup_times tag_float_22 float_shove float_dup_times tag_float_321 float_yank tag_float_9930 float_shove print_integer float_swap float_sin integer_stackdepth)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2512.5524186
Median total errors in population: 281.16429999999997
Error averages by case: (84.9341586999985 11.162 105.52698499999973 11.398 64.27444359999963 11.163 76.94263649999971 10.124 107.82464330000188 11.349 82.80985440000089 11.233 102.02090309999836 11.228 104.48093349999894 11.388 99.37687920000094 11.212 85.61091400000088 11.402 77.33024819999984 11.257 82.50958679999992 11.432 101.44167889999892 11.226 81.76235840000135 11.234 84.48441469999982 11.409 77.68196850000156 10.243 55.02731589999958 11.143 99.15819589999951 10.214 95.31024339999956 10.116 104.61770239999888 11.36 103.74385860000119 11.344 82.82863009999913 11.242 107.98932370000033 11.339 69.76843510000064 10.856 97.80510670000072 11.217)
Error minima by case: (0.5753 9 0.5759 6 0.3722 10 0.8381 8 0.3687 9 0.0988 9 0.2563 8 0.276 9 0.8509 9 0.498 10 0.3954 9 0.3556 10 0.2337 10 0.3576 10 0.6257 9 0.2035 8 0.2941 10 0.2077 8 0.1022 8 0.4059 6 0.1968 9 0.2809 9 0.7929 6 0.3104 8 0.4029 4)
Average genome size in population (length): 86.933
Average program size in population (points): 87.933
Average percent parens in population: 0.011
Minimum age in population: 58.08386162657189
Maximum age in population: 62.52440209556516
Average age in population: 60.58996688841199
Median age in population: 60.65682891079859
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.934
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.934
Total error diversity:				 0.147
Error (vector) diversity:			 0.15
Behavioral diversity:				 0.152
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 86337586
--- Timings ---
Current time: 1529615033328 milliseconds
Total Time:         150.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.8 seconds, 38.4%
Fitness Testing:     71.9 seconds, 47.8%
Report:              20.5 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Number IO problem report - generation 43
Test total error for best: 11475.9327
Test mean error for best: 5.73797
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_min} {:instruction integer_max} {:instruction float_max} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_frominteger} {:instruction integer_dec} {:instruction in1} {:instruction integer_dec} {:instruction float_dup_items} {:instruction integer_inc} {:instruction float_add} {:instruction integer_max} {:instruction float_mod} {:instruction integer_shove} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 97.20027408926207} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_321} {:instruction print_integer} {:instruction tag_float_22} {:instruction float_shove} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_22} {:instruction float_yank} {:instruction float_dup_times} {:instruction tag_float_321} {:instruction float_yank} {:instruction tag_float_22} {:instruction float_mult} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction integer_stackdepth})
Best program: (integer_dup_items integer_swap float_min integer_max float_max integer_pop integer_dup_times float_frominteger integer_dec in1 integer_dec float_dup_items integer_inc float_add integer_max float_mod integer_shove integer_flush float_swap integer_div in2 float_dup_times float_dup_items 97.20027408926207 integer_sub float_sub integer_div integer_dup_times float_max float_swap float_mod in1 float_mod float_mod in1 float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_sub integer_div float_sin float_max tag_float_518 float_mult in1 integer_fromfloat integer_add float_swap float_swap float_dup float_flush print_integer float_swap float_dup float_flush print_integer tag_float_78 float_shove float_dup_times tag_float_22 float_shove float_dup_times tag_float_321 print_integer tag_float_22 float_shove integer_fromfloat integer_add float_swap float_dup float_flush print_integer tag_float_78 float_shove float_dup_times tag_float_22 float_yank float_dup_times tag_float_321 float_yank tag_float_22 float_mult print_integer float_swap float_sin integer_stackdepth)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 97
Size: 98
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2670.8499844999997
Median total errors in population: 281.16429999999997
Error averages by case: (92.42635149999832 11.171 106.75894659999967 11.405 74.0261447999993 11.159 87.89117259999928 10.112 111.00546990000204 11.339 90.11277960000129 11.239 107.65639449999814 11.243 107.60487099999892 11.361 102.68277740000094 11.189 92.90196600000118 11.414 88.3457091999995 11.278 91.41369880000023 11.447 104.18606269999889 11.232 87.65720640000148 11.239 93.7802693999998 11.44 89.47940050000159 10.275 70.21615359999961 11.164 101.76632149999955 10.216 97.89927219999912 10.136 107.82753839999889 11.35 107.63642730000133 11.32 91.7151356999991 11.253 110.25577500000028 11.331 78.22218280000088 10.854 99.98895710000059 11.226)
Error minima by case: (0.4247 10 0.0 0 0.3722 2 0.1619 4 0.0 0 0.0988 5 0.2563 4 0.0 0 0.0 0 0.498 7 0.3954 4 0.3556 5 0.0 0 0.3576 4 0.3743 9 0.2035 4 0.2941 9 0.0 0 0.0 0 0.0 0 0.0 0 0.2809 5 0.0 0 0.3104 3 0.4029 4)
Average genome size in population (length): 87.454
Average program size in population (points): 88.454
Average percent parens in population: 0.011
Minimum age in population: 59.08386162657189
Maximum age in population: 63.83993454773235
Average age in population: 62.01551041900711
Median age in population: 62.04846339121809
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.937
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.937
Total error diversity:				 0.131
Error (vector) diversity:			 0.135
Behavioral diversity:				 0.139
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 88524277
--- Timings ---
Current time: 1529615036932 milliseconds
Total Time:         153.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.1 seconds, 38.4%
Fitness Testing:     73.6 seconds, 47.9%
Report:              20.9 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Number IO problem report - generation 44
Test total error for best: 11476.5633
Test mean error for best: 5.73828
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_min} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_max} {:instruction float_max} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_frominteger} {:instruction integer_dec} {:instruction in1} {:instruction integer_dec} {:instruction float_add} {:instruction 81} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 96.80697452437909} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction integer_div} {:instruction in1} {:instruction float_mod} {:instruction float_add} {:instruction in1} {:instruction float_mod} {:instruction float_dup_times} {:instruction print_integer} {:instruction float_mod} {:instruction in1} {:instruction float_cos} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction integer_yank} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction float_shove} {:instruction float_flush} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_321} {:instruction print_integer} {:instruction tag_float_22} {:instruction float_shove} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction integer_stackdepth})
Best program: (integer_dup_items integer_swap float_min integer_dup_items integer_min integer_max float_max integer_pop integer_dup_times float_frominteger integer_dec in1 integer_dec float_add 81 float_yankdup float_swap integer_div in2 float_dup_times float_dup_items 96.80697452437909 integer_sub float_sub integer_div integer_dup_times float_max float_swap integer_div in1 float_mod float_add in1 float_mod float_dup_times print_integer float_mod in1 float_cos float_mod in1 float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult integer_sub float_add integer_sub float_sub integer_div float_sin integer_yank tag_float_518 float_mult in1 integer_fromfloat integer_add float_swap float_swap float_dup float_flush print_integer float_swap float_shove float_flush print_integer tag_float_78 float_shove float_dup_times tag_float_22 float_shove float_dup_times tag_float_321 print_integer tag_float_22 float_shove print_integer float_swap float_sin integer_stackdepth)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 87
Size: 88
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2472.179209700001
Median total errors in population: 281.16429999999997
Error averages by case: (80.2045682999985 11.124 103.54388089999982 11.359 61.63945289999948 11.126 75.09675339999984 10.107 106.56639460000162 11.3 78.79084240000076 11.205 102.54391599999857 11.183 103.0939804999992 11.317 98.9010722000008 11.189 82.41439600000085 11.35 75.54716299999994 11.224 79.27096399999982 11.379 99.81719499999906 11.18 76.03264960000118 11.211 80.56481139999963 11.338 74.92802800000132 10.215 59.303192299999594 11.171 99.63490389999956 10.187 98.37187829999927 10.139 104.69835459999913 11.305 103.58587830000114 11.274 78.87768629999925 11.214 106.74003590000031 11.278 66.72314660000059 10.856 98.87006530000066 11.187)
Error minima by case: (0.4247 10 0.4241 9 0.3722 2 0.1619 4 0.3687 9 0.0988 10 0.2563 9 0.276 9 0.1491 9 0.498 10 0.3954 4 0.3556 10 0.2337 10 0.3576 10 0.3743 10 0.2035 4 0.2941 10 0.2077 9 0.1022 7 0.4059 9 0.1968 8 0.2809 9 0.2071 9 0.3104 3 0.4029 9)
Average genome size in population (length): 87.064
Average program size in population (points): 88.064
Average percent parens in population: 0.011
Minimum age in population: 60.86997164208151
Maximum age in population: 65.32666677186103
Average age in population: 63.46557144268642
Median age in population: 63.50119652821633
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.903
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.903
Total error diversity:				 0.146
Error (vector) diversity:			 0.149
Behavioral diversity:				 0.15
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 90701257
--- Timings ---
Current time: 1529615040706 milliseconds
Total Time:         157.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.5 seconds, 38.4%
Fitness Testing:     75.5 seconds, 47.9%
Report:              21.5 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Number IO problem report - generation 45
Test total error for best: 11473.813500000006
Test mean error for best: 5.73691
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction tag_float_715} {:instruction integer_swap} {:instruction float_frominteger} {:instruction in2} {:instruction float_frominteger} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_min} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_max} {:instruction integer_mod} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_frominteger} {:instruction integer_dec} {:instruction in1} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_sin} {:instruction integer_sub} {:instruction float_sub} {:instruction float_sub} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_yank} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction float_shove} {:instruction float_flush} {:instruction print_integer} {:instruction tag_float_9916} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_321} {:instruction print_integer} {:instruction tag_float_22} {:instruction float_shove} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction integer_stackdepth})
Best program: (integer_pop tag_float_715 integer_swap float_frominteger in2 float_frominteger integer_shove integer_swap float_min integer_dup_items integer_min integer_max integer_mod integer_pop integer_dup_times float_frominteger integer_dec in1 float_yankdup float_swap float_mod in1 float_yankdup float_swap integer_div in2 float_dup_times float_dup_items float_sin integer_sub float_sub float_sub integer_dup_times float_max float_swap float_mod in1 float_mod float_mod in1 float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_sub float_add integer_sub integer_yank tag_float_518 float_mult in1 integer_fromfloat integer_add float_swap float_swap float_dup float_flush print_integer float_swap float_shove float_flush print_integer tag_float_9916 float_shove float_dup_times tag_float_22 float_shove float_dup_times tag_float_321 print_integer tag_float_22 float_shove print_integer float_swap float_sin integer_stackdepth)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 81
Size: 82
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2637.2794240000007
Median total errors in population: 281.16429999999997
Error averages by case: (87.93185749999867 11.139 107.92338399999956 11.36 67.2605721999997 11.112 82.03271079999936 10.079 110.68695010000177 11.295 86.9237556000012 11.189 106.20738319999828 11.175 107.75548589999912 11.307 103.13507050000105 11.167 89.43842400000112 11.345 82.35171719999948 11.217 86.58158680000028 11.386 112.06558889999887 11.176 85.40407360000127 11.181 89.44615770000001 11.372 82.70690200000129 10.214 67.32768049999956 11.139 111.0888708999996 10.195 105.37403619999895 10.13 108.552067399999 11.301 108.47357360000129 11.271 86.22687729999949 11.221 110.8020310000003 11.283 71.33145080000038 10.838 103.96921630000057 11.19)
Error minima by case: (0.4247 10 0.4241 6 0.0 1 0.0 2 0.3687 6 0.0988 5 0.2563 4 0.276 6 0.1491 4 0.498 7 0.0 2 0.3556 5 0.2337 9 0.3576 4 0.3743 10 0.0 2 0.2941 9 0.2077 8 0.1022 7 0.4059 6 0.1968 5 0.2809 5 0.2071 6 0.0 1 0.4029 4)
Average genome size in population (length): 87.646
Average program size in population (points): 88.646
Average percent parens in population: 0.011
Minimum age in population: 62.25639596465044
Maximum age in population: 66.78800400896137
Average age in population: 64.9008822157542
Median age in population: 64.93973382072662
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.915
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.915
Total error diversity:				 0.135
Error (vector) diversity:			 0.137
Behavioral diversity:				 0.139
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 92892714
--- Timings ---
Current time: 1529615044327 milliseconds
Total Time:         161.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.9 seconds, 38.4%
Fitness Testing:     77.3 seconds, 47.9%
Report:              22.0 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Number IO problem report - generation 46
Test total error for best: 11476.5633
Test mean error for best: 5.73828
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_min} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_max} {:instruction float_max} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_frominteger} {:instruction integer_dec} {:instruction in1} {:instruction integer_dec} {:instruction float_add} {:instruction float_add} {:instruction integer_max} {:instruction float_mod} {:instruction 81} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 96.80697452437909} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_add} {:instruction float_add} {:instruction integer_max} {:instruction float_mod} {:instruction 81} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 96.80697452437909} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction integer_max} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_yank} {:instruction float_sin} {:instruction float_max} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_swap} {:instruction float_dup} {:instruction tag_float_292} {:instruction print_integer} {:instruction tag_float_22} {:instruction float_shove} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction integer_stackdepth})
Best program: (integer_sub integer_dup_items integer_swap float_min integer_dup_items integer_min integer_max float_max integer_pop integer_dup_times float_frominteger integer_dec in1 integer_dec float_add float_add integer_max float_mod 81 float_yankdup float_swap integer_div in2 float_dup_times float_dup_items 96.80697452437909 integer_sub float_sub integer_div integer_dup_times float_max float_swap float_mod in1 float_add float_add integer_max float_mod 81 float_yankdup float_swap integer_div in2 float_dup_times float_dup_items 96.80697452437909 integer_sub float_sub integer_div integer_dup_times float_max float_swap float_mod in1 float_mod float_mod in1 float_mod in1 integer_flush float_max in2 integer_max float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_sub integer_yank float_sin float_max tag_float_518 float_mult in1 integer_fromfloat integer_add float_swap float_swap float_dup tag_float_292 print_integer tag_float_22 float_shove print_integer float_swap float_sin integer_stackdepth)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 91
Size: 92
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2421.4002391
Median total errors in population: 281.16429999999997
Error averages by case: (85.54770689999876 11.14 97.20981269999996 11.345 58.10684849999993 11.116 74.45269889999987 10.101 101.55901440000153 11.308 84.29543520000078 11.193 94.23667499999898 11.177 96.78875349999932 11.325 91.77932330000068 11.182 87.00488200000072 11.336 74.86342370000004 11.228 84.85867520000004 11.376 95.24439399999918 11.184 83.61179520000103 11.194 86.57665489999994 11.376 75.20319590000118 10.209 55.69130879999958 11.145 92.55601719999957 10.201 88.84064819999959 10.14 99.29605429999921 11.314 98.11724820000097 11.282 85.15928179999946 11.216 101.64294430000031 11.283 63.31699780000048 10.852 89.04044920000061 11.177)
Error minima by case: (0.4247 9 0.4241 5 0.3722 2 0.1619 4 0.3687 5 0.0988 5 0.2563 4 0.276 5 0.1491 4 0.498 6 0.3954 4 0.3556 5 0.2337 10 0.3576 3 0.3743 9 0.2035 4 0.2941 9 0.2077 8 0.1022 8 0.4059 5 0.1968 4 0.2809 5 0.2071 5 0.3104 3 0.4029 4)
Average genome size in population (length): 87.865
Average program size in population (points): 88.865
Average percent parens in population: 0.011
Minimum age in population: 63.95085628015704
Maximum age in population: 68.20059834763825
Average age in population: 66.31765669045934
Median age in population: 66.36242909204174
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.928
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.928
Total error diversity:				 0.143
Error (vector) diversity:			 0.146
Behavioral diversity:				 0.149
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 95089648
--- Timings ---
Current time: 1529615048084 milliseconds
Total Time:         164.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.2 seconds, 38.3%
Fitness Testing:     79.2 seconds, 48.0%
Report:              22.4 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Number IO problem report - generation 47
Test total error for best: 11473.9649
Test mean error for best: 5.73698
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction tag_float_715} {:instruction integer_swap} {:instruction float_frominteger} {:instruction in2} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction tagged_3} {:instruction float_min} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_max} {:instruction float_tan} {:instruction integer_dup_times} {:instruction float_pop} {:instruction integer_max} {:instruction float_max} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_frominteger} {:instruction integer_dec} {:instruction in1} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 96.80697452437909} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction float_dup_times} {:instruction float_mod} {:instruction float_mod} {:instruction -53.070917232121495} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction integer_max} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction float_rot} {:instruction integer_yank} {:instruction float_dup_times} {:instruction tag_float_78} {:instruction float_shove} {:instruction float_mod} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_321} {:instruction float_yank} {:instruction tag_float_22} {:instruction float_shove} {:instruction print_integer})
Best program: (integer_pop tag_float_715 integer_swap float_frominteger in2 float_frominteger integer_dup_items tagged_3 float_min integer_dup_items integer_min integer_max float_tan integer_dup_times float_pop integer_max float_max integer_pop integer_dup_times float_frominteger integer_dec in1 float_yankdup float_swap integer_div in2 float_dup_times float_dup_items 96.80697452437909 integer_sub float_sub integer_div float_max float_swap float_mod integer_dup_times float_max float_swap float_mod float_dup_times float_mod float_mod -53.070917232121495 float_mod in1 integer_flush float_max in2 integer_max float_mult float_cos integer_fromfloat integer_rot float_mult float_sub float_add integer_sub float_sub integer_div float_sin float_max tag_float_518 float_mult in1 integer_fromfloat integer_add float_swap float_dup float_flush print_integer float_rot integer_yank float_dup_times tag_float_78 float_shove float_mod float_rot integer_swap integer_add float_swap float_dup float_flush print_integer tag_float_78 float_shove float_dup_times tag_float_22 float_shove float_dup_times tag_float_321 float_yank tag_float_22 float_shove print_integer)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 94
Size: 95
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2564.3812355999994
Median total errors in population: 281.16429999999997
Error averages by case: (85.72667979999865 11.146 107.9365674999996 11.364 64.11768879999944 11.131 80.17368219999967 10.097 110.79501670000185 11.313 84.36492920000109 11.219 102.73983159999845 11.194 107.47217479999914 11.342 101.0209856000009 11.187 87.17588200000102 11.381 80.57434479999972 11.236 84.5917636000001 11.413 104.5148126999991 11.207 80.70479520000127 11.222 86.68115209999992 11.396 80.69468100000127 10.234 56.45698979999962 11.152 102.69788709999959 10.206 100.27773899999924 10.128 107.93846819999906 11.332 106.86604070000121 11.29 85.68424809999924 11.23 110.9352227000003 11.298 70.46883000000064 10.831 97.0348224000006 11.187)
Error minima by case: (0.4247 10 0.4241 5 0.3722 2 0.1619 4 0.3687 5 0.0988 5 0.2563 4 0.276 5 0.1491 4 0.498 6 0.3954 4 0.3556 5 0.2337 9 0.3576 3 0.3743 10 0.2035 4 0.2941 10 0.2077 9 0.1022 6 0.4059 5 0.1968 4 0.2809 5 0.2071 5 0.3104 3 0.4029 4)
Average genome size in population (length): 87.127
Average program size in population (points): 88.127
Average percent parens in population: 0.011
Minimum age in population: 65.10625206012355
Maximum age in population: 69.7522833099379
Average age in population: 67.75360757756452
Median age in population: 67.7961524209527
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.919
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.919
Total error diversity:				 0.144
Error (vector) diversity:			 0.145
Behavioral diversity:				 0.146
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 97268269
--- Timings ---
Current time: 1529615051757 milliseconds
Total Time:         168.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.5 seconds, 38.3%
Fitness Testing:     80.9 seconds, 48.0%
Report:              23.0 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Number IO problem report - generation 48
Test total error for best: 11476.5633
Test mean error for best: 5.73828
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction tag_float_715} {:instruction integer_swap} {:instruction float_frominteger} {:instruction float_min} {:instruction integer_dup_items} {:instruction integer_min} {:instruction float_dup} {:instruction float_max} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_frominteger} {:instruction integer_dec} {:instruction in1} {:instruction integer_dec} {:instruction float_add} {:instruction float_frominteger} {:instruction integer_dec} {:instruction in1} {:instruction integer_dec} {:instruction print_integer} {:instruction integer_div} {:instruction in2} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 96.80697452437909} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction integer_sub} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction tag_float_584} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_mod} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction integer_mod} {:instruction print_integer} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_shove} {:instruction integer_pop} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_321} {:instruction print_integer} {:instruction integer_dup_times} {:instruction float_shove} {:instruction print_integer} {:instruction float_flush} {:instruction integer_mult} {:instruction tag_float_78})
Best program: (integer_pop tag_float_715 integer_swap float_frominteger float_min integer_dup_items integer_min float_dup float_max integer_pop integer_dec float_frominteger integer_dec in1 integer_dec float_add float_frominteger integer_dec in1 integer_dec print_integer integer_div in2 float_swap integer_div in2 float_dup_times float_swap integer_div in2 float_dup_times float_dup_items 96.80697452437909 integer_sub float_sub integer_div integer_dup_times float_max float_swap float_mod in1 float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult integer_sub float_sub float_add integer_sub float_sub integer_div float_sin float_max tag_float_584 float_mult in1 integer_fromfloat integer_add float_mod float_swap float_dup float_flush print_integer integer_mod print_integer float_swap float_dup float_flush print_integer tag_float_78 float_shove integer_pop tag_float_22 float_shove float_dup_times tag_float_321 print_integer integer_dup_times float_shove print_integer float_flush integer_mult tag_float_78)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 89
Size: 90
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2190.7633630000005
Median total errors in population: 281.16429999999997
Error averages by case: (74.72373399999863 11.12 87.30415439999997 11.288 50.89481469999989 11.124 67.5918543000003 10.07 90.68767390000141 11.243 76.22953400000046 11.156 85.05542669999903 11.149 86.48881389999926 11.254 80.69983179999991 11.133 80.56237200000079 11.306 68.30186070000045 11.21 76.54683039999951 11.35 84.62631779999894 11.161 72.68358320000131 11.155 76.57391189999933 11.372 67.40248470000124 10.199 45.08792589999956 11.113 81.85619919999952 10.164 80.32173679999981 10.09 88.57890969999916 11.264 87.26239730000097 11.222 77.7138098999992 11.185 90.8281226000003 11.226 57.67354110000034 10.819 79.55652210000065 11.138)
Error minima by case: (0.4247 10 0.4241 3 0.3722 2 0.1619 4 0.3687 3 0.0988 5 0.2563 2 0.276 3 0.1491 2 0.498 7 0.3954 4 0.3556 5 0.2337 10 0.3576 4 0.3743 10 0.2035 4 0.2941 9 0.2077 8 0.1022 8 0.4059 3 0.1968 2 0.2809 5 0.2071 3 0.3104 3 0.4029 2)
Average genome size in population (length): 87.091
Average program size in population (points): 88.091
Average percent parens in population: 0.011
Minimum age in population: 66.67775629766915
Maximum age in population: 71.36397684263785
Average age in population: 69.16392576089444
Median age in population: 69.20286105308615
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.918
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.918
Total error diversity:				 0.137
Error (vector) diversity:			 0.141
Behavioral diversity:				 0.143
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 99445761
--- Timings ---
Current time: 1529615055354 milliseconds
Total Time:         172.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.9 seconds, 38.2%
Fitness Testing:     82.7 seconds, 48.0%
Report:              23.6 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Number IO problem report - generation 49
Test total error for best: 11476.5633
Test mean error for best: 5.73828
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_min} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_max} {:instruction float_max} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_frominteger} {:instruction integer_dec} {:instruction integer_dup_items} {:instruction integer_dec} {:instruction float_add} {:instruction float_add} {:instruction integer_max} {:instruction float_mod} {:instruction 81} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 96.80697452437909} {:instruction integer_sub} {:instruction float_sub} {:instruction 81} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 97.07646621927347} {:instruction integer_sub} {:instruction float_sub} {:instruction float_pop} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction integer_dec} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction integer_inc} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction integer_max} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction float_rot} {:instruction integer_yank} {:instruction float_dup_times} {:instruction tag_float_78} {:instruction float_dup} {:instruction 40} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_add} {:instruction float_swap})
Best program: (integer_sub integer_dup_items integer_swap float_min integer_dup_items integer_min integer_max float_max integer_pop integer_dup_times float_frominteger integer_dec integer_dup_items integer_dec float_add float_add integer_max float_mod 81 float_yankdup float_swap integer_div in2 float_dup_times float_dup_items 96.80697452437909 integer_sub float_sub 81 float_yankdup float_swap integer_div in2 float_dup_times float_dup_items 97.07646621927347 integer_sub float_sub float_pop integer_dup_times float_max float_swap float_mod integer_stackdepth float_max float_swap float_mod in1 integer_dec float_mod in1 integer_flush float_max integer_inc float_mult float_mult in2 integer_max float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_sub integer_div float_sin float_max tag_float_518 float_mult in1 integer_fromfloat integer_add float_swap float_dup float_flush print_integer float_rot integer_yank float_dup_times tag_float_78 float_dup 40 float_rot integer_swap integer_add float_swap)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 89
Size: 90
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2374.4514143
Median total errors in population: 281.16429999999997
Error averages by case: (81.19861049999848 11.121 95.9605775000004 11.324 64.07073299999965 11.088 76.03720369999976 10.064 96.4365567000013 11.25 80.83126160000084 11.168 89.018293799999 11.156 93.78473989999894 11.261 88.71146450000019 11.139 83.03542000000074 11.331 76.39522579999992 11.193 81.62336479999979 11.363 92.8907194999988 11.174 80.21321920000143 11.179 82.32678899999952 11.369 75.95291600000151 10.196 59.49680109999957 11.127 91.71461429999955 10.186 89.66842619999956 10.127 94.81843869999886 11.276 92.89564710000047 11.241 81.75303459999908 11.211 97.5412726000003 11.262 66.79145600000051 10.817 85.51462820000063 11.147)
Error minima by case: (0.4247 10 0.4241 2 0.0 1 0.0 2 0.3687 2 0.0988 3 0.2563 2 0.276 2 0.1491 2 0.498 3 0.0 2 0.3556 2 0.2337 10 0.3576 3 0.3743 10 0.0 2 0.2941 9 0.2077 9 0.1022 8 0.4059 2 0.1968 2 0.2809 3 0.2071 2 0.0 1 0.4029 2)
Average genome size in population (length): 87.238
Average program size in population (points): 88.238
Average percent parens in population: 0.011
Minimum age in population: 67.67775629766915
Maximum age in population: 72.98293321096257
Average age in population: 70.57179769235434
Median age in population: 70.63230700035638
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.927
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.927
Total error diversity:				 0.12
Error (vector) diversity:			 0.124
Behavioral diversity:				 0.126
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 101627067
--- Timings ---
Current time: 1529615059016 milliseconds
Total Time:         175.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.2 seconds, 38.2%
Fitness Testing:     84.6 seconds, 48.1%
Report:              24.1 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Number IO problem report - generation 50
Test total error for best: 11475.245100000002
Test mean error for best: 5.73762
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_min} {:instruction float_pop} {:instruction integer_min} {:instruction integer_max} {:instruction float_max} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_frominteger} {:instruction integer_dec} {:instruction in1} {:instruction float_sin} {:instruction float_add} {:instruction float_add} {:instruction -5.532078080945141} {:instruction float_mod} {:instruction integer_max} {:instruction float_mod} {:instruction 81} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_add} {:instruction float_sub} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_mod} {:instruction -53.070917232121495} {:instruction float_div} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_sub} {:instruction float_add} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction tag_float_518} {:instruction integer_rot} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_swap} {:instruction integer_max} {:instruction float_flush} {:instruction float_mod} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_sub} {:instruction integer_dup} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_321} {:instruction print_integer} {:instruction tag_float_22} {:instruction float_shove} {:instruction print_integer} {:instruction float_swap} {:instruction float_tan} {:instruction integer_stackdepth})
Best program: (integer_pop integer_dup_items integer_swap float_min float_pop integer_min integer_max float_max integer_pop integer_dup_times float_frominteger integer_dec in1 float_sin float_add float_add -5.532078080945141 float_mod integer_max float_mod 81 float_yankdup float_swap integer_div in2 float_dup_times float_add float_sub integer_div integer_dup_times float_max float_swap float_mod in1 float_mod float_mod -53.070917232121495 float_div in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_sub integer_div float_sin float_sub float_add integer_div float_sin float_max tag_float_518 integer_rot in1 integer_fromfloat integer_add float_swap float_swap integer_max float_flush float_mod float_swap float_dup float_flush print_integer tag_float_78 float_sub integer_dup tag_float_22 float_shove float_dup_times tag_float_321 print_integer tag_float_22 float_shove print_integer float_swap float_tan integer_stackdepth)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 87
Size: 88
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2150.2903217000003
Median total errors in population: 281.16429999999997
Error averages by case: (74.29917069999865 11.119 81.89755590000041 11.28 51.21875899999975 11.121 67.54239460000043 10.079 84.59430960000103 11.222 74.50794120000047 11.157 79.42362439999926 11.17 82.11272149999924 11.266 78.50196040000026 11.127 76.85138000000063 11.293 67.95323800000057 11.19 75.68231959999973 11.338 84.69921999999897 11.187 73.72458320000129 11.169 75.93243709999963 11.326 68.2624140000012 10.183 54.447401299999605 11.16 83.61658149999961 10.194 78.96888919999952 10.167 83.580107899999 11.261 81.64747500000058 11.232 75.88124809999925 11.172 85.7697523000003 11.234 54.76911230000036 10.861 78.73672490000057 11.161)
Error minima by case: (0.4247 10 0.4241 5 0.3722 2 0.1619 4 0.3687 6 0.0988 5 0.0221 4 0.276 4 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 9 0.3576 4 0.3743 9 0.2035 4 0.2941 9 0.2077 9 0.1022 8 0.4059 6 0.1968 5 0.2809 5 0.2071 6 0.3104 3 0.4029 4)
Average genome size in population (length): 87.145
Average program size in population (points): 88.145
Average percent parens in population: 0.011
Minimum age in population: 68.78250093913067
Maximum age in population: 74.05753216094861
Average age in population: 71.98511242629394
Median age in population: 72.00720026457115
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.929
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.929
Total error diversity:				 0.12
Error (vector) diversity:			 0.12
Behavioral diversity:				 0.124
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 103805897
--- Timings ---
Current time: 1529615062648 milliseconds
Total Time:         179.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.5 seconds, 38.1%
Fitness Testing:     86.4 seconds, 48.1%
Report:              24.6 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Number IO problem report - generation 51
Test total error for best: 11473.749500000005
Test mean error for best: 5.73687
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction tag_float_715} {:instruction integer_swap} {:instruction in2} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_min} {:instruction integer_dup_items} {:instruction integer_min} {:instruction float_tan} {:instruction float_max} {:instruction integer_pop} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_mod} {:instruction 81} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_swap} {:instruction integer_dec} {:instruction integer_sub} {:instruction float_sub} {:instruction float_dup_times} {:instruction integer_dup_items} {:instruction float_sin} {:instruction integer_sub} {:instruction float_sub} {:instruction float_sub} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction float_swap} {:instruction integer_dup_items} {:instruction in1} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction tag_float_78} {:instruction integer_sub} {:instruction float_dup_times} {:instruction tag_float_22} {:instruction integer_fromfloat} {:instruction float_flush})
Best program: (float_stackdepth tag_float_715 integer_swap in2 float_frominteger integer_dup_items integer_swap float_min integer_dup_items integer_min float_tan float_max integer_pop float_rot float_frominteger float_mod 81 float_yankdup float_swap integer_div in2 float_dup_times float_swap integer_dec integer_sub float_sub float_dup_times integer_dup_items float_sin integer_sub float_sub float_sub integer_dup_times float_max float_swap float_mod in1 float_mod float_mod in1 float_mod in1 integer_flush float_max float_swap integer_dup_items in1 float_mod float_mod in1 float_mod float_mod float_mod in1 float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_sub integer_div float_sin float_max tag_float_518 float_mult in1 integer_fromfloat integer_add float_swap float_dup float_flush print_integer tag_float_78 integer_sub float_dup_times tag_float_22 integer_fromfloat float_flush)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 87
Size: 88
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2341.4107420000005
Median total errors in population: 281.16429999999997
Error averages by case: (77.70207429999859 11.11 96.89854010000009 11.299 59.8286837999995 11.11 72.14526220000018 10.1 99.47108460000146 11.269 76.95876760000048 11.182 96.81902009999862 11.118 96.65537999999896 11.298 93.4689886000006 11.147 80.0759380000005 11.309 72.44076560000038 11.186 77.47427639999975 11.363 91.7788964999989 11.152 74.16985520000114 11.197 78.36595109999952 11.309 71.69558840000136 10.176 47.3368819999996 11.152 90.49009339999955 10.166 84.98740599999952 10.12 97.79029339999884 11.249 96.83904910000082 11.223 77.96482109999934 11.201 99.6395444000003 11.233 63.96536380000063 10.866 90.75721630000062 11.156)
Error minima by case: (0.4247 2 0.0 3 0.0 1 0.0 2 0.0 3 0.0988 3 0.0 2 0.0 3 0.0 2 0.498 4 0.0 2 0.3556 3 0.0 2 0.3576 3 0.3743 3 0.0 2 0.0 1 0.0 2 0.0 1 0.0 3 0.0 3 0.2809 3 0.0 3 0.0 1 0.0 2)
Average genome size in population (length): 87.045
Average program size in population (points): 88.045
Average percent parens in population: 0.011
Minimum age in population: 70.44699220175085
Maximum age in population: 75.42340880604445
Average age in population: 73.4468069540198
Median age in population: 73.46098170367523
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.908
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.908
Total error diversity:				 0.137
Error (vector) diversity:			 0.142
Behavioral diversity:				 0.143
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 105982241
--- Timings ---
Current time: 1529615066251 milliseconds
Total Time:         183.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.9 seconds, 38.1%
Fitness Testing:     88.1 seconds, 48.1%
Report:              25.0 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Number IO problem report - generation 52
Test total error for best: 11475.9327
Test mean error for best: 5.73797
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction float_mod} {:instruction float_min} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_min} {:instruction integer_mult} {:instruction integer_min} {:instruction integer_max} {:instruction float_max} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_frominteger} {:instruction integer_dec} {:instruction in1} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 96.80697452437909} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_mod} {:instruction float_mult} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_mod} {:instruction integer_pop} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction tag_float_518} {:instruction float_mult} {:instruction float_max} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction integer_swap} {:instruction tag_float_78} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_321} {:instruction float_dup_times} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_321} {:instruction print_integer} {:instruction tag_float_22} {:instruction float_shove} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction integer_stackdepth})
Best program: (integer_dup_items float_mod float_min integer_dup_items integer_min integer_pop integer_dup_times integer_sub integer_dup_items integer_swap float_min integer_mult integer_min integer_max float_max integer_pop integer_dup_times float_frominteger integer_dec in1 float_yankdup float_swap integer_div in2 float_dup_times float_dup_items 96.80697452437909 integer_sub float_sub integer_div integer_dup_times float_max float_swap float_mod in1 float_mod float_mod float_mult float_mod in1 integer_flush float_mod integer_pop float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_sub integer_div float_sin float_max tag_float_518 float_mult float_max tag_float_518 float_mult in1 integer_fromfloat integer_add float_swap float_swap float_dup float_flush print_integer float_swap float_dup float_flush integer_swap tag_float_78 float_shove float_dup_times tag_float_22 float_shove float_dup_times tag_float_321 float_dup_times tag_float_22 float_shove float_dup_times tag_float_321 print_integer tag_float_22 float_shove print_integer float_swap float_sin integer_stackdepth)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 97
Size: 98
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2255.2495574
Median total errors in population: 281.16429999999997
Error averages by case: (71.20321289999877 11.111 95.43417470000001 11.324 51.03703859999985 11.134 67.26660610000042 10.06 97.1069159000013 11.262 72.26423760000044 11.16 89.74418689999919 11.175 92.26259399999915 11.304 90.41317760000047 11.148 77.25089400000068 11.308 66.9906712000005 11.217 74.35545319999999 11.363 88.89962709999902 11.178 71.12072240000099 11.161 72.80767169999955 11.346 68.01234400000112 10.208 57.24757899999958 11.12 87.55532479999957 10.175 82.83210159999967 10.108 95.59015079999902 11.289 94.57622150000088 11.263 75.10356269999937 11.175 97.5405304000003 11.256 56.47724440000032 10.814 86.32431430000064 11.174)
Error minima by case: (0.4247 10 0.4241 5 0.3722 2 0.1619 4 0.3687 6 0.0988 5 0.2563 4 0.276 5 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 10 0.3576 4 0.3743 9 0.2035 4 0.2941 9 0.2077 8 0.1022 8 0.4059 6 0.1968 5 0.2809 5 0.2071 6 0.3104 3 0.4029 4)
Average genome size in population (length): 86.505
Average program size in population (points): 87.505
Average percent parens in population: 0.012
Minimum age in population: 72.3796997821409
Maximum age in population: 76.6711731159026
Average age in population: 74.89467449526325
Median age in population: 74.94030362322142
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.922
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.922
Total error diversity:				 0.148
Error (vector) diversity:			 0.149
Behavioral diversity:				 0.152
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 108145096
--- Timings ---
Current time: 1529615069987 milliseconds
Total Time:         186.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.2 seconds, 38.1%
Fitness Testing:     90.0 seconds, 48.2%
Report:              25.5 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Number IO problem report - generation 53
Test total error for best: 11473.9649
Test mean error for best: 5.73698
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction tag_float_759} {:instruction integer_swap} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_min} {:instruction integer_max} {:instruction float_max} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_min} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_max} {:instruction float_max} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_frominteger} {:instruction float_flush} {:instruction in1} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction integer_dec} {:instruction in1} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_mod} {:instruction float_mod} {:instruction float_stackdepth} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction float_mult} {:instruction float_mod} {:instruction -53.070917232121495} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction integer_max} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction float_rot} {:instruction integer_yank} {:instruction float_dup_times} {:instruction tag_float_78} {:instruction float_shove} {:instruction float_mod} {:instruction float_pop})
Best program: (integer_pop tag_float_759 integer_swap float_frominteger integer_dup_items integer_min integer_min integer_max float_max integer_pop float_frominteger integer_dup_items integer_swap float_min integer_dup_items integer_min integer_max float_max integer_pop integer_dup_times float_frominteger float_flush in1 float_yankdup float_swap integer_div in2 float_dup_times integer_dec in1 float_yankdup float_swap integer_div in2 float_dup_times float_dup_items float_mod float_mod float_stackdepth float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos float_mult float_mod -53.070917232121495 float_mod in1 integer_flush float_max in2 integer_max float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_sub integer_div float_sin float_max tag_float_518 float_mult in1 integer_fromfloat integer_add float_swap float_dup float_flush print_integer float_rot integer_yank float_dup_times tag_float_78 float_shove float_mod float_pop)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2708.7560899
Median total errors in population: 281.16429999999997
Error averages by case: (93.51399299999851 11.129 109.6775791999998 11.306 66.72389519999962 11.1 87.9529218999993 10.047 112.35242280000155 11.26 93.27015080000129 11.155 107.29584069999862 11.163 108.3712901999991 11.27 105.27621490000088 11.156 96.61841200000123 11.32 88.39499109999942 11.193 92.84309760000046 11.349 110.4414558999991 11.189 91.02821920000122 11.176 95.43192870000011 11.35 88.35526750000142 10.175 71.4404693999996 11.163 107.68010099999957 10.185 106.14140949999931 10.141 110.48229989999903 11.278 109.58319280000121 11.265 92.58671999999932 11.186 112.46581950000031 11.255 72.34349700000054 10.807 102.70490010000069 11.162)
Error minima by case: (0.5753 10 0.4241 5 0.3722 2 0.8381 4 0.3687 5 0.0988 5 0.2563 4 0.276 5 0.8509 4 0.498 6 0.3954 4 0.3556 4 0.2337 9 0.3576 3 0.6257 10 0.2035 4 0.2941 9 0.2077 8 0.1022 8 0.4059 5 0.1968 4 0.2809 5 0.7929 5 0.3104 3 0.4029 4)
Average genome size in population (length): 86.487
Average program size in population (points): 87.487
Average percent parens in population: 0.012
Minimum age in population: 73.95692389235553
Maximum age in population: 78.33294160271113
Average age in population: 76.34078723849217
Median age in population: 76.41752331474395
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.931
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.931
Total error diversity:				 0.143
Error (vector) diversity:			 0.148
Behavioral diversity:				 0.15
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 110307588
--- Timings ---
Current time: 1529615073631 milliseconds
Total Time:         190.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        72.5 seconds, 38.1%
Fitness Testing:     91.8 seconds, 48.2%
Report:              26.1 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Number IO problem report - generation 54
Test total error for best: 11476.5633
Test mean error for best: 5.73828
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_fromfloat} {:instruction float_mod} {:instruction integer_inc} {:instruction integer_max} {:instruction float_max} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_frominteger} {:instruction integer_dec} {:instruction in1} {:instruction integer_rot} {:instruction float_add} {:instruction float_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_frominteger} {:instruction float_mod} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_mod} {:instruction integer_max} {:instruction in2} {:instruction 81} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 96.80697452437909} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_mod} {:instruction -52.4999804580187} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction tag_float_518} {:instruction integer_rot} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_swap} {:instruction integer_max} {:instruction float_flush} {:instruction float_mod} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_shove} {:instruction tag_integer_94} {:instruction tag_float_22} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction tag_float_321} {:instruction print_integer} {:instruction tag_float_22} {:instruction float_shove} {:instruction print_integer} {:instruction float_tan} {:instruction float_tan} {:instruction integer_stackdepth})
Best program: (integer_dup_items integer_swap integer_fromfloat float_mod integer_inc integer_max float_max integer_pop integer_dup_times float_frominteger integer_dec in1 integer_rot float_add float_add integer_max float_max integer_pop integer_dup_times float_frominteger float_mod integer_dup_items integer_dup_items float_mod integer_max in2 81 float_yankdup float_swap integer_div in2 float_dup_times float_dup_items 96.80697452437909 integer_sub float_sub integer_div integer_dup_times float_max float_swap float_mod in1 float_mod float_mod -52.4999804580187 float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_sub integer_div float_sin float_max tag_float_518 integer_rot in1 integer_fromfloat integer_add float_swap float_swap integer_max float_flush float_mod float_swap float_dup float_flush print_integer tag_float_78 float_shove tag_integer_94 tag_float_22 integer_dup_times float_dup_times tag_float_321 print_integer tag_float_22 float_shove print_integer float_tan float_tan integer_stackdepth)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 91
Size: 92
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2617.096226700001
Median total errors in population: 281.16429999999997
Error averages by case: (90.5997339999985 11.156 104.54247250000006 11.351 69.80031749999934 11.113 81.30664849999943 10.099 107.41627080000156 11.298 88.48754600000119 11.212 102.99980649999861 11.183 104.35045819999895 11.31 101.39548790000053 11.163 91.25991000000113 11.379 81.68443709999953 11.223 88.65516440000013 11.385 106.24461369999887 11.211 88.22829200000136 11.202 90.77316329999998 11.408 82.35351630000137 10.233 75.06742119999959 11.159 104.45504149999958 10.208 103.42874049999911 10.159 105.4485647999989 11.314 104.42140320000077 11.281 88.8748772999991 11.243 107.5306486000003 11.297 74.16060070000073 10.863 96.9860902000005 11.175)
Error minima by case: (0.4247 9 0.4241 3 0.3722 2 0.1619 4 0.3687 3 0.0988 5 0.2563 2 0.276 3 0.1491 2 0.498 6 0.3954 4 0.3556 4 0.2337 8 0.3576 3 0.3743 10 0.2035 4 0.2941 9 0.2077 8 0.1022 8 0.4059 3 0.1968 2 0.2809 5 0.2071 3 0.3104 3 0.4029 2)
Average genome size in population (length): 85.688
Average program size in population (points): 86.688
Average percent parens in population: 0.012
Minimum age in population: 74.95692389235553
Maximum age in population: 79.82906904288839
Average age in population: 77.7265656787335
Median age in population: 77.75419347930153
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.905
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.905
Total error diversity:				 0.128
Error (vector) diversity:			 0.129
Behavioral diversity:				 0.131
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 112450154
--- Timings ---
Current time: 1529615077238 milliseconds
Total Time:         194.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        73.9 seconds, 38.1%
Fitness Testing:     93.5 seconds, 48.2%
Report:              26.6 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
;;******************************
;; -*- Number IO problem report - generation 55
Test total error for best: 11474.595500000001
Test mean error for best: 5.73730
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction tag_float_715} {:instruction integer_dup} {:instruction integer_pop} {:instruction tag_float_715} {:instruction integer_swap} {:instruction float_frominteger} {:instruction in2} {:instruction float_frominteger} {:instruction integer_yank} {:instruction float_min} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_max} {:instruction tagged_53} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_frominteger} {:instruction integer_yank} {:instruction in1} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 96.80697452437909} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction integer_sub} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction tag_float_584} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_mod} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction float_swap} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_321} {:instruction print_integer} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_sin} {:instruction integer_stackdepth})
Best program: (integer_pop tag_float_715 integer_dup integer_pop tag_float_715 integer_swap float_frominteger in2 float_frominteger integer_yank float_min integer_dup_items integer_min integer_max tagged_53 integer_pop integer_pop integer_dup_times float_frominteger integer_yank in1 integer_dec integer_dup_times float_swap integer_div in2 float_dup_times float_dup_items 96.80697452437909 integer_sub float_sub integer_div integer_dup_times float_max float_swap float_mod in1 float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult integer_sub float_sub float_add integer_sub float_sub integer_div float_sin float_max tag_float_584 float_mult in1 integer_fromfloat integer_add float_mod float_swap float_dup float_flush float_swap float_swap float_dup float_flush print_integer float_swap float_dup float_flush print_integer tag_float_78 float_shove float_dup_times tag_float_22 float_shove float_dup_times tag_float_321 print_integer tag_float_22 float_shove float_stackdepth float_sin integer_stackdepth)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2402.9433052000004
Median total errors in population: 281.16429999999997
Error averages by case: (79.9345833999989 11.135 97.54085330000024 11.341 61.78442869999952 11.133 74.89488769999984 10.104 100.37415060000143 11.303 76.99851000000068 11.216 95.39253849999886 11.191 97.14401269999902 11.311 92.48626810000037 11.181 80.2543440000007 11.363 75.33212669999995 11.23 78.86885199999986 11.385 96.88787309999896 11.189 74.85737760000112 11.218 80.27878899999979 11.366 75.06814700000113 10.227 66.69581049999955 11.137 94.79576079999957 10.214 92.44710539999943 10.134 98.58458609999893 11.307 97.56673840000067 11.287 79.29258519999934 11.238 100.53161380000033 11.276 67.42304300000056 10.885 90.94931960000062 11.188)
Error minima by case: (0.4247 10 0.4241 9 0.3722 10 0.1619 8 0.3687 9 0.0988 10 0.2563 9 0.276 9 0.1491 9 0.498 9 0.3954 9 0.3556 10 0.2337 8 0.3576 9 0.3743 10 0.2035 8 0.2941 9 0.2077 9 0.1022 8 0.4059 9 0.1968 9 0.2809 9 0.2071 8 0.3104 9 0.4029 8)
Average genome size in population (length): 85.037
Average program size in population (points): 86.037
Average percent parens in population: 0.012
Minimum age in population: 76.3259432373979
Maximum age in population: 81.52029655623873
Average age in population: 79.09928804884183
Median age in population: 79.1378134925833
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.905
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.905
Total error diversity:				 0.124
Error (vector) diversity:			 0.125
Behavioral diversity:				 0.129
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 114576334
--- Timings ---
Current time: 1529615080711 milliseconds
Total Time:         197.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        75.2 seconds, 38.1%
Fitness Testing:     95.2 seconds, 48.2%
Report:              27.1 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
;;******************************
;; -*- Number IO problem report - generation 56
Test total error for best: 11475.9327
Test mean error for best: 5.73797
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_shove} {:instruction integer_swap} {:instruction float_tan} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction integer_mod} {:instruction 81} {:instruction float_yankdup} {:instruction in2} {:instruction float_tan} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_sin} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_yank} {:instruction float_max} {:instruction float_swap} {:instruction integer_dup_items} {:instruction in1} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction tagged_315} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction integer_max} {:instruction float_max} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction integer_rot} {:instruction integer_min} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_inc} {:instruction float_dup_times} {:instruction tag_float_51} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_321} {:instruction float_yank} {:instruction tag_float_22} {:instruction float_shove} {:instruction integer_div} {:instruction float_swap} {:instruction float_sin} {:instruction float_div})
Best program: (float_shove integer_swap float_tan integer_dup_items integer_min integer_swap float_max float_swap float_mod in1 integer_mod 81 float_yankdup in2 float_tan integer_yankdup integer_rot float_dup_items float_sin integer_sub float_sub integer_div float_yank float_max float_swap integer_dup_items in1 float_mod float_mod in1 float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult tagged_315 float_add integer_sub float_sub integer_div integer_max float_max integer_fromfloat float_mult in1 integer_fromfloat integer_add float_swap integer_rot integer_min print_integer integer_yank integer_inc float_dup_times tag_float_51 float_shove float_dup_times tag_float_321 float_yank tag_float_22 float_shove integer_div float_swap float_sin float_div)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2351.5478661
Median total errors in population: 281.16429999999997
Error averages by case: (83.84585749999871 11.157 93.33175340000005 11.344 66.44359689999948 11.11 75.94782539999974 10.115 96.3676449000013 11.299 79.25475560000086 11.206 90.425284999999 11.169 93.2100139999992 11.291 87.44055980000049 11.17 81.72342400000089 11.365 77.35578019999978 11.236 79.91365359999996 11.381 86.56961589999902 11.197 78.54143120000114 11.21 82.77128619999992 11.388 76.84055900000119 10.231 56.971846199999554 11.142 83.29858419999961 10.199 82.45406759999958 10.148 94.12393529999916 11.315 92.14566170000084 11.282 79.4634727999993 11.248 96.49942830000028 11.293 71.46538870000056 10.882 88.58743870000056 11.177)
Error minima by case: (0.4247 10 0.4241 5 0.3722 2 0.1619 4 0.3687 5 0.0988 5 0.2563 4 0.276 5 0.1491 4 0.498 6 0.3954 4 0.3556 4 0.2337 9 0.3576 4 0.3743 10 0.2035 4 0.2941 10 0.2077 9 0.1022 8 0.4059 5 0.1968 4 0.2809 5 0.2071 5 0.3104 3 0.4029 4)
Average genome size in population (length): 85.469
Average program size in population (points): 86.469
Average percent parens in population: 0.012
Minimum age in population: 77.87728234741768
Maximum age in population: 82.41259011998675
Average age in population: 80.50041752761894
Median age in population: 80.57900715320633
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.914
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.914
Total error diversity:				 0.136
Error (vector) diversity:			 0.138
Behavioral diversity:				 0.142
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 116713340
--- Timings ---
Current time: 1529615084170 milliseconds
Total Time:         201.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        76.5 seconds, 38.0%
Fitness Testing:     97.0 seconds, 48.2%
Report:              27.6 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
;;******************************
;; -*- Number IO problem report - generation 57
Test total error for best: 11477.2129
Test mean error for best: 5.73861
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_swap} {:instruction float_min} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_max} {:instruction float_max} {:instruction in2} {:instruction integer_fromfloat} {:instruction float_mod} {:instruction in1} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 96.80697452437909} {:instruction integer_pop} {:instruction float_sub} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_mod} {:instruction float_mult} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction float_tan} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction in2} {:instruction float_dup_times} {:instruction float_sub} {:instruction float_sin} {:instruction integer_sub} {:instruction float_sub} {:instruction float_sub} {:instruction integer_dup_times} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction tag_float_588} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_mod} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction print_integer} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_shove} {:instruction integer_pop} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_321} {:instruction float_inc} {:instruction tag_float_321} {:instruction in2})
Best program: (in2 integer_swap float_min integer_dup_items integer_min integer_max float_max in2 integer_fromfloat float_mod in1 integer_mod float_yankdup float_swap integer_div in2 float_dup_times float_dup_items 96.80697452437909 integer_pop float_sub integer_div integer_dup_times float_max float_swap float_mod in1 float_mod float_mod float_mult float_mod in1 integer_flush float_max float_tan float_mult float_mult float_cos in2 float_dup_times float_sub float_sin integer_sub float_sub float_sub integer_dup_times float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_sub integer_div float_sin float_max tag_float_588 float_mult in1 integer_fromfloat integer_add float_mod float_swap float_dup float_flush print_integer float_swap print_integer float_swap float_dup float_flush print_integer tag_float_78 float_shove integer_pop tag_float_22 float_shove float_dup_times tag_float_321 float_inc tag_float_321 in2)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 90
Size: 91
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2079.1530824000006
Median total errors in population: 281.16429999999997
Error averages by case: (72.64947259999879 11.147 79.34660980000031 11.335 52.70450299999958 11.132 65.3469979000006 10.102 81.06663600000087 11.283 71.06279440000046 11.207 78.24150149999909 11.18 78.40523789999922 11.308 75.86607900000017 11.161 73.17632400000042 11.359 65.67063480000067 11.229 70.97216239999966 11.373 78.45732309999903 11.171 69.49131120000112 11.195 72.55560439999955 11.358 66.32731600000123 10.226 54.85091349999955 11.146 77.53799629999956 10.176 74.91027319999975 10.138 79.91144399999916 11.304 79.03625810000058 11.268 71.59236049999942 11.225 81.2884571000003 11.277 58.28172300000042 10.876 74.0401487000006 11.187)
Error minima by case: (0.4247 11 0.4241 6 0.3722 2 0.1619 4 0.3687 6 0.0988 5 0.2563 4 0.276 6 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 10 0.3576 4 0.3743 11 0.2035 4 0.2941 10 0.2077 8 0.1022 8 0.4059 6 0.1968 5 0.2809 5 0.2071 6 0.3104 3 0.4029 4)
Average genome size in population (length): 85.254
Average program size in population (points): 86.254
Average percent parens in population: 0.012
Minimum age in population: 78.9637654246338
Maximum age in population: 83.70502380884997
Average age in population: 81.84823873935831
Median age in population: 81.85008629521043
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.903
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.903
Total error diversity:				 0.11
Error (vector) diversity:			 0.11
Behavioral diversity:				 0.112
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 118844972
--- Timings ---
Current time: 1529615087723 milliseconds
Total Time:         204.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        77.8 seconds, 38.0%
Fitness Testing:     98.7 seconds, 48.2%
Report:              28.0 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
;;******************************
;; -*- Number IO problem report - generation 58
Test total error for best: 11474.595500000001
Test mean error for best: 5.73730
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_dup} {:instruction float_swap} {:instruction float_div} {:instruction float_yank} {:instruction integer_inc} {:instruction integer_max} {:instruction float_max} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_frominteger} {:instruction integer_dec} {:instruction in1} {:instruction integer_rot} {:instruction integer_mult} {:instruction float_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_frominteger} {:instruction float_mod} {:instruction in1} {:instruction integer_dup_items} {:instruction float_add} {:instruction float_add} {:instruction integer_max} {:instruction float_mod} {:instruction 81} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_sub} {:instruction float_sin} {:instruction integer_sub} {:instruction float_sub} {:instruction float_sub} {:instruction integer_dup_times} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_mod} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction print_integer} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_mod} {:instruction float_yank} {:instruction tag_float_9930} {:instruction float_shove} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction integer_stackdepth})
Best program: (integer_sub float_dup float_swap float_div float_yank integer_inc integer_max float_max integer_pop integer_dup_times float_frominteger integer_dec in1 integer_rot integer_mult float_add integer_max float_max integer_pop integer_dup_times float_frominteger float_mod in1 integer_dup_items float_add float_add integer_max float_mod 81 float_yankdup float_swap integer_div in2 float_dup_times float_sub float_sin integer_sub float_sub float_sub integer_dup_times float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_sub integer_div float_sin float_max tag_float_518 float_mult in1 integer_fromfloat integer_add float_mod float_swap float_dup float_flush print_integer float_swap print_integer float_swap float_dup float_flush print_integer tag_float_78 float_mod float_yank tag_float_9930 float_shove print_integer float_swap float_sin integer_stackdepth)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2865.2694159000002
Median total errors in population: 281.16429999999997
Error averages by case: (100.06810449999854 11.166 115.51214389999947 11.376 76.18459819999937 11.133 93.77221749999903 10.111 118.26354420000185 11.331 101.46054600000166 11.24 112.93955289999818 11.197 114.42725299999908 11.327 111.87713630000123 11.198 104.12691400000166 11.417 93.14957289999914 11.243 102.62687560000059 11.422 112.52829359999902 11.215 100.47257680000135 11.233 102.00727500000035 11.423 94.13484060000145 10.244 77.40210389999959 11.149 109.5277352999996 10.223 105.46560449999892 10.166 115.76614109999899 11.334 115.32554900000136 11.314 102.92143909999912 11.267 118.4993861000003 11.324 80.84442500000081 10.86 108.8595869000006 11.193)
Error minima by case: (0.4247 9 0.4241 6 0.3722 2 0.1619 4 0.3687 6 0.0988 5 0.2563 4 0.276 6 0.1491 4 0.498 6 0.3954 4 0.3556 4 0.2337 9 0.3576 4 0.3743 10 0.2035 4 0.2941 9 0.2077 8 0.1022 8 0.4059 6 0.1968 5 0.2809 5 0.2071 6 0.3104 3 0.4029 4)
Average genome size in population (length): 84.507
Average program size in population (points): 85.507
Average percent parens in population: 0.012
Minimum age in population: 79.9637654246338
Maximum age in population: 85.17286895200834
Average age in population: 83.19746272454167
Median age in population: 83.23037309790992
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.908
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.908
Total error diversity:				 0.123
Error (vector) diversity:			 0.125
Behavioral diversity:				 0.128
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 120958028
--- Timings ---
Current time: 1529615091340 milliseconds
Total Time:         208.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        79.1 seconds, 38.0%
Fitness Testing:    100.5 seconds, 48.2%
Report:              28.5 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
;;******************************
;; -*- Number IO problem report - generation 59
Test total error for best: 11473.9649
Test mean error for best: 5.73698
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_min} {:instruction float_pop} {:instruction integer_min} {:instruction integer_max} {:instruction float_max} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_frominteger} {:instruction integer_dec} {:instruction in1} {:instruction float_sin} {:instruction float_add} {:instruction float_add} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 96.80697452437909} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_mod} {:instruction float_mod} {:instruction float_mod} {:instruction -53.070917232121495} {:instruction float_mod} {:instruction in1} {:instruction integer_dup_times} {:instruction float_max} {:instruction integer_dup_items} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_mod} {:instruction integer_dup_times} {:instruction -53.070917232121495} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction tagged_562} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction -69.6612109257324} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_mult} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_swap} {:instruction integer_min} {:instruction float_flush} {:instruction print_integer} {:instruction float_shove} {:instruction float_dup} {:instruction float_flush})
Best program: (integer_pop integer_dup_items integer_swap float_min float_pop integer_min integer_max float_max integer_pop integer_dup_times float_frominteger integer_dec in1 float_sin float_add float_add float_yankdup float_swap integer_div in2 float_dup_times float_dup_items 96.80697452437909 integer_sub float_sub integer_div integer_dup_times float_max float_swap float_mod in1 float_mod float_mod float_mod float_mod -53.070917232121495 float_mod in1 integer_dup_times float_max integer_dup_items float_mod in1 float_mod float_mod integer_dup_times -53.070917232121495 float_mod in1 integer_flush float_max in2 float_mult tagged_562 float_cos integer_fromfloat float_mult float_mult float_sub -69.6612109257324 integer_sub float_sub integer_div float_sin float_mult tag_float_518 float_mult in1 integer_fromfloat integer_add float_swap float_swap integer_min float_flush print_integer float_shove float_dup float_flush)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3026.3997048000015
Median total errors in population: 281.16429999999997
Error averages by case: (109.07585819999815 11.168 121.30502139999935 11.347 83.34451219999913 11.157 101.20345699999842 10.101 123.76863400000234 11.286 108.89292920000234 11.24 117.6501011999978 11.206 121.47872549999879 11.324 117.64043170000132 11.188 111.03637600000238 11.421 101.61651389999864 11.265 110.95089720000091 11.429 121.07012249999873 11.188 107.45972880000186 11.204 110.53606800000054 11.45 102.30907510000182 10.254 73.57126659999957 11.152 118.73881699999956 10.203 110.43976069999904 10.146 121.89592379999871 11.323 120.94288740000162 11.306 111.06437169999877 11.251 123.9575358000003 11.294 88.06640160000104 10.84 111.45928830000065 11.182)
Error minima by case: (0.4247 9 0.4241 5 0.3722 3 0.1619 4 0.3687 5 0.0988 5 0.2563 4 0.276 5 0.1491 4 0.498 6 0.3954 4 0.3556 4 0.2337 9 0.3576 4 0.3743 9 0.2035 4 0.2941 9 0.2077 8 0.1022 8 0.4059 5 0.1968 4 0.2809 5 0.2071 5 0.3104 4 0.4029 4)
Average genome size in population (length): 83.988
Average program size in population (points): 84.988
Average percent parens in population: 0.012
Minimum age in population: 81.80280837162071
Maximum age in population: 86.66638498248199
Average age in population: 84.5683068356698
Median age in population: 84.64553328179115
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.93
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.93
Total error diversity:				 0.136
Error (vector) diversity:			 0.139
Behavioral diversity:				 0.141
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 123058174
--- Timings ---
Current time: 1529615094886 milliseconds
Total Time:         211.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        80.5 seconds, 38.0%
Fitness Testing:    102.2 seconds, 48.3%
Report:              29.0 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
;;******************************
;; -*- Number IO problem report - generation 60
Test total error for best: 11474.595500000001
Test mean error for best: 5.73730
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_tan} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction integer_inc} {:instruction integer_max} {:instruction float_max} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_frominteger} {:instruction integer_dec} {:instruction in1} {:instruction integer_rot} {:instruction float_add} {:instruction float_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_frominteger} {:instruction float_mod} {:instruction in1} {:instruction integer_dup_items} {:instruction float_add} {:instruction float_add} {:instruction integer_max} {:instruction float_mod} {:instruction 81} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_sub} {:instruction float_sin} {:instruction integer_sub} {:instruction float_sub} {:instruction float_sub} {:instruction integer_shove} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_sub} {:instruction float_add} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction tag_float_518} {:instruction integer_rot} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_swap} {:instruction integer_max} {:instruction float_flush} {:instruction float_mod} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_sub} {:instruction integer_dup} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_319} {:instruction print_integer} {:instruction tag_float_22} {:instruction float_shove} {:instruction print_integer} {:instruction float_swap})
Best program: (integer_sub float_tan float_swap integer_fromfloat float_yank integer_inc integer_max float_max integer_pop integer_dup_times float_frominteger integer_dec in1 integer_rot float_add float_add integer_max float_max integer_pop integer_dup_times float_frominteger float_mod in1 integer_dup_items float_add float_add integer_max float_mod 81 float_yankdup float_swap integer_div in2 float_dup_times float_sub float_sin integer_sub float_sub float_sub integer_shove float_mod in1 integer_flush integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_sub integer_div float_sin float_sub float_add integer_div float_sin float_max tag_float_518 integer_rot in1 integer_fromfloat integer_add float_swap float_swap integer_max float_flush float_mod float_swap float_dup float_flush print_integer tag_float_78 float_sub integer_dup tag_float_22 float_shove float_dup_times tag_float_319 print_integer tag_float_22 float_shove print_integer float_swap)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 89
Size: 90
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2567.1813469000003
Median total errors in population: 281.16429999999997
Error averages by case: (93.6267049999986 11.142 99.01955689999976 11.33 66.55025399999954 11.124 81.98046729999973 10.075 102.38377950000172 11.272 90.20147400000121 11.194 98.03286399999864 11.178 100.29672779999919 11.301 97.24312760000069 11.16 93.22385400000115 11.368 82.65188029999976 11.225 92.4567040000002 11.374 101.16344669999904 11.185 86.98029080000127 11.181 93.5002811 11.395 84.07029500000128 10.205 71.07608379999957 11.134 99.15084719999957 10.201 94.13068529999948 10.15 99.89143759999914 11.296 99.54225210000129 11.276 91.51108839999914 11.198 102.5702689000003 11.277 72.61884420000067 10.834 97.08113140000056 11.152)
Error minima by case: (0.4247 9 0.4241 3 0.3722 1 0.1619 2 0.3687 3 0.0988 2 0.2563 2 0.276 3 0.1491 2 0.498 3 0.3954 2 0.3556 2 0.2337 9 0.3576 1 0.3743 10 0.2035 2 0.2941 9 0.2077 8 0.1022 7 0.4059 3 0.1968 2 0.2809 2 0.2071 3 0.3104 2 0.4029 2)
Average genome size in population (length): 83.867
Average program size in population (points): 84.867
Average percent parens in population: 0.012
Minimum age in population: 83.49365603774864
Maximum age in population: 87.98890030715938
Average age in population: 86.0281924208002
Median age in population: 86.10844433001701
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.919
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.919
Total error diversity:				 0.138
Error (vector) diversity:			 0.141
Behavioral diversity:				 0.143
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 125155488
--- Timings ---
Current time: 1529615098384 milliseconds
Total Time:         215.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        81.8 seconds, 38.0%
Fitness Testing:    103.9 seconds, 48.3%
Report:              29.5 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
;;******************************
;; -*- Number IO problem report - generation 61
Test total error for best: 11474.595500000001
Test mean error for best: 5.73730
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_swap} {:instruction float_min} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_min} {:instruction float_min} {:instruction integer_min} {:instruction integer_dup_times} {:instruction integer_mod} {:instruction integer_dec} {:instruction in1} {:instruction 35.77542359015047} {:instruction float_tan} {:instruction float_add} {:instruction integer_max} {:instruction in1} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 96.80697452437909} {:instruction integer_sub} {:instruction float_div} {:instruction print_integer} {:instruction integer_div} {:instruction in2} {:instruction integer_pop} {:instruction integer_pop} {:instruction 96.80697452437909} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_mult} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction float_shove} {:instruction float_flush} {:instruction float_yankdup} {:instruction tag_float_9916} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_swap} {:instruction tag_float_321} {:instruction print_integer} {:instruction tag_float_22} {:instruction float_shove} {:instruction print_integer} {:instruction float_swap})
Best program: (in2 integer_swap float_min integer_dup_items integer_dup_items integer_swap float_min float_min integer_min integer_dup_times integer_mod integer_dec in1 35.77542359015047 float_tan float_add integer_max in1 float_swap integer_div in2 float_dup_times float_dup_items 96.80697452437909 integer_sub float_div print_integer integer_div in2 integer_pop integer_pop 96.80697452437909 integer_sub float_sub integer_div float_max float_swap float_mod in1 float_mod float_mod in1 float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_mult float_add integer_sub float_sub tag_float_518 float_mult in1 integer_fromfloat integer_add float_swap float_swap float_dup float_flush print_integer float_swap float_shove float_flush float_yankdup tag_float_9916 float_shove float_dup_times tag_float_22 float_shove float_swap tag_float_321 print_integer tag_float_22 float_shove print_integer float_swap)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2610.3024638
Median total errors in population: 281.16429999999997
Error averages by case: (98.52510449999842 11.166 99.90863480000024 11.387 73.52075259999938 11.153 86.65313609999944 10.132 102.99315200000132 11.318 96.90662080000163 11.258 97.58228109999915 11.204 99.53656529999914 11.348 94.0222016000002 11.203 99.32336400000175 11.426 87.57858179999943 11.269 97.36505240000058 11.43 95.37764709999904 11.198 90.42915920000138 11.239 98.78865490000034 11.435 88.77810550000146 10.255 66.75599719999951 11.133 94.02067449999956 10.214 91.69273669999956 10.125 100.60839559999907 11.338 99.03084680000065 11.309 98.55921439999914 11.271 103.16488650000029 11.321 80.70122020000085 10.872 91.27947820000057 11.196)
Error minima by case: (0.4247 9 0.4241 3 0.3722 2 0.1619 4 0.3687 3 0.0988 5 0.2563 2 0.276 3 0.1491 2 0.498 7 0.3954 4 0.3556 5 0.2337 9 0.3576 4 0.3743 10 0.2035 4 0.2941 6 0.2077 8 0.1022 8 0.4059 3 0.1968 2 0.2809 5 0.2071 3 0.3104 3 0.4029 2)
Average genome size in population (length): 83.356
Average program size in population (points): 84.356
Average percent parens in population: 0.012
Minimum age in population: 84.49365603774864
Maximum age in population: 89.6980128925099
Average age in population: 87.4234886180968
Median age in population: 87.47776408712787
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.917
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.917
Total error diversity:				 0.128
Error (vector) diversity:			 0.129
Behavioral diversity:				 0.131
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 127239966
--- Timings ---
Current time: 1529615101825 milliseconds
Total Time:         218.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        83.1 seconds, 38.0%
Fitness Testing:    105.6 seconds, 48.3%
Report:              30.0 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
;;******************************
;; -*- Number IO problem report - generation 62
Test total error for best: 11476.5633
Test mean error for best: 5.73828
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction integer_inc} {:instruction integer_max} {:instruction float_max} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_frominteger} {:instruction integer_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_mod} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_dec} {:instruction float_max} {:instruction in2} {:instruction integer_fromfloat} {:instruction float_mod} {:instruction in1} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 96.80697452437909} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction integer_dup_times} {:instruction in1} {:instruction float_mod} {:instruction float_mod} {:instruction float_mult} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction integer_sub} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction tag_float_584} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_mod} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction float_swap} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction integer_div} {:instruction float_flush})
Best program: (float_dup float_swap integer_fromfloat float_yank integer_inc integer_max float_max integer_pop integer_dup_times float_frominteger integer_dec in1 integer_fromfloat float_mod integer_dup_items integer_min integer_dec float_max in2 integer_fromfloat float_mod in1 integer_mod float_yankdup float_swap integer_div in2 float_dup_times float_dup_items 96.80697452437909 integer_sub float_sub integer_div integer_dup_times float_max float_swap integer_dup_times in1 float_mod float_mod float_mult float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult integer_sub float_sub float_add integer_sub float_sub integer_div float_sin float_max tag_float_584 float_mult in1 integer_fromfloat integer_add float_mod float_swap float_dup float_flush float_swap float_swap float_dup float_flush print_integer float_swap float_dup float_flush print_integer integer_div float_flush)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2312.9342180000003
Median total errors in population: 281.16429999999997
Error averages by case: (85.01543929999832 11.164 87.84418000000024 11.32 63.490938299999485 11.124 76.40543629999954 10.106 89.50140720000141 11.259 82.31956580000146 11.213 84.15751319999896 11.184 86.92731069999904 11.309 82.62868970000041 11.147 83.72311150000132 11.377 77.0227830999997 11.238 83.55412230000017 11.389 86.60146869999893 11.181 79.1808522000016 11.19 85.55841430000018 11.411 78.12035300000157 10.224 55.82612919999958 11.164 84.52001549999953 10.181 82.94823709999935 10.135 88.42884249999898 11.296 86.4834324000007 11.259 84.14559189999889 11.232 90.61588180000032 11.256 70.0947247000007 10.855 81.43477730000069 11.171)
Error minima by case: (0.4247 9 0.4241 3 0.3722 2 0.1619 4 0.3687 3 0.0988 5 0.2563 2 0.276 3 0.1491 2 0.498 6 0.3954 4 0.3556 4 0.2337 9 0.3576 4 0.3743 9 0.2035 4 0.2941 8 0.2077 8 0.1022 7 0.4059 3 0.1968 2 0.2809 5 0.2071 3 0.3104 3 0.4029 2)
Average genome size in population (length): 83.047
Average program size in population (points): 84.047
Average percent parens in population: 0.012
Minimum age in population: 85.49365603774864
Maximum age in population: 91.00929236576253
Average age in population: 88.86899125781075
Median age in population: 88.91833864804013
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.919
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.919
Total error diversity:				 0.12
Error (vector) diversity:			 0.122
Behavioral diversity:				 0.124
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 129316861
--- Timings ---
Current time: 1529615105309 milliseconds
Total Time:         222.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        84.5 seconds, 38.0%
Fitness Testing:    107.3 seconds, 48.3%
Report:              30.4 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
;;******************************
;; -*- Number IO problem report - generation 63
Test total error for best: 11494.4613
Test mean error for best: 5.74723
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7
           
Correct output: 101.5758530321 | Program output: 101
          
Correct output: 5.3722386499   | Program output: 5
            
Correct output: 50.838076484   | Program output: 50
           
Correct output: 149.3686745246 | Program output: 149
          
Correct output: -86.0987731432 | Program output: -86
          
Correct output: 99.2563149379  | Program output: 99
           
Correct output: 100.2759538143 | Program output: 100
          
Correct output: 55.8508667649  | Program output: 55
           
Correct output: -120.4980478621 | Program output: -120
         
Correct output: 50.3953926202  | Program output: 50
           
Correct output: -86.6444443408 | Program output: -86
          
Correct output: 43.2337451713  | Program output: 43
           
Correct output: -69.3575988725 | Program output: -69
          
Correct output: -32.3742761841 | Program output: -33
          
Correct output: 21.203493141   | Program output: 21
           
Correct output: 6.2941290036   | Program output: 6
            
Correct output: 28.207733934   | Program output: 28
           
Correct output: 3.102196665    | Program output: 3
            
Correct output: 117.4058715345 | Program output: 117
          
Correct output: 105.1968404292 | Program output: 105
          
Correct output: -95.2809380546 | Program output: -95
          
Correct output: 145.7928624605 | Program output: 145
          
Correct output: 3.3104353754   | Program output: 3
            
Correct output: 60.4029417431  | Program output: 60
           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_dec} {:instruction in1} {:instruction 35.77542359015047} {:instruction float_add} {:instruction float_add} {:instruction float_mult} {:instruction in2} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_min} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_max} {:instruction float_max} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_add} {:instruction float_add} {:instruction float_div} {:instruction float_mod} {:instruction 81} {:instruction integer_max} {:instruction integer_flush} {:instruction 81} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction float_sub} {:instruction float_sin} {:instruction integer_sub} {:instruction float_frominteger} {:instruction float_sub} {:instruction integer_dup_times} {:instruction float_max} {:instruction integer_dup_items} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction integer_pop} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction tagged_562} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction tagged_966} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_sub} {:instruction integer_div} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_shove} {:instruction float_dup_times} {:instruction float_dup} {:instruction float_dup_times} {:instruction tag_float_22} {:instruction float_inc} {:instruction tag_float_321} {:instruction print_newline} {:instruction float_max} {:instruction float_dup_times} {:instruction tag_float_64} {:instruction float_shove} {:instruction float_mult} {:instruction float_dup})
Best program: (integer_pop integer_dec in1 35.77542359015047 float_add float_add float_mult in2 float_frominteger integer_dup_items integer_swap float_min integer_dup_items integer_min integer_max float_max integer_pop integer_dec float_add float_add float_div float_mod 81 integer_max integer_flush 81 float_yankdup float_swap integer_div in2 float_dup_times float_dup_items float_dup_times float_sub float_sin integer_sub float_frominteger float_sub integer_dup_times float_max integer_dup_items float_mod in1 float_mod float_mod in1 float_mod integer_pop in1 integer_flush float_max in2 float_mult tagged_562 float_cos integer_fromfloat float_mult float_mult float_sub tagged_966 integer_sub float_sub integer_div float_sin float_sub integer_div in1 integer_fromfloat integer_add float_swap float_dup float_flush print_integer tag_float_78 float_shove float_dup_times float_dup float_dup_times tag_float_22 float_inc tag_float_321 print_newline float_max float_dup_times tag_float_64 float_shove float_mult float_dup)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2562.9125715
Median total errors in population: 281.16429999999997
Error averages by case: (87.9514598999986 11.15 104.50994639999955 11.368 66.18746059999948 11.144 80.78740389999953 10.147 107.1463248000019 11.326 85.60081840000127 11.237 102.72585239999812 11.18 103.38753059999901 11.327 100.21720750000105 11.193 88.98937200000123 11.41 81.26062229999965 11.249 86.06098560000032 11.412 99.47259839999892 11.202 84.91022560000125 11.257 88.39604040000012 11.392 81.06394830000133 10.243 66.87860139999957 11.164 99.09172649999961 10.218 96.18318609999909 10.15 105.01185529999894 11.322 104.56524090000134 11.301 86.51177619999923 11.26 107.24866270000031 11.295 71.62184030000071 10.891 100.09088500000057 11.203)
Error minima by case: (0.4247 9 0.4241 6 0.3722 2 0.1619 4 0.3687 6 0.0988 5 0.2563 4 0.276 6 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 9 0.3576 4 0.3743 10 0.2035 4 0.2941 9 0.2077 8 0.1022 8 0.4059 6 0.1968 5 0.2809 5 0.2071 6 0.3104 3 0.4029 4)
Average genome size in population (length): 83.639
Average program size in population (points): 84.639
Average percent parens in population: 0.012
Minimum age in population: 87.45115924017199
Maximum age in population: 92.62161987122985
Average age in population: 90.34979583900407
Median age in population: 90.35966363822781
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.921
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.921
Total error diversity:				 0.119
Error (vector) diversity:			 0.122
Behavioral diversity:				 0.125
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 131408567
--- Timings ---
Current time: 1529615108775 milliseconds
Total Time:         225.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        85.8 seconds, 38.0%
Fitness Testing:    109.0 seconds, 48.3%
Report:              30.9 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 64
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 64
;;******************************
;; -*- Number IO problem report - generation 64
Test total error for best: 11475.9327
Test mean error for best: 5.73797
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction tag_float_715} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dup_times} {:instruction tag_float_715} {:instruction integer_stackdepth} {:instruction integer_fromfloat} {:instruction -81} {:instruction integer_dup_times} {:instruction integer_mult} {:instruction integer_rot} {:instruction float_yank} {:instruction float_dup} {:instruction tag_float_715} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction in2} {:instruction float_frominteger} {:instruction integer_dec} {:instruction float_add} {:instruction float_add} {:instruction integer_max} {:instruction float_mod} {:instruction 81} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 96.80697452437909} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_rot} {:instruction float_mod} {:instruction in1} {:instruction float_cos} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction integer_sub} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction tag_float_584} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_mod} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction float_swap} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_shove})
Best program: (float_dup_times tag_float_715 integer_swap float_dec float_dup_times tag_float_715 integer_stackdepth integer_fromfloat -81 integer_dup_times integer_mult integer_rot float_yank float_dup tag_float_715 float_dup_items float_frominteger in2 float_frominteger integer_dec float_add float_add integer_max float_mod 81 float_yankdup float_swap integer_div in2 float_dup_times float_dup_items 96.80697452437909 integer_sub float_sub integer_dup integer_dup_times float_max float_rot float_mod in1 float_cos float_mod in1 float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_cos integer_fromfloat float_mult integer_sub float_sub float_add integer_sub float_sub integer_div float_sin float_max tag_float_584 float_mult in1 integer_fromfloat integer_add float_mod float_swap float_dup float_flush float_swap float_swap float_dup float_flush print_integer tag_float_78 float_shove)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2599.9316265
Median total errors in population: 281.16429999999997
Error averages by case: (95.14987259999846 11.177 100.5659923999992 11.373 74.34976679999932 11.107 85.96458449999885 10.107 102.48535260000217 11.306 92.13221360000179 11.232 99.07180489999794 11.19 99.45156079999907 11.306 94.44093850000127 11.175 95.52985800000202 11.424 85.51624429999909 11.254 93.63956320000098 11.409 99.50416499999892 11.203 89.57237120000153 11.2 95.30138670000063 11.451 87.32837760000147 10.255 70.40326889999957 11.15 97.28647349999957 10.222 97.1752867999989 10.14 97.882163399999 11.328 99.06552830000172 11.306 94.20374249999901 11.267 101.8557845000003 11.314 79.90611000000075 10.843 95.23221590000067 11.178)
Error minima by case: (0.4247 10 0.4241 2 0.3722 2 0.1619 4 0.3687 2 0.0988 5 0.2563 2 0.276 2 0.1491 2 0.498 7 0.3954 4 0.3556 5 0.2337 10 0.3576 4 0.3743 9 0.2035 4 0.2941 9 0.2077 9 0.1022 8 0.4059 2 0.1968 2 0.2809 5 0.2071 2 0.3104 3 0.4029 2)
Average genome size in population (length): 83.392
Average program size in population (points): 84.392
Average percent parens in population: 0.012
Minimum age in population: 89.13932595869223
Maximum age in population: 93.70345876024781
Average age in population: 91.71452684413785
Median age in population: 91.76176144801663
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.914
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.914
Total error diversity:				 0.122
Error (vector) diversity:			 0.124
Behavioral diversity:				 0.127
--- Run Statistics ---
Number of program evaluations used so far: 65000
Number of point (instruction) evaluations so far: 133494053
--- Timings ---
Current time: 1529615112226 milliseconds
Total Time:         229.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        87.1 seconds, 38.0%
Fitness Testing:    110.6 seconds, 48.3%
Report:              31.3 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 65
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 65
;;******************************
;; -*- Number IO problem report - generation 65
Test total error for best: 11472.533300000005
Test mean error for best: 5.73627
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction tag_float_715} {:instruction integer_swap} {:instruction integer_pop} {:instruction tag_float_715} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction integer_yank} {:instruction integer_swap} {:instruction float_frominteger} {:instruction in2} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction integer_dec} {:instruction float_min} {:instruction integer_dup_items} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 94.56699356481795} {:instruction integer_sub} {:instruction float_sub} {:instruction print_integer} {:instruction integer_dec} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_dup_times} {:instruction float_max} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction tag_float_518} {:instruction tagged_588} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_swap} {:instruction float_dup} {:instruction print_integer} {:instruction print_integer} {:instruction float_swap} {:instruction float_dup} {:instruction float_shove} {:instruction print_integer} {:instruction float_dup} {:instruction float_sin} {:instruction integer_stackdepth})
Best program: (integer_pop tag_float_715 integer_swap integer_pop tag_float_715 float_swap integer_fromfloat integer_pop integer_yank integer_swap float_frominteger in2 float_frominteger integer_dup_items integer_dec float_min integer_dup_items in2 float_dup_times float_dup_items 94.56699356481795 integer_sub float_sub print_integer integer_dec float_max float_swap float_mod in1 float_mod float_dup_times float_max float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_sub integer_div float_sin float_max tag_float_518 tagged_588 in1 integer_fromfloat integer_add float_swap float_swap float_dup print_integer print_integer float_swap float_dup float_shove print_integer float_dup float_sin integer_stackdepth)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2635.5587966000007
Median total errors in population: 281.16429999999997
Error averages by case: (98.82596899999848 11.193 104.43867789999933 11.408 68.15948399999941 11.14 87.239312899999 10.138 107.23978960000204 11.359 95.14801600000177 11.27 103.27565699999798 11.234 104.59042129999904 11.367 97.16908020000115 11.204 97.81336000000168 11.435 87.73335119999925 11.284 97.0106968000007 11.435 96.39206069999894 11.207 88.87387440000154 11.24 98.57600680000033 11.469 91.10382250000151 10.268 68.99232189999958 11.185 94.87245119999956 10.222 88.09154679999934 10.183 102.44761519999896 11.376 102.06965260000152 11.337 97.25689979999912 11.282 105.7980366000003 11.344 76.76934720000068 10.873 97.98234500000069 11.236)
Error minima by case: (0.4247 10 0.4241 6 0.3722 2 0.1619 4 0.3687 6 0.0988 5 0.2563 4 0.276 6 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 9 0.3576 4 0.3743 9 0.2035 4 0.2941 9 0.2077 9 0.1022 8 0.4059 6 0.1968 5 0.2809 5 0.2071 6 0.3104 3 0.4029 4)
Average genome size in population (length): 83.125
Average program size in population (points): 84.125
Average percent parens in population: 0.012
Minimum age in population: 90.1978691364816
Maximum age in population: 95.0404456055369
Average age in population: 93.14567601871785
Median age in population: 93.1833499749334
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.911
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.911
Total error diversity:				 0.134
Error (vector) diversity:			 0.137
Behavioral diversity:				 0.142
--- Run Statistics ---
Number of program evaluations used so far: 66000
Number of point (instruction) evaluations so far: 135572856
--- Timings ---
Current time: 1529615115659 milliseconds
Total Time:         232.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        88.4 seconds, 38.0%
Fitness Testing:    112.3 seconds, 48.3%
Report:              31.8 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 65
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 66
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 66
;;******************************
;; -*- Number IO problem report - generation 66
Test total error for best: 11480.245100000002
Test mean error for best: 5.74012
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_dec} {:instruction in1} {:instruction 35.77542359015047} {:instruction float_add} {:instruction float_add} {:instruction integer_dec} {:instruction integer_sub} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_min} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_max} {:instruction float_max} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_add} {:instruction float_add} {:instruction float_div} {:instruction float_mod} {:instruction 81} {:instruction integer_max} {:instruction integer_flush} {:instruction 81} {:instruction float_yankdup} {:instruction float_sin} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 96.80697452437909} {:instruction integer_sub} {:instruction float_sub} {:instruction float_max} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_dec} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction in1} {:instruction float_mult} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_max} {:instruction integer_div} {:instruction float_sin} {:instruction integer_yank} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction float_flush})
Best program: (integer_pop integer_dec in1 35.77542359015047 float_add float_add integer_dec integer_sub float_frominteger integer_dup_items integer_swap float_min integer_dup_items integer_min integer_max float_max integer_pop integer_dec float_add float_add float_div float_mod 81 integer_max integer_flush 81 float_yankdup float_sin integer_div in2 float_dup_times float_dup_items 96.80697452437909 integer_sub float_sub float_max integer_dup_times float_max float_swap float_mod in1 float_mod in1 float_dec float_max in2 float_mult float_mult float_cos integer_fromfloat in1 float_mult integer_sub float_add integer_sub integer_max integer_div float_sin integer_yank tag_float_518 float_mult in1 integer_fromfloat integer_add float_swap float_swap float_dup float_flush print_integer float_swap float_dup float_flush float_flush)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2286.8080176999997
Median total errors in population: 281.16429999999997
Error averages by case: (77.23415869999869 11.147 93.39057760000038 11.324 56.00924419999974 11.134 69.07987990000045 10.11 95.40950640000088 11.285 76.22818960000053 11.225 89.12126709999922 11.164 92.15601599999916 11.309 86.84510150000008 11.152 79.4753200000005 11.391 69.76901660000048 11.23 76.62265159999971 11.402 90.45175259999893 11.211 73.12995360000124 11.229 77.7951632999994 11.386 70.48032300000132 10.228 59.35175569999956 11.16 87.99733529999952 10.21 84.41037820000001 10.111 93.77235069999908 11.292 92.99862560000058 11.267 76.71311329999934 11.249 95.8858230000003 11.255 62.400766400000485 10.857 83.57374780000063 11.178)
Error minima by case: (0.4247 10 0.4241 5 0.3722 2 0.1619 4 0.3687 5 0.0988 5 0.2563 4 0.276 5 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 10 0.3576 4 0.3743 10 0.2035 4 0.2941 9 0.2077 9 0.1022 7 0.4059 5 0.1968 4 0.2809 5 0.2071 5 0.3104 3 0.4029 4)
Average genome size in population (length): 82.537
Average program size in population (points): 83.537
Average percent parens in population: 0.012
Minimum age in population: 91.1978691364816
Maximum age in population: 96.24980801029112
Average age in population: 94.55511005543977
Median age in population: 94.62316102836292
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.923
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.923
Total error diversity:				 0.124
Error (vector) diversity:			 0.126
Behavioral diversity:				 0.13
--- Run Statistics ---
Number of program evaluations used so far: 67000
Number of point (instruction) evaluations so far: 137637113
--- Timings ---
Current time: 1529615119107 milliseconds
Total Time:         236.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        89.8 seconds, 38.0%
Fitness Testing:    114.0 seconds, 48.3%
Report:              32.2 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 66
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 67
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 67
;;******************************
;; -*- Number IO problem report - generation 67
Test total error for best: 11475.9327
Test mean error for best: 5.73797
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction tag_float_715} {:instruction integer_swap} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction tag_float_715} {:instruction integer_swap} {:instruction integer_dec} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_frominteger} {:instruction print_integer} {:instruction float_add} {:instruction float_add} {:instruction float_max} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_frominteger} {:instruction integer_dec} {:instruction in1} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 96.80697452437909} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_mod} {:instruction float_mult} {:instruction float_mod} {:instruction in1} {:instruction integer_stackdepth} {:instruction float_max} {:instruction integer_dup} {:instruction tag_integer_385} {:instruction in1} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction float_add} {:instruction float_mod} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction print_integer} {:instruction tag_float_22} {:instruction integer_dup} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction integer_stackdepth})
Best program: (integer_pop tag_float_715 integer_swap float_frominteger integer_stackdepth integer_fromfloat integer_fromfloat integer_pop tag_float_715 integer_swap integer_dec integer_pop integer_dup_times float_frominteger print_integer float_add float_add float_max integer_pop integer_dup_times float_frominteger integer_dec in1 float_yankdup float_swap integer_div in2 float_dup_times float_dup_items 96.80697452437909 integer_sub float_sub integer_div integer_dup_times float_max float_swap float_mod in1 float_mod float_mod float_mult float_mod in1 integer_stackdepth float_max integer_dup tag_integer_385 in1 float_mod float_mod in1 float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_sub float_add float_mod float_sub float_add integer_sub float_sub integer_div float_sin float_max tag_float_518 float_mult in1 integer_fromfloat integer_add float_swap print_integer tag_float_22 integer_dup print_integer float_swap float_sin integer_stackdepth)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2356.0084810000008
Median total errors in population: 281.16429999999997
Error averages by case: (81.99726709999855 11.142 90.9042865 11.319 64.53267169999955 11.134 78.5859091999994 10.098 92.13259930000127 11.26 81.53578240000112 11.206 89.74604539999872 11.183 89.68024859999919 11.296 87.77640340000048 11.153 83.63479800000101 11.352 78.80609299999962 11.233 81.74531760000013 11.358 90.17386529999887 11.186 77.69631760000141 11.194 82.66605719999981 11.358 79.15942160000148 10.206 66.04837789999952 11.135 89.11670549999948 10.184 84.4417865999996 10.125 90.50968109999911 11.274 90.641536600001 11.255 83.10932679999921 11.209 92.37980350000032 11.249 68.73516850000051 10.875 84.09601060000071 11.173)
Error minima by case: (0.4247 10 0.4241 5 0.3722 4 0.1619 5 0.3687 5 0.0988 5 0.2563 4 0.276 5 0.1491 4 0.498 6 0.3954 5 0.3556 5 0.2337 10 0.3576 3 0.3743 10 0.2035 5 0.2941 9 0.2077 8 0.1022 8 0.4059 5 0.1968 4 0.2809 5 0.2071 5 0.3104 5 0.4029 4)
Average genome size in population (length): 82.702
Average program size in population (points): 83.702
Average percent parens in population: 0.012
Minimum age in population: 92.96338169854127
Maximum age in population: 97.86047351903784
Average age in population: 95.9850112640721
Median age in population: 96.00856946221928
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.91
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.91
Total error diversity:				 0.117
Error (vector) diversity:			 0.118
Behavioral diversity:				 0.12
--- Run Statistics ---
Number of program evaluations used so far: 68000
Number of point (instruction) evaluations so far: 139705659
--- Timings ---
Current time: 1529615122599 milliseconds
Total Time:         239.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        91.1 seconds, 38.0%
Fitness Testing:    115.7 seconds, 48.3%
Report:              32.6 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 67
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 68
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 68
;;******************************
;; -*- Number IO problem report - generation 68
Test total error for best: 11475.9327
Test mean error for best: 5.73797
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction integer_fromfloat} {:instruction float_min} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_max} {:instruction float_max} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_add} {:instruction integer_max} {:instruction float_mod} {:instruction 81} {:instruction float_yankdup} {:instruction integer_pop} {:instruction float_pop} {:instruction print_integer} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction integer_mult} {:instruction integer_sub} {:instruction integer_inc} {:instruction float_add} {:instruction integer_max} {:instruction in1} {:instruction float_add} {:instruction integer_max} {:instruction float_mod} {:instruction float_yankdup} {:instruction float_inc} {:instruction print_integer} {:instruction integer_div} {:instruction 87.35510492351582} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_swap} {:instruction integer_div} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_sub} {:instruction integer_div} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_mod} {:instruction -53.070917232121495} {:instruction float_mod} {:instruction integer_dup_times} {:instruction float_tan} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction tag_float_518} {:instruction float_mult} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_mod} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction print_integer} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_shove} {:instruction integer_pop} {:instruction integer_rot} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_321} {:instruction integer_pop} {:instruction tag_float_22})
Best program: (integer_dup_items integer_fromfloat float_min integer_dup_items integer_min integer_max float_max integer_div integer_dup_times float_add integer_max float_mod 81 float_yankdup integer_pop float_pop print_integer integer_dup_times float_dup_items integer_mult integer_sub integer_inc float_add integer_max in1 float_add integer_max float_mod float_yankdup float_inc print_integer integer_div 87.35510492351582 float_swap integer_div in2 float_dup_times float_swap integer_div integer_flush float_dup_times float_sub integer_div float_swap float_mod in1 float_mod float_mod -53.070917232121495 float_mod integer_dup_times float_tan float_swap float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_sub integer_div float_sin float_max tag_float_518 float_mult tag_float_518 float_mult in1 integer_fromfloat integer_add float_mod float_swap float_dup float_flush print_integer float_swap print_integer float_swap float_dup float_flush print_integer tag_float_78 float_shove integer_pop integer_rot float_shove float_dup_times tag_float_321 integer_pop tag_float_22)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 98
Size: 99
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2685.6640580000003
Median total errors in population: 281.16429999999997
Error averages by case: (102.01450029999859 11.175 103.56632629999983 11.359 75.9714732999993 11.121 91.64188179999896 10.103 104.06206960000146 11.298 97.55025840000168 11.238 100.58735999999865 11.188 100.73132659999914 11.319 99.85583330000084 11.181 99.58985000000158 11.426 91.17546259999908 11.261 98.44259300000064 11.414 101.99103949999885 11.209 93.1816390000014 11.221 102.60278810000032 11.431 92.21002180000144 10.248 72.38512149999957 11.173 100.10021379999955 10.23 96.8734138999992 10.154 101.53637189999912 11.326 100.50287930000106 11.294 98.73951449999916 11.269 103.53632660000028 11.287 83.20663590000076 10.849 96.65215700000059 11.183)
Error minima by case: (0.4247 9 0.4241 4 0.3722 2 0.1619 4 0.3687 4 0.0988 5 0.2563 4 0.276 4 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 9 0.3576 4 0.3743 9 0.2035 4 0.2941 9 0.2077 9 0.1022 8 0.4059 4 0.1968 3 0.2809 5 0.2071 4 0.3104 3 0.4029 3)
Average genome size in population (length): 82.565
Average program size in population (points): 83.565
Average percent parens in population: 0.012
Minimum age in population: 95.06661449383934
Maximum age in population: 99.40812843600143
Average age in population: 97.39796557114225
Median age in population: 97.40535871693181
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.916
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.916
Total error diversity:				 0.13
Error (vector) diversity:			 0.134
Behavioral diversity:				 0.139
--- Run Statistics ---
Number of program evaluations used so far: 69000
Number of point (instruction) evaluations so far: 141770965
--- Timings ---
Current time: 1529615126109 milliseconds
Total Time:         243.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        92.4 seconds, 38.0%
Fitness Testing:    117.4 seconds, 48.3%
Report:              33.0 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 68
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 69
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 69
;;******************************
;; -*- Number IO problem report - generation 69
Test total error for best: 11481.5633
Test mean error for best: 5.74078
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_dup} {:instruction float_swap} {:instruction float_div} {:instruction float_yank} {:instruction integer_inc} {:instruction integer_max} {:instruction tag_float_715} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_frominteger} {:instruction integer_pop} {:instruction in1} {:instruction integer_rot} {:instruction float_add} {:instruction float_add} {:instruction integer_max} {:instruction float_max} {:instruction -31} {:instruction float_mod} {:instruction 81} {:instruction integer_max} {:instruction integer_flush} {:instruction 82} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 96.80697452437909} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_dec} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction in1} {:instruction float_mult} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_max} {:instruction integer_div} {:instruction float_sin} {:instruction integer_yank} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction print_integer} {:instruction print_integer} {:instruction float_rot} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_add} {:instruction float_shove} {:instruction float_mod} {:instruction float_rot})
Best program: (integer_sub float_dup float_swap float_div float_yank integer_inc integer_max tag_float_715 float_swap integer_fromfloat integer_pop integer_dup_times float_frominteger integer_pop in1 integer_rot float_add float_add integer_max float_max -31 float_mod 81 integer_max integer_flush 82 float_yankdup float_swap integer_div in2 float_dup_times float_dup_items 96.80697452437909 integer_sub float_sub integer_div integer_dup_times float_max float_swap float_mod in1 float_mod in1 float_dec float_max in2 float_mult float_mult float_cos integer_fromfloat in1 float_mult integer_sub float_add integer_sub integer_max integer_div float_sin integer_yank tag_float_518 float_mult in1 integer_fromfloat integer_add float_swap float_swap float_dup float_flush print_integer print_integer print_integer float_rot integer_yank integer_fromfloat float_add float_shove float_mod float_rot)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2236.071431400001
Median total errors in population: 281.16429999999997
Error averages by case: (82.73776179999867 11.165 83.95404420000004 11.347 61.44298159999931 11.14 71.90391720000008 10.135 86.81603330000117 11.299 78.8935340000011 11.228 82.15187319999907 11.152 83.85766679999921 11.29 79.28379050000032 11.161 81.61389400000104 11.399 71.91930070000026 11.259 79.92045320000024 11.415 84.49989139999897 11.196 75.5885104000013 11.238 81.85858199999997 11.412 74.28941380000133 10.241 56.18089389999954 11.141 82.53091699999952 10.207 79.68857969999965 10.128 84.70991159999913 11.304 83.78062570000071 11.269 80.1241244999993 11.259 86.98082540000033 11.277 67.98325120000062 10.866 76.62765430000061 11.205)
Error minima by case: (0.4247 10 0.4241 5 0.3722 2 0.1619 4 0.3687 5 0.0988 5 0.2563 4 0.276 5 0.1491 4 0.498 6 0.3954 4 0.3556 5 0.2337 9 0.3576 3 0.3743 10 0.2035 4 0.2941 9 0.2077 8 0.1022 7 0.4059 5 0.1968 3 0.2809 5 0.2071 5 0.3104 3 0.4029 4)
Average genome size in population (length): 81.952
Average program size in population (points): 82.952
Average percent parens in population: 0.012
Minimum age in population: 96.37893733645737
Maximum age in population: 100.7649750790471
Average age in population: 98.82230363922125
Median age in population: 98.86086117071872
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.91
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.91
Total error diversity:				 0.126
Error (vector) diversity:			 0.128
Behavioral diversity:				 0.133
--- Run Statistics ---
Number of program evaluations used so far: 70000
Number of point (instruction) evaluations so far: 143821202
--- Timings ---
Current time: 1529615129529 milliseconds
Total Time:         246.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        93.8 seconds, 38.0%
Fitness Testing:    119.0 seconds, 48.3%
Report:              33.6 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 69
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 70
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 70
;;******************************
;; -*- Number IO problem report - generation 70
Test total error for best: 11476.5183
Test mean error for best: 5.73826
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction tag_float_715} {:instruction integer_swap} {:instruction tagged_627} {:instruction in2} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_pop} {:instruction integer_pop} {:instruction float_max} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_add} {:instruction float_mod} {:instruction float_div} {:instruction integer_dup_items} {:instruction in2} {:instruction float_frominteger} {:instruction integer_add} {:instruction integer_swap} {:instruction float_min} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_max} {:instruction integer_sub} {:instruction float_yank} {:instruction integer_max} {:instruction float_max} {:instruction integer_dec} {:instruction in1} {:instruction float_inc} {:instruction print_integer} {:instruction integer_div} {:instruction 87.35510492351582} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_swap} {:instruction integer_div} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_mod} {:instruction float_mult} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_mod} {:instruction float_mod} {:instruction -53.070917232121495} {:instruction integer_fromfloat} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction integer_max} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction tag_float_518} {:instruction integer_sub} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction integer_max} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction float_dup} {:instruction float_shove} {:instruction float_inc} {:instruction float_cos} {:instruction 21} {:instruction integer_stackdepth})
Best program: (integer_pop tag_float_715 integer_swap tagged_627 in2 float_frominteger integer_dup_items integer_swap integer_pop integer_pop float_max integer_pop integer_dup_times integer_add float_mod float_div integer_dup_items in2 float_frominteger integer_add integer_swap float_min integer_dup_items integer_min integer_max integer_sub float_yank integer_max float_max integer_dec in1 float_inc print_integer integer_div 87.35510492351582 float_swap integer_div in2 float_dup_times float_swap integer_div float_swap float_mod in1 float_mod float_mod float_mult float_mod in1 integer_flush float_mod float_mod -53.070917232121495 integer_fromfloat in1 integer_flush float_max in2 integer_max float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_sub integer_div float_sin float_max tag_float_518 integer_sub tag_float_518 float_mult in1 integer_fromfloat integer_add float_swap integer_max float_dup float_flush print_integer float_swap float_dup float_shove float_inc float_cos 21 integer_stackdepth)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 90
Size: 91
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2774.2201328000006
Median total errors in population: 281.16429999999997
Error averages by case: (93.94251099999869 11.172 113.57942569999975 11.413 76.80950399999942 11.15 86.64665039999952 10.131 115.71418800000166 11.345 88.97508460000104 11.26 110.36657349999854 11.245 113.60999339999904 11.374 110.33953200000077 11.211 91.38682790000111 11.438 87.09031299999947 11.268 90.09256660000014 11.427 115.86302779999896 11.232 87.77935940000118 11.233 94.0817596000002 11.422 87.99064180000127 10.265 87.1477897999996 11.148 113.84597899999959 10.248 112.92753169999905 10.129 114.07520309999902 11.373 113.18628010000108 11.357 90.4857804999992 11.268 114.2418584000003 11.356 81.27809220000067 10.871 105.20965930000055 11.218)
Error minima by case: (0.4247 10 0.4241 6 0.3722 2 0.1619 4 0.3687 6 0.0988 5 0.2563 4 0.276 6 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 9 0.3576 4 0.3743 10 0.2035 4 0.2941 9 0.2077 8 0.1022 7 0.4059 6 0.1968 5 0.2809 5 0.2071 6 0.3104 3 0.4029 4)
Average genome size in population (length): 81.606
Average program size in population (points): 82.606
Average percent parens in population: 0.012
Minimum age in population: 97.37893733645737
Maximum age in population: 102.2016068556746
Average age in population: 100.2743817334857
Median age in population: 100.3483321977583
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.933
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.933
Total error diversity:				 0.127
Error (vector) diversity:			 0.13
Behavioral diversity:				 0.136
--- Run Statistics ---
Number of program evaluations used so far: 71000
Number of point (instruction) evaluations so far: 145863023
--- Timings ---
Current time: 1529615132965 milliseconds
Total Time:         249.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        95.1 seconds, 38.1%
Fitness Testing:    120.7 seconds, 48.3%
Report:              34.0 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 70
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 71
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 71
;;******************************
;; -*- Number IO problem report - generation 71
Test total error for best: 11475.9327
Test mean error for best: 5.73797
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_min} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_swap} {:instruction float_frominteger} {:instruction in2} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_swap} {:instruction float_min} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction float_dup_times} {:instruction integer_dec} {:instruction in1} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction float_cos} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_mod} {:instruction float_mod} {:instruction float_stackdepth} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_sin} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_sub} {:instruction print_integer} {:instruction tagged_892} {:instruction float_inc} {:instruction print_integer} {:instruction float_flush} {:instruction float_dup_times} {:instruction tag_float_257} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_321} {:instruction float_pop} {:instruction tag_float_22} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_dec} {:instruction integer_stackdepth})
Best program: (integer_dup_items integer_yank integer_dup_times float_max float_dup_times float_min integer_dup_items integer_min integer_pop integer_dup_times integer_swap float_frominteger in2 float_frominteger float_pop integer_swap float_min integer_dup_times float_max float_swap float_dup_times integer_dec in1 float_yankdup integer_yankdup float_cos in2 float_dup_times float_dup_items float_mod float_mod float_stackdepth float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_sub integer_div float_sin float_sin tag_float_518 float_mult in1 integer_fromfloat integer_add float_sub print_integer tagged_892 float_inc print_integer float_flush float_dup_times tag_float_257 print_integer tag_float_78 float_shove float_dup_times tag_float_22 float_shove float_dup_times tag_float_321 float_pop tag_float_22 print_integer integer_yank integer_dec integer_stackdepth)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2354.9786178000004
Median total errors in population: 281.16429999999997
Error averages by case: (79.33665269999864 11.16 94.25815960000007 11.352 59.0088777999994 11.099 72.20020120000012 10.114 96.69832970000131 11.299 77.31452200000066 11.211 95.89216779999876 11.18 93.94230089999908 11.316 90.8385778000004 11.159 80.61036400000077 11.369 72.6670816000002 11.232 78.25191879999964 11.372 93.81003279999887 11.196 76.17144400000137 11.217 79.7302749999995 11.415 72.61801100000136 10.233 65.45553889999957 11.166 90.72214819999952 10.192 88.4015309999997 10.147 95.73716199999902 11.321 96.26051430000071 11.26 78.69130429999919 11.244 97.9345008000003 11.285 64.27966600000063 10.868 87.55033560000064 11.19)
Error minima by case: (0.4247 10 0.4241 5 0.3722 2 0.1619 4 0.3687 5 0.0988 5 0.2563 4 0.276 5 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 9 0.3576 4 0.3743 10 0.2035 4 0.2941 10 0.2077 8 0.1022 8 0.4059 5 0.1968 4 0.2809 5 0.2071 5 0.3104 3 0.4029 4)
Average genome size in population (length): 81.698
Average program size in population (points): 82.698
Average percent parens in population: 0.012
Minimum age in population: 99.14239505182572
Maximum age in population: 103.6047081929622
Average age in population: 101.6627145905525
Median age in population: 101.7317931799812
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.914
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.914
Total error diversity:				 0.117
Error (vector) diversity:			 0.117
Behavioral diversity:				 0.12
--- Run Statistics ---
Number of program evaluations used so far: 72000
Number of point (instruction) evaluations so far: 147906962
--- Timings ---
Current time: 1529615136398 milliseconds
Total Time:         253.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        96.4 seconds, 38.0%
Fitness Testing:    122.4 seconds, 48.3%
Report:              34.5 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 71
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 72
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 72
;;******************************
;; -*- Number IO problem report - generation 72
Test total error for best: 11475.3013
Test mean error for best: 5.73765
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_dup} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction float_tan} {:instruction integer_max} {:instruction float_dup_items} {:instruction integer_fromfloat} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_mod} {:instruction in1} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 96.80697452437909} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_dup} {:instruction integer_dup_times} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_mult} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction integer_mod} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yank} {:instruction float_swap} {:instruction float_dup} {:instruction print_integer} {:instruction print_integer} {:instruction float_dup} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction tag_integer_335} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction float_rot} {:instruction integer_yank} {:instruction float_dup_times} {:instruction tag_float_78} {:instruction integer_min} {:instruction float_mod} {:instruction float_rot})
Best program: (integer_sub float_dup float_swap integer_fromfloat float_yank float_tan integer_max float_dup_items integer_fromfloat integer_dup_items integer_swap float_min integer_dup_items float_mod in1 integer_mod float_yankdup float_swap integer_div in2 float_dup_times float_dup_items 96.80697452437909 integer_sub float_sub integer_div integer_dup_times float_max float_dup integer_dup_times in1 float_inc float_mod float_mult float_mod in1 integer_flush float_max in2 float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_sub integer_div float_sin integer_mod tag_float_518 float_mult in1 integer_fromfloat integer_add integer_yank float_swap float_dup print_integer print_integer float_dup float_dup float_flush print_integer tag_integer_335 integer_yankdup integer_add float_swap float_dup float_flush print_integer float_rot integer_yank float_dup_times tag_float_78 integer_min float_mod float_rot)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2676.1806666000007
Median total errors in population: 281.16429999999997
Error averages by case: (97.19737859999853 11.171 104.15226839999933 11.355 73.72834329999928 11.124 89.79814899999899 10.108 106.84086460000206 11.294 96.232905200002 11.239 101.08290269999807 11.195 103.69902059999906 11.309 99.5940940000013 11.18 98.55984600000198 11.412 90.1731153999991 11.249 96.50614080000089 11.408 102.57791579999895 11.19 93.68223200000142 11.213 98.59264930000072 11.426 90.40424600000149 10.249 71.51154609999959 11.163 100.28742719999958 10.196 95.4017148999989 10.139 104.80640299999902 11.317 103.33400450000147 11.297 97.0411469999991 11.258 107.6794790000003 11.287 78.59988210000076 10.859 97.86199110000057 11.197)
Error minima by case: (0.4247 10 0.4241 6 0.3722 2 0.1619 4 0.3687 6 0.0988 5 0.2563 4 0.276 6 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 9 0.3576 4 0.3743 10 0.2035 4 0.2941 10 0.2077 8 0.1022 8 0.4059 6 0.1968 5 0.2809 5 0.2071 6 0.3104 3 0.4029 4)
Average genome size in population (length): 82.159
Average program size in population (points): 83.159
Average percent parens in population: 0.012
Minimum age in population: 100.1423950518257
Maximum age in population: 105.0146044635729
Average age in population: 103.0980883035991
Median age in population: 103.1711668363594
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.903
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.903
Total error diversity:				 0.111
Error (vector) diversity:			 0.114
Behavioral diversity:				 0.117
--- Run Statistics ---
Number of program evaluations used so far: 73000
Number of point (instruction) evaluations so far: 149962876
--- Timings ---
Current time: 1529615139827 milliseconds
Total Time:         256.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        97.7 seconds, 38.1%
Fitness Testing:    124.0 seconds, 48.3%
Report:              34.9 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 72
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 73
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 73
;;******************************
;; -*- Number IO problem report - generation 73
Test total error for best: 11473.9649
Test mean error for best: 5.73698
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction tag_float_715} {:instruction integer_swap} {:instruction float_frominteger} {:instruction float_min} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction integer_min} {:instruction integer_max} {:instruction float_max} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_add} {:instruction tagged_677} {:instruction in1} {:instruction integer_swap} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 96.80697452437909} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction integer_mod} {:instruction float_yank} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction integer_dup_times} {:instruction float_mod} {:instruction integer_dup_times} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction float_dup_times} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_84})
Best program: (integer_pop tag_float_715 integer_swap float_frominteger float_min integer_dup_items integer_flush integer_min integer_max float_max integer_pop integer_dup_times float_add tagged_677 in1 integer_swap float_swap integer_div in2 float_dup_times float_dup_items 96.80697452437909 integer_sub float_sub integer_div integer_mod float_yank float_mod float_mod in1 integer_flush float_max in2 float_mult integer_dup_times float_mod integer_dup_times float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_sub integer_div float_sin float_max tag_float_518 float_mult in1 integer_fromfloat integer_add float_swap float_swap float_dup float_flush print_integer float_dup_items float_dup float_flush print_integer float_dup_times tag_float_22 float_shove float_dup_times tag_float_84)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2459.1653961000015
Median total errors in population: 281.16429999999997
Error averages by case: (80.10214049999867 11.143 103.10023279999956 11.327 61.032149499999676 11.112 74.63135269999994 10.093 106.69736380000188 11.288 79.77788700000114 11.2 99.15246559999835 11.193 103.00499499999896 11.31 97.51108330000106 11.162 83.00882390000113 11.35 75.02226020000012 11.215 80.84747820000032 11.362 99.31249949999886 11.179 77.26164420000117 11.2 81.39114510000007 11.376 75.55589080000124 10.21 65.55131609999954 11.131 97.05736759999952 10.188 90.5141749999994 10.126 103.0180986999989 11.314 102.24785820000129 11.285 81.3287242999993 11.223 105.09725130000032 11.285 65.48731350000047 10.867 95.11687930000068 11.198)
Error minima by case: (0.4247 9 0.4241 5 0.3722 2 0.1619 4 0.3687 5 0.0988 5 0.2563 4 0.276 5 0.1491 4 0.498 6 0.3954 4 0.3556 5 0.2337 8 0.3576 3 0.3743 9 0.2035 4 0.2941 9 0.2077 8 0.1022 7 0.4059 5 0.1968 4 0.2809 5 0.2071 5 0.3104 3 0.4029 4)
Average genome size in population (length): 82.686
Average program size in population (points): 83.686
Average percent parens in population: 0.012
Minimum age in population: 101.8398891942197
Maximum age in population: 106.5473295761049
Average age in population: 104.5235926098967
Median age in population: 104.5670700868791
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.926
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.926
Total error diversity:				 0.125
Error (vector) diversity:			 0.127
Behavioral diversity:				 0.13
--- Run Statistics ---
Number of program evaluations used so far: 74000
Number of point (instruction) evaluations so far: 152031943
--- Timings ---
Current time: 1529615143237 milliseconds
Total Time:         260.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        99.0 seconds, 38.1%
Fitness Testing:    125.7 seconds, 48.3%
Report:              35.4 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 73
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 74
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 74
;;******************************
;; -*- Number IO problem report - generation 74
Test total error for best: 11473.9649
Test mean error for best: 5.73698
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction tag_float_715} {:instruction float_frominteger} {:instruction float_yank} {:instruction integer_div} {:instruction float_rot} {:instruction integer_pop} {:instruction tag_float_715} {:instruction float_min} {:instruction in2} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_max} {:instruction float_cos} {:instruction integer_dup_items} {:instruction integer_fromfloat} {:instruction float_mod} {:instruction in1} {:instruction integer_mod} {:instruction integer_add} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction integer_rot} {:instruction 96.80697452437909} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_dup_times} {:instruction float_mod} {:instruction float_mod} {:instruction float_mult} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_add} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction integer_yank} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_flush} {:instruction float_dec} {:instruction float_flush} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_321} {:instruction print_integer} {:instruction float_min} {:instruction float_shove} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction integer_stackdepth})
Best program: (integer_pop tag_float_715 float_frominteger float_yank integer_div float_rot integer_pop tag_float_715 float_min in2 float_frominteger integer_dup_items integer_swap integer_max float_cos integer_dup_items integer_fromfloat float_mod in1 integer_mod integer_add float_swap integer_div in2 float_dup_times integer_rot 96.80697452437909 integer_sub float_sub integer_div integer_dup_times integer_fromfloat float_swap integer_dup_times float_mod float_mod float_mult float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_add integer_sub float_add integer_sub float_sub integer_div float_sin integer_yank tag_float_518 float_mult in1 integer_fromfloat integer_add float_swap float_swap float_dup float_flush print_integer float_dup_times float_shove float_flush float_dec float_flush print_integer tag_float_78 float_shove float_dup_times tag_float_22 float_shove float_dup_times tag_float_321 print_integer float_min float_shove print_integer float_swap float_sin integer_stackdepth)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 85
Size: 86
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2258.492286100001
Median total errors in population: 281.16429999999997
Error averages by case: (75.93498349999867 11.142 90.4296010000002 11.311 54.27275639999967 11.077 64.59978980000061 10.071 92.40818390000118 11.242 74.46666620000056 11.17 87.41385759999943 11.161 90.4525688999992 11.263 85.44517460000013 11.134 76.8285752000005 11.326 64.94326290000065 11.186 76.25438659999966 11.326 94.87933849999892 11.157 73.15318920000126 11.152 76.31352109999949 11.382 65.37070080000117 10.184 62.11726469999953 11.141 93.80810929999949 10.189 91.9917457999994 10.14 90.11489239999914 11.279 89.43065890000064 11.25 76.41335089999922 11.181 92.5709176000003 11.252 58.8076841000005 10.843 84.3651062000006 11.147)
Error minima by case: (0.4247 9 0.4241 5 0.3722 2 0.1619 4 0.3687 5 0.0988 5 0.2563 4 0.276 5 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 9 0.3576 4 0.3743 10 0.2035 4 0.2941 9 0.2077 9 0.1022 8 0.4059 5 0.1968 4 0.2809 5 0.2071 5 0.3104 3 0.4029 4)
Average genome size in population (length): 82.201
Average program size in population (points): 83.201
Average percent parens in population: 0.012
Minimum age in population: 103.3608418285589
Maximum age in population: 107.7522977785553
Average age in population: 105.9883126576899
Median age in population: 106.0443041389435
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.912
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.912
Total error diversity:				 0.118
Error (vector) diversity:			 0.12
Behavioral diversity:				 0.123
--- Run Statistics ---
Number of program evaluations used so far: 75000
Number of point (instruction) evaluations so far: 154088832
--- Timings ---
Current time: 1529615146685 milliseconds
Total Time:         263.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       100.3 seconds, 38.1%
Fitness Testing:    127.4 seconds, 48.3%
Report:              35.8 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 74
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 75
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 75
;;******************************
;; -*- Number IO problem report - generation 75
Test total error for best: 11473.9649
Test mean error for best: 5.73698
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tagged_602} {:instruction tag_float_715} {:instruction float_sin} {:instruction float_frominteger} {:instruction in2} {:instruction float_frominteger} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction float_min} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_max} {:instruction integer_sub} {:instruction float_yank} {:instruction integer_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction in1} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_dec} {:instruction float_min} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 94.56699356481795} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction integer_dec} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_div} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction 49.98180337132831} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction tag_float_112} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_78} {:instruction float_shove} {:instruction float_dup_times})
Best program: (tagged_602 tag_float_715 float_sin float_frominteger in2 float_frominteger integer_yankdup integer_swap float_min integer_dup_items integer_min integer_max integer_sub float_yank integer_max float_frominteger float_pop in1 float_inc integer_dup_items integer_dec float_min integer_div in2 float_dup_times float_dup_items 94.56699356481795 integer_sub float_sub integer_div integer_dec float_max float_swap float_mod in1 float_mod float_stackdepth float_max float_mod in1 integer_flush float_max in2 float_mult float_div float_cos integer_fromfloat float_mult float_mult float_cos float_add integer_sub float_sub integer_div 49.98180337132831 float_mult in1 integer_fromfloat integer_add float_swap float_swap float_dup float_flush print_integer tag_float_112 float_shove float_dup_times tag_float_78 float_shove float_dup_times)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2409.2962037
Median total errors in population: 281.16429999999997
Error averages by case: (80.61230929999849 11.138 96.24946439999977 11.327 62.052211199999235 11.13 75.07502299999946 10.104 99.42740760000183 11.272 79.24137520000144 11.218 95.20193779999845 11.184 96.5509325999991 11.297 91.90855740000077 11.173 82.87328800000154 11.366 75.61947209999963 11.246 80.10782840000034 11.368 98.41810779999882 11.152 76.77467520000155 11.173 81.38016330000005 11.364 77.00748830000151 10.224 68.9061783999995 11.133 96.06035059999948 10.162 91.77769989999905 10.109 96.34389309999901 11.301 95.85564880000119 11.277 80.46429309999908 11.214 98.5888303000003 11.27 67.23455220000082 10.869 89.30551570000065 11.188)
Error minima by case: (0.4247 10 0.4241 9 0.3722 9 0.1619 8 0.3687 9 0.0988 10 0.2563 9 0.276 9 0.1491 9 0.498 10 0.3954 9 0.3556 10 0.2337 9 0.3576 10 0.3743 10 0.2035 8 0.2941 9 0.2077 8 0.1022 8 0.4059 9 0.1968 9 0.2809 9 0.2071 9 0.3104 8 0.4029 9)
Average genome size in population (length): 81.624
Average program size in population (points): 82.624
Average percent parens in population: 0.012
Minimum age in population: 105.040393218116
Maximum age in population: 109.270944034832
Average age in population: 107.4281650133755
Median age in population: 107.4821916300583
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.915
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.915
Total error diversity:				 0.127
Error (vector) diversity:			 0.13
Behavioral diversity:				 0.132
--- Run Statistics ---
Number of program evaluations used so far: 76000
Number of point (instruction) evaluations so far: 156131415
--- Timings ---
Current time: 1529615150044 milliseconds
Total Time:         267.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       101.6 seconds, 38.1%
Fitness Testing:    129.0 seconds, 48.3%
Report:              36.3 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 75
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 76
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 76
;;******************************
;; -*- Number IO problem report - generation 76
Test total error for best: 11473.544300000003
Test mean error for best: 5.73677
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_min} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_max} {:instruction float_max} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_swap} {:instruction integer_dec} {:instruction in1} {:instruction integer_dec} {:instruction float_stackdepth} {:instruction integer_shove} {:instruction integer_max} {:instruction float_mod} {:instruction float_stackdepth} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_sin} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 96.80697452437909} {:instruction float_frominteger} {:instruction float_sub} {:instruction integer_div} {:instruction integer_mult} {:instruction float_max} {:instruction float_sub} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_mod} {:instruction integer_flush} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction integer_max} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction float_sin} {:instruction float_max} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction integer_add} {:instruction float_swap})
Best program: (integer_dup_items integer_swap float_min integer_dup_items integer_min integer_max float_max integer_pop integer_dup_times float_swap integer_dec in1 integer_dec float_stackdepth integer_shove integer_max float_mod float_stackdepth float_yankdup float_yank float_sin in2 float_dup_times float_dup_items 96.80697452437909 float_frominteger float_sub integer_div integer_mult float_max float_sub integer_div integer_dup_times float_max float_swap float_mod in1 float_mod float_mod integer_flush float_mod in1 integer_flush float_max in2 integer_max float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_sub float_sin float_max float_sub integer_div float_sin float_max tag_float_518 float_mult in1 integer_fromfloat integer_add float_swap float_swap float_dup float_flush print_integer integer_add float_swap)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2541.149172200001
Median total errors in population: 281.16429999999997
Error averages by case: (90.66818559999847 11.162 96.46927730000036 11.363 69.58639659999984 11.148 82.66459459999949 10.12 99.34878190000106 11.312 88.50751450000112 11.247 95.41863369999905 11.197 96.5187600999991 11.335 92.48849300000036 11.191 91.81564100000108 11.418 83.48791339999964 11.27 90.05832500000005 11.411 103.57997969999872 11.208 86.5743302000015 11.206 90.55321049999974 11.438 83.33521500000154 10.253 70.26131029999951 11.137 102.31150639999949 10.222 101.11117319999931 10.12 97.26735489999902 11.329 96.19760040000051 11.294 90.40660569999906 11.262 99.50656370000031 11.292 76.31946060000074 10.871 89.69434490000057 11.192)
Error minima by case: (0.4247 9 0.4241 3 0.3722 4 0.1619 5 0.3687 3 0.0988 6 0.2563 2 0.276 3 0.1491 2 0.498 7 0.3954 5 0.3556 5 0.2337 10 0.3576 5 0.3743 10 0.2035 5 0.2941 9 0.2077 8 0.1022 8 0.4059 3 0.1968 2 0.2809 6 0.2071 3 0.3104 5 0.4029 2)
Average genome size in population (length): 81.55
Average program size in population (points): 82.55
Average percent parens in population: 0.012
Minimum age in population: 106.1171921524101
Maximum age in population: 110.8442550414435
Average age in population: 108.8492735109357
Median age in population: 108.9469426830009
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.897
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.897
Total error diversity:				 0.131
Error (vector) diversity:			 0.135
Behavioral diversity:				 0.139
--- Run Statistics ---
Number of program evaluations used so far: 77000
Number of point (instruction) evaluations so far: 158171887
--- Timings ---
Current time: 1529615153521 milliseconds
Total Time:         270.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       103.0 seconds, 38.1%
Fitness Testing:    130.8 seconds, 48.3%
Report:              36.7 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 76
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 77
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 77
;;******************************
;; -*- Number IO problem report - generation 77
Test total error for best: 11480.9327
Test mean error for best: 5.74047
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_min} {:instruction integer_sub} {:instruction integer_pop} {:instruction integer_dec} {:instruction in1} {:instruction 35.360537905272665} {:instruction float_max} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_dec} {:instruction in1} {:instruction 35.360537905272665} {:instruction float_max} {:instruction integer_dup_items} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_min} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_max} {:instruction float_max} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_add} {:instruction float_add} {:instruction float_div} {:instruction float_mod} {:instruction 81} {:instruction integer_max} {:instruction integer_flush} {:instruction 82} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 96.80697452437909} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_dec} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction in1} {:instruction float_mult} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_max} {:instruction integer_div} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_swap} {:instruction float_flush} {:instruction print_integer} {:instruction tag_float_99} {:instruction float_shove} {:instruction float_dup_times})
Best program: (integer_pop integer_dup_items integer_swap float_min integer_sub integer_pop integer_dec in1 35.360537905272665 float_max integer_pop integer_pop integer_dec in1 35.360537905272665 float_max integer_dup_items float_mult in2 float_sub integer_dup_items integer_swap float_min integer_dup_items integer_min integer_max float_max integer_pop integer_dec float_add float_add float_div float_mod 81 integer_max integer_flush 82 float_yankdup float_swap integer_div in2 float_dup_times float_dup_items 96.80697452437909 integer_sub float_sub integer_div integer_dup_times float_max float_swap float_mod in1 float_mod in1 float_dec float_max in2 float_mult float_mult float_cos integer_fromfloat in1 float_mult integer_sub float_add integer_sub integer_max integer_div in1 integer_fromfloat integer_add float_swap print_integer tag_float_78 float_swap float_flush print_integer tag_float_99 float_shove float_dup_times)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 80
Size: 81
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2533.6399411000007
Median total errors in population: 281.16429999999997
Error averages by case: (90.46885299999872 11.166 97.24694079999949 11.368 66.34196619999963 11.141 81.38726489999925 10.124 100.76836090000182 11.288 92.28721360000156 11.239 94.81368759999836 11.199 96.92565369999923 11.326 91.38440830000084 11.178 95.26685400000144 11.422 81.83591869999937 11.263 92.52176350000073 11.416 99.01366949999893 11.188 89.78930480000106 11.216 91.71434680000033 11.434 81.81208450000108 10.246 71.03730959999957 11.119 96.39725849999957 10.2 92.58868269999917 10.109 98.06577449999916 11.335 97.73571420000134 11.303 93.26450459999933 11.259 101.12771340000029 11.305 71.20516120000043 10.861 91.74853160000052 11.186)
Error minima by case: (0.4247 9 0.4241 6 0.3722 2 0.1619 4 0.3687 6 0.0988 5 0.2563 4 0.276 6 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 9 0.3576 4 0.3743 9 0.2035 4 0.2941 9 0.2077 8 0.1022 8 0.4059 6 0.1968 5 0.2809 5 0.2071 6 0.3104 3 0.4029 4)
Average genome size in population (length): 80.545
Average program size in population (points): 81.545
Average percent parens in population: 0.012
Minimum age in population: 107.1171921524101
Maximum age in population: 112.3081848830969
Average age in population: 110.2534053527853
Median age in population: 110.2886420291847
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.903
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.903
Total error diversity:				 0.136
Error (vector) diversity:			 0.139
Behavioral diversity:				 0.142
--- Run Statistics ---
Number of program evaluations used so far: 78000
Number of point (instruction) evaluations so far: 160187375
--- Timings ---
Current time: 1529615156912 milliseconds
Total Time:         273.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       104.3 seconds, 38.1%
Fitness Testing:    132.4 seconds, 48.3%
Report:              37.1 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 77
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 78
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 78
;;******************************
;; -*- Number IO problem report - generation 78
Test total error for best: 11476.5633
Test mean error for best: 5.73828
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction float_mod} {:instruction float_min} {:instruction float_frominteger} {:instruction in2} {:instruction float_sub} {:instruction integer_swap} {:instruction float_min} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_shove} {:instruction float_max} {:instruction integer_swap} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_frominteger} {:instruction integer_dec} {:instruction in1} {:instruction integer_dec} {:instruction float_dup_items} {:instruction integer_inc} {:instruction float_add} {:instruction integer_max} {:instruction in1} {:instruction integer_shove} {:instruction tag_integer_922} {:instruction integer_add} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 97.20027408926207} {:instruction integer_inc} {:instruction float_sub} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction integer_shove} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_swap} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction tag_float_9855} {:instruction float_shove} {:instruction integer_rot} {:instruction tag_float_22} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_shove})
Best program: (integer_dup_items float_mod float_min float_frominteger in2 float_sub integer_swap float_min integer_dup_items integer_min integer_shove float_max integer_swap float_frominteger integer_pop integer_dup_times float_frominteger integer_dec in1 integer_dec float_dup_items integer_inc float_add integer_max in1 integer_shove tag_integer_922 integer_add integer_div in2 float_dup_times float_dup_items 97.20027408926207 integer_inc float_sub integer_shove integer_dup_times float_max float_swap float_mod in1 float_mod float_mod in1 float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_sub integer_div float_sin integer_shove tag_float_518 float_mult in1 integer_fromfloat integer_add float_swap float_swap float_flush print_integer float_swap tag_float_9855 float_shove integer_rot tag_float_22 print_integer tag_float_78 float_shove)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2310.7972235000007
Median total errors in population: 281.16429999999997
Error averages by case: (80.81077619999863 11.161 89.81542410000027 11.33 57.63847219999957 11.11 72.31309650000006 10.088 94.61397250000145 11.27 78.91798000000085 11.212 88.26446519999887 11.171 91.735348399999 11.275 87.27592530000004 11.178 81.28829200000078 11.366 72.76343100000022 11.218 80.56189519999992 11.373 91.08196189999884 11.175 75.66982080000128 11.183 81.02052079999964 11.407 74.56045300000127 10.225 61.91600599999957 11.132 89.11340649999954 10.2 83.99093949999971 10.144 90.90125369999897 11.294 89.56164090000064 11.262 80.65345039999927 11.246 93.8707869000003 11.282 62.5790804000005 10.871 83.54482410000062 11.161)
Error minima by case: (0.4247 10 0.4241 2 0.3722 1 0.1619 2 0.3687 2 0.0988 2 0.2563 2 0.276 3 0.1491 2 0.498 3 0.3954 2 0.3556 2 0.2337 8 0.3576 1 0.3743 10 0.2035 2 0.2941 9 0.2077 8 0.1022 8 0.4059 2 0.1968 2 0.2809 2 0.2071 2 0.3104 2 0.4029 2)
Average genome size in population (length): 80.496
Average program size in population (points): 81.496
Average percent parens in population: 0.012
Minimum age in population: 108.1171921524101
Maximum age in population: 113.7193273123202
Average age in population: 111.6429899837399
Median age in population: 111.6715220532625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.915
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.915
Total error diversity:				 0.122
Error (vector) diversity:			 0.124
Behavioral diversity:				 0.128
--- Run Statistics ---
Number of program evaluations used so far: 79000
Number of point (instruction) evaluations so far: 162201642
--- Timings ---
Current time: 1529615160322 milliseconds
Total Time:         277.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       105.6 seconds, 38.1%
Fitness Testing:    134.0 seconds, 48.3%
Report:              37.5 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 78
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 79
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 79
;;******************************
;; -*- Number IO problem report - generation 79
Test total error for best: 11475.9327
Test mean error for best: 5.73797
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction float_max} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_frominteger} {:instruction integer_dec} {:instruction in1} {:instruction integer_dec} {:instruction in1} {:instruction integer_rot} {:instruction float_add} {:instruction integer_dec} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_sub} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_sin} {:instruction float_swap} {:instruction integer_dec} {:instruction float_max} {:instruction float_swap} {:instruction float_sin} {:instruction in1} {:instruction float_mod} {:instruction float_dup_times} {:instruction float_max} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_max} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_swap} {:instruction float_dup} {:instruction print_integer} {:instruction print_integer} {:instruction float_swap} {:instruction float_dup} {:instruction float_shove} {:instruction print_integer} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction in1} {:instruction float_flush} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_shove} {:instruction in1})
Best program: (integer_dup_items float_max integer_pop integer_dup_times float_frominteger integer_dec in1 integer_dec in1 integer_rot float_add integer_dec float_swap integer_div in2 float_dup_times float_sub integer_div integer_dup_times float_sin float_swap integer_dec float_max float_swap float_sin in1 float_mod float_dup_times float_max float_mod in1 integer_flush float_max in2 float_mult float_max float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_sub integer_div float_sin float_max tag_float_518 float_mult in1 integer_fromfloat integer_add float_swap float_swap float_dup print_integer print_integer float_swap float_dup float_shove print_integer float_dup float_flush print_integer float_swap in1 float_flush print_integer tag_float_78 float_shove in1)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2404.110976500001
Median total errors in population: 281.16429999999997
Error averages by case: (87.71537859999864 11.15 90.58893220000031 11.329 63.17970969999972 11.105 80.1326121 10.095 93.56492600000107 11.276 84.25449800000058 11.193 87.82899719999942 11.163 90.79384729999911 11.276 85.47403189999989 11.155 86.47183800000063 11.352 80.69683200000016 11.219 85.14558479999954 11.354 95.33108649999886 11.187 81.09395360000137 11.177 87.77215209999957 11.4 81.8198018000013 10.223 68.09340439999953 11.119 93.22906749999954 10.211 90.60323529999941 10.13 91.27859519999903 11.299 89.2761308000004 11.264 84.94251779999915 11.221 93.70013200000031 11.278 71.80256260000054 10.855 83.13014910000057 11.16)
Error minima by case: (0.4247 9 0.4241 5 0.3722 2 0.1619 4 0.3687 5 0.0988 5 0.2563 4 0.276 5 0.1491 4 0.498 6 0.3954 4 0.3556 5 0.2337 10 0.3576 3 0.3743 10 0.2035 4 0.2941 9 0.2077 8 0.1022 8 0.4059 5 0.1968 4 0.2809 5 0.2071 5 0.3104 3 0.4029 4)
Average genome size in population (length): 80.637
Average program size in population (points): 81.637
Average percent parens in population: 0.012
Minimum age in population: 109.1581880070714
Maximum age in population: 115.0466615520781
Average age in population: 113.0375643446887
Median age in population: 113.0848697779163
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.92
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.92
Total error diversity:				 0.129
Error (vector) diversity:			 0.129
Behavioral diversity:				 0.132
--- Run Statistics ---
Number of program evaluations used so far: 80000
Number of point (instruction) evaluations so far: 164219680
--- Timings ---
Current time: 1529615163720 milliseconds
Total Time:         280.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       107.0 seconds, 38.1%
Fitness Testing:    135.6 seconds, 48.3%
Report:              38.0 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 79
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 80
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 80
;;******************************
;; -*- Number IO problem report - generation 80
Test total error for best: 11475.9327
Test mean error for best: 5.73797
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_min} {:instruction integer_dup_times} {:instruction integer_inc} {:instruction float_max} {:instruction integer_sub} {:instruction float_dup} {:instruction float_swap} {:instruction float_swap} {:instruction float_yank} {:instruction integer_inc} {:instruction in1} {:instruction float_max} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 94.56699356481795} {:instruction integer_sub} {:instruction float_swap} {:instruction float_dup_times} {:instruction in1} {:instruction in1} {:instruction float_yankdup} {:instruction float_sub} {:instruction float_cos} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_mod} {:instruction float_mod} {:instruction float_stackdepth} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_sin} {:instruction tag_float_518} {:instruction float_mult} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_sin} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_sub} {:instruction integer_mod} {:instruction tagged_892} {:instruction float_inc} {:instruction print_integer} {:instruction float_flush} {:instruction float_dup_times} {:instruction tag_float_482} {:instruction float_rot} {:instruction tag_float_78} {:instruction float_sin} {:instruction float_dup_times} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_321} {:instruction float_pop} {:instruction tag_float_22} {:instruction print_integer} {:instruction integer_yank} {:instruction float_shove} {:instruction integer_stackdepth})
Best program: (integer_dup_items integer_swap float_min integer_dup_times integer_inc float_max integer_sub float_dup float_swap float_swap float_yank integer_inc in1 float_max integer_div in2 float_dup_times float_dup_items 94.56699356481795 integer_sub float_swap float_dup_times in1 in1 float_yankdup float_sub float_cos in2 float_dup_times float_dup_items float_mod float_mod float_stackdepth float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_sub integer_div float_sin float_sin tag_float_518 float_mult float_mult float_mult float_sub float_add integer_sub float_sub integer_div float_sin float_sin tag_float_518 float_mult in1 integer_fromfloat integer_add float_sub integer_mod tagged_892 float_inc print_integer float_flush float_dup_times tag_float_482 float_rot tag_float_78 float_sin float_dup_times tag_float_22 float_shove float_dup_times tag_float_321 float_pop tag_float_22 print_integer integer_yank float_shove integer_stackdepth)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 89
Size: 90
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2411.0269522000003
Median total errors in population: 281.16429999999997
Error averages by case: (83.42896929999866 11.17 92.17630109999999 11.342 61.285252599999694 11.112 75.08979119999933 10.114 95.8927380000015 11.289 83.36651000000147 11.223 91.10694829999854 11.197 93.82925119999908 11.303 88.94855660000079 11.168 85.46634800000137 11.364 75.52957639999948 11.237 85.29142960000051 11.37 100.00288399999867 11.188 80.4953739000013 11.212 84.54302280000022 11.394 76.26693700000128 10.24 71.60545339999948 11.136 98.21709479999946 10.209 94.50960389999892 10.134 94.57521659999897 11.322 93.22740320000105 11.281 85.26759199999925 11.235 96.04734500000032 11.278 65.94401390000037 10.9 82.30733940000064 11.188)
Error minima by case: (0.4247 9 0.4241 6 0.3722 2 0.1619 4 0.3687 6 0.0988 5 0.2563 4 0.276 6 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 9 0.3576 4 0.3743 10 0.2035 4 0.2941 9 0.2077 8 0.1022 6 0.4059 6 0.1968 5 0.2809 5 0.2071 6 0.3104 3 0.4029 4)
Average genome size in population (length): 80.925
Average program size in population (points): 81.925
Average percent parens in population: 0.012
Minimum age in population: 110.1581880070714
Maximum age in population: 116.3044768804172
Average age in population: 114.4887752207604
Median age in population: 114.5273061888011
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.913
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.913
Total error diversity:				 0.13
Error (vector) diversity:			 0.134
Behavioral diversity:				 0.137
--- Run Statistics ---
Number of program evaluations used so far: 81000
Number of point (instruction) evaluations so far: 166244722
--- Timings ---
Current time: 1529615167143 milliseconds
Total Time:         284.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       108.3 seconds, 38.1%
Fitness Testing:    137.3 seconds, 48.3%
Report:              38.4 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 80
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 81
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 81
;;******************************
;; -*- Number IO problem report - generation 81
Test total error for best: 11474.595500000001
Test mean error for best: 5.73730
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction tag_float_715} {:instruction integer_swap} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_inc} {:instruction in1} {:instruction integer_dup_items} {:instruction float_add} {:instruction float_add} {:instruction integer_max} {:instruction float_mod} {:instruction 81} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_sub} {:instruction float_sin} {:instruction integer_sub} {:instruction float_sub} {:instruction float_sub} {:instruction float_yank} {:instruction integer_max} {:instruction float_max} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_add} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction integer_yank} {:instruction tag_float_518} {:instruction integer_swap} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction float_dup_times} {:instruction float_shove} {:instruction integer_swap} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction tagged_469} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction -69.6612109257324})
Best program: (integer_pop tag_float_715 integer_swap integer_min float_frominteger float_inc in1 integer_dup_items float_add float_add integer_max float_mod 81 float_yankdup float_swap integer_div in2 float_dup_times float_sub float_sin integer_sub float_sub float_sub float_yank integer_max float_max in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_add integer_sub float_add integer_sub float_sub integer_div float_sin integer_yank tag_float_518 integer_swap in1 integer_fromfloat integer_add float_swap float_swap float_dup float_flush print_integer float_dup_times float_shove integer_swap float_max in2 float_mult tagged_469 float_cos integer_fromfloat float_mult float_mult float_sub -69.6612109257324)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2282.0890181
Median total errors in population: 281.16429999999997
Error averages by case: (77.9080391999985 11.162 89.20116370000018 11.341 54.60467609999952 11.115 67.96676900000023 10.105 91.28415770000117 11.298 79.68118960000096 11.217 82.23689579999936 11.189 88.18586029999906 11.287 81.8608216000001 11.166 82.49080600000087 11.371 68.38489000000042 11.237 79.85116239999981 11.373 95.74320819999883 11.18 75.49388720000145 11.201 78.21209359999955 11.408 69.27430150000143 10.239 72.93773149999954 11.129 93.39596219999952 10.188 91.11528399999915 10.124 88.918525899999 11.299 87.78116360000047 11.286 80.75836049999903 11.244 91.43233350000028 11.289 61.20293670000064 10.873 75.67879830000061 11.167)
Error minima by case: (0.4247 10 0.4241 6 0.3722 2 0.1619 4 0.3687 6 0.0988 5 0.2563 4 0.276 6 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 10 0.3576 4 0.3743 10 0.2035 4 0.2941 9 0.2077 8 0.1022 8 0.4059 6 0.1968 5 0.2809 5 0.2071 6 0.3104 3 0.4029 2)
Average genome size in population (length): 80.837
Average program size in population (points): 81.837
Average percent parens in population: 0.012
Minimum age in population: 113.6294557626162
Maximum age in population: 118.0436238135473
Average age in population: 115.9922792444845
Median age in population: 116.0657280176682
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.9
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.9
Total error diversity:				 0.13
Error (vector) diversity:			 0.134
Behavioral diversity:				 0.138
--- Run Statistics ---
Number of program evaluations used so far: 82000
Number of point (instruction) evaluations so far: 168268319
--- Timings ---
Current time: 1529615170503 milliseconds
Total Time:         287.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       109.6 seconds, 38.1%
Fitness Testing:    138.9 seconds, 48.3%
Report:              38.9 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 81
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 82
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 82
;;******************************
;; -*- Number IO problem report - generation 82
Test total error for best: 11481.5633
Test mean error for best: 5.74078
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction tag_float_715} {:instruction integer_swap} {:instruction float_frominteger} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction integer_min} {:instruction integer_max} {:instruction float_max} {:instruction integer_pop} {:instruction integer_mult} {:instruction float_add} {:instruction integer_dec} {:instruction in1} {:instruction integer_swap} {:instruction float_swap} {:instruction integer_inc} {:instruction float_add} {:instruction integer_max} {:instruction in1} {:instruction integer_yank} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 97.20027408926207} {:instruction float_sin} {:instruction float_sub} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_dec} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction integer_add} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_div} {:instruction float_sin} {:instruction float_sin} {:instruction float_max} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_sub} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_321} {:instruction print_integer} {:instruction tag_float_22})
Best program: (integer_pop tag_float_715 integer_swap float_frominteger integer_inc integer_dup_items integer_flush integer_min integer_max float_max integer_pop integer_mult float_add integer_dec in1 integer_swap float_swap integer_inc float_add integer_max in1 integer_yank integer_flush float_swap integer_div in2 float_dup_times float_dup_items 97.20027408926207 float_sin float_sub integer_div integer_dup_times float_max float_swap float_mod in1 float_mod float_mod in1 float_mod in1 float_dec float_max in2 float_mult integer_add float_cos integer_fromfloat float_mult float_mult float_sub float_sub float_add integer_sub float_sub integer_div float_sin float_max integer_sub integer_yankdup integer_div float_sin float_sin float_max tag_float_518 float_mult in1 integer_fromfloat integer_add float_sub print_integer tag_float_78 float_shove float_dup_times tag_float_321 print_integer tag_float_22)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2480.452883800001
Median total errors in population: 281.16429999999997
Error averages by case: (91.97228289999848 11.178 93.75494240000025 11.394 65.65758779999945 11.161 79.3408074999995 10.134 97.53354190000101 11.325 89.66227640000129 11.25 88.69259939999925 11.237 95.76613719999908 11.34 87.24914420000026 11.205 92.09728800000148 11.433 80.61155929999964 11.277 90.5670504000003 11.407 100.49970769999884 11.199 82.4356088000015 11.211 91.1201965000002 11.441 84.05738240000144 10.263 63.88539589999961 11.136 97.07420969999957 10.218 95.07243769999938 10.132 96.03717219999905 11.365 94.79471500000054 11.336 90.137135799999 11.274 96.28961020000028 11.334 74.54718120000075 10.873 84.2549133000006 11.219)
Error minima by case: (0.4247 10 0.4241 6 0.3722 2 0.1619 4 0.3687 6 0.0988 5 0.2563 4 0.276 6 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 9 0.3576 4 0.3743 10 0.2035 4 0.2941 9 0.2077 9 0.1022 8 0.4059 6 0.1968 5 0.2809 5 0.2071 6 0.3104 3 0.4029 4)
Average genome size in population (length): 80.86
Average program size in population (points): 81.86
Average percent parens in population: 0.012
Minimum age in population: 114.9984520320422
Maximum age in population: 119.4868101217632
Average age in population: 117.4541753179279
Median age in population: 117.4720892461118
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.923
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.923
Total error diversity:				 0.139
Error (vector) diversity:			 0.144
Behavioral diversity:				 0.149
--- Run Statistics ---
Number of program evaluations used so far: 83000
Number of point (instruction) evaluations so far: 170292579
--- Timings ---
Current time: 1529615174024 milliseconds
Total Time:         290.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       110.9 seconds, 38.1%
Fitness Testing:    140.6 seconds, 48.3%
Report:              39.3 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 82
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 83
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 83
;;******************************
;; -*- Number IO problem report - generation 83
Test total error for best: 11473.9649
Test mean error for best: 5.73698
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction float_add} {:instruction in1} {:instruction integer_dec} {:instruction float_add} {:instruction float_add} {:instruction integer_max} {:instruction float_mod} {:instruction 82} {:instruction float_yank} {:instruction float_min} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 94.56699356481795} {:instruction float_dec} {:instruction float_sub} {:instruction integer_div} {:instruction integer_dec} {:instruction in2} {:instruction integer_pop} {:instruction integer_dec} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 96.80697452437909} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction integer_mod} {:instruction float_yank} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction float_dup_times} {:instruction float_sub} {:instruction float_mod} {:instruction integer_dup_times} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_flush} {:instruction float_swap} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_22} {:instruction float_flush})
Best program: (float_dup_times float_rot integer_swap integer_pop integer_dup_times float_yankdup float_add in1 integer_dec float_add float_add integer_max float_mod 82 float_yank float_min integer_div in2 float_dup_times float_dup_items 94.56699356481795 float_dec float_sub integer_div integer_dec in2 integer_pop integer_dec in2 float_dup_times float_dup_items 96.80697452437909 integer_sub float_sub integer_div integer_mod float_yank float_mod float_mod in1 integer_flush float_max float_dup_times float_sub float_mod integer_dup_times float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_sub integer_div float_sin float_max tag_float_518 float_mult in1 integer_fromfloat integer_add float_swap float_swap float_dup float_flush print_integer float_dup_items float_dup float_flush float_swap float_swap float_dup float_flush print_integer float_swap float_shove float_dup_times tag_float_22 float_flush)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 87
Size: 88
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2820.093469300001
Median total errors in population: 281.16429999999997
Error averages by case: (102.0823514999986 11.19 110.90853469999922 11.375 76.26068909999933 11.152 93.08356279999872 10.134 112.44265810000216 11.338 102.21199200000223 11.263 105.64986619999806 11.217 110.14494219999915 11.342 105.00000790000139 11.21 104.55081800000221 11.418 93.94712949999884 11.271 103.58945120000115 11.422 113.31176279999892 11.192 99.06838400000149 11.234 103.26826940000069 11.439 95.0896638000014 10.261 77.49095709999955 11.138 111.15601489999956 10.223 106.21993219999875 10.133 109.98204669999909 11.35 109.4787687000017 11.335 103.76364139999905 11.277 112.9264961000003 11.321 82.32632690000075 10.871 98.82520210000058 11.208)
Error minima by case: (0.4247 10 0.4241 6 0.3722 2 0.1619 4 0.3687 6 0.0988 5 0.2563 4 0.276 5 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 9 0.3576 4 0.3743 9 0.2035 4 0.2941 8 0.2077 8 0.1022 8 0.4059 6 0.1968 5 0.2809 5 0.2071 6 0.3104 3 0.4029 4)
Average genome size in population (length): 81.417
Average program size in population (points): 82.417
Average percent parens in population: 0.012
Minimum age in population: 116.4731256340663
Maximum age in population: 120.8527916496899
Average age in population: 118.8986906342588
Median age in population: 118.9305876997487
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.922
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.922
Total error diversity:				 0.127
Error (vector) diversity:			 0.128
Behavioral diversity:				 0.131
--- Run Statistics ---
Number of program evaluations used so far: 84000
Number of point (instruction) evaluations so far: 172330600
--- Timings ---
Current time: 1529615177472 milliseconds
Total Time:         294.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       112.2 seconds, 38.1%
Fitness Testing:    142.3 seconds, 48.3%
Report:              39.8 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 83
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 84
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 84
;;******************************
;; -*- Number IO problem report - generation 84
Test total error for best: 11476.5633
Test mean error for best: 5.73828
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_rot} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_frominteger} {:instruction float_mod} {:instruction integer_dec} {:instruction in2} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction 96.80697452437909} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction integer_add} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_mod} {:instruction integer_swap} {:instruction float_dup} {:instruction print_integer} {:instruction float_div} {:instruction float_swap} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_min} {:instruction float_dup_times})
Best program: (float_dup_times float_rot integer_add integer_dup_times float_frominteger float_mod integer_dec in2 float_dup_times float_stackdepth 96.80697452437909 integer_sub float_sub integer_div integer_dup_times float_max float_swap float_mod float_dup_items float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_sub integer_div float_sin float_max integer_add float_mult in1 integer_fromfloat integer_add float_mod integer_swap float_dup print_integer float_div float_swap integer_dup_items integer_dup_items print_integer tag_float_78 float_min float_dup_times)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 54
Size: 55
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2429.9547827
Median total errors in population: 281.16429999999997
Error averages by case: (85.66152899999864 11.175 99.42725709999954 11.351 59.88496389999952 11.125 72.97510770000007 10.133 98.94124620000187 11.293 82.82059680000128 11.245 96.25621759999841 11.173 96.55877199999901 11.288 94.61578030000094 11.17 85.7598300000013 11.417 74.41041080000008 11.271 84.53409560000038 11.408 93.79624579999889 11.193 79.48423840000109 11.214 85.09056800000015 11.443 75.58078850000113 10.253 69.06331729999957 11.142 91.14584829999956 10.194 89.90387959999919 10.121 97.45550729999891 11.311 98.22121410000123 11.299 83.91007959999918 11.268 99.3119874000003 11.277 68.28446230000058 10.862 90.0608391000006 11.174)
Error minima by case: (0.4247 9 0.0 3 0.3722 2 0.1619 4 0.0 3 0.0988 5 0.0 3 0.0 3 0.0 2 0.498 7 0.3954 4 0.3556 5 0.2337 9 0.3576 4 0.3743 10 0.2035 4 0.2941 8 0.2077 8 0.1022 7 0.0 3 0.0 3 0.2809 5 0.0 3 0.3104 3 0.0 2)
Average genome size in population (length): 81.376
Average program size in population (points): 82.376
Average percent parens in population: 0.012
Minimum age in population: 117.8833420177566
Maximum age in population: 122.3285830615021
Average age in population: 120.3298644976477
Median age in population: 120.3726914064539
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.912
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.912
Total error diversity:				 0.145
Error (vector) diversity:			 0.149
Behavioral diversity:				 0.152
--- Run Statistics ---
Number of program evaluations used so far: 85000
Number of point (instruction) evaluations so far: 174367470
--- Timings ---
Current time: 1529615180804 milliseconds
Total Time:         297.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       113.6 seconds, 38.1%
Fitness Testing:    144.0 seconds, 48.3%
Report:              40.2 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 84
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 85
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 85
;;******************************
;; -*- Number IO problem report - generation 85
Test total error for best: 11475.9327
Test mean error for best: 5.73797
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction float_add} {:instruction in1} {:instruction integer_dec} {:instruction float_add} {:instruction float_add} {:instruction integer_max} {:instruction float_mod} {:instruction 82} {:instruction float_yankdup} {:instruction float_min} {:instruction integer_max} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 94.56699356481795} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction integer_swap} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_dup_times} {:instruction float_mult} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_rot} {:instruction float_dup} {:instruction print_integer} {:instruction float_div} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_min} {:instruction float_dup_times})
Best program: (float_dup_times float_rot integer_swap integer_pop integer_dup_times float_yankdup float_add in1 integer_dec float_add float_add integer_max float_mod 82 float_yankdup float_min integer_max in2 float_dup_times float_dup_items 94.56699356481795 integer_sub float_sub integer_div integer_swap float_max float_swap float_mod in1 float_mod float_dup_times float_mult float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_sub integer_div float_sin float_max tag_float_518 float_mult in1 integer_fromfloat integer_add float_swap float_rot float_dup print_integer float_div float_dec integer_dup_items integer_dup_items print_integer tag_float_78 float_min float_dup_times)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2476.9493839000006
Median total errors in population: 281.16429999999997
Error averages by case: (84.2166804999985 11.157 103.7709258999999 11.334 63.91680609999962 11.142 78.88587149999977 10.114 104.85082770000157 11.278 82.36721640000096 11.228 98.15875649999849 11.191 102.61265429999898 11.289 96.72275230000082 11.172 85.72473020000103 11.377 79.73199679999993 11.259 84.03358690000007 11.384 94.56613489999877 11.179 79.62496730000137 11.202 84.9837445999997 11.405 79.86805660000144 10.244 62.33593739999955 11.142 92.17581969999951 10.181 88.6606558999991 10.121 102.8716554999989 11.307 101.009570400001 11.294 83.47916669999915 11.244 104.2779402000003 11.275 69.5018763000005 10.875 92.02705330000065 11.18)
Error minima by case: (0.4247 9 0.4241 2 0.3722 10 0.1619 8 0.3687 2 0.0988 10 0.2563 2 0.276 2 0.1491 2 0.498 10 0.3954 9 0.3556 10 0.2337 9 0.3576 10 0.3743 10 0.2035 8 0.2941 9 0.2077 8 0.1022 8 0.4059 2 0.1968 2 0.2809 9 0.2071 2 0.3104 8 0.4029 2)
Average genome size in population (length): 81.467
Average program size in population (points): 82.467
Average percent parens in population: 0.012
Minimum age in population: 119.2125691226741
Maximum age in population: 123.5823458181522
Average age in population: 121.7449047638627
Median age in population: 121.8274790986694
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.908
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.908
Total error diversity:				 0.129
Error (vector) diversity:			 0.131
Behavioral diversity:				 0.134
--- Run Statistics ---
Number of program evaluations used so far: 86000
Number of point (instruction) evaluations so far: 176406717
--- Timings ---
Current time: 1529615184170 milliseconds
Total Time:         301.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       114.9 seconds, 38.1%
Fitness Testing:    145.6 seconds, 48.4%
Report:              40.5 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 85
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 86
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 86
;;******************************
;; -*- Number IO problem report - generation 86
Test total error for best: 11476.5633
Test mean error for best: 5.73828
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_pop} {:instruction float_tan} {:instruction integer_pop} {:instruction tag_float_715} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_max} {:instruction float_cos} {:instruction float_add} {:instruction integer_max} {:instruction float_mod} {:instruction 82} {:instruction float_yank} {:instruction float_min} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 94.56699356481795} {:instruction float_dec} {:instruction float_sub} {:instruction integer_div} {:instruction integer_dec} {:instruction in2} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_sub} {:instruction integer_div} {:instruction 5} {:instruction float_max} {:instruction float_swap} {:instruction integer_add} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_mod} {:instruction float_mod} {:instruction float_sin} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_tan} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_div} {:instruction float_sin} {:instruction float_sin} {:instruction float_max} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_sub} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_22} {:instruction float_flush})
Best program: (float_dup_times float_rot integer_swap integer_pop float_tan integer_pop tag_float_715 integer_dup_items integer_min integer_max float_cos float_add integer_max float_mod 82 float_yank float_min integer_div in2 float_dup_times float_dup_items 94.56699356481795 float_dec float_sub integer_div integer_dec in2 float_swap float_mod in1 float_mod float_sub integer_div 5 float_max float_swap integer_add float_swap integer_div in2 float_dup_times float_dup_items float_mod float_mod float_sin float_mod in1 integer_flush float_max in2 float_mult float_tan float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub integer_swap integer_div float_sin float_sin float_max tag_float_518 float_mult in1 integer_fromfloat integer_add float_sub print_integer tag_float_78 float_shove float_dup_times tag_float_22 float_flush)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 76
Size: 77
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2291.1261819000006
Median total errors in population: 281.16429999999997
Error averages by case: (78.0855291999985 11.18 91.55213959999944 11.348 58.17498029999943 11.132 68.86798159999996 10.117 91.50150670000194 11.31 74.21917760000099 11.239 87.62534499999829 11.218 90.59399299999913 11.324 85.62777840000113 11.192 76.10329200000099 11.387 69.56917940000005 11.25 76.61331760000024 11.378 93.2522821999988 11.189 71.22503280000142 11.204 78.18802920000034 11.409 71.32847390000146 10.241 74.39961109999952 11.144 93.0528567999995 10.208 90.61793489999887 10.147 90.95965879999906 11.343 89.9583118000014 11.298 76.67288859999911 11.248 91.64875450000031 11.296 62.372115100000705 10.897 82.0050118000006 11.212)
Error minima by case: (0.4247 10 0.4241 6 0.3722 2 0.1619 4 0.3687 6 0.0988 5 0.2563 4 0.276 6 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 9 0.3576 4 0.3743 11 0.2035 4 0.2941 9 0.2077 8 0.1022 8 0.4059 6 0.1968 5 0.2809 5 0.2071 6 0.3104 3 0.4029 4)
Average genome size in population (length): 81.023
Average program size in population (points): 82.023
Average percent parens in population: 0.012
Minimum age in population: 120.4395925697605
Maximum age in population: 125.092662166267
Average age in population: 123.1642451458948
Median age in population: 123.1898246907058
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.926
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.926
Total error diversity:				 0.129
Error (vector) diversity:			 0.131
Behavioral diversity:				 0.135
--- Run Statistics ---
Number of program evaluations used so far: 87000
Number of point (instruction) evaluations so far: 178435029
--- Timings ---
Current time: 1529615187653 milliseconds
Total Time:         304.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       116.3 seconds, 38.2%
Fitness Testing:    147.3 seconds, 48.3%
Report:              41.0 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 86
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 87
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 87
;;******************************
;; -*- Number IO problem report - generation 87
Test total error for best: 11477.9327
Test mean error for best: 5.73897
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction integer_fromfloat} {:instruction float_frominteger} {:instruction integer_div} {:instruction in1} {:instruction integer_rot} {:instruction float_add} {:instruction integer_dec} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_sub} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction integer_dec} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_sin} {:instruction in1} {:instruction in1} {:instruction integer_add} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 96.80697452437909} {:instruction float_mod} {:instruction float_sub} {:instruction float_add} {:instruction integer_dup_times} {:instruction integer_add} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction integer_rot} {:instruction 96.80697452437909} {:instruction float_add} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_flush} {:instruction float_mod} {:instruction float_sin} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_div} {:instruction float_sin} {:instruction float_sin} {:instruction integer_rot} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_shove} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_swap} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush})
Best program: (integer_sub integer_mod integer_dup_items integer_fromfloat float_frominteger integer_div in1 integer_rot float_add integer_dec float_swap integer_div in2 float_dup_times float_sub integer_div integer_dup_times float_max float_swap integer_dec float_max integer_stackdepth float_sin in1 in1 integer_add integer_div in2 float_dup_times float_dup_items 96.80697452437909 float_mod float_sub float_add integer_dup_times integer_add float_swap integer_div in2 float_dup_times integer_rot 96.80697452437909 float_add float_swap integer_div in2 float_dup_times float_dup_items integer_flush float_mod float_sin float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub integer_swap integer_div float_sin float_sin integer_rot tag_float_518 float_mult in1 integer_fromfloat integer_add integer_shove print_integer tag_float_78 float_swap float_swap float_dup float_flush print_integer float_swap float_dup float_flush)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2610.241991900001
Median total errors in population: 281.16429999999997
Error averages by case: (94.55688799999852 11.173 100.97774879999966 11.35 68.15570969999935 11.111 86.429042999999 10.097 102.27371260000157 11.305 94.88830040000195 11.223 99.41482289999846 11.191 98.63689979999918 11.31 95.81307400000097 11.184 98.26033600000194 11.399 87.41226109999917 11.232 97.42985200000103 11.387 102.30622019999888 11.198 89.65394990000145 11.186 95.7423859000006 11.454 87.91580670000144 10.237 71.01916999999956 11.143 99.9175154999995 10.221 93.9516899999991 10.132 98.19908569999913 11.32 100.1226298000013 11.311 97.81646839999915 11.242 101.60025470000029 11.307 74.92250900000073 10.841 96.08365780000064 11.188)
Error minima by case: (0.4247 10 0.4241 6 0.3722 2 0.1619 4 0.3687 6 0.0988 5 0.2563 4 0.276 6 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 10 0.3576 4 0.3743 10 0.2035 4 0.2941 9 0.2077 8 0.1022 7 0.4059 6 0.1968 5 0.2809 5 0.2071 6 0.3104 3 0.4029 4)
Average genome size in population (length): 80.614
Average program size in population (points): 81.614
Average percent parens in population: 0.012
Minimum age in population: 122.2117634179316
Maximum age in population: 126.4103661689582
Average age in population: 124.6575491603913
Median age in population: 124.698205315547
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.931
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.931
Total error diversity:				 0.131
Error (vector) diversity:			 0.131
Behavioral diversity:				 0.135
--- Run Statistics ---
Number of program evaluations used so far: 88000
Number of point (instruction) evaluations so far: 180452935
--- Timings ---
Current time: 1529615191115 milliseconds
Total Time:         308.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       117.6 seconds, 38.2%
Fitness Testing:    148.9 seconds, 48.3%
Report:              41.4 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 87
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 88
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 88
;;******************************
;; -*- Number IO problem report - generation 88
Test total error for best: 11475.9327
Test mean error for best: 5.73797
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_shove} {:instruction integer_dec} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_rot} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction in1} {:instruction integer_dec} {:instruction float_add} {:instruction float_add} {:instruction integer_max} {:instruction float_mod} {:instruction 82} {:instruction float_yank} {:instruction float_min} {:instruction integer_min} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 94.56699356481795} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction integer_dec} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction in1} {:instruction integer_dec} {:instruction float_add} {:instruction integer_dup_items} {:instruction float_dup_times} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction in1} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction float_mod} {:instruction in1} {:instruction float_max} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_add} {:instruction float_dup} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction integer_yank} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction float_flush} {:instruction tagged_835} {:instruction tag_float_78} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_dup_times} {:instruction integer_mult} {:instruction print_integer} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_shove} {:instruction float_swap} {:instruction float_sin} {:instruction float_dup_items})
Best program: (float_dup_times float_shove integer_dec float_min integer_dup_items float_rot integer_pop integer_dup_times float_yankdup float_yankdup in1 integer_dec float_add float_add integer_max float_mod 82 float_yank float_min integer_min in2 float_dup_times float_dup_items 94.56699356481795 integer_sub float_sub integer_div integer_dec float_max float_swap float_mod in1 in1 integer_dec float_add integer_dup_items float_dup_times float_swap integer_inc in1 in1 float_mod integer_fromfloat integer_pop float_mod in1 float_max float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_add float_dup float_add integer_sub float_sub integer_div float_sin integer_yank tag_float_518 float_mult in1 integer_fromfloat integer_add float_swap float_swap float_dup float_flush print_integer float_flush tagged_835 tag_float_78 float_shove float_dup_times tag_float_22 float_shove float_dup_times integer_mult print_integer float_dup_items float_yankdup float_shove float_swap float_sin float_dup_items)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2698.578166300001
Median total errors in population: 281.16429999999997
Error averages by case: (96.05195389999842 11.177 107.97587249999977 11.362 75.41804449999947 11.14 88.32643189999885 10.123 108.42632110000174 11.314 92.66000400000168 11.237 103.91550509999848 11.178 105.87310119999898 11.321 102.62028840000089 11.193 95.44583800000159 11.401 88.95209449999902 11.267 93.34449640000054 11.394 107.38144819999873 11.175 91.7618080000016 11.209 95.94777780000031 11.417 89.1721803000016 10.258 77.18287849999956 11.131 105.43692329999952 10.2 102.10307329999897 10.125 105.6938806999989 11.323 105.13410180000118 11.286 93.87114699999898 11.261 108.7743219000003 11.299 79.94296130000059 10.863 100.31271270000069 11.199)
Error minima by case: (0.4247 9 0.4241 6 0.3722 2 0.1619 4 0.3687 6 0.0988 5 0.2563 4 0.276 6 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 9 0.3576 4 0.3743 10 0.2035 4 0.2941 8 0.2077 8 0.1022 8 0.4059 6 0.1968 5 0.2809 5 0.2071 6 0.3104 3 0.4029 4)
Average genome size in population (length): 80.789
Average program size in population (points): 81.789
Average percent parens in population: 0.012
Minimum age in population: 123.551137274959
Maximum age in population: 128.0519986872595
Average age in population: 126.0914854302411
Median age in population: 126.1132240908392
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.92
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.92
Total error diversity:				 0.128
Error (vector) diversity:			 0.132
Behavioral diversity:				 0.135
--- Run Statistics ---
Number of program evaluations used so far: 89000
Number of point (instruction) evaluations so far: 182475286
--- Timings ---
Current time: 1529615194571 milliseconds
Total Time:         311.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       118.9 seconds, 38.2%
Fitness Testing:    150.6 seconds, 48.3%
Report:              41.9 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 88
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 89
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 89
;;******************************
;; -*- Number IO problem report - generation 89
Test total error for best: 11473.9649
Test mean error for best: 5.73698
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction float_add} {:instruction float_max} {:instruction integer_max} {:instruction integer_dec} {:instruction 81} {:instruction float_stackdepth} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_sub} {:instruction float_sin} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_rot} {:instruction integer_dup_items} {:instruction in2} {:instruction float_yank} {:instruction 96.80697452437909} {:instruction integer_min} {:instruction integer_shove} {:instruction integer_yankdup} {:instruction 97.20027408926207} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_mod} {:instruction float_stackdepth} {:instruction integer_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction integer_max} {:instruction float_stackdepth} {:instruction float_mult} {:instruction float_cos} {:instruction float_mult} {:instruction float_mod} {:instruction -53.070917232121495} {:instruction float_shove} {:instruction float_mod} {:instruction -53.070917232121495} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_add} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_min} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction integer_yank} {:instruction float_dup} {:instruction float_flush} {:instruction integer_mod} {:instruction tag_float_78} {:instruction tag_float_257} {:instruction print_integer} {:instruction tag_float_78})
Best program: (integer_dup_items float_add float_max integer_max integer_dec 81 float_stackdepth float_swap integer_div in2 float_dup_times float_sub float_sin integer_sub float_sub integer_dec integer_rot integer_dup_items in2 float_yank 96.80697452437909 integer_min integer_shove integer_yankdup 97.20027408926207 integer_inc integer_max integer_shove integer_dup_times float_max integer_mod integer_div in2 float_dup_times float_dup_items float_mod float_stackdepth integer_mod in1 integer_flush float_max integer_max float_stackdepth float_mult float_cos float_mult float_mod -53.070917232121495 float_shove float_mod -53.070917232121495 float_mod in1 integer_flush in2 float_mult float_mult float_cos integer_fromfloat float_add float_add integer_sub float_sub float_add integer_sub float_sub integer_min tag_float_518 float_mult in1 integer_fromfloat integer_add float_swap float_swap float_dup float_flush print_integer integer_yank float_dup float_flush integer_mod tag_float_78 tag_float_257 print_integer tag_float_78)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 85
Size: 86
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2265.0703319000004
Median total errors in population: 281.16429999999997
Error averages by case: (76.3433678999985 11.177 90.58946699999969 11.362 54.90749809999957 11.142 65.82639740000049 10.101 92.4374288000018 11.295 75.19141100000054 11.234 84.85518079999889 11.219 89.74009429999906 11.316 83.58635730000026 11.197 77.9778021000006 11.389 66.18250490000068 11.265 77.48929419999952 11.382 95.01295449999874 11.181 72.38882720000151 11.178 76.57393229999924 11.413 67.77008370000145 10.241 67.13409939999949 11.121 92.7069504999995 10.194 90.79636849999878 10.09 90.08177199999899 11.335 88.05942330000084 11.298 77.02866989999909 11.249 92.5963186000003 11.304 61.84510310000062 10.877 81.19502510000066 11.194)
Error minima by case: (0.5753 10 0.5759 6 0.3722 3 0.8381 5 0.3687 6 0.0988 4 0.2563 5 0.276 6 0.1491 5 0.498 5 0.3954 5 0.3556 4 0.2337 9 0.3576 3 0.6257 10 0.2035 5 0.2941 9 0.2077 9 0.1022 8 0.4059 6 0.1968 5 0.2809 4 0.7929 6 0.3104 5 0.4029 5)
Average genome size in population (length): 80.332
Average program size in population (points): 81.332
Average percent parens in population: 0.013
Minimum age in population: 124.551137274959
Maximum age in population: 129.5801753392817
Average age in population: 127.4825598132771
Median age in population: 127.5155806941153
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.901
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.901
Total error diversity:				 0.127
Error (vector) diversity:			 0.129
Behavioral diversity:				 0.134
--- Run Statistics ---
Number of program evaluations used so far: 90000
Number of point (instruction) evaluations so far: 184486289
--- Timings ---
Current time: 1529615197976 milliseconds
Total Time:         314.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       120.2 seconds, 38.2%
Fitness Testing:    152.2 seconds, 48.3%
Report:              42.3 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 89
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 90
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 90
;;******************************
;; -*- Number IO problem report - generation 90
Test total error for best: 11478.9649
Test mean error for best: 5.73948
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction float_max} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_frominteger} {:instruction integer_dec} {:instruction in1} {:instruction float_yankdup} {:instruction float_shove} {:instruction integer_div} {:instruction in2} {:instruction float_add} {:instruction float_add} {:instruction integer_max} {:instruction float_swap} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_frominteger} {:instruction float_cos} {:instruction in1} {:instruction integer_rot} {:instruction float_add} {:instruction float_mult} {:instruction integer_max} {:instruction float_max} {:instruction -31} {:instruction float_mod} {:instruction 80} {:instruction integer_max} {:instruction integer_flush} {:instruction 82} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_add} {:instruction in2} {:instruction float_dup_times} {:instruction tag_integer_732} {:instruction 96.80697452437909} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_dec} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction in1} {:instruction float_mult} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_sub} {:instruction integer_max} {:instruction integer_div} {:instruction float_sin} {:instruction integer_yank} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_swap} {:instruction float_dup} {:instruction float_div} {:instruction float_swap} {:instruction print_integer} {:instruction float_sin} {:instruction float_rot} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_add} {:instruction float_shove} {:instruction in1} {:instruction float_rot})
Best program: (integer_pop float_max integer_pop integer_dup_times float_frominteger integer_dec in1 float_yankdup float_shove integer_div in2 float_add float_add integer_max float_swap integer_div integer_dup_times float_frominteger float_cos in1 integer_rot float_add float_mult integer_max float_max -31 float_mod 80 integer_max integer_flush 82 float_yankdup float_swap float_add in2 float_dup_times tag_integer_732 96.80697452437909 integer_sub float_sub integer_div integer_dup_times float_max float_swap float_mod in1 float_mod in1 float_dec float_max in2 float_mult float_mult float_cos integer_fromfloat in1 float_mult integer_sub integer_shove integer_sub integer_max integer_div float_sin integer_yank tag_float_518 float_mult in1 integer_fromfloat integer_add float_swap float_swap float_dup float_div float_swap print_integer float_sin float_rot integer_yank integer_fromfloat float_add float_shove in1 float_rot)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2461.0066505000004
Median total errors in population: 281.16429999999997
Error averages by case: (83.49543279999854 11.173 98.22208369999959 11.365 64.94587879999953 11.151 79.30950589999941 10.13 101.15473050000205 11.314 81.09735120000117 11.254 94.86984369999836 11.205 98.0335389999989 11.325 93.98905920000097 11.209 83.86425200000114 11.408 79.75472699999949 11.26 82.76264960000032 11.388 97.72749779999886 11.189 78.01182720000124 11.212 84.47303479999994 11.402 80.06547560000146 10.25 73.48592019999958 11.15 95.18175749999949 10.205 93.73032609999935 10.131 97.08210099999883 11.34 97.80822470000136 11.32 82.97631559999921 11.268 101.30402220000032 11.318 70.35798740000068 10.901 90.23410700000063 11.201)
Error minima by case: (0.4247 10 0.4241 8 0.3722 10 0.1619 8 0.3687 8 0.0988 10 0.2563 8 0.276 9 0.1491 9 0.498 10 0.3954 10 0.3556 10 0.2337 8 0.3576 10 0.3743 10 0.2035 9 0.2941 9 0.2077 8 0.1022 8 0.4059 8 0.1968 9 0.2809 10 0.2071 8 0.3104 9 0.4029 8)
Average genome size in population (length): 79.533
Average program size in population (points): 80.533
Average percent parens in population: 0.013
Minimum age in population: 126.5057986855472
Maximum age in population: 130.7044165027466
Average age in population: 128.9401982170533
Median age in population: 128.9792001897416
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.9
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.9
Total error diversity:				 0.114
Error (vector) diversity:			 0.116
Behavioral diversity:				 0.12
--- Run Statistics ---
Number of program evaluations used so far: 91000
Number of point (instruction) evaluations so far: 186477115
--- Timings ---
Current time: 1529615201405 milliseconds
Total Time:         318.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       121.6 seconds, 38.2%
Fitness Testing:    153.8 seconds, 48.3%
Report:              42.8 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 90
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 91
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 91
;;******************************
;; -*- Number IO problem report - generation 91
Test total error for best: 11480.9327
Test mean error for best: 5.74047
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction float_yank} {:instruction integer_mod} {:instruction 35.360537905272665} {:instruction float_add} {:instruction float_add} {:instruction float_mult} {:instruction in2} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_min} {:instruction integer_yank} {:instruction float_yankdup} {:instruction float_add} {:instruction in1} {:instruction in1} {:instruction float_tan} {:instruction float_rot} {:instruction float_add} {:instruction integer_max} {:instruction float_mod} {:instruction integer_shove} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_sub} {:instruction integer_mult} {:instruction float_sub} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_dec} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_mod} {:instruction float_swap} {:instruction integer_mod} {:instruction print_integer} {:instruction float_cos} {:instruction float_dup} {:instruction float_flush} {:instruction float_swap} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_yankdup} {:instruction float_flush} {:instruction tag_float_78} {:instruction integer_mod})
Best program: (integer_pop float_yank integer_mod 35.360537905272665 float_add float_add float_mult in2 float_frominteger integer_dup_items integer_swap float_min integer_yank float_yankdup float_add in1 in1 float_tan float_rot float_add integer_max float_mod integer_shove integer_flush float_swap integer_div in2 float_dup_times float_dup_items integer_sub integer_mult float_sub float_mod float_mod in1 float_mod in1 float_dec float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_sub float_add integer_sub float_sub integer_div float_sin float_max tag_float_518 float_mult in1 integer_fromfloat integer_add float_mod float_swap integer_mod print_integer float_cos float_dup float_flush float_swap print_integer tag_float_78 float_yankdup float_flush tag_float_78 integer_mod)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2699.0962431000007
Median total errors in population: 281.16429999999997
Error averages by case: (94.05283039999844 11.187 107.0666300999994 11.371 76.26038319999923 11.126 89.1106607999992 10.11 107.88144110000206 11.313 91.36836320000157 11.233 101.79313829999812 11.216 105.04704199999902 11.318 103.77919690000127 11.189 92.43276200000156 11.406 89.49166719999938 11.255 93.07305040000054 11.386 109.21092229999867 11.195 90.18896640000158 11.193 95.30928060000024 11.435 90.30028800000159 10.246 84.67268089999953 11.122 107.19619519999947 10.222 104.84765459999873 10.113 105.35296259999895 11.343 104.90879590000146 11.326 93.111259399999 11.247 108.05773750000031 11.306 80.50066240000086 10.853 97.17967170000067 11.191)
Error minima by case: (0.4247 10 0.4241 5 0.3722 2 0.1619 4 0.3687 5 0.0988 5 0.2563 3 0.276 4 0.1491 4 0.498 6 0.3954 4 0.3556 5 0.2337 10 0.3576 3 0.3743 10 0.2035 4 0.2941 9 0.2077 8 0.1022 8 0.4059 5 0.1968 5 0.2809 5 0.2071 5 0.3104 3 0.4029 4)
Average genome size in population (length): 79.987
Average program size in population (points): 80.987
Average percent parens in population: 0.013
Minimum age in population: 127.5955625361124
Maximum age in population: 132.252311113686
Average age in population: 130.4056950379651
Median age in population: 130.4656496072239
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.908
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.908
Total error diversity:				 0.13
Error (vector) diversity:			 0.132
Behavioral diversity:				 0.137
--- Run Statistics ---
Number of program evaluations used so far: 92000
Number of point (instruction) evaluations so far: 188479349
--- Timings ---
Current time: 1529615204752 milliseconds
Total Time:         321.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       122.9 seconds, 38.2%
Fitness Testing:    155.4 seconds, 48.3%
Report:              43.3 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 91
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 92
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 92
;;******************************
;; -*- Number IO problem report - generation 92
Test total error for best: 11466.625300000003
Test mean error for best: 5.73331
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction float_max} {:instruction float_dup} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction float_add} {:instruction integer_inc} {:instruction integer_max} {:instruction float_max} {:instruction float_max} {:instruction float_flush} {:instruction integer_dup_times} {:instruction float_frominteger} {:instruction integer_dec} {:instruction in1} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_rot} {:instruction float_add} {:instruction float_dec} {:instruction in1} {:instruction integer_yank} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 97.20027408926207} {:instruction integer_inc} {:instruction float_sub} {:instruction integer_inc} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_mod} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 94.56699356481795} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction integer_swap} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_dup_times} {:instruction float_mult} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction in1} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_rot} {:instruction float_dup} {:instruction print_integer} {:instruction float_div} {:instruction float_swap} {:instruction integer_dup_items} {:instruction float_shove})
Best program: (integer_dup_items float_max float_dup float_swap integer_fromfloat float_add integer_inc integer_max float_max float_max float_flush integer_dup_times float_frominteger integer_dec in1 integer_dec float_dup_items float_rot float_add float_dec in1 integer_yank integer_flush float_swap integer_div in2 float_dup_times float_dup_items 97.20027408926207 integer_inc float_sub integer_inc integer_dup_times float_max float_mod float_dup_times float_dup_items 94.56699356481795 integer_sub float_sub integer_div integer_swap float_max float_swap float_mod in1 float_mod float_dup_times float_mult float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat in1 float_mult float_sub float_add integer_sub float_sub integer_div float_sin float_max tag_float_518 float_mult in1 integer_fromfloat integer_add integer_yankdup float_rot float_dup print_integer float_div float_swap integer_dup_items float_shove)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 80
Size: 81
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2357.4540126
Median total errors in population: 281.16429999999997
Error averages by case: (80.8585291999988 11.173 91.48822139999997 11.338 59.98699769999962 11.121 73.0502228000001 10.118 96.2995120000014 11.292 79.71798000000078 11.229 91.29983319999887 11.161 92.37090329999927 11.285 88.0323306000002 11.171 82.49229600000075 11.382 73.41274310000014 11.235 80.97867319999985 11.38 94.08947669999914 11.194 77.35360240000117 11.198 82.15127499999967 11.405 72.69569440000109 10.232 67.01986119999962 11.142 91.75835919999967 10.217 90.37734189999959 10.147 93.93954219999917 11.307 92.86645430000094 11.276 81.61176499999922 11.249 96.43086960000028 11.278 64.8566749000006 10.885 85.72685330000047 11.173)
Error minima by case: (0.4247 10 0.4241 5 0.3722 2 0.1619 4 0.3687 5 0.0988 5 0.2563 3 0.276 5 0.1491 4 0.498 6 0.3954 4 0.3556 5 0.2337 10 0.3576 3 0.3743 10 0.2035 4 0.2941 9 0.2077 8 0.1022 7 0.4059 5 0.1968 4 0.2809 5 0.2071 5 0.3104 3 0.4029 4)
Average genome size in population (length): 79.74
Average program size in population (points): 80.74
Average percent parens in population: 0.013
Minimum age in population: 128.5955625361124
Maximum age in population: 133.9411562456485
Average age in population: 131.8039109426054
Median age in population: 131.8194473551615
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.928
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.928
Total error diversity:				 0.126
Error (vector) diversity:			 0.128
Behavioral diversity:				 0.133
--- Run Statistics ---
Number of program evaluations used so far: 93000
Number of point (instruction) evaluations so far: 190475384
--- Timings ---
Current time: 1529615208112 milliseconds
Total Time:         325.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       124.2 seconds, 38.2%
Fitness Testing:    157.1 seconds, 48.3%
Report:              43.7 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 92
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 93
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 93
;;******************************
;; -*- Number IO problem report - generation 93
Test total error for best: 11477.532300000006
Test mean error for best: 5.73877
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_dup} {:instruction float_swap} {:instruction float_max} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_add} {:instruction integer_dec} {:instruction in1} {:instruction integer_swap} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 96.80697452437909} {:instruction integer_rot} {:instruction float_sub} {:instruction integer_div} {:instruction integer_mod} {:instruction float_yank} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction integer_dup_times} {:instruction float_mod} {:instruction integer_dup_times} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_flush} {:instruction integer_min} {:instruction integer_dec} {:instruction float_max} {:instruction float_swap} {:instruction integer_shove} {:instruction in1} {:instruction float_sub} {:instruction float_dup_times} {:instruction float_max} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_max} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction tag_float_518} {:instruction float_flush} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_swap} {:instruction float_dup} {:instruction print_integer} {:instruction print_integer} {:instruction float_swap} {:instruction float_dup} {:instruction float_shove} {:instruction print_integer} {:instruction integer_dup_times} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction in1} {:instruction float_flush} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_shove} {:instruction float_dec})
Best program: (integer_sub float_dup float_swap float_max integer_pop integer_dup_times float_add integer_dec in1 integer_swap float_swap integer_div in2 float_dup_times float_dup_items 96.80697452437909 integer_rot float_sub integer_div integer_mod float_yank float_mod float_mod in1 integer_flush float_max in2 float_mult integer_dup_times float_mod integer_dup_times float_mult integer_yank integer_flush integer_min integer_dec float_max float_swap integer_shove in1 float_sub float_dup_times float_max float_mod in1 integer_flush float_max in2 float_mult float_max float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_sub integer_div float_sin float_max tag_float_518 float_flush in1 integer_fromfloat integer_add float_swap float_swap float_dup print_integer print_integer float_swap float_dup float_shove print_integer integer_dup_times float_flush print_integer float_swap in1 float_flush print_integer tag_float_78 float_shove float_dec)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 85
Size: 86
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2445.0154924000008
Median total errors in population: 281.16429999999997
Error averages by case: (86.20048679999846 11.181 95.43503659999983 11.353 67.55830259999915 11.127 78.62516289999928 10.12 98.64649190000164 11.283 83.65050250000122 11.241 93.66474309999846 11.219 95.48381879999897 11.298 91.54142860000073 11.176 85.98413500000123 11.406 78.70933119999944 11.251 84.49532500000008 11.4 95.12330379999868 11.18 80.14940300000148 11.218 87.6245848000001 11.428 79.28771950000153 10.235 66.3930014999995 11.145 93.02223409999947 10.204 93.03483139999915 10.137 96.2870186999989 11.333 95.0730523000011 11.303 83.73316749999904 11.271 98.36168230000033 11.299 72.88730620000085 10.88 87.15942230000066 11.196)
Error minima by case: (0.4247 9 0.4241 6 0.3722 2 0.1619 4 0.3687 6 0.0988 5 0.2563 4 0.276 6 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 8 0.3576 4 0.3743 9 0.2035 4 0.2941 9 0.2077 9 0.1022 7 0.4059 6 0.1968 5 0.2809 5 0.2071 6 0.3104 3 0.4029 4)
Average genome size in population (length): 79.414
Average program size in population (points): 80.414
Average percent parens in population: 0.013
Minimum age in population: 130.7439677538473
Maximum age in population: 135.1419241637663
Average age in population: 133.1911619394254
Median age in population: 133.2462948053831
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.912
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.912
Total error diversity:				 0.125
Error (vector) diversity:			 0.126
Behavioral diversity:				 0.129
--- Run Statistics ---
Number of program evaluations used so far: 94000
Number of point (instruction) evaluations so far: 192463640
--- Timings ---
Current time: 1529615211481 milliseconds
Total Time:         328.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       125.5 seconds, 38.2%
Fitness Testing:    158.7 seconds, 48.3%
Report:              44.1 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 93
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 94
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 94
;;******************************
;; -*- Number IO problem report - generation 94
Test total error for best: 11476.5633
Test mean error for best: 5.73828
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_shove} {:instruction tag_float_147} {:instruction float_add} {:instruction float_add} {:instruction integer_max} {:instruction float_mod} {:instruction integer_yank} {:instruction integer_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction in1} {:instruction integer_dec} {:instruction float_add} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 96.80697452437909} {:instruction float_dup_times} {:instruction integer_dec} {:instruction in1} {:instruction integer_div} {:instruction float_mod} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 97.20027408926207} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_add} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction integer_yank} {:instruction tag_float_518} {:instruction float_mult} {:instruction 49.98180337132831} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_swap} {:instruction print_integer} {:instruction tag_float_78})
Best program: (in1 integer_shove tag_float_147 float_add float_add integer_max float_mod integer_yank integer_swap float_frominteger integer_dec in1 integer_dec float_add integer_div in2 float_dup_times float_dup_items 96.80697452437909 float_dup_times integer_dec in1 integer_div float_mod float_dup_times float_dup_items 97.20027408926207 integer_sub float_sub integer_div integer_dup_times float_max float_swap float_mod in1 float_mod float_mod in1 float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_add integer_sub float_add integer_sub float_sub integer_div float_sin integer_yank tag_float_518 float_mult 49.98180337132831 float_mult in1 integer_fromfloat integer_add float_swap float_swap print_integer tag_float_78)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2319.6777274
Median total errors in population: 281.16429999999997
Error averages by case: (78.44222799999869 11.159 93.25946310000033 11.331 52.55524570000005 11.099 67.82940080000047 10.106 97.82217930000107 11.285 77.15898000000055 11.212 92.21957639999926 11.18 95.14705879999927 11.31 87.49874560000025 11.174 79.93629600000055 11.375 68.3115061000005 11.219 78.72825079999961 11.373 95.67413009999899 11.176 73.36996000000092 11.197 78.75752639999959 11.387 69.904446300001 10.208 60.45271629999954 11.13 94.08939729999958 10.199 89.9197765999997 10.122 94.79163109999921 11.305 93.75197030000054 11.274 78.55573129999922 11.232 97.1078269000003 11.276 59.38994470000013 10.867 88.61673950000058 11.191)
Error minima by case: (0.4247 9 0.4241 5 0.3722 2 0.1619 4 0.3687 5 0.0988 4 0.2563 5 0.276 5 0.1491 4 0.498 5 0.3954 4 0.3556 5 0.2337 8 0.3576 3 0.3743 10 0.2035 4 0.2941 8 0.2077 8 0.1022 7 0.4059 5 0.1968 4 0.2809 5 0.2071 5 0.3104 3 0.4029 5)
Average genome size in population (length): 78.915
Average program size in population (points): 79.915
Average percent parens in population: 0.013
Minimum age in population: 132.1951967168132
Maximum age in population: 137.0890630199011
Average age in population: 134.6565804351718
Median age in population: 134.7171569075259
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.906
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.906
Total error diversity:				 0.129
Error (vector) diversity:			 0.131
Behavioral diversity:				 0.137
--- Run Statistics ---
Number of program evaluations used so far: 95000
Number of point (instruction) evaluations so far: 194439605
--- Timings ---
Current time: 1529615214879 milliseconds
Total Time:         331.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       126.8 seconds, 38.2%
Fitness Testing:    160.4 seconds, 48.3%
Report:              44.6 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 94
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 95
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 95
;;******************************
;; -*- Number IO problem report - generation 95
Test total error for best: 11475.9327
Test mean error for best: 5.73797
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction tag_float_715} {:instruction integer_swap} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_stackdepth} {:instruction integer_dup_items} {:instruction integer_pop} {:instruction integer_swap} {:instruction float_frominteger} {:instruction in2} {:instruction float_frominteger} {:instruction integer_yankdup} {:instruction in1} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction integer_dec} {:instruction in1} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_mod} {:instruction float_mod} {:instruction float_sin} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction float_add} {:instruction float_dup} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction integer_yank} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_pop} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction float_flush} {:instruction integer_fromfloat} {:instruction integer_mult} {:instruction float_swap} {:instruction integer_max} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap})
Best program: (integer_pop tag_float_715 integer_swap integer_min float_frominteger float_pop float_stackdepth integer_dup_items integer_pop integer_swap float_frominteger in2 float_frominteger integer_yankdup in1 float_dup_times float_rot integer_swap integer_div in2 float_dup_times integer_dec in1 integer_flush float_swap integer_div in2 float_dup_times float_dup_items float_mod float_mod float_sin float_mod in1 integer_flush float_max float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub integer_swap float_add float_dup float_add integer_sub float_sub integer_div float_sin integer_yank tag_float_518 float_mult in1 integer_fromfloat integer_add float_swap float_pop float_dup float_flush print_integer float_flush integer_fromfloat integer_mult float_swap integer_max float_dup float_flush print_integer float_swap)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2300.0858993000006
Median total errors in population: 281.16429999999997
Error averages by case: (83.70887259999867 11.174 85.94802740000037 11.369 63.92232389999943 11.161 76.03330340000001 10.114 88.86078100000118 11.307 79.00645000000068 11.255 81.87182049999936 11.233 86.3163649999991 11.324 80.57244530000001 11.2 81.86025200000097 11.43 76.73593460000014 11.284 82.35278320000002 11.431 87.09477709999896 11.184 76.23382720000141 11.207 84.17801239999991 11.437 78.36339350000138 10.27 64.22355909999953 11.135 85.51801959999958 10.202 84.89133919999944 10.103 86.52023239999902 11.347 85.41071770000048 11.319 82.40306839999913 11.27 89.02901660000029 11.315 70.90892090000074 10.872 80.96865630000056 11.21)
Error minima by case: (0.4247 9 0.4241 10 0.3722 10 0.1619 8 0.3687 9 0.0988 10 0.2563 9 0.276 9 0.1491 10 0.498 10 0.3954 9 0.3556 10 0.2337 9 0.3576 10 0.3743 10 0.2035 9 0.2941 9 0.2077 8 0.1022 8 0.4059 9 0.1968 9 0.2809 10 0.2071 10 0.3104 8 0.4029 9)
Average genome size in population (length): 78.221
Average program size in population (points): 79.221
Average percent parens in population: 0.013
Minimum age in population: 133.3563675388955
Maximum age in population: 137.836862526582
Average age in population: 136.1007625022328
Median age in population: 136.1400380368776
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.918
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.918
Total error diversity:				 0.113
Error (vector) diversity:			 0.115
Behavioral diversity:				 0.12
--- Run Statistics ---
Number of program evaluations used so far: 96000
Number of point (instruction) evaluations so far: 196398075
--- Timings ---
Current time: 1529615218245 milliseconds
Total Time:         335.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       128.1 seconds, 38.2%
Fitness Testing:    162.0 seconds, 48.3%
Report:              45.0 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 95
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 96
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 96
;;******************************
;; -*- Number IO problem report - generation 96
Test total error for best: 11473.9649
Test mean error for best: 5.73698
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction in2} {:instruction float_dup_times} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction float_cos} {:instruction integer_rot} {:instruction float_sub} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_dec} {:instruction in1} {:instruction integer_dec} {:instruction float_dup_items} {:instruction integer_inc} {:instruction float_add} {:instruction float_dec} {:instruction in1} {:instruction integer_yank} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 96.80697452437909} {:instruction tagged_414} {:instruction float_sub} {:instruction integer_div} {:instruction float_dup_times} {:instruction float_max} {:instruction float_stackdepth} {:instruction float_mod} {:instruction in1} {:instruction integer_shove} {:instruction integer_shove} {:instruction float_dup_items} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction integer_sub} {:instruction integer_div} {:instruction float_add} {:instruction integer_sub} {:instruction float_rot} {:instruction integer_div} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_rot} {:instruction print_integer} {:instruction float_swap} {:instruction integer_add})
Best program: (float_yank in2 float_dup_times integer_dup_items integer_swap float_add float_inc in2 float_cos integer_rot float_sub integer_sub float_sub integer_dec in1 integer_dec float_dup_items integer_inc float_add float_dec in1 integer_yank integer_flush float_swap integer_div in2 float_dup_times float_dup_items 96.80697452437909 tagged_414 float_sub integer_div float_dup_times float_max float_stackdepth float_mod in1 integer_shove integer_shove float_dup_items float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult integer_sub integer_div float_add integer_sub float_rot integer_div in1 integer_fromfloat integer_add float_swap float_rot print_integer float_swap integer_add)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2517.779937500001
Median total errors in population: 281.16429999999997
Error averages by case: (89.4675216999987 11.209 98.19674519999994 11.397 69.50312199999959 11.115 77.95241569999993 10.152 101.22194150000132 11.35 86.54545920000126 11.292 94.517331999999 11.224 98.18862799999917 11.369 93.99557260000051 11.206 89.46906380000117 11.49 78.71935829999997 11.266 88.36222790000028 11.429 98.4022732999989 11.242 83.44055410000126 11.262 88.32431489999996 11.482 79.49050270000114 10.269 74.55103249999956 11.169 96.19097129999952 10.249 96.32618099999917 10.138 98.95475949999908 11.367 97.95906510000093 11.336 88.73874479999918 11.306 101.5638443000003 11.339 77.03360180000053 10.893 92.89370430000059 11.22)
Error minima by case: (0.4247 10 0.4241 3 0.3722 1 0.1619 2 0.3687 3 0.0988 2 0.2563 2 0.276 3 0.1491 2 0.498 3 0.3954 2 0.3556 2 0.2337 9 0.3576 1 0.3743 10 0.2035 2 0.2941 9 0.2077 9 0.1022 7 0.4059 3 0.1968 2 0.2809 2 0.2071 3 0.3104 2 0.4029 2)
Average genome size in population (length): 76.952
Average program size in population (points): 77.952
Average percent parens in population: 0.013
Minimum age in population: 135.0322950126498
Maximum age in population: 139.4523987198474
Average age in population: 137.5250250410391
Median age in population: 137.5474530802383
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.913
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.913
Total error diversity:				 0.12
Error (vector) diversity:			 0.122
Behavioral diversity:				 0.127
--- Run Statistics ---
Number of program evaluations used so far: 97000
Number of point (instruction) evaluations so far: 198324283
--- Timings ---
Current time: 1529615221664 milliseconds
Total Time:         338.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       129.4 seconds, 38.2%
Fitness Testing:    163.7 seconds, 48.3%
Report:              45.5 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 96
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 97
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 97
;;******************************
;; -*- Number IO problem report - generation 97
Test total error for best: 11473.9649
Test mean error for best: 5.73698
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_dup} {:instruction float_swap} {:instruction float_div} {:instruction integer_add} {:instruction float_max} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction float_frominteger} {:instruction integer_dec} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_add} {:instruction float_add} {:instruction in1} {:instruction float_rot} {:instruction float_add} {:instruction float_add} {:instruction integer_max} {:instruction float_mod} {:instruction 82} {:instruction float_yankdup} {:instruction float_min} {:instruction integer_max} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 94.56699356481795} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction integer_swap} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_div} {:instruction float_sin} {:instruction float_sin} {:instruction -9.219150571934833} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_yank} {:instruction float_sin} {:instruction integer_yank} {:instruction tag_float_518} {:instruction float_mult} {:instruction float_sin} {:instruction float_swap} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction -16.498177783361072} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction integer_dup_times} {:instruction float_dup} {:instruction print_integer} {:instruction print_integer} {:instruction tag_float_253} {:instruction float_shove} {:instruction tagged_578} {:instruction tag_float_148} {:instruction float_shove} {:instruction float_dup_times})
Best program: (integer_sub float_dup float_swap float_div integer_add float_max float_frominteger integer_dup_times float_frominteger integer_dec float_rot integer_swap integer_yank integer_dup_times integer_add float_add in1 float_rot float_add float_add integer_max float_mod 82 float_yankdup float_min integer_max in2 float_dup_times float_dup_items 94.56699356481795 integer_sub float_sub integer_div integer_swap float_max float_swap float_mod float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub integer_swap integer_div float_sin float_sin -9.219150571934833 integer_sub float_add integer_sub float_sub integer_yank float_sin integer_yank tag_float_518 float_mult float_sin float_swap in1 integer_fromfloat integer_add float_swap -16.498177783361072 float_dup float_flush print_integer integer_dup_times float_dup print_integer print_integer tag_float_253 float_shove tagged_578 tag_float_148 float_shove float_dup_times)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 85
Size: 86
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2527.2708955000007
Median total errors in population: 281.16429999999997
Error averages by case: (87.10359849999865 11.195 101.7436118 11.385 68.9223831999996 11.134 78.09327979999979 10.153 106.26817250000161 11.351 83.43856080000101 11.275 99.02953899999872 11.216 102.79726099999908 11.369 96.13762670000034 11.204 86.3152600000009 11.455 78.53271319999988 11.272 84.5862724 11.414 102.65394979999894 11.219 80.01939680000139 11.23 86.20926939999977 11.448 78.8032530000013 10.257 69.99500299999953 11.127 98.00174049999958 10.235 95.97139439999943 10.11 103.79176319999901 11.368 102.24978890000098 11.323 85.31938299999909 11.287 105.1883248000003 11.338 75.2366624000007 10.898 93.38468740000054 11.215)
Error minima by case: (0.4247 10 0.4241 6 0.3722 2 0.1619 4 0.3687 6 0.0988 5 0.2563 4 0.276 5 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 9 0.3576 4 0.3743 10 0.2035 4 0.2941 9 0.2077 9 0.1022 8 0.4059 6 0.1968 5 0.2809 5 0.2071 6 0.3104 3 0.4029 4)
Average genome size in population (length): 76.803
Average program size in population (points): 77.803
Average percent parens in population: 0.013
Minimum age in population: 136.4134615332223
Maximum age in population: 140.7325395920038
Average age in population: 138.9455423359468
Median age in population: 138.9766815994349
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.913
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.913
Total error diversity:				 0.137
Error (vector) diversity:			 0.139
Behavioral diversity:				 0.146
--- Run Statistics ---
Number of program evaluations used so far: 98000
Number of point (instruction) evaluations so far: 200246761
--- Timings ---
Current time: 1529615225112 milliseconds
Total Time:         342.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       130.8 seconds, 38.2%
Fitness Testing:    165.3 seconds, 48.3%
Report:              45.9 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 97
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 98
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 98
;;******************************
;; -*- Number IO problem report - generation 98
Test total error for best: 11476.5633
Test mean error for best: 5.73828
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_rot} {:instruction tag_float_715} {:instruction float_min} {:instruction integer_dup_times} {:instruction in1} {:instruction float_tan} {:instruction float_flush} {:instruction float_add} {:instruction integer_max} {:instruction float_mod} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dec} {:instruction in1} {:instruction integer_rot} {:instruction integer_mult} {:instruction float_add} {:instruction integer_max} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_frominteger} {:instruction float_mod} {:instruction in1} {:instruction integer_dup_items} {:instruction float_add} {:instruction float_shove} {:instruction integer_max} {:instruction float_mod} {:instruction 81} {:instruction float_yankdup} {:instruction float_yank} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mod} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mod} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_max} {:instruction integer_add} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_sin} {:instruction float_flush} {:instruction float_flush} {:instruction float_flush} {:instruction integer_mult} {:instruction float_swap} {:instruction integer_max} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap})
Best program: (integer_dec integer_swap integer_yank integer_rot tag_float_715 float_min integer_dup_times in1 float_tan float_flush float_add integer_max float_mod integer_shove float_yank integer_dec in1 integer_rot integer_mult float_add integer_max integer_dup integer_pop integer_dup_times float_frominteger float_mod in1 integer_dup_items float_add float_shove integer_max float_mod 81 float_yankdup float_yank integer_div in2 float_dup_times float_mod in1 integer_flush float_max in2 float_mult float_mod integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mod float_mult float_sub float_add integer_sub float_max integer_add float_mult in1 integer_fromfloat integer_add float_swap float_sin float_flush float_flush float_flush integer_mult float_swap integer_max float_dup float_flush print_integer float_swap)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2306.7257613
Median total errors in population: 281.16429999999997
Error averages by case: (79.49244789999874 11.183 88.2042891000002 11.333 60.37660579999958 11.124 71.31777530000024 10.118 91.91227270000115 11.268 77.41185720000072 11.244 89.10319929999889 11.196 90.45350379999935 11.281 85.66836990000027 11.167 79.69626000000066 11.413 70.5027503000004 11.261 77.99442759999975 11.379 91.48806869999912 11.187 74.12246960000117 11.205 79.32688949999955 11.434 72.55282530000113 10.251 70.82854649999948 11.134 89.17427629999955 10.21 88.10757729999943 10.123 88.75715109999926 11.304 89.37216520000086 11.28 78.81434929999926 11.253 93.46270180000033 11.284 68.12775860000055 10.881 83.7642232000005 11.18)
Error minima by case: (0.4247 10 0.4241 5 0.3722 3 0.1619 4 0.3687 5 0.0988 4 0.2563 4 0.276 5 0.1491 4 0.498 6 0.3954 4 0.3556 4 0.2337 9 0.3576 3 0.3743 10 0.2035 4 0.2941 9 0.2077 9 0.1022 8 0.4059 5 0.1968 4 0.2809 4 0.2071 5 0.3104 3 0.4029 4)
Average genome size in population (length): 77.056
Average program size in population (points): 78.056
Average percent parens in population: 0.013
Minimum age in population: 137.8379863604172
Maximum age in population: 142.2802122606451
Average age in population: 140.4150452343186
Median age in population: 140.4882176766368
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.905
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.905
Total error diversity:				 0.12
Error (vector) diversity:			 0.121
Behavioral diversity:				 0.127
--- Run Statistics ---
Number of program evaluations used so far: 99000
Number of point (instruction) evaluations so far: 202175577
--- Timings ---
Current time: 1529615228550 milliseconds
Total Time:         345.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       132.1 seconds, 38.2%
Fitness Testing:    166.9 seconds, 48.3%
Report:              46.4 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 98
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 99
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 99
;;******************************
;; -*- Number IO problem report - generation 99
Test total error for best: 11477.1489
Test mean error for best: 5.73857
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_pop} {:instruction tag_float_715} {:instruction integer_dec} {:instruction float_min} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_yankdup} {:instruction in2} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction in2} {:instruction float_yank} {:instruction integer_pop} {:instruction float_dup_items} {:instruction float_max} {:instruction float_shove} {:instruction -32} {:instruction float_shove} {:instruction integer_swap} {:instruction in2} {:instruction integer_div} {:instruction in1} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_mod} {:instruction in1} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mod} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_add} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_add} {:instruction integer_mult} {:instruction float_sub} {:instruction integer_div} {:instruction integer_add} {:instruction integer_rot} {:instruction float_cos} {:instruction float_sub} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_sub} {:instruction tag_float_710} {:instruction tag_float_78} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_inc} {:instruction integer_shove} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_shove} {:instruction float_flush} {:instruction print_integer} {:instruction float_flush} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_321} {:instruction print_integer} {:instruction float_min} {:instruction float_shove} {:instruction print_integer} {:instruction float_swap})
Best program: (integer_pop integer_pop tag_float_715 integer_dec float_min integer_min integer_swap integer_yankdup in2 float_frominteger float_frominteger in2 float_yank integer_pop float_dup_items float_max float_shove -32 float_shove integer_swap in2 integer_div in1 float_max float_swap float_mod float_dup_items float_mod in1 float_max in2 float_mult float_mod float_cos integer_fromfloat float_add integer_sub float_mult integer_dup_times float_sub float_add integer_mult float_sub integer_div integer_add integer_rot float_cos float_sub tag_float_518 float_mult in1 integer_fromfloat integer_add float_sub tag_float_710 tag_float_78 float_shove float_dup_times tag_float_22 float_shove float_inc integer_shove float_dup float_flush print_integer float_swap float_dup float_flush print_integer tag_float_78 float_shove float_flush print_integer float_flush print_integer tag_float_78 float_shove float_dup_times tag_float_22 float_shove float_dup_times tag_float_321 print_integer float_min float_shove print_integer float_swap)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 87
Size: 88
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2120.5906548000007
Median total errors in population: 281.16429999999997
Error averages by case: (75.41521289999868 11.172 75.92328430000111 11.37 61.3924101999995 11.155 69.09012760000047 10.139 78.6065251000002 11.31 72.00043800000022 11.254 74.17561620000002 11.238 76.39635139999936 11.326 72.90025659999955 11.212 73.8677300000002 11.412 69.42773840000055 11.262 73.51293839999941 11.392 83.80058259999886 11.198 70.61019120000125 11.205 74.6530515999993 11.392 70.32698600000134 10.257 66.5522921999995 11.153 81.58865019999952 10.21 80.43381249999972 10.135 76.44879069999926 11.346 75.40113709999976 11.327 73.76915829999929 11.268 78.70297130000033 11.328 65.9455264000006 10.919 72.44887560000058 11.22)
Error minima by case: (0.4247 10 0.4241 9 0.3722 10 0.1619 8 0.3687 9 0.0988 10 0.2563 8 0.276 9 0.1491 10 0.498 10 0.3954 9 0.3556 11 0.2337 9 0.3576 10 0.3743 10 0.2035 8 0.2941 9 0.2077 9 0.1022 8 0.4059 9 0.1968 9 0.2809 9 0.2071 9 0.3104 7 0.4029 10)
Average genome size in population (length): 76.857
Average program size in population (points): 77.857
Average percent parens in population: 0.013
Minimum age in population: 139.1532360362799
Maximum age in population: 143.8137683371821
Average age in population: 141.8542165197969
Median age in population: 141.8573887229646
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.887
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.887
Total error diversity:				 0.095
Error (vector) diversity:			 0.099
Behavioral diversity:				 0.102
--- Run Statistics ---
Number of program evaluations used so far: 100000
Number of point (instruction) evaluations so far: 204099299
--- Timings ---
Current time: 1529615231978 milliseconds
Total Time:         348.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       133.5 seconds, 38.3%
Fitness Testing:    168.4 seconds, 48.3%
Report:              46.9 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 99
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 100
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 100
;;******************************
;; -*- Number IO problem report - generation 100
Test total error for best: 11476.5633
Test mean error for best: 5.73828
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_shove} {:instruction integer_dec} {:instruction in2} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_min} {:instruction integer_yank} {:instruction float_yankdup} {:instruction float_add} {:instruction in1} {:instruction in1} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_sub} {:instruction integer_dec} {:instruction in1} {:instruction integer_dec} {:instruction float_dup_items} {:instruction integer_inc} {:instruction float_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_yank} {:instruction float_mod} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 96.60662134072248} {:instruction integer_inc} {:instruction float_sub} {:instruction integer_div} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction integer_swap} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_rot} {:instruction in2} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_mod} {:instruction float_mod} {:instruction float_stackdepth} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction float_dup_times} {:instruction float_mult} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction float_sin} {:instruction float_max} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction tag_float_558} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction integer_max} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap})
Best program: (float_dup_times float_shove integer_dec in2 float_frominteger integer_dup_items integer_swap float_min integer_yank float_yankdup float_add in1 in1 float_yankdup float_swap integer_div in2 float_sub integer_dec in1 integer_dec float_dup_items integer_inc float_add float_dec integer_min float_yank float_mod float_dup_times float_dup_items 96.60662134072248 integer_inc float_sub integer_div float_max float_swap float_mod integer_swap float_max float_swap float_mod in1 float_mod float_rot in2 integer_dup_times float_dup_items float_mod float_mod float_stackdepth float_mod in1 integer_flush float_max float_dup_times float_mult float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_sub integer_div float_sin float_max float_sin float_max integer_dup_times integer_sub tag_float_558 float_mult in1 integer_fromfloat integer_add float_swap integer_max float_dup float_flush print_integer float_swap)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 89
Size: 90
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2675.6897158000006
Median total errors in population: 281.16429999999997
Error averages by case: (96.73614669999847 11.214 102.92257759999957 11.402 75.05780019999928 11.158 89.3228987999988 10.152 106.10129420000197 11.335 92.73499200000191 11.284 99.89564909999817 11.229 103.23091199999895 11.353 98.44637040000107 11.216 95.28981400000183 11.465 89.75375919999888 11.291 94.85402880000086 11.427 105.85746469999873 11.23 88.87217200000148 11.25 96.28776100000046 11.479 90.39321800000151 10.291 82.99563609999953 11.163 102.52709719999949 10.237 99.21828379999882 10.145 103.59807399999887 11.369 102.53546080000139 11.344 95.5167649999991 11.309 106.40265140000032 11.341 81.27800640000085 10.909 98.02888240000064 11.239)
Error minima by case: (0.4247 10 0.4241 5 0.3722 2 0.1619 4 0.3687 5 0.0988 3 0.2563 3 0.276 4 0.1491 4 0.498 5 0.3954 4 0.3556 3 0.2337 9 0.3576 2 0.3743 11 0.2035 4 0.2941 10 0.2077 8 0.1022 8 0.4059 5 0.1968 5 0.2809 4 0.2071 5 0.3104 3 0.4029 4)
Average genome size in population (length): 76.528
Average program size in population (points): 77.528
Average percent parens in population: 0.013
Minimum age in population: 140.1532360362799
Maximum age in population: 145.1315423776498
Average age in population: 143.2935818831076
Median age in population: 143.3204426403386
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.902
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.902
Total error diversity:				 0.112
Error (vector) diversity:			 0.114
Behavioral diversity:				 0.118
--- Run Statistics ---
Number of program evaluations used so far: 101000
Number of point (instruction) evaluations so far: 206014476
--- Timings ---
Current time: 1529615235334 milliseconds
Total Time:         352.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       134.8 seconds, 38.3%
Fitness Testing:    170.0 seconds, 48.3%
Report:              47.4 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 100
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 101
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 101
;;******************************
;; -*- Number IO problem report - generation 101
Test total error for best: 11488.5633
Test mean error for best: 5.74428
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_rot} {:instruction integer_fromfloat} {:instruction integer_dec} {:instruction integer_rot} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_sub} {:instruction float_sin} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_dec} {:instruction float_min} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction in2} {:instruction float_dup_times} {:instruction float_sub} {:instruction integer_div} {:instruction float_dup_items} {:instruction 97.20027408926207} {:instruction integer_sub} {:instruction float_sub} {:instruction in2} {:instruction integer_dup_times} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction in2} {:instruction float_dup_times} {:instruction float_sub} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_mod} {:instruction integer_swap} {:instruction float_mod} {:instruction integer_pop} {:instruction integer_mult} {:instruction float_max} {:instruction in2} {:instruction integer_sub} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_sin} {:instruction tag_float_518} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction in1} {:instruction float_flush} {:instruction float_rot} {:instruction tag_float_78} {:instruction float_shove} {:instruction in1})
Best program: (float_dup_times float_rot integer_fromfloat integer_dec integer_rot float_yankdup float_swap integer_div in2 float_dup_times float_sub float_sin integer_sub float_sub integer_dec float_min integer_dup_items in1 integer_dup_times float_max float_swap in2 float_dup_times float_sub integer_div float_dup_items 97.20027408926207 integer_sub float_sub in2 integer_dup_times integer_div integer_dup_times float_max float_swap in2 float_dup_times float_sub integer_div integer_dup_times float_max float_swap float_mod float_dup_items float_mod integer_swap float_mod integer_pop integer_mult float_max in2 integer_sub float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_sub integer_div float_sin float_sin tag_float_518 integer_sub integer_swap integer_div float_sin float_max tag_float_518 float_mult in1 integer_fromfloat integer_add float_flush print_integer float_swap in1 float_flush float_rot tag_float_78 float_shove in1)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2504.7643949000008
Median total errors in population: 281.16429999999997
Error averages by case: (96.92921599999855 11.22 95.27897740000014 11.378 64.40947859999982 11.124 77.72319369999981 10.129 99.14824810000107 11.316 92.46185720000139 11.272 93.38881409999921 11.224 95.67049119999932 11.36 89.58992560000043 11.187 94.43126800000131 11.453 78.52711849999986 11.278 94.39262800000036 11.412 92.92105049999898 11.229 88.0553240000012 11.211 96.86612410000016 11.488 80.09194990000101 10.261 70.21991179999954 11.154 91.37079979999956 10.255 89.19486099999959 10.146 94.91982959999936 11.369 94.77447900000075 11.315 94.70982119999911 11.273 98.4724028000003 11.326 73.04083440000042 10.855 90.74679040000058 11.194)
Error minima by case: (0.4247 9 0.4241 6 0.3722 2 0.1619 4 0.3687 6 0.0988 5 0.2563 3 0.276 5 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 10 0.3576 4 0.3743 11 0.2035 4 0.2941 9 0.2077 8 0.1022 8 0.4059 6 0.1968 5 0.2809 5 0.2071 6 0.3104 3 0.4029 4)
Average genome size in population (length): 75.942
Average program size in population (points): 76.942
Average percent parens in population: 0.013
Minimum age in population: 142.0281329153332
Maximum age in population: 146.6627376986649
Average age in population: 144.7804997268514
Median age in population: 144.8361742278966
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.922
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.922
Total error diversity:				 0.136
Error (vector) diversity:			 0.139
Behavioral diversity:				 0.146
--- Run Statistics ---
Number of program evaluations used so far: 102000
Number of point (instruction) evaluations so far: 207914644
--- Timings ---
Current time: 1529615238682 milliseconds
Total Time:         355.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       136.1 seconds, 38.3%
Fitness Testing:    171.6 seconds, 48.3%
Report:              47.8 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 101
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 102
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 102
;;******************************
;; -*- Number IO problem report - generation 102
Test total error for best: 11478.9649
Test mean error for best: 5.73948
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mult} {:instruction tag_float_715} {:instruction integer_pop} {:instruction float_dup_times} {:instruction float_shove} {:instruction integer_dec} {:instruction float_min} {:instruction integer_dup_times} {:instruction integer_min} {:instruction print_float} {:instruction float_max} {:instruction tag_float_715} {:instruction float_min} {:instruction integer_dec} {:instruction in1} {:instruction float_tan} {:instruction float_add} {:instruction float_mod} {:instruction float_dup_items} {:instruction integer_inc} {:instruction integer_min} {:instruction integer_max} {:instruction integer_max} {:instruction float_dup_times} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_sub} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_min} {:instruction 97.20027408926207} {:instruction integer_sub} {:instruction float_sub} {:instruction in2} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 97.20027408926207} {:instruction integer_inc} {:instruction float_sub} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_dec} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction in1} {:instruction float_mult} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_max} {:instruction float_max} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_dec} {:instruction print_integer} {:instruction float_swap} {:instruction float_max})
Best program: (float_mult tag_float_715 integer_pop float_dup_times float_shove integer_dec float_min integer_dup_times integer_min print_float float_max tag_float_715 float_min integer_dec in1 float_tan float_add float_mod float_dup_items integer_inc integer_min integer_max integer_max float_dup_times integer_div in2 float_dup_times float_sub integer_div integer_dup_times float_min 97.20027408926207 integer_sub float_sub in2 integer_dup_times float_dup_times float_dup_items 97.20027408926207 integer_inc float_sub integer_div integer_dup_times float_max float_mod in1 float_mod in1 float_dec float_max in2 float_mult float_mult float_cos integer_fromfloat in1 float_mult integer_sub float_add integer_sub integer_max float_max tag_float_518 float_mult in1 integer_fromfloat integer_add float_swap float_dec print_integer float_swap float_max)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2882.937938600001
Median total errors in population: 281.16429999999997
Error averages by case: (100.54892659999855 11.235 116.63096549999938 11.451 81.49865189999933 11.174 91.99297239999898 10.175 117.99210620000196 11.394 96.14685720000188 11.327 112.75721709999809 11.285 115.70472399999905 11.401 111.27454210000107 11.26 97.83576200000182 11.514 92.65903059999903 11.328 97.77959020000065 11.457 118.81727679999894 11.247 92.54732400000148 11.268 99.68706520000039 11.5 94.14737950000138 10.316 94.03322429999957 11.179 116.8357015999996 10.273 111.80678919999878 10.157 115.10210849999898 11.428 114.16363080000137 11.399 97.75343719999896 11.335 118.1964634000003 11.394 87.86846770000082 10.933 110.47772460000054 11.25)
Error minima by case: (0.4247 10 0.4241 8 0.3722 5 0.1619 7 0.3687 8 0.0988 8 0.2563 6 0.276 8 0.1491 6 0.498 9 0.3954 7 0.3556 8 0.2337 9 0.3576 6 0.3743 10 0.2035 7 0.2941 10 0.2077 8 0.1022 8 0.4059 8 0.1968 7 0.2809 8 0.2071 8 0.3104 6 0.4029 6)
Average genome size in population (length): 75.88
Average program size in population (points): 76.88
Average percent parens in population: 0.013
Minimum age in population: 143.0281329153332
Maximum age in population: 148.0236731018183
Average age in population: 146.2152167769611
Median age in population: 146.2605776686458
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.905
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.905
Total error diversity:				 0.11
Error (vector) diversity:			 0.112
Behavioral diversity:				 0.118
--- Run Statistics ---
Number of program evaluations used so far: 103000
Number of point (instruction) evaluations so far: 209813289
--- Timings ---
Current time: 1529615241982 milliseconds
Total Time:         358.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       137.4 seconds, 38.3%
Fitness Testing:    173.1 seconds, 48.2%
Report:              48.3 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 102
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 103
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 103
;;******************************
;; -*- Number IO problem report - generation 103
Test total error for best: 11475.9327
Test mean error for best: 5.73797
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_tan} {:instruction integer_add} {:instruction integer_dup_items} {:instruction float_tan} {:instruction integer_add} {:instruction tag_float_715} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_max} {:instruction float_sub} {:instruction integer_max} {:instruction float_min} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_dec} {:instruction in1} {:instruction float_dup_items} {:instruction integer_dec} {:instruction in1} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_max} {:instruction float_cos} {:instruction integer_dup_items} {:instruction float_max} {:instruction float_inc} {:instruction integer_max} {:instruction integer_min} {:instruction in1} {:instruction float_inc} {:instruction integer_pop} {:instruction integer_div} {:instruction 87.35510492351582} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction integer_div} {:instruction float_min} {:instruction float_add} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction 81} {:instruction float_yankdup} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_div} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 96.80697452437909} {:instruction integer_sub} {:instruction float_sub} {:instruction float_max} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_add} {:instruction integer_sub} {:instruction float_add} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction integer_swap} {:instruction tag_float_78} {:instruction integer_sub} {:instruction integer_mult} {:instruction tag_float_22} {:instruction float_shove} {:instruction integer_min} {:instruction print_integer} {:instruction float_tan} {:instruction float_dup_times} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_321})
Best program: (float_tan integer_add integer_dup_items float_tan integer_add tag_float_715 integer_dup_items integer_min integer_max float_sub integer_max float_min integer_dup_items integer_min integer_dec in1 float_dup_items integer_dec in1 in2 float_yankdup integer_dup_items integer_swap integer_max float_cos integer_dup_items float_max float_inc integer_max integer_min in1 float_inc integer_pop integer_div 87.35510492351582 float_swap integer_div in2 float_dup_times float_swap integer_div in2 integer_div float_min float_add float_mod in1 float_mod in1 81 float_yankdup integer_mod float_dec integer_div float_dup_times float_dup_items 96.80697452437909 integer_sub float_sub float_max float_mod in1 float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_add integer_sub float_add tag_float_518 float_mult in1 integer_fromfloat integer_add float_swap float_dup float_flush integer_swap tag_float_78 integer_sub integer_mult tag_float_22 float_shove integer_min print_integer float_tan float_dup_times tag_float_22 float_shove float_dup_times tag_float_321)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 97
Size: 98
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2172.441322100001
Median total errors in population: 281.16429999999997
Error averages by case: (76.09371439999839 11.175 80.64024280000044 11.366 60.374054199999286 11.149 69.68270860000004 10.157 82.81776500000095 11.314 74.21045000000059 11.259 80.7546624999991 11.206 79.50681939999909 11.33 76.42329140000015 11.203 76.3417540000005 11.412 70.01075910000021 11.258 75.50042759999955 11.384 82.44841079999874 11.185 73.4231848000015 11.239 75.65938039999936 11.38 70.61537770000157 10.251 69.53024119999947 11.137 80.51637429999946 10.201 80.26604439999954 10.117 81.33599879999896 11.338 80.31952730000054 11.309 75.57291109999912 11.274 82.93306590000032 11.32 64.78037600000084 10.935 75.56978040000064 11.215)
Error minima by case: (0.4247 10 0.4241 10 0.3722 10 0.1619 8 0.3687 9 0.0988 10 0.2563 9 0.276 9 0.1491 9 0.498 9 0.3954 9 0.3556 10 0.2337 9 0.3576 10 0.3743 9 0.2035 8 0.2941 9 0.2077 9 0.1022 8 0.4059 8 0.1968 10 0.2809 10 0.2071 9 0.3104 8 0.4029 8)
Average genome size in population (length): 75.601
Average program size in population (points): 76.601
Average percent parens in population: 0.013
Minimum age in population: 145.063219566016
Maximum age in population: 149.4173323933822
Average age in population: 147.6403159437125
Median age in population: 147.677814585227
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.888
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.888
Total error diversity:				 0.107
Error (vector) diversity:			 0.108
Behavioral diversity:				 0.113
--- Run Statistics ---
Number of program evaluations used so far: 104000
Number of point (instruction) evaluations so far: 211704786
--- Timings ---
Current time: 1529615245420 milliseconds
Total Time:         362.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       138.8 seconds, 38.3%
Fitness Testing:    174.7 seconds, 48.2%
Report:              48.7 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 103
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 104
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 104
;;******************************
;; -*- Number IO problem report - generation 104
Test total error for best: 11475.9327
Test mean error for best: 5.73797
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction float_add} {:instruction in1} {:instruction integer_div} {:instruction float_add} {:instruction integer_min} {:instruction float_mod} {:instruction 81} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction 96.80697452437909} {:instruction integer_min} {:instruction integer_shove} {:instruction float_max} {:instruction 97.20027408926207} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_mult} {:instruction float_rot} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_mod} {:instruction float_mod} {:instruction float_stackdepth} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_add} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction in1} {:instruction float_mult} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_rot} {:instruction float_dup} {:instruction print_integer} {:instruction float_div} {:instruction float_swap})
Best program: (float_dup_times float_rot integer_swap integer_pop integer_dup_times float_yankdup float_add in1 integer_div float_add integer_min float_mod 81 float_yankdup float_swap integer_div in2 float_min integer_dup_items float_yankdup float_dup_times 96.80697452437909 integer_min integer_shove float_max 97.20027408926207 integer_inc integer_max integer_shove integer_dup_times float_max float_mult float_rot in2 float_dup_times float_dup_items float_mod float_mod float_stackdepth float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_add float_mult float_sub float_add float_mult float_mult float_cos integer_fromfloat in1 float_mult integer_sub float_add integer_sub integer_sub float_sub integer_div float_sin float_max tag_float_518 float_mult in1 integer_fromfloat integer_add integer_yankdup float_rot float_dup print_integer float_div float_swap)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2460.673735900001
Median total errors in population: 281.16429999999997
Error averages by case: (79.57417379999863 11.216 99.76136790000021 11.446 64.57089439999949 11.153 71.71092739999982 10.166 102.83182470000136 11.384 72.71924040000073 11.294 98.19126249999879 11.265 99.45960399999899 11.411 95.74523930000049 11.249 74.9022320000006 11.483 72.31313159999988 11.305 75.28000519999965 11.448 108.98334529999869 11.235 68.9071184000013 11.246 78.03352079999956 11.47 73.52943900000128 10.288 85.9263881999995 11.138 106.8005358999995 10.255 107.54426959999863 10.138 100.51359789999893 11.423 99.4219872000007 11.38 75.50703469999911 11.318 102.9615449000003 11.393 72.0831104000007 10.925 95.1119404000006 11.261)
Error minima by case: (0.4247 10 0.4241 5 0.3722 2 0.1619 4 0.3687 5 0.0988 5 0.2563 4 0.276 5 0.1491 4 0.498 6 0.3954 4 0.3556 5 0.2337 9 0.3576 3 0.3743 10 0.2035 4 0.2941 9 0.2077 8 0.1022 8 0.4059 5 0.1968 4 0.2809 5 0.2071 5 0.3104 3 0.4029 4)
Average genome size in population (length): 74.828
Average program size in population (points): 75.828
Average percent parens in population: 0.013
Minimum age in population: 146.5747257437693
Maximum age in population: 150.7485613311081
Average age in population: 149.0952815359741
Median age in population: 149.1588222901641
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.902
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.902
Total error diversity:				 0.115
Error (vector) diversity:			 0.119
Behavioral diversity:				 0.125
--- Run Statistics ---
Number of program evaluations used so far: 105000
Number of point (instruction) evaluations so far: 213576797
--- Timings ---
Current time: 1529615248906 milliseconds
Total Time:         365.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       140.1 seconds, 38.3%
Fitness Testing:    176.4 seconds, 48.2%
Report:              49.2 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 104
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 105
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 105
;;******************************
;; -*- Number IO problem report - generation 105
Test total error for best: 11477.1489
Test mean error for best: 5.73857
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction 35.77542359015047} {:instruction float_add} {:instruction float_add} {:instruction float_mult} {:instruction in2} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_yank} {:instruction integer_div} {:instruction in1} {:instruction in1} {:instruction integer_div} {:instruction in2} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_div} {:instruction integer_dup_times} {:instruction integer_max} {:instruction in1} {:instruction integer_pop} {:instruction float_mod} {:instruction -53.070917232121495} {:instruction float_max} {:instruction integer_dup_times} {:instruction float_tan} {:instruction 50} {:instruction integer_div} {:instruction float_mod} {:instruction float_stackdepth} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction tag_float_518} {:instruction integer_min} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_mod} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction float_dup_times} {:instruction tag_float_78} {:instruction tag_float_225} {:instruction print_integer} {:instruction tag_float_9956})
Best program: (integer_dec integer_dec float_dec 35.77542359015047 float_add float_add float_mult in2 float_frominteger integer_dup_items integer_swap integer_flush float_swap integer_div in2 float_yank integer_div in1 in1 integer_div in2 integer_div in2 float_dup_times float_swap integer_div in2 float_dup_times float_pop integer_div integer_dup_times integer_max in1 integer_pop float_mod -53.070917232121495 float_max integer_dup_times float_tan 50 integer_div float_mod float_stackdepth float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_sub integer_div float_sin float_max tag_float_518 integer_min tag_float_518 float_mult in1 integer_fromfloat integer_add float_mod float_swap float_dup float_flush float_dup_times tag_float_78 tag_float_225 print_integer tag_float_9956)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2524.8966277000004
Median total errors in population: 281.16429999999997
Error averages by case: (89.36062559999854 11.209 94.58066399999983 11.427 74.55489439999945 11.154 83.68776549999954 10.168 96.74411230000155 11.365 84.71206680000108 11.298 91.67469319999888 11.255 94.93768269999903 11.377 91.49591050000046 11.238 86.70177400000107 11.465 85.09913159999964 11.296 86.99856120000017 11.429 101.52747009999884 11.235 82.23853600000129 11.263 88.93277219999995 11.456 86.14103200000146 10.29 85.31133779999955 11.162 99.35017869999952 10.251 98.72872389999894 10.134 93.42530109999899 11.391 94.25963600000111 11.367 87.00222569999913 11.32 97.6742581000003 11.365 80.48380000000068 10.939 91.16847430000065 11.251)
Error minima by case: (0.4247 10 0.4241 5 0.3722 3 0.1619 4 0.3687 5 0.0988 5 0.2563 4 0.276 5 0.1491 4 0.498 6 0.3954 4 0.3556 4 0.2337 9 0.3576 4 0.3743 11 0.2035 4 0.2941 9 0.2077 9 0.1022 7 0.4059 5 0.1968 4 0.2809 5 0.2071 5 0.3104 4 0.4029 4)
Average genome size in population (length): 75.056
Average program size in population (points): 76.056
Average percent parens in population: 0.013
Minimum age in population: 148.0659904583264
Maximum age in population: 152.2998868156236
Average age in population: 150.5653571890306
Median age in population: 150.6009136867393
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.892
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.892
Total error diversity:				 0.112
Error (vector) diversity:			 0.114
Behavioral diversity:				 0.119
--- Run Statistics ---
Number of program evaluations used so far: 106000
Number of point (instruction) evaluations so far: 215454595
--- Timings ---
Current time: 1529615252365 milliseconds
Total Time:         369.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       141.5 seconds, 38.3%
Fitness Testing:    178.0 seconds, 48.2%
Report:              49.7 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 105
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 106
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 106
;;******************************
;; -*- Number IO problem report - generation 106
Test total error for best: 11475.9327
Test mean error for best: 5.73797
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction float_add} {:instruction float_add} {:instruction integer_max} {:instruction integer_dec} {:instruction 81} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_max} {:instruction integer_pop} {:instruction integer_mult} {:instruction float_frominteger} {:instruction integer_dec} {:instruction in1} {:instruction integer_sub} {:instruction float_rot} {:instruction integer_inc} {:instruction float_add} {:instruction float_frominteger} {:instruction float_cos} {:instruction in1} {:instruction integer_rot} {:instruction float_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_swap} {:instruction float_shove} {:instruction in1} {:instruction in1} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 94.56699356481795} {:instruction integer_min} {:instruction float_sub} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_sin} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_add} {:instruction integer_sub} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction in1} {:instruction float_mult} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_sub} {:instruction integer_max} {:instruction float_flush} {:instruction integer_yank} {:instruction integer_yank} {:instruction tag_float_518} {:instruction integer_yankdup} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_swap} {:instruction float_dup} {:instruction float_min} {:instruction float_swap} {:instruction print_integer} {:instruction float_sin} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_fromfloat})
Best program: (integer_dup_items float_add float_add integer_max integer_dec 81 float_stackdepth float_max float_max integer_pop integer_mult float_frominteger integer_dec in1 integer_sub float_rot integer_inc float_add float_frominteger float_cos in1 integer_rot float_add float_shove float_dec float_swap float_shove in1 in1 float_yankdup integer_dup integer_div in2 float_dup_times float_dup_items 94.56699356481795 integer_min float_sub integer_div integer_dup_times float_max float_swap float_mod in1 float_sin float_mod in1 integer_flush float_max float_max in2 float_mult float_mult float_cos integer_fromfloat float_add integer_sub float_mult float_mult float_sub float_add integer_mult float_mult float_cos integer_fromfloat in1 float_mult integer_sub integer_shove integer_sub integer_max float_flush integer_yank integer_yank tag_float_518 integer_yankdup in1 integer_fromfloat integer_add float_swap float_swap float_dup float_min float_swap print_integer float_sin float_rot integer_mult integer_fromfloat)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 89
Size: 90
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2551.950113400001
Median total errors in population: 281.16429999999997
Error averages by case: (90.4746104999982 11.184 101.16634869999994 11.365 66.80078179999938 11.149 82.01300209999945 10.157 103.65709150000198 11.336 85.34595600000152 11.266 99.62375099999842 11.223 101.16139199999881 11.352 97.71661530000056 11.212 88.32926400000146 11.417 82.5494825999996 11.264 87.44898360000019 11.392 98.95922259999871 11.209 84.32039680000177 11.249 90.55879459999997 11.404 83.41963860000175 10.245 77.33066089999954 11.159 96.55639669999954 10.207 92.54375019999938 10.154 102.62482529999875 11.358 101.73351060000107 11.324 87.4929447999988 11.266 103.8384158000003 11.327 73.55311900000098 10.933 95.3561584000006 11.223)
Error minima by case: (0.4247 9 0.4241 9 0.3722 10 0.1619 8 0.3687 9 0.0988 10 0.2563 9 0.276 9 0.1491 8 0.498 10 0.3954 9 0.3556 10 0.2337 9 0.3576 10 0.3743 11 0.2035 8 0.2941 9 0.2077 8 0.1022 8 0.4059 9 0.1968 8 0.2809 9 0.2071 8 0.3104 8 0.4029 8)
Average genome size in population (length): 75.04
Average program size in population (points): 76.04
Average percent parens in population: 0.013
Minimum age in population: 149.8652660683132
Maximum age in population: 153.71942213973
Average age in population: 152.0122047814083
Median age in population: 152.0155264458374
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.889
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.889
Total error diversity:				 0.111
Error (vector) diversity:			 0.112
Behavioral diversity:				 0.118
--- Run Statistics ---
Number of program evaluations used so far: 107000
Number of point (instruction) evaluations so far: 217332145
--- Timings ---
Current time: 1529615255718 milliseconds
Total Time:         372.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       142.8 seconds, 38.3%
Fitness Testing:    179.6 seconds, 48.2%
Report:              50.2 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 106
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 107
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 107
;;******************************
;; -*- Number IO problem report - generation 107
Test total error for best: 11475.9327
Test mean error for best: 5.73797
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_pop} {:instruction tag_float_715} {:instruction integer_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction integer_max} {:instruction float_max} {:instruction 97.20027408926207} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction float_rot} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_mod} {:instruction float_stackdepth} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_mod} {:instruction in1} {:instruction integer_shove} {:instruction integer_shove} {:instruction float_dup_items} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction integer_sub} {:instruction integer_div} {:instruction float_add} {:instruction integer_sub} {:instruction float_rot} {:instruction integer_div} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_rot} {:instruction print_integer} {:instruction float_swap} {:instruction integer_add})
Best program: (integer_dec integer_pop tag_float_715 integer_swap float_frominteger integer_dec integer_max float_max 97.20027408926207 integer_inc integer_max integer_shove integer_dup_times float_max integer_mod float_rot in2 float_dup_times float_dup_items integer_yank float_mod float_stackdepth float_mod in1 integer_flush float_mod in1 integer_shove integer_shove float_dup_items float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult integer_sub integer_div float_add integer_sub float_rot integer_div in1 integer_fromfloat integer_add float_swap float_rot print_integer float_swap integer_add)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 51
Size: 52
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2566.1821487000007
Median total errors in population: 281.16429999999997
Error averages by case: (93.49465269999847 11.204 95.04058579999993 11.369 73.94903339999924 11.116 85.59511789999934 10.127 99.89300760000168 11.318 91.54316560000173 11.25 94.87522389999852 11.189 96.75059129999903 11.32 93.0270839000006 11.183 93.47726800000162 11.427 84.97971319999945 11.261 92.44769480000035 11.386 98.81402839999879 11.208 88.0003968000016 11.196 94.27102360000019 11.456 87.93125300000153 10.259 79.18381529999951 11.151 96.49159859999952 10.242 95.57996969999905 10.128 96.59945589999893 11.337 95.46521600000109 11.316 92.60254029999888 11.271 99.13703970000032 11.322 78.8258688000009 10.878 91.10180450000057 11.191)
Error minima by case: (0.4247 10 0.4241 5 0.3722 2 0.1619 4 0.3687 5 0.0988 4 0.2563 3 0.276 4 0.1491 4 0.498 6 0.3954 4 0.3556 3 0.2337 7 0.3576 3 0.3743 10 0.2035 4 0.2941 9 0.2077 8 0.1022 7 0.4059 5 0.1968 4 0.2809 5 0.2071 5 0.3104 3 0.4029 4)
Average genome size in population (length): 74.73
Average program size in population (points): 75.73
Average percent parens in population: 0.014
Minimum age in population: 150.8652660683132
Maximum age in population: 155.2256821703884
Average age in population: 153.4298093560915
Median age in population: 153.4842487396981
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.885
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.885
Total error diversity:				 0.113
Error (vector) diversity:			 0.115
Behavioral diversity:				 0.119
--- Run Statistics ---
Number of program evaluations used so far: 108000
Number of point (instruction) evaluations so far: 219202142
--- Timings ---
Current time: 1529615258870 milliseconds
Total Time:         375.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       144.1 seconds, 38.3%
Fitness Testing:    181.1 seconds, 48.2%
Report:              50.6 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 107
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 108
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 108
;;******************************
;; -*- Number IO problem report - generation 108
Test total error for best: 11475.9327
Test mean error for best: 5.73797
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction integer_pop} {:instruction in1} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_mult} {:instruction float_add} {:instruction integer_max} {:instruction integer_yank} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction float_rot} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_mod} {:instruction integer_max} {:instruction integer_min} {:instruction in1} {:instruction float_inc} {:instruction integer_pop} {:instruction integer_div} {:instruction 87.35510492351582} {:instruction float_swap} {:instruction integer_div} {:instruction integer_dup_items} {:instruction float_add} {:instruction integer_pop} {:instruction float_mod} {:instruction float_max} {:instruction 81} {:instruction float_mult} {:instruction float_yank} {:instruction integer_div} {:instruction integer_dup_items} {:instruction float_dup_times} {:instruction float_mod} {:instruction in1} {:instruction in2} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_swap} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mod} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_max} {:instruction integer_add} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_sin} {:instruction float_flush} {:instruction print_integer} {:instruction float_flush} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction float_mult})
Best program: (integer_sub integer_pop in1 integer_dec float_dup_items float_mult float_add integer_max integer_yank integer_shove integer_dup_times float_max integer_mod float_rot in2 float_dup_times float_dup_items float_mod integer_max integer_min in1 float_inc integer_pop integer_div 87.35510492351582 float_swap integer_div integer_dup_items float_add integer_pop float_mod float_max 81 float_mult float_yank integer_div integer_dup_items float_dup_times float_mod in1 in2 float_max in2 float_mult float_swap integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mod float_mult float_sub float_add integer_sub float_max integer_add float_mult in1 integer_fromfloat integer_add float_swap float_sin float_flush print_integer float_flush print_integer integer_fromfloat float_mult)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2646.7142647000005
Median total errors in population: 281.16429999999997
Error averages by case: (92.85592679999861 11.19 103.85124359999995 11.374 75.74067059999938 11.141 88.3338864999996 10.135 105.6419941000015 11.314 90.37757280000095 11.25 99.76783449999891 11.221 102.79263519999915 11.314 98.44839400000045 11.219 92.29179000000096 11.409 88.72985509999967 11.278 92.1759620000001 11.414 104.10318919999895 11.193 87.53103280000123 11.23 94.0062694 11.413 89.41782660000136 10.273 82.85495139999949 11.098 101.89765979999957 10.2 98.95218489999924 10.092 102.66414609999909 11.345 101.58195280000068 11.322 92.65588859999916 11.284 105.81051580000029 11.321 79.87797180000071 10.904 97.20691030000052 11.212)
Error minima by case: (0.4247 10 0.4241 9 0.3722 10 0.1619 8 0.3687 9 0.0988 10 0.2563 8 0.276 9 0.1491 9 0.498 10 0.3954 9 0.3556 10 0.2337 9 0.3576 10 0.3743 10 0.2035 8 0.2941 9 0.2077 8 0.1022 8 0.4059 9 0.1968 9 0.2809 9 0.2071 9 0.3104 9 0.4029 9)
Average genome size in population (length): 74.823
Average program size in population (points): 75.823
Average percent parens in population: 0.014
Minimum age in population: 151.8652660683132
Maximum age in population: 156.7513906245476
Average age in population: 154.8424751801825
Median age in population: 154.8967872293502
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.886
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.886
Total error diversity:				 0.115
Error (vector) diversity:			 0.118
Behavioral diversity:				 0.122
--- Run Statistics ---
Number of program evaluations used so far: 109000
Number of point (instruction) evaluations so far: 221074513
--- Timings ---
Current time: 1529615262249 milliseconds
Total Time:         379.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       145.4 seconds, 38.4%
Fitness Testing:    182.7 seconds, 48.2%
Report:              51.0 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 108
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 109
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 109
;;******************************
;; -*- Number IO problem report - generation 109
Test total error for best: 11476.5633
Test mean error for best: 5.73828
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_min} {:instruction tag_float_715} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_fromfloat} {:instruction float_mod} {:instruction float_dup_items} {:instruction integer_mod} {:instruction float_shove} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 97.20027408926207} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_dec} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_swap} {:instruction integer_pop} {:instruction 50} {:instruction float_mod} {:instruction integer_mult} {:instruction float_stackdepth} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_mod} {:instruction float_mod} {:instruction float_sin} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_div} {:instruction float_sin} {:instruction float_sin} {:instruction float_max} {:instruction float_max} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_sub} {:instruction float_dup} {:instruction integer_add} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction integer_add} {:instruction integer_div} {:instruction float_dup})
Best program: (integer_pop integer_min tag_float_715 float_dup_times float_rot integer_fromfloat in2 in2 integer_fromfloat float_mod float_dup_items integer_mod float_shove float_swap integer_div in2 integer_flush float_swap integer_div in2 float_dup_times float_dup_items 97.20027408926207 integer_sub float_sub integer_div float_dec float_max float_swap float_mod in1 float_mod float_mod in1 float_mod in1 float_swap integer_pop 50 float_mod integer_mult float_stackdepth float_mod in1 integer_flush float_max in2 float_mult float_dup_items float_mod float_mod float_sin float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub integer_swap integer_div float_sin float_sin float_max float_max tag_float_518 float_mult in1 integer_fromfloat integer_add float_sub float_dup integer_add float_dup float_dup float_dup float_flush print_integer float_dup_times integer_yankdup integer_add integer_div float_dup)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 90
Size: 91
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2261.7918395000006
Median total errors in population: 281.16429999999997
Error averages by case: (79.85952469999876 11.198 86.68003700000023 11.389 59.736061599999736 11.138 70.35197560000015 10.143 89.4568217000009 11.33 73.52744060000059 11.269 82.6659631999992 11.22 86.88706289999938 11.359 82.3979061000004 11.188 75.54993430000093 11.437 70.8839506000003 11.28 76.6947831000002 11.408 93.75676839999898 11.214 70.50131870000115 11.227 79.13546969999994 11.451 72.2270256000011 10.28 68.67039249999952 11.129 91.14441449999954 10.246 89.47543119999943 10.128 87.13179179999923 11.359 86.0713669000006 11.315 77.02007769999929 11.285 89.58608750000032 11.329 66.72795880000051 10.899 78.21227480000056 11.219)
Error minima by case: (0.4247 10 0.4241 4 0.3722 2 0.1619 4 0.3687 4 0.0988 5 0.2563 3 0.276 4 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 9 0.3576 4 0.3743 10 0.2035 4 0.2941 8 0.2077 8 0.1022 8 0.4059 4 0.1968 4 0.2809 5 0.2071 4 0.3104 3 0.4029 4)
Average genome size in population (length): 74.276
Average program size in population (points): 75.276
Average percent parens in population: 0.014
Minimum age in population: 153.3572561982507
Maximum age in population: 158.0418430505223
Average age in population: 156.2446271449702
Median age in population: 156.2960093371436
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.889
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.889
Total error diversity:				 0.106
Error (vector) diversity:			 0.106
Behavioral diversity:				 0.108
--- Run Statistics ---
Number of program evaluations used so far: 110000
Number of point (instruction) evaluations so far: 222933323
--- Timings ---
Current time: 1529615265582 milliseconds
Total Time:         382.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       146.8 seconds, 38.4%
Fitness Testing:    184.2 seconds, 48.2%
Report:              51.4 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 109
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 110
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 110
;;******************************
;; -*- Number IO problem report - generation 110
Test total error for best: 11476.5633
Test mean error for best: 5.73828
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction integer_max} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_pop} {:instruction tag_float_715} {:instruction integer_pop} {:instruction float_add} {:instruction integer_swap} {:instruction float_dup_items} {:instruction in2} {:instruction integer_swap} {:instruction float_dup_times} {:instruction tagged_507} {:instruction float_dup_times} {:instruction integer_dec} {:instruction in1} {:instruction integer_mod} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_max} {:instruction integer_flush} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_mod} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction float_mod} {:instruction float_mod} {:instruction float_stackdepth} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_mod} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction float_max} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction tag_float_518} {:instruction integer_min} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_mod} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction float_dup_times} {:instruction tag_float_78} {:instruction tag_float_225} {:instruction print_integer} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_add})
Best program: (float_dup_times integer_max integer_swap integer_dup_times integer_dup_times float_pop tag_float_715 integer_pop float_add integer_swap float_dup_items in2 integer_swap float_dup_times tagged_507 float_dup_times integer_dec in1 integer_mod float_swap integer_div in2 float_dup_times float_dup_items float_max integer_flush float_mod in1 float_mod float_mod integer_dup_times integer_dup_items float_dup_items float_mod float_mod float_stackdepth float_mod in1 integer_flush float_max float_dup_times integer_mod float_mod in1 integer_flush float_max float_max float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_sub integer_div float_sin float_max tag_float_518 integer_min tag_float_518 float_mult in1 integer_fromfloat integer_add float_mod float_swap float_dup float_flush float_dup_times tag_float_78 tag_float_225 print_integer tag_float_22 float_shove float_add)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 80
Size: 81
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2466.8975892000008
Median total errors in population: 281.16429999999997
Error averages by case: (87.00350209999847 11.188 95.5635262999996 11.378 67.57974009999919 11.126 77.18331569999997 10.127 99.1157484000019 11.316 82.77264760000139 11.27 93.58163469999857 11.227 95.48638529999903 11.326 91.25306330000053 11.213 85.43475400000133 11.428 77.64069749999997 11.269 86.00613880000022 11.409 97.94663419999881 11.214 80.99746960000157 11.217 86.49002920000005 11.429 78.59948130000153 10.252 75.37411999999954 11.139 95.54954969999953 10.25 94.35302369999879 10.14 96.82495999999895 11.355 95.55423850000125 11.333 86.34506839999891 11.278 99.3160560000003 11.333 74.07246310000087 10.914 89.52034170000056 11.202)
Error minima by case: (0.4247 9 0.4241 5 0.3722 2 0.1619 4 0.3687 5 0.0988 5 0.2563 4 0.276 5 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 10 0.3576 4 0.3743 10 0.2035 4 0.2941 10 0.2077 9 0.1022 8 0.4059 5 0.1968 4 0.2809 5 0.2071 5 0.3104 3 0.4029 4)
Average genome size in population (length): 75.139
Average program size in population (points): 76.139
Average percent parens in population: 0.013
Minimum age in population: 154.8219631761823
Maximum age in population: 159.6354170359111
Average age in population: 157.6535896912417
Median age in population: 157.7331935760076
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.885
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.885
Total error diversity:				 0.108
Error (vector) diversity:			 0.109
Behavioral diversity:				 0.113
--- Run Statistics ---
Number of program evaluations used so far: 111000
Number of point (instruction) evaluations so far: 224813283
--- Timings ---
Current time: 1529615268939 milliseconds
Total Time:         385.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       148.1 seconds, 38.4%
Fitness Testing:    185.8 seconds, 48.2%
Report:              51.8 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 110
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 111
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 111
;;******************************
;; -*- Number IO problem report - generation 111
Test total error for best: 11475.9327
Test mean error for best: 5.73797
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_tan} {:instruction integer_pop} {:instruction tag_float_715} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction float_flush} {:instruction float_min} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_dec} {:instruction float_dup_items} {:instruction in2} {:instruction integer_swap} {:instruction float_dup_times} {:instruction tagged_507} {:instruction float_dup_times} {:instruction integer_dec} {:instruction in1} {:instruction integer_mod} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_max} {:instruction integer_flush} {:instruction float_mod} {:instruction float_dup_items} {:instruction 96.80697452437909} {:instruction tagged_353} {:instruction float_sub} {:instruction float_cos} {:instruction integer_mult} {:instruction float_max} {:instruction float_stackdepth} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_max} {:instruction integer_flush} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_mod} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction float_mod} {:instruction float_mod} {:instruction float_stackdepth} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_mod} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction float_sin} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_rot} {:instruction float_dup} {:instruction print_integer} {:instruction float_div} {:instruction float_swap} {:instruction integer_dup_items} {:instruction integer_add} {:instruction print_integer} {:instruction integer_div} {:instruction print_integer} {:instruction float_sin} {:instruction float_max})
Best program: (float_tan integer_pop tag_float_715 float_dup_items integer_dup_items float_max float_swap float_mod float_flush float_min integer_dup_items integer_min integer_dec float_dup_items in2 integer_swap float_dup_times tagged_507 float_dup_times integer_dec in1 integer_mod float_swap integer_div in2 float_dup_times float_dup_items float_max integer_flush float_mod float_dup_items 96.80697452437909 tagged_353 float_sub float_cos integer_mult float_max float_stackdepth integer_div in2 float_dup_times float_dup_items float_max integer_flush float_mod in1 float_mod float_mod integer_dup_times integer_dup_items float_dup_items float_mod float_mod float_stackdepth float_mod in1 integer_flush float_max float_dup_times integer_mod float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_sub float_sin float_mult in1 integer_fromfloat integer_add integer_yankdup float_rot float_dup print_integer float_div float_swap integer_dup_items integer_add print_integer integer_div print_integer float_sin float_max)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 93
Size: 94
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2401.9121921000005
Median total errors in population: 281.16429999999997
Error averages by case: (86.03300809999843 11.193 89.52754090000013 11.372 67.11558939999948 11.121 76.90005969999963 10.122 94.83329310000128 11.321 82.7254500000015 11.255 90.99272649999877 11.212 92.09715929999903 11.326 87.78406570000065 11.194 84.92325200000144 11.43 77.30297599999976 11.26 84.5274276000004 11.393 90.68785859999879 11.212 81.4391848000016 11.218 86.18816330000004 11.44 77.98148040000149 10.257 78.39619769999955 11.148 88.5634043999995 10.226 88.45155239999929 10.132 91.41442749999898 11.343 90.14655110000083 11.322 84.63191109999903 11.269 94.0860830000003 11.328 71.99026120000067 10.889 85.9755683000007 11.214)
Error minima by case: (0.5753 11 0.0 3 0.3722 2 0.8381 4 0.0 3 0.0988 4 0.0 2 0.0 3 0.0 2 0.498 7 0.3954 4 0.3556 4 0.0 2 0.3576 4 0.6257 10 0.2035 4 0.0 1 0.0 2 0.0 1 0.0 3 0.0 3 0.2809 5 0.0 3 0.3104 3 0.0 2)
Average genome size in population (length): 74.771
Average program size in population (points): 75.771
Average percent parens in population: 0.013
Minimum age in population: 156.0026846028114
Maximum age in population: 161.0564253986799
Average age in population: 159.1064254132527
Median age in population: 159.1234254252867
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.899
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.899
Total error diversity:				 0.095
Error (vector) diversity:			 0.097
Behavioral diversity:				 0.101
--- Run Statistics ---
Number of program evaluations used so far: 112000
Number of point (instruction) evaluations so far: 226684194
--- Timings ---
Current time: 1529615272314 milliseconds
Total Time:         389.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       149.4 seconds, 38.4%
Fitness Testing:    187.4 seconds, 48.1%
Report:              52.3 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 111
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 112
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 112
;;******************************
;; -*- Number IO problem report - generation 112
Test total error for best: 11476.5633
Test mean error for best: 5.73828
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_div} {:instruction float_rot} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_add} {:instruction integer_max} {:instruction integer_dup_items} {:instruction float_max} {:instruction integer_pop} {:instruction tag_float_715} {:instruction integer_swap} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_inc} {:instruction in1} {:instruction integer_dup_items} {:instruction float_add} {:instruction float_add} {:instruction integer_max} {:instruction float_mod} {:instruction 81} {:instruction float_div} {:instruction float_max} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_mod} {:instruction integer_swap} {:instruction float_sub} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_rot} {:instruction float_max} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_swap} {:instruction integer_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_mod} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_div} {:instruction float_sub} {:instruction float_add} {:instruction integer_mult} {:instruction float_sub} {:instruction float_sub} {:instruction float_sin} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_sin} {:instruction integer_div} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer})
Best program: (integer_rot float_yankdup float_swap integer_div float_rot integer_dup_items integer_dup_items float_add integer_max integer_dup_items float_max integer_pop tag_float_715 integer_swap integer_min float_frominteger float_inc in1 integer_dup_items float_add float_add integer_max float_mod 81 float_div float_max integer_div in2 float_dup_times float_dup_items float_mod integer_swap float_sub integer_div integer_dup_times float_max float_rot float_max float_max in2 float_mult float_swap integer_inc in2 float_dup_times float_dup_items float_mod float_mod integer_fromfloat float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub integer_swap integer_div float_sub float_add integer_mult float_sub float_sub float_sin float_max integer_yank float_mult in1 integer_fromfloat integer_add float_sin integer_div float_dup float_flush print_integer float_swap float_dup float_flush print_integer)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2130.4371540000006
Median total errors in population: 281.16429999999997
Error averages by case: (74.74172199999877 11.185 80.54651970000043 11.395 59.27717239999959 11.137 67.98789880000031 10.138 82.93618070000106 11.31 70.02457280000033 11.247 78.2350537999994 11.231 80.5714120999993 11.306 76.12568660000012 11.203 72.09828800000047 11.42 68.45475920000048 11.287 72.26676159999974 11.389 82.23913369999899 11.206 68.36810560000117 11.21 74.18426379999958 11.444 69.49981100000117 10.281 64.2171121999995 11.132 80.05415539999956 10.221 79.34233659999965 10.132 79.27188879999923 11.352 78.19740090000025 11.318 72.3266975999993 11.28 82.44848250000031 11.344 64.46769600000059 10.907 75.25904220000052 11.22)
Error minima by case: (0.4247 10 0.4241 6 0.3722 2 0.1619 4 0.3687 6 0.0988 5 0.2563 4 0.276 6 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 9 0.3576 4 0.3743 9 0.2035 4 0.2941 9 0.2077 8 0.1022 8 0.4059 6 0.1968 5 0.2809 5 0.2071 6 0.3104 3 0.4029 4)
Average genome size in population (length): 74.786
Average program size in population (points): 75.786
Average percent parens in population: 0.013
Minimum age in population: 157.0026846028114
Maximum age in population: 162.3423019960178
Average age in population: 160.502379323266
Median age in population: 160.5434755594984
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.885
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.885
Total error diversity:				 0.104
Error (vector) diversity:			 0.104
Behavioral diversity:				 0.107
--- Run Statistics ---
Number of program evaluations used so far: 113000
Number of point (instruction) evaluations so far: 228555631
--- Timings ---
Current time: 1529615275688 milliseconds
Total Time:         392.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       150.8 seconds, 38.4%
Fitness Testing:    188.9 seconds, 48.1%
Report:              52.8 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 112
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 113
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 113
;;******************************
;; -*- Number IO problem report - generation 113
Test total error for best: 11476.5183
Test mean error for best: 5.73826
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_pop} {:instruction tag_float_715} {:instruction integer_dec} {:instruction float_min} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_yankdup} {:instruction in2} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction in2} {:instruction float_yank} {:instruction integer_pop} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dup_items} {:instruction -32} {:instruction float_shove} {:instruction integer_swap} {:instruction in2} {:instruction integer_div} {:instruction in1} {:instruction in1} {:instruction in2} {:instruction float_dup_times} {:instruction integer_dup_times} {:instruction 97.20027408926207} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction tag_float_850} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_add} {:instruction integer_sub} {:instruction float_add} {:instruction integer_swap} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_sin} {:instruction tag_float_518} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction print_integer} {:instruction float_min} {:instruction float_dup_times})
Best program: (integer_pop integer_pop tag_float_715 integer_dec float_min integer_min integer_swap integer_yankdup in2 float_frominteger float_frominteger in2 float_yank integer_pop float_dup_items float_max float_dup_items -32 float_shove integer_swap in2 integer_div in1 in1 in2 float_dup_times integer_dup_times 97.20027408926207 integer_sub float_sub integer_div integer_dup_times float_max float_swap float_mod in1 tag_float_850 float_mod in1 float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_add integer_sub float_add integer_swap float_sub integer_div float_sin float_sin tag_float_518 tag_float_518 float_mult in1 integer_fromfloat integer_add float_swap print_integer float_min float_dup_times)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2716.3008725000004
Median total errors in population: 281.16429999999997
Error averages by case: (93.2396255999986 11.203 108.78120259999986 11.397 76.60187119999944 11.158 86.52272589999913 10.157 110.89472010000173 11.345 90.4304500000018 11.301 103.1443370999984 11.261 109.13390769999891 11.342 103.169533400001 11.228 92.02975000000175 11.466 87.04688489999927 11.295 92.28707200000078 11.436 111.11394769999863 11.217 87.61554240000153 11.247 93.08177220000042 11.437 88.39920480000141 10.276 84.75293669999951 11.139 109.8847972999995 10.231 106.32742519999886 10.125 109.21878109999886 11.374 108.10439560000106 11.35 92.64391109999907 11.306 111.21638200000032 11.36 81.03291500000076 10.933 101.80878090000063 11.234)
Error minima by case: (0.4247 10 0.4241 9 0.3722 10 0.1619 8 0.3687 9 0.0988 10 0.2563 8 0.276 9 0.1491 10 0.498 10 0.3954 9 0.3556 11 0.2337 9 0.3576 10 0.3743 10 0.2035 8 0.2941 9 0.2077 8 0.1022 7 0.4059 9 0.1968 8 0.2809 9 0.2071 8 0.3104 8 0.4029 9)
Average genome size in population (length): 73.837
Average program size in population (points): 74.837
Average percent parens in population: 0.014
Minimum age in population: 158.0026846028114
Maximum age in population: 163.8450615638977
Average age in population: 161.9390584328904
Median age in population: 161.9590065991023
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.895
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.895
Total error diversity:				 0.112
Error (vector) diversity:			 0.114
Behavioral diversity:				 0.118
--- Run Statistics ---
Number of program evaluations used so far: 114000
Number of point (instruction) evaluations so far: 230402988
--- Timings ---
Current time: 1529615279026 milliseconds
Total Time:         396.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       152.0 seconds, 38.4%
Fitness Testing:    190.5 seconds, 48.1%
Report:              53.3 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 113
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 114
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 114
;;******************************
;; -*- Number IO problem report - generation 114
Test total error for best: 11476.5633
Test mean error for best: 5.73828
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_sin} {:instruction float_sin} {:instruction float_sub} {:instruction integer_dec} {:instruction float_min} {:instruction integer_dup_items} {:instruction in1} {:instruction -27.36445100454587} {:instruction float_max} {:instruction float_swap} {:instruction in2} {:instruction float_dup_times} {:instruction float_sub} {:instruction float_mod} {:instruction in1} {:instruction integer_shove} {:instruction integer_shove} {:instruction float_dup_items} {:instruction float_tan} {:instruction 50} {:instruction float_mod} {:instruction integer_mult} {:instruction float_stackdepth} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_mod} {:instruction float_mod} {:instruction float_sin} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_div} {:instruction float_sin} {:instruction float_sin} {:instruction float_max} {:instruction float_pop} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_sub} {:instruction float_dup} {:instruction integer_add} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction float_dup_times} {:instruction integer_yankdup})
Best program: (integer_rot float_yankdup float_swap integer_div in2 float_dup_times float_dup_items float_sin float_sin float_sub integer_dec float_min integer_dup_items in1 -27.36445100454587 float_max float_swap in2 float_dup_times float_sub float_mod in1 integer_shove integer_shove float_dup_items float_tan 50 float_mod integer_mult float_stackdepth float_mod in1 integer_flush float_max in2 float_mult float_dup_items float_mod float_mod float_sin float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub integer_swap integer_div float_sin float_sin float_max float_pop tag_float_518 float_mult in1 integer_fromfloat integer_add float_sub float_dup integer_add float_dup float_dup float_dup float_flush print_integer float_dup_times integer_yankdup)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2754.412017500001
Median total errors in population: 281.16429999999997
Error averages by case: (98.71577619999844 11.228 106.43282259999944 11.392 78.79594439999934 11.154 88.97349169999917 10.165 108.90629120000189 11.348 95.49716560000162 11.3 103.77691279999834 11.24 106.63763369999906 11.361 103.18321750000098 11.217 97.47728000000154 11.469 88.39497239999926 11.282 97.32976160000042 11.433 109.22205589999886 11.214 93.55689360000147 11.256 98.75464930000045 11.462 91.16207050000138 10.276 90.13642489999953 11.133 108.23417949999957 10.243 105.43578449999885 10.134 106.881297399999 11.379 105.93221810000134 11.349 97.34613579999898 11.307 109.08819400000031 11.354 84.87876120000078 10.925 101.81008310000054 11.231)
Error minima by case: (0.4247 10 0.4241 3 0.3722 2 0.1619 4 0.3687 3 0.0988 5 0.2563 3 0.276 3 0.1491 3 0.498 7 0.3954 4 0.3556 5 0.2337 9 0.3576 4 0.3743 10 0.2035 4 0.2941 9 0.2077 8 0.1022 8 0.4059 3 0.1968 3 0.2809 5 0.2071 3 0.3104 3 0.4029 3)
Average genome size in population (length): 73.791
Average program size in population (points): 74.791
Average percent parens in population: 0.014
Minimum age in population: 160.6642324668489
Maximum age in population: 165.3918464658485
Average age in population: 163.4117375010169
Median age in population: 163.4394814573177
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.901
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.901
Total error diversity:				 0.106
Error (vector) diversity:			 0.107
Behavioral diversity:				 0.112
--- Run Statistics ---
Number of program evaluations used so far: 115000
Number of point (instruction) evaluations so far: 232249393
--- Timings ---
Current time: 1529615282382 milliseconds
Total Time:         399.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       153.4 seconds, 38.4%
Fitness Testing:    192.1 seconds, 48.1%
Report:              53.7 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 114
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 115
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 115
;;******************************
;; -*- Number IO problem report - generation 115
Test total error for best: 11473.883900000006
Test mean error for best: 5.73694
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_shove} {:instruction integer_swap} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_min} {:instruction integer_dec} {:instruction float_max} {:instruction integer_pop} {:instruction integer_swap} {:instruction float_dup_times} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_dec} {:instruction in1} {:instruction integer_mod} {:instruction float_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in2} {:instruction float_dup_times} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_add} {:instruction integer_dec} {:instruction in1} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_mod} {:instruction float_mod} {:instruction float_sin} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_max} {:instruction float_mod} {:instruction integer_rot} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_div} {:instruction float_sin} {:instruction float_sin} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_sub} {:instruction integer_mod} {:instruction tagged_881} {:instruction float_inc} {:instruction print_integer} {:instruction in2} {:instruction float_flush})
Best program: (float_dup_times float_shove integer_swap integer_pop integer_dup_times float_yankdup integer_min integer_dec float_max integer_pop integer_swap float_dup_times integer_flush float_dup_times integer_dec in1 integer_mod float_swap integer_div float_dup_times in2 float_dup_times float_swap integer_div in2 float_add integer_dec in1 integer_flush float_swap integer_div in2 float_dup_times float_dup_items float_mod float_mod float_sin float_mod in1 integer_flush float_max in2 float_mult float_mult float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_max float_mod integer_rot float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub integer_mult integer_div float_sin float_sin tag_float_518 float_mult in1 integer_fromfloat integer_add float_sub integer_mod tagged_881 float_inc print_integer in2 float_flush)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2480.7727336000007
Median total errors in population: 281.16429999999997
Error averages by case: (88.99348799999846 11.208 95.5788022999999 11.384 69.43184289999964 11.146 80.03483659999978 10.156 98.59707170000159 11.331 86.00917760000117 11.292 92.53865479999853 11.231 95.49281959999897 11.352 91.48554850000068 11.214 87.86929600000117 11.45 80.48536579999993 11.278 87.19395620000017 11.425 95.81898649999873 11.21 83.18474800000138 11.251 88.51937549999994 11.442 81.6418415000014 10.27 73.37530519999954 11.178 94.07386099999954 10.235 91.61010999999922 10.159 96.15236859999894 11.361 95.22816950000102 11.333 87.60176589999905 11.306 98.87949600000032 11.336 74.50770150000069 10.936 88.75914440000057 11.225)
Error minima by case: (0.4247 10 0.4241 6 0.3722 2 0.1619 4 0.3687 6 0.0988 5 0.2563 4 0.276 5 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 9 0.3576 4 0.3743 10 0.2035 4 0.2941 10 0.2077 8 0.1022 6 0.4059 6 0.1968 5 0.2809 5 0.2071 6 0.3104 3 0.4029 4)
Average genome size in population (length): 74.192
Average program size in population (points): 75.192
Average percent parens in population: 0.014
Minimum age in population: 161.6642324668489
Maximum age in population: 166.9027518394471
Average age in population: 164.8141626545596
Median age in population: 164.8816575861429
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.897
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.897
Total error diversity:				 0.111
Error (vector) diversity:			 0.113
Behavioral diversity:				 0.117
--- Run Statistics ---
Number of program evaluations used so far: 116000
Number of point (instruction) evaluations so far: 234105848
--- Timings ---
Current time: 1529615285651 milliseconds
Total Time:         402.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       154.7 seconds, 38.4%
Fitness Testing:    193.6 seconds, 48.1%
Report:              54.2 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 115
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 116
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 116
;;******************************
;; -*- Number IO problem report - generation 116
Test total error for best: 11503.5183
Test mean error for best: 5.75176
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7

          
Correct output: 101.5758530321 | Program output: 101

         
Correct output: 5.3722386499   | Program output: 5

           
Correct output: 50.838076484   | Program output: 50

          
Correct output: 149.3686745246 | Program output: 149

         
Correct output: -86.0987731432 | Program output: -86

         
Correct output: 99.2563149379  | Program output: 99

          
Correct output: 100.2759538143 | Program output: 100

         
Correct output: 55.8508667649  | Program output: 55

          
Correct output: -120.4980478621 | Program output: -120

        
Correct output: 50.3953926202  | Program output: 50

          
Correct output: -86.6444443408 | Program output: -86

         
Correct output: 43.2337451713  | Program output: 43

          
Correct output: -69.3575988725 | Program output: -69

         
Correct output: -32.3742761841 | Program output: -33

         
Correct output: 21.203493141   | Program output: 21

          
Correct output: 6.2941290036   | Program output: 6

           
Correct output: 28.207733934   | Program output: 28

          
Correct output: 3.102196665    | Program output: 3

           
Correct output: 117.4058715345 | Program output: 117

         
Correct output: 105.1968404292 | Program output: 105

         
Correct output: -95.2809380546 | Program output: -95

         
Correct output: 145.7928624605 | Program output: 145

         
Correct output: 3.3104353754   | Program output: 3

           
Correct output: 60.4029417431  | Program output: 60

          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_dec} {:instruction float_min} {:instruction integer_add} {:instruction float_add} {:instruction integer_shove} {:instruction float_frominteger} {:instruction integer_mod} {:instruction float_rot} {:instruction in2} {:instruction float_dup_times} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction integer_swap} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction in2} {:instruction float_dup_times} {:instruction in1} {:instruction float_swap} {:instruction float_add} {:instruction float_max} {:instruction float_swap} {:instruction float_dup_times} {:instruction integer_flush} {:instruction in2} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_frominteger} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction tagged_183} {:instruction integer_sub} {:instruction float_sin} {:instruction float_max} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_sub} {:instruction print_integer} {:instruction tag_float_78} {:instruction tag_float_78} {:instruction float_shove} {:instruction integer_dup} {:instruction print_newline} {:instruction print_newline} {:instruction float_mult} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_shove} {:instruction in1})
Best program: (integer_dec integer_dec float_min integer_add float_add integer_shove float_frominteger integer_mod float_rot in2 float_dup_times integer_stackdepth float_shove integer_swap float_frominteger integer_dup_items integer_swap integer_flush float_swap integer_div in2 float_dup_times integer_div in2 float_dup_times in2 float_dup_times in1 float_swap float_add float_max float_swap float_dup_times integer_flush in2 float_dup_times float_yank integer_div in2 float_dup_times float_mod in1 integer_flush float_max in2 float_mult float_frominteger in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub tagged_183 integer_sub float_sin float_max tag_float_518 float_mult in1 integer_fromfloat integer_add float_sub print_integer tag_float_78 tag_float_78 float_shove integer_dup print_newline print_newline float_mult print_integer tag_float_78 float_shove in1)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 80
Size: 81
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2036.7772229000009
Median total errors in population: 281.16429999999997
Error averages by case: (72.38450209999854 11.172 74.68157240000086 11.332 54.92349979999961 11.11 63.273470300000575 10.098 77.24683810000069 11.267 68.4232404000003 11.221 72.93613089999964 11.193 74.94540499999908 11.286 70.62310409999967 11.162 69.94573400000029 11.375 63.69169020000069 11.243 71.11387159999938 11.361 79.35406739999877 11.183 65.47440320000136 11.173 71.91052639999934 11.402 64.98927050000134 10.236 62.88464579999948 11.138 77.10711919999952 10.199 75.47353839999992 10.13 75.27926289999903 11.289 74.22936589999993 11.263 71.04772009999908 11.238 77.37665190000031 11.27 60.36659360000075 10.889 70.68199870000059 11.183)
Error minima by case: (0.4247 10 0.4241 6 0.3722 2 0.1619 4 0.3687 6 0.0988 5 0.2563 4 0.276 6 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 10 0.3576 4 0.3743 11 0.2035 4 0.2941 9 0.2077 8 0.1022 8 0.4059 6 0.1968 5 0.2809 5 0.2071 6 0.3104 3 0.4029 4)
Average genome size in population (length): 74.285
Average program size in population (points): 75.285
Average percent parens in population: 0.014
Minimum age in population: 163.1199668025075
Maximum age in population: 168.2209860960438
Average age in population: 166.245747433079
Median age in population: 166.3178211897703
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.895
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.895
Total error diversity:				 0.104
Error (vector) diversity:			 0.105
Behavioral diversity:				 0.112
--- Run Statistics ---
Number of program evaluations used so far: 117000
Number of point (instruction) evaluations so far: 235964730
--- Timings ---
Current time: 1529615289119 milliseconds
Total Time:         406.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       156.1 seconds, 38.4%
Fitness Testing:    195.3 seconds, 48.1%
Report:              54.6 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 116
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 117
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 117
;;******************************
;; -*- Number IO problem report - generation 117
Test total error for best: 11483.5633
Test mean error for best: 5.74178
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_mult} {:instruction float_swap} {:instruction float_dup_times} {:instruction integer_mod} {:instruction in1} {:instruction integer_dup_times} {:instruction float_frominteger} {:instruction float_mod} {:instruction integer_dec} {:instruction in2} {:instruction float_dup_times} {:instruction integer_mult} {:instruction 96.80697452437909} {:instruction integer_sub} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction in1} {:instruction in1} {:instruction integer_flush} {:instruction integer_dec} {:instruction in1} {:instruction float_dup_times} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 96.80697452437909} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_stackdepth} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 96.80697452437909} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_stackdepth} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_rot} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_add} {:instruction float_swap} {:instruction integer_dup} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_mod} {:instruction float_mod} {:instruction float_shove} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_div} {:instruction float_sub} {:instruction integer_sub} {:instruction integer_mult} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_sin} {:instruction float_swap} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction float_dup} {:instruction integer_sub} {:instruction print_integer})
Best program: (integer_sub float_mult float_swap float_dup_times integer_mod in1 integer_dup_times float_frominteger float_mod integer_dec in2 float_dup_times integer_mult 96.80697452437909 integer_sub integer_div in2 float_dup_times in1 in1 integer_flush integer_dec in1 float_dup_times integer_div in2 float_dup_times float_dup_items 96.80697452437909 integer_sub float_sub integer_stackdepth integer_div in2 float_dup_times float_dup_items 96.80697452437909 integer_sub float_sub integer_stackdepth float_swap integer_div in2 integer_dup_times float_max float_rot integer_flush float_max in2 float_add float_swap integer_dup in2 float_dup_times float_dup_items float_mod float_mod float_shove float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub integer_swap integer_div float_sub integer_sub integer_mult float_sub integer_div float_sin float_max integer_yank float_mult in1 integer_fromfloat integer_add float_sin float_swap float_dup float_flush print_integer float_swap float_dup integer_sub print_integer)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 95
Size: 96
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2584.0561147000008
Median total errors in population: 281.16429999999997
Error averages by case: (95.68635949999855 11.212 98.13622009999952 11.328 72.6597797999995 11.12 84.379074299999 10.131 100.76620330000182 11.287 93.09256080000206 11.262 96.50578949999837 11.186 98.50417519999915 11.309 94.84740110000108 11.17 94.78426800000196 11.433 84.745046299999 11.259 95.38576160000106 11.394 98.10623239999882 11.201 91.45468160000144 11.221 96.05520430000064 11.451 85.72371380000135 10.254 72.3705462999995 11.137 96.58421389999951 10.243 92.81475399999898 10.14 98.10760699999909 11.321 97.67467450000142 11.274 95.36769759999916 11.276 101.04937360000031 11.288 78.59932940000057 10.893 93.67844680000067 11.187)
Error minima by case: (0.4247 9 0.4241 3 0.3722 2 0.1619 4 0.3687 3 0.0988 5 0.2563 3 0.276 3 0.1491 3 0.498 6 0.3954 4 0.3556 5 0.2337 10 0.3576 3 0.3743 10 0.2035 4 0.2941 9 0.2077 9 0.1022 7 0.4059 3 0.1968 2 0.2809 5 0.2071 3 0.3104 3 0.4029 3)
Average genome size in population (length): 73.911
Average program size in population (points): 74.911
Average percent parens in population: 0.014
Minimum age in population: 165.1186525009143
Maximum age in population: 169.5644539975772
Average age in population: 167.6741467628331
Median age in population: 167.683491942847
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.888
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.888
Total error diversity:				 0.118
Error (vector) diversity:			 0.118
Behavioral diversity:				 0.125
--- Run Statistics ---
Number of program evaluations used so far: 118000
Number of point (instruction) evaluations so far: 237814146
--- Timings ---
Current time: 1529615292494 milliseconds
Total Time:         409.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       157.3 seconds, 38.4%
Fitness Testing:    196.8 seconds, 48.1%
Report:              55.1 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 117
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 118
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 118
;;******************************
;; -*- Number IO problem report - generation 118
Test total error for best: 11475.9327
Test mean error for best: 5.73797
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_715} {:instruction integer_swap} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_max} {:instruction in1} {:instruction integer_dup_items} {:instruction float_add} {:instruction float_add} {:instruction integer_min} {:instruction float_min} {:instruction 81} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_add} {:instruction integer_max} {:instruction float_shove} {:instruction integer_rot} {:instruction float_frominteger} {:instruction integer_pop} {:instruction print_integer} {:instruction in1} {:instruction float_dup_items} {:instruction integer_dec} {:instruction in2} {:instruction tagged_1} {:instruction 96.60662134072248} {:instruction integer_inc} {:instruction float_sub} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_max} {:instruction float_stackdepth} {:instruction float_mod} {:instruction in1} {:instruction integer_shove} {:instruction integer_shove} {:instruction float_dup_items} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction integer_sub} {:instruction integer_div} {:instruction float_add} {:instruction integer_sub} {:instruction float_rot} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_sub} {:instruction float_div} {:instruction integer_add} {:instruction float_swap} {:instruction float_dec} {:instruction print_integer} {:instruction float_swap} {:instruction float_add})
Best program: (tag_float_715 integer_swap integer_inc float_frominteger integer_max in1 integer_dup_items float_add float_add integer_min float_min 81 float_yankdup float_swap float_add integer_max float_shove integer_rot float_frominteger integer_pop print_integer in1 float_dup_items integer_dec in2 tagged_1 96.60662134072248 integer_inc float_sub integer_div integer_dup_times float_dup_times float_max float_stackdepth float_mod in1 integer_shove integer_shove float_dup_items float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult integer_sub integer_div float_add integer_sub float_rot float_sub float_add integer_sub integer_swap integer_div float_sin float_max tag_float_518 float_mult in1 integer_fromfloat integer_add float_sub float_div integer_add float_swap float_dec print_integer float_swap float_add)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2351.7192804000015
Median total errors in population: 281.16429999999997
Error averages by case: (84.02356049999874 11.198 91.57489639999963 11.362 63.266754699999424 11.133 71.91171079999995 10.153 93.84833500000165 11.316 77.32826620000104 11.271 89.38917329999843 11.228 91.81570749999919 11.341 87.3772310000009 11.21 79.32637270000112 11.427 72.28748500000003 11.262 79.48687910000024 11.383 92.97446709999907 11.197 75.18500340000125 11.242 82.48539000000022 11.426 73.21446590000119 10.244 74.74285769999958 11.145 90.55598979999964 10.234 89.08393819999898 10.141 91.96580099999912 11.347 91.18400480000123 11.311 79.48583239999921 11.278 94.20941590000031 11.32 69.94613010000064 10.916 87.76061190000057 11.204)
Error minima by case: (0.4247 10 0.4241 2 0.3722 2 0.1619 4 0.3687 2 0.0988 3 0.2563 2 0.276 2 0.1491 2 0.498 4 0.3954 4 0.3556 3 0.2337 7 0.3576 2 0.3743 10 0.2035 4 0.2941 8 0.2077 9 0.1022 8 0.4059 2 0.1968 2 0.2809 3 0.2071 2 0.3104 3 0.4029 2)
Average genome size in population (length): 73.435
Average program size in population (points): 74.435
Average percent parens in population: 0.014
Minimum age in population: 166.824822600771
Maximum age in population: 171.2037016949431
Average age in population: 169.0994033018402
Median age in population: 169.1305494334266
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.905
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.905
Total error diversity:				 0.115
Error (vector) diversity:			 0.116
Behavioral diversity:				 0.12
--- Run Statistics ---
Number of program evaluations used so far: 119000
Number of point (instruction) evaluations so far: 239651847
--- Timings ---
Current time: 1529615295757 milliseconds
Total Time:         412.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       158.7 seconds, 38.4%
Fitness Testing:    198.3 seconds, 48.0%
Report:              55.7 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 118
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 119
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 119
;;******************************
;; -*- Number IO problem report - generation 119
Test total error for best: 11484.9649
Test mean error for best: 5.74248
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction tag_float_715} {:instruction float_sin} {:instruction integer_min} {:instruction float_frominteger} {:instruction in2} {:instruction float_cos} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_dec} {:instruction in1} {:instruction float_max} {:instruction integer_yank} {:instruction in2} {:instruction float_dup_times} {:instruction float_sub} {:instruction integer_div} {:instruction in1} {:instruction in2} {:instruction float_dup_times} {:instruction integer_dup} {:instruction 97.20027408926207} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction float_mod} {:instruction integer_max} {:instruction tag_float_850} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_add} {:instruction integer_sub} {:instruction float_add} {:instruction float_dup} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction integer_min} {:instruction print_integer} {:instruction 62} {:instruction float_max})
Best program: (integer_pop tag_float_715 float_sin integer_min float_frominteger in2 float_cos integer_rot float_shove integer_sub float_sub integer_dec in1 float_max integer_yank in2 float_dup_times float_sub integer_div in1 in2 float_dup_times integer_dup 97.20027408926207 integer_sub float_sub integer_div integer_dup_times float_max integer_mod float_mod integer_max tag_float_850 float_mod in1 float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_add integer_sub float_add float_dup tag_float_518 float_mult in1 integer_fromfloat integer_add float_swap integer_min print_integer 62 float_max)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2029.5056038000012
Median total errors in population: 281.16429999999997
Error averages by case: (72.71522799999848 11.187 75.40593420000086 11.368 53.410463399999585 11.133 64.8798513000006 10.143 78.8979911000006 11.314 66.71524040000001 11.251 73.65908859999949 11.238 76.60140789999907 11.335 72.18085239999976 11.206 68.63473400000018 11.414 65.37551390000075 11.279 68.84158279999912 11.392 77.69122769999878 11.194 62.206688000001414 11.212 71.78740349999902 11.418 66.72728610000155 10.268 56.047921099999485 11.123 75.13978099999952 10.212 73.80367369999985 10.114 76.477098099999 11.35 75.0152649000001 11.313 69.51515829999899 11.266 79.08040770000032 11.329 61.16450240000068 10.915 70.33130330000064 11.226)
Error minima by case: (0.4247 10 0.4241 6 0.3722 2 0.1619 4 0.3687 6 0.0988 5 0.2563 4 0.276 6 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 10 0.3576 4 0.3743 11 0.2035 4 0.2941 9 0.2077 9 0.1022 8 0.4059 6 0.1968 5 0.2809 5 0.2071 6 0.3104 3 0.4029 4)
Average genome size in population (length): 72.717
Average program size in population (points): 73.717
Average percent parens in population: 0.014
Minimum age in population: 167.9033265531713
Maximum age in population: 172.799925795449
Average age in population: 170.512443242733
Median age in population: 170.530242072924
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.906
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.906
Total error diversity:				 0.104
Error (vector) diversity:			 0.106
Behavioral diversity:				 0.11
--- Run Statistics ---
Number of program evaluations used so far: 120000
Number of point (instruction) evaluations so far: 241471399
--- Timings ---
Current time: 1529615299062 milliseconds
Total Time:         416.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       160.0 seconds, 38.4%
Fitness Testing:    199.9 seconds, 48.0%
Report:              56.1 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 119
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 120
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 120
;;******************************
;; -*- Number IO problem report - generation 120
Test total error for best: 11478.9649
Test mean error for best: 5.73948
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tagged_978} {:instruction float_max} {:instruction integer_pop} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_sub} {:instruction float_sin} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction in1} {:instruction integer_yank} {:instruction float_add} {:instruction float_add} {:instruction in2} {:instruction float_add} {:instruction integer_dec} {:instruction in1} {:instruction integer_flush} {:instruction float_swap} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_mult} {:instruction 97.20027408926207} {:instruction integer_shove} {:instruction in1} {:instruction in2} {:instruction float_dup_times} {:instruction integer_sub} {:instruction float_sub} {:instruction in2} {:instruction integer_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_max} {:instruction float_swap} {:instruction float_dup_items} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction integer_sub} {:instruction integer_div} {:instruction float_add} {:instruction integer_sub} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_rot} {:instruction print_integer} {:instruction float_swap} {:instruction integer_add})
Best program: (tagged_978 float_max integer_pop float_dup_times float_dup_items float_frominteger float_sub float_sin float_mod in1 integer_flush float_max float_yankdup float_dup_items in1 integer_yank float_add float_add in2 float_add integer_dec in1 integer_flush float_swap float_inc in2 float_dup_times float_mult 97.20027408926207 integer_shove in1 in2 float_dup_times integer_sub float_sub in2 integer_dup_times integer_div float_dup_items float_max float_swap float_dup_items float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult integer_sub integer_div float_add integer_sub in1 integer_fromfloat integer_add float_swap float_rot print_integer float_swap integer_add)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2675.6860847000007
Median total errors in population: 281.16429999999997
Error averages by case: (98.57297719999853 11.218 105.26423189999937 11.398 68.92328119999937 11.151 86.0515240999993 10.169 107.98972180000197 11.348 94.74180530000163 11.287 101.42289229999831 11.23 104.94097599999911 11.359 98.13572770000104 11.216 96.86233510000157 11.463 86.55261189999935 11.312 95.4524075000006 11.442 105.13607549999885 11.205 92.01683740000145 11.256 97.37483750000037 11.471 87.48087610000138 10.293 73.58264139999953 11.125 102.8178486999995 10.243 99.96714429999899 10.137 106.00190859999904 11.387 104.88966190000151 11.335 96.65122629999914 11.307 108.21004770000029 11.339 79.67574020000076 10.903 99.13974710000059 11.237)
Error minima by case: (0.4247 10 0.4241 5 0.3722 2 0.1619 4 0.3687 5 0.0988 5 0.2563 4 0.276 5 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 9 0.3576 4 0.3743 10 0.2035 4 0.2941 9 0.2077 9 0.1022 8 0.4059 5 0.1968 4 0.2809 5 0.2071 5 0.3104 3 0.4029 4)
Average genome size in population (length): 72.302
Average program size in population (points): 73.302
Average percent parens in population: 0.014
Minimum age in population: 168.9033265531713
Maximum age in population: 174.1694055803561
Average age in population: 171.9260600887712
Median age in population: 171.9768724817137
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.891
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.891
Total error diversity:				 0.13
Error (vector) diversity:			 0.134
Behavioral diversity:				 0.138
--- Run Statistics ---
Number of program evaluations used so far: 121000
Number of point (instruction) evaluations so far: 243280322
--- Timings ---
Current time: 1529615302537 milliseconds
Total Time:         419.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       161.4 seconds, 38.5%
Fitness Testing:    201.6 seconds, 48.0%
Report:              56.5 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 120
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 121
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 121
;;******************************
;; -*- Number IO problem report - generation 121
Test total error for best: 11481.5633
Test mean error for best: 5.74078
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_fromfloat} {:instruction integer_dec} {:instruction integer_rot} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_sub} {:instruction float_sin} {:instruction float_sin} {:instruction float_shove} {:instruction integer_dec} {:instruction float_swap} {:instruction float_add} {:instruction integer_max} {:instruction float_shove} {:instruction integer_rot} {:instruction float_frominteger} {:instruction integer_pop} {:instruction print_integer} {:instruction in1} {:instruction float_dup_items} {:instruction integer_dec} {:instruction in2} {:instruction tagged_1} {:instruction 96.60662134072248} {:instruction integer_inc} {:instruction float_sub} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_max} {:instruction float_stackdepth} {:instruction float_mod} {:instruction in1} {:instruction integer_shove} {:instruction integer_shove} {:instruction float_dup_items} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction integer_sub} {:instruction integer_div} {:instruction float_add} {:instruction integer_sub} {:instruction float_rot} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction float_sub} {:instruction -9.219150571934833} {:instruction tag_float_518} {:instruction float_mult} {:instruction integer_div} {:instruction float_cos} {:instruction float_max} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_sub} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_swap})
Best program: (integer_sub float_dup_times float_rot integer_fromfloat integer_dec integer_rot float_yankdup float_swap integer_div in2 float_dup_times float_sub float_sin float_sin float_shove integer_dec float_swap float_add integer_max float_shove integer_rot float_frominteger integer_pop print_integer in1 float_dup_items integer_dec in2 tagged_1 96.60662134072248 integer_inc float_sub integer_div integer_dup_times float_dup_times float_max float_stackdepth float_mod in1 integer_shove integer_shove float_dup_items float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult integer_sub integer_div float_add integer_sub float_rot float_sub float_add integer_sub integer_swap integer_div float_sin float_max tag_float_518 float_mult in1 float_sub -9.219150571934833 tag_float_518 float_mult integer_div float_cos float_max tag_float_518 float_mult in1 integer_fromfloat integer_add float_sub print_integer tag_float_78 float_swap)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 80
Size: 81
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2468.0498338
Median total errors in population: 281.16429999999997
Error averages by case: (88.1361315999985 11.211 95.18427929999947 11.421 73.09175519999923 11.13 82.61832409999892 10.163 96.13388080000193 11.363 82.98946200000157 11.272 91.55773429999817 11.225 93.43004489999902 11.383 91.81832260000103 11.236 84.91777800000168 11.438 83.00487919999894 11.277 84.10033920000045 11.394 94.1157151999988 11.214 79.96189360000139 11.252 87.35753760000038 11.44 83.90956370000146 10.277 74.7579672999995 11.141 92.65577509999953 10.231 93.33962329999876 10.13 93.73296409999898 11.378 93.02531290000135 11.338 84.29582119999905 11.303 97.01609150000031 11.339 79.92680540000086 10.938 89.24083170000053 11.237)
Error minima by case: (0.5753 9 0.5759 6 0.3722 2 0.8381 3 0.3687 6 0.0988 3 0.2563 5 0.276 6 0.8509 5 0.498 4 0.3954 3 0.3556 3 0.2337 8 0.3576 2 0.6257 11 0.2035 3 0.2941 8 0.2077 8 0.1022 8 0.4059 6 0.1968 5 0.2809 3 0.7929 6 0.3104 3 0.4029 5)
Average genome size in population (length): 72.31
Average program size in population (points): 73.31
Average percent parens in population: 0.014
Minimum age in population: 170.1053590671835
Maximum age in population: 175.519576170729
Average age in population: 173.330513133405
Median age in population: 173.3903386925326
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.891
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.891
Total error diversity:				 0.109
Error (vector) diversity:			 0.112
Behavioral diversity:				 0.118
--- Run Statistics ---
Number of program evaluations used so far: 122000
Number of point (instruction) evaluations so far: 245089570
--- Timings ---
Current time: 1529615305870 milliseconds
Total Time:         422.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       162.7 seconds, 38.5%
Fitness Testing:    203.1 seconds, 48.0%
Report:              56.9 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 121
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 122
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 122
;;******************************
;; -*- Number IO problem report - generation 122
Test total error for best: 11480.9327
Test mean error for best: 5.74047
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mult} {:instruction tag_float_715} {:instruction float_inc} {:instruction integer_max} {:instruction float_mod} {:instruction integer_shove} {:instruction float_pop} {:instruction integer_dec} {:instruction in1} {:instruction integer_rot} {:instruction integer_mult} {:instruction float_add} {:instruction integer_max} {:instruction in1} {:instruction integer_add} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 96.80697452437909} {:instruction integer_sub} {:instruction float_sub} {:instruction float_add} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction float_rot} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_mod} {:instruction in1} {:instruction float_dec} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction in1} {:instruction float_pop} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_div} {:instruction float_mult} {:instruction float_add} {:instruction integer_sub} {:instruction float_add} {:instruction integer_swap} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_sin} {:instruction float_dup} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction print_integer} {:instruction float_min})
Best program: (float_mult tag_float_715 float_inc integer_max float_mod integer_shove float_pop integer_dec in1 integer_rot integer_mult float_add integer_max in1 integer_add integer_div in2 float_dup_times float_dup_items 96.80697452437909 integer_sub float_sub float_add integer_inc integer_max integer_shove integer_dup_times float_max integer_mod float_rot in2 float_dup_times float_dup_items float_mod in1 float_dec float_max in2 float_mult float_mult float_cos integer_fromfloat in1 float_pop float_sub float_add integer_sub integer_swap integer_div float_mult float_add integer_sub float_add integer_swap float_sub integer_div float_sin float_sin float_dup tag_float_518 float_mult in1 integer_fromfloat integer_add float_swap print_integer float_min)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2382.7288045000005
Median total errors in population: 281.16429999999997
Error averages by case: (89.15840569999843 11.222 85.7765096000002 11.396 70.85484959999931 11.112 78.48449890000003 10.159 89.3468098000011 11.34 84.99616560000138 11.273 85.25967609999903 11.234 86.64069799999923 11.354 81.66188610000005 11.221 86.71427600000132 11.428 78.88506260000023 11.264 86.59698360000024 11.391 88.38647999999888 11.231 81.66925120000145 11.23 88.28866049999999 11.444 80.97469500000139 10.252 80.61084889999955 11.181 87.47666229999953 10.254 86.48471479999947 10.177 86.38499209999912 11.371 85.42317350000064 11.333 86.943821199999 11.302 88.56232330000032 11.344 76.87007680000077 10.933 82.59828330000059 11.233)
Error minima by case: (0.4247 10 0.4241 6 0.3722 2 0.1619 4 0.3687 6 0.0988 5 0.2563 4 0.276 6 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 9 0.3576 4 0.3743 10 0.2035 4 0.2941 9 0.2077 9 0.1022 8 0.4059 6 0.1968 5 0.2809 5 0.2071 6 0.3104 3 0.4029 4)
Average genome size in population (length): 71.624
Average program size in population (points): 72.624
Average percent parens in population: 0.014
Minimum age in population: 171.1053590671835
Maximum age in population: 176.7893458834432
Average age in population: 174.7781084083723
Median age in population: 174.8210933213642
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.902
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.902
Total error diversity:				 0.106
Error (vector) diversity:			 0.107
Behavioral diversity:				 0.112
--- Run Statistics ---
Number of program evaluations used so far: 123000
Number of point (instruction) evaluations so far: 246881526
--- Timings ---
Current time: 1529615309082 milliseconds
Total Time:         426.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       164.0 seconds, 38.5%
Fitness Testing:    204.6 seconds, 48.0%
Report:              57.4 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 122
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 123
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 123
;;******************************
;; -*- Number IO problem report - generation 123
Test total error for best: 11489.9327
Test mean error for best: 5.74497
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_min} {:instruction integer_rot} {:instruction integer_max} {:instruction float_min} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction in1} {:instruction in1} {:instruction float_dup_times} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_dec} {:instruction in1} {:instruction integer_inc} {:instruction integer_mod} {:instruction integer_swap} {:instruction integer_swap} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_inc} {:instruction in2} {:instruction float_yank} {:instruction in2} {:instruction float_dup_times} {:instruction float_sub} {:instruction float_mod} {:instruction in1} {:instruction integer_shove} {:instruction integer_shove} {:instruction float_dup_items} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_cos} {:instruction integer_sub} {:instruction integer_div} {:instruction float_add} {:instruction integer_sub} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_div} {:instruction float_sin} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_rot} {:instruction print_integer} {:instruction float_swap} {:instruction integer_add})
Best program: (float_dup_times float_stackdepth integer_dec float_min integer_rot integer_max float_min integer_rot integer_dup_times float_dup_items in1 in1 float_dup_times integer_div in2 float_dup_times integer_sub float_sub integer_dec in1 integer_inc integer_mod integer_swap integer_swap integer_min float_frominteger float_inc float_inc in2 float_yank in2 float_dup_times float_sub float_mod in1 integer_shove integer_shove float_dup_items float_max in2 float_mult float_mult float_cos integer_fromfloat float_cos integer_sub integer_div float_add integer_sub float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub integer_swap integer_div float_sin in1 integer_fromfloat integer_add float_swap float_rot print_integer float_swap integer_add)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 68
Size: 69
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2374.7240545000013
Median total errors in population: 281.16429999999997
Error averages by case: (86.2587339999986 11.188 90.60907510000006 11.357 67.91875479999946 11.126 78.41902039999935 10.149 93.55426340000126 11.308 80.8895608000014 11.264 90.80275209999878 11.208 91.07025989999912 11.332 88.4127378000007 11.187 82.77127200000126 11.424 78.71994359999951 11.257 80.79462800000039 11.389 85.794643199999 11.19 79.81496640000138 11.23 84.96091750000015 11.413 79.30052300000135 10.248 70.36743589999956 11.156 84.05789639999955 10.205 82.97607199999943 10.144 91.83836889999904 11.328 90.90624510000085 11.291 81.49466389999918 11.273 93.5459190000003 11.309 75.00463400000075 10.917 87.34376730000062 11.204)
Error minima by case: (0.4247 10 0.4241 2 0.3722 2 0.1619 2 0.3687 2 0.0988 3 0.2563 2 0.276 2 0.1491 2 0.498 3 0.3954 2 0.3556 2 0.1023 4 0.3576 3 0.3743 11 0.2035 2 0.2941 2 0.2077 4 0.1022 3 0.4059 2 0.1968 2 0.2809 3 0.2071 2 0.2804 2 0.4029 2)
Average genome size in population (length): 71.885
Average program size in population (points): 72.885
Average percent parens in population: 0.014
Minimum age in population: 173.7692491290973
Maximum age in population: 178.3622756769638
Average age in population: 176.2102757389285
Median age in population: 176.2209208945264
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.908
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.908
Total error diversity:				 0.11
Error (vector) diversity:			 0.111
Behavioral diversity:				 0.115
--- Run Statistics ---
Number of program evaluations used so far: 124000
Number of point (instruction) evaluations so far: 248680399
--- Timings ---
Current time: 1529615312306 milliseconds
Total Time:         429.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       165.3 seconds, 38.5%
Fitness Testing:    206.1 seconds, 48.0%
Report:              57.8 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 123
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 124
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 124
;;******************************
;; -*- Number IO problem report - generation 124
Test total error for best: 11473.9649
Test mean error for best: 5.73698
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_shove} {:instruction integer_swap} {:instruction float_min} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_dec} {:instruction in1} {:instruction float_yankdup} {:instruction float_shove} {:instruction float_inc} {:instruction in2} {:instruction float_add} {:instruction float_add} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction in2} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction float_mod} {:instruction float_mod} {:instruction float_stackdepth} {:instruction float_mod} {:instruction float_stackdepth} {:instruction float_mod} {:instruction in1} {:instruction integer_shove} {:instruction integer_shove} {:instruction float_dup_items} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction integer_max} {:instruction float_cos} {:instruction integer_div} {:instruction float_dup_times} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_mod} {:instruction float_mod} {:instruction float_sub} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction float_rot} {:instruction float_sin} {:instruction float_sin} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction float_sin} {:instruction float_flush} {:instruction print_integer} {:instruction float_flush})
Best program: (integer_shove integer_swap float_min float_inc float_frominteger integer_dec in1 float_yankdup float_shove float_inc in2 float_add float_add integer_max float_dup_times float_max integer_mod integer_dup_items in2 integer_dup_items float_dup_items float_mod float_mod float_stackdepth float_mod float_stackdepth float_mod in1 integer_shove integer_shove float_dup_items float_max in2 float_mult integer_max float_cos integer_div float_dup_times integer_div in2 float_dup_times float_dup_items float_mod float_mod float_sub float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub integer_swap float_rot float_sin float_sin float_mult in1 integer_fromfloat integer_add float_flush float_sin float_flush print_integer float_flush)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2573.4503600000007
Median total errors in population: 281.16429999999997
Error averages by case: (88.70565269999871 11.225 100.5750542000001 11.444 75.74324419999954 11.167 82.84114649999977 10.175 104.6743350000013 11.384 83.44636320000068 11.309 98.19290719999911 11.278 101.27068349999924 11.393 97.83415320000037 11.265 85.45727200000067 11.483 83.26548099999977 11.309 85.56205039999988 11.449 102.42757409999892 11.241 82.14125120000124 11.277 87.83777779999984 11.456 84.24867750000134 10.3 83.66138269999952 11.144 100.23041569999948 10.239 100.09136379999926 10.117 102.63833899999916 11.411 100.14279590000069 11.383 85.58525939999923 11.328 105.1663588000003 11.385 80.83659360000073 10.94 92.50722740000045 11.265)
Error minima by case: (0.4247 10 0.4241 10 0.3722 10 0.1619 8 0.3687 9 0.0988 10 0.2563 9 0.276 9 0.1491 9 0.498 10 0.3954 10 0.3556 11 0.2337 10 0.3576 10 0.3743 10 0.2035 9 0.2941 9 0.2077 9 0.1022 8 0.4059 9 0.1968 9 0.2809 10 0.2071 8 0.3104 9 0.4029 10)
Average genome size in population (length): 72.025
Average program size in population (points): 73.025
Average percent parens in population: 0.014
Minimum age in population: 175.2592368516397
Maximum age in population: 179.7765357227409
Average age in population: 177.6275346123024
Median age in population: 177.6544467713055
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.875
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.875
Total error diversity:				 0.111
Error (vector) diversity:			 0.112
Behavioral diversity:				 0.115
--- Run Statistics ---
Number of program evaluations used so far: 125000
Number of point (instruction) evaluations so far: 250482656
--- Timings ---
Current time: 1529615315594 milliseconds
Total Time:         432.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       166.7 seconds, 38.5%
Fitness Testing:    207.6 seconds, 48.0%
Report:              58.2 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 124
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 125
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 125
;;******************************
;; -*- Number IO problem report - generation 125
Test total error for best: 11476.5633
Test mean error for best: 5.73828
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_pop} {:instruction tag_float_715} {:instruction float_min} {:instruction float_min} {:instruction integer_min} {:instruction integer_swap} {:instruction float_mult} {:instruction in2} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction in2} {:instruction integer_add} {:instruction 96.80697452437909} {:instruction integer_min} {:instruction integer_yank} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_mod} {:instruction in1} {:instruction float_max} {:instruction in2} {:instruction float_add} {:instruction integer_dec} {:instruction float_sub} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction integer_dec} {:instruction in1} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_mod} {:instruction float_mod} {:instruction float_sin} {:instruction float_frominteger} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_div} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_cos} {:instruction print_integer})
Best program: (integer_pop integer_pop tag_float_715 float_min float_min integer_min integer_swap float_mult in2 float_frominteger integer_dup_items in2 integer_add 96.80697452437909 integer_min integer_yank float_max float_swap float_mod float_dup_items float_mod in1 float_max in2 float_add integer_dec float_sub integer_flush float_swap integer_div in2 integer_dec in1 integer_flush float_swap integer_div in2 float_dup_times float_dup_items float_mod float_mod float_sin float_frominteger in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub integer_swap integer_div float_mult in1 integer_fromfloat integer_add float_cos print_integer)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2812.1732632000007
Median total errors in population: 281.16429999999997
Error averages by case: (95.52357139999859 11.227 113.71380869999972 11.448 82.24358939999942 11.163 90.67084159999885 10.175 116.43870410000196 11.383 92.34168360000183 11.318 111.96374539999827 11.29 113.82228149999891 11.397 109.3476573000009 11.256 94.37181000000167 11.515 91.09501439999892 11.333 94.35567320000071 11.459 109.81342979999869 11.243 90.9181720000013 11.286 95.58250960000055 11.501 92.09977600000141 10.319 89.2651620999995 11.163 108.34135619999948 10.278 107.07989609999878 10.148 114.39453449999881 11.425 113.31124570000118 11.381 94.38960769999912 11.356 116.6134950000003 11.404 86.21528160000064 10.941 109.58741630000058 11.264)
Error minima by case: (0.4247 10 0.4241 7 0.3722 3 0.1619 5 0.3687 7 0.0988 6 0.2563 5 0.276 7 0.1491 5 0.498 8 0.3954 5 0.3556 6 0.2337 10 0.3576 5 0.3743 10 0.2035 5 0.2941 10 0.2077 8 0.1022 8 0.4059 7 0.1968 6 0.2809 6 0.2071 7 0.3104 4 0.4029 5)
Average genome size in population (length): 71.25
Average program size in population (points): 72.25
Average percent parens in population: 0.014
Minimum age in population: 176.76889662076
Maximum age in population: 181.7378845212171
Average age in population: 179.0380436826318
Median age in population: 179.0466525117206
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.894
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.894
Total error diversity:				 0.102
Error (vector) diversity:			 0.104
Behavioral diversity:				 0.107
--- Run Statistics ---
Number of program evaluations used so far: 126000
Number of point (instruction) evaluations so far: 252265321
--- Timings ---
Current time: 1529615318856 milliseconds
Total Time:         435.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       168.0 seconds, 38.5%
Fitness Testing:    209.2 seconds, 48.0%
Report:              58.6 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 125
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 126
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 126
;;******************************
;; -*- Number IO problem report - generation 126
Test total error for best: 11486.9327
Test mean error for best: 5.74347
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_shove} {:instruction integer_swap} {:instruction integer_pop} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction integer_min} {:instruction print_integer} {:instruction float_swap} {:instruction float_mod} {:instruction integer_yank} {:instruction float_pop} {:instruction float_yankdup} {:instruction integer_dec} {:instruction 96.80697452437909} {:instruction float_flush} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction in2} {:instruction float_dup_times} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_sub} {:instruction integer_mult} {:instruction float_sub} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction in2} {:instruction float_dup_times} {:instruction integer_sub} {:instruction in2} {:instruction float_dup_times} {:instruction float_sub} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction float_rot} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_add} {:instruction float_add} {:instruction integer_dup} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_mod} {:instruction float_shove} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction integer_fromfloat} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_div} {:instruction float_sub} {:instruction float_add} {:instruction integer_mult} {:instruction float_sub} {:instruction float_sub} {:instruction float_sin} {:instruction float_max} {:instruction integer_yank} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_sin} {:instruction integer_div} {:instruction float_dup} {:instruction float_flush} {:instruction print_integer})
Best program: (float_dup_times float_shove integer_swap integer_pop integer_dup_items float_yankdup integer_min print_integer float_swap float_mod integer_yank float_pop float_yankdup integer_dec 96.80697452437909 float_flush integer_div in2 float_dup_times integer_div in2 float_dup_times in2 float_dup_times float_swap integer_div in2 in2 float_dup_times float_dup_items integer_sub integer_mult float_sub float_mod float_mod in1 integer_flush float_max in2 in2 float_dup_times integer_sub in2 float_dup_times float_sub integer_div integer_dup_times float_max float_swap float_rot in2 float_dup_times float_dup_items float_pop float_mod in2 float_add float_add integer_dup in2 float_dup_times float_dup_items integer_shove float_mod float_shove float_mod in1 integer_flush float_max in2 float_mult integer_fromfloat float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub integer_swap integer_div float_sub float_add integer_mult float_sub float_sub float_sin float_max integer_yank float_mult in1 integer_fromfloat integer_add float_sin integer_div float_dup float_flush print_integer)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 105
Size: 106
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2273.909268600001
Median total errors in population: 281.16429999999997
Error averages by case: (80.31133949999864 11.226 85.82585200000041 11.406 64.03964209999941 11.149 72.56722670000013 10.155 88.68241840000118 11.361 75.28626440000048 11.272 82.36976459999943 11.244 85.78695609999912 11.355 81.29063700000005 11.229 77.2352720000005 11.444 73.35541500000022 11.303 78.06840599999958 11.428 90.13247069999889 11.209 70.49789360000125 11.22 79.35349839999945 11.478 74.95775210000134 10.3 70.54490849999952 11.156 87.83274719999956 10.233 87.03745849999956 10.142 86.71205039999906 11.382 85.39770720000055 11.356 78.22797849999913 11.303 88.86189800000031 11.361 70.83573120000072 10.915 80.83198050000055 11.239)
Error minima by case: (0.4247 10 0.4241 6 0.3722 1 0.1619 2 0.3687 7 0.0988 2 0.2563 6 0.276 6 0.1491 5 0.498 3 0.3954 2 0.3556 2 0.2337 10 0.3576 1 0.3743 10 0.2035 2 0.2941 9 0.2077 8 0.1022 8 0.4059 7 0.1968 6 0.2809 2 0.2071 7 0.3104 2 0.4029 5)
Average genome size in population (length): 71.41
Average program size in population (points): 72.41
Average percent parens in population: 0.014
Minimum age in population: 178.376435699706
Maximum age in population: 182.9220201076497
Average age in population: 180.5145905655076
Median age in population: 180.5435788989768
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.896
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.896
Total error diversity:				 0.116
Error (vector) diversity:			 0.119
Behavioral diversity:				 0.123
--- Run Statistics ---
Number of program evaluations used so far: 127000
Number of point (instruction) evaluations so far: 254052155
--- Timings ---
Current time: 1529615322290 milliseconds
Total Time:         439.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       169.3 seconds, 38.6%
Fitness Testing:    210.6 seconds, 48.0%
Report:              59.0 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 126
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 127
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 127
;;******************************
;; -*- Number IO problem report - generation 127
Test total error for best: 11476.5633
Test mean error for best: 5.73828
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction float_max} {:instruction integer_max} {:instruction float_mod} {:instruction integer_shove} {:instruction float_pop} {:instruction integer_dec} {:instruction in1} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_dec} {:instruction integer_dec} {:instruction in1} {:instruction integer_shove} {:instruction integer_dec} {:instruction in1} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_div} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_mod} {:instruction float_sin} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction integer_dup} {:instruction integer_div} {:instruction float_dup_times} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_mod} {:instruction float_mod} {:instruction float_sub} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction float_rot} {:instruction float_sin} {:instruction float_sin} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction float_sin} {:instruction float_flush} {:instruction print_integer} {:instruction float_flush})
Best program: (integer_dup_items float_max integer_max float_mod integer_shove float_pop integer_dec in1 integer_rot integer_mult integer_div in2 float_dup_times integer_dup_items integer_min integer_dec integer_dec in1 integer_shove integer_dec in1 integer_shove float_dup integer_div integer_div in2 float_dup_times float_mod float_sin float_mod in1 integer_flush float_max integer_dup integer_div float_dup_times integer_div in2 float_dup_times float_dup_items float_mod float_mod float_sub float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub integer_swap float_rot float_sin float_sin float_mult in1 integer_fromfloat integer_add float_flush float_sin float_flush print_integer float_flush)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2595.923213800001
Median total errors in population: 281.16429999999997
Error averages by case: (90.39400809999859 11.211 103.40957759999961 11.394 74.94406039999937 11.138 83.8535846999992 10.152 104.56492550000183 11.341 87.49056080000139 11.278 100.10744319999826 11.254 101.78173999999898 11.362 98.03392310000105 11.229 89.40376600000127 11.438 84.11717979999945 11.278 88.33598360000039 11.399 99.25714499999879 11.209 85.16760880000135 11.243 90.09904040000002 11.436 84.8917475000014 10.265 79.63311429999952 11.168 98.25099469999955 10.224 97.36521979999878 10.149 102.9465093999989 11.372 103.00923200000133 11.34 88.54938299999914 11.298 105.05565140000031 11.347 80.48211200000067 10.935 97.08570270000062 11.233)
Error minima by case: (0.4247 9 0.4241 6 0.3722 2 0.1619 4 0.3687 6 0.0988 5 0.2563 4 0.276 6 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 9 0.3576 4 0.3743 11 0.2035 4 0.2941 10 0.2077 8 0.1022 8 0.4059 6 0.1968 5 0.2809 5 0.2071 6 0.3104 3 0.4029 4)
Average genome size in population (length): 70.82
Average program size in population (points): 71.82
Average percent parens in population: 0.014
Minimum age in population: 179.4276483808101
Maximum age in population: 184.333240327674
Average age in population: 181.9556594413769
Median age in population: 181.9688254809198
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.895
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.895
Total error diversity:				 0.112
Error (vector) diversity:			 0.114
Behavioral diversity:				 0.119
--- Run Statistics ---
Number of program evaluations used so far: 128000
Number of point (instruction) evaluations so far: 255824190
--- Timings ---
Current time: 1529615325581 milliseconds
Total Time:         442.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       170.7 seconds, 38.6%
Fitness Testing:    212.2 seconds, 47.9%
Report:              59.6 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 127
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 128
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 128
;;******************************
;; -*- Number IO problem report - generation 128
Test total error for best: 11481.5633
Test mean error for best: 5.74078
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction float_max} {:instruction float_flush} {:instruction float_sub} {:instruction integer_shove} {:instruction float_dec} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction in1} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_sub} {:instruction integer_mult} {:instruction float_sub} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction float_max} {:instruction float_stackdepth} {:instruction float_mod} {:instruction in1} {:instruction integer_shove} {:instruction integer_shove} {:instruction float_dup_items} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_mod} {:instruction in1} {:instruction integer_add} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_add} {:instruction integer_sub} {:instruction float_cos} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction integer_pop} {:instruction float_sin} {:instruction tag_float_257} {:instruction float_swap} {:instruction tag_float_78})
Best program: (integer_dup_items float_max float_flush float_sub integer_shove float_dec float_swap float_mod in1 in1 integer_div in2 float_dup_times integer_mod integer_sub integer_mult float_sub float_mod float_mod in1 float_max float_stackdepth float_mod in1 integer_shove integer_shove float_dup_items float_max in2 float_mult float_mult float_cos float_mult integer_yankdup float_yankdup float_dup_times integer_div in2 float_dup_times float_mod in1 integer_add float_max in2 float_mult float_mult float_cos integer_fromfloat float_add integer_sub float_cos float_sub float_add integer_sub float_sub integer_div integer_rot float_dec tag_float_518 float_mult in1 integer_fromfloat integer_add float_flush print_integer integer_pop float_sin tag_float_257 float_swap tag_float_78)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2285.567718600001
Median total errors in population: 281.16429999999997
Error averages by case: (83.00929419999835 11.189 85.37935140000039 11.299 64.75614999999922 11.119 75.9183727999998 10.141 87.26673630000137 11.265 79.29725240000081 11.248 83.85712569999906 11.192 85.1780364999991 11.307 82.7036746000003 11.183 81.231754000001 11.387 76.15624420000006 11.232 80.57227239999999 11.361 83.06611349999886 11.19 78.60718480000163 11.228 82.55819129999975 11.371 76.76527000000168 10.216 70.43298659999951 11.131 81.47454229999947 10.208 79.3487021999999 10.125 85.679504999999 11.312 84.89036060000053 11.278 80.57110209999902 11.264 87.49869840000031 11.275 69.9377830000009 10.952 82.74601430000065 11.192)
Error minima by case: (0.4247 11 0.4241 6 0.3722 2 0.1619 4 0.3687 6 0.0988 5 0.2563 4 0.276 6 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 10 0.3576 4 0.3743 11 0.2035 4 0.2941 9 0.2077 8 0.1022 8 0.4059 6 0.1968 5 0.2809 5 0.2071 6 0.3104 3 0.4029 4)
Average genome size in population (length): 70.661
Average program size in population (points): 71.661
Average percent parens in population: 0.014
Minimum age in population: 180.4276483808101
Maximum age in population: 185.4570806428879
Average age in population: 183.3673133491731
Median age in population: 183.3989541528467
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.877
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.877
Total error diversity:				 0.094
Error (vector) diversity:			 0.094
Behavioral diversity:				 0.098
--- Run Statistics ---
Number of program evaluations used so far: 129000
Number of point (instruction) evaluations so far: 257592238
--- Timings ---
Current time: 1529615328830 milliseconds
Total Time:         445.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       172.0 seconds, 38.6%
Fitness Testing:    213.7 seconds, 47.9%
Report:              60.0 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 128
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 129
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 129
;;******************************
;; -*- Number IO problem report - generation 129
Test total error for best: 11475.9327
Test mean error for best: 5.73797
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction tag_float_715} {:instruction integer_pop} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_inc} {:instruction 96.80697452437909} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_add} {:instruction integer_dec} {:instruction in1} {:instruction integer_flush} {:instruction integer_shove} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction in2} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_sub} {:instruction integer_mult} {:instruction float_sub} {:instruction float_mod} {:instruction float_mod} {:instruction float_shove} {:instruction float_mod} {:instruction float_sin} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction print_integer} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_div} {:instruction float_dup})
Best program: (integer_pop tag_float_715 integer_pop integer_min float_frominteger float_inc 96.80697452437909 float_swap integer_div in2 float_add integer_dec in1 integer_flush integer_shove integer_div in2 float_dup_times in2 float_dup_times integer_mod integer_sub integer_mult float_sub float_mod float_mod float_shove float_mod float_sin float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub integer_swap in1 integer_fromfloat integer_add float_flush print_integer float_swap print_integer float_dup_times integer_yankdup float_inc integer_div float_dup)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2293.343366100001
Median total errors in population: 281.16429999999997
Error averages by case: (82.22929399999877 11.182 84.2959577000003 11.325 64.75801149999951 11.12 76.50030839999967 10.128 87.22238340000095 11.282 78.36287370000073 11.239 82.13169399999926 11.209 85.45825599999927 11.304 81.57356410000031 11.197 79.72558500000083 11.376 76.75580459999983 11.235 79.28021299999988 11.368 89.24901049999899 11.171 76.23562780000117 11.22 81.98598149999984 11.381 77.6794070000012 10.221 70.61466889999954 11.144 87.40296889999952 10.19 85.77545129999943 10.139 85.4369847999992 11.321 84.51156000000051 11.296 79.76350459999931 11.264 87.5320734000003 11.306 72.52529450000064 10.936 79.5838875000005 11.199)
Error minima by case: (0.4247 9 0.4241 6 0.3722 1 0.1619 2 0.3687 6 0.0988 2 0.2563 4 0.276 6 0.1491 4 0.498 3 0.3954 2 0.3556 2 0.2337 9 0.3576 1 0.3743 10 0.2035 2 0.2941 9 0.2077 8 0.1022 8 0.4059 6 0.1968 5 0.2809 2 0.2071 6 0.3104 2 0.4029 4)
Average genome size in population (length): 70.721
Average program size in population (points): 71.721
Average percent parens in population: 0.014
Minimum age in population: 182.3326026660849
Maximum age in population: 186.782133429637
Average age in population: 184.8630038784991
Median age in population: 184.8864162091214
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.884
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.884
Total error diversity:				 0.106
Error (vector) diversity:			 0.107
Behavioral diversity:				 0.112
--- Run Statistics ---
Number of program evaluations used so far: 130000
Number of point (instruction) evaluations so far: 259361601
--- Timings ---
Current time: 1529615332074 milliseconds
Total Time:         449.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       173.3 seconds, 38.6%
Fitness Testing:    215.2 seconds, 47.9%
Report:              60.4 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 129
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 130
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 130
;;******************************
;; -*- Number IO problem report - generation 130
Test total error for best: 11476.5633
Test mean error for best: 5.73828
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_dec} {:instruction float_min} {:instruction 35.77542359015047} {:instruction 96.80697452437909} {:instruction float_flush} {:instruction float_min} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction integer_dec} {:instruction in1} {:instruction float_dup_times} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction integer_pop} {:instruction integer_sub} {:instruction integer_mult} {:instruction float_sub} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction tag_float_518} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction tag_float_257} {:instruction float_swap} {:instruction tag_float_78})
Best program: (integer_dec integer_dec float_min 35.77542359015047 96.80697452437909 float_flush float_min integer_rot integer_dup_times float_dup_items integer_dec in1 float_dup_times float_swap integer_div in2 in2 float_dup_times float_dup_items float_dup_times integer_pop integer_sub integer_mult float_sub float_mod float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_add integer_sub integer_swap integer_div float_sin float_max tag_float_518 in1 integer_fromfloat integer_add float_flush print_integer float_swap float_sin tag_float_257 float_swap tag_float_78)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2802.210499400001
Median total errors in population: 281.16429999999997
Error averages by case: (100.3413785999984 11.224 110.31089339999964 11.422 81.04092549999952 11.154 90.8660635999993 10.192 112.84331820000175 11.382 97.32437520000153 11.313 109.45490829999831 11.229 109.85587139999913 11.386 107.352104300001 11.238 99.54829200000142 11.498 91.21562729999938 11.299 97.4959620000003 11.441 106.40354489999882 11.244 95.36531760000156 11.291 99.56365490000006 11.469 91.85064920000141 10.301 88.89161319999948 11.145 104.67378749999949 10.247 103.5830062999992 10.145 110.98438999999904 11.386 110.06961100000134 11.348 97.85516949999901 11.337 112.99885800000031 11.365 86.86839990000072 10.944 107.20777760000065 11.245)
Error minima by case: (0.4247 10 0.4241 2 0.3722 2 0.1619 4 0.3687 2 0.0988 5 0.2563 2 0.276 2 0.1491 2 0.498 7 0.3954 4 0.3556 5 0.2337 7 0.3576 4 0.3743 11 0.2035 4 0.2941 8 0.2077 8 0.1022 8 0.4059 2 0.1968 2 0.2809 5 0.2071 2 0.3104 3 0.4029 4)
Average genome size in population (length): 70.021
Average program size in population (points): 71.021
Average percent parens in population: 0.014
Minimum age in population: 183.4634245838945
Maximum age in population: 188.3851271592997
Average age in population: 186.3245878530649
Median age in population: 186.3689520777649
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.885
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.885
Total error diversity:				 0.103
Error (vector) diversity:			 0.104
Behavioral diversity:				 0.108
--- Run Statistics ---
Number of program evaluations used so far: 131000
Number of point (instruction) evaluations so far: 261113514
--- Timings ---
Current time: 1529615335288 milliseconds
Total Time:         452.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       174.7 seconds, 38.6%
Fitness Testing:    216.7 seconds, 47.9%
Report:              60.8 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 130
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 131
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 131
;;******************************
;; -*- Number IO problem report - generation 131
Test total error for best: 11494.5633
Test mean error for best: 5.74728
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7
           
Correct output: 101.5758530321 | Program output: 101
          
Correct output: 5.3722386499   | Program output: 5
            
Correct output: 50.838076484   | Program output: 50
           
Correct output: 149.3686745246 | Program output: 149
          
Correct output: -86.0987731432 | Program output: -86
          
Correct output: 99.2563149379  | Program output: 99
           
Correct output: 100.2759538143 | Program output: 100
          
Correct output: 55.8508667649  | Program output: 55
           
Correct output: -120.4980478621 | Program output: -120
         
Correct output: 50.3953926202  | Program output: 50
           
Correct output: -86.6444443408 | Program output: -86
          
Correct output: 43.2337451713  | Program output: 43
           
Correct output: -69.3575988725 | Program output: -69
          
Correct output: -32.3742761841 | Program output: -33
          
Correct output: 21.203493141   | Program output: 21
           
Correct output: 6.2941290036   | Program output: 6
            
Correct output: 28.207733934   | Program output: 28
           
Correct output: 3.102196665    | Program output: 3
            
Correct output: 117.4058715345 | Program output: 117
          
Correct output: 105.1968404292 | Program output: 105
          
Correct output: -95.2809380546 | Program output: -95
          
Correct output: 145.7928624605 | Program output: 145
          
Correct output: 3.3104353754   | Program output: 3
            
Correct output: 60.4029417431  | Program output: 60
           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_pop} {:instruction integer_max} {:instruction float_min} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction in2} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction in2} {:instruction integer_add} {:instruction 96.80697452437909} {:instruction integer_min} {:instruction integer_yank} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_mod} {:instruction in1} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mod} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_yankdup} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_dup_times} {:instruction float_mult} {:instruction float_mult} {:instruction float_div} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_stackdepth} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_swap} {:instruction in1} {:instruction float_flush} {:instruction print_integer} {:instruction print_newline} {:instruction integer_rot} {:instruction float_mod} {:instruction float_mult} {:instruction float_shove} {:instruction float_pop} {:instruction integer_inc} {:instruction float_shove} {:instruction float_shove} {:instruction integer_swap})
Best program: (integer_dec integer_pop integer_max float_min integer_rot integer_dup_times in2 float_frominteger integer_dup_items in2 integer_add 96.80697452437909 integer_min integer_yank float_max float_swap float_mod float_dup_items float_mod in1 float_max in2 float_mult float_mod float_cos integer_fromfloat float_yankdup integer_sub float_sub integer_dup_times float_mult float_mult float_div integer_fromfloat float_mult float_mult float_sub float_add integer_sub integer_mod float_stackdepth float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_sub integer_div float_sin float_max tag_float_518 float_mult in1 integer_fromfloat integer_add float_swap float_swap in1 float_flush print_integer print_newline integer_rot float_mod float_mult float_shove float_pop integer_inc float_shove float_shove integer_swap)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2409.972041700001
Median total errors in population: 281.16429999999997
Error averages by case: (88.56311649999857 11.185 90.69962650000008 11.32 67.84573759999938 11.122 81.0271847999998 10.146 92.74122750000113 11.299 86.61775840000124 11.253 87.33833189999903 11.178 90.5236769999992 11.307 85.8422653000004 11.172 88.3322600000011 11.409 81.22469239999992 11.226 86.3583392 11.372 88.85554089999894 11.186 84.74675440000145 11.229 88.25093429999997 11.388 81.81002100000138 10.228 68.76728369999954 11.149 87.3931204999995 10.217 85.52255419999943 10.138 91.17216249999912 11.306 90.3871130000008 11.277 86.98854029999912 11.268 93.02664750000031 11.278 74.77418240000074 10.929 84.39396990000058 11.187)
Error minima by case: (0.4247 10 0.4241 2 0.3722 2 0.1619 2 0.3687 2 0.0988 3 0.2563 2 0.276 2 0.1491 2 0.498 3 0.3954 2 0.3556 2 0.2337 9 0.3576 3 0.3743 11 0.2035 2 0.2941 9 0.2077 8 0.1022 8 0.4059 2 0.1968 2 0.2809 3 0.2071 2 0.3104 2 0.4029 2)
Average genome size in population (length): 68.814
Average program size in population (points): 69.814
Average percent parens in population: 0.015
Minimum age in population: 184.9956674637029
Maximum age in population: 189.7244107809417
Average age in population: 187.7599578030362
Median age in population: 187.7899214520056
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.879
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.879
Total error diversity:				 0.105
Error (vector) diversity:			 0.105
Behavioral diversity:				 0.111
--- Run Statistics ---
Number of program evaluations used so far: 132000
Number of point (instruction) evaluations so far: 262834963
--- Timings ---
Current time: 1529615338488 milliseconds
Total Time:         455.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       176.0 seconds, 38.6%
Fitness Testing:    218.2 seconds, 47.9%
Report:              61.2 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 131
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 132
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 132
;;******************************
;; -*- Number IO problem report - generation 132
Test total error for best: 11475.9327
Test mean error for best: 5.73797
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_dec} {:instruction tag_float_715} {:instruction integer_pop} {:instruction integer_shove} {:instruction integer_max} {:instruction integer_mod} {:instruction float_rot} {:instruction in2} {:instruction integer_pop} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_inc} {:instruction 96.80697452437909} {:instruction float_flush} {:instruction float_sub} {:instruction integer_shove} {:instruction float_dec} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction in1} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction tagged_56} {:instruction float_div} {:instruction integer_div} {:instruction in2} {:instruction integer_div} {:instruction in1} {:instruction integer_shove} {:instruction integer_flush} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction float_dup_times} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_sub} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_max} {:instruction in2} {:instruction 21.118957313571983} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction float_dup} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mod} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction float_sub} {:instruction float_max} {:instruction integer_add} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_sin} {:instruction float_flush} {:instruction print_integer} {:instruction float_flush} {:instruction print_integer} {:instruction integer_fromfloat})
Best program: (float_swap float_dec tag_float_715 integer_pop integer_shove integer_max integer_mod float_rot in2 integer_pop integer_min float_frominteger float_inc 96.80697452437909 float_flush float_sub integer_shove float_dec float_swap float_mod in1 in1 integer_div in2 float_dup_times tagged_56 float_div integer_div in2 integer_div in1 integer_shove integer_flush in1 integer_yank in2 float_dup_times integer_div in2 float_dup_times float_sub integer_div integer_dup_times float_max in2 21.118957313571983 float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_sub float_dup float_mult float_cos integer_fromfloat float_mod float_mult float_sub float_add float_sub float_max integer_add float_mult in1 integer_fromfloat integer_add float_swap float_sin float_flush print_integer float_flush print_integer integer_fromfloat)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2110.731315300001
Median total errors in population: 281.16429999999997
Error averages by case: (72.34533639999883 11.177 82.8596053000006 11.323 53.1395992999996 11.084 62.60645140000054 10.118 85.40719670000097 11.262 69.1663632000005 11.206 81.08100869999954 11.19 83.01993199999926 11.281 79.45665200000008 11.168 71.0702760000005 11.371 62.94415680000062 11.214 69.79477669999967 11.35 82.03978339999901 11.184 67.0176088000011 11.181 71.68392309999955 11.385 63.740172000001074 10.207 59.33306379999956 11.134 80.09756409999957 10.201 78.97058029999971 10.14 83.3011380999992 11.312 82.35669740000021 11.27 70.06845189999936 11.234 85.52461750000028 11.281 58.86897440000055 10.909 78.48238600000053 11.173)
Error minima by case: (0.4247 11 0.4241 6 0.3722 2 0.1619 4 0.3687 6 0.0988 5 0.2563 4 0.276 6 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 10 0.3576 4 0.3743 11 0.2035 4 0.2941 10 0.2077 8 0.1022 8 0.4059 6 0.1968 5 0.2809 5 0.2071 6 0.3104 3 0.4029 4)
Average genome size in population (length): 68.285
Average program size in population (points): 69.285
Average percent parens in population: 0.015
Minimum age in population: 186.0161632433052
Maximum age in population: 191.3553248593113
Average age in population: 189.2284538156511
Median age in population: 189.302229339176
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.885
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.885
Total error diversity:				 0.113
Error (vector) diversity:			 0.114
Behavioral diversity:				 0.124
--- Run Statistics ---
Number of program evaluations used so far: 133000
Number of point (instruction) evaluations so far: 264543176
--- Timings ---
Current time: 1529615341680 milliseconds
Total Time:         458.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       177.3 seconds, 38.7%
Fitness Testing:    219.6 seconds, 47.9%
Report:              61.6 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 132
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 133
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 133
;;******************************
;; -*- Number IO problem report - generation 133
Test total error for best: 11476.5633
Test mean error for best: 5.73828
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction float_dup} {:instruction float_swap} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_mult} {:instruction tag_float_736} {:instruction tag_float_715} {:instruction integer_swap} {:instruction integer_inc} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_sub} {:instruction in1} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_yank} {:instruction float_add} {:instruction float_add} {:instruction in2} {:instruction float_add} {:instruction in2} {:instruction float_sub} {:instruction integer_flush} {:instruction float_swap} {:instruction print_integer} {:instruction in2} {:instruction integer_dec} {:instruction in1} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_mod} {:instruction float_mod} {:instruction integer_sub} {:instruction float_frominteger} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction float_mult} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction in1} {:instruction integer_div} {:instruction float_sin} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_rot} {:instruction print_integer} {:instruction float_swap} {:instruction integer_add})
Best program: (float_min float_dup float_swap float_div integer_dup_items float_mult tag_float_736 tag_float_715 integer_swap integer_inc float_frominteger float_inc float_sub in1 integer_dec integer_dec integer_dec integer_yank float_add float_add in2 float_add in2 float_sub integer_flush float_swap print_integer in2 integer_dec in1 integer_flush float_swap integer_div in2 float_dup_times float_dup_items float_mod float_mod integer_sub float_frominteger in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_sub float_mult float_mult float_mult float_sub float_add integer_sub in1 integer_div float_sin in1 integer_fromfloat integer_add float_swap float_rot print_integer float_swap integer_add)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2242.389271400001
Median total errors in population: 281.16429999999997
Error averages by case: (77.69591239999872 11.195 88.42135320000021 11.356 55.66725919999968 11.133 70.84621450000006 10.12 92.20207000000119 11.3 73.49636320000062 11.244 86.7324881999991 11.209 88.78942059999905 11.312 83.43050910000025 11.215 75.89126400000056 11.41 71.4195550000002 11.267 74.4624059999996 11.401 86.36997019999887 11.191 71.73639680000139 11.196 76.61458199999942 11.432 72.6053365000013 10.257 60.4656348999996 11.148 83.91617419999953 10.222 82.44599919999976 10.127 89.19556739999896 11.338 87.52511200000063 11.318 75.56782119999907 11.263 91.31140390000033 11.308 64.41934020000052 10.888 84.09911750000063 11.212)
Error minima by case: (0.4247 10 0.4241 6 0.3722 1 0.1619 2 0.3687 6 0.0988 2 0.2563 4 0.276 6 0.1491 4 0.498 3 0.3954 2 0.3556 2 0.2337 10 0.3576 1 0.3743 11 0.2035 2 0.2941 10 0.2077 8 0.1022 8 0.4059 6 0.1968 5 0.2809 2 0.2071 6 0.3104 2 0.4029 4)
Average genome size in population (length): 68.694
Average program size in population (points): 69.694
Average percent parens in population: 0.015
Minimum age in population: 187.9548700345593
Maximum age in population: 192.5721061297384
Average age in population: 190.6802716591004
Median age in population: 190.717716940629
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.892
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.892
Total error diversity:				 0.117
Error (vector) diversity:			 0.117
Behavioral diversity:				 0.123
--- Run Statistics ---
Number of program evaluations used so far: 134000
Number of point (instruction) evaluations so far: 266261712
--- Timings ---
Current time: 1529615344873 milliseconds
Total Time:         461.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       178.7 seconds, 38.7%
Fitness Testing:    221.1 seconds, 47.9%
Report:              62.0 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 133
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 134
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 134
;;******************************
;; -*- Number IO problem report - generation 134
Test total error for best: 11475.9327
Test mean error for best: 5.73797
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction in1} {:instruction integer_mod} {:instruction integer_add} {:instruction integer_add} {:instruction -33.44961080774797} {:instruction float_dup_times} {:instruction float_swap} {:instruction float_tan} {:instruction integer_min} {:instruction tag_float_715} {:instruction integer_swap} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction float_mult} {:instruction in2} {:instruction float_frominteger} {:instruction float_dup_times} {:instruction float_sub} {:instruction integer_add} {:instruction integer_dup_times} {:instruction integer_stackdepth} {:instruction float_max} {:instruction 97.20027408926207} {:instruction integer_inc} {:instruction float_mult} {:instruction in1} {:instruction integer_flush} {:instruction integer_shove} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction in2} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_sub} {:instruction integer_mult} {:instruction float_sub} {:instruction float_mod} {:instruction float_mod} {:instruction integer_yank} {:instruction float_mod} {:instruction float_sin} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_shove} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction float_sin} {:instruction float_swap} {:instruction tag_float_78})
Best program: (integer_dup_items in1 integer_mod integer_add integer_add -33.44961080774797 float_dup_times float_swap float_tan integer_min tag_float_715 integer_swap integer_fromfloat float_flush float_mult in2 float_frominteger float_dup_times float_sub integer_add integer_dup_times integer_stackdepth float_max 97.20027408926207 integer_inc float_mult in1 integer_flush integer_shove integer_div in2 float_dup_times in2 float_dup_times integer_mod integer_sub integer_mult float_sub float_mod float_mod integer_yank float_mod float_sin float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub integer_shove in1 integer_fromfloat integer_add float_flush print_integer float_swap float_sin float_sin float_swap tag_float_78)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 68
Size: 69
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2263.874042300001
Median total errors in population: 281.16429999999997
Error averages by case: (77.81496589999881 11.176 87.73731860000018 11.335 60.4631998999994 11.113 70.05566420000035 10.128 88.79229910000073 11.286 76.05635120000053 11.234 86.07495299999928 11.212 85.9482259999995 11.311 84.26119950000044 11.191 77.45825600000043 11.379 70.55950430000038 11.238 76.19656119999962 11.347 88.965234699999 11.201 73.06782720000113 11.201 77.69768289999955 11.374 71.7911878000012 10.23 69.5817198999995 11.154 88.09036579999947 10.216 87.25325329999956 10.14 86.25615329999945 11.328 86.68883010000073 11.284 77.03466389999929 11.253 89.47636580000031 11.3 67.19057310000068 10.926 82.60068560000062 11.204)
Error minima by case: (0.4247 8 0.4241 5 0.3722 2 0.1619 4 0.3687 5 0.0988 5 0.2563 4 0.276 5 0.1491 4 0.498 6 0.3954 4 0.3556 4 0.2337 9 0.3576 4 0.3743 10 0.2035 4 0.2941 8 0.2077 9 0.1022 7 0.4059 5 0.1968 4 0.2809 5 0.2071 5 0.3104 3 0.4029 4)
Average genome size in population (length): 68.873
Average program size in population (points): 69.873
Average percent parens in population: 0.015
Minimum age in population: 189.6821569364723
Maximum age in population: 194.0289650465207
Average age in population: 192.180648855541
Median age in population: 192.2441070029039
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.873
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.873
Total error diversity:				 0.096
Error (vector) diversity:			 0.097
Behavioral diversity:				 0.103
--- Run Statistics ---
Number of program evaluations used so far: 135000
Number of point (instruction) evaluations so far: 267984607
--- Timings ---
Current time: 1529615348055 milliseconds
Total Time:         465.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       180.0 seconds, 38.7%
Fitness Testing:    222.5 seconds, 47.9%
Report:              62.4 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 134
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 135
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 135
;;******************************
;; -*- Number IO problem report - generation 135
Test total error for best: 11476.5633
Test mean error for best: 5.73828
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction tag_float_715} {:instruction integer_swap} {:instruction integer_inc} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_sin} {:instruction float_cos} {:instruction 96.80697452437909} {:instruction print_integer} {:instruction integer_pop} {:instruction integer_mod} {:instruction integer_shove} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_frominteger} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_mod} {:instruction in1} {:instruction integer_rot} {:instruction float_max} {:instruction float_shove} {:instruction integer_div} {:instruction in1} {:instruction in2} {:instruction float_dup_times} {:instruction integer_dup} {:instruction integer_max} {:instruction float_yank} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_mod} {:instruction integer_dup_times} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_div} {:instruction float_sin} {:instruction float_max} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_sub} {:instruction print_integer} {:instruction tag_float_78} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_257} {:instruction float_swap} {:instruction float_flush})
Best program: (float_yankdup tag_float_715 integer_swap integer_inc float_frominteger float_inc float_sin float_cos 96.80697452437909 print_integer integer_pop integer_mod integer_shove float_max float_swap float_mod integer_dup_times integer_dup_times float_frominteger float_swap integer_div in2 float_dup_times float_pop integer_div integer_dup_times float_mod in1 integer_rot float_max float_shove integer_div in1 in2 float_dup_times integer_dup integer_max float_yank integer_div in2 float_dup_times float_mod integer_dup_times float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_add integer_sub integer_swap integer_div float_sin float_max tag_float_518 float_mult in1 integer_fromfloat integer_add float_sub print_integer tag_float_78 float_shove float_dup_times tag_float_22 float_shove float_dup_times tag_float_257 float_swap float_flush)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2713.812333500001
Median total errors in population: 281.16429999999997
Error averages by case: (100.45385749999843 11.218 103.64888619999968 11.366 75.47332089999932 11.142 89.50217469999902 10.164 106.05773840000185 11.333 97.37238720000201 11.297 102.26105279999823 11.212 103.72892519999895 11.354 100.55911900000115 11.213 99.105308000002 11.466 89.75142299999912 11.256 97.88051800000089 11.422 105.83678449999859 11.214 95.53845680000154 11.283 100.20204040000058 11.437 90.22414160000146 10.258 82.33794049999952 11.138 103.96627899999947 10.246 98.2728500999988 10.142 104.16756509999885 11.359 103.24315160000133 11.317 98.293360499999 11.313 106.25057460000029 11.334 81.38520890000085 10.939 100.65626900000066 11.22)
Error minima by case: (0.4247 10 0.5759 6 0.3722 2 0.8381 4 0.3687 6 0.0988 5 0.2563 4 0.276 6 0.8509 4 0.498 7 0.3954 4 0.3556 5 0.2337 9 0.3576 4 0.6257 9 0.2035 4 0.2941 8 0.2077 8 0.1022 7 0.4059 6 0.1968 5 0.2809 5 0.7929 6 0.3104 3 0.4029 4)
Average genome size in population (length): 69.142
Average program size in population (points): 70.142
Average percent parens in population: 0.015
Minimum age in population: 191.0447519952099
Maximum age in population: 195.6477281436959
Average age in population: 193.5822867285697
Median age in population: 193.6265980133088
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.902
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.902
Total error diversity:				 0.111
Error (vector) diversity:			 0.115
Behavioral diversity:				 0.122
--- Run Statistics ---
Number of program evaluations used so far: 136000
Number of point (instruction) evaluations so far: 269714218
--- Timings ---
Current time: 1529615351291 milliseconds
Total Time:         468.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       181.3 seconds, 38.7%
Fitness Testing:    224.0 seconds, 47.8%
Report:              62.8 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 135
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 136
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 136
;;******************************
;; -*- Number IO problem report - generation 136
Test total error for best: 11476.5633
Test mean error for best: 5.73828
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction tag_float_586} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction integer_dup_items} {:instruction float_yank} {:instruction float_frominteger} {:instruction integer_dec} {:instruction -28.926915823824345} {:instruction float_frominteger} {:instruction tag_integer_555} {:instruction float_dup_items} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_mult} {:instruction tagged_592} {:instruction float_yank} {:instruction integer_max} {:instruction float_sub} {:instruction in1} {:instruction float_dup} {:instruction integer_dec} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yank} {:instruction in2} {:instruction float_add} {:instruction float_swap} {:instruction in1} {:instruction integer_flush} {:instruction in2} {:instruction float_dup_times} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_add} {:instruction float_shove} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_div} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_mod} {:instruction in1} {:instruction integer_inc} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_mod} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction float_sin} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_rot} {:instruction float_dup} {:instruction print_integer})
Best program: (integer_pop tag_float_586 in1 float_stackdepth integer_swap integer_dup_items float_yank float_frominteger integer_dec -28.926915823824345 float_frominteger tag_integer_555 float_dup_items integer_dec float_dup_items float_mult tagged_592 float_yank integer_max float_sub in1 float_dup integer_dec in1 float_dup_items integer_yank in2 float_add float_swap in1 integer_flush in2 float_dup_times float_swap integer_div in2 float_add float_shove integer_flush float_swap integer_div integer_shove float_dup_times float_mod in1 integer_inc float_max float_dup_times integer_mod float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_sub float_sin float_mult in1 integer_fromfloat integer_add integer_yankdup float_rot float_dup print_integer)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2501.072760500001
Median total errors in population: 281.16429999999997
Error averages by case: (86.95813159999837 11.186 100.62777810000003 11.325 68.10175759999937 11.127 78.39703169999981 10.144 102.87482250000171 11.291 84.57386920000114 11.252 99.66552319999865 11.179 100.39242229999898 11.298 97.19196440000059 11.173 86.77428000000113 11.414 78.74164489999991 11.256 86.19627239999998 11.375 93.97031209999885 11.194 82.46225120000155 11.226 86.10216329999956 11.411 79.23763420000148 10.246 69.83992469999951 11.164 92.09336199999954 10.212 87.79179389999956 10.134 101.20500269999887 11.308 100.3347318000009 11.266 86.30322569999893 11.281 103.08447420000032 11.286 73.49880500000073 10.925 97.80258180000058 11.178)
Error minima by case: (0.5753 9 0.5759 5 0.3722 2 0.8381 4 0.3687 5 0.0988 5 0.2563 4 0.276 5 0.8509 4 0.498 6 0.3954 4 0.3556 4 0.2337 10 0.3576 4 0.6257 10 0.2035 4 0.2941 9 0.2077 8 0.1022 8 0.4059 5 0.1968 4 0.2809 5 0.7929 5 0.3104 3 0.4029 4)
Average genome size in population (length): 69.149
Average program size in population (points): 70.149
Average percent parens in population: 0.015
Minimum age in population: 192.1034581871207
Maximum age in population: 196.886570141525
Average age in population: 195.0496676232551
Median age in population: 195.1110802046294
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.876
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.876
Total error diversity:				 0.111
Error (vector) diversity:			 0.112
Behavioral diversity:				 0.119
--- Run Statistics ---
Number of program evaluations used so far: 137000
Number of point (instruction) evaluations so far: 271443904
--- Timings ---
Current time: 1529615354503 milliseconds
Total Time:         471.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       182.6 seconds, 38.7%
Fitness Testing:    225.5 seconds, 47.8%
Report:              63.3 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 136
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 137
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 137
;;******************************
;; -*- Number IO problem report - generation 137
Test total error for best: 11475.245100000002
Test mean error for best: 5.73762
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mult} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_div} {:instruction float_add} {:instruction float_tan} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_shove} {:instruction tag_float_736} {:instruction tag_float_715} {:instruction float_shove} {:instruction integer_inc} {:instruction float_frominteger} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_flush} {:instruction float_inc} {:instruction in2} {:instruction float_mult} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_mod} {:instruction float_stackdepth} {:instruction integer_flush} {:instruction float_max} {:instruction integer_div} {:instruction in2} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction integer_max} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sub} {:instruction float_max} {:instruction tag_float_536} {:instruction float_mult} {:instruction integer_max} {:instruction float_max} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_pop} {:instruction float_dec} {:instruction print_integer} {:instruction integer_dup_items} {:instruction integer_add} {:instruction print_integer} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction integer_shove} {:instruction float_mult} {:instruction float_div} {:instruction float_add})
Best program: (float_mult float_frominteger float_shove float_inc integer_inc integer_div float_add float_tan float_dec integer_inc integer_max integer_shove tag_float_736 tag_float_715 float_shove integer_inc float_frominteger float_inc in1 in2 float_dup_times float_dup_items integer_flush float_inc in2 float_mult integer_dup_times integer_fromfloat integer_dup_times float_mod float_stackdepth integer_flush float_max integer_div in2 integer_flush float_max in2 integer_max float_mult float_cos integer_fromfloat float_mult integer_sub float_sub integer_div float_sub float_max tag_float_536 float_mult integer_max float_max tag_float_518 float_mult in1 integer_fromfloat integer_add float_pop float_dec print_integer integer_dup_items integer_add print_integer float_mult float_cos integer_fromfloat integer_shove float_mult float_div float_add)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2182.7218467000007
Median total errors in population: 281.16429999999997
Error averages by case: (75.66906209999875 11.195 87.31056040000026 11.35 54.79011189999941 11.119 62.9308583000005 10.132 91.1484440000013 11.293 72.58712960000103 11.252 83.74491789999892 11.196 88.19226569999904 11.296 81.88024380000033 11.178 74.42522000000119 11.411 64.37612250000072 11.248 74.057738 11.373 83.25923749999883 11.197 67.92576720000146 11.208 75.0602161 11.418 66.91808610000126 10.243 60.64956399999959 11.144 81.12049609999953 10.22 78.68414859999947 10.144 87.91127029999896 11.335 86.84153110000062 11.288 74.47768639999911 11.263 90.25675700000028 11.297 59.34822890000064 10.922 82.2511832000006 11.183)
Error minima by case: (0.4247 10 0.4241 3 0.3722 1 0.1619 2 0.3687 3 0.0988 2 0.2563 2 0.276 3 0.1491 2 0.498 3 0.3954 2 0.3556 2 0.2337 9 0.3576 1 0.3743 10 0.2035 2 0.2941 9 0.2077 9 0.1022 8 0.4059 3 0.1968 2 0.2809 2 0.2071 3 0.3104 2 0.4029 2)
Average genome size in population (length): 68.667
Average program size in population (points): 69.667
Average percent parens in population: 0.015
Minimum age in population: 193.1034581871207
Maximum age in population: 198.542700080644
Average age in population: 196.4896409763084
Median age in population: 196.5302853539346
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.886
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.886
Total error diversity:				 0.121
Error (vector) diversity:			 0.121
Behavioral diversity:				 0.127
--- Run Statistics ---
Number of program evaluations used so far: 138000
Number of point (instruction) evaluations so far: 273161637
--- Timings ---
Current time: 1529615357734 milliseconds
Total Time:         474.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       183.9 seconds, 38.7%
Fitness Testing:    226.9 seconds, 47.8%
Report:              63.7 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 137
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 138
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 138
;;******************************
;; -*- Number IO problem report - generation 138
Test total error for best: 11476.5633
Test mean error for best: 5.73828
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dec} {:instruction in1} {:instruction integer_stackdepth} {:instruction 81} {:instruction integer_add} {:instruction in2} {:instruction float_add} {:instruction float_add} {:instruction float_dup_times} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_items} {:instruction integer_sub} {:instruction float_add} {:instruction integer_max} {:instruction in1} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_sub} {:instruction integer_div} {:instruction 33} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_dec} {:instruction float_mod} {:instruction in1} {:instruction integer_div} {:instruction in2} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction integer_max} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_sub} {:instruction float_max} {:instruction tag_float_536} {:instruction float_mult} {:instruction integer_max} {:instruction float_max} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_pop} {:instruction float_dec} {:instruction print_integer} {:instruction float_swap} {:instruction integer_min})
Best program: (integer_pop integer_pop float_dec integer_dup integer_dec in1 integer_stackdepth 81 integer_add in2 float_add float_add float_dup_times float_swap integer_div in2 float_dup_items integer_sub float_add integer_max in1 integer_flush float_dup_times integer_div in2 float_dup_times float_sub integer_div 33 integer_div integer_dup_times float_inc float_dup_times float_swap float_dup_items integer_dec float_mod in1 integer_div in2 integer_flush float_max in2 integer_max float_mult float_cos integer_fromfloat float_mult integer_sub float_sub integer_div float_sub float_max tag_float_536 float_mult integer_max float_max tag_float_518 float_mult in1 integer_fromfloat integer_add float_pop float_dec print_integer float_swap integer_min)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2571.1066454000006
Median total errors in population: 281.16429999999997
Error averages by case: (91.07921289999855 11.178 100.69943290000009 11.331 73.83135439999961 11.124 84.29100379999963 10.141 102.48645860000128 11.289 87.39406680000114 11.263 99.26958169999897 11.165 100.01423249999928 11.283 97.15035000000061 11.17 89.29477800000109 11.419 84.55859589999969 11.252 88.44747280000027 11.377 98.51647509999916 11.178 86.09553600000126 11.242 90.7874259 11.401 85.11816310000134 10.252 73.66325909999954 11.142 97.27895749999958 10.22 95.54952439999938 10.138 101.20439029999918 11.313 100.39781080000085 11.269 88.79485489999935 11.284 101.94359110000029 11.29 78.47318200000058 10.928 97.94193490000058 11.176)
Error minima by case: (0.5753 10 0.5759 5 0.3722 2 0.8381 4 0.3687 5 0.0988 5 0.2563 4 0.276 5 0.8509 4 0.498 7 0.3954 4 0.3556 5 0.2337 8 0.3576 4 0.6257 11 0.2035 4 0.2941 9 0.2077 9 0.1022 8 0.4059 5 0.1968 4 0.2809 5 0.7929 5 0.3104 3 0.4029 4)
Average genome size in population (length): 68.759
Average program size in population (points): 69.759
Average percent parens in population: 0.015
Minimum age in population: 195.2561784296751
Maximum age in population: 199.8002773482253
Average age in population: 197.9109138655467
Median age in population: 197.9550237904958
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.901
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.901
Total error diversity:				 0.11
Error (vector) diversity:			 0.112
Behavioral diversity:				 0.117
--- Run Statistics ---
Number of program evaluations used so far: 139000
Number of point (instruction) evaluations so far: 274881517
--- Timings ---
Current time: 1529615360955 milliseconds
Total Time:         477.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       185.3 seconds, 38.8%
Fitness Testing:    228.4 seconds, 47.8%
Report:              64.2 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 138
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 139
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 139
;;******************************
;; -*- Number IO problem report - generation 139
Test total error for best: 11483.5633
Test mean error for best: 5.74178
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_add} {:instruction tag_float_582} {:instruction tag_float_582} {:instruction integer_sub} {:instruction integer_max} {:instruction float_mod} {:instruction float_dec} {:instruction in1} {:instruction integer_rot} {:instruction integer_mult} {:instruction float_add} {:instruction integer_dup_items} {:instruction in1} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_mod} {:instruction float_rot} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_mod} {:instruction float_mod} {:instruction float_sub} {:instruction float_mod} {:instruction in1} {:instruction integer_inc} {:instruction float_max} {:instruction in2} {:instruction tag_integer_69} {:instruction integer_div} {:instruction integer_dec} {:instruction float_tan} {:instruction float_add} {:instruction integer_max} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_mod} {:instruction float_stackdepth} {:instruction float_mod} {:instruction in1} {:instruction float_dup_times} {:instruction float_mod} {:instruction in1} {:instruction float_yank} {:instruction integer_flush} {:instruction in2} {:instruction float_mult} {:instruction float_mod} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_dup} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mod} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_max} {:instruction integer_add} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_sin} {:instruction float_flush} {:instruction print_integer} {:instruction float_flush} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction float_mult})
Best program: (integer_add tag_float_582 tag_float_582 integer_sub integer_max float_mod float_dec in1 integer_rot integer_mult float_add integer_dup_items in1 float_rot integer_swap integer_mod float_rot in2 float_dup_times float_dup_items float_mod float_mod float_sub float_mod in1 integer_inc float_max in2 tag_integer_69 integer_div integer_dec float_tan float_add integer_max integer_div in2 float_dup_times float_dup_items integer_add float_mod float_stackdepth float_mod in1 float_dup_times float_mod in1 float_yank integer_flush in2 float_mult float_mod integer_flush float_max in2 float_dup float_mult float_cos integer_fromfloat float_mod float_mult float_sub float_add integer_sub float_max integer_add float_mult in1 integer_fromfloat integer_add float_swap float_sin float_flush print_integer float_flush print_integer integer_fromfloat float_mult)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2314.2938417000005
Median total errors in population: 281.16429999999997
Error averages by case: (82.07085749999858 11.191 91.26993670000054 11.343 63.45316849999939 11.116 72.4492047000002 10.142 93.44270990000143 11.279 77.68106680000055 11.255 87.77758699999957 11.187 91.3272777999991 11.291 87.62128139999994 11.182 79.24677800000045 11.398 72.7707389000003 11.262 77.84198359999957 11.371 86.73552109999883 11.172 75.23125120000132 11.212 81.39641469999944 11.413 73.55806370000137 10.233 67.48305069999948 11.145 84.04236339999947 10.196 81.92958920000002 10.14 91.69254689999904 11.32 90.80312210000045 11.269 78.22810209999925 11.266 93.68562160000032 11.295 69.07097070000074 10.928 86.70863350000067 11.17)
Error minima by case: (0.4247 9 0.4241 6 0.3722 2 0.1619 4 0.3687 6 0.0988 5 0.2563 4 0.276 6 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 9 0.3576 4 0.3743 10 0.2035 4 0.2941 9 0.2077 8 0.1022 8 0.4059 6 0.1968 5 0.2809 5 0.2071 6 0.3104 3 0.4029 4)
Average genome size in population (length): 68.216
Average program size in population (points): 69.216
Average percent parens in population: 0.015
Minimum age in population: 196.2561784296751
Maximum age in population: 201.2395098679683
Average age in population: 199.3612005663221
Median age in population: 199.4220696976235
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.9
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.9
Total error diversity:				 0.11
Error (vector) diversity:			 0.111
Behavioral diversity:				 0.116
--- Run Statistics ---
Number of program evaluations used so far: 140000
Number of point (instruction) evaluations so far: 276587961
--- Timings ---
Current time: 1529615364199 milliseconds
Total Time:         481.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       186.6 seconds, 38.8%
Fitness Testing:    229.8 seconds, 47.8%
Report:              64.6 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 139
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 140
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 140
;;******************************
;; -*- Number IO problem report - generation 140
Test total error for best: 11477.9327
Test mean error for best: 5.73897
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_integer_714} {:instruction in1} {:instruction integer_dup_items} {:instruction float_sin} {:instruction integer_sub} {:instruction print_integer} {:instruction integer_dec} {:instruction float_min} {:instruction in1} {:instruction integer_mult} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 96.80697452437909} {:instruction integer_sub} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_yank} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_add} {:instruction in1} {:instruction integer_yank} {:instruction float_add} {:instruction float_mult} {:instruction in2} {:instruction float_add} {:instruction integer_dec} {:instruction integer_pop} {:instruction integer_sub} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_mod} {:instruction integer_dup_times} {:instruction float_sin} {:instruction in1} {:instruction integer_shove} {:instruction in2} {:instruction float_dup_items} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mod} {:instruction float_mult} {:instruction integer_sub} {:instruction float_add} {:instruction float_add} {:instruction integer_max} {:instruction float_max} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction tag_float_257} {:instruction float_swap} {:instruction tag_float_78})
Best program: (tag_integer_714 in1 integer_dup_items float_sin integer_sub print_integer integer_dec float_min in1 integer_mult integer_div in2 float_dup_times float_dup_items 96.80697452437909 integer_sub float_rot integer_swap integer_yank float_swap float_yankdup float_add in1 integer_yank float_add float_mult in2 float_add integer_dec integer_pop integer_sub float_swap integer_div in2 float_dup_times float_dup_items float_mod integer_dup_times float_sin in1 integer_shove in2 float_dup_items float_max in2 float_mult float_mult float_cos integer_fromfloat float_mod float_mult integer_sub float_add float_add integer_max float_max tag_float_518 float_mult in1 integer_fromfloat integer_add integer_add float_flush print_integer float_swap float_sin tag_float_257 float_swap tag_float_78)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2647.170112600001
Median total errors in population: 281.16429999999997
Error averages by case: (96.49283929999822 11.199 99.15852019999988 11.32 76.57938629999924 11.116 90.30914699999862 10.126 101.34810520000164 11.282 94.94080200000202 11.241 98.56348679999839 11.188 100.10742669999895 11.299 97.22894430000092 11.177 96.87502470000192 11.388 90.61687029999874 11.228 96.82354730000075 11.358 99.95958499999865 11.195 93.11713840000166 11.209 97.18548460000048 11.398 91.21579930000166 10.227 81.83419799999945 11.129 98.32785699999943 10.197 92.73706309999893 10.12 100.52018669999889 11.317 99.65619380000112 11.288 96.6091044999989 11.253 102.46221880000033 11.286 80.3107829000008 10.929 97.54240040000067 11.178)
Error minima by case: (0.4247 11 0.4241 3 0.3722 1 0.1619 2 0.3687 3 0.0988 2 0.2563 2 0.276 3 0.1491 2 0.498 3 0.3954 2 0.3556 2 0.2337 9 0.3576 1 0.3743 10 0.2035 2 0.2941 9 0.2077 8 0.1022 7 0.4059 3 0.1968 2 0.2809 2 0.2071 3 0.3104 2 0.4029 2)
Average genome size in population (length): 68.156
Average program size in population (points): 69.156
Average percent parens in population: 0.015
Minimum age in population: 197.879075426765
Maximum age in population: 202.5878750618423
Average age in population: 200.7819117984154
Median age in population: 200.8392465424904
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.892
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.892
Total error diversity:				 0.099
Error (vector) diversity:			 0.101
Behavioral diversity:				 0.104
--- Run Statistics ---
Number of program evaluations used so far: 141000
Number of point (instruction) evaluations so far: 278292743
--- Timings ---
Current time: 1529615367564 milliseconds
Total Time:         484.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       187.9 seconds, 38.8%
Fitness Testing:    231.4 seconds, 47.8%
Report:              65.1 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 140
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 141
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 141
;;******************************
;; -*- Number IO problem report - generation 141
Test total error for best: 11475.9327
Test mean error for best: 5.73797
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction tag_float_715} {:instruction integer_pop} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_inc} {:instruction 97.99977962092807} {:instruction float_swap} {:instruction in1} {:instruction float_tan} {:instruction float_add} {:instruction integer_mod} {:instruction integer_swap} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction in1} {:instruction integer_dec} {:instruction integer_mult} {:instruction in2} {:instruction float_dup_times} {:instruction integer_pop} {:instruction 96.80697452437909} {:instruction float_sin} {:instruction in1} {:instruction float_tan} {:instruction float_add} {:instruction integer_dec} {:instruction in1} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction integer_max} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_inc} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_sub} {:instruction integer_swap} {:instruction float_rot} {:instruction float_sin} {:instruction in1} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_sub} {:instruction print_integer} {:instruction tag_float_9877} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_22} {:instruction float_shove} {:instruction float_dup_times} {:instruction tag_float_257} {:instruction float_swap} {:instruction float_flush})
Best program: (integer_pop tag_float_715 integer_pop integer_min float_frominteger float_inc 97.99977962092807 float_swap in1 float_tan float_add integer_mod integer_swap integer_pop integer_dup_times float_yankdup in1 integer_dec integer_mult in2 float_dup_times integer_pop 96.80697452437909 float_sin in1 float_tan float_add integer_dec in1 integer_flush float_swap integer_div in2 float_dup_times float_stackdepth integer_max integer_dup_times integer_dup_times float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_inc float_add integer_sub float_sub integer_sub integer_swap float_rot float_sin in1 tag_float_518 float_mult in1 integer_fromfloat integer_add float_sub print_integer tag_float_9877 float_shove float_dup_times tag_float_22 float_shove float_dup_times tag_float_257 float_swap float_flush)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2430.8553445000007
Median total errors in population: 281.16429999999997
Error averages by case: (89.85722799999856 11.204 92.59769269999973 11.373 67.37661639999963 11.133 79.03998459999939 10.127 95.07986550000149 11.324 86.11884520000177 11.271 90.94900799999856 11.214 92.48235399999922 11.326 88.9618424000009 11.197 87.92974200000168 11.442 79.3848763999995 11.262 83.93022720000052 11.407 91.99106269999882 11.216 82.76933040000138 11.218 89.44740350000045 11.451 80.26888100000129 10.266 66.91950519999953 11.136 90.09621749999948 10.229 88.90463039999905 10.126 93.14723929999916 11.336 92.19614150000119 11.308 84.96015829999929 11.286 95.26325230000032 11.314 75.43152480000064 10.889 88.49871520000062 11.198)
Error minima by case: (0.4247 10 0.4241 6 0.3722 2 0.1619 4 0.3687 6 0.0988 5 0.2563 4 0.276 6 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 10 0.3576 4 0.3743 10 0.2035 4 0.2941 9 0.2077 9 0.1022 8 0.4059 6 0.1968 5 0.2809 5 0.2071 6 0.3104 3 0.4029 4)
Average genome size in population (length): 67.485
Average program size in population (points): 68.485
Average percent parens in population: 0.015
Minimum age in population: 198.879075426765
Maximum age in population: 204.1850094173233
Average age in population: 202.2588999257091
Median age in population: 202.3158653470584
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.908
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.908
Total error diversity:				 0.099
Error (vector) diversity:			 0.101
Behavioral diversity:				 0.104
--- Run Statistics ---
Number of program evaluations used so far: 142000
Number of point (instruction) evaluations so far: 279980728
--- Timings ---
Current time: 1529615370792 milliseconds
Total Time:         487.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       189.2 seconds, 38.8%
Fitness Testing:    232.8 seconds, 47.7%
Report:              65.6 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 141
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 142
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 142
;;******************************
;; -*- Number IO problem report - generation 142
Test total error for best: 11475.9327
Test mean error for best: 5.73797
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_dec} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_shove} {:instruction in2} {:instruction float_frominteger} {:instruction in2} {:instruction float_mod} {:instruction integer_shove} {:instruction float_pop} {:instruction float_max} {:instruction float_stackdepth} {:instruction float_dup_items} {:instruction float_mult} {:instruction float_add} {:instruction integer_max} {:instruction integer_yank} {:instruction float_max} {:instruction integer_yank} {:instruction in2} {:instruction float_dup_times} {:instruction float_sub} {:instruction integer_div} {:instruction in1} {:instruction in2} {:instruction float_dup_times} {:instruction integer_dup} {:instruction 97.20027408926207} {:instruction float_max} {:instruction integer_pop} {:instruction float_cos} {:instruction integer_div} {:instruction float_sin} {:instruction integer_shove} {:instruction integer_flush} {:instruction in1} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_sub} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_max} {:instruction in2} {:instruction 21.118957313571983} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction integer_sub} {:instruction integer_shove} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction float_flush} {:instruction float_rot} {:instruction float_mod} {:instruction float_sin} {:instruction float_shove} {:instruction float_swap} {:instruction integer_add})
Best program: (integer_dec integer_dec integer_min float_frominteger float_shove float_inc integer_inc integer_swap integer_add float_dup_times float_shove in2 float_frominteger in2 float_mod integer_shove float_pop float_max float_stackdepth float_dup_items float_mult float_add integer_max integer_yank float_max integer_yank in2 float_dup_times float_sub integer_div in1 in2 float_dup_times integer_dup 97.20027408926207 float_max integer_pop float_cos integer_div float_sin integer_shove integer_flush in1 integer_div in2 float_dup_times integer_div in2 float_dup_times float_sub integer_div integer_dup_times float_max in2 21.118957313571983 float_mult float_cos integer_fromfloat integer_sub integer_shove in1 integer_fromfloat integer_add float_flush print_integer float_flush float_rot float_mod float_sin float_shove float_swap integer_add)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2414.109143500001
Median total errors in population: 281.16429999999997
Error averages by case: (92.55261049999864 11.193 84.9398535000003 11.325 72.31578239999985 11.146 84.75128949999966 10.143 86.9896428000006 11.29 91.329659600001 11.27 83.18129599999946 11.2 85.12904919999957 11.306 81.8905680000004 11.185 93.09076600000098 11.413 85.29434299999984 11.257 91.2366948000001 11.392 88.04588929999912 11.193 87.38739680000133 11.234 92.45504599999984 11.405 86.24798600000116 10.248 69.74594839999956 11.148 86.12054879999958 10.215 85.14001539999977 10.136 85.31559659999945 11.313 84.50466410000058 11.279 90.64438299999921 11.281 87.21963900000031 11.295 80.11314720000043 10.932 81.47732760000056 11.191)
Error minima by case: (0.4247 10 0.4241 5 0.3722 3 0.1619 4 0.3687 5 0.0988 5 0.2563 4 0.276 5 0.1491 4 0.498 6 0.3954 4 0.3556 4 0.2337 10 0.3576 4 0.3743 10 0.2035 4 0.2941 10 0.2077 8 0.1022 8 0.4059 5 0.1968 4 0.2809 5 0.2071 5 0.3104 4 0.4029 4)
Average genome size in population (length): 68.062
Average program size in population (points): 69.062
Average percent parens in population: 0.015
Minimum age in population: 201.2840126173224
Maximum age in population: 206.0569517357242
Average age in population: 203.7333100749912
Median age in population: 203.7488610555725
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.884
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.884
Total error diversity:				 0.105
Error (vector) diversity:			 0.11
Behavioral diversity:				 0.113
--- Run Statistics ---
Number of program evaluations used so far: 143000
Number of point (instruction) evaluations so far: 281683112
--- Timings ---
Current time: 1529615373980 milliseconds
Total Time:         491.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       190.5 seconds, 38.8%
Fitness Testing:    234.3 seconds, 47.7%
Report:              66.1 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 142
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 143
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 143
;;******************************
;; -*- Number IO problem report - generation 143
Test total error for best: 11476.5633
Test mean error for best: 5.73828
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction tag_float_715} {:instruction integer_dup_items} {:instruction in1} {:instruction float_mult} {:instruction float_add} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_add} {:instruction float_add} {:instruction in2} {:instruction float_add} {:instruction integer_dec} {:instruction in1} {:instruction integer_inc} {:instruction in2} {:instruction float_add} {:instruction integer_dec} {:instruction in1} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_mod} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_mod} {:instruction in1} {:instruction integer_add} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_add} {:instruction integer_sub} {:instruction float_cos} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction tag_float_518} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction float_add} {:instruction float_swap} {:instruction tag_float_78})
Best program: (integer_pop tag_float_715 integer_dup_items in1 float_mult float_add integer_fromfloat integer_yank float_add float_add in2 float_add integer_dec in1 integer_inc in2 float_add integer_dec in1 integer_flush float_swap integer_div in2 float_dup_times float_dup_items float_mod in2 float_mult float_mult float_cos float_mult integer_yankdup float_yankdup float_dup_times integer_div in2 float_dup_times float_mod in1 integer_add float_max in2 float_mult float_mult float_cos integer_fromfloat float_add integer_sub float_cos float_sub float_add integer_sub float_sub integer_div integer_rot float_dec tag_float_518 in1 integer_fromfloat integer_add float_flush print_integer float_swap float_sin float_add float_swap tag_float_78)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2418.261345400001
Median total errors in population: 281.16429999999997
Error averages by case: (90.65290049999847 11.182 86.72634310000016 11.337 71.81215639999932 11.125 84.23604999999921 10.147 90.13666870000134 11.294 90.03936780000159 11.258 86.32643739999878 11.21 87.15487649999908 11.315 83.12622730000038 11.191 92.5055650000017 11.414 84.53948549999939 11.24 90.05443500000037 11.379 86.9723761999989 11.189 89.25948860000165 11.233 90.9723323000001 11.396 85.05182280000156 10.219 68.51632089999951 11.145 85.13582859999953 10.196 82.3522042999994 10.15 87.396479299999 11.325 86.52553140000076 11.31 90.34675179999897 11.266 89.43933890000032 11.307 77.4430830000008 10.918 84.59127410000063 11.202)
Error minima by case: (0.5753 9 0.4241 5 0.3722 2 0.8381 4 0.3687 5 0.0988 5 0.2563 4 0.276 5 0.1491 4 0.498 6 0.3954 4 0.3556 4 0.2337 9 0.3576 4 0.6257 10 0.2035 4 0.2941 9 0.2077 8 0.1022 8 0.4059 5 0.1968 4 0.2809 5 0.2071 5 0.3104 3 0.4029 4)
Average genome size in population (length): 68.141
Average program size in population (points): 69.141
Average percent parens in population: 0.015
Minimum age in population: 202.5374394637631
Maximum age in population: 207.1640215086664
Average age in population: 205.1092620111882
Median age in population: 205.125366576657
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.896
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.896
Total error diversity:				 0.101
Error (vector) diversity:			 0.101
Behavioral diversity:				 0.105
--- Run Statistics ---
Number of program evaluations used so far: 144000
Number of point (instruction) evaluations so far: 283387444
--- Timings ---
Current time: 1529615377109 milliseconds
Total Time:         494.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       191.8 seconds, 38.8%
Fitness Testing:    235.7 seconds, 47.7%
Report:              66.5 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 143
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 144
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 144
;;******************************
;; -*- Number IO problem report - generation 144
Test total error for best: 11475.9327
Test mean error for best: 5.73797
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_integer_664} {:instruction integer_div} {:instruction in2} {:instruction float_frominteger} {:instruction integer_flush} {:instruction float_dup} {:instruction integer_dec} {:instruction integer_dec} {:instruction float_min} {:instruction 35.77542359015047} {:instruction 96.80697452437909} {:instruction float_sub} {:instruction float_max} {:instruction tagged_850} {:instruction float_dup_items} {:instruction float_mult} {:instruction float_add} {:instruction integer_max} {:instruction integer_yank} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction in2} {:instruction float_dup_times} {:instruction float_sub} {:instruction integer_div} {:instruction in1} {:instruction in2} {:instruction float_dup_times} {:instruction integer_dup} {:instruction 97.20027408926207} {:instruction float_max} {:instruction integer_pop} {:instruction float_cos} {:instruction integer_div} {:instruction float_sin} {:instruction integer_shove} {:instruction integer_flush} {:instruction in1} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_sub} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_max} {:instruction in2} {:instruction 21.118957313571983} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction integer_sub} {:instruction integer_shove} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction float_sin} {:instruction float_swap} {:instruction tag_float_78})
Best program: (tag_integer_664 integer_div in2 float_frominteger integer_flush float_dup integer_dec integer_dec float_min 35.77542359015047 96.80697452437909 float_sub float_max tagged_850 float_dup_items float_mult float_add integer_max integer_yank integer_dup_items integer_yank in2 float_dup_times float_sub integer_div in1 in2 float_dup_times integer_dup 97.20027408926207 float_max integer_pop float_cos integer_div float_sin integer_shove integer_flush in1 integer_div in2 float_dup_times integer_div in2 float_dup_times float_sub integer_div integer_dup_times float_max in2 21.118957313571983 float_mult float_cos integer_fromfloat integer_sub integer_shove in1 integer_fromfloat integer_add float_flush print_integer float_swap float_sin float_sin float_swap tag_float_78)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2679.3987068000006
Median total errors in population: 281.16429999999997
Error averages by case: (96.28651409999846 11.198 103.3003274999997 11.344 80.48564339999925 11.123 91.06531809999863 10.154 105.12410840000184 11.309 93.99874640000199 11.273 101.05894909999836 11.195 104.21955799999903 11.315 99.77560040000103 11.181 95.35724400000186 11.43 91.22071539999878 11.241 94.5983608000008 11.368 101.17439459999888 11.214 92.90197280000154 11.245 95.79380580000041 11.403 91.89500350000155 10.236 80.47343519999953 11.158 99.55773079999952 10.232 94.35458239999896 10.161 102.69308669999896 11.319 101.92969200000125 11.3 94.53675379999896 11.278 105.3217245000003 11.3 85.30932000000094 10.954 99.83911910000062 11.196)
Error minima by case: (0.4247 10 0.4241 6 0.3722 2 0.1619 4 0.3687 5 0.0988 4 0.2563 4 0.276 6 0.1491 3 0.498 6 0.3954 4 0.3556 4 0.2337 9 0.3576 3 0.3743 10 0.2035 4 0.2941 9 0.2077 7 0.1022 8 0.4059 4 0.1968 3 0.2809 4 0.2071 5 0.3104 3 0.4029 4)
Average genome size in population (length): 67.97
Average program size in population (points): 68.97
Average percent parens in population: 0.015
Minimum age in population: 203.5374394637631
Maximum age in population: 208.516781088655
Average age in population: 206.5820941223733
Median age in population: 206.6269293117988
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.882
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.882
Total error diversity:				 0.095
Error (vector) diversity:			 0.097
Behavioral diversity:				 0.1
--- Run Statistics ---
Number of program evaluations used so far: 145000
Number of point (instruction) evaluations so far: 285087615
--- Timings ---
Current time: 1529615380294 milliseconds
Total Time:         497.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       193.1 seconds, 38.8%
Fitness Testing:    237.2 seconds, 47.7%
Report:              66.9 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 144
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 145
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 145
;;******************************
;; -*- Number IO problem report - generation 145
Test total error for best: 11492.9327
Test mean error for best: 5.74647
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7
           
Correct output: 101.5758530321 | Program output: 101
          
Correct output: 5.3722386499   | Program output: 5
            
Correct output: 50.838076484   | Program output: 50
           
Correct output: 149.3686745246 | Program output: 149
          
Correct output: -86.0987731432 | Program output: -86
          
Correct output: 99.2563149379  | Program output: 99
           
Correct output: 100.2759538143 | Program output: 100
          
Correct output: 55.8508667649  | Program output: 55
           
Correct output: -120.4980478621 | Program output: -120
         
Correct output: 50.3953926202  | Program output: 50
           
Correct output: -86.6444443408 | Program output: -86
          
Correct output: 43.2337451713  | Program output: 43
           
Correct output: -69.3575988725 | Program output: -69
          
Correct output: -32.3742761841 | Program output: -33
          
Correct output: 21.203493141   | Program output: 21
           
Correct output: 6.2941290036   | Program output: 6
            
Correct output: 28.207733934   | Program output: 28
           
Correct output: 3.102196665    | Program output: 3
            
Correct output: 117.4058715345 | Program output: 117
          
Correct output: 105.1968404292 | Program output: 105
          
Correct output: -95.2809380546 | Program output: -95
          
Correct output: 145.7928624605 | Program output: 145
          
Correct output: 3.3104353754   | Program output: 3
            
Correct output: 60.4029417431  | Program output: 60
           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_dec} {:instruction integer_swap} {:instruction integer_pop} {:instruction float_frominteger} {:instruction float_sub} {:instruction float_yank} {:instruction in2} {:instruction float_mult} {:instruction float_max} {:instruction in2} {:instruction float_cos} {:instruction in2} {:instruction float_dup_times} {:instruction -73} {:instruction 96.80697452437909} {:instruction integer_sub} {:instruction float_dup} {:instruction float_stackdepth} {:instruction integer_mult} {:instruction in2} {:instruction float_dup_times} {:instruction integer_pop} {:instruction 96.80697452437909} {:instruction float_sin} {:instruction float_dup_times} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_mod} {:instruction float_sub} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_dup} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction float_swap} {:instruction in1} {:instruction float_flush} {:instruction print_integer} {:instruction print_newline} {:instruction integer_yankdup})
Best program: (integer_dec integer_dec integer_swap integer_pop float_frominteger float_sub float_yank in2 float_mult float_max in2 float_cos in2 float_dup_times -73 96.80697452437909 integer_sub float_dup float_stackdepth integer_mult in2 float_dup_times integer_pop 96.80697452437909 float_sin float_dup_times in2 integer_stackdepth integer_div integer_add float_dup_times float_mod float_sub float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult integer_sub integer_swap integer_dup in1 integer_fromfloat integer_add float_swap float_swap in1 float_flush print_integer print_newline integer_yankdup)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2651.383167900002
Median total errors in population: 281.16429999999997
Error averages by case: (95.80045989999867 11.213 101.37625359999973 11.371 76.92769459999957 11.12 90.73761959999906 10.163 102.38204320000155 11.326 93.0878572000015 11.276 100.36803779999852 11.228 100.51099019999916 11.354 98.79509650000094 11.211 94.68876200000136 11.432 90.96955849999914 11.251 94.0222056000005 11.382 100.76414509999896 11.208 91.22325120000129 11.254 95.39542030000031 11.413 91.57756780000132 10.246 80.10864219999952 11.171 99.85546529999958 10.22 94.72164069999917 10.144 100.7706041999991 11.356 100.97579680000112 11.318 94.09694479999922 11.283 102.61730860000031 11.323 83.2140496000006 10.958 98.9537526000006 11.221)
Error minima by case: (0.4247 10 0.4241 5 0.3722 2 0.1619 4 0.3687 5 0.0988 5 0.2563 4 0.276 5 0.1491 4 0.498 6 0.3954 4 0.3556 4 0.2337 9 0.3576 4 0.3743 11 0.2035 4 0.2941 10 0.2077 8 0.1022 8 0.4059 5 0.1968 4 0.2809 4 0.2071 5 0.3104 3 0.4029 4)
Average genome size in population (length): 67.763
Average program size in population (points): 68.763
Average percent parens in population: 0.015
Minimum age in population: 205.4246310588444
Maximum age in population: 210.1339788040956
Average age in population: 208.0585064196568
Median age in population: 208.1124892052453
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.872
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.872
Total error diversity:				 0.094
Error (vector) diversity:			 0.097
Behavioral diversity:				 0.101
--- Run Statistics ---
Number of program evaluations used so far: 146000
Number of point (instruction) evaluations so far: 286782604
--- Timings ---
Current time: 1529615383598 milliseconds
Total Time:         500.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       194.5 seconds, 38.9%
Fitness Testing:    238.7 seconds, 47.7%
Report:              67.3 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 145
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 146
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 146
;;******************************
;; -*- Number IO problem report - generation 146
Test total error for best: 11475.9327
Test mean error for best: 5.73797
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_stackdepth} {:instruction 28.71874203282215} {:instruction integer_min} {:instruction float_frominteger} {:instruction in2} {:instruction float_cos} {:instruction integer_dup_items} {:instruction tagged_962} {:instruction integer_mod} {:instruction integer_add} {:instruction float_swap} {:instruction integer_div} {:instruction integer_dup_times} {:instruction in1} {:instruction float_dup_items} {:instruction float_sin} {:instruction float_sin} {:instruction float_sub} {:instruction integer_yank} {:instruction float_min} {:instruction integer_swap} {:instruction in1} {:instruction -27.36445100454587} {:instruction float_dup_times} {:instruction integer_shove} {:instruction float_max} {:instruction float_add} {:instruction float_dup_items} {:instruction float_mult} {:instruction float_add} {:instruction integer_max} {:instruction integer_yank} {:instruction float_max} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_mod} {:instruction integer_dup_times} {:instruction float_sin} {:instruction float_mod} {:instruction in1} {:instruction integer_dup_items} {:instruction float_max} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction in1} {:instruction float_mult} {:instruction float_inc} {:instruction float_add} {:instruction integer_sub} {:instruction integer_max} {:instruction float_sin} {:instruction float_cos} {:instruction float_sub} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_sub} {:instruction float_sub} {:instruction float_sin} {:instruction integer_add} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_rot} {:instruction float_dup} {:instruction print_integer} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction integer_add} {:instruction print_integer} {:instruction integer_div} {:instruction integer_mod} {:instruction float_sin} {:instruction float_max})
Best program: (integer_pop integer_stackdepth 28.71874203282215 integer_min float_frominteger in2 float_cos integer_dup_items tagged_962 integer_mod integer_add float_swap integer_div integer_dup_times in1 float_dup_items float_sin float_sin float_sub integer_yank float_min integer_swap in1 -27.36445100454587 float_dup_times integer_shove float_max float_add float_dup_items float_mult float_add integer_max integer_yank float_max in2 float_dup_times float_dup_items float_mod integer_dup_times float_sin float_mod in1 integer_dup_items float_max float_max in2 float_mult float_mult float_cos integer_fromfloat in1 float_mult float_inc float_add integer_sub integer_max float_sin float_cos float_sub float_mult float_mult float_sub float_add integer_sub float_sub float_sub float_sin integer_add in1 integer_fromfloat integer_add integer_yankdup float_rot float_dup print_integer float_div float_dup_items integer_dup_items integer_add print_integer integer_div integer_mod float_sin float_max)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2280.316135800001
Median total errors in population: 281.16429999999997
Error averages by case: (80.70633639999863 11.187 88.87662160000019 11.342 63.533665799999305 11.12 73.27461330000025 10.159 90.99495400000147 11.303 76.10403080000066 11.265 87.6737092999987 11.193 88.909026199999 11.325 86.27794300000033 11.184 77.82973000000078 11.412 73.60055220000024 11.239 77.99244919999973 11.37 84.05632149999892 11.198 74.78519120000136 11.231 79.41080019999968 11.398 74.39937550000141 10.232 62.993692999999496 11.157 82.15370809999963 10.217 77.97368859999959 10.164 89.30376659999894 11.334 88.48275790000065 11.288 78.02284369999903 11.273 91.20786780000032 11.304 68.85790560000086 10.937 85.86058430000048 11.202)
Error minima by case: (0.4247 10 0.4241 6 0.3722 2 0.1619 4 0.3687 6 0.0988 5 0.2563 4 0.276 6 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 10 0.3576 4 0.3743 10 0.2035 4 0.2941 9 0.2077 8 0.1022 8 0.4059 6 0.1968 5 0.2809 5 0.2071 6 0.3104 3 0.4029 4)
Average genome size in population (length): 67.981
Average program size in population (points): 68.981
Average percent parens in population: 0.015
Minimum age in population: 206.4246310588444
Maximum age in population: 211.616223282799
Average age in population: 209.5247039599432
Median age in population: 209.5472521626793
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.889
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.889
Total error diversity:				 0.093
Error (vector) diversity:			 0.094
Behavioral diversity:				 0.098
--- Run Statistics ---
Number of program evaluations used so far: 147000
Number of point (instruction) evaluations so far: 288483085
--- Timings ---
Current time: 1529615386824 milliseconds
Total Time:         503.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       195.8 seconds, 38.9%
Fitness Testing:    240.2 seconds, 47.7%
Report:              67.7 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 146
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 147
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 147
;;******************************
;; -*- Number IO problem report - generation 147
Test total error for best: 11477.9327
Test mean error for best: 5.73897
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction float_dup} {:instruction integer_dec} {:instruction float_div} {:instruction float_dec} {:instruction in1} {:instruction integer_rot} {:instruction integer_mult} {:instruction float_add} {:instruction integer_dup_items} {:instruction in1} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_mod} {:instruction float_rot} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_mod} {:instruction float_add} {:instruction in1} {:instruction integer_yank} {:instruction float_add} {:instruction float_add} {:instruction in2} {:instruction float_add} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_sub} {:instruction integer_mult} {:instruction float_sub} {:instruction float_mod} {:instruction float_max} {:instruction integer_mod} {:instruction in2} {:instruction float_mult} {:instruction integer_swap} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_flush} {:instruction float_rot} {:instruction -40.222253644326166} {:instruction float_sin} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction float_sin} {:instruction float_flush} {:instruction print_integer} {:instruction float_flush})
Best program: (in2 float_dup integer_dec float_div float_dec in1 integer_rot integer_mult float_add integer_dup_items in1 float_rot integer_swap integer_mod float_rot in2 float_dup_times float_dup_items float_mod float_add in1 integer_yank float_add float_add in2 float_add float_dup_times integer_mod integer_sub integer_mult float_sub float_mod float_max integer_mod in2 float_mult integer_swap float_cos integer_fromfloat float_mult float_mult float_sub float_add float_mult float_sub float_add integer_sub float_flush float_rot -40.222253644326166 float_sin float_mult in1 integer_fromfloat integer_add float_flush float_sin float_flush print_integer float_flush)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 60
Size: 61
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2442.082119100001
Median total errors in population: 281.16429999999997
Error averages by case: (89.71915869999846 11.191 92.82431609999969 11.36 66.59551059999934 11.125 80.46782119999936 10.15 95.95193040000171 11.326 86.66315360000198 11.266 91.44106719999849 11.18 93.88669089999908 11.342 89.32961800000072 11.188 88.29376200000183 11.419 81.05094999999956 11.244 86.05591680000083 11.388 91.4107972999989 11.211 84.3501120000015 11.234 88.76554320000035 11.422 82.42206360000152 10.243 68.77230329999954 11.159 89.14564319999951 10.234 84.69202249999913 10.166 94.00519039999905 11.342 92.76130810000124 11.289 86.61694479999908 11.273 96.18243150000029 11.292 75.65161170000084 10.922 87.85525200000063 11.205)
Error minima by case: (0.4247 9 0.4241 3 0.3722 1 0.1619 2 0.3687 3 0.0988 2 0.2563 2 0.276 3 0.1491 2 0.498 3 0.3954 2 0.3556 2 0.2337 10 0.3576 1 0.3743 10 0.2035 2 0.2941 9 0.2077 8 0.1022 8 0.4059 3 0.1968 2 0.2809 2 0.2071 3 0.3104 2 0.4029 2)
Average genome size in population (length): 68.1
Average program size in population (points): 69.1
Average percent parens in population: 0.015
Minimum age in population: 208.5333811829623
Maximum age in population: 213.000481470978
Average age in population: 210.9764893882065
Median age in population: 210.9886000974875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.882
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.882
Total error diversity:				 0.114
Error (vector) diversity:			 0.117
Behavioral diversity:				 0.121
--- Run Statistics ---
Number of program evaluations used so far: 148000
Number of point (instruction) evaluations so far: 290186453
--- Timings ---
Current time: 1529615389915 milliseconds
Total Time:         506.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       197.1 seconds, 38.9%
Fitness Testing:    241.6 seconds, 47.7%
Report:              68.1 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 147
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 148
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 148
;;******************************
;; -*- Number IO problem report - generation 148
Test total error for best: 11475.9327
Test mean error for best: 5.73797
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction in1} {:instruction integer_mod} {:instruction integer_add} {:instruction float_swap} {:instruction integer_div} {:instruction integer_dup_times} {:instruction in1} {:instruction float_dup_items} {:instruction float_sin} {:instruction in1} {:instruction -27.36445100454587} {:instruction print_integer} {:instruction float_frominteger} {:instruction in2} {:instruction float_dup_times} {:instruction float_sub} {:instruction float_mod} {:instruction in1} {:instruction integer_shove} {:instruction integer_shove} {:instruction in2} {:instruction float_dup_times} {:instruction float_mod} {:instruction integer_shove} {:instruction integer_add} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_add} {:instruction integer_sub} {:instruction float_cos} {:instruction float_sub} {:instruction float_add} {:instruction float_add} {:instruction integer_sub} {:instruction float_cos} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction tag_float_594} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_dup_items} {:instruction integer_shove} {:instruction float_sin} {:instruction integer_shove} {:instruction integer_flush} {:instruction in1} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_sub} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_max} {:instruction in2} {:instruction 21.118957313571983} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction integer_sub} {:instruction integer_shove} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction float_flush} {:instruction print_integer} {:instruction float_mod} {:instruction float_sin} {:instruction float_shove} {:instruction float_swap} {:instruction integer_add})
Best program: (integer_dup_items in1 integer_mod integer_add float_swap integer_div integer_dup_times in1 float_dup_items float_sin in1 -27.36445100454587 print_integer float_frominteger in2 float_dup_times float_sub float_mod in1 integer_shove integer_shove in2 float_dup_times float_mod integer_shove integer_add float_max in2 float_mult float_mult float_cos integer_fromfloat float_add integer_sub float_cos float_sub float_add float_add integer_sub float_cos float_sub float_add integer_sub tag_float_594 integer_div integer_rot float_dec tag_float_518 float_mult in1 integer_fromfloat integer_add integer_dup_items integer_shove float_sin integer_shove integer_flush in1 integer_div in2 float_dup_times integer_div in2 float_dup_times float_sub integer_div integer_dup_times float_max in2 21.118957313571983 float_mult float_cos integer_fromfloat integer_sub integer_shove in1 integer_fromfloat integer_add float_flush print_integer float_flush print_integer float_mod float_sin float_shove float_swap integer_add)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 87
Size: 88
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2465.961028200001
Median total errors in population: 281.16429999999997
Error averages by case: (90.66978819999852 11.186 91.70979280000024 11.311 70.3144525999996 11.107 80.53352039999974 10.127 94.05121480000098 11.265 88.86824040000121 11.248 90.98909999999901 11.166 91.5005103999993 11.287 89.21041030000025 11.145 90.8747380000012 11.408 80.99958959999985 11.223 89.97587160000033 11.357 91.51862069999898 11.196 86.20547600000138 11.219 91.37617449999993 11.409 81.89350550000131 10.224 77.44958629999948 11.141 89.82141969999952 10.22 89.32816479999973 10.137 92.36277899999922 11.289 91.57456310000069 11.255 90.03928189999921 11.26 94.17030900000032 11.267 74.74938340000057 10.914 89.26553520000058 11.148)
Error minima by case: (0.4247 10 0.4241 4 0.3722 2 0.1619 3 0.3687 4 0.0988 3 0.2563 3 0.276 4 0.1491 3 0.498 4 0.3954 3 0.3556 3 0.2337 9 0.3576 2 0.3743 10 0.0845 3 0.2941 9 0.2077 9 0.1022 8 0.4059 4 0.1968 3 0.2809 3 0.2071 4 0.3104 3 0.4029 3)
Average genome size in population (length): 67.114
Average program size in population (points): 68.114
Average percent parens in population: 0.015
Minimum age in population: 209.5614945260626
Maximum age in population: 214.4846397675689
Average age in population: 212.3786312508089
Median age in population: 212.4107955709327
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.859
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.859
Total error diversity:				 0.093
Error (vector) diversity:			 0.094
Behavioral diversity:				 0.097
--- Run Statistics ---
Number of program evaluations used so far: 149000
Number of point (instruction) evaluations so far: 291864834
--- Timings ---
Current time: 1529615393127 milliseconds
Total Time:         510.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       198.4 seconds, 38.9%
Fitness Testing:    243.0 seconds, 47.6%
Report:              68.5 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 148
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 149
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 149
;;******************************
;; -*- Number IO problem report - generation 149
Test total error for best: 11483.5633
Test mean error for best: 5.74178
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_integer_714} {:instruction -95.00632979515666} {:instruction integer_dec} {:instruction float_min} {:instruction 35.77542359015047} {:instruction 96.80697452437909} {:instruction float_flush} {:instruction float_min} {:instruction in1} {:instruction float_dup_times} {:instruction in2} {:instruction float_rot} {:instruction integer_max} {:instruction float_mod} {:instruction integer_shove} {:instruction float_pop} {:instruction integer_dec} {:instruction in1} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction integer_dup_items} {:instruction integer_dec} {:instruction in1} {:instruction integer_flush} {:instruction integer_shove} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_mod} {:instruction in1} {:instruction float_sin} {:instruction float_mod} {:instruction in2} {:instruction in1} {:instruction integer_shove} {:instruction integer_shove} {:instruction float_dup_items} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction integer_sub} {:instruction integer_div} {:instruction float_add} {:instruction integer_sub} {:instruction float_mult} {:instruction float_cos} {:instruction float_dec} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_add} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_rot} {:instruction float_dup} {:instruction print_integer} {:instruction float_div} {:instruction float_swap} {:instruction integer_dup_items} {:instruction integer_add} {:instruction print_integer} {:instruction float_dup_times} {:instruction float_swap} {:instruction float_sin} {:instruction tag_float_293} {:instruction float_swap} {:instruction tag_float_78})
Best program: (tag_integer_714 -95.00632979515666 integer_dec float_min 35.77542359015047 96.80697452437909 float_flush float_min in1 float_dup_times in2 float_rot integer_max float_mod integer_shove float_pop integer_dec in1 integer_rot integer_mult integer_div in2 float_dup_times integer_dup_items integer_dec in1 integer_flush integer_shove integer_div in2 float_dup_times float_dup_items float_mod in1 float_sin float_mod in2 in1 integer_shove integer_shove float_dup_items float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult integer_sub integer_div float_add integer_sub float_mult float_cos float_dec float_mult float_mult float_sub float_add integer_sub integer_add in1 integer_fromfloat integer_add integer_yankdup float_rot float_dup print_integer float_div float_swap integer_dup_items integer_add print_integer float_dup_times float_swap float_sin tag_float_293 float_swap tag_float_78)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2209.9175617000005
Median total errors in population: 281.16429999999997
Error averages by case: (77.3133096999988 11.164 85.7549497000005 11.281 56.97817319999976 11.098 68.68939470000032 10.103 87.32397420000069 11.244 77.84393200000082 11.201 82.78915099999952 11.153 85.83019589999932 11.259 81.19917920000017 11.134 79.54322000000072 11.328 68.85816050000045 11.184 77.76790259999993 11.3 81.09756209999921 11.159 77.23911840000117 11.172 77.67973289999972 11.356 69.32407570000085 10.191 64.29703599999955 11.154 79.74359909999961 10.173 77.01779879999975 10.158 85.10903139999927 11.273 84.38888830000037 11.229 77.7599924999993 11.209 87.63703090000031 11.245 61.212194700000325 10.921 81.67795820000059 11.153)
Error minima by case: (0.4247 11 0.4241 6 0.3722 2 0.1619 4 0.3687 6 0.0988 5 0.2563 4 0.276 6 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 10 0.3576 4 0.3743 11 0.2035 4 0.2941 9 0.2077 8 0.1022 8 0.4059 6 0.1968 5 0.2809 5 0.2071 6 0.3104 3 0.4029 4)
Average genome size in population (length): 67.18
Average program size in population (points): 68.18
Average percent parens in population: 0.015
Minimum age in population: 210.7917025257146
Maximum age in population: 215.7353000375739
Average age in population: 213.8319477334798
Median age in population: 213.9136831291447
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.847
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.847
Total error diversity:				 0.091
Error (vector) diversity:			 0.091
Behavioral diversity:				 0.093
--- Run Statistics ---
Number of program evaluations used so far: 150000
Number of point (instruction) evaluations so far: 293544949
--- Timings ---
Current time: 1529615396362 milliseconds
Total Time:         513.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       199.8 seconds, 38.9%
Fitness Testing:    244.4 seconds, 47.6%
Report:              69.0 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 149
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 150
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 150
;;******************************
;; -*- Number IO problem report - generation 150
Test total error for best: 11477.9327
Test mean error for best: 5.73897
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction tag_float_582} {:instruction integer_sub} {:instruction integer_max} {:instruction float_mod} {:instruction integer_shove} {:instruction float_pop} {:instruction integer_dec} {:instruction in1} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction integer_dup_items} {:instruction integer_dec} {:instruction in1} {:instruction float_min} {:instruction integer_shove} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_mod} {:instruction in1} {:instruction float_sin} {:instruction 70} {:instruction in2} {:instruction in1} {:instruction integer_shove} {:instruction integer_shove} {:instruction float_dup_items} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_dec} {:instruction in1} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_mod} {:instruction float_sin} {:instruction float_mod} {:instruction float_mod} {:instruction integer_min} {:instruction float_mod} {:instruction float_sin} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction float_stackdepth} {:instruction float_swap} {:instruction tag_integer_829} {:instruction tag_float_257} {:instruction print_integer} {:instruction tag_float_147})
Best program: (float_max tag_float_582 integer_sub integer_max float_mod integer_shove float_pop integer_dec in1 integer_rot integer_mult integer_div in2 float_dup_times integer_dup_items integer_dec in1 float_min integer_shove integer_div in2 float_dup_times float_dup_items float_mod in1 float_sin 70 in2 in1 integer_shove integer_shove float_dup_items integer_shove integer_fromfloat integer_dec in1 in2 float_dup_times float_dup_items float_mod float_sin float_mod float_mod integer_min float_mod float_sin float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub integer_swap in1 integer_fromfloat integer_add float_flush float_stackdepth float_swap tag_integer_829 tag_float_257 print_integer tag_float_147)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2547.9205897000006
Median total errors in population: 281.16429999999997
Error averages by case: (94.94800809999839 11.199 96.66253059999984 11.337 73.46531459999946 11.109 86.1721116999995 10.137 99.77134170000164 11.293 88.80915360000128 11.263 96.5864147999984 11.191 97.08967629999893 11.308 94.2019993000008 11.178 90.61125600000126 11.423 86.50524839999967 11.249 90.41520560000029 11.385 94.5912008999988 11.197 87.49711200000152 11.229 94.30666609999992 11.427 87.39355480000152 10.235 71.69847679999951 11.155 92.80962089999954 10.213 90.40676839999938 10.156 97.09432039999889 11.327 97.2271648000011 11.283 90.44550659999905 11.278 98.97469440000032 11.302 80.16348140000066 10.925 93.09276150000065 11.182)
Error minima by case: (0.4247 10 0.4241 5 0.3722 2 0.1619 4 0.3687 5 0.0988 5 0.2563 4 0.276 5 0.1491 4 0.498 6 0.3954 4 0.3556 5 0.2337 10 0.3576 3 0.3743 10 0.2035 4 0.2941 9 0.2077 8 0.1022 8 0.4059 5 0.1968 4 0.2809 5 0.2071 5 0.3104 3 0.4029 4)
Average genome size in population (length): 67.168
Average program size in population (points): 68.168
Average percent parens in population: 0.015
Minimum age in population: 211.7917025257146
Maximum age in population: 216.9964742712045
Average age in population: 215.3018562725215
Median age in population: 215.3716196855932
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.878
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.878
Total error diversity:				 0.1
Error (vector) diversity:			 0.102
Behavioral diversity:				 0.104
--- Run Statistics ---
Number of program evaluations used so far: 151000
Number of point (instruction) evaluations so far: 295224653
--- Timings ---
Current time: 1529615399557 milliseconds
Total Time:         516.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       201.1 seconds, 38.9%
Fitness Testing:    245.9 seconds, 47.6%
Report:              69.4 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 150
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 151
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 151
;;******************************
;; -*- Number IO problem report - generation 151
Test total error for best: 11475.9327
Test mean error for best: 5.73797
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction tag_float_715} {:instruction integer_pop} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_inc} {:instruction 96.80697452437909} {:instruction tagged_557} {:instruction float_dup_times} {:instruction integer_flush} {:instruction integer_dec} {:instruction in1} {:instruction integer_shove} {:instruction float_swap} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction in2} {:instruction in2} {:instruction float_dup_times} {:instruction float_sub} {:instruction float_mod} {:instruction float_mod} {:instruction float_shove} {:instruction float_mod} {:instruction tagged_654} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction integer_yank} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_swap} {:instruction float_add} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_shove} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction float_sin} {:instruction float_swap} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap})
Best program: (integer_pop tag_float_715 integer_pop integer_min float_frominteger float_inc 96.80697452437909 tagged_557 float_dup_times integer_flush integer_dec in1 integer_shove float_swap integer_div in2 float_dup_times in2 in2 float_dup_times float_sub float_mod float_mod float_shove float_mod tagged_654 float_mod in1 integer_flush float_max in2 integer_yank float_mult float_cos integer_fromfloat float_mult float_mult float_swap float_add integer_sub float_add integer_sub integer_shove in1 integer_fromfloat integer_add float_flush print_integer float_swap float_sin float_sin float_swap integer_add float_flush print_integer float_swap)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2307.612119700001
Median total errors in population: 281.16429999999997
Error averages by case: (84.22628969999874 11.178 84.9105721999997 11.326 63.18069399999949 11.138 75.94384219999966 10.153 87.07670900000139 11.271 81.83983320000134 11.262 84.26203319999874 11.178 85.7182859999994 11.283 81.47064960000085 11.173 83.72073400000131 11.411 76.50533409999957 11.251 83.29687160000064 11.382 87.11024709999897 11.184 79.92583360000128 11.226 83.74955440000028 11.388 77.80018630000126 10.249 69.69289399999947 11.12 86.40739949999944 10.191 82.09518929999945 10.106 85.40826879999932 11.301 85.56692870000127 11.269 83.3517200999994 11.265 87.25121680000032 11.269 68.77068520000059 10.937 81.64214710000068 11.177)
Error minima by case: (0.4247 10 0.4241 5 0.3722 3 0.1619 5 0.3687 5 0.0988 6 0.2563 4 0.276 5 0.1491 4 0.498 7 0.3954 5 0.3556 5 0.2337 9 0.3576 5 0.3743 10 0.2035 4 0.2941 9 0.2077 8 0.1022 7 0.4059 5 0.1968 4 0.2809 6 0.2071 5 0.3104 4 0.4029 4)
Average genome size in population (length): 67.989
Average program size in population (points): 68.989
Average percent parens in population: 0.015
Minimum age in population: 214.1976385318543
Maximum age in population: 218.7554247377311
Average age in population: 216.7076834211962
Median age in population: 216.7619040703531
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.846
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.846
Total error diversity:				 0.092
Error (vector) diversity:			 0.092
Behavioral diversity:				 0.095
--- Run Statistics ---
Number of program evaluations used so far: 152000
Number of point (instruction) evaluations so far: 296924982
--- Timings ---
Current time: 1529615402739 milliseconds
Total Time:         519.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       202.4 seconds, 38.9%
Fitness Testing:    247.3 seconds, 47.6%
Report:              69.9 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 151
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 152
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 152
;;******************************
;; -*- Number IO problem report - generation 152
Test total error for best: 11476.5633
Test mean error for best: 5.73828
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction integer_dup_items} {:instruction float_max} {:instruction integer_add} {:instruction in1} {:instruction integer_swap} {:instruction integer_div} {:instruction float_frominteger} {:instruction float_inc} {:instruction integer_div} {:instruction in2} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction float_max} {:instruction 97.93386809500635} {:instruction integer_inc} {:instruction float_mult} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction float_rot} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_mod} {:instruction in1} {:instruction integer_shove} {:instruction integer_swap} {:instruction integer_inc} {:instruction float_rot} {:instruction float_mult} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction integer_sub} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction float_rot} {:instruction float_sin} {:instruction float_cos} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction tag_float_257} {:instruction float_swap} {:instruction tag_float_78})
Best program: (float_min integer_dup_items float_max integer_add in1 integer_swap integer_div float_frominteger float_inc integer_div in2 integer_sub integer_stackdepth float_max 97.93386809500635 integer_inc float_mult integer_shove integer_dup_times float_max integer_mod float_rot in2 float_dup_times float_dup_items integer_rot float_mod in1 integer_shove integer_swap integer_inc float_rot float_mult float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat integer_sub float_mult float_sub float_add integer_sub integer_swap float_rot float_sin float_cos in1 integer_fromfloat integer_add float_flush print_integer float_swap float_sin tag_float_257 float_swap tag_float_78)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2223.8624740000014
Median total errors in population: 281.16429999999997
Error averages by case: (77.82546879999892 11.163 85.96308110000017 11.294 58.61495979999981 11.115 72.91706100000036 10.134 87.79140830000095 11.266 75.54543800000012 11.224 85.41139279999915 11.145 85.70582879999931 11.277 83.64180400000045 11.147 77.39073000000036 11.365 73.11134070000048 11.215 75.50764959999947 11.335 83.14878599999903 11.164 74.16511840000088 11.206 77.21674719999963 11.346 73.64260510000105 10.218 60.10833529999954 11.137 81.74425209999953 10.176 74.54782440000031 10.159 86.39477869999921 11.276 85.6873455000007 11.239 76.51703469999956 11.232 88.01016280000032 11.25 63.04290680000028 10.943 84.01141410000061 11.173)
Error minima by case: (0.4247 10 0.4241 3 0.3722 2 0.1619 4 0.3687 3 0.0988 5 0.2563 2 0.276 3 0.1491 2 0.498 7 0.3954 4 0.3556 5 0.2337 9 0.3576 4 0.3743 10 0.2035 4 0.2941 9 0.2077 8 0.1022 8 0.4059 3 0.1968 3 0.2809 5 0.2071 3 0.3104 3 0.4029 2)
Average genome size in population (length): 67.791
Average program size in population (points): 68.791
Average percent parens in population: 0.015
Minimum age in population: 215.3745470312389
Maximum age in population: 220.1692209647012
Average age in population: 218.0977237086925
Median age in population: 218.1068097766554
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.884
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.884
Total error diversity:				 0.089
Error (vector) diversity:			 0.09
Behavioral diversity:				 0.092
--- Run Statistics ---
Number of program evaluations used so far: 153000
Number of point (instruction) evaluations so far: 298620224
--- Timings ---
Current time: 1529615405953 milliseconds
Total Time:         523.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       203.7 seconds, 39.0%
Fitness Testing:    248.8 seconds, 47.6%
Report:              70.3 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 152
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 153
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 153
;;******************************
;; -*- Number IO problem report - generation 153
Test total error for best: 11485.9327
Test mean error for best: 5.74297
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction in1} {:instruction integer_flush} {:instruction integer_shove} {:instruction integer_pop} {:instruction float_min} {:instruction 35.77542359015047} {:instruction 96.80697452437909} {:instruction float_flush} {:instruction float_min} {:instruction float_dup_times} {:instruction in2} {:instruction float_dup_times} {:instruction 96.80697452437909} {:instruction integer_stackdepth} {:instruction integer_dup} {:instruction float_dup_times} {:instruction in2} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_sub} {:instruction integer_mult} {:instruction float_sub} {:instruction float_mod} {:instruction float_mod} {:instruction float_shove} {:instruction float_mod} {:instruction float_sin} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_dup} {:instruction integer_rot} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction float_dup_items} {:instruction float_mod} {:instruction integer_inc} {:instruction float_dup_items} {:instruction in1} {:instruction tag_float_78})
Best program: (integer_dup_items in1 integer_flush integer_shove integer_pop float_min 35.77542359015047 96.80697452437909 float_flush float_min float_dup_times in2 float_dup_times 96.80697452437909 integer_stackdepth integer_dup float_dup_times in2 float_dup_times integer_shove integer_sub integer_mult float_sub float_mod float_mod float_shove float_mod float_sin float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_dup integer_rot float_sub float_add integer_sub float_dec in1 integer_fromfloat integer_add float_flush print_integer float_swap float_sin float_dup_items float_mod integer_inc float_dup_items in1 tag_float_78)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2082.178962600001
Median total errors in population: 281.16429999999997
Error averages by case: (76.19361049999902 11.192 76.0274184000007 11.329 57.93823769999969 11.128 68.1096942000004 10.148 77.24892390000042 11.286 72.81835120000018 11.249 74.2798795999999 11.193 74.51730419999956 11.294 72.58398679999966 11.171 74.39225200000021 11.394 69.35385460000035 11.252 74.85636079999968 11.362 74.97613259999916 11.174 70.37254240000085 11.229 76.32079459999983 11.397 70.09604560000102 10.252 62.00719109999946 11.124 73.13911619999955 10.189 71.43437820000015 10.121 75.53108549999949 11.308 74.90259430000019 11.289 74.8197537999995 11.272 77.52285590000032 11.293 63.488619500000446 10.948 72.46297900000049 11.191)
Error minima by case: (0.4247 10 0.5759 6 0.3722 3 0.1619 4 0.3687 6 0.0988 6 0.2563 5 0.276 6 0.8509 5 0.498 7 0.3954 5 0.3556 6 0.2337 10 0.3576 4 0.3743 10 0.2035 6 0.2941 8 0.2077 9 0.1022 7 0.4059 6 0.1968 5 0.2809 6 0.7929 6 0.3104 6 0.4029 5)
Average genome size in population (length): 68.126
Average program size in population (points): 69.126
Average percent parens in population: 0.015
Minimum age in population: 216.3745470312389
Maximum age in population: 221.5402002062268
Average age in population: 219.5371286685752
Median age in population: 219.607490114206
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.889
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.889
Total error diversity:				 0.082
Error (vector) diversity:			 0.084
Behavioral diversity:				 0.088
--- Run Statistics ---
Number of program evaluations used so far: 154000
Number of point (instruction) evaluations so far: 300323906
--- Timings ---
Current time: 1529615409073 milliseconds
Total Time:         526.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       205.1 seconds, 39.0%
Fitness Testing:    250.3 seconds, 47.6%
Report:              70.7 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 153
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 154
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 154
;;******************************
;; -*- Number IO problem report - generation 154
Test total error for best: 11480.9327
Test mean error for best: 5.74047
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_integer_714} {:instruction float_sin} {:instruction integer_dup_items} {:instruction float_mult} {:instruction integer_sub} {:instruction float_dup} {:instruction integer_dec} {:instruction integer_min} {:instruction integer_dup_items} {:instruction float_flush} {:instruction float_sub} {:instruction integer_shove} {:instruction float_swap} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction in1} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_sub} {:instruction integer_mult} {:instruction float_sub} {:instruction float_dup_times} {:instruction float_swap} {:instruction integer_shove} {:instruction float_mod} {:instruction float_shove} {:instruction float_mod} {:instruction float_sin} {:instruction integer_min} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction integer_flush} {:instruction in1} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_sub} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_max} {:instruction in2} {:instruction 21.118957313571983} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction integer_sub} {:instruction integer_shove} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction tag_float_419} {:instruction float_sin} {:instruction float_swap} {:instruction tag_float_78})
Best program: (tag_integer_714 float_sin integer_dup_items float_mult integer_sub float_dup integer_dec integer_min integer_dup_items float_flush float_sub integer_shove float_swap float_swap float_mod in1 in1 integer_div in2 float_dup_times integer_mod integer_sub integer_mult float_sub float_dup_times float_swap integer_shove float_mod float_shove float_mod float_sin integer_min in1 integer_flush float_max in2 float_mult float_mult integer_flush in1 integer_div in2 float_dup_times integer_div in2 float_dup_times float_sub integer_div integer_dup_times float_max in2 21.118957313571983 float_mult float_cos integer_fromfloat integer_sub integer_shove in1 integer_fromfloat integer_add float_flush print_integer float_swap tag_float_419 float_sin float_swap tag_float_78)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2490.8946577000006
Median total errors in population: 281.16429999999997
Error averages by case: (95.10830929999845 11.194 89.77712690000003 11.324 75.7366216999992 11.088 86.67093709999875 10.138 91.83188040000148 11.279 92.00973440000188 11.246 88.11731289999867 11.184 90.06436399999903 11.301 86.54371720000066 11.17 93.39522800000178 11.404 87.1007613999989 11.224 93.27644920000073 11.338 90.12413889999875 11.199 89.97019120000158 11.209 94.92316890000046 11.415 88.14676500000161 10.212 73.56541449999949 11.125 88.20278689999951 10.219 85.78798099999904 10.139 90.12162739999897 11.314 89.24416800000091 11.283 93.42828189999896 11.257 92.07026680000031 11.3 82.51066400000089 10.926 86.50076070000061 11.178)
Error minima by case: (0.4247 10 0.4241 5 0.3722 2 0.1619 4 0.3687 5 0.0988 4 0.2563 3 0.276 5 0.1491 4 0.498 6 0.3954 4 0.3556 4 0.2337 10 0.3576 3 0.3743 10 0.2035 4 0.2941 9 0.2077 8 0.1022 8 0.4059 5 0.1968 4 0.2809 5 0.2071 5 0.3104 3 0.4029 4)
Average genome size in population (length): 68.315
Average program size in population (points): 69.315
Average percent parens in population: 0.015
Minimum age in population: 217.3745470312389
Maximum age in population: 223.1992423092019
Average age in population: 221.0236049549604
Median age in population: 221.0602101993355
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.872
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.872
Total error diversity:				 0.09
Error (vector) diversity:			 0.091
Behavioral diversity:				 0.095
--- Run Statistics ---
Number of program evaluations used so far: 155000
Number of point (instruction) evaluations so far: 302032303
--- Timings ---
Current time: 1529615412233 milliseconds
Total Time:         529.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       206.4 seconds, 39.0%
Fitness Testing:    251.7 seconds, 47.6%
Report:              71.0 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 154
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 155
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 155
;;******************************
;; -*- Number IO problem report - generation 155
Test total error for best: 11476.5633
Test mean error for best: 5.73828
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction tag_float_582} {:instruction integer_shove} {:instruction float_max} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_max} {:instruction float_dup_times} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_shove} {:instruction integer_shove} {:instruction float_swap} {:instruction integer_dup} {:instruction in2} {:instruction float_dup_times} {:instruction integer_dec} {:instruction integer_yank} {:instruction float_add} {:instruction float_add} {:instruction in2} {:instruction float_add} {:instruction integer_dec} {:instruction in1} {:instruction integer_inc} {:instruction in2} {:instruction float_dup_times} {:instruction in2} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction integer_inc} {:instruction float_max} {:instruction in2} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction -12} {:instruction float_max} {:instruction float_mod} {:instruction float_sin} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction tag_float_257} {:instruction float_swap} {:instruction tag_float_78})
Best program: (integer_inc tag_float_582 integer_shove float_max float_min integer_dup_items float_max float_dup_times float_swap float_yankdup float_shove integer_shove float_swap integer_dup in2 float_dup_times integer_dec integer_yank float_add float_add in2 float_add integer_dec in1 integer_inc in2 float_dup_times in2 float_dup_times float_stackdepth integer_sub integer_mult integer_dup_times integer_inc float_max in2 float_mod in1 float_mod in1 -12 float_max float_mod float_sin float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub integer_swap in1 integer_fromfloat integer_add float_flush print_integer float_swap float_sin tag_float_257 float_swap tag_float_78)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2397.308271400001
Median total errors in population: 281.16429999999997
Error averages by case: (86.2769658999982 11.188 89.20857419999987 11.319 66.98241019999935 11.124 79.40347999999878 10.142 91.1850977000018 11.286 85.89046200000195 11.247 87.6981968999984 11.176 89.16465269999894 11.295 86.25344420000091 11.166 87.70626800000181 11.395 79.850319999999 11.226 86.32969480000062 11.35 93.09706809999861 11.185 82.85503920000171 11.231 86.33930860000034 11.385 81.6412070000018 10.225 70.41004089999946 11.153 91.73929739999946 10.202 84.87133969999894 10.147 89.69946139999888 11.309 88.94928070000114 11.272 86.38354029999891 11.256 91.39023360000033 11.272 71.1348368000008 10.946 86.16105110000068 11.19)
Error minima by case: (0.5753 10 0.4241 6 0.3722 2 0.8381 4 0.3687 6 0.0988 4 0.2563 4 0.276 5 0.8509 4 0.498 7 0.3954 4 0.3556 3 0.2337 9 0.3576 4 0.6257 10 0.2035 4 0.2941 8 0.2077 8 0.1022 8 0.4059 6 0.1968 5 0.2809 3 0.7929 6 0.3104 3 0.4029 4)
Average genome size in population (length): 68.154
Average program size in population (points): 69.154
Average percent parens in population: 0.015
Minimum age in population: 219.6363559988691
Maximum age in population: 224.4502250963976
Average age in population: 222.473732232775
Median age in population: 222.5334097919478
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.889
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.889
Total error diversity:				 0.093
Error (vector) diversity:			 0.093
Behavioral diversity:				 0.097
--- Run Statistics ---
Number of program evaluations used so far: 156000
Number of point (instruction) evaluations so far: 303736751
--- Timings ---
Current time: 1529615415486 milliseconds
Total Time:         532.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       207.7 seconds, 39.0%
Fitness Testing:    253.1 seconds, 47.5%
Report:              71.5 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 155
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 156
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 156
;;******************************
;; -*- Number IO problem report - generation 156
Test total error for best: 11475.9327
Test mean error for best: 5.73797
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction in1} {:instruction integer_mod} {:instruction integer_add} {:instruction integer_flush} {:instruction integer_div} {:instruction float_dup_times} {:instruction float_swap} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_sin} {:instruction float_add} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_add} {:instruction float_dec} {:instruction in2} {:instruction float_dup_times} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_mult} {:instruction float_sub} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_div} {:instruction float_sin} {:instruction float_swap} {:instruction tag_float_518} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction tag_float_257} {:instruction float_swap} {:instruction tag_float_78})
Best program: (integer_dup_items in1 integer_mod integer_add integer_flush integer_div float_dup_times float_swap integer_dec float_dup_items float_sin float_add float_dec in2 float_min in1 integer_fromfloat float_dup_items integer_dup_times float_add float_dec in2 float_dup_times float_shove integer_yankdup integer_mult float_sub float_mod float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_add integer_sub integer_swap integer_div float_sin float_swap tag_float_518 in1 integer_fromfloat integer_add float_flush print_integer float_swap float_sin tag_float_257 float_swap tag_float_78)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2477.5346659000015
Median total errors in population: 281.16429999999997
Error averages by case: (89.72866469999835 11.179 95.34778200000004 11.306 68.27606549999948 11.101 82.14676089999938 10.121 97.54654730000142 11.272 88.54375840000164 11.23 91.92965189999875 11.188 96.39269019999898 11.281 90.60755770000054 11.161 90.29676200000152 11.377 82.55543729999953 11.223 89.9386280000004 11.342 90.88341069999869 11.178 86.5780392000016 11.197 90.80230300000017 11.398 83.27549340000158 10.214 68.81832789999946 11.117 87.64690239999946 10.201 84.49920739999946 10.13 96.9263685999989 11.298 95.94418960000093 11.28 89.96438299999899 11.243 98.78132340000032 11.269 73.51614160000067 10.919 90.19726980000065 11.166)
Error minima by case: (0.4247 9 0.4241 5 0.3722 2 0.1619 4 0.3687 5 0.0988 5 0.2563 4 0.276 5 0.1491 4 0.498 6 0.3954 4 0.3556 5 0.2337 9 0.3576 3 0.3743 11 0.2035 4 0.2941 9 0.2077 8 0.1022 8 0.4059 5 0.1968 4 0.2809 5 0.2071 5 0.3104 3 0.4029 4)
Average genome size in population (length): 67.968
Average program size in population (points): 68.968
Average percent parens in population: 0.015
Minimum age in population: 221.2992325671859
Maximum age in population: 225.9403658558118
Average age in population: 223.9372505486416
Median age in population: 223.9871077783046
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.871
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.871
Total error diversity:				 0.089
Error (vector) diversity:			 0.089
Behavioral diversity:				 0.094
--- Run Statistics ---
Number of program evaluations used so far: 157000
Number of point (instruction) evaluations so far: 305436622
--- Timings ---
Current time: 1529615418656 milliseconds
Total Time:         535.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       209.0 seconds, 39.0%
Fitness Testing:    254.6 seconds, 47.5%
Report:              71.9 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 156
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 157
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 157
;;******************************
;; -*- Number IO problem report - generation 157
Test total error for best: 11477.9327
Test mean error for best: 5.73897
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_mod} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_div} {:instruction integer_dup_times} {:instruction in1} {:instruction float_dup_items} {:instruction float_sin} {:instruction in1} {:instruction -27.36445100454587} {:instruction print_integer} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dup_times} {:instruction float_sub} {:instruction integer_rot} {:instruction float_mult} {:instruction float_swap} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_add} {:instruction integer_sub} {:instruction float_cos} {:instruction float_min} {:instruction float_add} {:instruction float_add} {:instruction integer_sub} {:instruction float_cos} {:instruction float_sub} {:instruction float_add} {:instruction integer_pop} {:instruction tag_float_594} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction tag_float_518} {:instruction float_swap} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_dup_items} {:instruction integer_shove} {:instruction float_sin} {:instruction integer_shove} {:instruction integer_flush} {:instruction in1} {:instruction tag_integer_380} {:instruction in2} {:instruction float_dup_times} {:instruction integer_div} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_sub} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_max} {:instruction in2} {:instruction 21.118957313571983} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction integer_sub} {:instruction integer_shove} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction float_flush} {:instruction print_integer} {:instruction float_mod} {:instruction float_sin} {:instruction float_shove} {:instruction float_swap} {:instruction integer_add})
Best program: (float_min integer_dup_items integer_dup_items in1 integer_mod integer_add float_frominteger integer_div integer_dup_times in1 float_dup_items float_sin in1 -27.36445100454587 print_integer float_frominteger float_dup float_dup_times float_sub integer_rot float_mult float_swap float_cos integer_fromfloat float_add integer_sub float_cos float_min float_add float_add integer_sub float_cos float_sub float_add integer_pop tag_float_594 integer_div integer_rot float_dec tag_float_518 float_swap in1 integer_fromfloat integer_add integer_dup_items integer_shove float_sin integer_shove integer_flush in1 tag_integer_380 in2 float_dup_times integer_div integer_max float_dup_times float_sub integer_div integer_dup_times float_max in2 21.118957313571983 float_mult float_cos integer_fromfloat integer_sub integer_shove in1 integer_fromfloat integer_add float_flush print_integer float_flush print_integer float_mod float_sin float_shove float_swap integer_add)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2421.177508200001
Median total errors in population: 281.16429999999997
Error averages by case: (87.21071889999851 11.175 89.95984910000006 11.254 66.30587659999956 11.089 85.37788959999929 10.107 91.90608710000132 11.231 86.67485720000116 11.204 88.6066645999988 11.146 90.12773849999907 11.261 86.99550630000039 11.13 88.31226000000115 11.339 84.4952509999995 11.189 88.1186948000002 11.309 91.31631289999874 11.159 85.48446960000142 11.186 88.55406279999988 11.364 85.69405600000151 10.188 70.91320669999955 11.13 89.4794618999995 10.177 81.52227789999993 10.128 90.46311629999903 11.257 89.58911470000076 11.232 88.1215402999991 11.198 92.08201870000029 11.219 71.37187200000054 10.926 86.7516047000006 11.145)
Error minima by case: (0.4247 10 0.4241 3 0.3722 1 0.1619 2 0.3687 3 0.0988 2 0.2563 2 0.276 3 0.1491 2 0.498 3 0.3954 2 0.3556 2 0.2337 10 0.3576 1 0.3743 11 0.2035 2 0.2941 8 0.2077 8 0.1022 8 0.4059 3 0.1968 2 0.2809 2 0.2071 3 0.3104 2 0.4029 2)
Average genome size in population (length): 68.634
Average program size in population (points): 69.634
Average percent parens in population: 0.015
Minimum age in population: 223.1158212985259
Maximum age in population: 227.2380133027469
Average age in population: 225.4008049094431
Median age in population: 225.4703832526054
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.876
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.876
Total error diversity:				 0.093
Error (vector) diversity:			 0.094
Behavioral diversity:				 0.096
--- Run Statistics ---
Number of program evaluations used so far: 158000
Number of point (instruction) evaluations so far: 307153331
--- Timings ---
Current time: 1529615421939 milliseconds
Total Time:         538.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       210.3 seconds, 39.0%
Fitness Testing:    256.1 seconds, 47.5%
Report:              72.3 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 157
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 158
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 158
;;******************************
;; -*- Number IO problem report - generation 158
Test total error for best: 11475.9327
Test mean error for best: 5.73797
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction tag_float_715} {:instruction integer_pop} {:instruction integer_min} {:instruction integer_min} {:instruction float_tan} {:instruction float_inc} {:instruction 96.80697452437909} {:instruction float_frominteger} {:instruction in2} {:instruction float_dup_times} {:instruction float_sub} {:instruction float_mod} {:instruction in1} {:instruction integer_shove} {:instruction integer_shove} {:instruction in2} {:instruction float_dup_times} {:instruction float_mod} {:instruction in1} {:instruction integer_add} {:instruction float_max} {:instruction float_tan} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mod} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction 97.20027408926207} {:instruction float_max} {:instruction integer_pop} {:instruction float_cos} {:instruction integer_div} {:instruction -98} {:instruction integer_shove} {:instruction integer_flush} {:instruction in1} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_sub} {:instruction integer_div} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_mod} {:instruction float_sin} {:instruction float_mult} {:instruction float_add} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_max} {:instruction integer_sub} {:instruction float_sub} {:instruction tag_float_633} {:instruction integer_min} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_dup} {:instruction float_sub} {:instruction float_dec} {:instruction print_integer} {:instruction float_swap} {:instruction float_max})
Best program: (integer_pop tag_float_715 integer_pop integer_min integer_min float_tan float_inc 96.80697452437909 float_frominteger in2 float_dup_times float_sub float_mod in1 integer_shove integer_shove in2 float_dup_times float_mod in1 integer_add float_max float_tan float_mult float_mult float_cos integer_fromfloat float_mod integer_sub integer_shove integer_dup_items integer_fromfloat integer_dup 97.20027408926207 float_max integer_pop float_cos integer_div -98 integer_shove integer_flush in1 integer_div in2 float_dup_times integer_div in2 float_dup_times float_sub integer_div float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub float_mod float_sin float_mult float_add integer_div integer_dup_times float_max integer_sub float_sub tag_float_633 integer_min in1 integer_fromfloat integer_add integer_yankdup float_dup float_sub float_dec print_integer float_swap float_max)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 82
Size: 83
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2459.7822156000007
Median total errors in population: 281.16429999999997
Error averages by case: (87.21017199999851 11.185 92.91622719999984 11.338 72.47928269999929 11.137 83.62950859999921 10.155 95.19663840000148 11.304 85.51545000000138 11.266 91.47160229999882 11.201 92.86423999999916 11.31 90.14668200000062 11.189 87.39675000000133 11.42 83.78269239999942 11.244 86.7964276000004 11.379 91.55716699999876 11.192 84.6479000000015 11.24 88.04917450000002 11.393 84.1742070000015 10.239 74.02889859999947 11.14 89.97325699999944 10.213 87.0042285999994 10.134 93.43516859999909 11.319 92.60816300000089 11.3 86.8239110999992 11.28 95.38048040000031 11.304 76.10415170000077 10.944 89.56383490000067 11.2)
Error minima by case: (0.4247 10 0.4241 6 0.3722 2 0.1619 4 0.3687 6 0.0988 5 0.2563 4 0.276 6 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 10 0.3576 4 0.3743 10 0.2035 4 0.2941 9 0.2077 8 0.1022 8 0.4059 6 0.1968 5 0.2809 5 0.2071 6 0.3104 3 0.4029 4)
Average genome size in population (length): 67.387
Average program size in population (points): 68.387
Average percent parens in population: 0.015
Minimum age in population: 224.1158212985259
Maximum age in population: 228.8431778284249
Average age in population: 226.8653185344777
Median age in population: 226.9142132402615
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.874
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.874
Total error diversity:				 0.087
Error (vector) diversity:			 0.087
Behavioral diversity:				 0.092
--- Run Statistics ---
Number of program evaluations used so far: 159000
Number of point (instruction) evaluations so far: 308838798
--- Timings ---
Current time: 1529615425180 milliseconds
Total Time:         542.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       211.6 seconds, 39.0%
Fitness Testing:    257.5 seconds, 47.5%
Report:              72.8 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 158
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 159
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 159
;;******************************
;; -*- Number IO problem report - generation 159
Test total error for best: 11475.9327
Test mean error for best: 5.73797
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction 42.288180574631895} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_yankdup} {:instruction in2} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_sin} {:instruction float_dup_items} {:instruction float_sub} {:instruction integer_dec} {:instruction float_min} {:instruction integer_swap} {:instruction in1} {:instruction float_max} {:instruction print_integer} {:instruction float_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_sub} {:instruction float_mod} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 96.80697452437909} {:instruction float_add} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_sub} {:instruction integer_mult} {:instruction float_sub} {:instruction float_mod} {:instruction float_max} {:instruction integer_mod} {:instruction float_max} {:instruction integer_mod} {:instruction float_mod} {:instruction integer_dup_items} {:instruction tag_float_850} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_add} {:instruction integer_sub} {:instruction float_add} {:instruction in1} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_shove} {:instruction integer_flush} {:instruction in1} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_sub} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_max} {:instruction in2} {:instruction 21.118957313571983} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction integer_sub} {:instruction integer_shove} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction float_flush} {:instruction print_integer} {:instruction float_mod} {:instruction float_sin} {:instruction float_shove} {:instruction float_swap} {:instruction integer_inc})
Best program: (42.288180574631895 integer_min float_frominteger float_shove float_inc integer_inc integer_yankdup in2 float_pop float_dup_items float_sin float_dup_items float_sub integer_dec float_min integer_swap in1 float_max print_integer float_div in2 float_dup_times float_sub float_mod integer_pop float_inc in1 in2 float_dup_times float_dup_items 96.80697452437909 float_add float_dup_times integer_mod integer_sub integer_mult float_sub float_mod float_max integer_mod float_max integer_mod float_mod integer_dup_items tag_float_850 float_mod in1 float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_add integer_sub float_add in1 tag_float_518 float_mult in1 integer_fromfloat integer_shove integer_flush in1 integer_div in2 float_dup_times integer_div in2 float_dup_times float_sub integer_div integer_dup_times float_max in2 21.118957313571983 float_mult float_cos integer_fromfloat integer_sub integer_shove in1 integer_fromfloat integer_add float_flush print_integer float_flush print_integer float_mod float_sin float_shove float_swap integer_inc)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 97
Size: 98
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2215.7625900000007
Median total errors in population: 281.16429999999997
Error averages by case: (82.32588459999863 11.193 80.48111120000056 11.36 66.38915459999932 11.134 73.93277519999971 10.149 83.28650170000066 11.305 76.81235120000099 11.265 78.98137789999937 11.213 80.23809619999918 11.35 77.83326470000009 11.184 78.64424800000089 11.43 74.55315679999984 11.272 79.05578319999998 11.392 81.52071159999896 11.19 74.60518480000138 11.234 81.0710459999997 11.425 75.79337550000137 10.243 63.14410439999955 11.136 79.08232479999954 10.214 78.50738289999964 10.125 80.20172419999912 11.332 80.98352180000025 11.297 79.00519199999911 11.274 82.96952740000032 11.303 73.3584576000008 10.916 75.84533170000054 11.205)
Error minima by case: (0.4247 10 0.4241 5 0.3722 2 0.1619 4 0.3687 5 0.0988 5 0.2563 4 0.276 5 0.1491 4 0.498 6 0.3954 4 0.3556 5 0.2337 10 0.3576 3 0.3743 10 0.2035 4 0.2941 10 0.2077 9 0.1022 8 0.4059 5 0.1968 4 0.2809 5 0.2071 5 0.3104 3 0.4029 4)
Average genome size in population (length): 66.931
Average program size in population (points): 67.931
Average percent parens in population: 0.015
Minimum age in population: 225.1158212985259
Maximum age in population: 230.4099005190119
Average age in population: 228.3220348606632
Median age in population: 228.3649219754659
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.868
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.868
Total error diversity:				 0.102
Error (vector) diversity:			 0.103
Behavioral diversity:				 0.106
--- Run Statistics ---
Number of program evaluations used so far: 160000
Number of point (instruction) evaluations so far: 310512766
--- Timings ---
Current time: 1529615428448 milliseconds
Total Time:         545.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       212.9 seconds, 39.1%
Fitness Testing:    259.0 seconds, 47.5%
Report:              73.3 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 159
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 160
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 160
;;******************************
;; -*- Number IO problem report - generation 160
Test total error for best: 11475.9327
Test mean error for best: 5.73797
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction integer_dup_items} {:instruction float_max} {:instruction tag_float_736} {:instruction float_div} {:instruction integer_swap} {:instruction float_mult} {:instruction integer_flush} {:instruction integer_shove} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_div} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_sub} {:instruction in1} {:instruction float_shove} {:instruction integer_mod} {:instruction tag_float_736} {:instruction tag_float_715} {:instruction float_shove} {:instruction float_swap} {:instruction float_add} {:instruction integer_dec} {:instruction in1} {:instruction integer_inc} {:instruction in2} {:instruction float_add} {:instruction integer_dec} {:instruction in1} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_yank} {:instruction in2} {:instruction float_yank} {:instruction float_min} {:instruction integer_shove} {:instruction float_tan} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_mod} {:instruction in1} {:instruction float_sin} {:instruction float_dup_times} {:instruction in2} {:instruction float_max} {:instruction integer_yank} {:instruction in2} {:instruction float_dup_times} {:instruction float_sub} {:instruction integer_div} {:instruction in1} {:instruction in2} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction tag_float_518} {:instruction integer_add} {:instruction float_mod} {:instruction float_mod} {:instruction float_shove} {:instruction float_mod} {:instruction float_sin} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_rot} {:instruction float_div} {:instruction print_integer} {:instruction float_div} {:instruction float_swap} {:instruction integer_dup_items})
Best program: (float_min integer_dup_items float_max tag_float_736 float_div integer_swap float_mult integer_flush integer_shove integer_div in2 float_dup_times float_div float_dup_times integer_mod integer_sub in1 float_shove integer_mod tag_float_736 tag_float_715 float_shove float_swap float_add integer_dec in1 integer_inc in2 float_add integer_dec in1 integer_flush float_swap integer_yank in2 float_yank float_min integer_shove float_tan in2 float_dup_times float_dup_items float_mod in1 float_sin float_dup_times in2 float_max integer_yank in2 float_dup_times float_sub integer_div in1 in2 integer_div integer_rot float_dec tag_float_518 integer_add float_mod float_mod float_shove float_mod float_sin float_mod in1 integer_flush float_max in1 integer_flush float_max in2 float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub integer_swap in1 integer_fromfloat integer_add integer_yankdup float_rot float_div print_integer float_div float_swap integer_dup_items)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 91
Size: 92
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2577.2382728000007
Median total errors in population: 281.16429999999997
Error averages by case: (96.31176109999836 11.2 93.04069270000005 11.342 76.10962149999932 11.138 89.50830539999907 10.162 96.58886550000162 11.308 94.9455608000019 11.276 92.98444499999852 11.225 94.74990599999911 11.34 91.1875879000007 11.195 96.4557660000018 11.42 90.21910499999926 11.241 96.44133920000067 11.382 96.10925789999875 11.199 90.42803920000162 11.256 96.75804600000028 11.398 91.77786770000164 10.236 76.0787421999995 11.14 94.7720562999995 10.211 91.10981059999912 10.152 94.23639799999901 11.33 93.51576390000116 11.306 96.481821199999 11.276 95.97804520000031 11.306 82.93497650000081 10.96 91.29049200000065 11.225)
Error minima by case: (0.4247 9 0.4241 9 0.3722 2 0.1619 4 0.3687 9 0.0988 5 0.2563 9 0.276 9 0.1491 9 0.498 7 0.3954 4 0.3556 5 0.2337 10 0.3576 4 0.3743 10 0.2035 4 0.2941 9 0.2077 8 0.1022 7 0.4059 9 0.1968 9 0.2809 5 0.2071 9 0.3104 3 0.4029 10)
Average genome size in population (length): 66.942
Average program size in population (points): 67.942
Average percent parens in population: 0.015
Minimum age in population: 227.0410748194917
Maximum age in population: 231.7461654507718
Average age in population: 229.7377661015949
Median age in population: 229.7692844801297
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.892
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.892
Total error diversity:				 0.104
Error (vector) diversity:			 0.107
Behavioral diversity:				 0.112
--- Run Statistics ---
Number of program evaluations used so far: 161000
Number of point (instruction) evaluations so far: 312186982
--- Timings ---
Current time: 1529615431753 milliseconds
Total Time:         548.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       214.3 seconds, 39.1%
Fitness Testing:    260.4 seconds, 47.5%
Report:              73.8 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 160
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 161
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 161
;;******************************
;; -*- Number IO problem report - generation 161
Test total error for best: 11475.9327
Test mean error for best: 5.73797
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_shove} {:instruction float_dec} {:instruction float_tan} {:instruction tagged_394} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_mod} {:instruction float_sin} {:instruction float_mod} {:instruction float_mod} {:instruction float_shove} {:instruction float_mod} {:instruction float_sin} {:instruction float_mod} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction float_sub} {:instruction float_stackdepth} {:instruction float_mod} {:instruction in1} {:instruction float_max} {:instruction float_max} {:instruction float_mod} {:instruction in1} {:instruction integer_shove} {:instruction integer_shove} {:instruction float_dup_items} {:instruction float_max} {:instruction float_sin} {:instruction float_rot} {:instruction float_mult} {:instruction float_cos} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_div} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_mod} {:instruction in1} {:instruction integer_add} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_add} {:instruction integer_sub} {:instruction float_cos} {:instruction float_tan} {:instruction float_div} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction tag_float_440} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction float_flush} {:instruction print_integer})
Best program: (float_shove float_dec float_tan tagged_394 in2 integer_min float_frominteger float_dup_times float_dec float_dup_items float_mod float_sin float_mod float_mod float_shove float_mod float_sin float_mod float_mod float_mod in1 integer_flush float_max float_sub float_stackdepth float_mod in1 float_max float_max float_mod in1 integer_shove integer_shove float_dup_items float_max float_sin float_rot float_mult float_cos float_mult integer_yankdup float_yankdup float_div integer_div in2 float_dup_times float_mod in1 integer_add float_max in2 float_mult float_mult float_cos integer_fromfloat float_add integer_sub float_cos float_tan float_div integer_sub float_sub integer_div integer_rot float_dec tag_float_440 in1 integer_fromfloat integer_add float_flush print_integer float_flush print_integer)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2307.6160458000013
Median total errors in population: 281.16429999999997
Error averages by case: (83.45588459999841 11.188 86.84970000000068 11.316 67.02556279999965 11.122 77.93914689999973 10.156 88.08480240000081 11.285 82.00464760000091 11.258 85.10154419999941 11.19 85.25120529999907 11.283 83.59463279999994 11.174 83.72424400000084 11.406 78.09005539999993 11.235 82.63878319999978 11.363 81.87849409999876 11.196 80.71218480000144 11.241 83.23742029999941 11.388 78.25099410000144 10.234 65.4305941999995 11.154 81.58365179999947 10.217 78.44666859999988 10.146 85.446049199999 11.304 85.76017780000015 11.282 82.90163019999903 11.277 88.24760070000033 11.288 71.97135830000063 10.956 83.13901250000063 11.191)
Error minima by case: (0.4247 9 0.4241 2 0.3722 3 0.1619 4 0.3687 2 0.0988 5 0.2563 2 0.276 2 0.1491 2 0.498 6 0.3954 4 0.3556 5 0.2337 9 0.3576 3 0.3743 10 0.2035 4 0.2941 9 0.2077 8 0.1022 8 0.4059 2 0.1968 2 0.2809 5 0.2071 2 0.3104 4 0.4029 4)
Average genome size in population (length): 67.326
Average program size in population (points): 68.326
Average percent parens in population: 0.015
Minimum age in population: 228.6400617826684
Maximum age in population: 233.2038403337378
Average age in population: 231.2016301667295
Median age in population: 231.259250704249
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.868
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.868
Total error diversity:				 0.103
Error (vector) diversity:			 0.104
Behavioral diversity:				 0.107
--- Run Statistics ---
Number of program evaluations used so far: 162000
Number of point (instruction) evaluations so far: 313870940
--- Timings ---
Current time: 1529615434924 milliseconds
Total Time:         551.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       215.6 seconds, 39.1%
Fitness Testing:    261.9 seconds, 47.5%
Report:              74.3 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 161
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 162
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 162
;;******************************
;; -*- Number IO problem report - generation 162
Test total error for best: 11474.759100000001
Test mean error for best: 5.73738
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction 42.288180574631895} {:instruction integer_min} {:instruction float_dup} {:instruction integer_pop} {:instruction tag_float_715} {:instruction integer_pop} {:instruction integer_min} {:instruction float_frominteger} {:instruction integer_rot} {:instruction float_swap} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_sin} {:instruction float_dup_items} {:instruction float_sub} {:instruction integer_dec} {:instruction float_min} {:instruction integer_swap} {:instruction in1} {:instruction float_max} {:instruction print_integer} {:instruction integer_min} {:instruction in2} {:instruction float_dup_times} {:instruction float_sub} {:instruction float_mod} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 96.80697452437909} {:instruction float_add} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_sub} {:instruction integer_mult} {:instruction float_sub} {:instruction float_mod} {:instruction float_max} {:instruction integer_mod} {:instruction float_max} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup_items} {:instruction tag_float_850} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in1} {:instruction float_mult} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction integer_mod} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction tag_float_257} {:instruction integer_add} {:instruction tag_float_78})
Best program: (42.288180574631895 integer_min float_dup integer_pop tag_float_715 integer_pop integer_min float_frominteger integer_rot float_swap float_pop float_dup_items float_sin float_dup_items float_sub integer_dec float_min integer_swap in1 float_max print_integer integer_min in2 float_dup_times float_sub float_mod integer_pop float_inc in1 in2 float_dup_times float_dup_items 96.80697452437909 float_add float_dup_times integer_mod integer_sub integer_mult float_sub float_mod float_max integer_mod float_max integer_inc float_mod integer_dup_items tag_float_850 float_mod in1 float_mod in1 integer_flush float_max in1 float_mult float_mod in1 integer_flush float_max in2 integer_mod float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub integer_swap in1 integer_fromfloat integer_add float_flush print_integer float_swap float_sin tag_float_257 integer_add tag_float_78)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 80
Size: 81
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2489.5508765000013
Median total errors in population: 281.16429999999997
Error averages by case: (92.16926709999844 11.191 93.65957630000027 11.319 73.7765709999993 11.122 84.45999299999933 10.144 94.75584600000128 11.301 89.6443392000017 11.263 89.75878329999891 11.21 92.926029999999 11.329 89.69152560000047 11.184 90.92523200000161 11.4 84.89048609999949 11.229 91.06564960000046 11.36 92.33329329999872 11.196 86.57340320000145 11.217 91.60306280000022 11.396 85.89432050000148 10.226 70.07809939999952 11.147 90.72870629999953 10.207 86.8979651999996 10.141 93.03222099999891 11.33 93.12862940000076 11.297 90.9928773999989 11.257 95.82773430000033 11.297 79.45402920000085 10.948 88.3772353000006 11.195)
Error minima by case: (0.4247 10 0.4241 5 0.3722 3 0.1619 4 0.3687 5 0.0988 5 0.2563 4 0.276 5 0.1491 4 0.498 6 0.3954 4 0.3556 4 0.2337 9 0.3576 3 0.3743 11 0.2035 4 0.2941 10 0.2077 8 0.1022 8 0.4059 5 0.1968 4 0.2809 5 0.2071 5 0.3104 4 0.4029 4)
Average genome size in population (length): 66.989
Average program size in population (points): 67.989
Average percent parens in population: 0.015
Minimum age in population: 229.7884901571547
Maximum age in population: 234.8407304873877
Average age in population: 232.6274372125492
Median age in population: 232.6463974432261
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.872
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.872
Total error diversity:				 0.094
Error (vector) diversity:			 0.096
Behavioral diversity:				 0.099
--- Run Statistics ---
Number of program evaluations used so far: 163000
Number of point (instruction) evaluations so far: 315546469
--- Timings ---
Current time: 1529615438134 milliseconds
Total Time:         555.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       216.9 seconds, 39.1%
Fitness Testing:    263.3 seconds, 47.4%
Report:              74.7 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 162
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 163
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 163
;;******************************
;; -*- Number IO problem report - generation 163
Test total error for best: 11476.5633
Test mean error for best: 5.73828
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_tan} {:instruction float_mult} {:instruction tag_float_715} {:instruction float_min} {:instruction float_mult} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction in2} {:instruction integer_dec} {:instruction in1} {:instruction float_dup_times} {:instruction float_mod} {:instruction float_sin} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction integer_dup} {:instruction integer_div} {:instruction float_dup_times} {:instruction integer_div} {:instruction in2} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_mod} {:instruction float_mult} {:instruction float_mult} {:instruction float_mod} {:instruction float_mod} {:instruction float_shove} {:instruction float_sin} {:instruction float_sin} {:instruction float_mod} {:instruction in1} {:instruction integer_swap} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction in1} {:instruction integer_sub} {:instruction float_dup} {:instruction tag_float_518} {:instruction float_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_swap} {:instruction integer_min} {:instruction float_flush} {:instruction float_stackdepth} {:instruction float_swap} {:instruction tag_integer_829} {:instruction tag_float_257} {:instruction print_integer} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction tag_float_257} {:instruction float_swap} {:instruction tag_float_78})
Best program: (float_tan float_mult tag_float_715 float_min float_mult float_min integer_dup_items float_max float_swap float_mod integer_rot integer_dup_times in2 integer_dec in1 float_dup_times float_mod float_sin float_mod in1 integer_flush float_max integer_dup integer_div float_dup_times integer_div in2 in2 float_dup_times float_dup_items float_mod float_mult float_mult float_mod float_mod float_shove float_sin float_sin float_mod in1 integer_swap float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub in1 integer_sub float_dup tag_float_518 float_mult in1 integer_fromfloat integer_add float_swap integer_min float_flush float_stackdepth float_swap tag_integer_829 tag_float_257 print_integer print_integer float_swap float_sin tag_float_257 float_swap tag_float_78)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2504.2188582000013
Median total errors in population: 281.16429999999997
Error averages by case: (92.27678819999848 11.185 95.62699910000046 11.311 68.35929359999975 11.143 83.43761329999975 10.141 97.68724810000096 11.296 89.24345000000095 11.253 94.07321559999912 11.18 95.64227699999908 11.307 92.5106967000003 11.172 90.91375000000095 11.4 84.23855219999996 11.244 90.36378319999999 11.375 93.98588319999891 11.167 85.46197280000132 11.222 92.40642589999977 11.386 85.95178250000149 10.235 69.8831997999995 11.14 92.41394799999946 10.184 85.1836445999998 10.134 96.08326829999899 11.31 95.2983368000005 11.278 90.70278749999913 11.259 97.8912753000003 11.273 75.89090560000054 10.925 91.98176090000068 11.19)
Error minima by case: (0.4247 10 0.4241 6 0.3722 2 0.1619 4 0.3687 6 0.0988 5 0.2563 4 0.276 6 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 8 0.3576 4 0.3743 10 0.2035 4 0.2941 9 0.2077 8 0.1022 7 0.4059 6 0.1968 5 0.2809 5 0.2071 6 0.3104 3 0.4029 4)
Average genome size in population (length): 67.471
Average program size in population (points): 68.471
Average percent parens in population: 0.015
Minimum age in population: 231.4324544975226
Maximum age in population: 236.1139326203184
Average age in population: 234.0859223504586
Median age in population: 234.1192927543632
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.878
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.878
Total error diversity:				 0.109
Error (vector) diversity:			 0.112
Behavioral diversity:				 0.117
--- Run Statistics ---
Number of program evaluations used so far: 164000
Number of point (instruction) evaluations so far: 317234196
--- Timings ---
Current time: 1529615441356 milliseconds
Total Time:         558.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       218.2 seconds, 39.1%
Fitness Testing:    264.7 seconds, 47.4%
Report:              75.2 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 163
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 164
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 164
;;******************************
;; -*- Number IO problem report - generation 164
Test total error for best: 11476.295100000001
Test mean error for best: 5.73815
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_times} {:instruction tag_float_715} {:instruction float_dup} {:instruction integer_pop} {:instruction tag_float_715} {:instruction integer_pop} {:instruction integer_min} {:instruction float_frominteger} {:instruction integer_rot} {:instruction in2} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_sin} {:instruction float_dup_items} {:instruction float_sub} {:instruction integer_dec} {:instruction in1} {:instruction integer_swap} {:instruction float_rot} {:instruction float_max} {:instruction print_integer} {:instruction integer_min} {:instruction in2} {:instruction float_dup_times} {:instruction float_sub} {:instruction float_mod} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_dup_times} {:instruction integer_dec} {:instruction 96.80697452437909} {:instruction float_add} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_sub} {:instruction integer_mult} {:instruction float_mult} {:instruction float_mod} {:instruction float_max} {:instruction integer_yankdup} {:instruction float_max} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup_items} {:instruction tag_float_850} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction float_mod} {:instruction float_mult} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction integer_mod} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction tag_float_257} {:instruction integer_add} {:instruction float_yank})
Best program: (integer_sub float_dup float_dup_times tag_float_715 float_dup integer_pop tag_float_715 integer_pop integer_min float_frominteger integer_rot in2 float_pop float_dup_items float_sin float_dup_items float_sub integer_dec in1 integer_swap float_rot float_max print_integer integer_min in2 float_dup_times float_sub float_mod integer_pop float_inc in1 in2 float_dup_times integer_dec 96.80697452437909 float_add float_dup_times integer_mod integer_sub integer_mult float_mult float_mod float_max integer_yankdup float_max integer_inc float_mod integer_dup_items tag_float_850 float_mod in1 float_mod in1 integer_flush float_max float_mod float_mult float_mod in1 integer_flush float_max in2 integer_mod float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add integer_sub integer_swap in1 integer_fromfloat integer_add float_flush print_integer float_swap float_sin tag_float_257 integer_add float_yank)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 82
Size: 83
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2617.8171135000007
Median total errors in population: 281.16429999999997
Error averages by case: (100.27741459999854 11.203 97.76125779999953 11.317 73.58655589999951 11.119 88.91748699999877 10.141 98.94850390000168 11.3 98.13954880000209 11.267 95.27194689999854 11.197 96.69724799999925 11.333 94.6791953000011 11.168 99.76324800000195 11.42 89.33819369999898 11.224 99.47749440000106 11.369 96.538100199999 11.207 95.31354240000144 11.231 100.86873600000067 11.428 90.39376660000141 10.226 77.49510019999956 11.156 94.78171389999954 10.239 88.05244069999901 10.171 97.30141789999917 11.323 96.64493580000135 11.291 99.47606839999915 11.264 99.1978979000003 11.29 78.72012650000072 10.918 93.18417270000064 11.189)
Error minima by case: (0.4247 9 0.4241 3 0.3722 2 0.1619 4 0.3687 3 0.0988 5 0.2563 2 0.276 3 0.1491 2 0.498 7 0.3954 4 0.3556 5 0.2337 9 0.3576 4 0.3743 10 0.2035 4 0.2941 10 0.2077 8 0.1022 9 0.4059 3 0.1968 2 0.2809 5 0.2071 3 0.3104 3 0.4029 2)
Average genome size in population (length): 66.914
Average program size in population (points): 67.914
Average percent parens in population: 0.015
Minimum age in population: 232.4324544975226
Maximum age in population: 237.744192869671
Average age in population: 235.5445468677265
Median age in population: 235.575669322284
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.895
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.895
Total error diversity:				 0.089
Error (vector) diversity:			 0.089
Behavioral diversity:				 0.093
--- Run Statistics ---
Number of program evaluations used so far: 165000
Number of point (instruction) evaluations so far: 318907987
--- Timings ---
Current time: 1529615444570 milliseconds
Total Time:         561.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       219.6 seconds, 39.1%
Fitness Testing:    266.2 seconds, 47.4%
Report:              75.7 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 164
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 165
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 165
;;******************************
;; -*- Number IO problem report - generation 165
Test total error for best: 11487.8847
Test mean error for best: 5.74394
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction integer_dup_items} {:instruction float_max} {:instruction integer_add} {:instruction in1} {:instruction print_integer} {:instruction float_max} {:instruction float_dup_times} {:instruction float_swap} {:instruction integer_div} {:instruction float_sin} {:instruction float_sin} {:instruction integer_flush} {:instruction integer_shove} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_mod} {:instruction float_mod} {:instruction float_sin} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction integer_shove} {:instruction integer_div} {:instruction in2} {:instruction integer_flush} {:instruction integer_div} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_mod} {:instruction float_mult} {:instruction float_mult} {:instruction float_mod} {:instruction float_mod} {:instruction float_shove} {:instruction float_sin} {:instruction float_sin} {:instruction float_mod} {:instruction float_mod} {:instruction float_min} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_sub} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_sub} {:instruction tagged_204} {:instruction integer_div} {:instruction float_min} {:instruction float_mult} {:instruction float_mult} {:instruction float_sin} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction tag_float_257} {:instruction float_swap} {:instruction tag_float_78})
Best program: (float_min integer_dup_items float_max integer_add in1 print_integer float_max float_dup_times float_swap integer_div float_sin float_sin integer_flush integer_shove integer_div in2 float_dup_times float_dup_items float_mod float_mod float_sin float_mod in1 integer_flush integer_shove integer_div in2 integer_flush integer_div in2 float_dup_times float_dup_items float_mod float_mult float_mult float_mod float_mod float_shove float_sin float_sin float_mod float_mod float_min float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_sub float_sub float_add integer_sub integer_swap integer_sub tagged_204 integer_div float_min float_mult float_mult float_sin float_add integer_sub integer_swap in1 integer_fromfloat integer_add float_flush print_integer float_swap float_sin tag_float_257 float_swap tag_float_78)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2492.9757713000013
Median total errors in population: 281.16429999999997
Error averages by case: (94.08193879999854 11.171 91.92118180000013 11.288 67.38133689999947 11.1 85.06447469999921 10.108 94.13582170000132 11.255 95.23025240000182 11.223 90.53643359999884 11.156 91.78300709999912 11.267 88.38728190000046 11.149 96.84075400000175 11.383 85.32803869999933 11.203 96.78085000000075 11.353 90.37317259999885 11.176 93.1915424000015 11.18 94.83654880000022 11.383 87.01744860000149 10.197 66.60561539999948 11.134 88.63475109999952 10.184 84.21603769999943 10.131 91.79967249999903 11.279 90.94582100000075 11.248 96.75078749999905 11.22 93.47990750000032 11.252 72.7541976000007 10.889 88.80989700000059 11.16)
Error minima by case: (0.4247 9 0.4241 4 0.3722 2 0.1619 4 0.3687 4 0.0988 5 0.2563 3 0.276 4 0.1491 3 0.498 6 0.3954 4 0.3556 4 0.2337 9 0.3576 3 0.3743 10 0.2035 4 0.2941 9 0.2077 8 0.1022 8 0.4059 4 0.1968 3 0.2809 5 0.2071 4 0.3104 3 0.4029 3)
Average genome size in population (length): 67.038
Average program size in population (points): 68.038
Average percent parens in population: 0.015
Minimum age in population: 234.366104987382
Maximum age in population: 238.7176756152113
Average age in population: 237.0212644873833
Median age in population: 237.0309034292213
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.889
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.889
Total error diversity:				 0.105
Error (vector) diversity:			 0.105
Behavioral diversity:				 0.107
--- Run Statistics ---
Number of program evaluations used so far: 166000
Number of point (instruction) evaluations so far: 320584939
--- Timings ---
Current time: 1529615447786 milliseconds
Total Time:         564.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       220.9 seconds, 39.1%
Fitness Testing:    267.6 seconds, 47.4%
Report:              76.1 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 165
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 166
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 166
;;******************************
;; -*- Number IO problem report - generation 166
Test total error for best: 11475.9327
Test mean error for best: 5.73797
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_frominteger} {:instruction float_mult} {:instruction float_dup_times} {:instruction float_swap} {:instruction 97.20027408926207} {:instruction integer_inc} {:instruction integer_max} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_max} {:instruction in1} {:instruction in2} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_dup_times} {:instruction float_mod} {:instruction in1} {:instruction integer_shove} {:instruction integer_shove} {:instruction in2} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_swap} {:instruction float_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_add} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction tag_float_146} {:instruction float_swap} {:instruction tag_float_78})
Best program: (integer_dec float_max float_yankdup integer_swap float_frominteger float_mult float_dup_times float_swap 97.20027408926207 integer_inc integer_max float_min integer_dup_items float_max in1 in2 float_inc in1 in2 float_dup_times float_mod in1 integer_shove integer_shove in2 float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_swap float_sub float_add integer_sub float_add in1 integer_fromfloat integer_add float_flush print_integer float_swap float_sin tag_float_146 float_swap tag_float_78)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.16429999999997
Mean: 5.623286
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 2592.146945100001
Median total errors in population: 281.16429999999997
Error averages by case: (97.10400809999864 11.188 96.05229860000014 11.339 74.60025399999937 11.136 89.32655969999976 10.156 99.36582750000106 11.318 93.24246200000097 11.274 96.10720319999895 11.187 97.04726909999918 11.332 94.33149800000034 11.19 94.92577000000098 11.434 89.85346719999988 11.256 94.97156120000001 11.395 97.93504489999894 11.202 91.33096640000142 11.245 96.79941469999986 11.413 91.01151220000139 10.25 73.75654509999954 11.136 96.15395349999952 10.215 91.0554883999996 10.138 96.67027999999914 11.327 96.83819330000074 11.291 94.93322569999911 11.298 98.59636200000028 11.302 81.96702020000075 10.942 91.00676010000053 11.2)
Error minima by case: (0.4247 9 0.4241 3 0.3722 2 0.1619 4 0.3687 3 0.0988 5 0.2563 2 0.276 3 0.1491 2 0.498 7 0.3954 4 0.3556 5 0.2337 10 0.3576 4 0.3743 10 0.2035 4 0.2941 9 0.2077 7 0.1022 8 0.4059 3 0.1968 2 0.2809 5 0.2071 3 0.3104 3 0.4029 2)
Average genome size in population (length): 67.04
Average program size in population (points): 68.04
Average percent parens in population: 0.015
Minimum age in population: 236.0489141182632
Maximum age in population: 240.2153105564834
Average age in population: 238.4680961017244
Median age in population: 238.5278239708707
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.891
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.891
Total error diversity:				 0.101
Error (vector) diversity:			 0.102
Behavioral diversity:				 0.107
--- Run Statistics ---
Number of program evaluations used so far: 167000
Number of point (instruction) evaluations so far: 322261791
--- Timings ---
Current time: 1529615450850 milliseconds
Total Time:         567.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       222.2 seconds, 39.1%
Fitness Testing:    269.0 seconds, 47.4%
Report:              76.6 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 166
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 167
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 167
;;******************************
;; -*- Number IO problem report - generation 167
Test total error for best: 11482.576699999998
Test mean error for best: 5.74129
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 102           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_swap} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_shove} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_mod} {:instruction integer_add} {:instruction integer_flush} {:instruction integer_div} {:instruction float_dup_times} {:instruction float_swap} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_swap} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_sin} {:instruction float_add} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_mult} {:instruction integer_add} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction tagged_534} {:instruction float_add} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_div} {:instruction float_sin} {:instruction float_swap} {:instruction tag_float_518} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction tag_float_257} {:instruction float_swap} {:instruction tag_float_78})
Best program: (integer_swap integer_min float_frominteger float_shove integer_dup_items in1 integer_mod integer_add integer_flush integer_div float_dup_times float_swap integer_dec float_dup_items float_swap integer_dec float_dup_items float_sin float_add float_dec in2 float_min integer_dup_times float_dup_times float_shove integer_yankdup integer_mult integer_add float_mod float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add float_mult float_mult float_cos integer_fromfloat float_mult float_mult tagged_534 float_add integer_sub float_add integer_sub integer_swap integer_div float_sin float_swap tag_float_518 in1 integer_fromfloat integer_add float_flush print_integer float_swap float_sin tag_float_257 float_swap tag_float_78)
Errors: [0.5753 11 0.4241 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.01249999999993
Mean: 5.62025
Genome size: 68
Size: 69
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2114.868920800001
Median total errors in population: 281.16429999999997
Error averages by case: (74.84522489999881 11.16 80.94109420000092 11.285 56.781692799999945 11.12 68.25762300000049 10.118 82.71224570000014 11.25 71.84351280000006 11.219 77.60681590000003 11.183 80.76381569999944 11.285 76.49857459999974 11.16 73.47919200000005 11.344 68.95218200000058 11.213 73.12798159999942 11.311 75.74173779999929 11.159 69.29627040000084 11.189 74.9758281999992 11.334 70.38190500000108 10.2 60.58590689999952 11.152 74.15180589999959 10.175 71.59949940000038 10.153 81.31739639999937 11.283 80.59091089999993 11.262 73.07218079999946 11.218 82.95988630000032 11.252 63.12201120000031 10.939 75.12762640000057 11.172)
Error minima by case: (0.5753 10 0.4241 6 0.3722 2 0.8381 4 0.3687 6 0.0988 5 0.2563 4 0.276 6 0.8509 4 0.498 7 0.3954 4 0.3556 5 0.2337 9 0.3576 4 0.6257 11 0.2035 4 0.2941 9 0.2077 8 0.1022 8 0.4059 6 0.1968 5 0.2809 5 0.7929 6 0.3104 3 0.4029 4)
Average genome size in population (length): 67.278
Average program size in population (points): 68.278
Average percent parens in population: 0.015
Minimum age in population: 237.121912085187
Maximum age in population: 241.748979598287
Average age in population: 239.8591396997953
Median age in population: 239.9352968440255
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.868
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.868
Total error diversity:				 0.09
Error (vector) diversity:			 0.091
Behavioral diversity:				 0.097
--- Run Statistics ---
Number of program evaluations used so far: 168000
Number of point (instruction) evaluations so far: 323944467
--- Timings ---
Current time: 1529615453942 milliseconds
Total Time:         571.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       223.5 seconds, 39.1%
Fitness Testing:    270.4 seconds, 47.4%
Report:              76.9 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 167
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 168
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 168
;;******************************
;; -*- Number IO problem report - generation 168
Test total error for best: 11482.576699999998
Test mean error for best: 5.74129
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 102           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_swap} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_shove} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_mod} {:instruction integer_add} {:instruction integer_flush} {:instruction integer_div} {:instruction float_dup_times} {:instruction float_swap} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_swap} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_sin} {:instruction float_add} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_mult} {:instruction integer_add} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction tagged_534} {:instruction float_add} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_div} {:instruction float_sin} {:instruction float_swap} {:instruction tag_float_518} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction tag_float_257} {:instruction float_swap} {:instruction tag_float_78})
Best program: (integer_swap integer_min float_frominteger float_shove integer_dup_items in1 integer_mod integer_add integer_flush integer_div float_dup_times float_swap integer_dec float_dup_items float_swap integer_dec float_dup_items float_sin float_add float_dec in2 float_min integer_dup_times float_dup_times float_shove integer_yankdup integer_mult integer_add float_mod float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add float_mult float_mult float_cos integer_fromfloat float_mult float_mult tagged_534 float_add integer_sub float_add integer_sub integer_swap integer_div float_sin float_swap tag_float_518 in1 integer_fromfloat integer_add float_flush print_integer float_swap float_sin tag_float_257 float_swap tag_float_78)
Errors: [0.5753 11 0.4241 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.01249999999993
Mean: 5.62025
Genome size: 68
Size: 69
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2102.114485500001
Median total errors in population: 281.16429999999997
Error averages by case: (71.09944479999902 11.16 81.13211890000004 11.297 55.28500549999991 11.118 65.3345708000006 10.116 82.57490140000104 11.243 69.82092000000038 11.225 79.7711572999991 11.191 80.95069279999949 11.279 77.67672000000051 11.156 71.18321200000032 11.353 65.51093770000065 11.222 71.78853759999984 11.328 80.4494767999991 11.161 68.96369440000089 11.193 71.28919129999969 11.352 66.17098410000096 10.213 59.255636899999516 11.134 78.93166269999956 10.166 76.15305729999962 10.131 80.4202978999994 11.281 80.0727245000008 11.263 71.65093359999958 11.233 83.02116740000031 11.262 58.81791060000015 10.936 78.60152920000054 11.175)
Error minima by case: (0.4247 10 0.4241 5 0.3722 3 0.1619 4 0.3687 5 0.0988 5 0.2563 4 0.276 5 0.1491 4 0.498 6 0.3954 4 0.3556 4 0.2337 9 0.3576 4 0.3743 11 0.2035 4 0.2941 9 0.2077 9 0.1022 8 0.4059 5 0.1968 4 0.2809 5 0.2071 5 0.3104 4 0.4029 4)
Average genome size in population (length): 67.308
Average program size in population (points): 68.308
Average percent parens in population: 0.015
Minimum age in population: 238.4756746295781
Maximum age in population: 243.3172660571181
Average age in population: 241.2702051768765
Median age in population: 241.2864871830419
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.858
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.858
Total error diversity:				 0.093
Error (vector) diversity:			 0.094
Behavioral diversity:				 0.099
--- Run Statistics ---
Number of program evaluations used so far: 169000
Number of point (instruction) evaluations so far: 325628096
--- Timings ---
Current time: 1529615457163 milliseconds
Total Time:         574.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       224.8 seconds, 39.2%
Fitness Testing:    271.9 seconds, 47.4%
Report:              77.3 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 168
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 169
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 169
;;******************************
;; -*- Number IO problem report - generation 169
Test total error for best: 11482.576699999998
Test mean error for best: 5.74129
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 102           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_swap} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_shove} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_mod} {:instruction integer_add} {:instruction integer_flush} {:instruction integer_div} {:instruction float_dup_times} {:instruction float_swap} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_swap} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_sin} {:instruction float_add} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_mult} {:instruction integer_add} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction tagged_534} {:instruction float_add} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_div} {:instruction float_sin} {:instruction float_swap} {:instruction tag_float_518} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction tag_float_257} {:instruction float_swap} {:instruction tag_float_78})
Best program: (integer_swap integer_min float_frominteger float_shove integer_dup_items in1 integer_mod integer_add integer_flush integer_div float_dup_times float_swap integer_dec float_dup_items float_swap integer_dec float_dup_items float_sin float_add float_dec in2 float_min integer_dup_times float_dup_times float_shove integer_yankdup integer_mult integer_add float_mod float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add float_mult float_mult float_cos integer_fromfloat float_mult float_mult tagged_534 float_add integer_sub float_add integer_sub integer_swap integer_div float_sin float_swap tag_float_518 in1 integer_fromfloat integer_add float_flush print_integer float_swap float_sin tag_float_257 float_swap tag_float_78)
Errors: [0.5753 11 0.4241 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.01249999999993
Mean: 5.62025
Genome size: 68
Size: 69
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2417.356547200002
Median total errors in population: 281.16429999999997
Error averages by case: (90.85689659999846 11.176 89.77533059999978 11.274 72.05765389999937 11.084 83.20723169999887 10.11 91.53223360000167 11.258 88.28514160000192 11.215 86.47018919999843 11.17 89.65662719999911 11.274 85.97717800000096 11.151 89.76723600000179 11.352 83.58656149999908 11.181 89.47322720000088 11.307 86.47413899999886 11.164 86.7066152000015 11.185 90.6678226000005 11.358 84.43884860000149 10.18 62.63674719999951 11.127 85.21873519999949 10.186 81.3906258999993 10.126 90.17983059999904 11.28 89.48947830000122 11.253 89.37743919999912 11.213 91.70116560000032 11.236 77.27010990000073 10.921 85.22548280000065 11.153)
Error minima by case: (0.5753 11 0.4241 3 0.3722 1 0.8381 2 0.3687 3 0.0988 2 0.2563 2 0.276 3 0.1491 2 0.498 3 0.3954 2 0.3556 2 0.2337 9 0.3576 1 0.6257 11 0.2035 2 0.2941 9 0.2077 8 0.1022 8 0.4059 3 0.1968 2 0.2809 2 0.2071 3 0.3104 2 0.4029 2)
Average genome size in population (length): 66.634
Average program size in population (points): 67.634
Average percent parens in population: 0.015
Minimum age in population: 240.1276298401531
Maximum age in population: 244.8691052696636
Average age in population: 242.6911002454821
Median age in population: 242.7485020524873
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.865
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.865
Total error diversity:				 0.09
Error (vector) diversity:			 0.092
Behavioral diversity:				 0.098
--- Run Statistics ---
Number of program evaluations used so far: 170000
Number of point (instruction) evaluations so far: 327294736
--- Timings ---
Current time: 1529615460359 milliseconds
Total Time:         577.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       226.2 seconds, 39.2%
Fitness Testing:    273.3 seconds, 47.3%
Report:              77.7 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 169
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 170
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 170
;;******************************
;; -*- Number IO problem report - generation 170
Test total error for best: 11482.576699999998
Test mean error for best: 5.74129
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 102           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_swap} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_shove} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_mod} {:instruction integer_add} {:instruction integer_flush} {:instruction integer_div} {:instruction float_dup_times} {:instruction float_swap} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_swap} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_sin} {:instruction float_add} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_mult} {:instruction integer_add} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction tagged_534} {:instruction float_add} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_div} {:instruction float_sin} {:instruction float_swap} {:instruction tag_float_518} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction tag_float_257} {:instruction float_swap} {:instruction tag_float_78})
Best program: (integer_swap integer_min float_frominteger float_shove integer_dup_items in1 integer_mod integer_add integer_flush integer_div float_dup_times float_swap integer_dec float_dup_items float_swap integer_dec float_dup_items float_sin float_add float_dec in2 float_min integer_dup_times float_dup_times float_shove integer_yankdup integer_mult integer_add float_mod float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add float_mult float_mult float_cos integer_fromfloat float_mult float_mult tagged_534 float_add integer_sub float_add integer_sub integer_swap integer_div float_sin float_swap tag_float_518 in1 integer_fromfloat integer_add float_flush print_integer float_swap float_sin tag_float_257 float_swap tag_float_78)
Errors: [0.5753 11 0.4241 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.01249999999993
Mean: 5.62025
Genome size: 68
Size: 69
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2396.411127800001
Median total errors in population: 281.16429999999997
Error averages by case: (81.33296529999859 11.182 95.26934499999959 11.348 67.07814969999946 11.128 77.19353809999913 10.14 94.86363410000179 11.307 82.30424300000146 11.283 89.4570417999983 11.22 92.05578139999909 11.326 88.19680430000103 11.184 84.53226610000148 11.437 77.67081309999926 11.251 83.84067150000033 11.385 91.97064429999887 11.207 79.92788900000147 11.248 81.37539850000007 11.424 78.18382380000145 10.246 72.33955229999948 11.142 90.74803779999948 10.221 87.82521039999895 10.144 92.03158379999901 11.342 91.2207342000014 11.299 84.01298139999906 11.286 95.15940300000032 11.31 73.60527030000063 10.941 87.01534560000057 11.199)
Error minima by case: (0.4247 7 0.4241 3 0.3722 3 0.1619 4 0.3687 3 0.0988 5 0.2563 2 0.276 3 0.1491 2 0.498 6 0.3954 4 0.3556 4 0.2337 10 0.3576 4 0.3743 10 0.2035 4 0.2941 9 0.2077 9 0.1022 8 0.4059 3 0.1968 2 0.2809 5 0.2071 3 0.3104 4 0.4029 2)
Average genome size in population (length): 66.001
Average program size in population (points): 67.001
Average percent parens in population: 0.015
Minimum age in population: 241.2677566919709
Maximum age in population: 246.1625421544234
Average age in population: 244.0967442928576
Median age in population: 244.1795399667178
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.867
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.867
Total error diversity:				 0.102
Error (vector) diversity:			 0.103
Behavioral diversity:				 0.108
--- Run Statistics ---
Number of program evaluations used so far: 171000
Number of point (instruction) evaluations so far: 328946077
--- Timings ---
Current time: 1529615463525 milliseconds
Total Time:         580.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       227.5 seconds, 39.2%
Fitness Testing:    274.7 seconds, 47.3%
Report:              78.2 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 170
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 171
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 171
;;******************************
;; -*- Number IO problem report - generation 171
Test total error for best: 11482.576699999998
Test mean error for best: 5.74129
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 102           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_swap} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_shove} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_mod} {:instruction integer_add} {:instruction integer_flush} {:instruction integer_div} {:instruction float_dup_times} {:instruction float_swap} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_swap} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_sin} {:instruction float_add} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_mult} {:instruction integer_add} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction tagged_534} {:instruction float_add} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_div} {:instruction float_sin} {:instruction float_swap} {:instruction tag_float_518} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction tag_float_257} {:instruction float_swap} {:instruction tag_float_78})
Best program: (integer_swap integer_min float_frominteger float_shove integer_dup_items in1 integer_mod integer_add integer_flush integer_div float_dup_times float_swap integer_dec float_dup_items float_swap integer_dec float_dup_items float_sin float_add float_dec in2 float_min integer_dup_times float_dup_times float_shove integer_yankdup integer_mult integer_add float_mod float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add float_mult float_mult float_cos integer_fromfloat float_mult float_mult tagged_534 float_add integer_sub float_add integer_sub integer_swap integer_div float_sin float_swap tag_float_518 in1 integer_fromfloat integer_add float_flush print_integer float_swap float_sin tag_float_257 float_swap tag_float_78)
Errors: [0.5753 11 0.4241 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.01249999999993
Mean: 5.62025
Genome size: 68
Size: 69
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2086.8835097000006
Median total errors in population: 281.16429999999997
Error averages by case: (73.1265682999985 11.16 77.62152800000038 11.298 60.800948399999356 11.11 68.36559440000043 10.123 79.0142038000008 11.276 70.98682120000058 11.22 76.10481039999954 11.197 76.90401839999907 11.296 74.21309149999965 11.166 72.6317020000005 11.352 68.49880960000056 11.221 71.92767119999944 11.316 76.37313999999883 11.169 69.38912480000137 11.192 73.40093989999932 11.346 68.89468400000143 10.215 63.225722999999554 11.149 74.82501629999958 10.176 73.45461050000002 10.148 76.34556729999899 11.301 76.69964259999996 11.267 72.25896729999904 11.232 78.09163760000031 11.263 64.66021760000073 10.934 72.76047160000057 11.181)
Error minima by case: (0.4247 10 0.4241 6 0.3722 2 0.1619 4 0.3687 6 0.0988 5 0.2563 4 0.276 6 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 10 0.3576 4 0.3743 10 0.2035 4 0.2941 9 0.2077 9 0.1022 8 0.4059 6 0.1968 5 0.2809 5 0.2071 6 0.3104 3 0.4029 4)
Average genome size in population (length): 65.78
Average program size in population (points): 66.78
Average percent parens in population: 0.015
Minimum age in population: 242.7412636527271
Maximum age in population: 247.4481085208238
Average age in population: 245.5709875588235
Median age in population: 245.5954451351227
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 33
Genome diversity (% unique Plush genomes):	 0.849
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.849
Total error diversity:				 0.103
Error (vector) diversity:			 0.106
Behavioral diversity:				 0.111
--- Run Statistics ---
Number of program evaluations used so far: 172000
Number of point (instruction) evaluations so far: 330591706
--- Timings ---
Current time: 1529615466609 milliseconds
Total Time:         583.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       228.8 seconds, 39.2%
Fitness Testing:    276.2 seconds, 47.3%
Report:              78.5 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 171
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 172
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 172
;;******************************
;; -*- Number IO problem report - generation 172
Test total error for best: 11482.576699999998
Test mean error for best: 5.74129
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 102           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_swap} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_shove} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_mod} {:instruction integer_add} {:instruction integer_flush} {:instruction integer_div} {:instruction float_dup_times} {:instruction float_swap} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_swap} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_sin} {:instruction float_add} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_mult} {:instruction integer_add} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction tagged_534} {:instruction float_add} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_div} {:instruction float_sin} {:instruction float_swap} {:instruction float_add} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_div} {:instruction float_sin} {:instruction float_swap} {:instruction tag_float_518} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction tag_float_257} {:instruction float_swap} {:instruction tag_float_78})
Best program: (integer_swap integer_min float_frominteger float_shove integer_dup_items in1 integer_mod integer_add integer_flush integer_div float_dup_times float_swap integer_dec float_dup_items float_swap integer_dec float_dup_items float_sin float_add float_dec in2 float_min integer_dup_times float_dup_times float_shove integer_yankdup integer_mult integer_add float_mod float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add float_mult float_mult float_cos integer_fromfloat float_mult float_mult tagged_534 float_add integer_sub float_add integer_sub integer_swap integer_div float_sin float_swap float_add integer_sub float_add integer_sub integer_swap integer_div float_sin float_swap tag_float_518 in1 integer_fromfloat integer_add float_flush print_integer float_swap float_sin tag_float_257 float_swap tag_float_78)
Errors: [0.5753 11 0.4241 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.01249999999993
Mean: 5.62025
Genome size: 76
Size: 77
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2199.2785023000006
Median total errors in population: 281.16429999999997
Error averages by case: (74.68539059999853 11.175 86.64693170000014 11.361 60.14793709999938 11.124 69.73580230000022 10.132 83.46117330000092 11.303 73.16593200000061 11.242 79.17729009999958 11.244 81.14214179999918 11.322 78.30219109999976 11.2 74.7832320000005 11.382 70.17640450000039 11.239 74.81138239999963 11.342 90.64247049999886 11.2 71.29483360000137 11.212 75.23180579999932 11.37 71.11650070000142 10.235 72.25598789999951 11.145 88.83579109999951 10.201 87.51164349999945 10.142 80.3060825999991 11.341 80.77604730000043 11.312 74.77868639999916 11.245 82.49589630000031 11.317 64.36106170000069 10.947 76.49588600000061 11.207)
Error minima by case: (0.4247 10 0.4241 5 0.3722 4 0.1619 4 0.3687 5 0.0988 5 0.2563 4 0.276 5 0.1491 4 0.498 5 0.3954 4 0.3556 3 0.2337 9 0.3576 4 0.3743 11 0.2035 4 0.2941 8 0.2077 8 0.1022 7 0.4059 5 0.1968 5 0.2809 4 0.2071 5 0.3104 4 0.4029 4)
Average genome size in population (length): 67.02
Average program size in population (points): 68.02
Average percent parens in population: 0.015
Minimum age in population: 244.1676133091397
Maximum age in population: 249.2554561501789
Average age in population: 246.9062744783598
Median age in population: 246.9466951301133
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 70
Genome diversity (% unique Plush genomes):	 0.794
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 70
Syntactic diversity (% unique Push programs):	 0.794
Total error diversity:				 0.118
Error (vector) diversity:			 0.121
Behavioral diversity:				 0.125
--- Run Statistics ---
Number of program evaluations used so far: 173000
Number of point (instruction) evaluations so far: 332268045
--- Timings ---
Current time: 1529615469731 milliseconds
Total Time:         586.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       230.1 seconds, 39.2%
Fitness Testing:    277.6 seconds, 47.3%
Report:              78.9 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 172
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 173
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 173
;;******************************
;; -*- Number IO problem report - generation 173
Test total error for best: 11482.576699999998
Test mean error for best: 5.74129
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 102           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_swap} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_shove} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_mod} {:instruction integer_add} {:instruction integer_flush} {:instruction integer_div} {:instruction float_dup_times} {:instruction float_swap} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_swap} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_sin} {:instruction float_add} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_mult} {:instruction integer_add} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction tagged_534} {:instruction float_add} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_div} {:instruction float_sin} {:instruction float_swap} {:instruction tag_float_518} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction tag_float_257} {:instruction float_swap} {:instruction tag_float_78})
Best program: (integer_swap integer_min float_frominteger float_shove integer_dup_items in1 integer_mod integer_add integer_flush integer_div float_dup_times float_swap integer_dec float_dup_items float_swap integer_dec float_dup_items float_sin float_add float_dec in2 float_min integer_dup_times float_dup_times float_shove integer_yankdup integer_mult integer_add float_mod float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add float_mult float_mult float_cos integer_fromfloat float_mult float_mult tagged_534 float_add integer_sub float_add integer_sub integer_swap integer_div float_sin float_swap tag_float_518 in1 integer_fromfloat integer_add float_flush print_integer float_swap float_sin tag_float_257 float_swap tag_float_78)
Errors: [0.5753 11 0.4241 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.01249999999993
Mean: 5.62025
Genome size: 68
Size: 69
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 1726.4136872
Median total errors in population: 281.01249999999993
Error averages by case: (57.17029419999924 11.147 64.64762149999973 11.344 41.877311999999854 11.112 49.93595070000052 10.094 64.02051959999955 11.283 53.680315199999804 11.19 57.66975800000042 11.248 61.2952366999996 11.298 55.92463969999945 11.187 55.42319599999966 11.316 50.23972780000062 11.214 55.48191479999931 11.313 77.63006299999901 11.183 51.67091280000071 11.155 57.46131419999915 11.342 51.078122500000745 10.193 64.2350287999996 11.14 75.61374439999962 10.19 75.83674429999958 10.126 57.56123169999957 11.342 60.39993199999951 11.319 55.747304399999614 11.202 59.538341300000326 11.314 46.108354000000205 10.904 49.82810760000046 11.182)
Error minima by case: (0.4247 9 0.4241 3 0.3722 1 0.1619 2 0.3687 3 0.0988 2 0.2563 2 0.276 3 0.1491 2 0.498 3 0.3954 2 0.3556 2 0.2337 9 0.3576 1 0.3743 11 0.2035 2 0.2941 10 0.2077 9 0.1022 8 0.4059 3 0.1968 2 0.2809 2 0.2071 3 0.3104 2 0.4029 2)
Average genome size in population (length): 68.276
Average program size in population (points): 69.276
Average percent parens in population: 0.015
Minimum age in population: 245.1676133091397
Maximum age in population: 250.5080595657351
Average age in population: 248.1896566348107
Median age in population: 248.2684922670709
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 81
Genome diversity (% unique Plush genomes):	 0.747
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 81
Syntactic diversity (% unique Push programs):	 0.747
Total error diversity:				 0.125
Error (vector) diversity:			 0.13
Behavioral diversity:				 0.131
--- Run Statistics ---
Number of program evaluations used so far: 174000
Number of point (instruction) evaluations so far: 333975144
--- Timings ---
Current time: 1529615472867 milliseconds
Total Time:         589.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       231.4 seconds, 39.2%
Fitness Testing:    279.0 seconds, 47.3%
Report:              79.3 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 173
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 174
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 174
;;******************************
;; -*- Number IO problem report - generation 174
Test total error for best: 11482.576699999998
Test mean error for best: 5.74129
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 102           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 55            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_swap} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_shove} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_mod} {:instruction integer_add} {:instruction integer_flush} {:instruction integer_div} {:instruction float_dup_times} {:instruction float_swap} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_swap} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_sin} {:instruction float_add} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_mult} {:instruction integer_add} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction tagged_534} {:instruction float_add} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_div} {:instruction float_sin} {:instruction float_swap} {:instruction tag_float_518} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction tag_float_257} {:instruction float_swap} {:instruction tag_float_78})
Best program: (integer_swap integer_min float_frominteger float_shove integer_dup_items in1 integer_mod integer_add integer_flush integer_div float_dup_times float_swap integer_dec float_dup_items float_swap integer_dec float_dup_items float_sin float_add float_dec in2 float_min integer_dup_times float_dup_times float_shove integer_yankdup integer_mult integer_add float_mod float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add float_mult float_mult float_cos integer_fromfloat float_mult float_mult tagged_534 float_add integer_sub float_add integer_sub integer_swap integer_div float_sin float_swap tag_float_518 in1 integer_fromfloat integer_add float_flush print_integer float_swap float_sin tag_float_257 float_swap tag_float_78)
Errors: [0.5753 11 0.4241 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.8509 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 281.01249999999993
Mean: 5.62025
Genome size: 68
Size: 69
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 1660.1862062999996
Median total errors in population: 281.01249999999993
Error averages by case: (51.836884599999436 11.149 69.63181109999952 11.366 38.52531600000034 11.088 44.19707040000047 10.079 60.180290599999545 11.277 47.485797199999816 11.18 56.06053230000036 11.272 57.27416729999968 11.321 53.69663259999953 11.197 50.08915999999967 11.33 44.58199360000053 11.217 50.17435879999955 11.301 83.94572159999893 11.2 46.61299200000036 11.114 50.60504599999946 11.383 45.82313700000047 10.211 59.13396249999953 11.179 81.78730189999952 10.22 81.83353759999964 10.142 54.226046399999625 11.365 57.791191799999666 11.329 50.58111339999986 11.186 56.2243951000003 11.336 44.58080160000002 10.873 46.798944900000414 11.193)
Error minima by case: (0.4247 10 0.4241 4 0.3722 2 0.1619 3 0.3687 4 0.0988 3 0.2563 3 0.276 4 0.1491 3 0.498 4 0.3954 3 0.3556 3 0.2337 10 0.3576 2 0.3743 11 0.2035 3 0.2941 10 0.2077 9 0.1022 8 0.4059 4 0.1968 3 0.2809 3 0.2071 4 0.3104 3 0.4029 3)
Average genome size in population (length): 68.962
Average program size in population (points): 69.962
Average percent parens in population: 0.014
Minimum age in population: 246.1676133091397
Maximum age in population: 251.7543525011178
Average age in population: 249.5614674630649
Median age in population: 249.5703922774946
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 52
Genome diversity (% unique Plush genomes):	 0.788
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 52
Syntactic diversity (% unique Push programs):	 0.788
Total error diversity:				 0.126
Error (vector) diversity:			 0.13
Behavioral diversity:				 0.13
--- Run Statistics ---
Number of program evaluations used so far: 175000
Number of point (instruction) evaluations so far: 335699528
--- Timings ---
Current time: 1529615476012 milliseconds
Total Time:         593.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       232.7 seconds, 39.2%
Fitness Testing:    280.4 seconds, 47.3%
Report:              79.7 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 174
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 175
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 175
;;******************************
;; -*- Number IO problem report - generation 175
Test total error for best: 11476.9207
Test mean error for best: 5.73846
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 56            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_dec} {:instruction print_float} {:instruction float_inc} {:instruction 96.80697452437909} {:instruction float_flush} {:instruction float_yankdup} {:instruction tag_float_715} {:instruction integer_swap} {:instruction integer_inc} {:instruction float_frominteger} {:instruction float_flush} {:instruction integer_dup_items} {:instruction float_max} {:instruction float_mod} {:instruction in1} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_add} {:instruction float_dup_items} {:instruction float_tan} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_sin} {:instruction float_add} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_mult} {:instruction integer_add} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction tagged_534} {:instruction float_add} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_div} {:instruction in1} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction integer_shove} {:instruction float_sin} {:instruction tag_float_257} {:instruction float_swap})
Best program: (integer_pop integer_dec print_float float_inc 96.80697452437909 float_flush float_yankdup tag_float_715 integer_swap integer_inc float_frominteger float_flush integer_dup_items float_max float_mod in1 float_dup_items integer_dup_times float_add float_dup_items float_tan integer_dec float_dup_items float_sin float_add float_dec in2 float_min integer_dup_times float_dup_times float_shove integer_yankdup integer_mult integer_add float_mod float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add float_mult float_mult float_cos integer_fromfloat float_mult float_mult tagged_534 float_add integer_sub float_add integer_sub integer_swap integer_div in1 in1 integer_fromfloat integer_add float_flush print_integer integer_shove float_sin tag_float_257 float_swap)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.1491 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 280.4625
Mean: 5.60925
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 1522.2506748
Median total errors in population: 281.01249999999993
Error averages by case: (47.56775489999926 11.107 63.46153379999946 11.305 33.44965540000045 11.094 40.953646100000554 10.089 52.21210229999952 11.252 45.18161159999982 11.165 49.05156680000046 11.217 49.56116479999972 11.271 46.93897589999954 11.157 47.421689999999685 11.277 41.1722381000006 11.179 46.5436259999994 11.268 74.86778939999904 11.171 44.56234320000061 11.143 46.70314949999933 11.292 41.504608100000354 10.168 54.211802099999595 11.182 73.30646349999964 10.18 72.4721786999999 10.174 48.72627079999972 11.302 50.0262082999995 11.274 46.58502349999976 11.178 50.1078536000003 11.283 37.96442559999977 10.919 41.881992800000496 11.168)
Error minima by case: (0.5753 9 0.4241 6 0.3722 2 0.8381 4 0.3687 6 0.0988 5 0.2563 4 0.276 6 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 10 0.3576 4 0.6257 11 0.2035 4 0.2941 10 0.2077 9 0.1022 8 0.4059 6 0.1968 5 0.2809 5 0.2071 6 0.3104 3 0.4029 4)
Average genome size in population (length): 69.003
Average program size in population (points): 70.003
Average percent parens in population: 0.014
Minimum age in population: 248.2054867783065
Maximum age in population: 252.8717774958556
Average age in population: 250.952858576033
Median age in population: 250.9927118794556
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 44
Genome diversity (% unique Plush genomes):	 0.82
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 44
Syntactic diversity (% unique Push programs):	 0.82
Total error diversity:				 0.111
Error (vector) diversity:			 0.114
Behavioral diversity:				 0.114
--- Run Statistics ---
Number of program evaluations used so far: 176000
Number of point (instruction) evaluations so far: 337424927
--- Timings ---
Current time: 1529615479111 milliseconds
Total Time:         596.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       234.0 seconds, 39.3%
Fitness Testing:    281.8 seconds, 47.3%
Report:              80.1 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 175
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 176
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 176
;;******************************
;; -*- Number IO problem report - generation 176
Test total error for best: 11476.9207
Test mean error for best: 5.73846
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 56            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_swap} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_shove} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_mod} {:instruction integer_add} {:instruction integer_flush} {:instruction integer_div} {:instruction float_dup_times} {:instruction float_swap} {:instruction float_dup_times} {:instruction float_swap} {:instruction integer_max} {:instruction float_dup_items} {:instruction float_swap} {:instruction float_tan} {:instruction float_dup_items} {:instruction float_sin} {:instruction float_add} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_mult} {:instruction integer_add} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_dup} {:instruction float_mult} {:instruction tagged_534} {:instruction float_add} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_div} {:instruction float_sin} {:instruction float_swap} {:instruction tag_float_518} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction tag_float_32})
Best program: (integer_swap integer_min float_frominteger float_shove integer_dup_items in1 integer_mod integer_add integer_flush integer_div float_dup_times float_swap float_dup_times float_swap integer_max float_dup_items float_swap float_tan float_dup_items float_sin float_add float_dec in2 float_min integer_dup_times float_dup_times float_shove integer_yankdup integer_sub integer_yankdup integer_mult integer_add float_mod float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add float_mult float_mult float_cos integer_fromfloat float_dup float_mult tagged_534 float_add integer_sub float_add integer_sub integer_swap integer_div float_sin float_swap tag_float_518 in1 integer_fromfloat integer_add float_flush print_integer float_swap float_sin tag_float_32)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.1491 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 280.4625
Mean: 5.60925
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 1970.0847165000005
Median total errors in population: 281.01249999999993
Error averages by case: (65.76161049999861 11.16 75.77068779999946 11.363 48.27571060000024 11.075 56.43755610000061 10.068 73.4805137000001 11.274 63.22094399999979 11.182 69.67628590000031 11.231 71.05942239999912 11.277 67.01185309999916 11.164 64.98423999999964 11.333 56.811807400000845 11.211 65.37209359999883 11.305 90.31370059999865 11.193 60.914045600001316 11.136 66.15204039999865 11.397 57.876933500001165 10.201 76.13568259999946 11.139 88.35905529999943 10.211 88.67241909999947 10.141 67.16492249999928 11.343 70.88816409999961 11.311 65.32012459999925 11.202 69.84389630000032 11.319 52.413628800000225 10.868 61.88737800000074 11.176)
Error minima by case: (0.4247 10 0.4241 5 0.3722 2 0.1619 4 0.3687 5 0.0988 5 0.2563 4 0.276 5 0.1491 4 0.498 6 0.3954 4 0.3556 5 0.2337 10 0.3576 3 0.3743 11 0.2035 4 0.2941 10 0.2077 8 0.1022 8 0.4059 5 0.1968 4 0.2809 5 0.2071 5 0.3104 3 0.4029 4)
Average genome size in population (length): 69.154
Average program size in population (points): 70.154
Average percent parens in population: 0.014
Minimum age in population: 249.6033022423426
Maximum age in population: 254.6796709636176
Average age in population: 252.3792562624611
Median age in population: 252.4219557627227
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.84
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.84
Total error diversity:				 0.111
Error (vector) diversity:			 0.118
Behavioral diversity:				 0.119
--- Run Statistics ---
Number of program evaluations used so far: 177000
Number of point (instruction) evaluations so far: 339154157
--- Timings ---
Current time: 1529615482246 milliseconds
Total Time:         599.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       235.3 seconds, 39.3%
Fitness Testing:    283.3 seconds, 47.3%
Report:              80.5 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 176
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 177
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 177
;;******************************
;; -*- Number IO problem report - generation 177
Test total error for best: 11476.9207
Test mean error for best: 5.73846
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 56            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_swap} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_shove} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_mod} {:instruction integer_add} {:instruction integer_flush} {:instruction integer_div} {:instruction float_dup_times} {:instruction float_swap} {:instruction float_dup_times} {:instruction float_swap} {:instruction integer_max} {:instruction float_dup_items} {:instruction float_swap} {:instruction float_tan} {:instruction float_dup_items} {:instruction float_sin} {:instruction float_add} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_mult} {:instruction integer_add} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_dup} {:instruction float_mult} {:instruction tagged_534} {:instruction float_add} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_div} {:instruction float_sin} {:instruction float_swap} {:instruction tag_float_518} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction tag_float_32})
Best program: (integer_swap integer_min float_frominteger float_shove integer_dup_items in1 integer_mod integer_add integer_flush integer_div float_dup_times float_swap float_dup_times float_swap integer_max float_dup_items float_swap float_tan float_dup_items float_sin float_add float_dec in2 float_min integer_dup_times float_dup_times float_shove integer_yankdup integer_sub integer_yankdup integer_mult integer_add float_mod float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add float_mult float_mult float_cos integer_fromfloat float_dup float_mult tagged_534 float_add integer_sub float_add integer_sub integer_swap integer_div float_sin float_swap tag_float_518 in1 integer_fromfloat integer_add float_flush print_integer float_swap float_sin tag_float_32)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.1491 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 280.4625
Mean: 5.60925
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 1743.7391091000004
Median total errors in population: 281.01249999999993
Error averages by case: (56.35292369999905 11.143 73.5021933999997 11.275 40.05696880000027 11.046 45.42992500000055 10.068 61.38399329999951 11.231 55.928512799999794 11.148 59.2713881000005 11.173 59.09710859999952 11.243 57.7557162999993 11.124 57.57218799999965 11.281 45.642397400000654 11.149 57.496403999999 11.244 82.581965799999 11.172 55.07098560000101 11.111 56.15857679999899 11.331 46.387354000000656 10.139 66.84105359999955 11.165 81.9165227999996 10.203 82.25095669999978 10.175 56.121548199999445 11.281 59.69154639999937 11.259 57.43161899999942 11.156 59.479295500000305 11.265 43.41525219999993 10.884 51.50371310000049 11.133)
Error minima by case: (0.4247 9 0.4241 5 0.3722 2 0.1619 4 0.3687 5 0.0988 5 0.2563 3 0.276 4 0.1491 4 0.498 6 0.3954 4 0.3556 4 0.2337 10 0.3576 4 0.3743 11 0.2035 4 0.2941 9 0.2077 9 0.1022 8 0.4059 5 0.1968 4 0.2809 5 0.2071 5 0.3104 3 0.4029 4)
Average genome size in population (length): 69.379
Average program size in population (points): 70.379
Average percent parens in population: 0.014
Minimum age in population: 250.8768583289266
Maximum age in population: 255.8845536343585
Average age in population: 253.8531713893259
Median age in population: 253.872272850431
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.842
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.842
Total error diversity:				 0.116
Error (vector) diversity:			 0.118
Behavioral diversity:				 0.121
--- Run Statistics ---
Number of program evaluations used so far: 178000
Number of point (instruction) evaluations so far: 340889157
--- Timings ---
Current time: 1529615485380 milliseconds
Total Time:         602.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       236.6 seconds, 39.3%
Fitness Testing:    284.7 seconds, 47.3%
Report:              80.9 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 177
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 178
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 178
;;******************************
;; -*- Number IO problem report - generation 178
Test total error for best: 11476.9207
Test mean error for best: 5.73846
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 56            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_swap} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_shove} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_mod} {:instruction integer_add} {:instruction integer_flush} {:instruction integer_div} {:instruction float_dup_times} {:instruction float_swap} {:instruction float_dup_times} {:instruction float_swap} {:instruction integer_max} {:instruction float_dup_items} {:instruction float_swap} {:instruction float_tan} {:instruction float_dup_items} {:instruction float_sin} {:instruction float_add} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_mult} {:instruction integer_add} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction tagged_534} {:instruction float_add} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_div} {:instruction float_sin} {:instruction float_swap} {:instruction tag_float_518} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction tag_float_257} {:instruction float_swap})
Best program: (integer_swap integer_min float_frominteger float_shove integer_dup_items in1 integer_mod integer_add integer_flush integer_div float_dup_times float_swap float_dup_times float_swap integer_max float_dup_items float_swap float_tan float_dup_items float_sin float_add float_dec in2 float_min integer_dup_times float_dup_times float_shove integer_yankdup integer_sub integer_yankdup integer_mult integer_add float_mod float_mod in1 integer_flush float_max in2 float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add float_mult float_mult float_cos integer_fromfloat float_mult float_mult tagged_534 float_add integer_sub float_add integer_sub integer_swap integer_div float_sin float_swap tag_float_518 in1 integer_fromfloat integer_add float_flush print_integer float_swap float_sin tag_float_257 float_swap)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.1491 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 280.4625
Mean: 5.60925
Genome size: 76
Size: 77
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 1921.1921043000002
Median total errors in population: 281.01249999999993
Error averages by case: (59.364486999998945 11.164 81.24195500000008 11.42 45.61877959999973 11.119 49.286551900000525 10.118 77.65711990000082 11.323 56.01771039999982 11.219 74.74952169999933 11.3 74.30278639999923 11.341 73.41613609999986 11.227 57.44719199999969 11.366 49.60491630000061 11.241 58.42369279999907 11.332 91.600079699999 11.209 54.420985600001046 11.173 58.130677299998965 11.387 50.565997300000845 10.227 72.20895579999956 11.179 89.6004840999996 10.222 89.58535829999909 10.174 67.50475259999929 11.392 76.39185770000037 11.36 58.331180799999416 11.226 69.31696370000029 11.371 50.255676000000356 10.913 58.93728630000051 11.208)
Error minima by case: (0.4247 9 0.4241 3 0.3722 1 0.1619 2 0.3687 3 0.0988 2 0.2563 2 0.276 3 0.1491 2 0.498 3 0.3954 2 0.3556 2 0.2337 9 0.3576 1 0.3743 11 0.2035 2 0.2941 10 0.2077 9 0.1022 8 0.4059 3 0.1968 2 0.2809 2 0.2071 3 0.3104 2 0.4029 2)
Average genome size in population (length): 69.446
Average program size in population (points): 70.446
Average percent parens in population: 0.014
Minimum age in population: 252.7531042859345
Maximum age in population: 257.1635286434214
Average age in population: 255.2821423165493
Median age in population: 255.3396039176108
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.883
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.883
Total error diversity:				 0.136
Error (vector) diversity:			 0.144
Behavioral diversity:				 0.146
--- Run Statistics ---
Number of program evaluations used so far: 179000
Number of point (instruction) evaluations so far: 342626135
--- Timings ---
Current time: 1529615488666 milliseconds
Total Time:         605.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       237.9 seconds, 39.3%
Fitness Testing:    286.2 seconds, 47.3%
Report:              81.3 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 178
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 179
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 179
;;******************************
;; -*- Number IO problem report - generation 179
Test total error for best: 11476.9207
Test mean error for best: 5.73846
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 56            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_dec} {:instruction print_float} {:instruction float_inc} {:instruction 96.80697452437909} {:instruction float_flush} {:instruction float_yankdup} {:instruction tag_float_715} {:instruction integer_swap} {:instruction integer_inc} {:instruction float_frominteger} {:instruction float_flush} {:instruction integer_dup_items} {:instruction float_max} {:instruction integer_sub} {:instruction in1} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_add} {:instruction float_dup_items} {:instruction float_tan} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_sin} {:instruction float_add} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_mult} {:instruction integer_add} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction tagged_534} {:instruction float_add} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_div} {:instruction in1} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction integer_shove} {:instruction float_sin} {:instruction tag_float_257} {:instruction float_swap})
Best program: (integer_pop integer_dec print_float float_inc 96.80697452437909 float_flush float_yankdup tag_float_715 integer_swap integer_inc float_frominteger float_flush integer_dup_items float_max integer_sub in1 float_dup_items integer_dup_times float_add float_dup_items float_tan integer_dec float_dup_items float_sin float_add float_dec in2 float_min integer_dup_times float_dup_times float_shove integer_yankdup integer_mult integer_add float_mod float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add float_mult float_mult float_cos integer_fromfloat float_mult float_mult tagged_534 float_add integer_sub float_add integer_sub integer_swap integer_div in1 in1 integer_fromfloat integer_add float_flush print_integer integer_shove float_sin tag_float_257 float_swap)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.1491 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 280.4625
Mean: 5.60925
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 1848.4905903
Median total errors in population: 281.01249999999993
Error averages by case: (63.99330929999881 11.162 71.93925719999976 11.376 46.2369213999998 11.085 49.875422800000585 10.09 68.88791269999976 11.3 58.8278959999998 11.192 64.08507490000062 11.239 66.10389979999948 11.313 63.40232879999918 11.186 60.51915999999966 11.359 50.228575200000634 11.218 60.97555919999897 11.311 83.88188809999897 11.214 56.33834960000105 11.133 62.623045999998865 11.402 51.34535800000089 10.218 62.17100469999952 11.167 81.75527589999955 10.225 81.90906139999919 10.161 64.1069472999994 11.362 66.00963789999948 11.325 60.94086619999939 11.197 66.81395680000031 11.331 51.09828480000037 10.871 57.798596300000646 11.186)
Error minima by case: (0.4247 10 0.4241 6 0.3722 2 0.1619 4 0.3687 6 0.0988 5 0.2563 4 0.276 6 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 10 0.3576 4 0.3743 11 0.2035 4 0.2941 10 0.2077 9 0.1022 9 0.4059 6 0.1968 5 0.2809 5 0.2071 6 0.3104 3 0.4029 4)
Average genome size in population (length): 69.697
Average program size in population (points): 70.697
Average percent parens in population: 0.014
Minimum age in population: 253.7531042859345
Maximum age in population: 258.4986852092474
Average age in population: 256.6844311227772
Median age in population: 256.7330068058449
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.871
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.871
Total error diversity:				 0.11
Error (vector) diversity:			 0.114
Behavioral diversity:				 0.114
--- Run Statistics ---
Number of program evaluations used so far: 180000
Number of point (instruction) evaluations so far: 344369516
--- Timings ---
Current time: 1529615491870 milliseconds
Total Time:         608.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       239.3 seconds, 39.3%
Fitness Testing:    287.7 seconds, 47.2%
Report:              81.8 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 179
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 180
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 180
;;******************************
;; -*- Number IO problem report - generation 180
Test total error for best: 11476.9207
Test mean error for best: 5.73846
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 101           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 56            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_swap} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_shove} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_mod} {:instruction integer_add} {:instruction float_tan} {:instruction float_dup_items} {:instruction float_sin} {:instruction integer_yankdup} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_mult} {:instruction integer_add} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction tagged_534} {:instruction float_add} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_div} {:instruction float_sin} {:instruction float_swap} {:instruction tag_float_608} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction -60} {:instruction float_sin} {:instruction tag_float_257} {:instruction float_sub} {:instruction tag_float_78})
Best program: (integer_swap integer_min float_frominteger float_shove integer_dup_items in1 integer_mod integer_add float_tan float_dup_items float_sin integer_yankdup float_dec in2 float_min integer_dup_times float_dup_times float_shove integer_yankdup integer_mult integer_add float_mod float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add float_mult float_mult float_cos integer_fromfloat float_mult float_mult tagged_534 float_add integer_sub float_add integer_sub integer_swap integer_div float_sin float_swap tag_float_608 in1 integer_fromfloat integer_add float_flush print_integer -60 float_sin tag_float_257 float_sub tag_float_78)
Errors: [0.5753 11 0.5759 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.1491 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 280.4625
Mean: 5.60925
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 1370.1484597000008
Median total errors in population: 281.01249999999993
Error averages by case: (43.93959539999961 11.136 46.344643400000045 11.271 28.77083180000032 11.074 35.62659440000046 10.064 50.41044419999967 11.213 41.57759959999985 11.148 45.7066629000003 11.199 48.103958099999886 11.244 44.66565279999987 11.132 43.249665999999706 11.274 35.89180960000032 11.179 43.426781199999574 11.256 55.842336799999515 11.152 40.259919200000105 11.108 43.91506839999961 11.326 36.77868400000004 10.167 45.06269389999956 11.156 53.89561179999962 10.169 54.775692100000484 10.148 45.06723529999992 11.275 47.63568539999987 11.245 43.39327069999986 11.156 47.28849650000028 11.252 32.76021759999965 10.891 40.37730860000037 11.147)
Error minima by case: (0.4247 11 0.4241 6 0.3722 2 0.1619 4 0.3687 6 0.0988 4 0.2563 3 0.276 5 0.1491 4 0.498 7 0.3954 4 0.3556 4 0.2337 10 0.3576 4 0.3743 11 0.2035 4 0.2941 10 0.2077 9 0.1022 9 0.4059 6 0.1968 5 0.2809 5 0.2071 6 0.3104 3 0.4029 4)
Average genome size in population (length): 70.787
Average program size in population (points): 71.787
Average percent parens in population: 0.014
Minimum age in population: 255.4195738082201
Maximum age in population: 260.0049071474369
Average age in population: 258.0809539476021
Median age in population: 258.1617856474287
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 33
Genome diversity (% unique Plush genomes):	 0.843
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.843
Total error diversity:				 0.129
Error (vector) diversity:			 0.138
Behavioral diversity:				 0.139
--- Run Statistics ---
Number of program evaluations used so far: 181000
Number of point (instruction) evaluations so far: 346140581
--- Timings ---
Current time: 1529615494979 milliseconds
Total Time:         612.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       240.6 seconds, 39.3%
Fitness Testing:    289.1 seconds, 47.2%
Report:              82.2 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 180
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 181
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 181
;;******************************
;; -*- Number IO problem report - generation 181
Test total error for best: 11474.688299999996
Test mean error for best: 5.73734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 102           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 56            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_dec} {:instruction print_float} {:instruction float_inc} {:instruction 96.80697452437909} {:instruction tagged_287} {:instruction integer_dup_items} {:instruction float_max} {:instruction float_mod} {:instruction in1} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_add} {:instruction float_dup_items} {:instruction float_tan} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_sin} {:instruction float_add} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_mult} {:instruction integer_add} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction tagged_534} {:instruction float_add} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_yank} {:instruction in1} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction integer_shove} {:instruction float_sin} {:instruction tag_float_257} {:instruction float_swap})
Best program: (integer_pop integer_dec print_float float_inc 96.80697452437909 tagged_287 integer_dup_items float_max float_mod in1 float_dup_items integer_dup_times float_add float_dup_items float_tan integer_dec float_dup_items float_sin float_add float_dec in2 float_min integer_dup_times float_dup_times float_shove integer_yankdup integer_mult integer_add float_mod float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add float_mult float_mult float_cos integer_fromfloat float_mult float_mult tagged_534 float_add integer_sub float_add integer_sub integer_swap integer_yank in1 in1 integer_fromfloat integer_add float_flush print_integer integer_shove float_sin tag_float_257 float_swap)
Errors: [0.5753 11 0.4241 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.1491 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 280.3107
Mean: 5.606214
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2004.2741403999994
Median total errors in population: 281.01249999999993
Error averages by case: (69.07993879999884 11.154 74.24513570000059 11.387 48.68178700000026 11.111 57.289447500000506 10.098 72.66240640000001 11.303 65.60362359999988 11.205 68.66057000000036 11.265 71.13889499999952 11.301 74.13025960000006 11.209 67.06670999999977 11.343 57.90039520000074 11.216 67.74631559999926 11.314 92.05663099999892 11.192 62.04505200000096 11.155 69.64142589999922 11.378 59.326342800000866 10.221 74.0383144999996 11.164 90.0769094999996 10.202 90.1015120999996 10.161 70.13588169999946 11.369 69.87494469999969 11.347 67.69852909999939 11.217 71.69378250000031 11.341 53.599653000000075 10.894 63.031677200000644 11.201)
Error minima by case: (0.4247 9 0.4241 6 0.3722 2 0.1619 4 0.3687 6 0.0988 5 0.2563 4 0.276 6 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 10 0.3576 4 0.3743 10 0.2035 4 0.2941 10 0.2077 9 0.1022 8 0.4059 6 0.1968 5 0.2809 5 0.7929 6 0.3104 3 0.4029 4)
Average genome size in population (length): 72.031
Average program size in population (points): 73.031
Average percent parens in population: 0.014
Minimum age in population: 256.5119238243729
Maximum age in population: 261.613953634654
Average age in population: 259.5178863929541
Median age in population: 259.5597965398409
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 49
Genome diversity (% unique Plush genomes):	 0.791
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 49
Syntactic diversity (% unique Push programs):	 0.791
Total error diversity:				 0.123
Error (vector) diversity:			 0.132
Behavioral diversity:				 0.132
--- Run Statistics ---
Number of program evaluations used so far: 182000
Number of point (instruction) evaluations so far: 347943322
--- Timings ---
Current time: 1529615498209 milliseconds
Total Time:         615.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       241.9 seconds, 39.3%
Fitness Testing:    290.6 seconds, 47.2%
Report:              82.6 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 181
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 182
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 182
;;******************************
;; -*- Number IO problem report - generation 182
Test total error for best: 11474.688299999996
Test mean error for best: 5.73734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 102           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 56            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_dec} {:instruction print_float} {:instruction float_inc} {:instruction 96.80697452437909} {:instruction tagged_287} {:instruction integer_dup_items} {:instruction float_max} {:instruction float_mod} {:instruction in1} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_add} {:instruction float_dup_items} {:instruction float_tan} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_sin} {:instruction float_add} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_mult} {:instruction integer_add} {:instruction float_stackdepth} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction tagged_534} {:instruction float_add} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_yank} {:instruction in1} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction integer_shove} {:instruction float_sin} {:instruction tag_float_257} {:instruction float_swap})
Best program: (integer_pop integer_dec print_float float_inc 96.80697452437909 tagged_287 integer_dup_items float_max float_mod in1 float_dup_items integer_dup_times float_add float_dup_items float_tan integer_dec float_dup_items float_sin float_add float_dec in2 float_min integer_dup_times float_dup_times float_shove integer_yankdup integer_mult integer_add float_stackdepth float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add float_mult float_mult float_cos integer_fromfloat float_mult float_mult tagged_534 float_add integer_sub float_add integer_sub integer_swap integer_yank in1 in1 integer_fromfloat integer_add float_flush print_integer integer_shove float_sin tag_float_257 float_swap)
Errors: [0.5753 11 0.4241 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.1491 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 280.3107
Mean: 5.606214
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 1810.3713820999978
Median total errors in population: 280.4625
Error averages by case: (64.22658089999881 11.159 59.22620390000146 11.389 43.67142629999983 11.087 50.334664900000575 10.091 63.47176259999942 11.316 61.0320579999998 11.202 59.820658700000585 11.259 61.64725929999944 11.315 66.89636510000024 11.206 62.77716539999965 11.353 50.68128420000067 11.21 63.09614569999903 11.311 82.81256169999882 11.197 59.64512050000116 11.142 63.77929979999884 11.39 51.67271410000106 10.199 60.25531239999952 11.156 78.76497209999954 10.22 78.52854259999941 10.165 61.9459155999994 11.362 59.27016779999944 11.331 63.0807828999994 11.214 63.46912690000033 11.338 48.36418410000032 10.882 55.212106600000496 11.195)
Error minima by case: (0.4247 8 0.4241 6 0.3722 2 0.1619 4 0.3687 6 0.0988 5 0.2563 4 0.276 6 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 10 0.3576 4 0.3743 10 0.2035 4 0.2941 10 0.2077 9 0.1022 9 0.4059 6 0.1968 5 0.2809 5 0.2071 6 0.3104 3 0.4029 4)
Average genome size in population (length): 72.786
Average program size in population (points): 73.786
Average percent parens in population: 0.014
Minimum age in population: 257.9638500715564
Maximum age in population: 263.0256196947283
Average age in population: 260.9308096785367
Median age in population: 260.9730909365659
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 37
Genome diversity (% unique Plush genomes):	 0.794
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 37
Syntactic diversity (% unique Push programs):	 0.794
Total error diversity:				 0.117
Error (vector) diversity:			 0.121
Behavioral diversity:				 0.122
--- Run Statistics ---
Number of program evaluations used so far: 183000
Number of point (instruction) evaluations so far: 349765030
--- Timings ---
Current time: 1529615501435 milliseconds
Total Time:         618.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       243.3 seconds, 39.3%
Fitness Testing:    292.1 seconds, 47.2%
Report:              83.0 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 182
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 183
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 183
;;******************************
;; -*- Number IO problem report - generation 183
Test total error for best: 11474.688299999996
Test mean error for best: 5.73734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 102           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 56            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_dec} {:instruction print_float} {:instruction float_inc} {:instruction 96.80697452437909} {:instruction tagged_287} {:instruction integer_dup_items} {:instruction float_max} {:instruction float_mod} {:instruction in1} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_add} {:instruction float_dup_items} {:instruction float_tan} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_sin} {:instruction float_add} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_mult} {:instruction integer_add} {:instruction float_stackdepth} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction tagged_534} {:instruction float_add} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_yank} {:instruction in1} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction integer_shove} {:instruction float_sin} {:instruction tag_float_257} {:instruction float_swap})
Best program: (integer_pop integer_dec print_float float_inc 96.80697452437909 tagged_287 integer_dup_items float_max float_mod in1 float_dup_items integer_dup_times float_add float_dup_items float_tan integer_dec float_dup_items float_sin float_add float_dec in2 float_min integer_dup_times float_dup_times float_shove integer_yankdup integer_mult integer_add float_stackdepth float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add float_mult float_mult float_cos integer_fromfloat float_mult float_mult tagged_534 float_add integer_sub float_add integer_sub integer_swap integer_yank in1 in1 integer_fromfloat integer_add float_flush print_integer integer_shove float_sin tag_float_257 float_swap)
Errors: [0.5753 11 0.4241 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.1491 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 280.3107
Mean: 5.606214
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 1808.6158570999978
Median total errors in population: 280.4625
Error averages by case: (58.23613159999911 11.166 62.20745940000131 11.378 45.03238319999986 11.11 51.928308400000525 10.071 65.61518619999954 11.278 54.893303199999814 11.189 60.302575900000384 11.26 62.04016939999952 11.278 70.50987550000025 11.19 56.12966999999967 11.33 52.30408560000048 11.234 57.998559199998994 11.309 86.68192529999901 11.186 52.15813120000062 11.118 58.92603479999912 11.392 53.58347400000075 10.229 69.36574119999955 11.153 83.64274379999956 10.211 84.86719419999952 10.168 62.88338199999943 11.348 58.686826099999415 11.323 57.9478661999994 11.202 62.90559440000029 11.329 48.89966240000024 10.889 54.34457390000035 11.184)
Error minima by case: (0.4247 10 0.4241 3 0.3722 1 0.1619 2 0.3687 3 0.0988 2 0.2563 2 0.276 3 0.1491 2 0.498 3 0.3954 2 0.3556 2 0.2337 9 0.3576 1 0.3743 11 0.2035 2 0.2941 9 0.2077 9 0.1022 8 0.4059 3 0.1968 2 0.2809 2 0.2071 3 0.3104 2 0.4029 2)
Average genome size in population (length): 72.674
Average program size in population (points): 73.674
Average percent parens in population: 0.014
Minimum age in population: 259.8697417962371
Maximum age in population: 264.3012557759584
Average age in population: 262.3663355426291
Median age in population: 262.415219987186
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.822
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.822
Total error diversity:				 0.121
Error (vector) diversity:			 0.126
Behavioral diversity:				 0.127
--- Run Statistics ---
Number of program evaluations used so far: 184000
Number of point (instruction) evaluations so far: 351583591
--- Timings ---
Current time: 1529615504630 milliseconds
Total Time:         621.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       244.6 seconds, 39.3%
Fitness Testing:    293.6 seconds, 47.2%
Report:              83.4 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 183
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 184
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 184
;;******************************
;; -*- Number IO problem report - generation 184
Test total error for best: 11474.688299999996
Test mean error for best: 5.73734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 102           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 56            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_dec} {:instruction print_float} {:instruction float_inc} {:instruction 96.80697452437909} {:instruction tagged_287} {:instruction integer_dup_items} {:instruction float_max} {:instruction float_mod} {:instruction in1} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_add} {:instruction float_dup_items} {:instruction float_tan} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_sin} {:instruction float_add} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_mult} {:instruction integer_add} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction tagged_534} {:instruction float_add} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_yank} {:instruction in1} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction integer_shove} {:instruction float_sin} {:instruction tag_float_257} {:instruction float_swap})
Best program: (integer_pop integer_dec print_float float_inc 96.80697452437909 tagged_287 integer_dup_items float_max float_mod in1 float_dup_items integer_dup_times float_add float_dup_items float_tan integer_dec float_dup_items float_sin float_add float_dec in2 float_min integer_yank float_dup_times float_shove integer_yankdup integer_mult integer_add float_mod float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add float_mult float_mult float_cos integer_fromfloat float_mult float_mult tagged_534 float_add integer_sub float_add integer_sub integer_swap integer_yank in1 in1 integer_fromfloat integer_add float_flush print_integer integer_shove float_sin tag_float_257 float_swap)
Errors: [0.5753 11 0.4241 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.1491 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 280.3107
Mean: 5.606214
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 1920.116549799998
Median total errors in population: 280.4625
Error averages by case: (69.8968845999989 11.161 65.95353490000088 11.381 46.31171639999991 11.101 54.606632300000534 10.095 67.80078449999968 11.31 65.2127343999998 11.208 64.42737590000058 11.265 68.73988689999963 11.298 75.44007539999994 11.2 67.11522399999987 11.368 55.0380285000006 11.226 67.37167119999918 11.332 84.04335469999907 11.204 63.807548800001044 11.15 69.42054319999934 11.406 56.19691400000076 10.212 61.473508899999544 11.163 81.89960099999956 10.224 81.41307499999981 10.168 67.06931949999952 11.365 63.3112538999997 11.337 67.36224819999939 11.213 67.6423000000003 11.343 51.78304900000034 10.866 59.991284600000526 11.192)
Error minima by case: (0.4247 9 0.4241 6 0.3722 2 0.1619 4 0.3687 6 0.0988 5 0.2563 4 0.276 6 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 10 0.3576 4 0.3743 11 0.2035 4 0.2941 8 0.2077 9 0.1022 8 0.4059 6 0.1968 5 0.2809 5 0.2071 6 0.3104 3 0.4029 4)
Average genome size in population (length): 71.667
Average program size in population (points): 72.667
Average percent parens in population: 0.014
Minimum age in population: 261.4139296830373
Maximum age in population: 265.8326362115964
Average age in population: 263.8366930529012
Median age in population: 263.8778414599022
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.823
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.823
Total error diversity:				 0.142
Error (vector) diversity:			 0.145
Behavioral diversity:				 0.145
--- Run Statistics ---
Number of program evaluations used so far: 185000
Number of point (instruction) evaluations so far: 353377165
--- Timings ---
Current time: 1529615507860 milliseconds
Total Time:         624.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       245.9 seconds, 39.4%
Fitness Testing:    295.1 seconds, 47.2%
Report:              83.7 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 184
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 185
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 185
;;******************************
;; -*- Number IO problem report - generation 185
Test total error for best: 11474.688299999996
Test mean error for best: 5.73734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 102           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 56            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_dec} {:instruction print_float} {:instruction float_inc} {:instruction 96.80697452437909} {:instruction tagged_287} {:instruction integer_dup_items} {:instruction float_max} {:instruction float_mod} {:instruction in1} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_add} {:instruction float_dup_items} {:instruction float_tan} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_sin} {:instruction float_add} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_mult} {:instruction integer_add} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction tagged_534} {:instruction float_add} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_yank} {:instruction in1} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction integer_shove} {:instruction float_sin} {:instruction tag_float_257} {:instruction float_swap})
Best program: (integer_pop integer_dec print_float float_inc 96.80697452437909 tagged_287 integer_dup_items float_max float_mod in1 float_dup_items integer_dup_times float_add float_dup_items float_tan integer_dec float_dup_items float_sin float_add float_dec in2 float_min integer_dup_times float_dup_times float_shove integer_yankdup integer_mult integer_add float_mod float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add float_mult float_mult float_cos integer_fromfloat float_mult tagged_534 float_add integer_sub float_add integer_sub integer_swap integer_yank in1 in1 integer_fromfloat integer_add float_flush print_integer integer_shove float_sin tag_float_257 float_swap)
Errors: [0.5753 11 0.4241 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.1491 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 280.3107
Mean: 5.606214
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 1765.1316111999986
Median total errors in population: 280.4625
Error averages by case: (64.85184229999905 11.115 57.803104300000506 11.343 43.942891000000095 11.088 50.419636300000576 10.088 60.00240859999949 11.235 64.6892163999998 11.18 55.64091430000048 11.222 57.66955899999966 11.293 57.89906260000018 11.148 66.11169399999966 11.314 50.62260420000065 11.184 66.62104839999915 11.263 74.22111179999891 11.157 61.92191280000087 11.144 65.11927149999909 11.335 51.612603000000846 10.165 55.91960609999949 11.143 72.50761299999955 10.186 71.65163760000038 10.167 57.96500759999955 11.313 55.38799819999957 11.289 66.47889989999952 11.192 59.97733560000031 11.29 47.71734580000011 10.92 52.444286900000485 11.159)
Error minima by case: (0.4247 9 0.4241 5 0.3722 2 0.1619 4 0.3687 5 0.0988 5 0.2563 4 0.276 5 0.1491 3 0.498 6 0.3954 4 0.3556 4 0.2337 10 0.3576 4 0.3743 10 0.2035 4 0.2941 9 0.2077 9 0.1022 9 0.4059 5 0.1968 4 0.2809 5 0.2071 5 0.3104 3 0.4029 4)
Average genome size in population (length): 69.992
Average program size in population (points): 70.992
Average percent parens in population: 0.014
Minimum age in population: 262.6652938181175
Maximum age in population: 267.2861743822621
Average age in population: 265.4009965159336
Median age in population: 265.4412893932471
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 55
Genome diversity (% unique Plush genomes):	 0.778
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 55
Syntactic diversity (% unique Push programs):	 0.778
Total error diversity:				 0.128
Error (vector) diversity:			 0.136
Behavioral diversity:				 0.14
--- Run Statistics ---
Number of program evaluations used so far: 186000
Number of point (instruction) evaluations so far: 355128127
--- Timings ---
Current time: 1529615511060 milliseconds
Total Time:         628.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       247.3 seconds, 39.4%
Fitness Testing:    296.5 seconds, 47.2%
Report:              84.1 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 185
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 186
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 186
;;******************************
;; -*- Number IO problem report - generation 186
Test total error for best: 11474.688299999996
Test mean error for best: 5.73734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 102           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 56            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_dec} {:instruction print_float} {:instruction float_inc} {:instruction 96.80697452437909} {:instruction tagged_287} {:instruction integer_dup_items} {:instruction float_max} {:instruction float_mod} {:instruction in1} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_add} {:instruction float_dup_items} {:instruction float_tan} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_sin} {:instruction float_add} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_mult} {:instruction integer_add} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction tagged_534} {:instruction float_add} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_yank} {:instruction in1} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction integer_shove} {:instruction float_sin} {:instruction tag_float_257} {:instruction float_swap})
Best program: (integer_pop integer_dec print_float float_inc 96.80697452437909 tagged_287 integer_dup_items float_max float_mod in1 float_dup_items integer_dup_times float_add float_dup_items float_tan integer_dec float_dup_items float_sin float_add float_dec in2 float_min integer_dup_times float_dup_times float_shove integer_yankdup integer_mult integer_add float_mod float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add float_mult float_mult float_cos integer_fromfloat float_mult tagged_534 float_add integer_sub float_add integer_sub integer_swap integer_yank in1 in1 integer_fromfloat integer_add float_flush print_integer integer_shove float_sin tag_float_257 float_swap)
Errors: [0.5753 11 0.4241 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.1491 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 280.3107
Mean: 5.606214
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 1449.1968151000008
Median total errors in population: 280.3107
Error averages by case: (57.6061704999991 11.119 47.55117239999977 11.365 36.512927900000356 11.085 39.89184520000052 10.089 46.95264209999971 11.241 54.1968959999998 11.173 41.10422430000018 11.23 44.573828999999904 11.3 44.41676070000017 11.16 55.57015999999967 11.314 40.166226800000416 11.202 56.71871439999917 11.26 49.402322999999505 11.142 51.771634400000806 11.131 57.260735699999096 11.355 42.39663850000039 10.182 39.979628399999555 11.131 48.04571519999969 10.19 48.59975210000041 10.16 44.35736739999981 11.325 43.08435209999989 11.293 56.55111339999952 11.189 47.1155169000003 11.299 40.36516770000007 10.93 38.9693010000002 11.171)
Error minima by case: (0.4247 9 0.4241 6 0.3722 2 0.1619 4 0.3687 6 0.0988 5 0.2563 4 0.276 5 0.1491 4 0.498 6 0.3954 4 0.3556 5 0.2337 9 0.3576 3 0.3743 11 0.2035 4 0.2941 10 0.2077 9 0.1022 8 0.4059 6 0.1968 5 0.2809 5 0.2071 6 0.3104 3 0.4029 4)
Average genome size in population (length): 67.029
Average program size in population (points): 68.029
Average percent parens in population: 0.015
Minimum age in population: 264.5810310468679
Maximum age in population: 268.9515387523893
Average age in population: 266.9255349274044
Median age in population: 266.9188797216203
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 72
Genome diversity (% unique Plush genomes):	 0.713
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 72
Syntactic diversity (% unique Push programs):	 0.713
Total error diversity:				 0.119
Error (vector) diversity:			 0.123
Behavioral diversity:				 0.125
--- Run Statistics ---
Number of program evaluations used so far: 187000
Number of point (instruction) evaluations so far: 356804027
--- Timings ---
Current time: 1529615514123 milliseconds
Total Time:         631.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       248.6 seconds, 39.4%
Fitness Testing:    297.9 seconds, 47.2%
Report:              84.5 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 186
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 187
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 187
;;******************************
;; -*- Number IO problem report - generation 187
Test total error for best: 11474.688299999996
Test mean error for best: 5.73734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 102           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 56            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_dec} {:instruction print_float} {:instruction float_inc} {:instruction 96.80697452437909} {:instruction tagged_287} {:instruction integer_dup_items} {:instruction float_max} {:instruction float_mod} {:instruction in1} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_add} {:instruction float_dup_items} {:instruction float_tan} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_sin} {:instruction float_add} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_mult} {:instruction 62} {:instruction float_stackdepth} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction tagged_534} {:instruction float_add} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_yank} {:instruction in1} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction integer_shove} {:instruction float_sin} {:instruction tag_float_257} {:instruction float_swap})
Best program: (integer_pop integer_dec print_float float_inc 96.80697452437909 tagged_287 integer_dup_items float_max float_mod in1 float_dup_items integer_dup_times float_add float_dup_items float_tan integer_dec float_dup_items float_sin float_add float_dec in2 float_min integer_dup_times float_dup_times float_shove integer_yankdup integer_mult 62 float_stackdepth float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add float_mult float_mult float_cos integer_fromfloat float_mult float_mult tagged_534 float_add integer_sub float_add integer_sub integer_swap integer_yank in1 in1 integer_fromfloat integer_add float_flush print_integer integer_shove float_sin tag_float_257 float_swap)
Errors: [0.5753 11 0.4241 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.1491 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 280.3107
Mean: 5.606214
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 1801.050538400001
Median total errors in population: 280.3107
Error averages by case: (69.44281159999878 11.139 59.50488719999964 11.392 48.27927769999984 11.126 55.27125730000056 10.137 61.95553669999941 11.294 69.04592000000052 11.229 56.41855910000052 11.253 59.22055059999942 11.344 53.781161200000255 11.191 70.88969800000051 11.371 55.497769200000604 11.219 70.84333719999977 11.309 64.7141991999991 11.163 67.00319760000129 11.208 69.5431038999994 11.355 56.35526650000098 10.188 53.78764379999955 11.15 62.442215399999576 10.206 62.272378600000536 10.174 59.34637749999937 11.35 58.0431465999994 11.337 71.17418079999929 11.239 62.09082760000032 11.346 53.0166509000004 10.955 54.24658420000047 11.189)
Error minima by case: (0.4247 9 0.4241 6 0.3722 2 0.1619 4 0.3687 6 0.0988 5 0.2563 4 0.276 6 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 10 0.3576 4 0.3743 11 0.2035 4 0.2941 10 0.2077 9 0.1022 8 0.4059 6 0.1968 5 0.2809 5 0.2071 6 0.3104 3 0.4029 4)
Average genome size in population (length): 66.823
Average program size in population (points): 67.823
Average percent parens in population: 0.015
Minimum age in population: 266.1540391810596
Maximum age in population: 270.1815929196581
Average age in population: 268.3580738932007
Median age in population: 268.400725903721
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 58
Genome diversity (% unique Plush genomes):	 0.765
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 58
Syntactic diversity (% unique Push programs):	 0.765
Total error diversity:				 0.114
Error (vector) diversity:			 0.118
Behavioral diversity:				 0.12
--- Run Statistics ---
Number of program evaluations used so far: 188000
Number of point (instruction) evaluations so far: 358474665
--- Timings ---
Current time: 1529615517126 milliseconds
Total Time:         634.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       249.9 seconds, 39.4%
Fitness Testing:    299.3 seconds, 47.2%
Report:              84.9 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 187
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 188
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 188
;;******************************
;; -*- Number IO problem report - generation 188
Test total error for best: 11474.688299999996
Test mean error for best: 5.73734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 102           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 56            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_dec} {:instruction print_float} {:instruction float_inc} {:instruction 96.80697452437909} {:instruction tagged_287} {:instruction integer_dup_items} {:instruction float_max} {:instruction float_mod} {:instruction in1} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_add} {:instruction float_dup_items} {:instruction float_tan} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_sin} {:instruction float_add} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_shove} {:instruction integer_max} {:instruction integer_mult} {:instruction integer_add} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction tagged_534} {:instruction float_add} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_yank} {:instruction in1} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction integer_shove} {:instruction float_sin} {:instruction tag_float_257} {:instruction float_swap})
Best program: (integer_pop integer_dec print_float float_inc 96.80697452437909 tagged_287 integer_dup_items float_max float_mod in1 float_dup_items integer_dup_times float_add float_dup_items float_tan integer_dec float_dup_items float_sin float_add float_dec in2 float_min integer_yank float_dup_times float_shove integer_max integer_mult integer_add float_mod float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add float_mult float_mult float_cos integer_fromfloat float_mult float_mult tagged_534 float_add integer_sub float_add integer_sub integer_swap integer_yank in1 in1 integer_fromfloat integer_add float_flush print_integer integer_shove float_sin tag_float_257 float_swap)
Errors: [0.5753 11 0.4241 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.1491 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 280.3107
Mean: 5.606214
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 1339.4529713000009
Median total errors in population: 280.3107
Error averages by case: (54.75762229999931 11.114 41.48412449999998 11.363 30.80220770000041 11.12 35.789705500000515 10.103 42.7362354999996 11.259 50.97729119999981 11.186 35.96204030000032 11.221 39.49997980000061 11.29 37.02835689999988 11.168 52.704151999999674 11.338 36.10915220000049 11.222 53.04800319999962 11.287 45.62126590000001 11.148 49.471422400000506 11.138 54.04348989999947 11.357 37.36475319999992 10.203 35.02345499999956 11.133 43.24005869999967 10.193 43.97642980000044 10.151 40.27462280000051 11.329 38.07329670000051 11.313 53.02667520000001 11.199 42.496109500000294 11.302 35.241295199999584 10.914 34.47722590000026 11.173)
Error minima by case: (0.4247 9 0.4241 6 0.3722 2 0.1619 4 0.3687 6 0.0988 5 0.2563 4 0.276 6 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 10 0.3576 4 0.3743 11 0.2035 4 0.2941 10 0.2077 9 0.1022 8 0.4059 6 0.1968 5 0.2809 5 0.2071 6 0.3104 3 0.4029 4)
Average genome size in population (length): 66.965
Average program size in population (points): 67.965
Average percent parens in population: 0.015
Minimum age in population: 267.5497192125108
Maximum age in population: 271.8121706601676
Average age in population: 269.7511449494346
Median age in population: 269.8183531227904
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 48
Genome diversity (% unique Plush genomes):	 0.776
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.776
Total error diversity:				 0.119
Error (vector) diversity:			 0.123
Behavioral diversity:				 0.125
--- Run Statistics ---
Number of program evaluations used so far: 189000
Number of point (instruction) evaluations so far: 360148964
--- Timings ---
Current time: 1529615520179 milliseconds
Total Time:         637.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       251.2 seconds, 39.4%
Fitness Testing:    300.7 seconds, 47.2%
Report:              85.3 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 188
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 189
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 189
;;******************************
;; -*- Number IO problem report - generation 189
Test total error for best: 11474.688299999996
Test mean error for best: 5.73734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 102           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 56            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction 96.80697452437909} {:instruction tagged_287} {:instruction integer_dup_items} {:instruction float_max} {:instruction float_mod} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_add} {:instruction float_dup_items} {:instruction float_tan} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_sin} {:instruction float_add} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction float_dup_times} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_mult} {:instruction integer_add} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction tagged_534} {:instruction float_add} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_yank} {:instruction in1} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction integer_shove} {:instruction float_sin} {:instruction tag_float_257} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction tag_float_257} {:instruction integer_dup_times} {:instruction tag_float_149})
Best program: (float_inc 96.80697452437909 tagged_287 integer_dup_items float_max float_mod in1 float_dup_items integer_yank float_add float_dup_items float_tan integer_dec float_dup_items float_sin float_add float_dec in2 float_min float_dup_times float_shove integer_yankdup integer_mult integer_add float_mod float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add float_mult float_mult float_cos integer_fromfloat float_mult float_mult tagged_534 float_add integer_sub float_add integer_sub integer_swap integer_yank in1 in1 integer_fromfloat integer_add float_flush print_integer integer_shove float_sin tag_float_257 integer_add float_flush print_integer float_swap float_sin tag_float_257 integer_dup_times tag_float_149)
Errors: [0.5753 11 0.4241 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.1491 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 280.3107
Mean: 5.606214
Genome size: 68
Size: 69
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 1575.0354467000006
Median total errors in population: 280.3107
Error averages by case: (59.97730939999895 11.128 52.762733399999604 11.322 38.35704429999995 11.097 47.14630880000052 10.088 53.92602209999942 11.256 57.471216399999804 11.181 47.2546452000004 11.206 51.36802449999959 11.267 48.2964216000002 11.154 59.06068999999966 11.31 47.401073500000656 11.204 59.85491479999909 11.281 56.312493399999276 11.135 56.178912800000944 11.137 60.67208459999898 11.318 48.52367930000081 10.179 44.66244479999955 11.116 53.91502809999952 10.163 53.96164550000056 10.133 51.784080499999554 11.29 49.392930999999784 11.29 59.741147099999495 11.19 53.49641560000031 11.285 41.988409100000126 10.911 45.729770900000425 11.159)
Error minima by case: (0.4247 9 0.4241 6 0.3722 2 0.1619 4 0.3687 6 0.0988 5 0.2563 4 0.276 6 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 9 0.3576 4 0.3743 10 0.2035 4 0.2941 8 0.2077 9 0.1022 8 0.4059 6 0.1968 5 0.2809 5 0.2071 6 0.3104 3 0.4029 4)
Average genome size in population (length): 67.13
Average program size in population (points): 68.13
Average percent parens in population: 0.015
Minimum age in population: 268.8275910688806
Maximum age in population: 272.8862974345776
Average age in population: 271.106686458767
Median age in population: 271.1444660091274
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 31
Genome diversity (% unique Plush genomes):	 0.79
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.79
Total error diversity:				 0.122
Error (vector) diversity:			 0.123
Behavioral diversity:				 0.125
--- Run Statistics ---
Number of program evaluations used so far: 190000
Number of point (instruction) evaluations so far: 361827426
--- Timings ---
Current time: 1529615523331 milliseconds
Total Time:         640.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       252.5 seconds, 39.4%
Fitness Testing:    302.1 seconds, 47.2%
Report:              85.6 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 189
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 190
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 190
;;******************************
;; -*- Number IO problem report - generation 190
Test total error for best: 11474.688299999996
Test mean error for best: 5.73734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 102           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 56            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_dec} {:instruction print_float} {:instruction float_rot} {:instruction 96.80697452437909} {:instruction tagged_287} {:instruction integer_dup_items} {:instruction float_max} {:instruction float_mod} {:instruction in1} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_add} {:instruction float_dup_items} {:instruction float_tan} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_sin} {:instruction float_add} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_div} {:instruction integer_add} {:instruction integer_inc} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction integer_mult} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction tagged_534} {:instruction float_add} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_yank} {:instruction tagged_534} {:instruction float_add} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_div} {:instruction float_sin} {:instruction float_swap} {:instruction tag_float_518} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin})
Best program: (integer_pop integer_dec print_float float_rot 96.80697452437909 tagged_287 integer_dup_items float_max float_mod in1 float_dup_items integer_dup_times float_add float_dup_items float_tan integer_dec float_dup_items float_sin float_add float_dec in2 float_min integer_dup_times float_dup_times float_shove integer_yankdup integer_div integer_add integer_inc float_mod in1 integer_flush integer_mult float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add float_mult float_mult float_cos integer_fromfloat float_mult float_mult tagged_534 float_add integer_sub float_add integer_sub integer_swap integer_yank tagged_534 float_add integer_sub float_add integer_sub integer_swap integer_div float_sin float_swap tag_float_518 in1 integer_fromfloat integer_add float_flush print_integer float_swap float_sin)
Errors: [0.5753 11 0.4241 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.1491 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 280.3107
Mean: 5.606214
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 1657.6030743000008
Median total errors in population: 280.3107
Error averages by case: (64.92140219999874 11.123 55.936970099999414 11.331 42.5838683 11.113 48.0123684000006 10.115 55.66839949999935 11.24 62.599319699999796 11.213 49.20973720000066 11.205 53.07584329999969 11.285 53.748035700000315 11.158 63.934002999999656 11.355 48.24771000000079 11.226 64.86249979999893 11.295 58.81886349999905 11.125 61.1310774000013 11.182 65.26541419999877 11.357 49.582842000000895 10.196 50.31577209999948 11.144 57.53914059999946 10.165 58.01860420000064 10.176 53.821568799999625 11.296 50.767834999999714 11.293 64.75242599999933 11.224 54.416185600000304 11.287 45.673787900000136 10.96 48.476399800000685 11.159)
Error minima by case: (0.4247 9 0.4241 3 0.3722 2 0.1619 2 0.3687 3 0.0988 3 0.2563 3 0.276 4 0.1491 3 0.498 3 0.3954 2 0.3556 2 0.2337 10 0.3576 3 0.3743 11 0.2035 2 0.2941 10 0.2077 9 0.1022 9 0.4059 3 0.1968 2 0.2809 3 0.2071 3 0.3104 2 0.4029 4)
Average genome size in population (length): 67.562
Average program size in population (points): 68.562
Average percent parens in population: 0.015
Minimum age in population: 270.2360469541586
Maximum age in population: 274.7802025488939
Average age in population: 272.5341316638243
Median age in population: 272.5725214267662
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.82
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.82
Total error diversity:				 0.108
Error (vector) diversity:			 0.109
Behavioral diversity:				 0.113
--- Run Statistics ---
Number of program evaluations used so far: 191000
Number of point (instruction) evaluations so far: 363516584
--- Timings ---
Current time: 1529615526474 milliseconds
Total Time:         643.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       253.8 seconds, 39.4%
Fitness Testing:    303.5 seconds, 47.2%
Report:              86.0 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 190
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 191
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 191
;;******************************
;; -*- Number IO problem report - generation 191
Test total error for best: 11474.688299999996
Test mean error for best: 5.73734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 102           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 56            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_dec} {:instruction print_float} {:instruction float_inc} {:instruction 96.80697452437909} {:instruction in1} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_add} {:instruction float_dup_items} {:instruction float_tan} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_sin} {:instruction float_add} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_shove} {:instruction integer_yankdup} {:instruction 7} {:instruction integer_add} {:instruction float_stackdepth} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction tagged_534} {:instruction float_add} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_yank} {:instruction in1} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction print_float} {:instruction float_sin} {:instruction tag_float_257} {:instruction float_swap})
Best program: (integer_pop integer_dec print_float float_inc 96.80697452437909 in1 float_dup_items integer_dup_times float_add float_dup_items float_tan integer_dec float_dup_items float_sin float_add float_dec in2 float_min integer_dup_times float_dup_times float_shove integer_yankdup 7 integer_add float_stackdepth float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add float_mult float_mult float_cos integer_fromfloat float_mult float_mult tagged_534 float_add integer_sub float_add integer_sub integer_swap integer_yank in1 in1 integer_fromfloat integer_add float_flush print_integer print_float float_sin tag_float_257 float_swap)
Errors: [0.5753 11 0.4241 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.1491 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 280.3107
Mean: 5.606214
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 1748.9464693000004
Median total errors in population: 280.3107
Error averages by case: (67.70999299999868 11.144 58.38563499999966 11.346 46.087773500000175 11.084 53.087814600000556 10.074 59.81999099999941 11.226 65.89669839999985 11.184 53.08263210000057 11.23 57.53851359999988 11.265 54.30468460000011 11.147 66.99916399999995 11.322 53.28121650000064 11.195 68.09413679999925 11.276 64.23223019999894 11.143 63.2759192000014 11.134 68.34655999999922 11.351 54.47080400000064 10.19 51.656075699999526 11.151 62.108610399999534 10.181 62.23190540000057 10.165 57.72244579999982 11.316 55.907056799999815 11.293 67.95798979999914 11.188 59.726507700000305 11.287 49.35502940000006 10.907 51.71608180000053 11.152)
Error minima by case: (0.4247 9 0.4241 5 0.3722 2 0.1619 4 0.3687 5 0.0988 5 0.2563 4 0.276 5 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 9 0.3576 4 0.3743 10 0.2035 4 0.2941 9 0.2077 9 0.1022 8 0.4059 5 0.1968 4 0.2809 5 0.2071 5 0.3104 3 0.4029 4)
Average genome size in population (length): 67.234
Average program size in population (points): 68.234
Average percent parens in population: 0.015
Minimum age in population: 271.5233139889853
Maximum age in population: 276.0272646510076
Average age in population: 273.9663934240314
Median age in population: 274.0285496576708
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.833
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.833
Total error diversity:				 0.112
Error (vector) diversity:			 0.115
Behavioral diversity:				 0.119
--- Run Statistics ---
Number of program evaluations used so far: 192000
Number of point (instruction) evaluations so far: 365197534
--- Timings ---
Current time: 1529615529597 milliseconds
Total Time:         646.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       255.1 seconds, 39.5%
Fitness Testing:    304.9 seconds, 47.2%
Report:              86.5 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 191
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 192
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 192
;;******************************
;; -*- Number IO problem report - generation 192
Test total error for best: 11475.963499999998
Test mean error for best: 5.73798
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 102           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 56            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_dec} {:instruction print_float} {:instruction float_inc} {:instruction 96.80697452437909} {:instruction tagged_230} {:instruction integer_dup_items} {:instruction float_max} {:instruction float_mod} {:instruction in1} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_add} {:instruction float_dup_items} {:instruction float_tan} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_sin} {:instruction float_add} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_mult} {:instruction integer_add} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction float_dup} {:instruction float_sub} {:instruction float_add} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction tagged_534} {:instruction float_add} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction tagged_576} {:instruction float_add} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction 59.1642225442441} {:instruction float_mod} {:instruction in1} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction integer_shove} {:instruction float_sin} {:instruction tag_float_257} {:instruction float_swap})
Best program: (integer_pop integer_dec print_float float_inc 96.80697452437909 tagged_230 integer_dup_items float_max float_mod in1 float_dup_items integer_dup_times float_add float_dup_items float_tan integer_dec float_dup_items float_sin float_add float_dec in2 float_min integer_dup_times float_dup_times float_shove integer_yankdup integer_mult integer_add float_mod float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_tan float_dup float_sub float_add float_mult float_mult float_cos integer_fromfloat float_mult float_mult tagged_534 float_add integer_sub float_add integer_sub integer_swap float_mult float_cos integer_fromfloat float_mult float_mult tagged_576 float_add integer_sub float_add integer_sub 59.1642225442441 float_mod in1 in1 integer_fromfloat integer_add float_flush print_integer integer_shove float_sin tag_float_257 float_swap)
Errors: [0.5753 11 0.4241 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.1491 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 280.3107
Mean: 5.606214
Genome size: 76
Size: 77
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 1898.6545721000005
Median total errors in population: 280.3107
Error averages by case: (76.95561939999844 11.125 61.12677729999948 11.403 50.38079919999998 11.123 57.503259800000585 10.111 65.60111529999942 11.277 76.20364460000081 11.214 57.05414730000053 11.222 61.27915929999951 11.317 56.422293600000174 11.169 78.26934000000088 11.391 58.05568890000073 11.239 77.79992959999981 11.315 68.79282019999906 11.158 74.20887800000155 11.185 77.1015729999994 11.408 59.73526350000086 10.212 56.58875779999951 11.127 67.49561549999952 10.212 68.03868750000053 10.163 63.083422499999436 11.337 58.83496429999951 11.339 77.86314309999905 11.233 64.2348683000003 11.332 55.016450600000205 10.916 54.31435350000055 11.166)
Error minima by case: (0.4247 9 0.4241 5 0.3722 2 0.1619 4 0.3687 5 0.0988 5 0.2563 4 0.276 5 0.1491 4 0.498 6 0.3954 4 0.3556 4 0.2337 9 0.3576 4 0.3743 11 0.2035 4 0.2941 9 0.2077 9 0.1022 8 0.4059 5 0.1968 4 0.2809 5 0.2071 5 0.3104 3 0.4029 4)
Average genome size in population (length): 67.47
Average program size in population (points): 68.47
Average percent parens in population: 0.015
Minimum age in population: 272.5923381490623
Maximum age in population: 277.6939340880132
Average age in population: 275.3601362708507
Median age in population: 275.4035373812998
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.824
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.824
Total error diversity:				 0.132
Error (vector) diversity:			 0.137
Behavioral diversity:				 0.14
--- Run Statistics ---
Number of program evaluations used so far: 193000
Number of point (instruction) evaluations so far: 366884409
--- Timings ---
Current time: 1529615532806 milliseconds
Total Time:         649.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       256.4 seconds, 39.5%
Fitness Testing:    306.4 seconds, 47.2%
Report:              86.9 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 192
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 193
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 193
;;******************************
;; -*- Number IO problem report - generation 193
Test total error for best: 11474.688299999996
Test mean error for best: 5.73734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 102           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 56            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction float_shove} {:instruction print_float} {:instruction float_inc} {:instruction 96.80697452437909} {:instruction tagged_287} {:instruction integer_dup_items} {:instruction float_max} {:instruction float_mod} {:instruction in1} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_add} {:instruction float_dup_items} {:instruction float_tan} {:instruction float_add} {:instruction float_dup_items} {:instruction float_sin} {:instruction float_add} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_mult} {:instruction integer_min} {:instruction float_mod} {:instruction integer_pop} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction tagged_534} {:instruction float_add} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_yank} {:instruction in1} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction integer_shove} {:instruction float_sin} {:instruction tag_float_257} {:instruction float_swap})
Best program: (integer_pop float_shove print_float float_inc 96.80697452437909 tagged_287 integer_dup_items float_max float_mod in1 float_dup_items integer_dup_times float_add float_dup_items float_tan float_add float_dup_items float_sin float_add float_dec in2 float_min integer_dup_times float_dup_times float_shove integer_yankdup integer_mult integer_min float_mod integer_pop in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add float_mult float_mult float_cos integer_fromfloat float_mult tagged_534 float_add integer_sub float_add integer_sub integer_swap integer_yank in1 in1 integer_fromfloat integer_add float_flush print_integer integer_shove float_sin tag_float_257 float_swap)
Errors: [0.5753 11 0.4241 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.1491 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 280.3107
Mean: 5.606214
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 1816.2682261000011
Median total errors in population: 280.3107
Error averages by case: (76.58160679999878 11.133 60.34462399999975 11.365 47.042921499999665 11.057 52.20309340000057 10.072 62.37517569999945 11.231 73.55526150000077 11.164 52.603812300000406 11.198 59.92215839999943 11.283 54.350313600000106 11.135 74.7863640000007 11.323 52.45313910000056 11.185 75.28035939999987 11.264 65.59847919999909 11.145 71.92508360000123 11.13 76.64746699999974 11.38 54.04050190000097 10.167 53.33181689999947 11.121 63.60161139999946 10.207 64.03962790000064 10.165 58.146043199999376 11.318 54.3133272999994 11.298 75.16529839999922 11.183 59.9956655000003 11.3 50.837954900000504 10.898 51.263519200000445 11.141)
Error minima by case: (0.4247 9 0.4241 3 0.3722 1 0.1619 2 0.3687 3 0.0988 2 0.2563 2 0.276 3 0.1491 2 0.498 3 0.3954 2 0.3556 2 0.2337 10 0.3576 1 0.3743 11 0.2035 2 0.2941 10 0.2077 9 0.1022 8 0.4059 3 0.1968 2 0.2809 2 0.2071 3 0.3104 2 0.4029 2)
Average genome size in population (length): 67.646
Average program size in population (points): 68.646
Average percent parens in population: 0.015
Minimum age in population: 273.5923381490623
Maximum age in population: 279.0205559603724
Average age in population: 276.7830000193284
Median age in population: 276.8352025276789
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.849
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.849
Total error diversity:				 0.138
Error (vector) diversity:			 0.142
Behavioral diversity:				 0.146
--- Run Statistics ---
Number of program evaluations used so far: 194000
Number of point (instruction) evaluations so far: 368575709
--- Timings ---
Current time: 1529615535910 milliseconds
Total Time:         652.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       257.8 seconds, 39.5%
Fitness Testing:    307.8 seconds, 47.1%
Report:              87.3 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 193
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 194
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 194
;;******************************
;; -*- Number IO problem report - generation 194
Test total error for best: 11491.688299999996
Test mean error for best: 5.74584
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7
           
Correct output: 101.5758530321 | Program output: 102
          
Correct output: 5.3722386499   | Program output: 5
            
Correct output: 50.838076484   | Program output: 50
           
Correct output: 149.3686745246 | Program output: 149
          
Correct output: -86.0987731432 | Program output: -86
          
Correct output: 99.2563149379  | Program output: 99
           
Correct output: 100.2759538143 | Program output: 100
          
Correct output: 55.8508667649  | Program output: 56
           
Correct output: -120.4980478621 | Program output: -120
         
Correct output: 50.3953926202  | Program output: 50
           
Correct output: -86.6444443408 | Program output: -86
          
Correct output: 43.2337451713  | Program output: 43
           
Correct output: -69.3575988725 | Program output: -69
          
Correct output: -32.3742761841 | Program output: -33
          
Correct output: 21.203493141   | Program output: 21
           
Correct output: 6.2941290036   | Program output: 6
            
Correct output: 28.207733934   | Program output: 28
           
Correct output: 3.102196665    | Program output: 3
            
Correct output: 117.4058715345 | Program output: 117
          
Correct output: 105.1968404292 | Program output: 105
          
Correct output: -95.2809380546 | Program output: -95
          
Correct output: 145.7928624605 | Program output: 145
          
Correct output: 3.3104353754   | Program output: 3
            
Correct output: 60.4029417431  | Program output: 60
           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction float_shove} {:instruction integer_dec} {:instruction print_float} {:instruction float_inc} {:instruction 96.80697452437909} {:instruction tagged_287} {:instruction integer_dup_items} {:instruction float_max} {:instruction float_mod} {:instruction in1} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_add} {:instruction float_dup_items} {:instruction float_tan} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_sin} {:instruction float_add} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_mult} {:instruction integer_add} {:instruction float_stackdepth} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction tagged_534} {:instruction float_add} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_yank} {:instruction in1} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction print_newline} {:instruction float_swap})
Best program: (integer_pop float_shove integer_dec print_float float_inc 96.80697452437909 tagged_287 integer_dup_items float_max float_mod in1 float_dup_items integer_dup_times float_add float_dup_items float_tan integer_dec float_dup_items float_sin float_add float_dec in2 float_min integer_dup_times float_dup_times float_shove integer_yankdup integer_mult integer_add float_stackdepth float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add float_mult float_mult float_cos integer_fromfloat float_mult float_mult tagged_534 float_add integer_sub float_add integer_sub integer_swap integer_yank in1 in1 integer_fromfloat integer_add float_flush print_integer integer_shove integer_dup_items print_newline float_swap)
Errors: [0.5753 11 0.4241 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.1491 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 280.3107
Mean: 5.606214
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 1704.2234792000006
Median total errors in population: 280.3107
Error averages by case: (69.81536309999896 11.154 55.21006089999963 11.434 46.05281390000012 11.111 51.131796500000554 10.125 58.64356669999957 11.315 65.60594849999983 11.226 49.91508250000043 11.259 55.33832459999979 11.355 48.96681250000015 11.208 67.22205099999968 11.394 51.57105890000059 11.262 68.65961179999931 11.331 58.984670499999275 11.181 63.824064600000895 11.176 68.65776049999927 11.433 53.158225000000606 10.24 48.2533820999995 11.153 57.31530559999963 10.225 57.768980400000466 10.164 54.906071299999674 11.382 51.429198399999905 11.358 68.57936979999941 11.247 56.95385560000031 11.363 52.03092720000014 10.915 47.01817730000046 11.2)
Error minima by case: (0.4247 9 0.4241 5 0.3722 2 0.1619 4 0.3687 5 0.0988 5 0.2563 4 0.276 5 0.1491 3 0.498 6 0.3954 4 0.3556 4 0.2337 9 0.3576 4 0.3743 11 0.2035 4 0.2941 9 0.2077 9 0.1022 8 0.4059 4 0.1968 3 0.2809 5 0.2071 5 0.3104 3 0.4029 4)
Average genome size in population (length): 67.681
Average program size in population (points): 68.681
Average percent parens in population: 0.015
Minimum age in population: 275.961205266901
Maximum age in population: 279.9224306296547
Average age in population: 278.2296919903317
Median age in population: 278.276923317726
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.862
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.862
Total error diversity:				 0.148
Error (vector) diversity:			 0.153
Behavioral diversity:				 0.155
--- Run Statistics ---
Number of program evaluations used so far: 195000
Number of point (instruction) evaluations so far: 370267835
--- Timings ---
Current time: 1529615538980 milliseconds
Total Time:         656.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       259.1 seconds, 39.5%
Fitness Testing:    309.2 seconds, 47.1%
Report:              87.6 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 194
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 195
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 195
;;******************************
;; -*- Number IO problem report - generation 195
Test total error for best: 11474.688299999996
Test mean error for best: 5.73734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 102           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 56            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_pop} {:instruction print_float} {:instruction float_inc} {:instruction 96.80697452437909} {:instruction tagged_287} {:instruction integer_dup_items} {:instruction float_max} {:instruction float_mod} {:instruction in1} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_add} {:instruction float_dup_items} {:instruction float_tan} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_sin} {:instruction float_add} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_shove} {:instruction integer_yankdup} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_div} {:instruction integer_add} {:instruction integer_inc} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction tagged_534} {:instruction float_mult} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_yank} {:instruction in1} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction integer_shove} {:instruction float_sin} {:instruction tag_float_257} {:instruction float_swap})
Best program: (integer_pop integer_pop print_float float_inc 96.80697452437909 tagged_287 integer_dup_items float_max float_mod in1 float_dup_items integer_dup_times float_add float_dup_items float_tan integer_dec float_dup_items float_sin float_add float_dec in2 float_min integer_dup_times float_dup_times float_shove integer_yankdup float_shove integer_yankdup integer_div integer_add integer_inc float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add float_mult float_mult float_cos integer_fromfloat float_mult tagged_534 float_mult integer_sub float_add integer_sub integer_swap integer_yank in1 in1 integer_fromfloat integer_add float_flush print_integer integer_shove float_sin tag_float_257 float_swap)
Errors: [0.5753 11 0.4241 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.1491 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 280.3107
Mean: 5.606214
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 1754.2768337000005
Median total errors in population: 280.3107
Error averages by case: (66.94479709999895 11.153 57.696579699999546 11.347 47.81527209999994 11.122 55.297313000000585 10.102 61.47156089999947 11.282 63.63519099999979 11.223 55.22952520000052 11.242 58.75997509999963 11.298 53.886657100000264 11.172 65.24962779999964 11.359 55.61473280000068 11.242 65.97753819999916 11.332 62.910794099999165 11.163 61.44880310000098 11.167 66.41684189999901 11.374 56.78608740000098 10.213 52.34480879999953 11.146 60.55708479999955 10.197 60.92043040000056 10.144 59.69835969999954 11.329 56.39129589999953 11.313 66.19919469999955 11.229 60.14169460000033 11.311 53.52867210000033 10.904 52.79699620000053 11.193)
Error minima by case: (0.4247 9 0.4241 5 0.3722 2 0.1619 4 0.3687 5 0.0988 5 0.2563 4 0.276 5 0.1491 4 0.498 6 0.3954 4 0.3556 4 0.2337 9 0.3576 4 0.3743 10 0.2035 4 0.2941 9 0.2077 9 0.1022 8 0.4059 5 0.1968 4 0.2809 5 0.2071 5 0.3104 3 0.4029 4)
Average genome size in population (length): 67.772
Average program size in population (points): 68.772
Average percent parens in population: 0.015
Minimum age in population: 277.3115800978303
Maximum age in population: 281.7055675746589
Average age in population: 279.6254547043067
Median age in population: 279.6694333959248
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.862
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.862
Total error diversity:				 0.121
Error (vector) diversity:			 0.126
Behavioral diversity:				 0.128
--- Run Statistics ---
Number of program evaluations used so far: 196000
Number of point (instruction) evaluations so far: 371962184
--- Timings ---
Current time: 1529615542044 milliseconds
Total Time:         659.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       260.4 seconds, 39.5%
Fitness Testing:    310.5 seconds, 47.1%
Report:              88.0 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 195
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 196
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 196
;;******************************
;; -*- Number IO problem report - generation 196
Test total error for best: 11474.688299999996
Test mean error for best: 5.73734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 102           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 56            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_dec} {:instruction print_float} {:instruction float_inc} {:instruction 96.80697452437909} {:instruction tagged_287} {:instruction integer_dup_items} {:instruction float_max} {:instruction float_mod} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_add} {:instruction float_dup_items} {:instruction float_tan} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_sin} {:instruction float_add} {:instruction float_dec} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_shove} {:instruction integer_max} {:instruction integer_mult} {:instruction integer_add} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction integer_mult} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction tagged_534} {:instruction float_add} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_yank} {:instruction in1} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction integer_shove} {:instruction float_sin} {:instruction tag_float_257} {:instruction float_swap})
Best program: (integer_pop integer_dec print_float float_inc 96.80697452437909 tagged_287 integer_dup_items float_max float_mod in1 float_dup_items integer_yank float_add float_dup_items float_tan integer_dec float_dup_items float_sin float_add float_dec in2 integer_stackdepth integer_dup_times float_dup_times float_shove integer_max integer_mult integer_add float_mod float_mod in1 integer_mult float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add float_mult float_mult float_cos integer_fromfloat float_mult tagged_534 float_add integer_sub float_add integer_sub integer_swap integer_yank in1 in1 integer_fromfloat integer_add float_flush print_integer integer_shove float_sin tag_float_257 float_swap)
Errors: [0.5753 11 0.4241 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.1491 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 280.3107
Mean: 5.606214
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 1443.5983611000008
Median total errors in population: 280.3107
Error averages by case: (54.7848152999992 11.13 49.38841569999976 11.307 34.06951800000048 11.097 40.924039400000524 10.082 51.100041899999525 11.24 50.71638999999979 11.17 44.35146340000037 11.216 48.74132690000008 11.275 44.33227769999989 11.164 52.24615599999964 11.298 41.51873490000045 11.204 53.295647599999356 11.281 47.993347999999635 11.126 47.682707200000415 11.12 54.603431499999175 11.343 43.04414830000016 10.188 37.310782399999574 11.131 46.45627629999964 10.165 45.492957800000475 10.131 48.548301100000025 11.315 47.03005010000007 11.293 53.2919560999997 11.189 50.8351882000003 11.279 39.71384909999971 10.903 40.31053820000029 11.169)
Error minima by case: (0.4247 9 0.4241 2 0.3722 2 0.1619 2 0.3687 2 0.0988 3 0.2563 2 0.276 2 0.1491 2 0.498 3 0.3954 2 0.3556 2 0.2337 9 0.3576 3 0.3743 9 0.2035 2 0.2941 9 0.2077 9 0.1022 8 0.4059 2 0.1968 2 0.2809 3 0.2071 2 0.3104 2 0.4029 2)
Average genome size in population (length): 68.393
Average program size in population (points): 69.393
Average percent parens in population: 0.015
Minimum age in population: 278.628837723828
Maximum age in population: 283.003260710183
Average age in population: 280.9864188041616
Median age in population: 281.0283251850491
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.861
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.861
Total error diversity:				 0.123
Error (vector) diversity:			 0.127
Behavioral diversity:				 0.13
--- Run Statistics ---
Number of program evaluations used so far: 197000
Number of point (instruction) evaluations so far: 373672084
--- Timings ---
Current time: 1529615545135 milliseconds
Total Time:         662.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       261.7 seconds, 39.5%
Fitness Testing:    311.9 seconds, 47.1%
Report:              88.4 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 196
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 197
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 197
;;******************************
;; -*- Number IO problem report - generation 197
Test total error for best: 11474.639299999997
Test mean error for best: 5.73732
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 102           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 56            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_dec} {:instruction print_float} {:instruction integer_max} {:instruction 96.80697452437909} {:instruction tagged_287} {:instruction integer_dup_items} {:instruction float_max} {:instruction float_mod} {:instruction in1} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_add} {:instruction float_dup_items} {:instruction float_tan} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_sin} {:instruction float_add} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_mult} {:instruction integer_add} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_max} {:instruction float_add} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction tagged_534} {:instruction float_add} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_div} {:instruction float_inc} {:instruction float_swap} {:instruction tag_float_412} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction float_swap} {:instruction float_sin} {:instruction tag_float_257} {:instruction integer_dup_times} {:instruction tag_float_149})
Best program: (integer_pop integer_dec print_float integer_max 96.80697452437909 tagged_287 integer_dup_items float_max float_mod in1 float_dup_items integer_dup_times float_add float_dup_items float_tan integer_dec float_dup_items float_sin float_add float_dec in2 float_min integer_dup_times float_dup_times float_shove integer_yankdup integer_mult integer_add float_mod float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_max float_add float_mult float_mult float_cos integer_fromfloat float_mult tagged_534 float_add integer_sub float_add integer_sub integer_swap integer_div float_inc float_swap tag_float_412 in1 integer_fromfloat integer_add float_flush print_integer float_swap float_sin tag_float_257 integer_dup_times tag_float_149)
Errors: [0.5753 11 0.4241 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.1491 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 280.3107
Mean: 5.606214
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 1626.7945787000006
Median total errors in population: 280.3107
Error averages by case: (63.416691799998546 11.114 53.36387259999966 11.362 39.4380847000004 11.103 46.852226200000594 10.107 56.582207899999425 11.265 59.855623599999795 11.19 49.171178200000455 11.207 53.78908739999962 11.299 49.94899440000019 11.174 61.92870999999966 11.329 47.16318080000067 11.208 61.284470799998836 11.286 59.670034399999075 11.138 59.06205200000125 11.164 63.24993429999856 11.349 48.13087000000093 10.186 47.1526196999995 11.118 57.99557139999957 10.194 58.43386020000057 10.134 54.57698819999954 11.324 51.92076039999959 11.306 61.30677629999927 11.216 56.23223580000031 11.304 43.50052670000025 10.922 46.59502090000049 11.174)
Error minima by case: (0.4247 9 0.4241 6 0.3722 2 0.1619 4 0.3687 6 0.0988 5 0.2563 4 0.276 6 0.1491 4 0.498 7 0.3954 4 0.3556 5 0.2337 9 0.3576 4 0.3743 11 0.2035 4 0.2941 10 0.2077 9 0.1022 8 0.4059 6 0.1968 5 0.2809 5 0.2071 6 0.3104 3 0.4029 4)
Average genome size in population (length): 68.255
Average program size in population (points): 69.255
Average percent parens in population: 0.015
Minimum age in population: 280.1791946565306
Maximum age in population: 284.327421760964
Average age in population: 282.4151057198486
Median age in population: 282.432637239942
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.847
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.847
Total error diversity:				 0.124
Error (vector) diversity:			 0.125
Behavioral diversity:				 0.127
--- Run Statistics ---
Number of program evaluations used so far: 198000
Number of point (instruction) evaluations so far: 375378621
--- Timings ---
Current time: 1529615548205 milliseconds
Total Time:         665.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       263.0 seconds, 39.5%
Fitness Testing:    313.3 seconds, 47.1%
Report:              88.8 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 197
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 198
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 198
;;******************************
;; -*- Number IO problem report - generation 198
Test total error for best: 11475.318899999997
Test mean error for best: 5.73766
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 102           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 56            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_dec} {:instruction print_float} {:instruction 96.80697452437909} {:instruction tagged_287} {:instruction integer_dup_items} {:instruction float_max} {:instruction float_mod} {:instruction in1} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_add} {:instruction float_dup_items} {:instruction float_tan} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_sin} {:instruction float_add} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction float_dup} {:instruction float_dup_times} {:instruction float_shove} {:instruction integer_add} {:instruction integer_add} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction integer_mult} {:instruction float_max} {:instruction integer_mult} {:instruction integer_add} {:instruction float_stackdepth} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction tagged_534} {:instruction float_add} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_yank} {:instruction in1} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction print_float} {:instruction float_sin} {:instruction tag_float_257} {:instruction float_swap})
Best program: (integer_pop integer_dec print_float 96.80697452437909 tagged_287 integer_dup_items float_max float_mod in1 float_dup_items integer_dup_times float_add float_dup_items float_tan integer_dec float_dup_items float_sin float_add float_dec in2 float_min float_dup float_dup_times float_shove integer_add integer_add float_mod float_mod in1 integer_mult float_max integer_mult integer_add float_stackdepth float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add float_mult float_mult float_cos integer_fromfloat float_mult float_mult tagged_534 float_add integer_sub float_add integer_sub integer_swap integer_yank in1 in1 integer_fromfloat integer_add float_flush print_integer print_float float_sin tag_float_257 float_swap)
Errors: [0.5753 11 0.4241 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.1491 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 280.3107
Mean: 5.606214
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 1363.610765200001
Median total errors in population: 280.3107
Error averages by case: (51.7851820999989 11.137 40.61442399999989 11.329 35.23098210000027 11.115 39.45274550000048 10.103 44.07174709999956 11.24 49.050608699999806 11.201 37.68831920000037 11.229 41.637005200000175 11.289 37.38738099999994 11.154 50.523275999999655 11.342 40.006799000000626 11.23 51.85512799999897 11.299 46.12734909999943 11.136 46.535890800000814 11.165 51.24596979999891 11.364 41.63644200000042 10.199 37.97109739999957 11.138 45.32766589999964 10.181 45.82521800000049 10.143 41.98250380000003 11.302 40.26858820000006 11.285 51.71825549999936 11.202 43.1782925000003 11.289 40.23298169999993 10.934 36.094912600000335 11.156)
Error minima by case: (0.4247 9 0.4241 5 0.3722 2 0.1619 4 0.3687 5 0.0988 5 0.2563 4 0.276 5 0.1491 4 0.498 6 0.3954 4 0.3556 4 0.2337 10 0.3576 4 0.3743 11 0.2035 4 0.2941 10 0.2077 9 0.1022 9 0.4059 5 0.1968 4 0.2809 5 0.2071 5 0.3104 3 0.4029 4)
Average genome size in population (length): 67.89
Average program size in population (points): 68.89
Average percent parens in population: 0.015
Minimum age in population: 281.2308712418606
Maximum age in population: 285.8878580651517
Average age in population: 283.7695261807979
Median age in population: 283.7951746486625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.849
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.849
Total error diversity:				 0.12
Error (vector) diversity:			 0.124
Behavioral diversity:				 0.126
--- Run Statistics ---
Number of program evaluations used so far: 199000
Number of point (instruction) evaluations so far: 377075896
--- Timings ---
Current time: 1529615551310 milliseconds
Total Time:         668.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       264.3 seconds, 39.5%
Fitness Testing:    314.8 seconds, 47.1%
Report:              89.2 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 198
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 199
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 199
;;******************************
;; -*- Number IO problem report - generation 199
Test total error for best: 11474.688299999996
Test mean error for best: 5.73734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 102           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 56            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_dec} {:instruction print_float} {:instruction float_inc} {:instruction 96.80697452437909} {:instruction tagged_287} {:instruction integer_dup_items} {:instruction float_max} {:instruction float_mod} {:instruction in1} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_add} {:instruction float_dup_items} {:instruction float_tan} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_sin} {:instruction float_add} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_add} {:instruction integer_mult} {:instruction integer_add} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction float_add} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction tagged_534} {:instruction float_add} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_yank} {:instruction in1} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction integer_shove} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_swap})
Best program: (integer_pop integer_dec print_float float_inc 96.80697452437909 tagged_287 integer_dup_items float_max float_mod in1 float_dup_items integer_dup_times float_add float_dup_items float_tan integer_dec float_dup_items float_sin float_add float_dec in2 float_min integer_dup_times float_dup_times float_shove integer_yankdup integer_add integer_mult integer_add float_mod float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_mult float_sub float_add float_mult float_mult float_cos integer_fromfloat float_mult float_mult tagged_534 float_add integer_sub float_add integer_sub integer_swap integer_yank in1 in1 integer_fromfloat integer_add float_flush print_integer integer_shove float_sin float_yankdup float_swap)
Errors: [0.5753 11 0.4241 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.1491 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 280.3107
Mean: 5.606214
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 1590.8177922000007
Median total errors in population: 280.3107
Error averages by case: (62.21143829999925 11.146 50.60366669999979 11.341 40.77901690000012 11.133 48.139041300000535 10.102 54.43604309999957 11.258 60.20422089999979 11.209 46.128629500000365 11.208 51.553269799999654 11.293 47.05519110000014 11.162 61.73149699999965 11.367 48.47973980000052 11.237 62.93485539999918 11.327 55.80695019999932 11.148 58.21543500000068 11.157 61.6477499999992 11.392 49.98235720000048 10.228 41.202837199999514 11.125 53.647011699999666 10.166 53.19644720000044 10.143 52.08583889999958 11.303 48.193389799999764 11.296 62.85170689999953 11.214 52.35612050000033 11.29 46.63119980000009 10.904 44.42713800000039 11.168)
Error minima by case: (0.5753 9 0.4241 5 0.3722 2 0.8381 4 0.3687 5 0.0988 5 0.2563 4 0.276 5 0.1491 4 0.498 6 0.3954 4 0.3556 4 0.2337 10 0.3576 4 0.6257 11 0.2035 4 0.2941 10 0.2077 9 0.1022 8 0.4059 5 0.1968 4 0.2809 5 0.2071 5 0.3104 3 0.4029 4)
Average genome size in population (length): 68.146
Average program size in population (points): 69.146
Average percent parens in population: 0.015
Minimum age in population: 282.2308712418606
Maximum age in population: 287.2491038050703
Average age in population: 285.1759568746343
Median age in population: 285.1873968866378
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.857
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.857
Total error diversity:				 0.121
Error (vector) diversity:			 0.125
Behavioral diversity:				 0.127
--- Run Statistics ---
Number of program evaluations used so far: 200000
Number of point (instruction) evaluations so far: 378779671
--- Timings ---
Current time: 1529615554383 milliseconds
Total Time:         671.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       265.6 seconds, 39.6%
Fitness Testing:    316.1 seconds, 47.1%
Report:              89.6 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 199
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 200
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 200
;;******************************
;; -*- Number IO problem report - generation 200
Test total error for best: 11476.997899999997
Test mean error for best: 5.73850
;;------------------------------
Outputs of best individual on training cases:
Correct output: -6.4247054459  | Program output: -7            
Correct output: 101.5758530321 | Program output: 102           
Correct output: 5.3722386499   | Program output: 5             
Correct output: 50.838076484   | Program output: 50            
Correct output: 149.3686745246 | Program output: 149           
Correct output: -86.0987731432 | Program output: -86           
Correct output: 99.2563149379  | Program output: 99            
Correct output: 100.2759538143 | Program output: 100           
Correct output: 55.8508667649  | Program output: 56            
Correct output: -120.4980478621 | Program output: -120          
Correct output: 50.3953926202  | Program output: 50            
Correct output: -86.6444443408 | Program output: -86           
Correct output: 43.2337451713  | Program output: 43            
Correct output: -69.3575988725 | Program output: -69           
Correct output: -32.3742761841 | Program output: -33           
Correct output: 21.203493141   | Program output: 21            
Correct output: 6.2941290036   | Program output: 6             
Correct output: 28.207733934   | Program output: 28            
Correct output: 3.102196665    | Program output: 3             
Correct output: 117.4058715345 | Program output: 117           
Correct output: 105.1968404292 | Program output: 105           
Correct output: -95.2809380546 | Program output: -95           
Correct output: 145.7928624605 | Program output: 145           
Correct output: 3.3104353754   | Program output: 3             
Correct output: 60.4029417431  | Program output: 60            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_dec} {:instruction print_float} {:instruction float_sub} {:instruction integer_pop} {:instruction integer_dec} {:instruction print_float} {:instruction float_inc} {:instruction 96.80697452437909} {:instruction tagged_287} {:instruction integer_dup_items} {:instruction float_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_add} {:instruction float_tan} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_sin} {:instruction float_add} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction integer_pop} {:instruction integer_yankdup} {:instruction integer_mult} {:instruction integer_add} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction integer_flush} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_rot} {:instruction float_dup} {:instruction float_add} {:instruction float_mult} {:instruction float_mult} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_mult} {:instruction tagged_534} {:instruction float_add} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_swap} {:instruction float_max} {:instruction in1} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_flush} {:instruction print_integer} {:instruction integer_shove} {:instruction tag_float_692} {:instruction tag_float_257} {:instruction float_swap})
Best program: (integer_pop integer_dec print_float float_sub integer_pop integer_dec print_float float_inc 96.80697452437909 tagged_287 integer_dup_items float_max float_max integer_stackdepth in1 integer_yankdup integer_dup_times float_add float_tan integer_dec float_dup_items float_sin float_add float_dec in2 float_min integer_dup_times float_dup_times integer_pop integer_yankdup integer_mult integer_add float_mod float_mod in1 integer_flush float_max in2 float_mult float_mult float_cos integer_fromfloat float_mult float_rot float_dup float_add float_mult float_mult float_cos integer_fromfloat float_mult float_mult tagged_534 float_add integer_sub float_add integer_sub integer_swap float_max in1 in1 integer_fromfloat integer_add float_flush print_integer integer_shove tag_float_692 tag_float_257 float_swap)
Errors: [0.5753 11 0.4241 11 0.3722 11 0.8381 10 0.3687 11 0.0988 11 0.2563 11 0.276 11 0.1491 11 0.498 11 0.3954 11 0.6444 11 0.2337 11 0.3576 11 0.6257 11 0.2035 10 0.2941 11 0.2077 10 0.1022 10 0.4059 11 0.1968 11 0.2809 11 0.7929 11 0.3104 11 0.4029 11]
Total: 280.3107
Mean: 5.606214
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 1632.721767100001
Median total errors in population: 280.3107
Error averages by case: (63.98744459999886 11.131 53.28723279999969 11.35 41.304314100000035 11.11 49.20258610000051 10.093 56.018838999999446 11.254 61.563315199999835 11.197 49.33040490000039 11.201 53.39609749999951 11.293 48.535376200000236 11.156 63.03719599999969 11.335 49.76441040000056 11.21 63.638625999999036 11.297 55.686474399999334 11.15 58.339270400000984 11.152 63.741232899998884 11.367 51.4978210000008 10.187 42.087417899999544 11.144 54.74423279999961 10.17 54.64291330000049 10.142 53.9654998999995 11.306 51.784002499999715 11.287 63.90074259999937 11.211 55.86747290000027 11.291 47.87555390000032 10.912 49.40428980000042 11.173)
Error minima by case: (0.4247 9 0.4241 5 0.3722 1 0.1619 2 0.3687 5 0.0988 2 0.2563 4 0.276 5 0.1491 4 0.498 3 0.3954 2 0.3556 2 0.2337 10 0.3576 1 0.3743 11 0.2035 2 0.2941 10 0.2077 9 0.1022 8 0.4059 5 0.1968 4 0.2809 2 0.2071 5 0.3104 2 0.4029 4)
Average genome size in population (length): 68.799
Average program size in population (points): 69.799
Average percent parens in population: 0.014
Minimum age in population: 283.2308712418606
Maximum age in population: 288.6477773145307
Average age in population: 286.5676186742637
Median age in population: 286.6532521100476
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.862
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.862
Total error diversity:				 0.135
Error (vector) diversity:			 0.139
Behavioral diversity:				 0.14
--- Run Statistics ---
Number of program evaluations used so far: 201000
Number of point (instruction) evaluations so far: 380499746
--- Timings ---
Current time: 1529615557492 milliseconds
Total Time:         674.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       266.9 seconds, 39.6%
Fitness Testing:    317.6 seconds, 47.1%
Report:              89.9 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 200
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

FAILURE
