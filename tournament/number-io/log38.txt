Command line args: clojush.problems.software.number-io :parent-selection :tournament :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
epigenetic-markers = []
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :tournament
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
report-simplifications = 0
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [[-13.679480454839734 59] 45.320519545160266]
Train Case:   1 | Input/Output: [[-40.765895499736885 18] -22.765895499736885]
Train Case:   2 | Input/Output: [[83.67574039042114 -79] 4.67574039042114]
Train Case:   3 | Input/Output: [[79.44142849116028 -30] 49.44142849116028]
Train Case:   4 | Input/Output: [[61.951044778648026 -20] 41.951044778648026]
Train Case:   5 | Input/Output: [[77.00610150368539 -13] 64.00610150368539]
Train Case:   6 | Input/Output: [[22.49416688823422 6] 28.49416688823422]
Train Case:   7 | Input/Output: [[-55.82554852191359 63] 7.174451478086411]
Train Case:   8 | Input/Output: [[-61.77924582226757 -6] -67.77924582226757]
Train Case:   9 | Input/Output: [[-93.63131459074721 67] -26.63131459074721]
Train Case:  10 | Input/Output: [[72.50732322321016 -98] -25.492676776789835]
Train Case:  11 | Input/Output: [[12.251356426634501 -4] 8.251356426634501]
Train Case:  12 | Input/Output: [[38.79601394746962 76] 114.79601394746962]
Train Case:  13 | Input/Output: [[91.10631668078503 75] 166.10631668078503]
Train Case:  14 | Input/Output: [[-40.32187601964077 -87] -127.32187601964077]
Train Case:  15 | Input/Output: [[-19.84070533332587 52] 32.15929466667413]
Train Case:  16 | Input/Output: [[7.385394145653976 -5] 2.385394145653976]
Train Case:  17 | Input/Output: [[65.91536893520521 -36] 29.91536893520521]
Train Case:  18 | Input/Output: [[77.51539744810668 20] 97.51539744810668]
Train Case:  19 | Input/Output: [[-99.99450895247233 75] -24.99450895247233]
Train Case:  20 | Input/Output: [[22.324248943485614 96] 118.32424894348561]
Train Case:  21 | Input/Output: [[41.383223133356864 -78] -36.616776866643136]
Train Case:  22 | Input/Output: [[28.907177533968394 97] 125.9071775339684]
Train Case:  23 | Input/Output: [[-14.960036414854883 100] 85.03996358514512]
Train Case:  24 | Input/Output: [[-52.90155726825188 -49] -101.90155726825188]
Test Case:   0 | Input/Output: [[-82.50945985345857 -35] -117.50945985345857]
Test Case:   1 | Input/Output: [[96.5759477952146 69] 165.5759477952146]
Test Case:   2 | Input/Output: [[-37.74608247478619 85] 47.25391752521381]
Test Case:   3 | Input/Output: [[-44.662033211944795 10] -34.662033211944795]
Test Case:   4 | Input/Output: [[-99.33961290164119 -94] -193.3396129016412]
Test Case:   5 | Input/Output: [[-40.72385440987492 73] 32.27614559012508]
Test Case:   6 | Input/Output: [[-1.242455548697734 60] 58.757544451302266]
Test Case:   7 | Input/Output: [[-77.21106760871494 97] 19.78893239128506]
Test Case:   8 | Input/Output: [[96.29201814306666 -79] 17.292018143066656]
Test Case:   9 | Input/Output: [[-79.1959574154848 -53] -132.1959574154848]
Test Case:  10 | Input/Output: [[58.11135660349274 -85] -26.888643396507263]
Test Case:  11 | Input/Output: [[61.30489811177037 42] 103.30489811177037]
Test Case:  12 | Input/Output: [[94.53177459550625 1] 95.53177459550625]
Test Case:  13 | Input/Output: [[-53.36893720902991 -61] -114.36893720902991]
Test Case:  14 | Input/Output: [[-77.64306293399916 -49] -126.64306293399916]
Test Case:  15 | Input/Output: [[-31.203406967728498 3] -28.203406967728498]
Test Case:  16 | Input/Output: [[-48.03661803757089 75] 26.96338196242911]
Test Case:  17 | Input/Output: [[-41.65501217710472 -43] -84.65501217710472]
Test Case:  18 | Input/Output: [[-74.29312563197004 72] -2.2931256319700424]
Test Case:  19 | Input/Output: [[28.90100714189134 85] 113.90100714189134]
Test Case:  20 | Input/Output: [[5.24129468063191 31] 36.24129468063191]
Test Case:  21 | Input/Output: [[25.819826241664174 33] 58.819826241664174]
Test Case:  22 | Input/Output: [[-44.581915988151266 79] 34.418084011848734]
Test Case:  23 | Input/Output: [[-31.063904246628482 73] 41.93609575337152]
Test Case:  24 | Input/Output: [[-89.64047062459795 -86] -175.64047062459795]
Test Case:  25 | Input/Output: [[-21.68247758364747 -72] -93.68247758364747]
Test Case:  26 | Input/Output: [[-98.47400906362873 -55] -153.47400906362873]
Test Case:  27 | Input/Output: [[-34.1612119750299 -45] -79.1612119750299]
Test Case:  28 | Input/Output: [[-54.748172967724074 -15] -69.74817296772407]
Test Case:  29 | Input/Output: [[68.37389788592634 63] 131.37389788592634]
Test Case:  30 | Input/Output: [[56.26617456666216 -93] -36.73382543333784]
Test Case:  31 | Input/Output: [[99.55596199656617 -35] 64.55596199656617]
Test Case:  32 | Input/Output: [[-1.1594709428307937 -51] -52.159470942830794]
Test Case:  33 | Input/Output: [[28.148605911019985 -16] 12.148605911019985]
Test Case:  34 | Input/Output: [[48.568510458191895 -4] 44.568510458191895]
Test Case:  35 | Input/Output: [[-44.23292871098352 -40] -84.23292871098351]
Test Case:  36 | Input/Output: [[35.79928108223069 86] 121.79928108223069]
Test Case:  37 | Input/Output: [[30.445527410884097 82] 112.4455274108841]
Test Case:  38 | Input/Output: [[-39.341942593645676 14] -25.341942593645676]
Test Case:  39 | Input/Output: [[-34.912629797268565 -89] -123.91262979726856]
Test Case:  40 | Input/Output: [[-63.34800546175223 14] -49.34800546175223]
Test Case:  41 | Input/Output: [[-26.342950218088276 74] 47.657049781911724]
Test Case:  42 | Input/Output: [[8.593093616320374 -38] -29.406906383679626]
Test Case:  43 | Input/Output: [[-85.21823085090952 12] -73.21823085090952]
Test Case:  44 | Input/Output: [[52.901960007502225 93] 145.90196000750223]
Test Case:  45 | Input/Output: [[83.25347772191793 29] 112.25347772191793]
Test Case:  46 | Input/Output: [[88.0840796184469 -35] 53.08407961844691]
Test Case:  47 | Input/Output: [[76.61375293800057 67] 143.61375293800057]
Test Case:  48 | Input/Output: [[-31.91333304955917 -58] -89.91333304955917]
Test Case:  49 | Input/Output: [[-53.96601383525699 68] 14.033986164743013]
Test Case:  50 | Input/Output: [[31.29209952314747 -66] -34.70790047685253]
Test Case:  51 | Input/Output: [[64.84664243049721 61] 125.84664243049721]
Test Case:  52 | Input/Output: [[-24.68797817898654 79] 54.31202182101346]
Test Case:  53 | Input/Output: [[-18.05705086401626 4] -14.057050864016261]
Test Case:  54 | Input/Output: [[92.50406611496592 94] 186.50406611496592]
Test Case:  55 | Input/Output: [[-42.00313979679342 47] 4.99686020320658]
Test Case:  56 | Input/Output: [[16.592485847121324 3] 19.592485847121324]
Test Case:  57 | Input/Output: [[-40.88699026566136 -2] -42.88699026566136]
Test Case:  58 | Input/Output: [[-15.997200022811725 53] 37.002799977188275]
Test Case:  59 | Input/Output: [[-68.24075510275212 -29] -97.24075510275212]
Test Case:  60 | Input/Output: [[-95.20724075458176 90] -5.207240754581761]
Test Case:  61 | Input/Output: [[29.407637351945766 -10] 19.407637351945766]
Test Case:  62 | Input/Output: [[70.44132963925924 59] 129.44132963925924]
Test Case:  63 | Input/Output: [[-51.902311915006 -38] -89.90231191500601]
Test Case:  64 | Input/Output: [[-33.077790187962506 -35] -68.0777901879625]
Test Case:  65 | Input/Output: [[-91.72303512533301 -64] -155.723035125333]
Test Case:  66 | Input/Output: [[64.59782870293319 18] 82.59782870293319]
Test Case:  67 | Input/Output: [[60.75394954855548 -88] -27.246050451444518]
Test Case:  68 | Input/Output: [[-33.68106305787468 -9] -42.68106305787468]
Test Case:  69 | Input/Output: [[-14.29787671394432 -27] -41.29787671394432]
Test Case:  70 | Input/Output: [[1.815038445067941 -29] -27.18496155493206]
Test Case:  71 | Input/Output: [[28.1506268829923 -94] -65.8493731170077]
Test Case:  72 | Input/Output: [[72.04983771305692 74] 146.04983771305692]
Test Case:  73 | Input/Output: [[92.70521630121664 -58] 34.70521630121664]
Test Case:  74 | Input/Output: [[48.17398783934064 -46] 2.17398783934064]
Test Case:  75 | Input/Output: [[-76.01145005177389 -92] -168.0114500517739]
Test Case:  76 | Input/Output: [[-84.39140428133976 64] -20.39140428133976]
Test Case:  77 | Input/Output: [[38.79865324563556 -79] -40.20134675436444]
Test Case:  78 | Input/Output: [[28.332659205683342 -45] -16.667340794316658]
Test Case:  79 | Input/Output: [[24.649098483209173 -21] 3.6490984832091726]
Test Case:  80 | Input/Output: [[97.77501633822573 90] 187.77501633822573]
Test Case:  81 | Input/Output: [[-52.05133801268664 51] -1.0513380126866423]
Test Case:  82 | Input/Output: [[42.29686119742334 -83] -40.70313880257666]
Test Case:  83 | Input/Output: [[97.50867136097867 -42] 55.50867136097867]
Test Case:  84 | Input/Output: [[81.00757453556483 -24] 57.00757453556483]
Test Case:  85 | Input/Output: [[85.76390348896709 -59] 26.763903488967088]
Test Case:  86 | Input/Output: [[-63.34645213764076 72] 8.65354786235924]
Test Case:  87 | Input/Output: [[-26.458537482826742 13] -13.458537482826742]
Test Case:  88 | Input/Output: [[-91.30199594804382 -43] -134.30199594804384]
Test Case:  89 | Input/Output: [[-58.172780846426384 -1] -59.172780846426384]
Test Case:  90 | Input/Output: [[7.931013531993017 -68] -60.06898646800698]
Test Case:  91 | Input/Output: [[50.763175170341555 -40] 10.763175170341555]
Test Case:  92 | Input/Output: [[44.3886734130177 -38] 6.388673413017699]
Test Case:  93 | Input/Output: [[-19.982386057225952 -6] -25.982386057225952]
Test Case:  94 | Input/Output: [[89.02787219375517 -39] 50.02787219375517]
Test Case:  95 | Input/Output: [[-8.00995006122261 -25] -33.00995006122261]
Test Case:  96 | Input/Output: [[68.55677508861578 21] 89.55677508861578]
Test Case:  97 | Input/Output: [[-88.06392834371479 -2] -90.06392834371479]
Test Case:  98 | Input/Output: [[-22.81777714833717 4] -18.81777714833717]
Test Case:  99 | Input/Output: [[62.23723893588834 -93] -30.762761064111658]
Test Case: 100 | Input/Output: [[-50.43565145387521 36] -14.43565145387521]
Test Case: 101 | Input/Output: [[-68.3323318019085 -9] -77.3323318019085]
Test Case: 102 | Input/Output: [[-73.399303552213 -8] -81.399303552213]
Test Case: 103 | Input/Output: [[29.56422575694532 58] 87.56422575694532]
Test Case: 104 | Input/Output: [[-4.8200182921525965 43] 38.1799817078474]
Test Case: 105 | Input/Output: [[-96.70476016307335 74] -22.704760163073345]
Test Case: 106 | Input/Output: [[2.949834026251466 -92] -89.05016597374853]
Test Case: 107 | Input/Output: [[58.74430993143096 89] 147.74430993143096]
Test Case: 108 | Input/Output: [[53.320262013252744 -44] 9.320262013252744]
Test Case: 109 | Input/Output: [[-52.36446920150144 49] -3.364469201501443]
Test Case: 110 | Input/Output: [[-11.932450294995817 90] 78.06754970500418]
Test Case: 111 | Input/Output: [[-6.047818547571765 81] 74.95218145242823]
Test Case: 112 | Input/Output: [[-40.159689196155625 16] -24.159689196155625]
Test Case: 113 | Input/Output: [[-79.65751877046696 70] -9.657518770466964]
Test Case: 114 | Input/Output: [[-22.02140159245431 15] -7.0214015924543105]
Test Case: 115 | Input/Output: [[4.431368427352851 -58] -53.56863157264715]
Test Case: 116 | Input/Output: [[84.33791519175892 -8] 76.33791519175892]
Test Case: 117 | Input/Output: [[89.86554443814629 41] 130.8655444381463]
Test Case: 118 | Input/Output: [[-87.57753918567468 -69] -156.57753918567468]
Test Case: 119 | Input/Output: [[-72.26611653397181 -13] -85.26611653397181]
Test Case: 120 | Input/Output: [[57.90990340104199 -24] 33.90990340104199]
Test Case: 121 | Input/Output: [[-69.14914159143368 -100] -169.14914159143368]
Test Case: 122 | Input/Output: [[-81.10968512283144 47] -34.109685122831436]
Test Case: 123 | Input/Output: [[83.22337013734207 -20] 63.22337013734207]
Test Case: 124 | Input/Output: [[-2.408510441524726 -54] -56.408510441524726]
Test Case: 125 | Input/Output: [[-59.50460921453149 35] -24.50460921453149]
Test Case: 126 | Input/Output: [[-67.7093478024763 -82] -149.70934780247632]
Test Case: 127 | Input/Output: [[86.576214976655 10] 96.576214976655]
Test Case: 128 | Input/Output: [[79.2721539967944 59] 138.2721539967944]
Test Case: 129 | Input/Output: [[-41.66912911890756 22] -19.669129118907563]
Test Case: 130 | Input/Output: [[-67.93038680773958 -43] -110.93038680773958]
Test Case: 131 | Input/Output: [[-9.419790582365906 1] -8.419790582365906]
Test Case: 132 | Input/Output: [[-3.9483304807552884 -29] -32.94833048075529]
Test Case: 133 | Input/Output: [[-30.950396030729422 62] 31.049603969270578]
Test Case: 134 | Input/Output: [[-57.24281638753956 -95] -152.24281638753956]
Test Case: 135 | Input/Output: [[62.22899464998608 65] 127.22899464998608]
Test Case: 136 | Input/Output: [[-82.335749265746 47] -35.335749265746]
Test Case: 137 | Input/Output: [[-12.210611791863826 10] -2.210611791863826]
Test Case: 138 | Input/Output: [[-82.87714791847193 98] 15.122852081528066]
Test Case: 139 | Input/Output: [[-10.868253376697098 -99] -109.8682533766971]
Test Case: 140 | Input/Output: [[-47.98791192000835 -18] -65.98791192000834]
Test Case: 141 | Input/Output: [[0.885485016785708 -81] -80.11451498321429]
Test Case: 142 | Input/Output: [[-79.6675389572687 5] -74.6675389572687]
Test Case: 143 | Input/Output: [[34.66092268580553 -3] 31.66092268580553]
Test Case: 144 | Input/Output: [[-42.180808428370085 -51] -93.18080842837009]
Test Case: 145 | Input/Output: [[-73.0943512952627 28] -45.0943512952627]
Test Case: 146 | Input/Output: [[29.899774372276113 -85] -55.10022562772389]
Test Case: 147 | Input/Output: [[46.98487744211576 -71] -24.01512255788424]
Test Case: 148 | Input/Output: [[-84.58289062849028 -83] -167.58289062849028]
Test Case: 149 | Input/Output: [[17.01600901799874 40] 57.01600901799874]
Test Case: 150 | Input/Output: [[58.99288768246774 -21] 37.99288768246774]
Test Case: 151 | Input/Output: [[3.956283382291531 59] 62.95628338229153]
Test Case: 152 | Input/Output: [[-58.58571352910411 46] -12.585713529104112]
Test Case: 153 | Input/Output: [[-53.19875205025095 -4] -57.19875205025095]
Test Case: 154 | Input/Output: [[-21.971400062105204 -12] -33.971400062105204]
Test Case: 155 | Input/Output: [[9.349787273996839 -42] -32.65021272600316]
Test Case: 156 | Input/Output: [[-82.49704265516931 30] -52.49704265516931]
Test Case: 157 | Input/Output: [[-33.38918545039351 -97] -130.3891854503935]
Test Case: 158 | Input/Output: [[60.584007670128045 -73] -12.415992329871955]
Test Case: 159 | Input/Output: [[98.13696890391148 80] 178.13696890391148]
Test Case: 160 | Input/Output: [[-91.77116449569078 61] -30.771164495690783]
Test Case: 161 | Input/Output: [[81.69926905747062 -74] 7.699269057470616]
Test Case: 162 | Input/Output: [[-77.15051355001631 -50] -127.15051355001631]
Test Case: 163 | Input/Output: [[-38.15600671746928 -4] -42.15600671746928]
Test Case: 164 | Input/Output: [[-19.641071361877053 55] 35.35892863812295]
Test Case: 165 | Input/Output: [[27.879467293869382 7] 34.87946729386938]
Test Case: 166 | Input/Output: [[-59.07817901831392 -35] -94.07817901831392]
Test Case: 167 | Input/Output: [[-10.418842635913705 51] 40.581157364086295]
Test Case: 168 | Input/Output: [[-53.8883552652256 55] 1.1116447347744014]
Test Case: 169 | Input/Output: [[96.16292270008313 -53] 43.16292270008313]
Test Case: 170 | Input/Output: [[82.49501659836369 -23] 59.49501659836369]
Test Case: 171 | Input/Output: [[48.93916261626467 -84] -35.06083738373533]
Test Case: 172 | Input/Output: [[66.80444394444527 -15] 51.80444394444527]
Test Case: 173 | Input/Output: [[-83.85234608277253 -84] -167.85234608277253]
Test Case: 174 | Input/Output: [[78.24689500237307 95] 173.24689500237307]
Test Case: 175 | Input/Output: [[-84.8842267449897 93] 8.115773255010296]
Test Case: 176 | Input/Output: [[-6.699820125267905 31] 24.300179874732095]
Test Case: 177 | Input/Output: [[-92.61573639457146 -24] -116.61573639457146]
Test Case: 178 | Input/Output: [[50.46305517362876 27] 77.46305517362876]
Test Case: 179 | Input/Output: [[75.21351092249046 38] 113.21351092249046]
Test Case: 180 | Input/Output: [[7.891874015434368 71] 78.89187401543437]
Test Case: 181 | Input/Output: [[28.561577078237235 83] 111.56157707823724]
Test Case: 182 | Input/Output: [[81.63287824199679 -100] -18.367121758003208]
Test Case: 183 | Input/Output: [[54.74592349869852 89] 143.74592349869852]
Test Case: 184 | Input/Output: [[-18.964168312566358 -32] -50.96416831256636]
Test Case: 185 | Input/Output: [[70.35441638124053 -7] 63.354416381240526]
Test Case: 186 | Input/Output: [[99.609844349875 69] 168.609844349875]
Test Case: 187 | Input/Output: [[-7.11981631498584 14] 6.88018368501416]
Test Case: 188 | Input/Output: [[-39.82533070758893 -76] -115.82533070758893]
Test Case: 189 | Input/Output: [[45.67716287503151 -23] 22.677162875031513]
Test Case: 190 | Input/Output: [[61.940991132231005 -8] 53.940991132231005]
Test Case: 191 | Input/Output: [[-11.119667129229185 -25] -36.119667129229185]
Test Case: 192 | Input/Output: [[-91.85488445762881 94] 2.1451155423711867]
Test Case: 193 | Input/Output: [[73.0105003019693 64] 137.0105003019693]
Test Case: 194 | Input/Output: [[-2.6064724858540558 21] 18.393527514145944]
Test Case: 195 | Input/Output: [[-43.796782794765974 -98] -141.796782794766]
Test Case: 196 | Input/Output: [[75.3193047598887 89] 164.3193047598887]
Test Case: 197 | Input/Output: [[-7.444563643026996 -8] -15.444563643026996]
Test Case: 198 | Input/Output: [[-12.940103098120886 -79] -91.94010309812089]
Test Case: 199 | Input/Output: [[-37.050658831830695 -19] -56.050658831830695]
Test Case: 200 | Input/Output: [[-5.262494774191964 25] 19.737505225808036]
Test Case: 201 | Input/Output: [[-79.8009195771932 -41] -120.8009195771932]
Test Case: 202 | Input/Output: [[-55.871217329522274 21] -34.871217329522274]
Test Case: 203 | Input/Output: [[-62.49917299923817 51] -11.49917299923817]
Test Case: 204 | Input/Output: [[-73.96357811703817 76] 2.0364218829618324]
Test Case: 205 | Input/Output: [[-52.43755679036053 -90] -142.43755679036053]
Test Case: 206 | Input/Output: [[68.82077082064981 -13] 55.82077082064981]
Test Case: 207 | Input/Output: [[-50.19827039754703 30] -20.198270397547027]
Test Case: 208 | Input/Output: [[-33.7228147365404 62] 28.2771852634596]
Test Case: 209 | Input/Output: [[-4.525639024122015 27] 22.474360975877985]
Test Case: 210 | Input/Output: [[-96.16686862684362 98] 1.8331313731563768]
Test Case: 211 | Input/Output: [[-72.57152289376393 -35] -107.57152289376393]
Test Case: 212 | Input/Output: [[-41.91240385005379 -63] -104.91240385005379]
Test Case: 213 | Input/Output: [[47.00582799968572 34] 81.00582799968572]
Test Case: 214 | Input/Output: [[2.4599536364852526 -81] -78.54004636351475]
Test Case: 215 | Input/Output: [[65.35446053575501 17] 82.35446053575501]
Test Case: 216 | Input/Output: [[-6.188261872320581 93] 86.81173812767942]
Test Case: 217 | Input/Output: [[28.464684033185932 79] 107.46468403318593]
Test Case: 218 | Input/Output: [[33.26947787657767 40] 73.26947787657767]
Test Case: 219 | Input/Output: [[77.59427672307478 -16] 61.594276723074785]
Test Case: 220 | Input/Output: [[55.64359402340179 -49] 6.643594023401789]
Test Case: 221 | Input/Output: [[77.03678420049954 -27] 50.03678420049954]
Test Case: 222 | Input/Output: [[-48.4399327413995 -74] -122.4399327413995]
Test Case: 223 | Input/Output: [[-19.576049962803552 62] 42.42395003719645]
Test Case: 224 | Input/Output: [[10.734821756272652 39] 49.73482175627265]
Test Case: 225 | Input/Output: [[-81.83892369893537 -10] -91.83892369893537]
Test Case: 226 | Input/Output: [[2.1262512328061405 -95] -92.87374876719386]
Test Case: 227 | Input/Output: [[-85.67541256245997 36] -49.67541256245997]
Test Case: 228 | Input/Output: [[-97.73320311921108 32] -65.73320311921108]
Test Case: 229 | Input/Output: [[-78.77543190078151 -96] -174.7754319007815]
Test Case: 230 | Input/Output: [[-78.73245547871339 33] -45.73245547871339]
Test Case: 231 | Input/Output: [[-93.5223784950009 92] -1.5223784950008934]
Test Case: 232 | Input/Output: [[44.40995243139773 50] 94.40995243139773]
Test Case: 233 | Input/Output: [[-92.45862735704682 -58] -150.45862735704682]
Test Case: 234 | Input/Output: [[13.401133933584958 56] 69.40113393358496]
Test Case: 235 | Input/Output: [[38.56443045752022 -64] -25.435569542479783]
Test Case: 236 | Input/Output: [[97.82227951502236 79] 176.82227951502236]
Test Case: 237 | Input/Output: [[-2.755659169359916 -88] -90.75565916935992]
Test Case: 238 | Input/Output: [[98.8484648552508 -14] 84.8484648552508]
Test Case: 239 | Input/Output: [[-48.124123250824844 49] 0.8758767491751556]
Test Case: 240 | Input/Output: [[43.42136946396275 -19] 24.421369463962748]
Test Case: 241 | Input/Output: [[57.21915798138869 -65] -7.78084201861131]
Test Case: 242 | Input/Output: [[26.238799459243396 37] 63.238799459243396]
Test Case: 243 | Input/Output: [[78.3230065718615 29] 107.3230065718615]
Test Case: 244 | Input/Output: [[-41.738992622442005 62] 20.261007377557995]
Test Case: 245 | Input/Output: [[-19.59837075004171 -37] -56.59837075004171]
Test Case: 246 | Input/Output: [[-42.7702905400007 -20] -62.7702905400007]
Test Case: 247 | Input/Output: [[79.99024590869413 63] 142.99024590869413]
Test Case: 248 | Input/Output: [[87.72707606117865 24] 111.72707606117865]
Test Case: 249 | Input/Output: [[-28.852198639054578 -89] -117.85219863905458]
Test Case: 250 | Input/Output: [[66.72710849007134 89] 155.72710849007134]
Test Case: 251 | Input/Output: [[22.726006904474573 42] 64.72600690447457]
Test Case: 252 | Input/Output: [[14.868320881122472 98] 112.86832088112247]
Test Case: 253 | Input/Output: [[66.67074708018902 42] 108.67074708018902]
Test Case: 254 | Input/Output: [[92.15261811150143 72] 164.15261811150143]
Test Case: 255 | Input/Output: [[-23.77665906111413 71] 47.22334093888587]
Test Case: 256 | Input/Output: [[-66.98019113875904 -6] -72.98019113875904]
Test Case: 257 | Input/Output: [[90.95886625166395 28] 118.95886625166395]
Test Case: 258 | Input/Output: [[-55.03708174413306 -22] -77.03708174413306]
Test Case: 259 | Input/Output: [[92.26604516254645 45] 137.26604516254645]
Test Case: 260 | Input/Output: [[-83.06977710636103 44] -39.06977710636103]
Test Case: 261 | Input/Output: [[14.877288340389953 100] 114.87728834038995]
Test Case: 262 | Input/Output: [[-69.18010094496769 -75] -144.1801009449677]
Test Case: 263 | Input/Output: [[-75.45327547096959 -13] -88.45327547096959]
Test Case: 264 | Input/Output: [[-85.87019843579165 16] -69.87019843579165]
Test Case: 265 | Input/Output: [[-73.67299265312647 43] -30.67299265312647]
Test Case: 266 | Input/Output: [[-32.76205606800396 -70] -102.76205606800396]
Test Case: 267 | Input/Output: [[-4.903979514386521 -24] -28.90397951438652]
Test Case: 268 | Input/Output: [[-94.12917592814212 -97] -191.1291759281421]
Test Case: 269 | Input/Output: [[93.42310670908489 26] 119.42310670908489]
Test Case: 270 | Input/Output: [[85.73215342622413 18] 103.73215342622413]
Test Case: 271 | Input/Output: [[69.93783538221172 -57] 12.937835382211716]
Test Case: 272 | Input/Output: [[83.18275820968685 -90] -6.8172417903131475]
Test Case: 273 | Input/Output: [[19.46672866692471 61] 80.46672866692471]
Test Case: 274 | Input/Output: [[32.89469959747751 -5] 27.894699597477512]
Test Case: 275 | Input/Output: [[7.9703780717517105 34] 41.97037807175171]
Test Case: 276 | Input/Output: [[-18.600343172947802 -9] -27.600343172947802]
Test Case: 277 | Input/Output: [[82.24809078810273 45] 127.24809078810273]
Test Case: 278 | Input/Output: [[30.897039217686796 44] 74.8970392176868]
Test Case: 279 | Input/Output: [[79.48031584835198 -12] 67.48031584835198]
Test Case: 280 | Input/Output: [[-25.293812381056966 -55] -80.29381238105697]
Test Case: 281 | Input/Output: [[-34.989054153619165 73] 38.010945846380835]
Test Case: 282 | Input/Output: [[-94.31955164714827 56] -38.31955164714827]
Test Case: 283 | Input/Output: [[52.13440317449562 29] 81.13440317449562]
Test Case: 284 | Input/Output: [[-17.980372154216482 46] 28.019627845783518]
Test Case: 285 | Input/Output: [[-53.27433571426488 53] -0.274335714264879]
Test Case: 286 | Input/Output: [[-60.28459406431752 64] 3.715405935682483]
Test Case: 287 | Input/Output: [[9.366391071798816 26] 35.366391071798816]
Test Case: 288 | Input/Output: [[82.06975621141311 -58] 24.069756211413107]
Test Case: 289 | Input/Output: [[-51.98656022916121 93] 41.01343977083879]
Test Case: 290 | Input/Output: [[-89.1687438384798 60] -29.1687438384798]
Test Case: 291 | Input/Output: [[-17.609808143388776 24] 6.390191856611224]
Test Case: 292 | Input/Output: [[78.87267599830474 -55] 23.872675998304743]
Test Case: 293 | Input/Output: [[-25.62568588951801 -2] -27.62568588951801]
Test Case: 294 | Input/Output: [[78.24711141530736 56] 134.24711141530736]
Test Case: 295 | Input/Output: [[-41.41785911063498 18] -23.41785911063498]
Test Case: 296 | Input/Output: [[99.75120194737252 -99] 0.7512019473725218]
Test Case: 297 | Input/Output: [[-29.035123647135364 85] 55.964876352864636]
Test Case: 298 | Input/Output: [[66.26578065722614 -55] 11.265780657226145]
Test Case: 299 | Input/Output: [[-49.34616531114462 84] 34.65383468885538]
Test Case: 300 | Input/Output: [[-20.428822744561216 66] 45.57117725543878]
Test Case: 301 | Input/Output: [[-91.57753894814923 -41] -132.57753894814923]
Test Case: 302 | Input/Output: [[-0.17963823336914686 -80] -80.17963823336915]
Test Case: 303 | Input/Output: [[-64.8932195270985 -41] -105.8932195270985]
Test Case: 304 | Input/Output: [[-19.555416177993564 56] 36.444583822006436]
Test Case: 305 | Input/Output: [[-77.55614521923142 93] 15.443854780768575]
Test Case: 306 | Input/Output: [[-96.79994482793319 -54] -150.7999448279332]
Test Case: 307 | Input/Output: [[73.16250751902632 -42] 31.16250751902632]
Test Case: 308 | Input/Output: [[22.57405648967803 -95] -72.42594351032197]
Test Case: 309 | Input/Output: [[-64.54256230365812 43] -21.542562303658116]
Test Case: 310 | Input/Output: [[54.15451449337405 -92] -37.84548550662595]
Test Case: 311 | Input/Output: [[-50.97843872818517 -56] -106.97843872818517]
Test Case: 312 | Input/Output: [[77.67896954274025 -70] 7.678969542740248]
Test Case: 313 | Input/Output: [[-90.08955419016516 -66] -156.08955419016516]
Test Case: 314 | Input/Output: [[26.642531714994135 70] 96.64253171499413]
Test Case: 315 | Input/Output: [[-6.455154455171581 19] 12.54484554482842]
Test Case: 316 | Input/Output: [[-86.29759111244262 11] -75.29759111244262]
Test Case: 317 | Input/Output: [[96.27220894130485 -72] 24.272208941304854]
Test Case: 318 | Input/Output: [[-11.384740846427576 -8] -19.384740846427576]
Test Case: 319 | Input/Output: [[-64.35392109348808 90] 25.646078906511917]
Test Case: 320 | Input/Output: [[55.739163850518395 50] 105.7391638505184]
Test Case: 321 | Input/Output: [[29.915673020016925 15] 44.915673020016925]
Test Case: 322 | Input/Output: [[-14.599963996069349 34] 19.40003600393065]
Test Case: 323 | Input/Output: [[-55.512613250546174 85] 29.487386749453826]
Test Case: 324 | Input/Output: [[-8.981936837422879 77] 68.01806316257712]
Test Case: 325 | Input/Output: [[-38.651347703721804 -20] -58.651347703721804]
Test Case: 326 | Input/Output: [[38.58922540270075 -41] -2.410774597299252]
Test Case: 327 | Input/Output: [[-66.2516704680624 95] 28.7483295319376]
Test Case: 328 | Input/Output: [[-37.53149935870945 -84] -121.53149935870945]
Test Case: 329 | Input/Output: [[-57.35903051385034 71] 13.640969486149658]
Test Case: 330 | Input/Output: [[-6.030091824238596 87] 80.9699081757614]
Test Case: 331 | Input/Output: [[-66.83612325859751 65] -1.8361232585975102]
Test Case: 332 | Input/Output: [[25.17334406185732 -90] -64.82665593814268]
Test Case: 333 | Input/Output: [[-97.71388128802793 -96] -193.71388128802795]
Test Case: 334 | Input/Output: [[51.324405361004665 3] 54.324405361004665]
Test Case: 335 | Input/Output: [[20.634221815699917 48] 68.63422181569992]
Test Case: 336 | Input/Output: [[69.8921494398353 71] 140.8921494398353]
Test Case: 337 | Input/Output: [[-32.94990415249555 96] 63.05009584750445]
Test Case: 338 | Input/Output: [[91.37177398179912 14] 105.37177398179912]
Test Case: 339 | Input/Output: [[-68.08625460104682 -52] -120.08625460104682]
Test Case: 340 | Input/Output: [[8.08268791128468 42] 50.08268791128468]
Test Case: 341 | Input/Output: [[-13.734888268434304 76] 62.265111731565696]
Test Case: 342 | Input/Output: [[42.343796065386925 -12] 30.343796065386925]
Test Case: 343 | Input/Output: [[18.258894137990353 -35] -16.741105862009647]
Test Case: 344 | Input/Output: [[-32.477327684875405 -4] -36.477327684875405]
Test Case: 345 | Input/Output: [[-66.31995591355914 98] 31.68004408644086]
Test Case: 346 | Input/Output: [[32.33134271363576 10] 42.33134271363576]
Test Case: 347 | Input/Output: [[0.1022713084181106 -96] -95.89772869158189]
Test Case: 348 | Input/Output: [[22.735623023742704 -60] -37.264376976257296]
Test Case: 349 | Input/Output: [[-65.31073694692907 -76] -141.31073694692907]
Test Case: 350 | Input/Output: [[2.779134834320061 -30] -27.22086516567994]
Test Case: 351 | Input/Output: [[65.85845873828225 14] 79.85845873828225]
Test Case: 352 | Input/Output: [[42.54476550969366 -43] -0.45523449030633856]
Test Case: 353 | Input/Output: [[16.641998041594846 29] 45.641998041594846]
Test Case: 354 | Input/Output: [[-60.4338466011056 -27] -87.4338466011056]
Test Case: 355 | Input/Output: [[-14.689155057559518 62] 47.31084494244048]
Test Case: 356 | Input/Output: [[82.2465720878883 93] 175.2465720878883]
Test Case: 357 | Input/Output: [[-96.08526722618807 63] -33.085267226188066]
Test Case: 358 | Input/Output: [[-68.4201991717899 15] -53.4201991717899]
Test Case: 359 | Input/Output: [[-87.81714458890002 -59] -146.81714458890002]
Test Case: 360 | Input/Output: [[-97.05735006610227 -72] -169.0573500661023]
Test Case: 361 | Input/Output: [[1.056427688903952 87] 88.05642768890395]
Test Case: 362 | Input/Output: [[66.69475408711884 -98] -31.305245912881162]
Test Case: 363 | Input/Output: [[81.72446730035213 67] 148.72446730035213]
Test Case: 364 | Input/Output: [[-43.08441452049796 12] -31.08441452049796]
Test Case: 365 | Input/Output: [[-74.86909542076381 0] -74.86909542076381]
Test Case: 366 | Input/Output: [[-78.84656829193764 -39] -117.84656829193764]
Test Case: 367 | Input/Output: [[-54.46984354357267 47] -7.469843543572672]
Test Case: 368 | Input/Output: [[-11.59300257551432 -66] -77.59300257551432]
Test Case: 369 | Input/Output: [[90.06988928537248 68] 158.06988928537248]
Test Case: 370 | Input/Output: [[-59.20600412167359 5] -54.20600412167359]
Test Case: 371 | Input/Output: [[57.66136730723622 -33] 24.66136730723622]
Test Case: 372 | Input/Output: [[26.08400587666746 90] 116.08400587666746]
Test Case: 373 | Input/Output: [[94.08810484392575 -36] 58.08810484392575]
Test Case: 374 | Input/Output: [[-66.95303699074262 24] -42.95303699074262]
Test Case: 375 | Input/Output: [[3.2212448395148527 -85] -81.77875516048515]
Test Case: 376 | Input/Output: [[72.57195169809032 8] 80.57195169809032]
Test Case: 377 | Input/Output: [[16.511149322032722 13] 29.511149322032722]
Test Case: 378 | Input/Output: [[24.200282482924408 -59] -34.79971751707559]
Test Case: 379 | Input/Output: [[-68.66924064557993 53] -15.669240645579933]
Test Case: 380 | Input/Output: [[11.093963192856563 1] 12.093963192856563]
Test Case: 381 | Input/Output: [[-19.653119104394463 -17] -36.65311910439446]
Test Case: 382 | Input/Output: [[-38.48142585603982 -95] -133.48142585603983]
Test Case: 383 | Input/Output: [[-68.50914242348667 41] -27.509142423486665]
Test Case: 384 | Input/Output: [[-28.20758193047135 -78] -106.20758193047135]
Test Case: 385 | Input/Output: [[-68.3674884555185 -48] -116.3674884555185]
Test Case: 386 | Input/Output: [[-55.19495066712552 -93] -148.1949506671255]
Test Case: 387 | Input/Output: [[76.39735116054786 87] 163.39735116054786]
Test Case: 388 | Input/Output: [[-13.764116414660975 84] 70.23588358533902]
Test Case: 389 | Input/Output: [[95.44322831357147 -45] 50.44322831357147]
Test Case: 390 | Input/Output: [[-68.055766451174 -27] -95.055766451174]
Test Case: 391 | Input/Output: [[-42.68501306266683 71] 28.314986937333167]
Test Case: 392 | Input/Output: [[40.519224612773826 19] 59.519224612773826]
Test Case: 393 | Input/Output: [[29.338329570039548 -9] 20.338329570039548]
Test Case: 394 | Input/Output: [[67.8851668495328 25] 92.8851668495328]
Test Case: 395 | Input/Output: [[-72.1797937399667 2] -70.1797937399667]
Test Case: 396 | Input/Output: [[23.951956852448816 -60] -36.04804314755118]
Test Case: 397 | Input/Output: [[-58.39379453420142 -23] -81.39379453420142]
Test Case: 398 | Input/Output: [[25.809644831178574 92] 117.80964483117857]
Test Case: 399 | Input/Output: [[-41.64642248221509 -14] -55.64642248221509]
Test Case: 400 | Input/Output: [[91.70868570095581 37] 128.7086857009558]
Test Case: 401 | Input/Output: [[43.5565048950489 -94] -50.4434951049511]
Test Case: 402 | Input/Output: [[30.277389026430484 86] 116.27738902643048]
Test Case: 403 | Input/Output: [[-13.250320031235077 99] 85.74967996876492]
Test Case: 404 | Input/Output: [[-31.456020873010175 37] 5.543979126989825]
Test Case: 405 | Input/Output: [[89.46782651240923 67] 156.46782651240923]
Test Case: 406 | Input/Output: [[-11.470474106741221 -18] -29.47047410674122]
Test Case: 407 | Input/Output: [[51.32093061624897 -91] -39.67906938375103]
Test Case: 408 | Input/Output: [[5.587819457015939 90] 95.58781945701594]
Test Case: 409 | Input/Output: [[37.34971663321966 -12] 25.349716633219657]
Test Case: 410 | Input/Output: [[-47.90644100449295 -54] -101.90644100449295]
Test Case: 411 | Input/Output: [[-2.611660362619432 -80] -82.61166036261943]
Test Case: 412 | Input/Output: [[-95.59738440370916 38] -57.59738440370916]
Test Case: 413 | Input/Output: [[51.496663837551296 54] 105.4966638375513]
Test Case: 414 | Input/Output: [[-20.982774519932306 17] -3.982774519932306]
Test Case: 415 | Input/Output: [[-65.63896176286983 -51] -116.63896176286983]
Test Case: 416 | Input/Output: [[-52.80184605411085 -34] -86.80184605411085]
Test Case: 417 | Input/Output: [[-31.133460217380787 -78] -109.13346021738079]
Test Case: 418 | Input/Output: [[-8.665311729489275 51] 42.334688270510725]
Test Case: 419 | Input/Output: [[-58.88227883473674 0] -58.88227883473674]
Test Case: 420 | Input/Output: [[-41.0342110606702 72] 30.965788939329798]
Test Case: 421 | Input/Output: [[57.18910020251616 -52] 5.189100202516158]
Test Case: 422 | Input/Output: [[-52.31197302519459 -4] -56.31197302519459]
Test Case: 423 | Input/Output: [[-55.379278304136356 99] 43.620721695863644]
Test Case: 424 | Input/Output: [[24.08483284288208 -48] -23.91516715711792]
Test Case: 425 | Input/Output: [[35.87090166489406 -64] -28.129098335105937]
Test Case: 426 | Input/Output: [[-24.836873152956287 39] 14.163126847043713]
Test Case: 427 | Input/Output: [[-83.30575478867902 -38] -121.30575478867902]
Test Case: 428 | Input/Output: [[54.534271515135316 98] 152.53427151513532]
Test Case: 429 | Input/Output: [[-87.87378500062802 60] -27.87378500062802]
Test Case: 430 | Input/Output: [[2.5569565732860724 -25] -22.443043426713928]
Test Case: 431 | Input/Output: [[-59.62299938785463 69] 9.377000612145373]
Test Case: 432 | Input/Output: [[66.00293360421585 -24] 42.002933604215855]
Test Case: 433 | Input/Output: [[31.317849998805116 -16] 15.317849998805116]
Test Case: 434 | Input/Output: [[-14.665411406328559 -50] -64.66541140632856]
Test Case: 435 | Input/Output: [[18.496426931222004 66] 84.496426931222]
Test Case: 436 | Input/Output: [[-31.430024684321893 90] 58.56997531567811]
Test Case: 437 | Input/Output: [[-90.48492165683271 68] -22.48492165683271]
Test Case: 438 | Input/Output: [[-94.91092895033985 11] -83.91092895033985]
Test Case: 439 | Input/Output: [[82.75153272777237 74] 156.75153272777237]
Test Case: 440 | Input/Output: [[-85.20557711329164 -62] -147.20557711329164]
Test Case: 441 | Input/Output: [[92.17771852909581 -61] 31.177718529095813]
Test Case: 442 | Input/Output: [[-68.45170847751261 -55] -123.45170847751261]
Test Case: 443 | Input/Output: [[-15.300965160745477 -25] -40.30096516074548]
Test Case: 444 | Input/Output: [[56.217400826437284 70] 126.21740082643728]
Test Case: 445 | Input/Output: [[-54.70212512791477 -14] -68.70212512791477]
Test Case: 446 | Input/Output: [[-73.96413373630884 94] 20.03586626369116]
Test Case: 447 | Input/Output: [[-11.939745709148369 -34] -45.93974570914837]
Test Case: 448 | Input/Output: [[-48.05829275742326 -58] -106.05829275742326]
Test Case: 449 | Input/Output: [[-43.608156048032455 18] -25.608156048032455]
Test Case: 450 | Input/Output: [[-50.99940968679222 8] -42.99940968679222]
Test Case: 451 | Input/Output: [[23.544140150856023 -28] -4.455859849143977]
Test Case: 452 | Input/Output: [[-60.55909478614105 21] -39.55909478614105]
Test Case: 453 | Input/Output: [[55.17865121777902 24] 79.17865121777902]
Test Case: 454 | Input/Output: [[99.53247149516702 -57] 42.532471495167016]
Test Case: 455 | Input/Output: [[-19.018569703386092 69] 49.98143029661391]
Test Case: 456 | Input/Output: [[87.6299344080804 100] 187.6299344080804]
Test Case: 457 | Input/Output: [[14.938499560823672 -9] 5.938499560823672]
Test Case: 458 | Input/Output: [[-6.064788088894076 -42] -48.064788088894076]
Test Case: 459 | Input/Output: [[-8.425427529657071 -83] -91.42542752965707]
Test Case: 460 | Input/Output: [[62.2658138406193 16] 78.2658138406193]
Test Case: 461 | Input/Output: [[98.65468794393863 -52] 46.654687943938626]
Test Case: 462 | Input/Output: [[-14.813431631086644 41] 26.186568368913356]
Test Case: 463 | Input/Output: [[71.64053572475802 -43] 28.640535724758024]
Test Case: 464 | Input/Output: [[53.5923104598497 -94] -40.4076895401503]
Test Case: 465 | Input/Output: [[53.65407205189874 -43] 10.654072051898737]
Test Case: 466 | Input/Output: [[-68.28859097107949 -66] -134.2885909710795]
Test Case: 467 | Input/Output: [[40.46889245913968 66] 106.46889245913968]
Test Case: 468 | Input/Output: [[86.34928489009332 -65] 21.349284890093315]
Test Case: 469 | Input/Output: [[-15.84602848046977 60] 44.15397151953023]
Test Case: 470 | Input/Output: [[67.36804432506426 72] 139.36804432506426]
Test Case: 471 | Input/Output: [[-39.557423035741344 23] -16.557423035741344]
Test Case: 472 | Input/Output: [[-63.34272772435667 -49] -112.34272772435668]
Test Case: 473 | Input/Output: [[-92.16970221135136 89] -3.169702211351364]
Test Case: 474 | Input/Output: [[15.121204043135904 -92] -76.8787959568641]
Test Case: 475 | Input/Output: [[-77.71813769504607 -42] -119.71813769504607]
Test Case: 476 | Input/Output: [[81.45177535111904 39] 120.45177535111904]
Test Case: 477 | Input/Output: [[-65.65827840850113 -60] -125.65827840850113]
Test Case: 478 | Input/Output: [[-45.81210240432871 -48] -93.81210240432871]
Test Case: 479 | Input/Output: [[-88.25886730701743 69] -19.258867307017425]
Test Case: 480 | Input/Output: [[34.54178250136522 98] 132.54178250136522]
Test Case: 481 | Input/Output: [[-26.403082823018707 2] -24.403082823018707]
Test Case: 482 | Input/Output: [[60.9707384245383 -49] 11.970738424538297]
Test Case: 483 | Input/Output: [[29.24462818587486 45] 74.24462818587486]
Test Case: 484 | Input/Output: [[-38.771623303676826 -39] -77.77162330367682]
Test Case: 485 | Input/Output: [[-90.8699488978264 -80] -170.86994889782642]
Test Case: 486 | Input/Output: [[-76.87335163032256 -94] -170.87335163032256]
Test Case: 487 | Input/Output: [[81.36893147067568 82] 163.36893147067568]
Test Case: 488 | Input/Output: [[-27.109806938035092 -12] -39.10980693803509]
Test Case: 489 | Input/Output: [[-34.295258255608445 14] -20.295258255608445]
Test Case: 490 | Input/Output: [[86.7536339291747 0] 86.7536339291747]
Test Case: 491 | Input/Output: [[-35.415371740610595 -48] -83.4153717406106]
Test Case: 492 | Input/Output: [[99.11193040169965 85] 184.11193040169965]
Test Case: 493 | Input/Output: [[45.693178421995526 -90] -44.306821578004474]
Test Case: 494 | Input/Output: [[-49.37925529157352 5] -44.37925529157352]
Test Case: 495 | Input/Output: [[8.624731751518638 5] 13.624731751518638]
Test Case: 496 | Input/Output: [[-77.15348862215035 -32] -109.15348862215035]
Test Case: 497 | Input/Output: [[32.93059752769028 -16] 16.93059752769028]
Test Case: 498 | Input/Output: [[7.66156531038385 -97] -89.33843468961615]
Test Case: 499 | Input/Output: [[-90.99197044730106 33] -57.99197044730106]
Test Case: 500 | Input/Output: [[83.16996360968497 -14] 69.16996360968497]
Test Case: 501 | Input/Output: [[46.536259636060265 23] 69.53625963606027]
Test Case: 502 | Input/Output: [[-47.73724761613738 -71] -118.73724761613738]
Test Case: 503 | Input/Output: [[-9.707748747043453 -33] -42.70774874704345]
Test Case: 504 | Input/Output: [[5.881407398785271 -52] -46.11859260121473]
Test Case: 505 | Input/Output: [[-30.02341637210783 75] 44.97658362789217]
Test Case: 506 | Input/Output: [[50.12971641828531 31] 81.12971641828531]
Test Case: 507 | Input/Output: [[57.852084187490135 97] 154.85208418749014]
Test Case: 508 | Input/Output: [[-71.95862513109324 -19] -90.95862513109324]
Test Case: 509 | Input/Output: [[6.903499247498118 99] 105.90349924749812]
Test Case: 510 | Input/Output: [[40.26752342012884 59] 99.26752342012884]
Test Case: 511 | Input/Output: [[-72.17584044783858 -18] -90.17584044783858]
Test Case: 512 | Input/Output: [[32.51585939174993 66] 98.51585939174993]
Test Case: 513 | Input/Output: [[57.973231077012855 -17] 40.973231077012855]
Test Case: 514 | Input/Output: [[-4.932113817200872 86] 81.06788618279913]
Test Case: 515 | Input/Output: [[-75.8722935727214 69] -6.872293572721404]
Test Case: 516 | Input/Output: [[28.716791139928404 -26] 2.7167911399284037]
Test Case: 517 | Input/Output: [[23.370906464744706 75] 98.3709064647447]
Test Case: 518 | Input/Output: [[-78.93950459446917 -52] -130.93950459446916]
Test Case: 519 | Input/Output: [[-83.27401847463733 12] -71.27401847463733]
Test Case: 520 | Input/Output: [[84.66579697569944 -22] 62.665796975699436]
Test Case: 521 | Input/Output: [[-96.06790232011997 84] -12.06790232011997]
Test Case: 522 | Input/Output: [[41.24844548028835 -42] -0.7515545197116467]
Test Case: 523 | Input/Output: [[71.58721219781933 52] 123.58721219781933]
Test Case: 524 | Input/Output: [[-37.57692200867056 -82] -119.57692200867055]
Test Case: 525 | Input/Output: [[90.55915005122813 61] 151.55915005122813]
Test Case: 526 | Input/Output: [[-29.021984490959454 32] 2.978015509040546]
Test Case: 527 | Input/Output: [[60.10846934961114 -55] 5.108469349611141]
Test Case: 528 | Input/Output: [[19.11594306991782 -87] -67.88405693008218]
Test Case: 529 | Input/Output: [[91.30614619570653 -6] 85.30614619570653]
Test Case: 530 | Input/Output: [[-13.540663466932074 -6] -19.540663466932074]
Test Case: 531 | Input/Output: [[-22.18879158776363 7] -15.188791587763632]
Test Case: 532 | Input/Output: [[23.925987514956248 21] 44.92598751495625]
Test Case: 533 | Input/Output: [[62.62618829819883 66] 128.62618829819883]
Test Case: 534 | Input/Output: [[74.76467148450868 -23] 51.76467148450868]
Test Case: 535 | Input/Output: [[54.111831953957676 -15] 39.111831953957676]
Test Case: 536 | Input/Output: [[7.744801955448622 -99] -91.25519804455138]
Test Case: 537 | Input/Output: [[36.87684032886648 -40] -3.1231596711335214]
Test Case: 538 | Input/Output: [[-59.61232792973976 26] -33.61232792973976]
Test Case: 539 | Input/Output: [[68.96559322358164 44] 112.96559322358164]
Test Case: 540 | Input/Output: [[82.90039310748242 -32] 50.900393107482415]
Test Case: 541 | Input/Output: [[56.06548876509788 -59] -2.934511234902118]
Test Case: 542 | Input/Output: [[81.04159974813655 55] 136.04159974813655]
Test Case: 543 | Input/Output: [[-14.53920721428436 -73] -87.53920721428436]
Test Case: 544 | Input/Output: [[-96.53844646201419 9] -87.53844646201419]
Test Case: 545 | Input/Output: [[-80.32839357457547 42] -38.32839357457547]
Test Case: 546 | Input/Output: [[37.747760069790274 -92] -54.252239930209726]
Test Case: 547 | Input/Output: [[96.09168895258111 100] 196.0916889525811]
Test Case: 548 | Input/Output: [[48.608674408566145 95] 143.60867440856615]
Test Case: 549 | Input/Output: [[91.9787819934742 59] 150.9787819934742]
Test Case: 550 | Input/Output: [[-15.515390289196219 -49] -64.51539028919622]
Test Case: 551 | Input/Output: [[20.53395523963644 74] 94.53395523963644]
Test Case: 552 | Input/Output: [[-19.379803436328388 48] 28.620196563671612]
Test Case: 553 | Input/Output: [[-38.54617603154018 13] -25.546176031540178]
Test Case: 554 | Input/Output: [[89.62754981787421 -21] 68.62754981787421]
Test Case: 555 | Input/Output: [[-95.46511553338377 59] -36.465115533383766]
Test Case: 556 | Input/Output: [[77.62235016913579 -50] 27.622350169135785]
Test Case: 557 | Input/Output: [[95.30237932740272 -48] 47.30237932740272]
Test Case: 558 | Input/Output: [[-99.23518253102306 -26] -125.23518253102306]
Test Case: 559 | Input/Output: [[97.79978888209448 -30] 67.79978888209448]
Test Case: 560 | Input/Output: [[-32.75197683618747 -99] -131.75197683618745]
Test Case: 561 | Input/Output: [[-67.2500216382152 13] -54.2500216382152]
Test Case: 562 | Input/Output: [[16.902133558463888 53] 69.90213355846389]
Test Case: 563 | Input/Output: [[57.746027444961925 -6] 51.746027444961925]
Test Case: 564 | Input/Output: [[3.4616984158879234 74] 77.46169841588792]
Test Case: 565 | Input/Output: [[98.05805945555028 -75] 23.05805945555028]
Test Case: 566 | Input/Output: [[-87.46989981289653 -34] -121.46989981289653]
Test Case: 567 | Input/Output: [[-89.49033072069896 96] 6.509669279301036]
Test Case: 568 | Input/Output: [[71.77222250611422 67] 138.77222250611422]
Test Case: 569 | Input/Output: [[-31.00415627770778 58] 26.99584372229222]
Test Case: 570 | Input/Output: [[36.85829973485781 -89] -52.14170026514219]
Test Case: 571 | Input/Output: [[-40.24565928170587 -8] -48.24565928170587]
Test Case: 572 | Input/Output: [[5.73131331382892 42] 47.73131331382892]
Test Case: 573 | Input/Output: [[-86.53312665255264 45] -41.53312665255264]
Test Case: 574 | Input/Output: [[-3.7673501630747523 -36] -39.76735016307475]
Test Case: 575 | Input/Output: [[89.38917464179696 13] 102.38917464179696]
Test Case: 576 | Input/Output: [[-88.65578005621836 1] -87.65578005621836]
Test Case: 577 | Input/Output: [[-19.423872504394282 -66] -85.42387250439428]
Test Case: 578 | Input/Output: [[-98.65755406427309 -88] -186.65755406427309]
Test Case: 579 | Input/Output: [[57.12434657896179 -23] 34.12434657896179]
Test Case: 580 | Input/Output: [[56.29021117788727 -69] -12.709788822112728]
Test Case: 581 | Input/Output: [[52.05472270025888 15] 67.05472270025888]
Test Case: 582 | Input/Output: [[-60.43062442844107 -39] -99.43062442844106]
Test Case: 583 | Input/Output: [[3.6666831400554685 -47] -43.33331685994453]
Test Case: 584 | Input/Output: [[-32.165422650052776 30] -2.1654226500527756]
Test Case: 585 | Input/Output: [[-62.70089612101732 86] 23.299103878982677]
Test Case: 586 | Input/Output: [[17.695162734936986 6] 23.695162734936986]
Test Case: 587 | Input/Output: [[7.469199354414542 -5] 2.469199354414542]
Test Case: 588 | Input/Output: [[20.527706577614737 80] 100.52770657761474]
Test Case: 589 | Input/Output: [[-51.13588703463774 91] 39.86411296536226]
Test Case: 590 | Input/Output: [[-64.40369147626397 69] 4.5963085237360275]
Test Case: 591 | Input/Output: [[-48.88629523018713 -54] -102.88629523018713]
Test Case: 592 | Input/Output: [[76.17185339425677 -58] 18.17185339425677]
Test Case: 593 | Input/Output: [[-58.53706228641358 -22] -80.53706228641357]
Test Case: 594 | Input/Output: [[61.947383684748814 -52] 9.947383684748814]
Test Case: 595 | Input/Output: [[-88.61171776355059 73] -15.611717763550587]
Test Case: 596 | Input/Output: [[-12.380660618211564 -58] -70.38066061821156]
Test Case: 597 | Input/Output: [[20.70653828994506 4] 24.70653828994506]
Test Case: 598 | Input/Output: [[-36.299204184895316 -56] -92.29920418489532]
Test Case: 599 | Input/Output: [[53.75403233902608 68] 121.75403233902608]
Test Case: 600 | Input/Output: [[-3.1165205808718355 51] 47.883479419128165]
Test Case: 601 | Input/Output: [[-56.245059227096775 80] 23.754940772903225]
Test Case: 602 | Input/Output: [[-57.3566072219762 -30] -87.35660722197619]
Test Case: 603 | Input/Output: [[31.879102382074763 33] 64.87910238207476]
Test Case: 604 | Input/Output: [[-63.33846499474194 -56] -119.33846499474194]
Test Case: 605 | Input/Output: [[-97.37820768946605 -43] -140.37820768946605]
Test Case: 606 | Input/Output: [[72.4119195662013 23] 95.4119195662013]
Test Case: 607 | Input/Output: [[63.173161888367446 77] 140.17316188836745]
Test Case: 608 | Input/Output: [[45.09680094262043 -26] 19.096800942620433]
Test Case: 609 | Input/Output: [[-34.79398518856249 76] 41.20601481143751]
Test Case: 610 | Input/Output: [[24.629497778181502 -31] -6.370502221818498]
Test Case: 611 | Input/Output: [[-4.299559884882797 96] 91.7004401151172]
Test Case: 612 | Input/Output: [[96.4640533314303 7] 103.4640533314303]
Test Case: 613 | Input/Output: [[23.95585102053137 -82] -58.04414897946863]
Test Case: 614 | Input/Output: [[-50.051027687004776 35] -15.051027687004776]
Test Case: 615 | Input/Output: [[-76.26022403137148 89] 12.739775968628521]
Test Case: 616 | Input/Output: [[0.01550783098980446 -16] -15.984492169010196]
Test Case: 617 | Input/Output: [[12.920100175376376 -86] -73.07989982462362]
Test Case: 618 | Input/Output: [[77.37201769631062 40] 117.37201769631062]
Test Case: 619 | Input/Output: [[-28.83692218818912 -18] -46.83692218818912]
Test Case: 620 | Input/Output: [[-2.8747919777981394 -84] -86.87479197779814]
Test Case: 621 | Input/Output: [[-10.094298220772828 -81] -91.09429822077283]
Test Case: 622 | Input/Output: [[29.571387299054038 15] 44.57138729905404]
Test Case: 623 | Input/Output: [[66.99824167676468 -60] 6.998241676764678]
Test Case: 624 | Input/Output: [[41.17245520990312 23] 64.17245520990312]
Test Case: 625 | Input/Output: [[-62.43838781769233 -5] -67.43838781769233]
Test Case: 626 | Input/Output: [[11.32640274708514 -24] -12.67359725291486]
Test Case: 627 | Input/Output: [[22.06268111277663 30] 52.06268111277663]
Test Case: 628 | Input/Output: [[-72.13667733238833 -38] -110.13667733238833]
Test Case: 629 | Input/Output: [[-93.96987613052359 -8] -101.96987613052359]
Test Case: 630 | Input/Output: [[-80.34257958569479 22] -58.34257958569479]
Test Case: 631 | Input/Output: [[-82.43812667142635 -89] -171.43812667142635]
Test Case: 632 | Input/Output: [[-56.15293877027858 88] 31.84706122972142]
Test Case: 633 | Input/Output: [[-9.901789706439288 60] 50.09821029356071]
Test Case: 634 | Input/Output: [[27.97485780014091 86] 113.97485780014091]
Test Case: 635 | Input/Output: [[-78.2729563793372 31] -47.2729563793372]
Test Case: 636 | Input/Output: [[-44.34353393181056 -87] -131.34353393181055]
Test Case: 637 | Input/Output: [[-65.90623835901431 -6] -71.90623835901431]
Test Case: 638 | Input/Output: [[99.71946043062604 -33] 66.71946043062604]
Test Case: 639 | Input/Output: [[-43.10390262507959 -34] -77.1039026250796]
Test Case: 640 | Input/Output: [[23.995705302880395 10] 33.995705302880395]
Test Case: 641 | Input/Output: [[41.64081168400236 -70] -28.359188315997642]
Test Case: 642 | Input/Output: [[-15.726057642502127 14] -1.726057642502127]
Test Case: 643 | Input/Output: [[-22.092854087615095 -20] -42.092854087615095]
Test Case: 644 | Input/Output: [[16.686966985435063 -6] 10.686966985435063]
Test Case: 645 | Input/Output: [[46.85471301802363 45] 91.85471301802363]
Test Case: 646 | Input/Output: [[-26.659655080361915 41] 14.340344919638085]
Test Case: 647 | Input/Output: [[-30.890641359136012 51] 20.109358640863988]
Test Case: 648 | Input/Output: [[-20.446676466838355 -75] -95.44667646683835]
Test Case: 649 | Input/Output: [[85.79278136352866 -50] 35.79278136352866]
Test Case: 650 | Input/Output: [[-46.26721348002201 -97] -143.267213480022]
Test Case: 651 | Input/Output: [[-22.96160013029123 -9] -31.96160013029123]
Test Case: 652 | Input/Output: [[69.16829486699208 -40] 29.168294866992085]
Test Case: 653 | Input/Output: [[-62.859794861288606 89] 26.140205138711394]
Test Case: 654 | Input/Output: [[0.29502188278418373 60] 60.295021882784184]
Test Case: 655 | Input/Output: [[-3.575963830259866 -36] -39.575963830259866]
Test Case: 656 | Input/Output: [[42.229609074209094 65] 107.2296090742091]
Test Case: 657 | Input/Output: [[17.479357750381126 88] 105.47935775038113]
Test Case: 658 | Input/Output: [[-10.340785312842016 36] 25.659214687157984]
Test Case: 659 | Input/Output: [[-2.704192725753643 -91] -93.70419272575364]
Test Case: 660 | Input/Output: [[-79.12866761575428 -63] -142.1286676157543]
Test Case: 661 | Input/Output: [[34.03492550566432 -98] -63.96507449433568]
Test Case: 662 | Input/Output: [[35.41300315391587 -81] -45.58699684608413]
Test Case: 663 | Input/Output: [[-86.78533640477686 -92] -178.78533640477684]
Test Case: 664 | Input/Output: [[-75.5293891101869 -36] -111.5293891101869]
Test Case: 665 | Input/Output: [[-81.86012298149832 29] -52.86012298149832]
Test Case: 666 | Input/Output: [[-72.25736084173475 56] -16.25736084173475]
Test Case: 667 | Input/Output: [[-40.869367083229434 74] 33.130632916770566]
Test Case: 668 | Input/Output: [[-10.708175247347256 6] -4.708175247347256]
Test Case: 669 | Input/Output: [[57.475870465648285 94] 151.47587046564828]
Test Case: 670 | Input/Output: [[-68.10108837956665 48] -20.101088379566647]
Test Case: 671 | Input/Output: [[-19.953914874553476 100] 80.04608512544652]
Test Case: 672 | Input/Output: [[46.96673554229497 34] 80.96673554229497]
Test Case: 673 | Input/Output: [[-4.804320171011085 -72] -76.80432017101108]
Test Case: 674 | Input/Output: [[37.308522378160035 40] 77.30852237816003]
Test Case: 675 | Input/Output: [[-6.415015397049601 95] 88.5849846029504]
Test Case: 676 | Input/Output: [[-19.466773438144912 -56] -75.46677343814491]
Test Case: 677 | Input/Output: [[-61.751426641207075 -90] -151.75142664120708]
Test Case: 678 | Input/Output: [[-78.685944950019 33] -45.68594495001901]
Test Case: 679 | Input/Output: [[-60.62403818320663 4] -56.62403818320663]
Test Case: 680 | Input/Output: [[55.5455920635203 -9] 46.5455920635203]
Test Case: 681 | Input/Output: [[62.83623139513011 75] 137.8362313951301]
Test Case: 682 | Input/Output: [[-83.46018170645272 -40] -123.46018170645272]
Test Case: 683 | Input/Output: [[-85.12982915808507 7] -78.12982915808507]
Test Case: 684 | Input/Output: [[-61.92124918301549 94] 32.07875081698451]
Test Case: 685 | Input/Output: [[62.982586921416015 8] 70.98258692141602]
Test Case: 686 | Input/Output: [[-37.59358017697063 85] 47.40641982302937]
Test Case: 687 | Input/Output: [[77.39958641370077 -64] 13.399586413700774]
Test Case: 688 | Input/Output: [[78.28818445113487 28] 106.28818445113487]
Test Case: 689 | Input/Output: [[3.2096194514172964 -9] -5.790380548582704]
Test Case: 690 | Input/Output: [[92.40424004180377 -85] 7.404240041803774]
Test Case: 691 | Input/Output: [[-25.76410258508919 -10] -35.76410258508919]
Test Case: 692 | Input/Output: [[-98.0078198995188 75] -23.007819899518793]
Test Case: 693 | Input/Output: [[-51.35293119302911 90] 38.64706880697089]
Test Case: 694 | Input/Output: [[32.39936620788589 -48] -15.60063379211411]
Test Case: 695 | Input/Output: [[-43.13632656375048 65] 21.86367343624952]
Test Case: 696 | Input/Output: [[39.5233728440694 -50] -10.4766271559306]
Test Case: 697 | Input/Output: [[0.9243088755805644 5] 5.924308875580564]
Test Case: 698 | Input/Output: [[47.42691599682294 -25] 22.42691599682294]
Test Case: 699 | Input/Output: [[-3.206877646064328 80] 76.79312235393567]
Test Case: 700 | Input/Output: [[-85.67224339421371 49] -36.67224339421371]
Test Case: 701 | Input/Output: [[10.487780286249219 55] 65.48778028624922]
Test Case: 702 | Input/Output: [[-71.23204633310614 -94] -165.23204633310615]
Test Case: 703 | Input/Output: [[-2.0088172422233725 19] 16.991182757776627]
Test Case: 704 | Input/Output: [[66.50147015915505 -63] 3.5014701591550477]
Test Case: 705 | Input/Output: [[-22.44272164618721 -21] -43.44272164618721]
Test Case: 706 | Input/Output: [[78.53434835642014 7] 85.53434835642014]
Test Case: 707 | Input/Output: [[-59.381436587212136 -66] -125.38143658721214]
Test Case: 708 | Input/Output: [[35.41111916886274 19] 54.41111916886274]
Test Case: 709 | Input/Output: [[79.66661381380734 65] 144.66661381380734]
Test Case: 710 | Input/Output: [[-92.41144538003971 31] -61.41144538003971]
Test Case: 711 | Input/Output: [[30.996406987721798 69] 99.9964069877218]
Test Case: 712 | Input/Output: [[-49.621340537753845 3] -46.621340537753845]
Test Case: 713 | Input/Output: [[-39.13660821879201 -54] -93.13660821879202]
Test Case: 714 | Input/Output: [[-89.6765492830566 -68] -157.6765492830566]
Test Case: 715 | Input/Output: [[-71.43558421229224 -77] -148.43558421229224]
Test Case: 716 | Input/Output: [[-74.9155783342353 -15] -89.9155783342353]
Test Case: 717 | Input/Output: [[80.54627263726948 20] 100.54627263726948]
Test Case: 718 | Input/Output: [[29.455686716263216 -44] -14.544313283736784]
Test Case: 719 | Input/Output: [[-91.25389657015192 79] -12.253896570151923]
Test Case: 720 | Input/Output: [[-0.06904472103063597 -68] -68.06904472103064]
Test Case: 721 | Input/Output: [[-16.039098323334656 54] 37.960901676665344]
Test Case: 722 | Input/Output: [[-18.723279821900604 -93] -111.7232798219006]
Test Case: 723 | Input/Output: [[-32.325058882646715 50] 17.674941117353285]
Test Case: 724 | Input/Output: [[45.60335833488617 -73] -27.396641665113833]
Test Case: 725 | Input/Output: [[-29.19528921770987 78] 48.80471078229013]
Test Case: 726 | Input/Output: [[-77.31787643126151 46] -31.31787643126151]
Test Case: 727 | Input/Output: [[84.53748011848731 -62] 22.53748011848731]
Test Case: 728 | Input/Output: [[-11.14307304451468 31] 19.85692695548532]
Test Case: 729 | Input/Output: [[-99.01609270530889 -7] -106.01609270530889]
Test Case: 730 | Input/Output: [[-36.18001769849779 17] -19.180017698497792]
Test Case: 731 | Input/Output: [[8.460595305616806 -57] -48.539404694383194]
Test Case: 732 | Input/Output: [[12.065937469393901 -39] -26.9340625306061]
Test Case: 733 | Input/Output: [[71.27346788265649 -82] -10.72653211734351]
Test Case: 734 | Input/Output: [[75.85514643915835 -62] 13.855146439158347]
Test Case: 735 | Input/Output: [[52.36586477615995 -11] 41.36586477615995]
Test Case: 736 | Input/Output: [[-2.057824834312143 66] 63.94217516568786]
Test Case: 737 | Input/Output: [[-79.35677694443461 31] -48.356776944434614]
Test Case: 738 | Input/Output: [[-23.58566656493211 -46] -69.58566656493211]
Test Case: 739 | Input/Output: [[-36.70817097626564 61] 24.29182902373436]
Test Case: 740 | Input/Output: [[-30.033893728917363 -64] -94.03389372891736]
Test Case: 741 | Input/Output: [[-34.99196407861449 75] 40.00803592138551]
Test Case: 742 | Input/Output: [[65.39195441860824 -72] -6.608045581391764]
Test Case: 743 | Input/Output: [[9.048330451367946 -57] -47.951669548632054]
Test Case: 744 | Input/Output: [[84.00395140972796 100] 184.00395140972796]
Test Case: 745 | Input/Output: [[26.503755751934378 -89] -62.49624424806562]
Test Case: 746 | Input/Output: [[67.71730596023679 -71] -3.2826940397632143]
Test Case: 747 | Input/Output: [[23.566127548835425 72] 95.56612754883542]
Test Case: 748 | Input/Output: [[20.475572188836594 43] 63.475572188836594]
Test Case: 749 | Input/Output: [[78.26863612265683 -45] 33.26863612265683]
Test Case: 750 | Input/Output: [[-16.446289734298205 22] 5.553710265701795]
Test Case: 751 | Input/Output: [[-7.354611907572178 -96] -103.35461190757218]
Test Case: 752 | Input/Output: [[25.455573813162985 51] 76.45557381316299]
Test Case: 753 | Input/Output: [[-15.971680504842453 -93] -108.97168050484245]
Test Case: 754 | Input/Output: [[99.8591320723757 16] 115.8591320723757]
Test Case: 755 | Input/Output: [[-63.975761266897166 -98] -161.97576126689717]
Test Case: 756 | Input/Output: [[92.79804761407044 58] 150.79804761407044]
Test Case: 757 | Input/Output: [[75.4737545286913 64] 139.4737545286913]
Test Case: 758 | Input/Output: [[-66.06180940043865 -83] -149.06180940043865]
Test Case: 759 | Input/Output: [[-5.446109065232548 -94] -99.44610906523255]
Test Case: 760 | Input/Output: [[98.7001654388051 -67] 31.7001654388051]
Test Case: 761 | Input/Output: [[-47.666637972025036 -79] -126.66663797202503]
Test Case: 762 | Input/Output: [[-90.7393950973421 62] -28.739395097342097]
Test Case: 763 | Input/Output: [[-13.131242745387127 62] 48.86875725461287]
Test Case: 764 | Input/Output: [[-23.362157958688726 -66] -89.36215795868873]
Test Case: 765 | Input/Output: [[86.2487397421103 -71] 15.248739742110303]
Test Case: 766 | Input/Output: [[9.203256038100122 -45] -35.79674396189988]
Test Case: 767 | Input/Output: [[-25.074796417188836 2] -23.074796417188836]
Test Case: 768 | Input/Output: [[-55.955042557885484 32] -23.955042557885484]
Test Case: 769 | Input/Output: [[-90.39004501382647 -30] -120.39004501382647]
Test Case: 770 | Input/Output: [[-29.21228851843422 1] -28.21228851843422]
Test Case: 771 | Input/Output: [[-64.30720696401121 67] 2.6927930359887853]
Test Case: 772 | Input/Output: [[51.958120105914105 -54] -2.041879894085895]
Test Case: 773 | Input/Output: [[82.00156023430674 -13] 69.00156023430674]
Test Case: 774 | Input/Output: [[-3.466203442355635 -74] -77.46620344235563]
Test Case: 775 | Input/Output: [[93.89203326828778 75] 168.89203326828778]
Test Case: 776 | Input/Output: [[28.888284489009465 -36] -7.1117155109905354]
Test Case: 777 | Input/Output: [[36.533125425881224 -30] 6.533125425881224]
Test Case: 778 | Input/Output: [[-83.23078418002956 -40] -123.23078418002956]
Test Case: 779 | Input/Output: [[-15.569927181603688 67] 51.43007281839631]
Test Case: 780 | Input/Output: [[-48.86592458987242 56] 7.134075410127579]
Test Case: 781 | Input/Output: [[99.34020714091366 -66] 33.34020714091366]
Test Case: 782 | Input/Output: [[-13.547015911553515 -37] -50.547015911553515]
Test Case: 783 | Input/Output: [[-36.595891791463366 20] -16.595891791463366]
Test Case: 784 | Input/Output: [[76.49331332609447 56] 132.49331332609447]
Test Case: 785 | Input/Output: [[-67.78828759590947 -16] -83.78828759590947]
Test Case: 786 | Input/Output: [[86.46947054201735 -90] -3.5305294579826523]
Test Case: 787 | Input/Output: [[77.84573487877111 24] 101.84573487877111]
Test Case: 788 | Input/Output: [[70.0731864991578 -62] 8.0731864991578]
Test Case: 789 | Input/Output: [[-10.168020072232224 89] 78.83197992776778]
Test Case: 790 | Input/Output: [[85.68045959818284 -64] 21.680459598182836]
Test Case: 791 | Input/Output: [[46.50079506362556 56] 102.50079506362556]
Test Case: 792 | Input/Output: [[-78.25327097190322 84] 5.74672902809678]
Test Case: 793 | Input/Output: [[-98.15959213071832 -83] -181.15959213071832]
Test Case: 794 | Input/Output: [[-47.085878908550605 -43] -90.0858789085506]
Test Case: 795 | Input/Output: [[-60.75196337480333 39] -21.75196337480333]
Test Case: 796 | Input/Output: [[78.59248323346506 80] 158.59248323346506]
Test Case: 797 | Input/Output: [[34.1595101534983 -32] 2.159510153498303]
Test Case: 798 | Input/Output: [[-20.807578821465995 23] 2.192421178534005]
Test Case: 799 | Input/Output: [[68.96286687927724 -35] 33.96286687927724]
Test Case: 800 | Input/Output: [[37.40741868889873 -53] -15.59258131110127]
Test Case: 801 | Input/Output: [[25.582259992840335 77] 102.58225999284033]
Test Case: 802 | Input/Output: [[-90.64476960193966 -29] -119.64476960193966]
Test Case: 803 | Input/Output: [[12.938928573043171 48] 60.93892857304317]
Test Case: 804 | Input/Output: [[39.89470244808905 0] 39.89470244808905]
Test Case: 805 | Input/Output: [[-46.26082820169628 1] -45.26082820169628]
Test Case: 806 | Input/Output: [[-4.764776869942651 83] 78.23522313005735]
Test Case: 807 | Input/Output: [[-14.44822588648455 -90] -104.44822588648455]
Test Case: 808 | Input/Output: [[75.78068754006279 62] 137.7806875400628]
Test Case: 809 | Input/Output: [[-25.5408954431456 -41] -66.5408954431456]
Test Case: 810 | Input/Output: [[-79.42599455003436 -15] -94.42599455003436]
Test Case: 811 | Input/Output: [[-53.16412184746402 -100] -153.164121847464]
Test Case: 812 | Input/Output: [[80.6598030002385 -31] 49.6598030002385]
Test Case: 813 | Input/Output: [[-54.26713533361347 0] -54.26713533361347]
Test Case: 814 | Input/Output: [[57.05353146328929 -27] 30.05353146328929]
Test Case: 815 | Input/Output: [[-47.82098567674646 74] 26.17901432325354]
Test Case: 816 | Input/Output: [[46.26119786832575 -76] -29.738802131674248]
Test Case: 817 | Input/Output: [[-87.70824404962096 62] -25.70824404962096]
Test Case: 818 | Input/Output: [[-3.4212139043857235 77] 73.57878609561428]
Test Case: 819 | Input/Output: [[-76.5999967441077 -92] -168.5999967441077]
Test Case: 820 | Input/Output: [[-93.73128511899414 54] -39.73128511899414]
Test Case: 821 | Input/Output: [[-75.28193321607759 67] -8.28193321607759]
Test Case: 822 | Input/Output: [[50.818548819278305 -38] 12.818548819278305]
Test Case: 823 | Input/Output: [[95.76778561195346 -53] 42.76778561195346]
Test Case: 824 | Input/Output: [[17.43006682960022 -84] -66.56993317039978]
Test Case: 825 | Input/Output: [[-74.82320922772941 13] -61.82320922772941]
Test Case: 826 | Input/Output: [[-72.39924382314288 49] -23.399243823142882]
Test Case: 827 | Input/Output: [[-74.82958797601545 -38] -112.82958797601545]
Test Case: 828 | Input/Output: [[-9.553570823221264 -21] -30.553570823221264]
Test Case: 829 | Input/Output: [[59.64865491234826 15] 74.64865491234826]
Test Case: 830 | Input/Output: [[-52.7802330219483 43] -9.780233021948298]
Test Case: 831 | Input/Output: [[67.23862104468006 27] 94.23862104468006]
Test Case: 832 | Input/Output: [[-5.542009653852034 85] 79.45799034614797]
Test Case: 833 | Input/Output: [[-1.7724641097026677 -46] -47.77246410970267]
Test Case: 834 | Input/Output: [[26.095104653537817 -64] -37.90489534646218]
Test Case: 835 | Input/Output: [[-91.22129080101995 -6] -97.22129080101995]
Test Case: 836 | Input/Output: [[96.44793347061912 70] 166.44793347061912]
Test Case: 837 | Input/Output: [[-51.68366335274084 -87] -138.68366335274084]
Test Case: 838 | Input/Output: [[89.32399159135315 -28] 61.32399159135315]
Test Case: 839 | Input/Output: [[98.18009429446869 18] 116.18009429446869]
Test Case: 840 | Input/Output: [[20.131246603381015 41] 61.131246603381015]
Test Case: 841 | Input/Output: [[78.88945252152578 -30] 48.88945252152578]
Test Case: 842 | Input/Output: [[-91.29013627337804 46] -45.29013627337804]
Test Case: 843 | Input/Output: [[-3.5334615553251183 -1] -4.533461555325118]
Test Case: 844 | Input/Output: [[30.321477203146316 -68] -37.678522796853684]
Test Case: 845 | Input/Output: [[-79.73055105099985 65] -14.73055105099985]
Test Case: 846 | Input/Output: [[38.586225460449384 -19] 19.586225460449384]
Test Case: 847 | Input/Output: [[43.252569347212244 87] 130.25256934721224]
Test Case: 848 | Input/Output: [[77.52065005531165 -82] -4.479349944688352]
Test Case: 849 | Input/Output: [[54.21734098241899 1] 55.21734098241899]
Test Case: 850 | Input/Output: [[63.70873029755799 -44] 19.70873029755799]
Test Case: 851 | Input/Output: [[-72.31117903848627 59] -13.311179038486273]
Test Case: 852 | Input/Output: [[-94.0026578342694 31] -63.0026578342694]
Test Case: 853 | Input/Output: [[-48.93636186166377 1] -47.93636186166377]
Test Case: 854 | Input/Output: [[-51.31691425429317 -84] -135.31691425429318]
Test Case: 855 | Input/Output: [[56.08818109159711 76] 132.0881810915971]
Test Case: 856 | Input/Output: [[26.906788956901593 -18] 8.906788956901593]
Test Case: 857 | Input/Output: [[-94.80377578170898 -84] -178.80377578170896]
Test Case: 858 | Input/Output: [[31.461103383643405 -56] -24.538896616356595]
Test Case: 859 | Input/Output: [[-87.0607899711239 -21] -108.0607899711239]
Test Case: 860 | Input/Output: [[-95.37033630975591 -80] -175.3703363097559]
Test Case: 861 | Input/Output: [[92.1474732159947 -94] -1.8525267840053061]
Test Case: 862 | Input/Output: [[-19.876626452931205 60] 40.123373547068795]
Test Case: 863 | Input/Output: [[-42.900469370736126 45] 2.0995306292638745]
Test Case: 864 | Input/Output: [[3.9492343670973327 27] 30.949234367097333]
Test Case: 865 | Input/Output: [[-78.25219759169637 0] -78.25219759169637]
Test Case: 866 | Input/Output: [[86.96261958046111 -19] 67.96261958046111]
Test Case: 867 | Input/Output: [[78.57822749046818 -91] -12.42177250953182]
Test Case: 868 | Input/Output: [[-30.759267541952923 36] 5.240732458047077]
Test Case: 869 | Input/Output: [[28.60948122340278 95] 123.60948122340278]
Test Case: 870 | Input/Output: [[67.5904153939195 84] 151.5904153939195]
Test Case: 871 | Input/Output: [[-85.97535652454053 69] -16.97535652454053]
Test Case: 872 | Input/Output: [[-73.54485535158813 -24] -97.54485535158813]
Test Case: 873 | Input/Output: [[-46.05853393733046 -98] -144.05853393733045]
Test Case: 874 | Input/Output: [[-44.3298418706157 9] -35.3298418706157]
Test Case: 875 | Input/Output: [[-53.521329017728014 50] -3.5213290177280143]
Test Case: 876 | Input/Output: [[-0.9062096683560839 -84] -84.90620966835608]
Test Case: 877 | Input/Output: [[97.18242855844744 -13] 84.18242855844744]
Test Case: 878 | Input/Output: [[34.60685693027543 90] 124.60685693027543]
Test Case: 879 | Input/Output: [[80.94850803288134 -49] 31.948508032881335]
Test Case: 880 | Input/Output: [[76.28486291277895 -5] 71.28486291277895]
Test Case: 881 | Input/Output: [[-19.977140981921067 64] 44.02285901807893]
Test Case: 882 | Input/Output: [[-28.528612295812565 94] 65.47138770418744]
Test Case: 883 | Input/Output: [[-48.44871277569243 -3] -51.44871277569243]
Test Case: 884 | Input/Output: [[62.96538744093132 -13] 49.96538744093132]
Test Case: 885 | Input/Output: [[22.96120890737383 -100] -77.03879109262617]
Test Case: 886 | Input/Output: [[36.18302260188295 -17] 19.183022601882953]
Test Case: 887 | Input/Output: [[-75.62531884870299 -82] -157.625318848703]
Test Case: 888 | Input/Output: [[-72.55990117253144 -13] -85.55990117253144]
Test Case: 889 | Input/Output: [[-22.466262381622997 80] 57.533737618377]
Test Case: 890 | Input/Output: [[-3.639773763969629 51] 47.36022623603037]
Test Case: 891 | Input/Output: [[18.13409489943045 59] 77.13409489943045]
Test Case: 892 | Input/Output: [[11.490041900767906 70] 81.4900419007679]
Test Case: 893 | Input/Output: [[-68.860320033358 66] -2.8603200333579935]
Test Case: 894 | Input/Output: [[91.00288391340169 -89] 2.002883913401689]
Test Case: 895 | Input/Output: [[3.9786221608425905 84] 87.97862216084259]
Test Case: 896 | Input/Output: [[61.60656550082177 88] 149.60656550082177]
Test Case: 897 | Input/Output: [[-11.277805853987275 77] 65.72219414601273]
Test Case: 898 | Input/Output: [[44.766410204174235 73] 117.76641020417424]
Test Case: 899 | Input/Output: [[-5.383009233596397 -28] -33.3830092335964]
Test Case: 900 | Input/Output: [[38.51996050217218 4] 42.51996050217218]
Test Case: 901 | Input/Output: [[8.023999481882285 -51] -42.976000518117715]
Test Case: 902 | Input/Output: [[-4.229896395184966 -47] -51.229896395184966]
Test Case: 903 | Input/Output: [[-12.21027359537834 -77] -89.21027359537834]
Test Case: 904 | Input/Output: [[-94.54120804075264 70] -24.541208040752636]
Test Case: 905 | Input/Output: [[52.73733589816962 -4] 48.73733589816962]
Test Case: 906 | Input/Output: [[-44.037778581171615 91] 46.962221418828385]
Test Case: 907 | Input/Output: [[39.40671632423775 -41] -1.593283675762251]
Test Case: 908 | Input/Output: [[-88.56202625327398 91] 2.4379737467260156]
Test Case: 909 | Input/Output: [[-96.56720974408744 26] -70.56720974408744]
Test Case: 910 | Input/Output: [[48.077508115469556 -18] 30.077508115469556]
Test Case: 911 | Input/Output: [[66.35707747789951 -58] 8.357077477899509]
Test Case: 912 | Input/Output: [[-61.75780899421508 -8] -69.75780899421508]
Test Case: 913 | Input/Output: [[-25.183474502687787 21] -4.183474502687787]
Test Case: 914 | Input/Output: [[-93.47397982017776 -6] -99.47397982017776]
Test Case: 915 | Input/Output: [[25.372411293082564 38] 63.372411293082564]
Test Case: 916 | Input/Output: [[-84.58814322788834 63] -21.588143227888338]
Test Case: 917 | Input/Output: [[28.559624023034132 9] 37.55962402303413]
Test Case: 918 | Input/Output: [[99.54803110521303 -57] 42.54803110521303]
Test Case: 919 | Input/Output: [[-76.15723742321268 0] -76.15723742321268]
Test Case: 920 | Input/Output: [[-3.2927473153174844 22] 18.707252684682516]
Test Case: 921 | Input/Output: [[33.058559762827855 -7] 26.058559762827855]
Test Case: 922 | Input/Output: [[-92.4900068123618 40] -52.4900068123618]
Test Case: 923 | Input/Output: [[-72.98583171605048 96] 23.014168283949516]
Test Case: 924 | Input/Output: [[-92.019214532252 26] -66.019214532252]
Test Case: 925 | Input/Output: [[-19.16345144426701 63] 43.83654855573299]
Test Case: 926 | Input/Output: [[-15.98619285953042 -56] -71.98619285953042]
Test Case: 927 | Input/Output: [[17.483364164433084 73] 90.48336416443308]
Test Case: 928 | Input/Output: [[44.195841720426046 94] 138.19584172042605]
Test Case: 929 | Input/Output: [[64.35287606726015 44] 108.35287606726015]
Test Case: 930 | Input/Output: [[43.656076527265185 96] 139.65607652726518]
Test Case: 931 | Input/Output: [[89.9028539564633 42] 131.9028539564633]
Test Case: 932 | Input/Output: [[-34.0458033926125 -1] -35.0458033926125]
Test Case: 933 | Input/Output: [[77.05010584091846 49] 126.05010584091846]
Test Case: 934 | Input/Output: [[-39.51163164060036 -80] -119.51163164060037]
Test Case: 935 | Input/Output: [[-48.89166139908969 -73] -121.89166139908968]
Test Case: 936 | Input/Output: [[-42.864302517566834 100] 57.135697482433166]
Test Case: 937 | Input/Output: [[-93.8534887670665 35] -58.853488767066494]
Test Case: 938 | Input/Output: [[-90.08901287053507 98] 7.910987129464928]
Test Case: 939 | Input/Output: [[49.93993582550044 55] 104.93993582550044]
Test Case: 940 | Input/Output: [[-19.354708475038663 37] 17.645291524961337]
Test Case: 941 | Input/Output: [[16.76616106586704 -70] -53.23383893413296]
Test Case: 942 | Input/Output: [[-66.50570924173232 -34] -100.50570924173232]
Test Case: 943 | Input/Output: [[-82.58767724485148 72] -10.587677244851477]
Test Case: 944 | Input/Output: [[83.89282780844934 45] 128.89282780844934]
Test Case: 945 | Input/Output: [[42.36903355718874 82] 124.36903355718874]
Test Case: 946 | Input/Output: [[-84.74365355758324 -39] -123.74365355758324]
Test Case: 947 | Input/Output: [[-84.65591778990546 -58] -142.65591778990546]
Test Case: 948 | Input/Output: [[38.99865908566389 -69] -30.00134091433611]
Test Case: 949 | Input/Output: [[21.27593647435711 52] 73.27593647435711]
Test Case: 950 | Input/Output: [[-36.46272159548553 -10] -46.46272159548553]
Test Case: 951 | Input/Output: [[-75.23457060436232 50] -25.234570604362318]
Test Case: 952 | Input/Output: [[-76.41877751575393 -44] -120.41877751575393]
Test Case: 953 | Input/Output: [[57.79194730142257 -14] 43.79194730142257]
Test Case: 954 | Input/Output: [[-0.24410951900600253 95] 94.755890480994]
Test Case: 955 | Input/Output: [[11.73736642005305 42] 53.73736642005305]
Test Case: 956 | Input/Output: [[41.8303799063095 -93] -51.1696200936905]
Test Case: 957 | Input/Output: [[97.05032929801766 43] 140.05032929801766]
Test Case: 958 | Input/Output: [[21.306948478434464 26] 47.306948478434464]
Test Case: 959 | Input/Output: [[84.55775798159772 -42] 42.55775798159772]
Test Case: 960 | Input/Output: [[-9.558351475121626 -19] -28.558351475121626]
Test Case: 961 | Input/Output: [[-90.55142963264929 71] -19.55142963264929]
Test Case: 962 | Input/Output: [[-40.73260605422886 65] 24.26739394577114]
Test Case: 963 | Input/Output: [[24.099404023383954 20] 44.099404023383954]
Test Case: 964 | Input/Output: [[-0.2969153225346446 -86] -86.29691532253464]
Test Case: 965 | Input/Output: [[15.181989985772077 -93] -77.81801001422792]
Test Case: 966 | Input/Output: [[-65.57165199780957 -81] -146.57165199780957]
Test Case: 967 | Input/Output: [[-60.08829373524238 -90] -150.0882937352424]
Test Case: 968 | Input/Output: [[-13.600388340764198 -74] -87.6003883407642]
Test Case: 969 | Input/Output: [[16.749300069593602 87] 103.7493000695936]
Test Case: 970 | Input/Output: [[-8.27560655790846 -92] -100.27560655790846]
Test Case: 971 | Input/Output: [[66.27720891508551 80] 146.2772089150855]
Test Case: 972 | Input/Output: [[-97.32723720441467 -37] -134.32723720441467]
Test Case: 973 | Input/Output: [[90.81066819628677 79] 169.81066819628677]
Test Case: 974 | Input/Output: [[-33.943717626319454 -73] -106.94371762631945]
Test Case: 975 | Input/Output: [[32.653531875083075 -80] -47.346468124916925]
Test Case: 976 | Input/Output: [[-67.28560120960043 -41] -108.28560120960043]
Test Case: 977 | Input/Output: [[-2.4959544919241523 58] 55.50404550807585]
Test Case: 978 | Input/Output: [[82.73633665218847 100] 182.73633665218847]
Test Case: 979 | Input/Output: [[8.168899440822415 31] 39.168899440822415]
Test Case: 980 | Input/Output: [[-92.46204077716149 72] -20.46204077716149]
Test Case: 981 | Input/Output: [[-7.506915933154758 52] 44.49308406684524]
Test Case: 982 | Input/Output: [[-19.144467378035145 -21] -40.144467378035145]
Test Case: 983 | Input/Output: [[63.296702461151455 -68] -4.703297538848545]
Test Case: 984 | Input/Output: [[-79.00772421943923 -28] -107.00772421943923]
Test Case: 985 | Input/Output: [[85.38240748522122 86] 171.38240748522122]
Test Case: 986 | Input/Output: [[-59.81382999705956 -3] -62.81382999705956]
Test Case: 987 | Input/Output: [[80.30852086883141 -37] 43.30852086883141]
Test Case: 988 | Input/Output: [[-32.345092989019975 -81] -113.34509298901997]
Test Case: 989 | Input/Output: [[70.92536256377929 2] 72.92536256377929]
Test Case: 990 | Input/Output: [[-48.175052376191374 -58] -106.17505237619137]
Test Case: 991 | Input/Output: [[-14.735667309328065 -81] -95.73566730932806]
Test Case: 992 | Input/Output: [[7.648896675193612 6] 13.648896675193612]
Test Case: 993 | Input/Output: [[54.251793336084035 70] 124.25179333608403]
Test Case: 994 | Input/Output: [[90.1206519174124 2] 92.1206519174124]
Test Case: 995 | Input/Output: [[-4.924988746628415 -59] -63.924988746628415]
Test Case: 996 | Input/Output: [[57.690341732683294 14] 71.6903417326833]
Test Case: 997 | Input/Output: [[-85.21481574250716 29] -56.214815742507156]
Test Case: 998 | Input/Output: [[94.2083432132865 -81] 13.208343213286497]
Test Case: 999 | Input/Output: [[37.250633989773405 -82] -44.749366010226595]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove vector_boolean_pushall zip_insert_left_fromcode exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup vector_integer_butlast vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse exec_k vector_integer_yank float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times genome_dup return_code_pop char_swap integer_max return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank zip_shove vector_integer_flush vector_integer_subvec vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean integer_min exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add code_stackdepth exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse integer_swap string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.11.1-1-SNAPSHOTHash of last Git commit = 8a64f874173fae27ed1a77827849de0fade43c2b
GitHub link = https://github.com/lspector/Clojush/commit/8a64f874173fae27ed1a77827849de0fade43c2b
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = []
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :tournament
pop-when-tagging = true
population-size = 1000
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
random-screen = false
random-seed = 2 56 -59 127 82 44 -115 111 26 108 -116 -34 -78 120 -77 49
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Number IO problem report - generation 0
Test total error for best: 55351.0
Test mean error for best: 27.67550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: -13.6794804548
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: -55.8255485219
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -93.6313145907
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 38.7960139475 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -19.8407053333
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -99.9945089525
Correct output: 118.3242489435 | Program output: 22.3242489435 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 28.907177534  
Correct output: 85.0399635851  | Program output: -14.9600364149
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_add} {:instruction integer_fromfloat} {:instruction integer_min} {:instruction integer_dup} {:instruction float_shove} {:instruction integer_mod} {:instruction print_integer} {:instruction float_sub} {:instruction in1} {:instruction print_float} {:instruction in2} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_dup} {:instruction float_tan} {:instruction float_min} {:instruction integer_dup} {:instruction integer_yankdup} {:instruction -37.23052986511812} {:instruction float_mod} {:instruction -97} {:instruction float_frominteger})
Best program: (integer_add integer_fromfloat integer_min integer_dup float_shove integer_mod print_integer float_sub in1 print_float in2 float_dup_times float_dup_times float_yank integer_dup float_tan float_min integer_dup integer_yankdup -37.23052986511812 float_mod -97 float_frominteger)
Errors: [59.0 12 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 63.0 11 6.0 1 67.0 2 98.0 12 4.0 2 76.0 3 75.0 3 87.0 3 52.0 13 5.0 1 36.0 2 20.0 1 75.0 2 96.0 3 78.0 13 97.0 2 100.0 13 49.0 3]
Total: 1420.0
Mean: 28.4
Genome size: 23
Size: 24
Percent parens: 0.042
--- Population Statistics ---
Average total errors in population: 18353.3727436
Median total errors in population: 25334.0
Error averages by case: (716.0387995999997 13.035 713.0456797999999 13.414 719.1546857000016 11.727 722.9939900000011 12.606 720.414981 12.478 723.5879970999995 12.462 699.9162312999991 12.544 712.4412003 12.372 727.7578815999988 13.29 717.9814752000009 13.258 723.6439671999992 13.932 708.0463517999992 11.777 724.5779204999972 13.237 738.5023476999986 13.395 745.5175650999981 14.059 714.0890271000009 13.23 704.1802380000016 11.687 719.7614690000016 12.534 721.0562849000005 12.552 717.5731539999999 13.305 725.5530259000001 13.443 721.3875097999994 14.003 727.6160422000014 12.437 725.699694 13.147 738.8242247999983 14.087)
Error minima by case: (1.3205 9 0.2341 2 0.3243 2 0.5586 1 0.6404 1 0.6343 2 0.6669 1 2.1745 8 4.2208 1 0.6313 2 0.5073 8 1.7486 2 11.2502 2 15.8937 2 14.6402 3 0.8407 7 0.3854 1 0.7543 2 0.4846 1 1.0055 2 4.0 2 1.3914 8 0.139 1 0.04 8 2.0984 3)
Average genome size in population (length): 50.703
Average program size in population (points): 51.703
Average percent parens in population: 0.040
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 2
Genome diversity (% unique Plush genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.292
Error (vector) diversity:			 0.327
Behavioral diversity:				 0.345
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 1271751
--- Timings ---
Current time: 1529615033135 milliseconds
Total Time:           3.9 seconds
Initialization:       0.1 seconds,  2.8%
Reproduction:         0.6 seconds, 14.9%
Fitness Testing:      3.2 seconds, 82.3%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Number IO problem report - generation 1
Test total error for best: 55351.0
Test mean error for best: 27.67550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: -13.6794804548
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: -55.8255485219
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -93.6313145907
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 38.7960139475 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -19.8407053333
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -99.9945089525
Correct output: 118.3242489435 | Program output: 22.3242489435 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 28.907177534  
Correct output: 85.0399635851  | Program output: -14.9600364149
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction float_mult} {:instruction float_pop} {:instruction integer_yank} {:instruction tagged_388} {:instruction integer_pop} {:instruction integer_yank} {:instruction float_cos} {:instruction float_max} {:instruction integer_dec} {:instruction float_max} {:instruction integer_inc} {:instruction integer_mod} {:instruction integer_add} {:instruction in1} {:instruction print_float} {:instruction integer_mult} {:instruction float_yankdup} {:instruction integer_mod} {:instruction float_add} {:instruction 43} {:instruction integer_sub} {:instruction integer_yank})
Best program: (integer_dec float_mult float_pop integer_yank tagged_388 integer_pop integer_yank float_cos float_max integer_dec float_max integer_inc integer_mod integer_add in1 print_float integer_mult float_yankdup integer_mod float_add 43 integer_sub integer_yank)
Errors: [59.0 12 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 63.0 11 6.0 1 67.0 2 98.0 12 4.0 2 76.0 3 75.0 3 87.0 3 52.0 13 5.0 1 36.0 2 20.0 1 75.0 2 96.0 3 78.0 13 97.0 2 100.0 13 49.0 3]
Total: 1420.0
Mean: 28.4
Genome size: 23
Size: 24
Percent parens: 0.042
--- Population Statistics ---
Average total errors in population: 6136.937690900005
Median total errors in population: 1746.5783
Error averages by case: (224.24574690000009 11.972 215.22329349999941 11.046 227.6517527999997 9.508 230.8873565000012 10.293 223.08276530000032 9.93 233.0970740999997 10.044 196.6733568999985 10.118 220.738817 11.776 238.05219229999867 10.7 235.15606830000067 10.689 238.76995840000004 12.819 198.43540700000045 9.644 250.72458560000075 10.715 281.6736565000022 11.103 280.7427655000012 11.345 219.50835130000004 12.438 192.92052019999977 9.437 221.52417739999947 10.138 238.38502920000104 10.228 236.71105530000014 10.865 254.86525280000083 11.08 233.30962839999995 13.022 259.5001924999976 9.918 249.25169540000002 12.387 263.126991800002 11.465)
Error minima by case: (1.3205 9 0.192 2 0.3243 2 0.5586 1 0.6404 1 3.0061 2 0.6669 1 2.1745 8 5.0 1 0.6313 2 0.5073 8 1.7486 2 15.0588 2 15.8937 2 14.6402 3 0.8407 7 0.3854 1 0.7543 2 0.4846 1 1.0055 2 4.0 2 1.3914 8 3.0 1 0.04 8 2.0984 3)
Average genome size in population (length): 56.859
Average program size in population (points): 57.859
Average percent parens in population: 0.023
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.512
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.764
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.764
Total error diversity:				 0.268
Error (vector) diversity:			 0.286
Behavioral diversity:				 0.308
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 2698253
--- Timings ---
Current time: 1529615037148 milliseconds
Total Time:           8.1 seconds
Initialization:       0.1 seconds,  1.4%
Reproduction:         2.7 seconds, 33.6%
Fitness Testing:      4.8 seconds, 59.1%
Report:               0.5 seconds,  5.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Number IO problem report - generation 2
Test total error for best: 64043.24209999995
Test mean error for best: 32.02162
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: -0.7243214455 
Correct output: -22.7658954997 | Program output: -0.7243214455 
Correct output: 4.6757403904   | Program output: 0.9116417761  
Correct output: 49.4414284912  | Program output: -0.7843280206 
Correct output: 41.9510447786  | Program output: -0.771253632  
Correct output: 64.0061015037  | Program output: 0.9993125603  
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: -0.7243214455 
Correct output: -67.7792458223 | Program output: 0.8687175677  
Correct output: -26.6313145907 | Program output: -0.7243214455 
Correct output: -25.4926767768 | Program output: -0.248074572  
Correct output: 8.2513564266   | Program output: -0.3098299608 
Correct output: 114.7960139475 | Program output: 38.7960139475 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -0.495863127  
Correct output: 32.1592946667  | Program output: -0.7243214455 
Correct output: 2.3853941457   | Program output: 0.8922071057  
Correct output: 29.9153689352  | Program output: 0.0580441477  
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -0.7243214455 
Correct output: 118.3242489435 | Program output: 22.3242489435 
Correct output: -36.6167768666 | Program output: -0.5162946152 
Correct output: 125.907177534  | Program output: 28.907177534  
Correct output: 85.0399635851  | Program output: -0.7243214455 
Correct output: -101.9015572683 | Program output: -0.4842605782 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction float_shove} {:instruction integer_min} {:instruction float_swap} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_yank} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction 74.71738484426498} {:instruction integer_mod} {:instruction integer_mult} {:instruction float_swap} {:instruction integer_pop} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction integer_add} {:instruction integer_add} {:instruction float_sin} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot float_shove integer_min float_swap integer_div integer_rot integer_yank float_cos integer_dec float_tan integer_yank tag_float_716 integer_yankdup float_shove float_div float_dec float_yankdup integer_fromfloat float_rot integer_stackdepth 74.71738484426498 integer_mod integer_mult float_swap integer_pop float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_dup_times float_shove integer_add integer_add float_sin integer_sub float_max print_float)
Errors: [46.0448 9 22.0416 10 3.7641 10 50.2258 10 42.7223 11 63.0068 10 6.0 1 7.8988 9 68.648 12 25.907 10 25.2446 10 8.5612 12 76.0 3 75.0 3 126.826 10 32.8836 11 1.4932 8 29.8573 12 20.0 1 24.2702 10 96.0 3 36.1005 10 97.0 2 85.7643 11 101.4173 11]
Total: 1381.6774
Mean: 27.633549
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 4623.216380600008
Median total errors in population: 1438.0
Error averages by case: (174.2703384999999 12.29 151.1163602999997 6.322 197.85103059999986 5.436 166.89105790000033 5.328 157.36095410000016 5.18 156.1219096999998 5.694 139.0087317999999 5.126 181.2970319000006 11.927 151.73210050000014 5.566 191.23024800000024 6.168 210.3009108999998 12.723 137.03503539999957 5.582 192.80776020000033 6.424 202.517134700001 6.667 205.86474380000053 6.975 169.87895890000016 13.227 136.07361709999986 4.863 167.90082739999974 5.716 160.56758980000038 5.278 197.2718584 6.355 203.84279060000043 6.578 193.3412536000004 13.385 205.86286379999908 5.462 203.60613789999974 13.044 181.00813480000062 7.141)
Error minima by case: (2.729 9 16.0 2 0.3243 2 6.85 1 0.6404 1 3.6921 2 0.6669 1 2.1745 8 5.0 1 25.2189 2 24.0802 8 1.7486 2 8.204 3 17.1063 3 29.5385 3 0.8407 7 1.3854 1 0.7543 2 18.0 1 23.5821 2 4.6758 2 6.7097 8 2.9072 2 13.96 10 4.1182 3)
Average genome size in population (length): 47.558
Average program size in population (points): 48.558
Average percent parens in population: 0.025
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.047
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 31
Genome diversity (% unique Plush genomes):	 0.626
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.626
Total error diversity:				 0.108
Error (vector) diversity:			 0.114
Behavioral diversity:				 0.127
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 3892129
--- Timings ---
Current time: 1529615040566 milliseconds
Total Time:          11.4 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         4.2 seconds, 37.0%
Fitness Testing:      6.3 seconds, 55.2%
Report:               0.8 seconds,  6.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Number IO problem report - generation 3
Test total error for best: 64043.24209999995
Test mean error for best: 32.02162
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: -0.7243214455 
Correct output: -22.7658954997 | Program output: -0.7243214455 
Correct output: 4.6757403904   | Program output: 0.9116417761  
Correct output: 49.4414284912  | Program output: -0.7843280206 
Correct output: 41.9510447786  | Program output: -0.771253632  
Correct output: 64.0061015037  | Program output: 0.9993125603  
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: -0.7243214455 
Correct output: -67.7792458223 | Program output: 0.8687175677  
Correct output: -26.6313145907 | Program output: -0.7243214455 
Correct output: -25.4926767768 | Program output: -0.248074572  
Correct output: 8.2513564266   | Program output: -0.3098299608 
Correct output: 114.7960139475 | Program output: 38.7960139475 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -0.495863127  
Correct output: 32.1592946667  | Program output: -0.7243214455 
Correct output: 2.3853941457   | Program output: 0.8922071057  
Correct output: 29.9153689352  | Program output: 0.0580441477  
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -0.7243214455 
Correct output: 118.3242489435 | Program output: 22.3242489435 
Correct output: -36.6167768666 | Program output: -0.5162946152 
Correct output: 125.907177534  | Program output: 28.907177534  
Correct output: 85.0399635851  | Program output: -0.7243214455 
Correct output: -101.9015572683 | Program output: -0.4842605782 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction float_shove} {:instruction integer_min} {:instruction float_swap} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_yank} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction 74.71738484426498} {:instruction integer_mod} {:instruction integer_mult} {:instruction float_swap} {:instruction integer_pop} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction integer_add} {:instruction integer_add} {:instruction float_sin} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot float_shove integer_min float_swap integer_div integer_rot integer_yank float_cos integer_dec float_tan integer_yank tag_float_716 integer_yankdup float_shove float_div float_dec float_yankdup integer_fromfloat float_rot integer_stackdepth 74.71738484426498 integer_mod integer_mult float_swap integer_pop float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_dup_times float_shove integer_add integer_add float_sin integer_sub float_max print_float)
Errors: [46.0448 9 22.0416 10 3.7641 10 50.2258 10 42.7223 11 63.0068 10 6.0 1 7.8988 9 68.648 12 25.907 10 25.2446 10 8.5612 12 76.0 3 75.0 3 126.826 10 32.8836 11 1.4932 8 29.8573 12 20.0 1 24.2702 10 96.0 3 36.1005 10 97.0 2 85.7643 11 101.4173 11]
Total: 1381.6774
Mean: 27.633549
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 3705.458197499999
Median total errors in population: 1420.0
Error averages by case: (148.48958800000005 12.264 111.80353629999995 3.427 166.16178280000003 3.144 122.7669722 2.325 113.76066879999999 2.321 107.6916801 3.222 101.0496558 2.277 151.29512209999996 11.364 102.10555080000003 2.509 155.14668700000004 3.411 183.24837280000003 12.403 99.15128429999997 3.175 164.268584 4.125 163.6303076 4.108 174.9041105 4.35 142.0582487 13.256 99.81134159999999 2.225 127.9507663 3.233 113.95115359999998 2.292 162.1804849 3.427 182.228693 4.136 165.4449692 13.302 183.1637837 3.132 185.4471873000001 13.153 140.80266610000007 4.364)
Error minima by case: (13.6795 9 8.1551 2 3.7641 1 29.0 1 19.0 1 12.0 2 5.0 1 4.3787 9 1.2208 1 10.0438 2 10.8819 10 3.0 2 38.796 3 74.0 3 58.3219 3 19.8407 9 1.4932 1 29.8573 2 19.0 1 10.3837 2 22.3242 2 0.0583 7 28.9072 2 14.96 9 32.9016 2)
Average genome size in population (length): 35.339
Average program size in population (points): 36.339
Average percent parens in population: 0.032
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.5075
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 50
Genome diversity (% unique Plush genomes):	 0.543
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.543
Total error diversity:				 0.035
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 4779254
--- Timings ---
Current time: 1529615044621 milliseconds
Total Time:          15.5 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         6.5 seconds, 41.7%
Fitness Testing:      7.7 seconds, 49.7%
Report:               1.2 seconds,  7.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Number IO problem report - generation 4
Test total error for best: 64043.24209999995
Test mean error for best: 32.02162
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: -0.7243214455 
Correct output: -22.7658954997 | Program output: -0.7243214455 
Correct output: 4.6757403904   | Program output: 0.9116417761  
Correct output: 49.4414284912  | Program output: -0.7843280206 
Correct output: 41.9510447786  | Program output: -0.771253632  
Correct output: 64.0061015037  | Program output: 0.9993125603  
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: -0.7243214455 
Correct output: -67.7792458223 | Program output: 0.8687175677  
Correct output: -26.6313145907 | Program output: -0.7243214455 
Correct output: -25.4926767768 | Program output: -0.248074572  
Correct output: 8.2513564266   | Program output: -0.3098299608 
Correct output: 114.7960139475 | Program output: 38.7960139475 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -0.495863127  
Correct output: 32.1592946667  | Program output: -0.7243214455 
Correct output: 2.3853941457   | Program output: 0.8922071057  
Correct output: 29.9153689352  | Program output: 0.0580441477  
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -0.7243214455 
Correct output: 118.3242489435 | Program output: 22.3242489435 
Correct output: -36.6167768666 | Program output: -0.5162946152 
Correct output: 125.907177534  | Program output: 28.907177534  
Correct output: 85.0399635851  | Program output: -0.7243214455 
Correct output: -101.9015572683 | Program output: -0.4842605782 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction float_shove} {:instruction integer_min} {:instruction float_swap} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_yank} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction 74.71738484426498} {:instruction integer_mod} {:instruction integer_mult} {:instruction float_swap} {:instruction integer_pop} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction integer_add} {:instruction integer_add} {:instruction float_sin} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot float_shove integer_min float_swap integer_div integer_rot integer_yank float_cos integer_dec float_tan integer_yank tag_float_716 integer_yankdup float_shove float_div float_dec float_yankdup integer_fromfloat float_rot integer_stackdepth 74.71738484426498 integer_mod integer_mult float_swap integer_pop float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_dup_times float_shove integer_add integer_add float_sin integer_sub float_max print_float)
Errors: [46.0448 9 22.0416 10 3.7641 10 50.2258 10 42.7223 11 63.0068 10 6.0 1 7.8988 9 68.648 12 25.907 10 25.2446 10 8.5612 12 76.0 3 75.0 3 126.826 10 32.8836 11 1.4932 8 29.8573 12 20.0 1 24.2702 10 96.0 3 36.1005 10 97.0 2 85.7643 11 101.4173 11]
Total: 1381.6774
Mean: 27.633549
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 3474.3822598
Median total errors in population: 1420.0
Error averages by case: (139.40524760000005 12.191 102.70812939999993 3.349 156.0175631 3.189 114.08938210000001 2.352 105.04429569999999 2.374 99.48258590000003 3.257 89.66384440000002 2.113 141.8606876 11.266 95.73052950000002 2.473 146.05883960000006 3.332 173.41551200000006 12.294 89.92612249999993 3.255 153.6627393 3.995 153.117751 3.985 168.67431610000003 4.267 132.86217080000003 13.203 90.60545529999997 2.222 118.80054540000005 3.306 102.75340469999999 2.113 153.0590073 3.336 171.8302576 4.008 156.0714844 13.225 172.79021519999998 3.005 176.69686370000002 13.12 134.52230960000003 4.303)
Error minima by case: (12.6795 9 18.0 2 3.6923 2 25.276 1 19.0 1 10.7113 2 6.0 1 6.2918 9 5.0 1 25.907 2 25.2446 10 3.0 2 38.796 3 75.0 3 39.3219 3 18.8407 10 0.4099 1 28.9319 2 20.0 1 24.2702 2 22.3242 2 36.1005 10 28.9072 2 10.3226 8 48.0 3)
Average genome size in population (length): 33.423
Average program size in population (points): 34.423
Average percent parens in population: 0.034
Minimum age in population: 4.0
Maximum age in population: 7.625
Average age in population: 6.0095
Median age in population: 6.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 40
Genome diversity (% unique Plush genomes):	 0.592
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.592
Total error diversity:				 0.029
Error (vector) diversity:			 0.03
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 5617879
--- Timings ---
Current time: 1529615048078 milliseconds
Total Time:          18.9 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         8.1 seconds, 42.8%
Fitness Testing:      9.1 seconds, 48.3%
Report:               1.6 seconds,  8.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Number IO problem report - generation 5
Test total error for best: 63916.429199999926
Test mean error for best: 31.95821
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: -0.7243214455 
Correct output: -22.7658954997 | Program output: -0.7243214455 
Correct output: 4.6757403904   | Program output: 0.9116417761  
Correct output: 49.4414284912  | Program output: 1.2643389604  
Correct output: 41.9510447786  | Program output: -0.771253632  
Correct output: 64.0061015037  | Program output: 0.9993125603  
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: -0.7243214455 
Correct output: -67.7792458223 | Program output: 0.8687175677  
Correct output: -26.6313145907 | Program output: -0.7243214455 
Correct output: -25.4926767768 | Program output: -0.248074572  
Correct output: 8.2513564266   | Program output: -0.3098299608 
Correct output: 114.7960139475 | Program output: 38.7960139475 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -0.495863127  
Correct output: 32.1592946667  | Program output: -0.7243214455 
Correct output: 2.3853941457   | Program output: 0.8922071057  
Correct output: 29.9153689352  | Program output: 0.0580441477  
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -0.7243214455 
Correct output: 118.3242489435 | Program output: 22.3242489435 
Correct output: -36.6167768666 | Program output: -0.5162946152 
Correct output: 125.907177534  | Program output: 28.907177534  
Correct output: 85.0399635851  | Program output: -0.7243214455 
Correct output: -101.9015572683 | Program output: -0.4842605782 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tagged_289} {:instruction float_dup} {:instruction float_dup_times} {:instruction print_float} {:instruction tagged_217} {:instruction integer_rot} {:instruction tagged_757} {:instruction tagged_168} {:instruction float_mult} {:instruction print_integer} {:instruction float_add} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction float_tan} {:instruction in1} {:instruction integer_stackdepth} {:instruction 74.71738484426498} {:instruction integer_mod} {:instruction integer_mult} {:instruction float_swap} {:instruction integer_pop} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction integer_add} {:instruction integer_add} {:instruction float_sin} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (tagged_289 float_dup float_dup_times print_float tagged_217 integer_rot tagged_757 tagged_168 float_mult print_integer float_add float_dup_times float_dup_times integer_dup_times integer_sub float_tan in1 integer_stackdepth 74.71738484426498 integer_mod integer_mult float_swap integer_pop float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_dup_times float_shove integer_add integer_add float_sin integer_sub float_max print_float)
Errors: [46.0448 9 22.0416 10 3.7641 10 48.1771 11 42.7223 11 63.0068 10 6.0 1 7.8988 9 68.648 12 25.907 10 25.2446 10 8.5612 12 76.0 3 75.0 3 126.826 10 32.8836 11 1.4932 8 29.8573 12 20.0 1 24.2702 10 96.0 3 36.1005 10 97.0 2 85.7643 11 101.4173 11]
Total: 1380.6287000000002
Mean: 27.612574
Genome size: 41
Size: 42
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 3079.5891646999994
Median total errors in population: 1420.0
Error averages by case: (123.00467170000029 11.814 87.39568019999977 4.054 132.51713780000003 3.839 99.78723230000001 3.103 90.81117429999996 3.212 88.0554519000002 3.899 73.9933827 2.013 120.76630389999988 10.974 85.67076590000012 3.487 126.56528100000027 4.045 150.47157040000036 12.015 73.4383399999998 4.095 139.3667221 3.888 139.25911349999998 3.887 157.49473940000013 4.893 115.63212650000008 12.891 72.92910849999986 2.776 101.81201700000025 4.138 87.93057279999998 2.004 132.63473489999993 4.048 157.7473415 3.906 135.98966140000005 12.848 158.7778999 2.919 160.90933849999996 12.836 124.03879660000007 5.006)
Error minima by case: (13.6795 8 13.4026 2 3.6923 2 25.276 1 20.0 1 10.7113 2 6.0 1 6.2918 9 6.0 1 9.5372 2 10.6759 10 0.7993 2 37.204 3 16.1063 3 40.3219 3 19.8407 9 0.4099 1 20.8647 2 20.0 1 11.174 2 22.3242 3 0.4482 8 28.9072 2 14.96 8 3.9016 3)
Average genome size in population (length): 33.551
Average program size in population (points): 34.551
Average percent parens in population: 0.034
Minimum age in population: 5.25
Maximum age in population: 9.375
Average age in population: 7.511875
Median age in population: 7.5625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 64
Genome diversity (% unique Plush genomes):	 0.613
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 64
Syntactic diversity (% unique Push programs):	 0.613
Total error diversity:				 0.039
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 6459129
--- Timings ---
Current time: 1529615051823 milliseconds
Total Time:          22.6 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         9.9 seconds, 43.9%
Fitness Testing:     10.5 seconds, 46.6%
Report:               2.0 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Number IO problem report - generation 6
Test total error for best: 64005.65639999994
Test mean error for best: 32.00283
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: -0.101244688  
Correct output: -22.7658954997 | Program output: -0.101244688  
Correct output: 4.6757403904   | Program output: 0.9116417761  
Correct output: 49.4414284912  | Program output: -0.1014184586 
Correct output: 41.9510447786  | Program output: -0.1014184586 
Correct output: 64.0061015037  | Program output: 0.9993125603  
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: -0.101244688  
Correct output: -67.7792458223 | Program output: 0.8687175677  
Correct output: -26.6313145907 | Program output: -0.101244688  
Correct output: -25.4926767768 | Program output: -0.1014184586 
Correct output: 8.2513564266   | Program output: -0.1014184586 
Correct output: 114.7960139475 | Program output: 38.7960139475 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -0.1014184586 
Correct output: 32.1592946667  | Program output: -0.101244688  
Correct output: 2.3853941457   | Program output: 0.8922071057  
Correct output: 29.9153689352  | Program output: 0.0580441477  
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -0.101244688  
Correct output: 118.3242489435 | Program output: 22.3242489435 
Correct output: -36.6167768666 | Program output: -0.1014184586 
Correct output: 125.907177534  | Program output: 28.907177534  
Correct output: 85.0399635851  | Program output: -0.101244688  
Correct output: -101.9015572683 | Program output: -0.1014184586 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction float_sin} {:instruction integer_min} {:instruction float_swap} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_yank} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_yank} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction 75.29715081734332} {:instruction integer_stackdepth} {:instruction 74.71738484426498} {:instruction integer_mod} {:instruction integer_mult} {:instruction float_swap} {:instruction integer_pop} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction integer_add} {:instruction integer_add} {:instruction float_sin} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot float_sin integer_min float_swap integer_div integer_rot integer_yank float_cos integer_dec float_tan integer_yank tag_float_716 integer_yankdup float_shove float_div float_dec float_yankdup integer_div integer_rot integer_yank float_cos integer_dec float_tan integer_yank tag_float_716 integer_yankdup float_shove float_div float_dec float_yankdup integer_fromfloat 75.29715081734332 integer_stackdepth 74.71738484426498 integer_mod integer_mult float_swap integer_pop float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_dup_times float_shove integer_add integer_add float_sin integer_sub float_max print_float)
Errors: [45.4218 10 22.6647 11 3.7641 10 49.5428 8 42.0525 9 63.0068 10 6.0 1 7.2757 9 68.648 12 26.5301 10 25.3913 12 8.3528 9 76.0 3 75.0 3 127.2205 11 32.2605 8 1.4932 8 29.8573 12 20.0 1 24.8933 12 96.0 3 36.5154 10 97.0 2 85.1412 11 101.8001 9]
Total: 1375.8320999999999
Mean: 27.516642
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 3512.7872625999994
Median total errors in population: 1420.0
Error averages by case: (134.80695950000114 10.801 107.10384429999915 7.364 120.8053598000001 7.076 124.75163150000004 6.758 117.00662359999947 7.208 124.61812330000089 7.15 93.80387720000002 2.54 116.71684299999973 10.271 127.01210070000045 7.898 128.01640060000085 7.356 139.459209600001 11.386 93.37382339999908 7.989 157.9354665 4.373 159.6521796 4.39 188.90722270000035 7.886 125.33290660000033 12.163 90.20196509999938 5.677 116.86321680000097 8.058 108.74425199999999 2.499 130.23278449999967 7.387 175.38973829999995 4.329 137.11613600000018 11.842 176.63670869999999 3.432 171.14968069999992 12.076 160.91120860000032 8.33)
Error minima by case: (15.4869 8 18.0 2 3.357 1 19.6078 1 12.1174 1 10.7113 2 1.3395 1 5.8557 8 6.0 1 25.5808 2 24.4421 10 0.7993 2 33.796 3 74.0 3 87.0 3 2.3256 8 0.4099 1 0.0817 2 16.5154 1 23.9439 2 37.3242 3 35.5662 8 44.9072 2 4.04 8 49.0 3)
Average genome size in population (length): 38.065
Average program size in population (points): 39.065
Average percent parens in population: 0.029
Minimum age in population: 6.5
Maximum age in population: 10.8125
Average age in population: 9.11446875
Median age in population: 9.15625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 172
Genome diversity (% unique Plush genomes):	 0.629
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 172
Syntactic diversity (% unique Push programs):	 0.629
Total error diversity:				 0.066
Error (vector) diversity:			 0.068
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 7411829
--- Timings ---
Current time: 1529615055260 milliseconds
Total Time:          26.1 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        11.5 seconds, 44.0%
Fitness Testing:     12.0 seconds, 45.9%
Report:               2.5 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Number IO problem report - generation 7
Test total error for best: 64005.65639999994
Test mean error for best: 32.00283
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: -0.101244688  
Correct output: -22.7658954997 | Program output: -0.101244688  
Correct output: 4.6757403904   | Program output: 0.9116417761  
Correct output: 49.4414284912  | Program output: -0.1014184586 
Correct output: 41.9510447786  | Program output: -0.1014184586 
Correct output: 64.0061015037  | Program output: 0.9993125603  
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: -0.101244688  
Correct output: -67.7792458223 | Program output: 0.8687175677  
Correct output: -26.6313145907 | Program output: -0.101244688  
Correct output: -25.4926767768 | Program output: -0.1014184586 
Correct output: 8.2513564266   | Program output: -0.1014184586 
Correct output: 114.7960139475 | Program output: 38.7960139475 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -0.1014184586 
Correct output: 32.1592946667  | Program output: -0.101244688  
Correct output: 2.3853941457   | Program output: 0.8922071057  
Correct output: 29.9153689352  | Program output: 0.0580441477  
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -0.101244688  
Correct output: 118.3242489435 | Program output: 22.3242489435 
Correct output: -36.6167768666 | Program output: -0.1014184586 
Correct output: 125.907177534  | Program output: 28.907177534  
Correct output: 85.0399635851  | Program output: -0.101244688  
Correct output: -101.9015572683 | Program output: -0.1014184586 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction float_sin} {:instruction integer_min} {:instruction float_swap} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_yank} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_yank} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction 75.29715081734332} {:instruction integer_stackdepth} {:instruction 74.71738484426498} {:instruction integer_mod} {:instruction integer_mult} {:instruction float_swap} {:instruction integer_pop} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_sin} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot float_sin integer_min float_swap integer_div integer_rot integer_yank float_cos integer_dec float_tan integer_yank tag_float_716 integer_yankdup float_shove float_div float_dec float_yankdup integer_div integer_rot integer_yank float_cos integer_dec float_tan integer_yank tag_float_716 integer_yankdup float_shove float_div float_dec float_yankdup integer_fromfloat 75.29715081734332 integer_stackdepth 74.71738484426498 integer_mod integer_mult float_swap integer_pop float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_dup_times float_shove integer_add integer_stackdepth float_sin integer_sub float_max print_float)
Errors: [45.4218 10 22.6647 11 3.7641 10 49.5428 8 42.0525 9 63.0068 10 6.0 1 7.2757 9 68.648 12 26.5301 10 25.3913 12 8.3528 9 76.0 3 75.0 3 127.2205 11 32.2605 8 1.4932 8 29.8573 12 20.0 1 24.8933 12 96.0 3 36.5154 10 97.0 2 85.1412 11 101.8001 9]
Total: 1375.8320999999999
Mean: 27.516642
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2261.8196402000153
Median total errors in population: 1381.6774
Error averages by case: (79.32746880000134 9.438 57.488169099999254 10.154 42.463979700000266 9.771 82.26946680000012 9.803 75.1925903999997 10.61 93.4419002000014 9.837 43.49059319999999 2.505 44.42314150000059 9.29 100.88367390000083 11.75 62.062785299999554 10.135 63.07293279999972 10.464 43.577276999999086 11.413 111.25115359999987 4.274 115.87220530000009 4.349 157.51872040000055 10.272 67.15335540000038 11.065 37.27911129999991 7.994 64.2765095000013 11.502 61.32891150000002 2.429 60.65064059999963 10.221 128.86014549999976 4.134 72.25838670000034 10.535 130.53226730000011 3.429 116.74610729999904 11.176 132.8081471000008 11.04)
Error minima by case: (17.3648 8 17.19 2 3.3531 1 25.276 1 19.0 1 10.7113 2 5.0 1 6.2255 6 6.0 1 24.907 2 24.6206 9 3.0 2 39.4989 3 74.0 3 87.0 3 30.526 8 0.4099 1 28.7442 2 19.0 1 23.2702 2 43.0271 2 5.5765 10 50.61 2 9.7428 8 49.0 3)
Average genome size in population (length): 43.369
Average program size in population (points): 44.369
Average percent parens in population: 0.023
Minimum age in population: 8.625
Maximum age in population: 12.5
Average age in population: 10.657234375
Median age in population: 10.703125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 188
Genome diversity (% unique Plush genomes):	 0.579
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 188
Syntactic diversity (% unique Push programs):	 0.579
Total error diversity:				 0.081
Error (vector) diversity:			 0.082
Behavioral diversity:				 0.083
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 8496079
--- Timings ---
Current time: 1529615058518 milliseconds
Total Time:          29.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        12.9 seconds, 44.0%
Fitness Testing:     13.4 seconds, 45.7%
Report:               2.9 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Number IO problem report - generation 8
Test total error for best: 64005.65639999994
Test mean error for best: 32.00283
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: -0.101244688  
Correct output: -22.7658954997 | Program output: -0.101244688  
Correct output: 4.6757403904   | Program output: 0.9116417761  
Correct output: 49.4414284912  | Program output: -0.1014184586 
Correct output: 41.9510447786  | Program output: -0.1014184586 
Correct output: 64.0061015037  | Program output: 0.9993125603  
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: -0.101244688  
Correct output: -67.7792458223 | Program output: 0.8687175677  
Correct output: -26.6313145907 | Program output: -0.101244688  
Correct output: -25.4926767768 | Program output: -0.1014184586 
Correct output: 8.2513564266   | Program output: -0.1014184586 
Correct output: 114.7960139475 | Program output: 38.7960139475 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -0.1014184586 
Correct output: 32.1592946667  | Program output: -0.101244688  
Correct output: 2.3853941457   | Program output: 0.8922071057  
Correct output: 29.9153689352  | Program output: 0.0580441477  
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -0.101244688  
Correct output: 118.3242489435 | Program output: 22.3242489435 
Correct output: -36.6167768666 | Program output: -0.1014184586 
Correct output: 125.907177534  | Program output: 28.907177534  
Correct output: 85.0399635851  | Program output: -0.101244688  
Correct output: -101.9015572683 | Program output: -0.1014184586 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction float_shove} {:instruction integer_min} {:instruction float_swap} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_dec} {:instruction float_tan} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_yank} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction 75.29715081734332} {:instruction integer_stackdepth} {:instruction 74.71738484426498} {:instruction integer_mod} {:instruction integer_mult} {:instruction float_swap} {:instruction integer_pop} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction integer_add} {:instruction integer_add} {:instruction float_sin} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot float_shove integer_min float_swap integer_div integer_rot integer_yank float_cos integer_dec float_tan float_div float_dec float_yankdup integer_div integer_rot integer_yank float_cos integer_dec float_tan integer_yank tag_float_716 integer_yankdup float_shove float_div float_dec float_yankdup integer_fromfloat 75.29715081734332 integer_stackdepth 74.71738484426498 integer_mod integer_mult float_swap integer_pop float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_dup_times float_shove integer_add integer_add float_sin integer_sub float_max print_float)
Errors: [45.4218 10 22.6647 11 3.7641 10 49.5428 8 42.0525 9 63.0068 10 6.0 1 7.2757 9 68.648 12 26.5301 10 25.3913 12 8.3528 9 76.0 3 75.0 3 127.2205 11 32.2605 8 1.4932 8 29.8573 12 20.0 1 24.8933 12 96.0 3 36.5154 10 97.0 2 85.1412 11 101.8001 9]
Total: 1375.8320999999999
Mean: 27.516642
Genome size: 52
Size: 53
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2407.6298699000113
Median total errors in population: 1381.6774
Error averages by case: (85.77627370000114 9.309 64.09550239999913 10.404 47.87691470000026 9.764 87.44820120000024 9.869 82.70710179999952 10.46 98.33154750000155 9.816 47.81002699999997 2.445 50.03308010000041 9.238 105.99194900000083 11.921 67.9224545 10.352 70.61386190000034 10.66 51.18902369999891 11.153 115.86946189999989 4.259 120.0228602 4.285 164.77540970000035 10.483 73.44109650000024 10.826 42.034143899999826 7.992 69.30194100000152 11.43 65.96976330000004 2.417 66.36820579999981 10.424 133.48656809999986 4.122 79.8953701000002 10.733 135.0906177000001 3.372 123.22483849999898 11.124 140.4186557000006 11.077)
Error minima by case: (24.996 8 18.0 2 2.6103 1 25.276 1 19.0 1 10.7113 2 5.0 1 6.1745 7 6.0 1 25.5299 2 24.6826 10 0.7993 2 24.0 2 25.0 2 87.0 3 11.8348 8 0.4099 1 9.8573 2 19.0 1 23.8931 2 4.0 2 35.8067 8 3.0 1 9.3226 8 49.0 3)
Average genome size in population (length): 44.719
Average program size in population (points): 45.719
Average percent parens in population: 0.022
Minimum age in population: 9.90625
Maximum age in population: 14.0859375
Average age in population: 12.17571875
Median age in population: 12.203125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 111
Genome diversity (% unique Plush genomes):	 0.624
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 111
Syntactic diversity (% unique Push programs):	 0.624
Total error diversity:				 0.09
Error (vector) diversity:			 0.09
Behavioral diversity:				 0.09
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 9614054
--- Timings ---
Current time: 1529615061965 milliseconds
Total Time:          32.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        14.5 seconds, 44.3%
Fitness Testing:     14.9 seconds, 45.4%
Report:               3.3 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Number IO problem report - generation 9
Test total error for best: 64005.65639999994
Test mean error for best: 32.00283
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: -0.101244688  
Correct output: -22.7658954997 | Program output: -0.101244688  
Correct output: 4.6757403904   | Program output: 0.9116417761  
Correct output: 49.4414284912  | Program output: -0.1014184586 
Correct output: 41.9510447786  | Program output: -0.1014184586 
Correct output: 64.0061015037  | Program output: 0.9993125603  
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: -0.101244688  
Correct output: -67.7792458223 | Program output: 0.8687175677  
Correct output: -26.6313145907 | Program output: -0.101244688  
Correct output: -25.4926767768 | Program output: -0.1014184586 
Correct output: 8.2513564266   | Program output: -0.1014184586 
Correct output: 114.7960139475 | Program output: 38.7960139475 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -0.1014184586 
Correct output: 32.1592946667  | Program output: -0.101244688  
Correct output: 2.3853941457   | Program output: 0.8922071057  
Correct output: 29.9153689352  | Program output: 0.0580441477  
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -0.101244688  
Correct output: 118.3242489435 | Program output: 22.3242489435 
Correct output: -36.6167768666 | Program output: -0.1014184586 
Correct output: 125.907177534  | Program output: 28.907177534  
Correct output: 85.0399635851  | Program output: -0.101244688  
Correct output: -101.9015572683 | Program output: -0.1014184586 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction float_sin} {:instruction integer_min} {:instruction float_swap} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_yank} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_yank} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction 75.29715081734332} {:instruction integer_stackdepth} {:instruction 74.71738484426498} {:instruction integer_mod} {:instruction integer_mult} {:instruction float_swap} {:instruction integer_pop} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction integer_add} {:instruction integer_add} {:instruction float_sin} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot float_sin integer_min float_swap integer_div integer_rot integer_yank float_cos integer_dec float_tan integer_yank tag_float_716 integer_yankdup float_shove float_div float_dec float_yankdup integer_div integer_rot integer_yank float_cos integer_dec float_tan integer_yank tag_float_716 integer_yankdup float_shove float_div float_dec float_yankdup integer_fromfloat 75.29715081734332 integer_stackdepth 74.71738484426498 integer_mod integer_mult float_swap integer_pop float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_dup_times float_shove integer_add integer_add float_sin integer_sub float_max print_float)
Errors: [45.4218 10 22.6647 11 3.7641 10 49.5428 8 42.0525 9 63.0068 10 6.0 1 7.2757 9 68.648 12 26.5301 10 25.3913 12 8.3528 9 76.0 3 75.0 3 127.2205 11 32.2605 8 1.4932 8 29.8573 12 20.0 1 24.8933 12 96.0 3 36.5154 10 97.0 2 85.1412 11 101.8001 9]
Total: 1375.8320999999999
Mean: 27.516642
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2583.5202170999983
Median total errors in population: 1380.6287000000002
Error averages by case: (93.10098870000071 9.731 73.2146176999992 10.579 54.71316680000027 9.86 92.90755120000017 9.956 89.4389309999995 10.334 104.84075420000137 9.868 56.38801749999997 2.501 58.47523810000032 9.341 113.20560960000071 11.891 76.61504810000062 10.332 77.38652910000069 10.918 58.644187399998984 10.84 121.5058961999999 4.295 124.98972970000003 4.297 171.56949590000005 10.753 81.30919470000028 10.454 49.55811039999962 8.157 76.19932080000159 11.607 71.40098230000002 2.475 75.13611959999973 10.863 139.35807319999992 4.221 86.84801710000008 10.579 140.93434839999998 3.407 129.20999129999882 11.125 147.40129809999968 10.785)
Error minima by case: (29.3969 8 21.7153 8 0.7298 1 25.276 1 1.7918 1 10.7113 2 5.0 1 5.9584 7 6.0 1 25.5808 9 24.5435 9 3.0 2 24.0 2 25.0 2 87.0 3 31.1593 8 0.1811 1 10.2439 2 19.0 1 23.9439 8 4.0 2 35.6172 9 3.0 1 8.7428 8 49.0 3)
Average genome size in population (length): 45.825
Average program size in population (points): 46.825
Average percent parens in population: 0.022
Minimum age in population: 11.484375
Maximum age in population: 15.5078125
Average age in population: 13.63760546875
Median age in population: 13.6640625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 136
Genome diversity (% unique Plush genomes):	 0.588
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 136
Syntactic diversity (% unique Push programs):	 0.588
Total error diversity:				 0.108
Error (vector) diversity:			 0.109
Behavioral diversity:				 0.109
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 10759679
--- Timings ---
Current time: 1529615065404 milliseconds
Total Time:          36.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        16.0 seconds, 44.1%
Fitness Testing:     16.5 seconds, 45.4%
Report:               3.7 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Number IO problem report - generation 10
Test total error for best: 64012.80320000002
Test mean error for best: 32.00640
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 0.4768657671  
Correct output: -22.7658954997 | Program output: 0.4768657671  
Correct output: 4.6757403904   | Program output: 1.322594256   
Correct output: 49.4414284912  | Program output: 3.1602988176  
Correct output: 41.9510447786  | Program output: 0.5944069333  
Correct output: 64.0061015037  | Program output: 3.8881965664  
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.4768657671  
Correct output: -67.7792458223 | Program output: 0.4753024572  
Correct output: -26.6313145907 | Program output: 0.4768657671  
Correct output: -25.4926767768 | Program output: -0.8241733131 
Correct output: 8.2513564266   | Program output: 0.8138759329  
Correct output: 114.7960139475 | Program output: 38.7960139475 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -0.7632966828 
Correct output: 32.1592946667  | Program output: 0.4768657671  
Correct output: 2.3853941457   | Program output: 0.4364295204  
Correct output: 29.9153689352  | Program output: -0.8405588489 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: 0.4768657671  
Correct output: 118.3242489435 | Program output: 22.3242489435 
Correct output: -36.6167768666 | Program output: -0.7554961155 
Correct output: 125.907177534  | Program output: 28.907177534  
Correct output: 85.0399635851  | Program output: 0.4768657671  
Correct output: -101.9015572683 | Program output: -0.7674946694 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tagged_289} {:instruction float_dup} {:instruction float_dup_times} {:instruction print_float} {:instruction tagged_217} {:instruction in1} {:instruction tagged_757} {:instruction tagged_168} {:instruction float_pop} {:instruction print_integer} {:instruction float_add} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction float_tan} {:instruction in1} {:instruction integer_stackdepth} {:instruction 74.71738484426498} {:instruction integer_mod} {:instruction integer_mult} {:instruction float_swap} {:instruction integer_pop} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction integer_mod} {:instruction integer_mult} {:instruction float_swap} {:instruction integer_pop} {:instruction float_frominteger} {:instruction float_max} {:instruction float_stackdepth} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_cos} {:instruction integer_add} {:instruction float_sin} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (tagged_289 float_dup float_dup_times print_float tagged_217 in1 tagged_757 tagged_168 float_pop print_integer float_add float_dup_times float_dup_times integer_dup_times integer_sub float_tan in1 integer_stackdepth 74.71738484426498 integer_mod integer_mult float_swap integer_pop float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove integer_mod integer_mult float_swap integer_pop float_frominteger float_max float_stackdepth float_yank in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_dup_times float_shove float_cos integer_add float_sin integer_sub float_max print_float)
Errors: [44.8437 12 23.2428 10 3.3531 10 46.2811 11 41.3566 11 60.1179 10 6.0 1 6.6976 8 68.2545 10 27.1082 12 24.6685 11 7.4375 9 76.0 3 75.0 3 126.5586 10 31.6824 11 1.949 10 30.7559 11 20.0 1 25.4714 12 96.0 3 35.8613 11 97.0 2 84.5631 10 101.1341 11]
Total: 1374.3373
Mean: 27.486746
Genome size: 52
Size: 53
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2382.7597154000023
Median total errors in population: 1375.8320999999999
Error averages by case: (84.10735969999907 10.167 65.53948790000035 10.944 46.424286500000186 9.851 86.29885999999992 8.757 79.56488430000039 9.439 96.88093230000098 9.819 48.17733549999999 2.657 50.5644082999995 9.288 107.25996960000059 11.86 69.42744750000092 10.296 68.17384770000068 11.656 49.019567700000145 9.554 113.78891749999993 4.458 119.2412073000001 4.456 164.4133148999989 11.135 72.52647469999988 9.177 41.98095929999992 8.165 68.22462460000096 11.581 64.72132530000006 2.644 67.90726640000047 11.676 131.03578220000003 4.441 77.91386329999982 10.424 132.81540590000003 3.539 119.88365049999891 11.057 140.00653649999805 9.821)
Error minima by case: (28.3969 8 18.0 2 0.4593 1 25.276 1 19.8986 1 10.7113 2 5.0 1 6.0047 7 6.0 1 25.632 2 24.5435 9 3.8986 2 39.4989 3 74.0 3 87.0 3 31.1601 8 0.1479 1 25.6989 2 19.0 1 23.9952 2 43.0271 2 35.6172 9 50.61 2 9.7428 8 49.0 3)
Average genome size in population (length): 52.051
Average program size in population (points): 53.051
Average percent parens in population: 0.019
Minimum age in population: 12.859375
Maximum age in population: 17.083984375
Average age in population: 15.189810546875
Median age in population: 15.2099609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 50
Genome diversity (% unique Plush genomes):	 0.631
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.631
Total error diversity:				 0.112
Error (vector) diversity:			 0.112
Behavioral diversity:				 0.112
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 12060954
--- Timings ---
Current time: 1529615068763 milliseconds
Total Time:          39.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        17.4 seconds, 44.0%
Fitness Testing:     18.0 seconds, 45.4%
Report:               4.1 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Number IO problem report - generation 11
Test total error for best: 51110.27060000003
Test mean error for best: 25.55514
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: -0.1014184586 
Correct output: -22.7658954997 | Program output: -0.1014184586 
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: -0.1014184586 
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.1014184586 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 38.7960139475 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -0.1014184586 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -0.1014184586 
Correct output: 118.3242489435 | Program output: 22.3242489435 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 28.907177534  
Correct output: 85.0399635851  | Program output: -0.1014184586 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction float_sin} {:instruction integer_min} {:instruction float_swap} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_yank} {:instruction tag_float_716} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_yank} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction 75.29715081734332} {:instruction integer_stackdepth} {:instruction 74.71738484426498} {:instruction integer_mod} {:instruction integer_mult} {:instruction float_swap} {:instruction integer_pop} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot float_sin integer_min float_swap integer_div integer_rot integer_yank float_cos integer_dec float_tan integer_yank tag_float_716 float_cos integer_dec integer_flush integer_yank tag_float_716 integer_yankdup float_shove float_div float_dec float_yankdup integer_div integer_rot integer_yank float_cos integer_dec float_tan integer_yank tag_float_716 integer_yankdup float_shove float_frominteger float_dec float_yankdup integer_fromfloat 75.29715081734332 integer_stackdepth 74.71738484426498 integer_mod integer_mult float_swap integer_pop float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_dup_times float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [45.4219 10 22.6645 11 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 7.2759 8 6.0 1 26.5299 9 98.0 12 4.0 2 76.0 3 75.0 3 87.0 3 32.2607 10 5.0 1 36.0 2 20.0 1 24.8931 10 96.0 3 78.0 13 97.0 2 85.1414 10 49.0 3]
Total: 1243.1874
Mean: 24.863749
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2473.7206932000004
Median total errors in population: 1375.8320999999999
Error averages by case: (87.0786675999984 10.238 68.63868530000038 11.096 49.76249490000022 9.902 90.57445709999989 8.315 83.57435540000046 9.123 101.12884380000152 9.926 52.23052799999995 2.533 53.97013669999911 9.24 109.5833910000007 11.939 73.59018070000157 10.297 71.60830640000114 11.924 52.86595790000023 9.22 118.36140079999994 4.382 123.9776415000001 4.341 166.40552569999858 11.194 75.4705003999993 8.638 45.562349999999796 8.173 72.91207960000158 11.694 69.88715520000005 2.518 72.15783990000075 11.979 135.3811598 4.365 81.15073289999948 10.361 137.18220970000013 3.438 123.1688813999988 11.097 142.13621149999724 9.428)
Error minima by case: (10.6795 9 18.0 2 2.7641 2 24.8557 1 19.0 1 10.291 2 6.0 1 5.5901 8 6.0 1 25.7395 2 24.6685 10 3.0 2 24.0 2 25.0 2 24.5288 3 16.8407 8 0.4099 1 19.8573 2 20.0 1 24.1027 2 4.0 2 35.8613 9 3.0 1 9.7428 9 49.0 3)
Average genome size in population (length): 54.674
Average program size in population (points): 55.674
Average percent parens in population: 0.018
Minimum age in population: 13.859375
Maximum age in population: 18.548828125
Average age in population: 16.6457529296875
Median age in population: 16.7138671875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 46
Genome diversity (% unique Plush genomes):	 0.724
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 46
Syntactic diversity (% unique Push programs):	 0.724
Total error diversity:				 0.081
Error (vector) diversity:			 0.082
Behavioral diversity:				 0.083
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 13427804
--- Timings ---
Current time: 1529615072400 milliseconds
Total Time:          43.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        19.1 seconds, 44.1%
Fitness Testing:     19.6 seconds, 45.3%
Report:               4.5 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Number IO problem report - generation 12
Test total error for best: 51110.27060000003
Test mean error for best: 25.55514
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: -0.1014184586 
Correct output: -22.7658954997 | Program output: -0.1014184586 
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: -0.1014184586 
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.1014184586 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 38.7960139475 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -0.1014184586 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -0.1014184586 
Correct output: 118.3242489435 | Program output: 22.3242489435 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 28.907177534  
Correct output: 85.0399635851  | Program output: -0.1014184586 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction float_sin} {:instruction integer_min} {:instruction float_swap} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_yank} {:instruction tag_float_716} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_yank} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction 75.29715081734332} {:instruction integer_stackdepth} {:instruction 74.71738484426498} {:instruction integer_mod} {:instruction integer_mult} {:instruction float_swap} {:instruction integer_pop} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot float_sin integer_min float_swap integer_div integer_rot integer_yank float_cos integer_dec float_tan integer_yank tag_float_716 float_cos integer_dec integer_flush integer_yank tag_float_716 integer_yankdup float_shove float_div float_dec float_yankdup integer_div integer_rot integer_yank float_cos integer_dec float_tan integer_yank tag_float_716 integer_yankdup float_shove float_frominteger float_dec float_yankdup integer_fromfloat 75.29715081734332 integer_stackdepth 74.71738484426498 integer_mod integer_mult float_swap integer_pop float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_dup_times float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [45.4219 10 22.6645 11 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 7.2759 8 6.0 1 26.5299 9 98.0 12 4.0 2 76.0 3 75.0 3 87.0 3 32.2607 10 5.0 1 36.0 2 20.0 1 24.8931 10 96.0 3 78.0 13 97.0 2 85.1414 10 49.0 3]
Total: 1243.1874
Mean: 24.863749
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2516.406833900002
Median total errors in population: 1375.8320999999999
Error averages by case: (87.76509289999848 10.27 69.77712150000029 11.075 54.44725100000026 9.846 92.97071649999988 8.32 86.0859269000003 9.123 103.36356290000136 9.858 53.630925399999974 2.601 54.626054599999165 9.23 112.3077204000007 11.834 73.63133130000152 10.338 75.34502640000105 11.927 55.87624300000026 9.143 118.79149619999993 4.423 123.77720730000006 4.421 169.3419110999984 11.141 76.31902139999927 8.768 48.987688299999746 8.155 75.35913950000143 11.566 69.67515550000006 2.58 72.09553770000097 11.938 136.05004200000005 4.414 84.76026909999938 10.411 137.7524586 3.501 123.22656169999887 11.064 145.01637269999725 9.48)
Error minima by case: (27.8683 8 18.0 2 0.7298 2 24.8557 1 19.8986 1 10.291 2 6.0 1 5.5127 7 5.8986 1 25.4515 2 24.5239 8 0.7993 2 38.796 3 75.0 3 86.8986 3 31.1598 8 0.4099 1 20.8647 2 20.0 1 23.8147 2 22.3242 2 35.7491 9 28.9072 2 9.7428 8 48.8986 3)
Average genome size in population (length): 54.911
Average program size in population (points): 55.911
Average percent parens in population: 0.018
Minimum age in population: 15.98046875
Maximum age in population: 20.22412109375
Average age in population: 18.156923828125
Median age in population: 18.22119140625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.79
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.79
Total error diversity:				 0.096
Error (vector) diversity:			 0.096
Behavioral diversity:				 0.096
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 14800579
--- Timings ---
Current time: 1529615076129 milliseconds
Total Time:          47.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        20.6 seconds, 43.8%
Fitness Testing:     21.4 seconds, 45.5%
Report:               4.9 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Number IO problem report - generation 13
Test total error for best: 51110.27060000003
Test mean error for best: 25.55514
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: -0.1014184586 
Correct output: -22.7658954997 | Program output: -0.1014184586 
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: -0.1014184586 
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.1014184586 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 38.7960139475 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -0.1014184586 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -0.1014184586 
Correct output: 118.3242489435 | Program output: 22.3242489435 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 28.907177534  
Correct output: 85.0399635851  | Program output: -0.1014184586 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tagged_289} {:instruction float_dup} {:instruction float_dup_times} {:instruction print_float} {:instruction tagged_197} {:instruction in1} {:instruction tagged_757} {:instruction tagged_168} {:instruction float_pop} {:instruction print_integer} {:instruction float_add} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction float_tan} {:instruction in1} {:instruction integer_stackdepth} {:instruction 74.71738484426498} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_yank} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction 75.29715081734332} {:instruction integer_stackdepth} {:instruction 74.71738484426498} {:instruction integer_mod} {:instruction integer_mult} {:instruction float_swap} {:instruction integer_pop} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (tagged_289 float_dup float_dup_times print_float tagged_197 in1 tagged_757 tagged_168 float_pop print_integer float_add float_dup_times float_dup_times integer_dup_times integer_sub float_tan in1 integer_stackdepth 74.71738484426498 integer_dec float_tan integer_yank tag_float_716 integer_yankdup float_shove float_frominteger float_dec float_yankdup integer_fromfloat 75.29715081734332 integer_stackdepth 74.71738484426498 integer_mod integer_mult float_swap integer_pop float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_dup_times float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [45.4219 10 22.6645 11 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 7.2759 8 6.0 1 26.5299 9 98.0 12 4.0 2 76.0 3 75.0 3 87.0 3 32.2607 10 5.0 1 36.0 2 20.0 1 24.8931 10 96.0 3 78.0 13 97.0 2 85.1414 10 49.0 3]
Total: 1243.1874
Mean: 24.863749
Genome size: 54
Size: 55
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2247.8030850000036
Median total errors in population: 1375.8320999999999
Error averages by case: (77.74152969999892 10.394 59.25330590000034 11.002 43.23816390000019 9.747 81.45345429999978 8.391 74.46944050000016 9.149 90.56293830000095 9.731 42.35602849999998 2.692 44.27630039999949 9.177 98.92860920000062 11.456 63.669181900001085 10.429 65.36288920000078 11.826 43.83703720000023 9.044 109.26166679999997 4.524 115.46725210000007 4.494 158.6300232999989 10.862 66.10188879999912 9.082 36.084077000000015 8.237 63.23626380000102 11.321 60.02383410000009 2.662 62.19321620000094 11.842 126.52430200000006 4.519 74.31557749999946 10.481 128.4024407000001 3.604 113.95165729999897 10.892 133.44800639999764 9.456)
Error minima by case: (28.3969 8 15.1294 2 0.7298 2 25.276 1 19.0 1 10.7113 2 0.5458 1 1.5416 7 3.0895 1 18.9948 2 24.2446 8 0.7993 2 32.7598 3 49.8592 3 87.0 3 30.1574 8 0.4099 1 9.8573 2 1.2412 1 17.358 2 36.2881 3 35.1005 9 43.871 2 3.0038 7 49.0 3)
Average genome size in population (length): 54.974
Average program size in population (points): 55.974
Average percent parens in population: 0.018
Minimum age in population: 16.98046875
Maximum age in population: 21.9248046875
Average age in population: 19.58323266601562
Median age in population: 19.619140625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.782
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.782
Total error diversity:				 0.137
Error (vector) diversity:			 0.138
Behavioral diversity:				 0.138
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 16175004
--- Timings ---
Current time: 1529615079760 milliseconds
Total Time:          50.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        22.1 seconds, 43.8%
Fitness Testing:     23.0 seconds, 45.5%
Report:               5.3 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Number IO problem report - generation 14
Test total error for best: 51110.27060000003
Test mean error for best: 25.55514
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: -0.1014184586 
Correct output: -22.7658954997 | Program output: -0.1014184586 
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: -0.1014184586 
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.1014184586 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 38.7960139475 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -0.1014184586 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -0.1014184586 
Correct output: 118.3242489435 | Program output: 22.3242489435 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 28.907177534  
Correct output: 85.0399635851  | Program output: -0.1014184586 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction float_sin} {:instruction integer_min} {:instruction float_swap} {:instruction integer_div} {:instruction integer_rot} {:instruction print_float} {:instruction tagged_197} {:instruction in1} {:instruction tagged_757} {:instruction tagged_168} {:instruction float_pop} {:instruction print_integer} {:instruction float_add} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction float_tan} {:instruction in1} {:instruction integer_stackdepth} {:instruction 74.71738484426498} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_yank} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction 75.29715081734332} {:instruction integer_stackdepth} {:instruction 74.71738484426498} {:instruction integer_mod} {:instruction integer_mult} {:instruction float_swap} {:instruction integer_pop} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot float_sin integer_min float_swap integer_div integer_rot print_float tagged_197 in1 tagged_757 tagged_168 float_pop print_integer float_add float_dup_times float_dup_times integer_dup_times integer_sub float_tan in1 integer_stackdepth 74.71738484426498 integer_dec float_tan integer_yank tag_float_716 integer_yankdup float_shove float_frominteger float_dec float_yankdup integer_fromfloat 75.29715081734332 integer_stackdepth 74.71738484426498 integer_mod integer_mult float_swap integer_pop float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_dup_times float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [45.4219 10 22.6645 11 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 7.2759 8 6.0 1 26.5299 9 98.0 12 4.0 2 76.0 3 75.0 3 87.0 3 32.2607 10 5.0 1 36.0 2 20.0 1 24.8931 10 96.0 3 78.0 13 97.0 2 85.1414 10 49.0 3]
Total: 1243.1874
Mean: 24.863749
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2468.157405500005
Median total errors in population: 1375.4551
Error averages by case: (87.6869102999995 10.677 69.12829660000004 10.854 63.46516320000014 8.543 86.13685269999971 7.865 79.1384059999999 8.309 92.29476610000025 8.567 52.970547699999976 2.608 54.46275439999975 9.174 101.4023383000002 9.603 73.77310970000065 10.508 83.91741740000057 11.725 51.35857550000013 7.997 118.81760909999998 4.417 123.45874530000003 4.386 161.6413378999993 9.805 75.93189699999981 9.932 46.7180192999999 7.758 75.39643260000052 9.652 70.2484142 2.55 72.4790636000002 11.408 136.38757109999997 4.435 88.28164579999988 11.121 138.1099366 3.499 124.43845129999926 10.554 135.50614379999817 9.06)
Error minima by case: (28.5847 9 17.8986 2 0.7298 2 25.276 1 20.0 1 0.4827 2 0.5458 1 0.5825 7 6.0 1 24.8857 2 24.344 8 0.7993 2 35.2185 3 16.0918 3 24.5288 3 15.4234 8 0.4099 1 20.8647 2 1.2412 1 23.2489 2 31.6903 2 4.8679 9 24.1074 2 9.7428 7 49.0 3)
Average genome size in population (length): 55.098
Average program size in population (points): 56.098
Average percent parens in population: 0.018
Minimum age in population: 18.6640625
Maximum age in population: 23.0767822265625
Average age in population: 21.01976342773438
Median age in population: 21.0582275390625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.721
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.721
Total error diversity:				 0.176
Error (vector) diversity:			 0.176
Behavioral diversity:				 0.177
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 17552454
--- Timings ---
Current time: 1529615083353 milliseconds
Total Time:          54.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        23.6 seconds, 43.6%
Fitness Testing:     24.7 seconds, 45.7%
Report:               5.7 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Number IO problem report - generation 15
Test total error for best: 51110.27060000003
Test mean error for best: 25.55514
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: -0.1014184586 
Correct output: -22.7658954997 | Program output: -0.1014184586 
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: -0.1014184586 
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.1014184586 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 38.7960139475 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -0.1014184586 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -0.1014184586 
Correct output: 118.3242489435 | Program output: 22.3242489435 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 28.907177534  
Correct output: 85.0399635851  | Program output: -0.1014184586 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tagged_289} {:instruction float_max} {:instruction float_dup_times} {:instruction print_float} {:instruction tagged_197} {:instruction in1} {:instruction tagged_757} {:instruction tagged_168} {:instruction float_pop} {:instruction print_integer} {:instruction float_add} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction float_tan} {:instruction in1} {:instruction integer_stackdepth} {:instruction 74.71738484426498} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_yank} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction 75.29715081734332} {:instruction integer_stackdepth} {:instruction 74.71738484426498} {:instruction integer_mod} {:instruction integer_mult} {:instruction float_swap} {:instruction integer_pop} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (tagged_289 float_max float_dup_times print_float tagged_197 in1 tagged_757 tagged_168 float_pop print_integer float_add float_dup_times float_dup_times integer_dup_times integer_sub float_tan in1 integer_stackdepth 74.71738484426498 integer_dec float_tan integer_yank tag_float_716 integer_yankdup float_shove float_frominteger float_dec float_yankdup integer_fromfloat 75.29715081734332 integer_stackdepth 74.71738484426498 integer_mod integer_mult float_swap integer_pop float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_dup_times float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [45.4219 10 22.6645 11 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 7.2759 8 6.0 1 26.5299 9 98.0 12 4.0 2 76.0 3 75.0 3 87.0 3 32.2607 10 5.0 1 36.0 2 20.0 1 24.8931 10 96.0 3 78.0 13 97.0 2 85.1414 10 49.0 3]
Total: 1243.1874
Mean: 24.863749
Genome size: 54
Size: 55
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2267.0721914999895
Median total errors in population: 1253.6679000000001
Error averages by case: (82.53836320000038 10.515 63.10341079999961 10.898 91.67085389999974 4.849 73.61492370000006 4.133 65.26733089999988 4.402 66.34429000000006 5.01 46.4759879 2.208 49.86405100000007 9.259 69.15725799999998 4.939 68.48225050000028 9.764 110.8743892000003 11.995 44.776810600000054 4.824 112.15844420000003 4.018 114.53889120000005 3.888 138.72887609999984 6.38 71.00087549999971 10.329 43.12785309999994 4.397 72.03104790000022 5.447 61.05024310000002 2.038 67.24724970000022 10.574 130.22784380000007 4.076 101.83683989999996 12.256 131.6375881 3.09 118.75817209999894 10.437 106.80734709999948 6.025)
Error minima by case: (13.6795 8 18.0 2 1.1989 2 25.276 1 19.0 1 0.4827 2 0.5458 1 1.5127 7 5.0 1 24.6613 2 24.5239 8 3.0 2 38.796 3 49.8592 3 86.0 3 19.8407 8 0.4099 1 28.3311 2 1.2412 1 23.0245 2 22.3242 2 35.7604 9 28.9072 2 9.7428 7 48.0 3)
Average genome size in population (length): 56.929
Average program size in population (points): 57.929
Average percent parens in population: 0.017
Minimum age in population: 20.32763671875
Maximum age in population: 24.35748291015625
Average age in population: 22.56567767333984
Median age in population: 22.58465576171875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 32
Genome diversity (% unique Plush genomes):	 0.689
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.689
Total error diversity:				 0.146
Error (vector) diversity:			 0.146
Behavioral diversity:				 0.147
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 18975729
--- Timings ---
Current time: 1529615086972 milliseconds
Total Time:          57.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        25.1 seconds, 43.4%
Fitness Testing:     26.4 seconds, 45.7%
Report:               6.2 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Number IO problem report - generation 16
Test total error for best: 51110.27060000003
Test mean error for best: 25.55514
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: -0.1014184586 
Correct output: -22.7658954997 | Program output: -0.1014184586 
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: -0.1014184586 
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.1014184586 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 38.7960139475 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -0.1014184586 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -0.1014184586 
Correct output: 118.3242489435 | Program output: 22.3242489435 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 28.907177534  
Correct output: 85.0399635851  | Program output: -0.1014184586 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tagged_289} {:instruction float_dup} {:instruction float_dup_times} {:instruction print_float} {:instruction tagged_217} {:instruction in1} {:instruction tagged_757} {:instruction tagged_168} {:instruction float_pop} {:instruction print_integer} {:instruction float_add} {:instruction integer_stackdepth} {:instruction 74.71738484426498} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_yank} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction 75.29715081734332} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction integer_fromfloat} {:instruction 75.29715081734332} {:instruction integer_stackdepth} {:instruction 74.71738484426498} {:instruction integer_mod} {:instruction integer_mult} {:instruction float_swap} {:instruction integer_pop} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (tagged_289 float_dup float_dup_times print_float tagged_217 in1 tagged_757 tagged_168 float_pop print_integer float_add integer_stackdepth 74.71738484426498 integer_dec float_tan integer_yank tag_float_716 integer_yankdup float_shove float_frominteger float_dec float_yankdup integer_fromfloat 75.29715081734332 integer_stackdepth float_frominteger float_max float_yankdup float_yank in2 integer_fromfloat 75.29715081734332 integer_stackdepth 74.71738484426498 integer_mod integer_mult float_swap integer_pop float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_dup_times float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [45.4219 10 22.6645 11 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 7.2759 8 6.0 1 26.5299 9 98.0 12 4.0 2 76.0 3 75.0 3 87.0 3 32.2607 10 5.0 1 36.0 2 20.0 1 24.8931 10 96.0 3 78.0 13 97.0 2 85.1414 10 49.0 3]
Total: 1243.1874
Mean: 24.863749
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2365.469411700013
Median total errors in population: 1243.1874
Error averages by case: (89.79240530000071 10.306 69.20300239999945 10.672 119.03342749999999 2.553 73.1300652 1.621 63.763937300000016 1.756 57.1830052 2.587 51.62125170000001 1.827 57.812600400000306 8.694 56.95368939999997 2.215 75.60015300000019 9.03 137.19731089999996 12.126 48.3575392 2.657 117.18394080000002 3.745 117.6274413 3.552 132.81992570000003 4.084 78.28744839999939 10.416 48.850399800000005 1.747 78.72708750000001 2.713 64.95846880000002 1.638 74.60222450000063 9.806 135.7296183000001 3.769 118.77091699999998 13.042 136.90654819999997 2.749 126.24646809999797 10.432 97.3855357999999 3.988)
Error minima by case: (29.3969 9 18.0 2 3.385 2 25.8557 1 20.0 1 11.291 2 0.5458 1 5.0244 7 6.0 1 24.6313 2 25.3913 9 4.0 2 39.4989 3 49.8592 3 87.0 3 30.0093 7 1.1452 1 29.8573 2 1.2412 1 22.9945 2 43.0271 3 36.5154 9 50.61 2 9.7428 9 49.0 3)
Average genome size in population (length): 59.138
Average program size in population (points): 60.138
Average percent parens in population: 0.017
Minimum age in population: 21.80322265625
Maximum age in population: 25.94723510742188
Average age in population: 24.12519570922852
Median age in population: 24.12733459472656
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 36
Genome diversity (% unique Plush genomes):	 0.712
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.712
Total error diversity:				 0.072
Error (vector) diversity:			 0.072
Behavioral diversity:				 0.072
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 20454229
--- Timings ---
Current time: 1529615090709 milliseconds
Total Time:          61.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.7 seconds, 43.3%
Fitness Testing:     28.1 seconds, 45.6%
Report:               6.7 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Number IO problem report - generation 17
Test total error for best: 51110.27060000003
Test mean error for best: 25.55514
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: -0.1014184586 
Correct output: -22.7658954997 | Program output: -0.1014184586 
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: -0.1014184586 
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.1014184586 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 38.7960139475 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -0.1014184586 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -0.1014184586 
Correct output: 118.3242489435 | Program output: 22.3242489435 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 28.907177534  
Correct output: 85.0399635851  | Program output: -0.1014184586 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tagged_289} {:instruction float_dup} {:instruction float_dup_times} {:instruction print_float} {:instruction tagged_197} {:instruction in1} {:instruction tagged_757} {:instruction tagged_168} {:instruction float_pop} {:instruction print_integer} {:instruction float_add} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction float_tan} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction 74.71738484426498} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_yank} {:instruction tag_float_716} {:instruction float_mod} {:instruction float_shove} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction 75.29715081734332} {:instruction integer_stackdepth} {:instruction 74.71738484426498} {:instruction integer_mod} {:instruction integer_mult} {:instruction float_swap} {:instruction integer_pop} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (tagged_289 float_dup float_dup_times print_float tagged_197 in1 tagged_757 tagged_168 float_pop print_integer float_add float_dup_times float_dup_times integer_dup_times integer_sub float_tan float_stackdepth integer_stackdepth 74.71738484426498 integer_dec float_tan integer_yank tag_float_716 float_mod float_shove float_frominteger float_dec float_yankdup integer_fromfloat 75.29715081734332 integer_stackdepth 74.71738484426498 integer_mod integer_mult float_swap integer_pop float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_dup_times float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [45.4219 10 22.6645 11 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 7.2759 8 6.0 1 26.5299 9 98.0 12 4.0 2 76.0 3 75.0 3 87.0 3 32.2607 10 5.0 1 36.0 2 20.0 1 24.8931 10 96.0 3 78.0 13 97.0 2 85.1414 10 49.0 3]
Total: 1243.1874
Mean: 24.863749
Genome size: 54
Size: 55
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2444.451076000016
Median total errors in population: 1243.1874
Error averages by case: (94.49252410000074 10.336 74.39391549999945 10.694 121.6106938 2.575 75.25690319999998 1.664 65.96698600000002 1.778 59.1743198 2.608 53.4921906 1.836 63.01614640000035 8.648 62.52876609999997 2.187 80.71072790000007 9.021 139.77237809999997 12.144 51.47676810000001 2.674 117.83620360000005 3.747 118.34859670000004 3.604 138.09482820000002 4.064 83.14069359999931 10.463 52.036525400000016 1.756 81.05308520000003 2.706 65.90628890000002 1.679 79.76255910000073 9.795 136.27791740000012 3.779 121.3238484 13.092 137.4507112 2.768 130.51271439999758 10.442 102.7877842999999 3.967)
Error minima by case: (24.8877 9 8.8684 2 3.6757 1 25.8557 1 19.8986 1 11.291 2 5.0 1 5.774 8 5.8986 1 5.0029 2 24.5239 9 3.8986 2 39.4989 3 74.0 3 86.8986 3 11.7264 8 1.3854 1 28.9154 2 18.4458 1 6.6397 2 43.0271 3 35.7604 11 50.61 2 9.7428 9 48.8986 2)
Average genome size in population (length): 59.362
Average program size in population (points): 60.362
Average percent parens in population: 0.017
Minimum age in population: 23.34796142578125
Maximum age in population: 27.57255554199219
Average age in population: 25.6208766784668
Median age in population: 25.64809417724609
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.79
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.79
Total error diversity:				 0.06
Error (vector) diversity:			 0.061
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 21938454
--- Timings ---
Current time: 1529615094688 milliseconds
Total Time:          65.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.2 seconds, 43.1%
Fitness Testing:     30.0 seconds, 45.9%
Report:               7.1 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Number IO problem report - generation 18
Test total error for best: 51110.27060000003
Test mean error for best: 25.55514
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: -0.1014184586 
Correct output: -22.7658954997 | Program output: -0.1014184586 
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: -0.1014184586 
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.1014184586 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 38.7960139475 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -0.1014184586 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -0.1014184586 
Correct output: 118.3242489435 | Program output: 22.3242489435 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 28.907177534  
Correct output: 85.0399635851  | Program output: -0.1014184586 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tagged_289} {:instruction float_dup} {:instruction float_dup_times} {:instruction print_float} {:instruction tagged_217} {:instruction in1} {:instruction tagged_757} {:instruction tagged_168} {:instruction float_pop} {:instruction print_integer} {:instruction tagged_757} {:instruction tagged_168} {:instruction float_pop} {:instruction print_integer} {:instruction float_add} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction float_tan} {:instruction in1} {:instruction integer_stackdepth} {:instruction 74.71738484426498} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_yank} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction 75.29715081734332} {:instruction integer_stackdepth} {:instruction 74.71738484426498} {:instruction integer_mod} {:instruction integer_mult} {:instruction float_swap} {:instruction integer_pop} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_mod} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (tagged_289 float_dup float_dup_times print_float tagged_217 in1 tagged_757 tagged_168 float_pop print_integer tagged_757 tagged_168 float_pop print_integer float_add float_dup_times float_dup_times integer_dup_times integer_sub float_tan in1 integer_stackdepth 74.71738484426498 integer_dec float_tan integer_yank tag_float_716 integer_yankdup float_shove float_frominteger float_dec float_yankdup integer_fromfloat 75.29715081734332 integer_stackdepth 74.71738484426498 integer_mod integer_mult float_swap integer_pop float_frominteger float_max float_yankdup integer_mod in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_dup_times float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [45.4219 10 22.6645 11 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 7.2759 8 6.0 1 26.5299 9 98.0 12 4.0 2 76.0 3 75.0 3 87.0 3 32.2607 10 5.0 1 36.0 2 20.0 1 24.8931 10 96.0 3 78.0 13 97.0 2 85.1414 10 49.0 3]
Total: 1243.1874
Mean: 24.863749
Genome size: 58
Size: 59
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2727.350746800014
Median total errors in population: 1243.1874
Error averages by case: (105.75294900000085 10.339 85.95343989999931 10.819 132.70765600000001 2.634 87.0128842 1.731 77.79862860000003 1.883 71.15557359999998 2.678 64.55596310000001 1.976 74.35274699999971 8.672 74.2348341 2.417 92.04066089999907 9.166 150.5421515 12.172 62.22431679999999 2.761 129.1156793 3.907 129.7895848 3.671 148.49483669999995 4.25 94.50853269999924 10.46 62.034012400000016 1.839 92.67172359999999 2.807 78.03659530000002 1.77 91.02257450000079 9.95 147.15328060000007 3.934 132.2801371 13.08 148.3440142999999 2.922 141.3588454999973 10.445 113.72612529999991 4.2)
Error minima by case: (13.6795 9 17.0 2 4.7772 1 26.8557 1 20.0 1 12.291 2 5.0 1 1.1637 8 6.0 1 24.7725 2 25.3913 11 4.0 2 24.0 2 25.0 2 87.0 3 19.8407 8 1.9338 1 30.0168 2 19.0 1 23.9439 2 4.0 2 36.5154 10 3.0 1 8.7428 8 49.0 2)
Average genome size in population (length): 59.193
Average program size in population (points): 60.193
Average percent parens in population: 0.017
Minimum age in population: 24.50372314453125
Maximum age in population: 28.97840881347656
Average age in population: 27.07912557983398
Median age in population: 27.10882186889648
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.845
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.845
Total error diversity:				 0.061
Error (vector) diversity:			 0.062
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 23418429
--- Timings ---
Current time: 1529615098417 milliseconds
Total Time:          69.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.7 seconds, 42.8%
Fitness Testing:     31.8 seconds, 46.0%
Report:               7.6 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Number IO problem report - generation 19
Test total error for best: 51073.69199999999
Test mean error for best: 25.53685
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 2.082085845   
Correct output: -22.7658954997 | Program output: 2.082085845   
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.082085845   
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: 2.082085845   
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 38.7960139475 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 2.082085845   
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: 2.082085845   
Correct output: 118.3242489435 | Program output: 22.3242489435 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 28.907177534  
Correct output: 85.0399635851  | Program output: 2.082085845   
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction float_sin} {:instruction integer_min} {:instruction float_swap} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_yank} {:instruction tag_float_716} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_yank} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_yank} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction 76.52126632416962} {:instruction integer_stackdepth} {:instruction 74.71738484426498} {:instruction integer_mod} {:instruction integer_mult} {:instruction float_swap} {:instruction integer_pop} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot float_sin integer_min float_swap integer_div integer_rot integer_yank float_cos integer_dec float_tan integer_yank tag_float_716 float_cos integer_dec integer_flush integer_yank tag_float_716 integer_yankdup float_shove float_div float_dec float_yankdup integer_div integer_rot integer_yank integer_dup_items integer_mod float_tan integer_yank tag_float_716 integer_yankdup float_shove float_frominteger float_dec float_yankdup integer_fromfloat 76.52126632416962 integer_stackdepth 74.71738484426498 integer_mod integer_mult float_swap integer_pop float_frominteger float_max float_yankdup float_dup in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_dup_times float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [43.2384 9 24.848 11 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.0924 10 6.0 1 28.7134 11 98.0 12 4.0 2 76.0 3 75.0 3 87.0 3 30.0772 10 5.0 1 36.0 2 20.0 1 27.0766 9 96.0 3 78.0 13 97.0 2 82.9579 9 49.0 3]
Total: 1242.0038999999997
Mean: 24.840078
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2468.390266400017
Median total errors in population: 1243.1874
Error averages by case: (93.41244480000071 10.312 73.47634849999947 10.744 124.03928430000002 2.557 77.73005010000001 1.661 68.52890180000003 1.837 61.66261479999999 2.601 55.1865276 1.864 61.560988300000325 8.59 61.52429239999997 2.261 79.52128399999988 9.088 142.19328849999997 12.119 53.194202000000004 2.729 120.30094790000004 3.784 120.6644096 3.584 137.0541515 4.132 82.0761156999994 10.428 53.51425980000002 1.84 83.57358060000001 2.77 68.264273 1.648 78.45852020000065 9.857 138.77737920000007 3.815 123.95139099999999 13.064 139.945615 2.792 129.4637430999974 10.404 101.78565269999994 4.049)
Error minima by case: (29.3969 7 18.0 2 3.6757 1 25.276 1 20.0 1 10.7113 2 6.0 1 1.5127 8 6.0 1 24.6613 2 25.4927 9 4.0 2 38.4989 3 75.0 3 87.0 3 20.7062 8 1.3854 1 28.9154 2 20.0 1 23.0245 2 42.0271 3 36.6168 9 49.61 2 8.7428 8 49.0 2)
Average genome size in population (length): 59.105
Average program size in population (points): 60.105
Average percent parens in population: 0.017
Minimum age in population: 25.50372314453125
Maximum age in population: 30.59588241577148
Average age in population: 28.5488737411499
Median age in population: 28.59972381591797
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.865
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.865
Total error diversity:				 0.066
Error (vector) diversity:			 0.066
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 24896404
--- Timings ---
Current time: 1529615101927 milliseconds
Total Time:          72.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.1 seconds, 42.7%
Fitness Testing:     33.6 seconds, 46.1%
Report:               8.0 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Number IO problem report - generation 20
Test total error for best: 51596.422199999935
Test mean error for best: 25.79821
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: -1.0841969735 
Correct output: -22.7658954997 | Program output: -2.1605602747 
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.1713992115  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -12.2396016404
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 38.7960139475 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 0.2340515149  
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -0.4474135488 
Correct output: 118.3242489435 | Program output: 22.3242489435 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 28.907177534  
Correct output: 85.0399635851  | Program output: -0.6655280485 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mult} {:instruction float_sin} {:instruction integer_min} {:instruction float_swap} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_yank} {:instruction tag_float_716} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_dec} {:instruction float_tan} {:instruction tag_integer_508} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction 75.29715081734332} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction integer_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (float_mult float_sin integer_min float_swap integer_div integer_rot integer_rot integer_yank float_cos integer_dec float_tan integer_yank tag_float_716 float_cos integer_dec integer_flush integer_yank tag_float_716 integer_yankdup float_shove float_div float_dec float_yankdup integer_div integer_rot integer_yank float_cos integer_dec float_tan tag_integer_508 tag_float_716 integer_yankdup float_shove float_frominteger float_dec float_yankdup integer_fromfloat 75.29715081734332 integer_yankdup float_yankdup float_yank in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove in1 integer_mod float_max float_yankdup float_yank in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [46.4047 11 20.6053 9 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 7.0031 9 6.0 1 14.3917 10 98.0 12 4.0 2 76.0 3 75.0 3 87.0 3 31.9252 12 5.0 1 36.0 2 20.0 1 24.5471 11 96.0 3 78.0 13 97.0 2 85.7055 11 49.0 3]
Total: 1234.5826000000002
Mean: 24.691652
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2218.149025200015
Median total errors in population: 1243.1874
Error averages by case: (83.67132200000074 10.288 64.50441439999939 10.781 113.9605779 2.458 66.9366658 1.522 57.66642190000003 1.713 50.624467300000006 2.481 45.442651 1.819 52.17730310000036 8.65 51.69217509999998 2.092 70.42644430000061 9.124 132.34405669999995 12.149 43.499214800000004 2.63 109.65791240000006 3.723 110.2939836 3.491 128.08758470000004 3.997 72.39920639999936 10.445 44.54576960000002 1.709 72.93127880000003 2.649 57.375907500000004 1.565 69.33984980000074 9.861 128.2406450000001 3.761 113.91328329999997 13.089 129.4655736 2.747 119.47221339999776 10.408 92.4031027999999 3.925)
Error minima by case: (16.2972 9 18.0 2 0.7951 2 25.8557 1 19.0 1 11.291 2 6.0 1 1.8762 8 5.0 1 8.2972 2 25.4927 11 3.0 2 0.7028 3 0.2972 3 86.0 3 20.7062 9 2.3854 1 29.9154 2 20.0 1 0.2972 2 20.7028 2 36.6168 10 21.7028 2 8.7428 9 48.0 3)
Average genome size in population (length): 59.09
Average program size in population (points): 60.09
Average percent parens in population: 0.017
Minimum age in population: 27.29229736328125
Maximum age in population: 32.14955902099609
Average age in population: 30.02843299865723
Median age in population: 30.09813976287842
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.848
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.848
Total error diversity:				 0.066
Error (vector) diversity:			 0.067
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 26373954
--- Timings ---
Current time: 1529615105571 milliseconds
Total Time:          76.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        32.5 seconds, 42.6%
Fitness Testing:     35.3 seconds, 46.2%
Report:               8.4 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Number IO problem report - generation 21
Test total error for best: 51596.422199999935
Test mean error for best: 25.79821
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: -1.0841969735 
Correct output: -22.7658954997 | Program output: -2.1605602747 
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.1713992115  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -12.2396016404
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 38.7960139475 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 0.2340515149  
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -0.4474135488 
Correct output: 118.3242489435 | Program output: 22.3242489435 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 28.907177534  
Correct output: 85.0399635851  | Program output: -0.6655280485 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mult} {:instruction float_sin} {:instruction integer_min} {:instruction float_swap} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_yank} {:instruction tag_float_716} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_dec} {:instruction float_tan} {:instruction tag_integer_508} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_shove} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction 75.29715081734332} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction integer_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (float_mult float_sin integer_min float_swap integer_div integer_rot integer_rot integer_yank float_cos integer_dec float_tan integer_yank tag_float_716 float_cos integer_dec integer_flush integer_yank tag_float_716 integer_yankdup float_shove float_div float_dec float_yankdup integer_div integer_rot integer_yank float_cos integer_dec float_tan tag_integer_508 tag_float_716 integer_yankdup float_shove float_frominteger integer_shove float_yankdup integer_fromfloat 75.29715081734332 integer_yankdup float_yankdup float_yank in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove in1 integer_mod float_max float_yankdup float_yank in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [46.4047 11 20.6053 9 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 7.0031 9 6.0 1 14.3917 10 98.0 12 4.0 2 76.0 3 75.0 3 87.0 3 31.9252 12 5.0 1 36.0 2 20.0 1 24.5471 11 96.0 3 78.0 13 97.0 2 85.7055 11 49.0 3]
Total: 1234.5826000000002
Mean: 24.691652
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2529.6469909000157
Median total errors in population: 1243.1874
Error averages by case: (101.7445353000008 10.29 83.23782129999935 10.878 121.64714880000001 2.557 75.46374279999999 1.637 66.23131970000003 1.839 59.43513069999998 2.59 53.895249299999996 1.941 70.77862800000004 8.678 71.21108199999996 2.365 89.23554169999927 9.258 139.69096939999997 12.165 52.021670300000004 2.747 118.05291720000002 3.837 119.07321060000002 3.596 145.83915480000005 4.206 90.60786299999926 10.424 52.60536380000002 1.86 81.23989100000001 2.765 66.4822663 1.685 88.18605790000076 9.96 136.3203478000001 3.869 121.43451949999998 13.09 137.58135699999997 2.852 137.0171610999975 10.403 111.01204159999988 4.11)
Error minima by case: (14.8826 8 18.0 2 4.6757 1 25.8557 1 19.0 1 11.291 2 6.0 1 4.0889 8 5.0 1 14.3917 2 25.3913 11 3.0 2 24.0 2 25.0 2 86.0 3 12.42 8 2.3854 1 29.9154 2 20.0 1 23.0245 2 4.0 2 36.5154 10 3.0 1 8.5187 9 48.0 2)
Average genome size in population (length): 58.917
Average program size in population (points): 59.917
Average percent parens in population: 0.017
Minimum age in population: 29.05696105957031
Maximum age in population: 33.33970355987549
Average age in population: 31.51105014705658
Median age in population: 31.56562662124634
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.842
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.842
Total error diversity:				 0.082
Error (vector) diversity:			 0.082
Behavioral diversity:				 0.083
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 27847079
--- Timings ---
Current time: 1529615109379 milliseconds
Total Time:          80.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        34.1 seconds, 42.6%
Fitness Testing:     37.0 seconds, 46.2%
Report:               8.9 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Number IO problem report - generation 22
Test total error for best: 51596.422199999935
Test mean error for best: 25.79821
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: -1.0841969735 
Correct output: -22.7658954997 | Program output: -2.1605602747 
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.1713992115  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -12.2396016404
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 38.7960139475 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 0.2340515149  
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -0.4474135488 
Correct output: 118.3242489435 | Program output: 22.3242489435 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 28.907177534  
Correct output: 85.0399635851  | Program output: -0.6655280485 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction float_sin} {:instruction integer_min} {:instruction float_swap} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_dec} {:instruction float_frominteger} {:instruction integer_yank} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_add} {:instruction float_dup_times} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_dec} {:instruction float_tan} {:instruction tag_integer_508} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction 75.29715081734332} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction integer_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot float_sin integer_min float_swap integer_div integer_rot integer_yank float_cos integer_dec float_frominteger integer_yank tag_float_716 integer_yankdup float_add float_dup_times float_frominteger integer_dup_times integer_sub tag_float_716 integer_yankdup float_shove float_div float_dec float_yankdup integer_div integer_rot integer_yank float_cos integer_dec float_tan tag_integer_508 tag_float_716 integer_yankdup float_shove float_frominteger float_dec float_yankdup integer_fromfloat 75.29715081734332 integer_yankdup float_yankdup float_yank in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove in1 integer_mod float_max float_yankdup float_yank in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [46.4047 11 20.6053 9 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 7.0031 9 6.0 1 14.3917 10 98.0 12 4.0 2 76.0 3 75.0 3 87.0 3 31.9252 12 5.0 1 36.0 2 20.0 1 24.5471 11 96.0 3 78.0 13 97.0 2 85.7055 11 49.0 3]
Total: 1234.5826000000002
Mean: 24.691652
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2481.8593616000144
Median total errors in population: 1243.1874
Error averages by case: (94.79925740000058 10.201 76.8539843999995 10.743 122.9969967 2.569 76.5661258 1.67 67.46696280000003 1.871 60.462419499999996 2.604 55.603577599999994 1.989 64.1705627000004 8.877 64.39728109999992 2.316 82.56649149999977 9.383 141.23536009999998 12.116 53.640861799999996 2.743 118.85492300000003 3.914 119.92059740000002 3.634 139.59721100000002 4.184 83.83871299999946 10.454 54.62241180000002 1.848 82.52790810000005 2.784 67.3694693 1.705 81.76380150000061 9.832 137.06935620000007 3.93 123.1602182 13.03 138.34291839999992 2.935 129.76140029999772 10.331 104.47155199999989 4.136)
Error minima by case: (13.6795 8 15.1294 2 0.9447 1 25.8557 1 19.0 1 11.291 2 5.0 1 1.5127 8 6.0 1 14.3917 2 25.4962 11 3.0 2 38.2747 3 74.0 3 87.0 3 19.8407 8 1.3457 1 26.1843 2 19.0 1 17.358 2 22.3242 3 36.6313 10 28.9072 2 8.5187 9 49.0 2)
Average genome size in population (length): 59.57
Average program size in population (points): 60.57
Average percent parens in population: 0.017
Minimum age in population: 30.61892700195312
Maximum age in population: 34.84551811218262
Average age in population: 32.94658006620407
Median age in population: 33.00601243972778
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.848
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.848
Total error diversity:				 0.081
Error (vector) diversity:			 0.082
Behavioral diversity:				 0.082
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 29336479
--- Timings ---
Current time: 1529615113177 milliseconds
Total Time:          84.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        35.6 seconds, 42.4%
Fitness Testing:     38.8 seconds, 46.3%
Report:               9.4 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Number IO problem report - generation 23
Test total error for best: 51596.422199999935
Test mean error for best: 25.79821
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: -1.0841969735 
Correct output: -22.7658954997 | Program output: -2.1605602747 
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.1713992115  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -12.2396016404
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 38.7960139475 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 0.2340515149  
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -0.4474135488 
Correct output: 118.3242489435 | Program output: 22.3242489435 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 28.907177534  
Correct output: 85.0399635851  | Program output: -0.6655280485 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction float_sin} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction integer_min} {:instruction float_swap} {:instruction integer_div} {:instruction integer_rot} {:instruction tag_float_716} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction tag_integer_508} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction 75.29715081734332} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction integer_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot float_sin float_dup_times float_dup_times integer_min float_swap integer_div integer_rot tag_float_716 float_cos integer_dec integer_flush integer_yank tag_float_716 integer_yankdup float_shove float_div float_dec float_yankdup integer_div integer_rot integer_yank float_cos integer_dec integer_dup_times tag_integer_508 tag_float_716 integer_yankdup float_shove float_frominteger float_dec float_yankdup integer_fromfloat 75.29715081734332 integer_yankdup float_yankdup float_yank in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove in1 integer_mod float_max float_yankdup float_yank in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [46.4047 11 20.6053 9 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 7.0031 9 6.0 1 14.3917 10 98.0 12 4.0 2 76.0 3 75.0 3 87.0 3 31.9252 12 5.0 1 36.0 2 20.0 1 24.5471 11 96.0 3 78.0 13 97.0 2 85.7055 11 49.0 3]
Total: 1234.5826000000002
Mean: 24.691652
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2322.8383208000187
Median total errors in population: 1243.1874
Error averages by case: (87.02922640000055 9.96 69.06234749999965 10.661 118.14498389999997 2.558 72.0184319 1.643 62.764015400000005 1.787 56.043712 2.592 49.12357259999998 1.858 54.82581990000051 9.411 57.17222009999996 2.176 73.64268229999996 9.976 136.4565773 12.107 46.865873099999995 2.659 113.72006199999998 3.806 114.54703609999999 3.586 133.0888933999999 4.031 75.55885269999953 10.527 46.62546890000001 1.755 77.7712468 2.707 61.819535700000024 1.672 73.6370253000005 9.686 132.128868 3.799 118.18867510000001 13.04 133.34003589999995 2.816 122.76184009999807 10.062 97.59531840000001 4.031)
Error minima by case: (13.6795 9 15.1674 2 2.5937 1 25.8557 1 20.0 1 11.291 2 5.0 1 1.5127 8 6.0 1 14.3917 2 25.3913 10 4.0 2 24.0 2 13.0638 2 87.0 3 19.8407 10 0.3033 1 27.8333 2 19.0 1 17.396 2 4.0 2 36.5154 10 3.0 1 8.5187 9 49.0 2)
Average genome size in population (length): 61.993
Average program size in population (points): 62.993
Average percent parens in population: 0.016
Minimum age in population: 32.01300811767578
Maximum age in population: 36.23363995552063
Average age in population: 34.39081808638573
Median age in population: 34.39783906936646
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.793
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.793
Total error diversity:				 0.075
Error (vector) diversity:			 0.076
Behavioral diversity:				 0.076
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 30886504
--- Timings ---
Current time: 1529615116918 milliseconds
Total Time:          87.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        37.2 seconds, 42.4%
Fitness Testing:     40.6 seconds, 46.2%
Report:               9.9 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Number IO problem report - generation 24
Test total error for best: 51123.49099999997
Test mean error for best: 25.56175
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: -1.0841969735 
Correct output: -22.7658954997 | Program output: -2.1605602747 
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.1730976099  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -12.2396016404
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 38.7960139475 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 0.2384210753  
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -0.4474135488 
Correct output: 118.3242489435 | Program output: 22.3242489435 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 28.907177534  
Correct output: 85.0399635851  | Program output: -0.6655280485 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mult} {:instruction float_sin} {:instruction integer_min} {:instruction float_swap} {:instruction integer_div} {:instruction integer_rot} {:instruction tag_float_716} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_dec} {:instruction float_tan} {:instruction tag_integer_508} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_dec} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction 75.29715081734332} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction integer_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_mult} {:instruction float_swap} {:instruction integer_pop} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_pop} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (float_mult float_sin integer_min float_swap integer_div integer_rot tag_float_716 float_yank integer_dec integer_flush integer_yank tag_float_716 integer_yankdup float_shove float_div float_dec float_yankdup integer_div integer_rot integer_yank float_cos integer_dec float_tan tag_integer_508 tag_float_716 integer_yankdup float_shove float_frominteger integer_dec float_yankdup integer_fromfloat 75.29715081734332 integer_yankdup float_yankdup float_yank in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove in1 integer_mod float_max float_yankdup float_yank in2 float_tan integer_mod integer_mult float_swap integer_pop float_frominteger float_max float_yankdup integer_pop float_frominteger float_max float_yankdup float_dup in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_dup_times float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [46.4047 11 20.6053 9 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 7.0014 9 6.0 1 14.3917 10 98.0 12 4.0 2 76.0 3 75.0 3 87.0 3 31.9209 12 5.0 1 36.0 2 20.0 1 24.5471 11 96.0 3 78.0 13 97.0 2 85.7055 11 49.0 3]
Total: 1234.5765999999999
Mean: 24.691532
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2284.461433900005
Median total errors in population: 1242.0038999999997
Error averages by case: (84.90111730000014 10.171 66.00301900000014 10.182 117.45299359999999 2.465 70.16823000000001 1.553 61.45520079999999 1.692 54.6076542 2.501 48.25500319999999 1.808 52.47030930000075 9.755 54.147545399999984 2.341 68.4868706000001 10.348 135.8960834 12.087 46.40000679999999 2.591 113.61277800000002 3.804 114.38001489999998 3.555 129.87327170000003 4.135 73.08996829999961 11.016 46.1306965 1.701 76.63566490000001 2.624 61.782374 1.636 71.5541785000005 9.925 131.90274380000005 3.804 116.9607318 13.01 133.11709379999996 2.815 120.78364799999825 10.293 94.43923610000003 4.143)
Error minima by case: (7.625 8 18.0 2 2.5937 1 27.0798 1 20.0 1 12.5152 2 5.0 1 2.5185 8 6.0 1 6.4076 2 25.3913 10 4.0 2 38.2465 3 13.0638 3 87.0 3 4.5929 8 0.3033 1 27.8333 2 19.0 1 23.0245 2 22.3242 3 36.5154 10 27.1354 2 6.4413 9 49.0 2)
Average genome size in population (length): 65.331
Average program size in population (points): 66.331
Average percent parens in population: 0.015
Minimum age in population: 33.35263061523438
Maximum age in population: 37.83345937728882
Average age in population: 35.86861612343788
Median age in population: 35.927590072155
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 32
Genome diversity (% unique Plush genomes):	 0.779
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.779
Total error diversity:				 0.079
Error (vector) diversity:			 0.079
Behavioral diversity:				 0.08
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 32519854
--- Timings ---
Current time: 1529615120941 milliseconds
Total Time:          91.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        38.8 seconds, 42.3%
Fitness Testing:     42.4 seconds, 46.3%
Report:              10.3 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Number IO problem report - generation 25
Test total error for best: 50970.460200000016
Test mean error for best: 25.48523
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 3.8365486382  
Correct output: -22.7658954997 | Program output: 1.5721637434  
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: -1.0939825108 
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: 0.763867294   
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 38.7960139475 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -0.9698372913 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -6.6123233224 
Correct output: 118.3242489435 | Program output: 22.3242489435 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 28.907177534  
Correct output: 85.0399635851  | Program output: 60.9048132162 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mult} {:instruction float_sin} {:instruction integer_min} {:instruction float_swap} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_yank} {:instruction tag_float_716} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_dec} {:instruction float_tan} {:instruction tag_integer_508} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_shove} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction 75.29715081734332} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (float_mult float_sin integer_min float_swap integer_div integer_rot integer_rot integer_yank float_cos integer_dec float_tan integer_yank tag_float_716 float_cos integer_dec integer_flush integer_yank tag_float_716 integer_yankdup float_shove float_div float_dec float_yankdup integer_div integer_rot integer_yank float_cos integer_dec float_tan tag_integer_508 tag_float_716 integer_yankdup float_shove float_frominteger integer_shove float_yankdup integer_fromfloat 75.29715081734332 integer_yankdup float_yankdup float_yank in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec integer_mod float_max float_yankdup float_yank in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [41.484 10 24.3381 12 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 8.2684 11 6.0 1 27.3952 11 98.0 12 4.0 2 76.0 3 75.0 3 87.0 3 33.1291 11 5.0 1 36.0 2 20.0 1 18.3822 11 96.0 3 78.0 13 97.0 2 24.1352 11 49.0 3]
Total: 1185.1321999999998
Mean: 23.702644
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 1980.4048745999944
Median total errors in population: 1234.5826000000002
Error averages by case: (75.1397947999995 10.91 50.50284830000027 9.44 106.22217919999999 2.368 59.288132000000004 1.435 49.5667706 1.416 43.003261800000004 2.387 35.61548259999999 1.426 38.90530090000052 9.307 40.36528750000002 2.176 48.65882450000012 9.992 124.6076102 12.092 33.358989300000005 2.362 103.71870870000001 3.4 103.25513249999999 3.364 117.30644080000015 3.899 61.95312089999968 11.765 33.9358438 1.407 64.9169441 2.392 49.88086270000001 1.42 56.015356300000654 10.618 122.99510880000001 3.395 105.3802317 13.062 124.0151517 2.396 113.13680689999818 10.986 81.37168400000002 3.874)
Error minima by case: (13.6795 8 10.3084 2 4.7772 2 30.0 1 20.0 1 13.0 2 6.0 1 2.5185 7 6.0 1 6.4076 2 7.5816 10 4.0 2 38.796 3 75.0 3 87.0 3 15.0155 8 0.4099 1 29.9735 2 20.0 1 8.0798 2 22.3242 3 3.5425 9 28.9072 2 9.7428 9 49.0 3)
Average genome size in population (length): 68.101
Average program size in population (points): 69.101
Average percent parens in population: 0.015
Minimum age in population: 35.54512596130371
Maximum age in population: 39.33783370256424
Average age in population: 37.34599717122316
Median age in population: 37.38537755608559
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 39
Genome diversity (% unique Plush genomes):	 0.772
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.772
Total error diversity:				 0.066
Error (vector) diversity:			 0.066
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 34222454
--- Timings ---
Current time: 1529615125191 milliseconds
Total Time:          95.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        40.3 seconds, 42.1%
Fitness Testing:     44.5 seconds, 46.4%
Report:              10.9 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Number IO problem report - generation 26
Test total error for best: 50970.460200000016
Test mean error for best: 25.48523
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 3.8365486382  
Correct output: -22.7658954997 | Program output: 1.5721637434  
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: -1.0939825108 
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: 0.763867294   
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 38.7960139475 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -0.9698372913 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -6.6123233224 
Correct output: 118.3242489435 | Program output: 22.3242489435 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 28.907177534  
Correct output: 85.0399635851  | Program output: 60.9048132162 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mult} {:instruction float_sin} {:instruction integer_min} {:instruction float_swap} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_yank} {:instruction tag_float_716} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_dec} {:instruction float_tan} {:instruction tag_integer_508} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_shove} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction 75.29715081734332} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (float_mult float_sin integer_min float_swap integer_div integer_rot integer_rot integer_yank float_cos integer_dec float_tan integer_yank tag_float_716 float_cos integer_dec integer_flush integer_yank tag_float_716 integer_yankdup float_shove float_div float_dec float_yankdup integer_div integer_rot integer_yank float_cos integer_dec float_tan tag_integer_508 tag_float_716 integer_yankdup float_shove float_frominteger integer_shove float_yankdup integer_fromfloat 75.29715081734332 integer_yankdup float_yankdup float_yank in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec integer_mod float_max float_yankdup float_yank in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [41.484 10 24.3381 12 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 8.2684 11 6.0 1 27.3952 11 98.0 12 4.0 2 76.0 3 75.0 3 87.0 3 33.1291 11 5.0 1 36.0 2 20.0 1 18.3822 11 96.0 3 78.0 13 97.0 2 24.1352 11 49.0 3]
Total: 1185.1321999999998
Mean: 23.702644
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2043.999990299993
Median total errors in population: 1234.5826000000002
Error averages by case: (77.96601419999944 10.957 52.85782210000044 9.439 109.16304650000001 2.354 62.05861290000001 1.416 52.4185841 1.409 45.7592262 2.382 37.9366958 1.464 41.36246000000078 9.272 43.160476600000024 2.097 51.254266200000096 10.012 127.55074170000002 12.077 35.2214016 2.356 106.41460700000002 3.45 106.0941245 3.401 119.75409200000009 3.875 63.8009200999996 11.774 35.09073719999999 1.386 67.80020569999999 2.385 52.8744088 1.463 59.09091730000089 10.73 125.42696700000002 3.458 108.33593149999999 13.037 126.48187580000001 2.455 115.07846929999803 11.035 83.51538620000005 3.848)
Error minima by case: (13.6795 8 18.0 2 3.6757 2 23.8173 1 20.0 1 9.2526 2 6.0 1 4.3775 7 6.0 1 13.3917 2 25.7488 10 4.0 2 38.796 3 75.0 3 87.0 3 12.3186 8 0.4099 1 28.9154 2 20.0 1 18.3822 2 22.3242 3 37.2196 10 28.9072 2 9.7428 8 49.0 3)
Average genome size in population (length): 68.686
Average program size in population (points): 69.686
Average percent parens in population: 0.014
Minimum age in population: 36.82649278640747
Maximum age in population: 40.54078140854836
Average age in population: 38.8215332416296
Median age in population: 38.85360412299633
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.846
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.846
Total error diversity:				 0.086
Error (vector) diversity:			 0.086
Behavioral diversity:				 0.087
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 35939629
--- Timings ---
Current time: 1529615129097 milliseconds
Total Time:          99.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        41.8 seconds, 41.9%
Fitness Testing:     46.4 seconds, 46.5%
Report:              11.5 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Number IO problem report - generation 27
Test total error for best: 50970.460200000016
Test mean error for best: 25.48523
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 3.8365486382  
Correct output: -22.7658954997 | Program output: 1.5721637434  
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: -1.0939825108 
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: 0.763867294   
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 38.7960139475 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -0.9698372913 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -6.6123233224 
Correct output: 118.3242489435 | Program output: 22.3242489435 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 28.907177534  
Correct output: 85.0399635851  | Program output: 60.9048132162 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction float_sin} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction integer_min} {:instruction float_swap} {:instruction float_mult} {:instruction integer_rot} {:instruction tag_float_716} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_dec} {:instruction float_tan} {:instruction tag_integer_508} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_shove} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction 75.29715081734332} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot float_sin float_dup_times float_dup_times integer_min float_swap float_mult integer_rot tag_float_716 float_cos integer_dec integer_flush integer_yank tag_float_716 integer_yankdup float_shove float_div float_dec float_yankdup integer_div integer_rot integer_yank float_cos integer_dec integer_dup_times float_yankdup integer_div integer_rot integer_yank float_cos integer_dec float_tan tag_integer_508 tag_float_716 integer_yankdup float_shove float_frominteger integer_shove float_yankdup integer_fromfloat 75.29715081734332 integer_yankdup float_yankdup float_yank in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec integer_mod float_max float_yankdup float_yank in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [41.484 10 24.3381 12 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 8.2684 11 6.0 1 27.3952 11 98.0 12 4.0 2 76.0 3 75.0 3 87.0 3 33.1291 11 5.0 1 36.0 2 20.0 1 18.3822 11 96.0 3 78.0 13 97.0 2 24.1352 11 49.0 3]
Total: 1185.1321999999998
Mean: 23.702644
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2270.053519299994
Median total errors in population: 1234.5826000000002
Error averages by case: (86.10965369999928 10.929 62.53350300000056 9.61 117.40232419999998 2.461 70.93506690000001 1.572 61.33739630000001 1.547 54.8717622 2.507 47.537316799999985 1.591 51.40453720000073 9.294 52.91548890000002 2.376 62.378019100000145 10.065 135.5445345 12.085 45.3211308 2.469 114.47386790000003 3.66 114.48816429999998 3.52 128.67719360000004 4.109 73.24855579999938 11.749 45.884754799999996 1.532 76.52468449999999 2.507 61.627555199999996 1.578 68.20980770000087 10.716 133.03164360000008 3.665 116.49170699999999 13.037 134.12469220000003 2.663 121.38768939999827 11.007 93.27846970000003 4.065)
Error minima by case: (13.6795 9 15.8394 2 4.6757 1 30.0 1 20.0 1 13.0 2 5.0 1 4.8161 7 6.0 1 13.3917 2 25.4927 10 4.0 2 38.796 3 74.0 3 87.0 3 15.0155 9 0.4099 1 29.9154 2 18.3556 1 18.3822 2 16.8729 3 4.1636 11 28.4969 2 9.7428 8 49.0 3)
Average genome size in population (length): 69.542
Average program size in population (points): 70.542
Average percent parens in population: 0.014
Minimum age in population: 38.25798785686493
Maximum age in population: 42.11566069722176
Average age in population: 40.39506907980144
Median age in population: 40.43474848568439
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.853
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.853
Total error diversity:				 0.086
Error (vector) diversity:			 0.086
Behavioral diversity:				 0.086
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 37678229
--- Timings ---
Current time: 1529615133095 milliseconds
Total Time:         103.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        43.4 seconds, 41.8%
Fitness Testing:     48.3 seconds, 46.5%
Report:              12.0 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Number IO problem report - generation 28
Test total error for best: 50970.460200000016
Test mean error for best: 25.48523
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 3.8365486382  
Correct output: -22.7658954997 | Program output: 1.5721637434  
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: -1.0939825108 
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: 0.763867294   
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 38.7960139475 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -0.9698372913 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -6.6123233224 
Correct output: 118.3242489435 | Program output: 22.3242489435 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 28.907177534  
Correct output: 85.0399635851  | Program output: 60.9048132162 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction float_swap} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_dec} {:instruction float_frominteger} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_yank} {:instruction tag_float_716} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_dec} {:instruction float_tan} {:instruction tag_integer_508} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_shove} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction 75.29715081734332} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_min float_swap integer_div integer_rot integer_yank float_cos integer_dec float_frominteger integer_yank float_cos integer_dec float_tan integer_yank tag_float_716 float_cos integer_dec integer_flush integer_yank tag_float_716 integer_yankdup float_shove float_div float_dec float_yankdup integer_div integer_rot integer_yank float_cos integer_dec float_tan tag_integer_508 tag_float_716 integer_yankdup float_shove float_frominteger integer_shove float_yankdup integer_fromfloat 75.29715081734332 integer_yankdup float_yankdup float_yank in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec integer_mod float_max float_yankdup float_yank in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [41.484 10 24.3381 12 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 8.2684 11 6.0 1 27.3952 11 98.0 12 4.0 2 76.0 3 75.0 3 87.0 3 33.1291 11 5.0 1 36.0 2 20.0 1 18.3822 11 96.0 3 78.0 13 97.0 2 24.1352 11 49.0 3]
Total: 1185.1321999999998
Mean: 23.702644
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2059.5298606999877
Median total errors in population: 1234.5765999999999
Error averages by case: (77.42550729999931 10.804 54.46231780000049 9.988 110.0931289 2.354 63.040426 1.424 53.414646999999995 1.439 46.7131201 2.385 38.807863100000006 1.476 42.67361830000057 9.469 43.98888470000001 2.084 55.41243059999997 10.116 128.4559559 12.091 36.2664556 2.373 107.23944800000001 3.501 107.87371979999999 3.42 120.73022210000006 3.855 63.762090899999315 11.504 36.139394 1.409 68.7786115 2.404 53.85168800000001 1.455 59.03874550000055 10.67 126.10505420000003 3.513 109.29157640000001 13.046 127.20787610000001 2.511 105.9031126999989 10.918 84.80796620000001 3.837)
Error minima by case: (13.6795 9 18.0 2 4.6757 1 29.0 1 19.0 1 12.0 2 5.0 1 3.4071 7 5.0 1 14.3917 2 24.3909 10 3.0 2 37.204 3 16.1063 3 86.0 3 15.0155 9 2.3854 1 29.9154 2 19.0 1 16.9308 2 16.8729 2 35.515 9 28.4969 2 9.7428 8 48.0 2)
Average genome size in population (length): 70.759
Average program size in population (points): 71.759
Average percent parens in population: 0.014
Minimum age in population: 39.37966418266296
Maximum age in population: 43.72643359750509
Average age in population: 42.01443391595036
Median age in population: 42.01843328773975
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.791
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.791
Total error diversity:				 0.098
Error (vector) diversity:			 0.098
Behavioral diversity:				 0.098
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 39447279
--- Timings ---
Current time: 1529615137440 milliseconds
Total Time:         108.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        45.0 seconds, 41.6%
Fitness Testing:     50.5 seconds, 46.7%
Report:              12.5 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Number IO problem report - generation 29
Test total error for best: 50970.460200000016
Test mean error for best: 25.48523
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 3.8365486382  
Correct output: -22.7658954997 | Program output: 1.5721637434  
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: -1.0939825108 
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: 0.763867294   
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 38.7960139475 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -0.9698372913 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -6.6123233224 
Correct output: 118.3242489435 | Program output: 22.3242489435 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 28.907177534  
Correct output: 85.0399635851  | Program output: 60.9048132162 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction float_sin} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_yank} {:instruction tag_float_716} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_dec} {:instruction float_tan} {:instruction tag_integer_508} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction integer_fromfloat} {:instruction integer_shove} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction 75.29715081734332} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot float_sin integer_min integer_rot integer_rot integer_yank integer_rot integer_rot integer_yank float_cos integer_dec float_tan integer_yank tag_float_716 float_cos integer_dec integer_flush integer_yank tag_float_716 integer_yankdup float_shove float_div float_dec float_yankdup integer_div integer_rot integer_yank float_cos integer_dec float_tan tag_integer_508 tag_float_716 integer_yankdup float_shove integer_fromfloat integer_shove float_yankdup integer_fromfloat 75.29715081734332 integer_yankdup float_yankdup float_yank in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec integer_mod float_max float_yankdup float_yank in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [41.484 10 24.3381 12 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 8.2684 11 6.0 1 27.3952 11 98.0 12 4.0 2 76.0 3 75.0 3 87.0 3 33.1291 11 5.0 1 36.0 2 20.0 1 18.3822 11 96.0 3 78.0 13 97.0 2 24.1352 11 49.0 3]
Total: 1185.1321999999998
Mean: 23.702644
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2097.6629034999964
Median total errors in population: 1185.1321999999998
Error averages by case: (77.34552769999904 10.433 57.756199300000446 10.895 112.94575139999999 2.38 66.03581419999999 1.452 56.409198700000005 1.456 49.757073000000005 2.412 40.93610149999999 1.523 45.66886980000051 10.185 46.34222219999999 1.989 63.08086249999965 10.324 131.2317266 12.092 38.171954899999996 2.389 109.09979639999999 3.564 109.36512189999999 3.453 123.07647009999997 3.799 65.78209839999941 11.046 37.2317439 1.426 71.7330917 2.418 56.35222699999999 1.512 59.34816669999996 10.525 127.79400410000002 3.573 112.0650989 13.044 128.92425860000003 2.568 84.93075229999995 10.837 87.19477169999993 3.789)
Error minima by case: (0.0 0 0.0 0 5.6491 1 30.0 1 20.0 1 13.0 2 6.0 1 0.0 0 6.0 1 0.0 0 23.5193 9 4.0 2 0.0 0 16.1063 3 87.0 3 0.0 0 3.3588 1 30.8887 2 20.0 1 0.0 0 0.0 0 34.6434 9 0.0 0 0.0 0 49.0 2)
Average genome size in population (length): 70.479
Average program size in population (points): 71.479
Average percent parens in population: 0.014
Minimum age in population: 41.15790338069201
Maximum age in population: 45.20504198223352
Average age in population: 43.51694539190829
Median age in population: 43.52990771085024
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.773
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.773
Total error diversity:				 0.105
Error (vector) diversity:			 0.105
Behavioral diversity:				 0.105
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 41209254
--- Timings ---
Current time: 1529615141353 milliseconds
Total Time:         112.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        46.4 seconds, 41.4%
Fitness Testing:     52.6 seconds, 46.9%
Report:              13.1 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Number IO problem report - generation 30
Test total error for best: 50970.460200000016
Test mean error for best: 25.48523
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 3.8365486382  
Correct output: -22.7658954997 | Program output: 1.5721637434  
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: -1.0939825108 
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: 0.763867294   
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 38.7960139475 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -0.9698372913 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -6.6123233224 
Correct output: 118.3242489435 | Program output: 22.3242489435 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 28.907177534  
Correct output: 85.0399635851  | Program output: 60.9048132162 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction float_sin} {:instruction integer_min} {:instruction float_swap} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_yank} {:instruction integer_div} {:instruction integer_dec} {:instruction integer_div} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_yank} {:instruction tag_float_716} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_dec} {:instruction float_tan} {:instruction tag_integer_508} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_shove} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction 75.29715081734332} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot float_sin integer_min float_swap integer_div integer_rot integer_yank integer_div integer_dec integer_div integer_yank float_cos integer_dec float_tan integer_yank tag_float_716 float_cos integer_dec integer_flush integer_yank tag_float_716 integer_yankdup float_shove float_div float_dec float_yankdup integer_div integer_rot integer_yank float_cos integer_dec float_tan tag_integer_508 tag_float_716 integer_yankdup float_shove float_frominteger integer_shove float_yankdup integer_fromfloat 75.29715081734332 integer_yankdup float_yankdup float_yank in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec integer_mod float_max float_yankdup float_yank in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [41.484 10 24.3381 12 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 8.2684 11 6.0 1 27.3952 11 98.0 12 4.0 2 76.0 3 75.0 3 87.0 3 33.1291 11 5.0 1 36.0 2 20.0 1 18.3822 11 96.0 3 78.0 13 97.0 2 24.1352 11 49.0 3]
Total: 1185.1321999999998
Mean: 23.702644
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2109.030017699994
Median total errors in population: 1185.1321999999998
Error averages by case: (77.32024889999853 10.241 58.91856280000044 11.499 112.7897857 2.412 66.0226142 1.486 56.3951622 1.481 49.792437699999994 2.438 42.483635 1.48 47.174729600000475 10.876 47.807622499999994 2.211 64.61330979999958 10.702 131.0550709 12.096 40.3031665 2.415 110.04680520000002 3.496 109.6112143 3.428 123.8558684 3.962 69.09014139999925 11.084 40.62710499999999 1.451 71.67898379999998 2.443 56.7254672 1.491 58.98110699999991 10.686 128.96113280000003 3.498 111.9084432 13.045 129.98752760000002 2.498 73.10591329999919 11.087 88.30596269999997 3.962)
Error minima by case: (13.6795 8 18.0 2 5.7775 1 30.0 1 20.0 1 13.0 2 6.0 1 3.4071 7 6.0 1 14.3917 2 24.3909 10 4.0 2 38.796 3 75.0 3 40.3219 3 12.917 9 3.4872 1 31.0171 2 20.0 1 16.9308 2 22.3242 3 35.515 9 28.9072 2 9.1751 9 49.0 2)
Average genome size in population (length): 70.789
Average program size in population (points): 71.789
Average percent parens in population: 0.014
Minimum age in population: 42.7984539270401
Maximum age in population: 46.99756690859795
Average age in population: 44.99190285375714
Median age in population: 45.04718687385321
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.803
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.803
Total error diversity:				 0.085
Error (vector) diversity:			 0.085
Behavioral diversity:				 0.085
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 42978979
--- Timings ---
Current time: 1529615145363 milliseconds
Total Time:         116.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        47.9 seconds, 41.3%
Fitness Testing:     54.5 seconds, 47.0%
Report:              13.5 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Number IO problem report - generation 31
Test total error for best: 50970.460200000016
Test mean error for best: 25.48523
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 3.8365486382  
Correct output: -22.7658954997 | Program output: 1.5721637434  
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: -1.0939825108 
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: 0.763867294   
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 38.7960139475 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -0.9698372913 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -6.6123233224 
Correct output: 118.3242489435 | Program output: 22.3242489435 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 28.907177534  
Correct output: 85.0399635851  | Program output: 60.9048132162 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mult} {:instruction float_sin} {:instruction integer_min} {:instruction float_swap} {:instruction integer_div} {:instruction float_flush} {:instruction float_swap} {:instruction integer_div} {:instruction integer_rot} {:instruction tag_float_716} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_dec} {:instruction float_tan} {:instruction tag_integer_508} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_shove} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction print_float} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (float_mult float_sin integer_min float_swap integer_div float_flush float_swap integer_div integer_rot tag_float_716 float_cos integer_dec integer_flush integer_yank tag_float_716 integer_yankdup float_shove float_div float_dec float_yankdup integer_div integer_rot integer_yank float_cos integer_dec integer_dup_times float_yankdup integer_div integer_rot integer_yank float_cos integer_dec float_tan tag_integer_508 tag_float_716 integer_yankdup float_shove float_frominteger integer_shove float_yankdup integer_fromfloat print_float integer_yankdup float_yankdup float_yank in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec integer_mod float_max float_yankdup float_yank in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [41.484 10 24.3381 12 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 8.2684 11 6.0 1 27.3952 11 98.0 12 4.0 2 76.0 3 75.0 3 87.0 3 33.1291 11 5.0 1 36.0 2 20.0 1 18.3822 11 96.0 3 78.0 13 97.0 2 24.1352 11 49.0 3]
Total: 1185.1321999999998
Mean: 23.702644
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2217.714053499995
Median total errors in population: 1185.1321999999998
Error averages by case: (81.63619579999848 10.296 63.33347060000047 11.358 116.70323959999999 2.442 69.9868768 1.522 60.377420099999995 1.533 53.7719814 2.48 46.7950645 1.632 52.222780600000505 10.886 52.29400129999997 2.362 69.77559669999955 10.616 134.8573292 12.114 44.4076061 2.472 113.882932 3.647 114.0879418 3.57 127.93006449999994 4.091 73.89240719999982 11.107 44.989069699999995 1.509 75.6403427 2.494 61.156937400000004 1.626 64.31940189999992 10.621 132.69085520000004 3.654 115.714876 13.069 133.6979614 2.653 78.04261999999986 11.108 92.56708099999994 4.078)
Error minima by case: (12.6795 8 16.4278 2 3.7641 1 30.0 1 20.0 1 13.0 2 6.0 1 2.2467 8 6.0 1 13.3917 2 25.2446 10 4.0 2 37.204 3 16.1063 3 87.0 3 12.917 8 1.4932 1 29.8573 2 1.6164 1 15.0638 2 22.3242 3 36.1005 10 28.9072 2 9.1751 8 49.0 2)
Average genome size in population (length): 70.891
Average program size in population (points): 71.891
Average percent parens in population: 0.014
Minimum age in population: 44.13566898554564
Maximum age in population: 48.61864036228508
Average age in population: 46.49452781344671
Median age in population: 46.5330582424067
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.879
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.879
Total error diversity:				 0.097
Error (vector) diversity:			 0.097
Behavioral diversity:				 0.097
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 44751254
--- Timings ---
Current time: 1529615149520 milliseconds
Total Time:         120.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.4 seconds, 41.1%
Fitness Testing:     56.7 seconds, 47.1%
Report:              14.1 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Number IO problem report - generation 32
Test total error for best: 51058.674699999974
Test mean error for best: 25.52934
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: -3.0150328134 
Correct output: -22.7658954997 | Program output: -2.8728140693 
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: -0.0993437337 
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: 0.4999893275  
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 38.7960139475 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -3.3980106093 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -0.3062166972 
Correct output: 118.3242489435 | Program output: 22.3242489435 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 28.907177534  
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mult} {:instruction integer_pop} {:instruction integer_min} {:instruction float_swap} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_tan} {:instruction integer_yank} {:instruction tag_float_716} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction float_yank} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_dec} {:instruction float_tan} {:instruction tag_integer_508} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_shove} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction 75.29715081734332} {:instruction integer_yankdup} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (float_mult integer_pop integer_min float_swap integer_div integer_rot integer_rot integer_yank float_cos 67.59641311186607 float_tan integer_yank tag_float_716 float_cos integer_dec integer_flush integer_yank tag_float_716 integer_yankdup float_shove float_div float_dec float_yankdup integer_div float_yank integer_yank float_cos integer_dec float_tan tag_integer_508 tag_float_716 integer_yankdup float_shove float_frominteger integer_shove float_yankdup integer_fromfloat 75.29715081734332 integer_yankdup integer_fromfloat float_yank in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [48.3356 12 19.8931 9 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 7.2738 12 6.0 1 27.1313 13 98.0 12 4.0 2 76.0 3 75.0 3 87.0 3 35.5573 11 5.0 1 36.0 2 20.0 1 24.6883 11 96.0 3 78.0 13 97.0 2 6.748 8 49.0 3]
Total: 1176.6274
Mean: 23.532549
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2168.902290599995
Median total errors in population: 1185.1321999999998
Error averages by case: (80.20323529999858 10.287 61.860507800000434 11.349 114.32904369999999 2.522 68.0816071 1.593 58.4887865 1.597 52.0238878 2.539 45.067886 1.601 49.68636800000048 10.887 50.01638609999999 2.303 67.42615719999958 10.632 132.5958303 12.108 42.9528429 2.527 112.1658421 3.589 112.0315532 3.53 125.96307089999988 4.07 71.85317569999943 11.125 43.8514526 1.565 73.613269 2.556 59.0827794 1.614 60.87937759999993 10.615 130.97872070000003 3.59 113.65577090000001 13.057 132.07910410000002 2.592 76.47187489999973 11.141 90.49376079999996 4.061)
Error minima by case: (13.6795 8 16.4278 2 2.3275 2 28.0266 1 18.0266 1 11.0266 2 6.0 1 0.2524 8 6.0 1 14.3917 2 24.3909 9 2.0266 2 38.796 3 75.0 3 87.0 3 19.8407 8 0.0371 1 27.5671 2 17.1148 1 14.027 2 22.3242 3 35.515 9 28.9072 2 6.748 8 49.0 3)
Average genome size in population (length): 70.653
Average program size in population (points): 71.653
Average percent parens in population: 0.014
Minimum age in population: 45.13566898554564
Maximum age in population: 49.87590651214123
Average age in population: 47.93207872770913
Median age in population: 47.9658284035977
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.896
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.896
Total error diversity:				 0.096
Error (vector) diversity:			 0.096
Behavioral diversity:				 0.097
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 46517604
--- Timings ---
Current time: 1529615153367 milliseconds
Total Time:         124.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.9 seconds, 41.0%
Fitness Testing:     58.6 seconds, 47.2%
Report:              14.5 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Number IO problem report - generation 33
Test total error for best: 51058.674699999974
Test mean error for best: 25.52934
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: -3.0150328134 
Correct output: -22.7658954997 | Program output: -2.8728140693 
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: -0.0993437337 
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: 0.4999893275  
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 38.7960139475 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -3.3980106093 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -0.3062166972 
Correct output: 118.3242489435 | Program output: 22.3242489435 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 28.907177534  
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mult} {:instruction integer_pop} {:instruction integer_min} {:instruction float_swap} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_tan} {:instruction integer_yank} {:instruction tag_float_716} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction float_yank} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_dec} {:instruction float_tan} {:instruction tag_integer_508} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_shove} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction 75.29715081734332} {:instruction integer_yankdup} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (float_mult integer_pop integer_min float_swap integer_div integer_rot integer_rot integer_yank float_cos 67.59641311186607 float_tan integer_yank tag_float_716 float_cos integer_dec integer_flush integer_yank tag_float_716 integer_yankdup float_shove float_div float_dec float_yankdup integer_div float_yank integer_yank float_cos integer_dec float_tan tag_integer_508 tag_float_716 integer_yankdup float_shove float_frominteger integer_shove float_yankdup integer_fromfloat 75.29715081734332 integer_yankdup integer_fromfloat float_yank in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [48.3356 12 19.8931 9 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 7.2738 12 6.0 1 27.1313 13 98.0 12 4.0 2 76.0 3 75.0 3 87.0 3 35.5573 11 5.0 1 36.0 2 20.0 1 24.6883 11 96.0 3 78.0 13 97.0 2 6.748 8 49.0 3]
Total: 1176.6274
Mean: 23.532549
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2346.7415453999947
Median total errors in population: 1185.1321999999998
Error averages by case: (87.46400729999871 10.303 69.07155290000033 11.347 121.76658360000002 2.535 75.71807179999999 1.626 66.26081090000001 1.651 59.75241280000001 2.575 51.0656317 1.678 57.54157290000048 10.911 57.111798299999954 2.142 75.18483769999943 10.642 140.39002109999998 12.123 48.5004311 2.566 118.61875500000001 3.661 119.18975590000001 3.572 133.2473948 3.951 79.09123499999988 11.126 48.6938305 1.606 81.29804870000001 2.597 66.01939780000001 1.639 69.54237129999973 10.602 137.25010200000008 3.663 121.1385889 13.059 138.5390886 2.667 83.1179734000002 11.104 97.8732713999999 3.948)
Error minima by case: (13.6795 8 18.0 2 3.7641 1 25.8557 1 19.0 1 11.291 2 6.0 1 3.4071 8 5.0 1 14.3917 2 22.4154 10 3.0 2 38.796 3 75.0 3 86.0 3 12.917 9 0.0049 1 29.1161 2 20.0 1 16.9308 2 22.3242 2 33.5395 9 28.9072 2 6.748 8 48.0 3)
Average genome size in population (length): 70.519
Average program size in population (points): 71.519
Average percent parens in population: 0.014
Minimum age in population: 46.86651075724512
Maximum age in population: 51.32891493104398
Average age in population: 49.30552963526454
Median age in population: 49.29271151474677
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.884
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.884
Total error diversity:				 0.085
Error (vector) diversity:			 0.085
Behavioral diversity:				 0.085
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 48280604
--- Timings ---
Current time: 1529615157496 milliseconds
Total Time:         128.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.5 seconds, 41.0%
Fitness Testing:     60.5 seconds, 47.2%
Report:              15.0 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Number IO problem report - generation 34
Test total error for best: 51058.674699999974
Test mean error for best: 25.52934
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: -3.0150328134 
Correct output: -22.7658954997 | Program output: -2.8728140693 
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: -0.0993437337 
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: 0.4999893275  
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 38.7960139475 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -3.3980106093 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -0.3062166972 
Correct output: 118.3242489435 | Program output: 22.3242489435 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 28.907177534  
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mult} {:instruction integer_pop} {:instruction integer_min} {:instruction float_swap} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_tan} {:instruction integer_yank} {:instruction tag_float_716} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_div} {:instruction integer_rot} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_dec} {:instruction float_tan} {:instruction tag_integer_508} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_tan} {:instruction tag_integer_508} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_shove} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction 75.29715081734332} {:instruction integer_yankdup} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (float_mult integer_pop integer_min float_swap integer_div integer_rot integer_rot integer_yank float_cos 67.59641311186607 float_tan integer_yank tag_float_716 float_cos integer_dec integer_flush integer_yank tag_float_716 integer_yankdup float_shove float_div integer_rot float_dec float_yankdup integer_div integer_rot integer_yank float_flush integer_dec float_tan tag_integer_508 tag_float_716 integer_yankdup float_tan tag_integer_508 tag_float_716 integer_yankdup float_shove float_frominteger integer_shove float_yankdup integer_fromfloat 75.29715081734332 integer_yankdup integer_fromfloat float_yank in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [48.3356 12 19.8931 9 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 7.2738 12 6.0 1 27.1313 13 98.0 12 4.0 2 76.0 3 75.0 3 87.0 3 35.5573 11 5.0 1 36.0 2 20.0 1 24.6883 11 96.0 3 78.0 13 97.0 2 6.748 8 49.0 3]
Total: 1176.6274
Mean: 23.532549
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2479.3930278999946
Median total errors in population: 1185.1321999999998
Error averages by case: (92.33788169999865 10.366 73.85322149999973 11.369 126.68158249999999 2.574 80.6004109 1.679 71.15299730000001 1.702 64.6082344 2.62 57.635392 1.735 62.903557600000426 10.945 63.16737269999997 2.484 80.12810549999959 10.742 144.6936436 12.142 55.4341009 2.602 123.99034330000002 3.726 123.84298689999999 3.632 138.066467 4.242 84.01211450000022 11.158 56.003637100000006 1.664 86.2009262 2.651 71.66547259999999 1.725 74.66373619999933 10.649 142.54539900000003 3.724 125.9203882 13.079 143.597521 2.738 87.33570250000015 11.059 103.12283279999991 4.222)
Error minima by case: (13.6795 8 16.4278 2 4.6757 1 30.0 1 20.0 1 13.0 2 5.0 1 0.4632 7 6.0 1 14.3917 2 24.3906 9 4.0 2 38.796 3 74.0 3 87.0 3 9.3532 8 2.3854 1 29.9154 2 17.1148 1 14.3565 2 22.3242 3 35.5147 9 28.9072 2 6.748 8 49.0 2)
Average genome size in population (length): 70.557
Average program size in population (points): 71.557
Average percent parens in population: 0.014
Minimum age in population: 47.86651075724512
Maximum age in population: 52.79348787665367
Average age in population: 50.72643044592452
Median age in population: 50.74614323501009
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.894
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.894
Total error diversity:				 0.099
Error (vector) diversity:			 0.1
Behavioral diversity:				 0.1
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 50044579
--- Timings ---
Current time: 1529615161495 milliseconds
Total Time:         132.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.0 seconds, 40.9%
Fitness Testing:     62.5 seconds, 47.2%
Report:              15.6 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Number IO problem report - generation 35
Test total error for best: 51058.674699999974
Test mean error for best: 25.52934
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: -3.0150328134 
Correct output: -22.7658954997 | Program output: -2.8728140693 
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: -0.0993437337 
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: 0.4999893275  
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 38.7960139475 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -3.3980106093 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -0.3062166972 
Correct output: 118.3242489435 | Program output: 22.3242489435 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 28.907177534  
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mult} {:instruction float_sin} {:instruction integer_min} {:instruction integer_dec} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_716} {:instruction float_mod} {:instruction float_shove} {:instruction integer_sub} {:instruction in1} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_716} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_yank} {:instruction integer_dec} {:instruction float_tan} {:instruction tag_integer_508} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_shove} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction 75.29715081734332} {:instruction integer_yankdup} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (float_mult float_sin integer_min integer_dec integer_flush integer_yank tag_float_716 float_mod float_shove integer_sub in1 integer_flush integer_yank tag_float_716 float_cos integer_dec integer_flush integer_yank tag_float_716 integer_yankdup float_shove float_div float_dec float_yankdup integer_div integer_rot integer_yank integer_dec float_tan tag_integer_508 tag_float_716 integer_yankdup float_shove tag_float_716 integer_yankdup float_shove float_frominteger integer_shove integer_dec integer_fromfloat 75.29715081734332 integer_yankdup integer_fromfloat float_yank in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [48.3356 12 19.8931 9 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 7.2738 12 6.0 1 27.1313 13 98.0 12 4.0 2 76.0 3 75.0 3 87.0 3 35.5573 11 5.0 1 36.0 2 20.0 1 24.6883 11 96.0 3 78.0 13 97.0 2 6.748 8 49.0 3]
Total: 1176.6274
Mean: 23.532549
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2216.577874799995
Median total errors in population: 1185.1321999999998
Error averages by case: (81.93103209999889 10.519 61.96984520000049 11.018 117.23138900000002 2.482 70.8460723 1.564 61.3128963 1.557 54.7619046 2.518 46.32997729999999 1.633 51.64266560000052 11.047 52.4666429 2.241 68.40313269999959 10.825 135.85527539999998 12.102 44.07649120000001 2.492 114.14891619999997 3.6 114.189925 3.567 128.08011719999993 4.052 73.71052019999989 11.149 43.4482518 1.518 76.48118059999999 2.521 61.490009 1.656 64.70069400000008 10.554 133.0036874 3.596 116.50462540000001 13.059 134.1012359 2.607 74.4567765999999 10.778 92.73561089999995 4.044)
Error minima by case: (13.6795 8 16.1536 2 3.6757 2 25.8557 1 19.0 1 11.291 2 6.0 1 2.7634 8 5.0 1 14.3917 2 23.5193 9 2.1578 2 19.1859 3 75.0 3 86.0 3 12.917 9 0.0049 1 28.9154 2 19.7946 1 16.9308 2 22.3242 2 34.6434 12 28.9072 2 6.748 8 48.0 3)
Average genome size in population (length): 70.805
Average program size in population (points): 71.805
Average percent parens in population: 0.014
Minimum age in population: 49.85232438461389
Maximum age in population: 54.18875479674898
Average age in population: 52.13485715597193
Median age in population: 52.20274340597098
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.882
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.882
Total error diversity:				 0.093
Error (vector) diversity:			 0.094
Behavioral diversity:				 0.095
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 51814779
--- Timings ---
Current time: 1529615165449 milliseconds
Total Time:         136.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.6 seconds, 40.8%
Fitness Testing:     64.3 seconds, 47.2%
Report:              16.1 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Number IO problem report - generation 36
Test total error for best: 51028.61619999998
Test mean error for best: 25.51431
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: -4.0150328134 
Correct output: -22.7658954997 | Program output: -3.8728140693 
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: -1.0993437337 
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.5000106725 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 38.7960139475 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -4.3980106093 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -1.3062166972 
Correct output: 118.3242489435 | Program output: 22.3242489435 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 28.907177534  
Correct output: 85.0399635851  | Program output: 90.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mult} {:instruction integer_pop} {:instruction integer_min} {:instruction float_swap} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_tan} {:instruction integer_yank} {:instruction tag_float_716} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_div} {:instruction integer_rot} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_dec} {:instruction float_tan} {:instruction tag_integer_508} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_tan} {:instruction tag_integer_508} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_shove} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction 75.29715081734332} {:instruction integer_yankdup} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (float_mult integer_pop integer_min float_swap integer_div integer_rot integer_rot integer_yank float_cos 67.59641311186607 float_tan integer_yank tag_float_716 float_cos integer_dec integer_flush integer_yank tag_float_716 integer_yankdup float_shove float_div integer_rot float_dec float_yankdup integer_div integer_rot integer_yank float_flush integer_dec float_tan tag_integer_508 tag_float_716 integer_yankdup float_tan tag_integer_508 tag_float_716 integer_yankdup float_shove float_frominteger integer_shove float_yankdup integer_fromfloat 75.29715081734332 integer_yankdup integer_fromfloat float_yank in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec float_dec float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [49.3356 11 18.8931 10 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 8.2738 11 6.0 1 26.1313 11 98.0 12 4.0 2 76.0 3 75.0 3 87.0 3 36.5573 11 5.0 1 36.0 2 20.0 1 23.6883 11 96.0 3 78.0 13 97.0 2 5.748 8 49.0 3]
Total: 1172.6274
Mean: 23.452547
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2121.878011099998
Median total errors in population: 1185.1321999999998
Error averages by case: (82.31027549999945 11.152 58.98780340000049 10.025 112.70767740000001 2.427 65.97163440000001 1.501 56.38519839999999 1.509 49.7765096 2.463 43.13604829999999 1.601 48.96463890000039 11.387 47.69645580000002 2.102 66.99900870000008 11.419 131.0061527 12.077 40.9302434 2.432 110.34516550000001 3.588 110.3601585 3.514 124.25530829999991 3.95 72.1463001 11.154 41.858162199999995 1.468 71.65583220000002 2.468 57.306448599999996 1.586 63.10600680000042 10.494 129.12490570000003 3.599 111.9367989 13.03 130.24168949999998 2.592 64.91070089999953 9.773 88.5048874 3.943)
Error minima by case: (10.5851 8 16.1536 2 4.7779 2 27.0266 1 17.0266 1 10.0266 2 6.0 1 2.6557 8 6.0 1 14.3917 2 23.7928 10 1.0266 2 38.796 3 75.0 3 87.0 3 18.94 9 0.0049 1 30.0175 2 20.0 1 16.9308 2 22.3242 3 36.216 11 28.9072 2 5.748 8 49.0 3)
Average genome size in population (length): 70.785
Average program size in population (points): 71.785
Average percent parens in population: 0.014
Minimum age in population: 50.85232438461389
Maximum age in population: 55.56298726508976
Average age in population: 53.51574380458164
Median age in population: 53.56370865898498
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.803
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.803
Total error diversity:				 0.093
Error (vector) diversity:			 0.093
Behavioral diversity:				 0.093
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 53584529
--- Timings ---
Current time: 1529615169733 milliseconds
Total Time:         140.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.2 seconds, 40.8%
Fitness Testing:     66.4 seconds, 47.3%
Report:              16.6 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Number IO problem report - generation 37
Test total error for best: 48968.036299999985
Test mean error for best: 24.48402
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: -3.0150328134 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: -0.0993437337 
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: 0.4999893275  
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 38.7960139475 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -3.3980106093 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -0.3062166972 
Correct output: 118.3242489435 | Program output: 22.3242489435 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 28.907177534  
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mult} {:instruction float_sin} {:instruction integer_min} {:instruction float_swap} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_dec} {:instruction float_tan} {:instruction float_cos} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_div} {:instruction integer_rot} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_dec} {:instruction float_tan} {:instruction tag_integer_508} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_tan} {:instruction tag_integer_508} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction tagged_449} {:instruction float_frominteger} {:instruction integer_shove} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction 75.29715081734332} {:instruction integer_yankdup} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (float_mult float_sin integer_min float_swap integer_div integer_rot integer_rot integer_yank float_cos integer_dec float_tan float_cos integer_dec float_tan integer_flush integer_yank tag_float_716 integer_yankdup float_shove float_div integer_rot float_dec float_yankdup integer_div integer_rot integer_yank float_flush integer_dec float_tan tag_integer_508 tag_float_716 integer_yankdup float_tan tag_integer_508 tag_float_716 integer_yankdup tagged_449 float_frominteger integer_shove float_yankdup integer_fromfloat 75.29715081734332 integer_yankdup integer_fromfloat float_yank in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [48.3356 12 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 7.2738 12 6.0 1 27.1313 13 98.0 12 4.0 2 76.0 3 75.0 3 87.0 3 35.5573 11 5.0 1 36.0 2 20.0 1 24.6883 11 96.0 3 78.0 13 97.0 2 6.748 8 49.0 3]
Total: 1167.7343
Mean: 23.354687
Genome size: 76
Size: 77
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2286.971324199999
Median total errors in population: 1176.6274
Error averages by case: (90.94877870000042 11.771 64.73881810000056 9.243 119.11399570000003 2.525 72.90660359999998 1.619 63.372667899999996 1.626 56.920321900000005 2.572 50.74160160000001 1.69 55.41437530000072 11.725 54.87175220000003 2.23 72.21653479999989 12.076 137.2290429 12.126 47.4809584 2.56 117.71751039999998 3.642 117.6538329 3.576 129.5980973999999 4.062 79.55530880000028 11.213 47.7871915 1.585 78.4888725 2.578 64.0682295 1.655 71.48212980000035 10.595 136.3930807 3.662 118.37777849999999 13.073 137.4732535 2.654 65.56480879999975 8.967 93.7477788 4.083)
Error minima by case: (6.8386 8 0.767 2 5.1714 1 23.3877 1 13.3877 1 6.3877 2 6.0 1 2.7188 7 6.0 1 3.0985 2 1.9598 9 2.6123 2 38.796 3 75.0 3 46.6781 3 19.8407 9 0.2438 1 29.2449 2 19.7916 1 1.4617 2 22.3242 3 13.0839 9 28.9072 2 5.748 8 3.9016 3)
Average genome size in population (length): 71.238
Average program size in population (points): 72.238
Average percent parens in population: 0.014
Minimum age in population: 51.85232438461389
Maximum age in population: 56.84748876381491
Average age in population: 54.91854141389157
Median age in population: 54.94358811569691
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.786
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.786
Total error diversity:				 0.101
Error (vector) diversity:			 0.101
Behavioral diversity:				 0.101
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 55366004
--- Timings ---
Current time: 1529615173795 milliseconds
Total Time:         144.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.7 seconds, 40.6%
Fitness Testing:     68.5 seconds, 47.4%
Report:              17.2 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Number IO problem report - generation 38
Test total error for best: 48968.036299999985
Test mean error for best: 24.48402
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: -3.0150328134 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: -0.0993437337 
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: 0.4999893275  
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 38.7960139475 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -3.3980106093 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -0.3062166972 
Correct output: 118.3242489435 | Program output: 22.3242489435 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 28.907177534  
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mult} {:instruction float_sin} {:instruction tag_float_716} {:instruction 67.59641311186607} {:instruction float_tan} {:instruction integer_yank} {:instruction tag_float_716} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_flush} {:instruction integer_yank} {:instruction float_tan} {:instruction tag_integer_508} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_tan} {:instruction tag_integer_508} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction tagged_449} {:instruction float_frominteger} {:instruction integer_shove} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction 75.29715081734332} {:instruction integer_yankdup} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (float_mult float_sin tag_float_716 67.59641311186607 float_tan integer_yank tag_float_716 float_cos integer_dec integer_flush integer_yank float_tan tag_integer_508 tag_float_716 integer_yankdup float_tan tag_integer_508 tag_float_716 integer_yankdup tagged_449 float_frominteger integer_shove float_yankdup integer_fromfloat 75.29715081734332 integer_yankdup integer_fromfloat float_yank in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [48.3356 12 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 7.2738 12 6.0 1 27.1313 13 98.0 12 4.0 2 76.0 3 75.0 3 87.0 3 35.5573 11 5.0 1 36.0 2 20.0 1 24.6883 11 96.0 3 78.0 13 97.0 2 6.748 8 49.0 3]
Total: 1167.7343
Mean: 23.354687
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2464.316919199999
Median total errors in population: 1176.6274
Error averages by case: (97.3728361000009 11.795 71.31887120000057 9.176 126.74857270000001 2.552 80.4794955 1.631 71.02100660000002 1.654 64.4282416 2.601 56.99926370000001 1.734 62.17054010000095 11.733 61.94338400000002 2.329 79.85528799999953 11.999 144.7607377 12.148 54.19158989999999 2.571 124.09929409999997 3.698 123.9403862 3.621 137.06829299999998 4.136 86.23625660000025 11.229 53.74066419999999 1.594 86.1368199 2.604 71.78932760000001 1.725 78.67447189999997 10.565 142.64761700000003 3.71 125.8978888 13.086 143.6943543 2.707 73.54241280000036 9.014 101.80530569999998 4.142)
Error minima by case: (4.0764 8 14.7022 2 5.1714 1 28.1412 1 18.3491 1 8.4553 2 5.0 1 1.6285 8 6.0 1 14.3917 2 23.4867 10 3.0 2 36.2312 3 74.0 3 87.0 3 7.2364 9 2.4424 1 31.4663 2 18.9506 1 16.9308 2 22.3242 3 36.3711 11 28.9072 2 5.748 8 49.0 2)
Average genome size in population (length): 71.679
Average program size in population (points): 72.679
Average percent parens in population: 0.014
Minimum age in population: 53.84016584535129
Maximum age in population: 58.25595838148001
Average age in population: 56.34264327790312
Median age in population: 56.38036318965533
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.852
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.852
Total error diversity:				 0.107
Error (vector) diversity:			 0.107
Behavioral diversity:				 0.108
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 57158854
--- Timings ---
Current time: 1529615177783 milliseconds
Total Time:         148.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.1 seconds, 40.5%
Fitness Testing:     70.5 seconds, 47.5%
Report:              17.7 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Number IO problem report - generation 39
Test total error for best: 52049.13950000001
Test mean error for best: 26.02457
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 3.525768306   
Correct output: -22.7658954997 | Program output: -4.7175409126 
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 3.6777136356  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2311171381 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 38.7960139475 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -1.1136252153 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: 1.7372884637  
Correct output: 118.3242489435 | Program output: 22.3242489435 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 28.907177534  
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mult} {:instruction integer_pop} {:instruction integer_min} {:instruction float_swap} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_tan} {:instruction integer_yank} {:instruction tag_float_716} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_yank} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction 75.29715081734332} {:instruction integer_yankdup} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (float_mult integer_pop integer_min float_swap integer_div integer_rot integer_rot integer_yank float_cos 67.59641311186607 float_tan integer_yank tag_float_716 float_cos integer_dec integer_flush integer_yank tag_float_716 integer_yankdup float_shove float_div float_dec float_yankdup integer_div integer_rot integer_yank integer_min integer_fromfloat 75.29715081734332 integer_yankdup integer_fromfloat float_yank in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [41.7948 10 18.0484 10 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 3.4967 10 6.0 1 26.4002 9 98.0 12 4.0 2 76.0 3 75.0 3 87.0 3 33.2729 11 5.0 1 36.0 2 20.0 1 26.7318 12 96.0 3 78.0 13 97.0 2 6.748 8 49.0 3]
Total: 1157.4928
Mean: 23.149857
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2398.9955575
Median total errors in population: 1176.6274
Error averages by case: (95.67316070000057 11.641 69.33782400000051 9.17 123.80618740000004 2.579 78.21447960000002 1.68 67.8801857 1.68 62.412338999999996 2.624 53.755292100000005 1.752 59.676966400000516 11.574 59.934940200000014 2.463 76.69190589999958 11.76 141.8156164 12.111 51.383435600000006 2.591 120.8124962 3.742 121.2720291 3.655 134.50857529999993 4.21 83.91855699999991 11.197 50.12972129999999 1.617 83.65321699999998 2.617 68.99524359999998 1.742 76.12783469999998 10.529 139.0678516 3.777 123.0917896 13.045 140.19751799999997 2.755 73.37694690000038 9.048 99.44644419999995 4.256)
Error minima by case: (13.6795 8 13.0176 2 3.7641 1 30.0 1 20.0 1 13.0 2 5.0 1 3.4967 8 6.0 1 9.3088 2 23.4867 10 4.0 2 38.796 3 74.0 3 17.1644 3 12.6929 7 0.2438 1 29.8573 2 19.0 1 10.9456 2 22.3242 3 35.7604 10 28.9072 2 5.1663 8 9.5794 2)
Average genome size in population (length): 73.738
Average program size in population (points): 74.738
Average percent parens in population: 0.014
Minimum age in population: 55.41087759126094
Maximum age in population: 60.0069284795718
Average age in population: 57.77508494289203
Median age in population: 57.83826113767645
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.851
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.851
Total error diversity:				 0.139
Error (vector) diversity:			 0.142
Behavioral diversity:				 0.143
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 59003179
--- Timings ---
Current time: 1529615182112 milliseconds
Total Time:         152.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.7 seconds, 40.4%
Fitness Testing:     72.7 seconds, 47.6%
Report:              18.3 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Number IO problem report - generation 40
Test total error for best: 52049.13950000001
Test mean error for best: 26.02457
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 3.525768306   
Correct output: -22.7658954997 | Program output: -4.7175409126 
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 3.6777136356  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2311171381 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 38.7960139475 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -1.1136252153 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: 1.7372884637  
Correct output: 118.3242489435 | Program output: 22.3242489435 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 28.907177534  
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mult} {:instruction integer_pop} {:instruction integer_min} {:instruction float_swap} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_tan} {:instruction integer_yank} {:instruction tag_float_716} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_yank} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction 75.29715081734332} {:instruction integer_yankdup} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (float_mult integer_pop integer_min float_swap integer_div integer_rot integer_rot integer_yank float_cos 67.59641311186607 float_tan integer_yank tag_float_716 float_cos integer_dec integer_flush integer_yank tag_float_716 integer_yankdup float_shove float_div float_dec float_yankdup integer_div integer_rot integer_yank integer_min integer_fromfloat 75.29715081734332 integer_yankdup integer_fromfloat float_yank in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [41.7948 10 18.0484 10 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 3.4967 10 6.0 1 26.4002 9 98.0 12 4.0 2 76.0 3 75.0 3 87.0 3 33.2729 11 5.0 1 36.0 2 20.0 1 26.7318 12 96.0 3 78.0 13 97.0 2 6.748 8 49.0 3]
Total: 1157.4928
Mean: 23.149857
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2633.6306944999933
Median total errors in population: 1173.4916000000003
Error averages by case: (104.20960520000091 11.451 77.73433960000047 9.145 132.8111259 2.652 87.39693540000002 1.778 77.9881129 1.787 71.59696059999999 2.704 63.435961200000015 1.865 69.6836195000005 11.368 69.52659900000002 2.658 86.20288869999952 11.297 150.7484608 12.159 60.58087109999999 2.7 130.7304831 3.776 130.82940820000002 3.736 144.3431815999999 4.424 92.26018059999976 11.225 59.78660679999998 1.726 92.87129910000002 2.706 79.05787739999998 1.836 84.90520009999989 10.544 149.03408140000002 3.797 132.10812099999998 13.068 150.168184 2.795 81.50706990000079 9.059 109.4345214 4.423)
Error minima by case: (8.5045 8 4.4836 2 0.0498 2 27.0283 1 17.0283 1 10.0283 2 5.978 1 3.4967 8 5.0 1 8.349 2 24.3843 10 1.0283 2 38.796 3 72.6171 3 40.3219 3 14.7166 8 0.2438 1 29.326 2 20.0 1 6.7122 2 22.3242 2 35.769 8 28.9072 2 4.748 7 48.0 3)
Average genome size in population (length): 76.075
Average program size in population (points): 77.075
Average percent parens in population: 0.013
Minimum age in population: 56.50885400967672
Maximum age in population: 60.97419557813009
Average age in population: 59.13477350752242
Median age in population: 59.14528987873018
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.804
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.804
Total error diversity:				 0.151
Error (vector) diversity:			 0.155
Behavioral diversity:				 0.156
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 60906354
--- Timings ---
Current time: 1529615186022 milliseconds
Total Time:         156.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.2 seconds, 40.3%
Fitness Testing:     74.7 seconds, 47.7%
Report:              18.8 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Number IO problem report - generation 41
Test total error for best: 51949.39670000001
Test mean error for best: 25.97470
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 2.525768306   
Correct output: -22.7658954997 | Program output: -5.7175409126 
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.6777136356  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -1.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 38.7960139475 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -2.1136252153 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: 0.7372884637  
Correct output: 118.3242489435 | Program output: 22.3242489435 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 28.907177534  
Correct output: 85.0399635851  | Program output: 90.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_tan} {:instruction integer_yank} {:instruction tag_float_716} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_yank} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction 75.29715081734332} {:instruction integer_yankdup} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_yank float_cos 67.59641311186607 float_tan integer_yank tag_float_716 float_cos integer_dec integer_flush integer_yank tag_float_716 integer_yankdup float_shove float_div float_dec float_yankdup integer_div integer_rot integer_yank integer_min integer_fromfloat 75.29715081734332 integer_yankdup integer_fromfloat float_yank in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_stackdepth integer_shove float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec float_dec float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [42.7948 10 17.0484 10 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 4.4967 10 6.0 1 25.396 10 98.0 12 4.0 2 76.0 3 75.0 3 87.0 3 34.2729 10 5.0 1 36.0 2 20.0 1 25.7318 12 96.0 3 78.0 13 97.0 2 5.748 8 49.0 3]
Total: 1156.4886000000001
Mean: 23.129772
Genome size: 80
Size: 81
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 1990.532192499999
Median total errors in population: 1172.6274
Error averages by case: (79.16722110000026 11.257 51.044211600000345 7.808 108.93883260000001 2.375 61.374369599999994 1.438 51.6986961 1.433 44.984165399999995 2.395 37.289375 1.498 44.19158330000056 11.218 44.33179500000003 2.351 60.28926830000037 10.758 127.01867879999999 12.093 35.36848199999999 2.392 104.88858339999999 3.532 104.7405779 3.441 120.5130499999999 4.106 67.71226950000022 11.192 35.9033814 1.397 67.1279295 2.395 51.3326814 1.494 59.823409600000716 10.349 123.70877010000001 3.544 107.7163184 13.043 124.7843789 2.547 54.63380949999978 8.961 84.82435409999994 4.109)
Error minima by case: (6.327 7 15.1536 2 4.6757 1 28.1412 1 18.3491 1 8.4553 2 4.709 1 2.7276 9 5.0 1 13.3917 2 25.4927 11 3.0 2 38.796 3 73.5793 3 86.0 3 12.7874 9 2.3854 1 29.1161 2 19.0 1 17.3822 2 22.3242 2 36.193 11 28.9072 2 4.748 7 48.0 2)
Average genome size in population (length): 74.726
Average program size in population (points): 75.726
Average percent parens in population: 0.013
Minimum age in population: 57.99645266996231
Maximum age in population: 62.33370856774036
Average age in population: 60.55016423759064
Median age in population: 60.58210264061336
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.786
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.786
Total error diversity:				 0.135
Error (vector) diversity:			 0.139
Behavioral diversity:				 0.14
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 62778304
--- Timings ---
Current time: 1529615190199 milliseconds
Total Time:         160.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.6 seconds, 40.1%
Fitness Testing:     76.9 seconds, 47.8%
Report:              19.3 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Number IO problem report - generation 42
Test total error for best: 48984.72780000001
Test mean error for best: 24.49236
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 1.5574077247  
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 1.5574077247  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2311171381 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 38.7960139475 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 1.5574077247  
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: 1.5574077247  
Correct output: 118.3242489435 | Program output: 22.3242489435 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 28.907177534  
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mult} {:instruction integer_pop} {:instruction integer_min} {:instruction float_swap} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_tan} {:instruction integer_yank} {:instruction tag_float_716} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_yank} {:instruction integer_min} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_mult} {:instruction float_pop} {:instruction tag_integer_508} {:instruction in1} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (float_mult integer_pop integer_min float_swap integer_div integer_rot integer_rot integer_yank float_cos 67.59641311186607 float_tan integer_yank tag_float_716 float_cos integer_dec integer_flush integer_yank tag_float_716 integer_yankdup float_shove float_div float_dec float_yankdup integer_div integer_rot integer_yank integer_min float_yankdup integer_div integer_rot integer_yank float_flush integer_mult float_pop tag_integer_508 in1 integer_yankdup integer_yankdup integer_yankdup integer_fromfloat float_yank in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod float_max float_yankdup integer_shove float_dec float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [43.7631 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.617 9 6.0 1 26.4002 9 98.0 12 4.0 2 76.0 3 75.0 3 87.0 3 30.6019 10 5.0 1 36.0 2 20.0 1 26.5519 12 96.0 3 78.0 13 97.0 2 6.748 8 49.0 3]
Total: 1149.6821
Mean: 22.993643
Genome size: 89
Size: 90
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2397.6980506000073
Median total errors in population: 1167.7343
Error averages by case: (95.12411120000073 11.395 69.35060260000007 5.388 123.12340240000002 2.533 76.98125329999999 1.643 67.65502550000001 1.66 60.97050709999999 2.582 53.67461650000001 1.656 62.43612060000077 11.328 62.4636773 2.572 79.04011639999928 10.937 141.1262966 12.115 51.6170976 2.567 120.01578450000001 3.651 119.80688369999999 3.563 136.12352179999985 4.324 85.72106040000018 11.201 51.2040755 1.602 82.54504199999998 2.587 67.7189688 1.648 78.41752949999963 10.362 138.4848169 3.655 122.1974836 13.051 139.5276567 2.654 72.9559214000006 9.105 101.3054787 4.332)
Error minima by case: (4.0764 8 3.6156 2 3.7641 1 29.0 1 19.0 1 12.0 2 6.0 1 0.2775 8 6.0 1 7.481 2 23.7928 10 3.0 2 24.0 2 25.0 2 40.3219 3 8.2364 9 0.0049 1 29.8573 2 20.0 1 5.8442 2 4.0 2 36.1005 10 3.0 1 4.748 7 49.0 2)
Average genome size in population (length): 73.434
Average program size in population (points): 74.434
Average percent parens in population: 0.014
Minimum age in population: 59.16665590021876
Maximum age in population: 63.91685329926077
Average age in population: 61.93071261923441
Median age in population: 61.96828654545448
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.808
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.808
Total error diversity:				 0.151
Error (vector) diversity:			 0.154
Behavioral diversity:				 0.154
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 64623229
--- Timings ---
Current time: 1529615194392 milliseconds
Total Time:         165.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.2 seconds, 40.1%
Fitness Testing:     78.9 seconds, 47.8%
Report:              19.8 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Number IO problem report - generation 43
Test total error for best: 48972.02210000001
Test mean error for best: 24.48601
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 3.525768306   
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 3.6777136356  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2311171381 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 38.7960139475 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -1.1136252153 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: 1.7372884637  
Correct output: 118.3242489435 | Program output: 22.3242489435 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 28.907177534  
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mult} {:instruction float_sin} {:instruction tag_float_716} {:instruction 67.59641311186607} {:instruction float_tan} {:instruction integer_yank} {:instruction tag_float_716} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_flush} {:instruction integer_yank} {:instruction float_tan} {:instruction tag_integer_508} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_yank} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction 75.29715081734332} {:instruction integer_yankdup} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_swap} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (float_mult float_sin tag_float_716 67.59641311186607 float_tan integer_yank tag_float_716 float_cos integer_dec integer_flush integer_yank float_tan tag_integer_508 tag_float_716 integer_yankdup float_dec float_yankdup integer_div integer_rot integer_yank integer_min integer_fromfloat 75.29715081734332 integer_yankdup integer_fromfloat float_yank in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult integer_fromfloat float_yank in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup float_rot in2 float_tan integer_shove in1 float_swap integer_dec float_mult float_dec float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [41.7948 10 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 3.4967 10 6.0 1 26.4002 9 98.0 12 4.0 2 76.0 3 75.0 3 87.0 3 33.2729 11 5.0 1 36.0 2 20.0 1 26.7318 12 96.0 3 78.0 13 97.0 2 6.748 8 49.0 3]
Total: 1149.4444000000003
Mean: 22.988888
Genome size: 92
Size: 93
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2323.847729100006
Median total errors in population: 1167.7343
Error averages by case: (91.3059647000006 11.013 65.95342189999991 6.093 120.23787740000002 2.541 74.25507710000001 1.642 64.6103011 1.638 58.179398799999994 2.595 50.78277550000001 1.65 57.87982180000062 10.909 58.73381539999999 2.518 74.19292119999963 10.201 138.4766927 12.126 48.6110899 2.6 117.57145999999999 3.612 117.3939283 3.569 133.38839509999994 4.287 81.44337710000033 11.192 49.4594493 1.598 80.62026730000001 2.585 64.9148889 1.653 76.19135559999997 10.57 136.1542166 3.654 119.3929368 13.076 137.2839494 2.617 70.871276 9.152 98.55607119999996 4.296)
Error minima by case: (6.327 7 11.5372 2 4.6757 1 28.9234 1 19.0 1 9.4553 2 5.0 1 1.223 7 5.0 1 14.3917 2 23.7928 10 2.2979 2 37.796 3 74.0 3 40.3219 3 7.2364 8 0.0049 1 29.9154 2 19.0 1 17.3822 2 21.3242 2 26.2396 9 27.9072 2 4.748 7 4.9016 2)
Average genome size in population (length): 74.494
Average program size in population (points): 75.494
Average percent parens in population: 0.013
Minimum age in population: 60.16665590021876
Maximum age in population: 65.17257853143178
Average age in population: 63.08621304790572
Median age in population: 63.13447219067405
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 29
Genome diversity (% unique Plush genomes):	 0.794
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.794
Total error diversity:				 0.173
Error (vector) diversity:			 0.174
Behavioral diversity:				 0.175
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 66494229
--- Timings ---
Current time: 1529615198469 milliseconds
Total Time:         169.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.7 seconds, 40.0%
Fitness Testing:     81.0 seconds, 47.9%
Report:              20.4 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Number IO problem report - generation 44
Test total error for best: 48848.35140000001
Test mean error for best: 24.42418
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 3.8365486382  
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: -0.4810055691 
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: 0.4076099198  
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 38.7960139475 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -5.1057525085 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -1.4257295853 
Correct output: 118.3242489435 | Program output: 62.7038760992 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 28.907177534  
Correct output: 85.0399635851  | Program output: 60.9048132162 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_tan} {:instruction integer_yank} {:instruction tag_float_716} {:instruction float_div} {:instruction integer_dec} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_yank} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction 75.29715081734332} {:instruction integer_yankdup} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_min} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_yank float_cos 67.59641311186607 float_tan integer_yank tag_float_716 float_div integer_dec integer_flush integer_yank tag_float_716 integer_yankdup float_shove float_div float_dec float_yankdup integer_div integer_rot integer_yank integer_min integer_fromfloat 75.29715081734332 integer_yankdup integer_fromfloat float_yank in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan float_min float_dec float_mod float_max float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_yankdup integer_shove float_dec float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [41.484 10 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 7.6555 11 6.0 1 27.0389 12 98.0 12 4.0 2 76.0 3 75.0 3 87.0 3 37.265 11 5.0 1 36.0 2 20.0 1 23.5688 9 55.6204 13 78.0 13 97.0 2 24.1352 11 49.0 3]
Total: 1145.7677999999999
Mean: 22.915356
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2239.704299200002
Median total errors in population: 1158.4297000000001
Error averages by case: (85.07888110000079 10.489 65.99384439999983 8.935 116.33641470000003 2.554 70.5473279 1.636 60.875026800000015 1.638 54.47802599999999 2.59 47.0537374 1.697 50.72810990000038 10.357 56.37175639999998 2.802 70.20799559999944 9.692 134.2784023 12.117 45.49310969999999 2.685 114.47060569999996 3.594 114.7085983 3.584 131.88065059999994 4.464 76.86226990000057 10.98 44.89091399999999 1.596 75.7541664 2.58 61.868606799999995 1.674 71.58681570000037 11.12 132.94932410000004 3.696 115.5235446 13.059 134.27162079999997 2.601 72.06105580000009 9.242 95.70649429999999 4.345)
Error minima by case: (6.0764 8 2.6156 2 2.0331 1 0.3789 1 18.3491 1 8.4553 2 0.8132 1 1.223 8 6.0 1 6.481 2 23.3843 10 2.889 2 24.0 2 25.0 2 87.0 3 7.2364 7 0.2438 1 28.9154 2 19.0 1 4.8442 2 4.0 2 35.3759 10 3.0 1 4.748 7 22.5311 2)
Average genome size in population (length): 75.169
Average program size in population (points): 76.169
Average percent parens in population: 0.013
Minimum age in population: 61.16665590021876
Maximum age in population: 66.3467913423865
Average age in population: 64.32148247069291
Median age in population: 64.35350111723858
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 43
Genome diversity (% unique Plush genomes):	 0.799
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.799
Total error diversity:				 0.245
Error (vector) diversity:			 0.248
Behavioral diversity:				 0.248
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 68375804
--- Timings ---
Current time: 1529615202492 milliseconds
Total Time:         173.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.2 seconds, 39.9%
Fitness Testing:     83.0 seconds, 47.9%
Report:              21.0 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Number IO problem report - generation 45
Test total error for best: 48848.35140000001
Test mean error for best: 24.42418
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 3.8365486382  
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: -0.4810055691 
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: 0.4076099198  
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 38.7960139475 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -5.1057525085 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -1.4257295853 
Correct output: 118.3242489435 | Program output: 62.7038760992 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 28.907177534  
Correct output: 85.0399635851  | Program output: 60.9048132162 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_tan} {:instruction integer_yank} {:instruction tag_float_716} {:instruction float_div} {:instruction integer_dec} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_yank} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction 75.29715081734332} {:instruction integer_yankdup} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_min} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_yank float_cos 67.59641311186607 float_tan integer_yank tag_float_716 float_div integer_dec integer_flush integer_yank tag_float_716 integer_yankdup float_shove float_div float_dec float_yankdup integer_div integer_rot integer_yank integer_min integer_fromfloat 75.29715081734332 integer_yankdup integer_fromfloat float_yank in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan float_min float_dec float_mod float_max float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_yankdup integer_shove float_dec float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [41.484 10 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 7.6555 11 6.0 1 27.0389 12 98.0 12 4.0 2 76.0 3 75.0 3 87.0 3 37.265 11 5.0 1 36.0 2 20.0 1 23.5688 9 55.6204 13 78.0 13 97.0 2 24.1352 11 49.0 3]
Total: 1145.7677999999999
Mean: 22.915356
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2420.725888899999
Median total errors in population: 1157.4928
Error averages by case: (89.70828430000056 10.571 72.73204159999983 8.148 124.29637050000002 2.604 79.34703929999999 1.7 69.8534078 1.733 63.28397579999999 2.644 54.20810960000001 1.795 57.41199440000027 10.2 63.252461899999965 2.765 77.39333389999939 9.617 142.45230110000003 12.139 52.017783699999995 2.691 122.010019 3.674 122.66624000000003 3.689 137.31402029999998 4.451 82.00885620000047 10.759 50.1420841 1.645 84.3252458 2.652 70.0164077 1.773 77.42183530000017 11.201 140.58376530000004 3.783 122.938708 13.058 141.7275847 2.698 81.00486830000045 9.201 103.10215029999999 4.316)
Error minima by case: (5.0764 8 10.0565 2 0.0498 2 29.0 1 19.0 1 12.0 2 4.978 1 0.6827 8 5.0 1 12.15 2 23.4867 10 1.8228 2 76.0 3 71.6171 3 86.0 3 7.2364 8 0.2438 1 22.3416 2 20.0 1 10.9189 2 29.4749 3 25.0165 8 20.2196 2 4.748 7 23.5311 3)
Average genome size in population (length): 80.177
Average program size in population (points): 81.177
Average percent parens in population: 0.013
Minimum age in population: 62.16665590021876
Maximum age in population: 68.07141809337679
Average age in population: 65.89616230252666
Median age in population: 65.94543917552559
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.801
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.801
Total error diversity:				 0.283
Error (vector) diversity:			 0.287
Behavioral diversity:				 0.287
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 70381604
--- Timings ---
Current time: 1529615206738 milliseconds
Total Time:         177.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        70.7 seconds, 39.9%
Fitness Testing:     85.1 seconds, 48.0%
Report:              21.5 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Number IO problem report - generation 46
Test total error for best: 48848.35140000001
Test mean error for best: 24.42418
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 3.8365486382  
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: -0.4810055691 
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: 0.4076099198  
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 38.7960139475 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -5.1057525085 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -1.4257295853 
Correct output: 118.3242489435 | Program output: 62.7038760992 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 28.907177534  
Correct output: 85.0399635851  | Program output: 60.9048132162 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mult} {:instruction float_sin} {:instruction tag_float_716} {:instruction 67.59641311186607} {:instruction float_tan} {:instruction integer_yank} {:instruction tag_float_716} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_flush} {:instruction integer_yank} {:instruction float_tan} {:instruction tag_integer_508} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_yank} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction 75.29715081734332} {:instruction integer_yankdup} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_min} {:instruction float_dec} {:instruction float_mod} {:instruction integer_mult} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (float_mult float_sin tag_float_716 67.59641311186607 float_tan integer_yank tag_float_716 float_cos integer_dec integer_flush integer_yank float_tan tag_integer_508 tag_float_716 integer_yankdup float_dec float_yankdup integer_div integer_rot integer_yank integer_min integer_fromfloat 75.29715081734332 integer_yankdup integer_fromfloat float_yank in2 float_tan float_frominteger float_max in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan float_min float_dec float_mod integer_mult float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_yankdup integer_shove float_dec float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [41.484 10 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 7.6555 11 6.0 1 27.0389 12 98.0 12 4.0 2 76.0 3 75.0 3 87.0 3 37.265 11 5.0 1 36.0 2 20.0 1 23.5688 9 55.6204 13 78.0 13 97.0 2 24.1352 11 49.0 3]
Total: 1145.7677999999999
Mean: 22.915356
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2743.125215199999
Median total errors in population: 1156.8988
Error averages by case: (103.22669819999945 10.863 84.75175569999992 5.467 136.6990733 2.687 91.99461799999999 1.805 82.31317840000001 1.825 75.7271042 2.741 67.4018987 1.783 71.10333679999984 10.063 77.66367919999996 3.101 91.43040879999958 9.551 154.51632030000002 12.205 65.05539160000001 2.754 134.13356840000003 3.724 134.3296653 3.708 151.43410099999988 4.748 94.52229779999938 10.732 63.07604639999998 1.756 96.89383009999999 2.735 82.5000641 1.791 91.21429200000016 11.022 152.9741959 3.971 135.9968174 13.131 154.0332358 2.737 95.04949710000147 9.555 115.97814069999997 4.651)
Error minima by case: (5.0764 8 16.0484 2 2.6757 1 28.9234 1 19.0 1 9.4553 2 5.0 1 1.223 7 5.0 1 17.1294 2 24.3843 11 3.0 2 38.796 3 73.6171 3 85.7075 3 10.6019 7 0.2438 1 27.9154 2 18.9488 1 16.3822 2 22.3242 2 36.1005 10 28.9072 2 3.1663 7 23.5311 2)
Average genome size in population (length): 86.294
Average program size in population (points): 87.294
Average percent parens in population: 0.012
Minimum age in population: 64.99217199116015
Maximum age in population: 69.89348961251198
Average age in population: 67.54638232177894
Median age in population: 67.6260663922596
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.846
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.846
Total error diversity:				 0.313
Error (vector) diversity:			 0.316
Behavioral diversity:				 0.316
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 72540279
--- Timings ---
Current time: 1529615210902 milliseconds
Total Time:         181.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        72.2 seconds, 39.7%
Fitness Testing:     87.4 seconds, 48.1%
Report:              22.0 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Number IO problem report - generation 47
Test total error for best: 48848.35140000001
Test mean error for best: 24.42418
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 3.8365486382  
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: -0.4810055691 
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: 0.4076099198  
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 38.7960139475 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -5.1057525085 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -1.4257295853 
Correct output: 118.3242489435 | Program output: 62.7038760992 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 28.907177534  
Correct output: 85.0399635851  | Program output: 60.9048132162 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_tan} {:instruction integer_yank} {:instruction tag_float_716} {:instruction float_div} {:instruction integer_dec} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_716} {:instruction float_div} {:instruction integer_dec} {:instruction integer_flush} {:instruction integer_yank} {:instruction integer_flush} {:instruction integer_yank} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction 75.29715081734332} {:instruction integer_yankdup} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_min} {:instruction float_dec} {:instruction float_mod} {:instruction integer_mult} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_yank float_cos 67.59641311186607 float_tan integer_yank tag_float_716 float_div integer_dec integer_flush integer_yank tag_float_716 float_div integer_dec integer_flush integer_yank integer_flush integer_yank tag_float_716 integer_yankdup float_shove float_div float_dec float_yankdup integer_div 75.29715081734332 integer_yankdup integer_fromfloat float_sub in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan float_min float_dec float_mod integer_mult float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_yankdup integer_shove float_dec float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [41.484 10 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 7.6555 11 6.0 1 27.0389 12 98.0 12 4.0 2 76.0 3 75.0 3 87.0 3 37.265 11 5.0 1 36.0 2 20.0 1 23.5688 9 55.6204 13 78.0 13 97.0 2 24.1352 11 49.0 3]
Total: 1145.7677999999999
Mean: 22.915356
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2307.9313801999974
Median total errors in population: 1149.6821
Error averages by case: (86.64132959999955 10.806 64.6014108999999 4.071 120.3613171 2.487 74.02974280000001 1.555 64.6832136 1.586 57.9542937 2.524 49.4237479 1.599 56.38885950000006 10.119 58.38775299999999 2.982 74.37711169999957 9.282 138.5049317 12.138 46.99606239999999 2.54 117.3400111 3.538 117.4015216 3.492 134.25541499999997 4.643 76.96459449999996 10.866 45.2371054 1.527 79.67933049999999 2.541 64.76065089999999 1.553 75.78143299999996 10.566 133.37877890000001 4.388 119.53102260000001 13.07 137.68331929999997 2.551 80.49009950000078 9.73 98.39432399999998 4.53)
Error minima by case: (4.0764 8 3.6156 2 3.1183 1 30.0 1 20.0 1 13.0 2 3.7417 1 0.4742 8 4.6263 1 14.1937 2 23.4867 9 4.0 2 38.796 3 72.1357 3 87.0 3 4.777 7 0.828 1 28.9154 2 19.0 1 17.6551 2 22.3242 3 36.366 8 28.9072 2 5.748 7 49.0 2)
Average genome size in population (length): 89.931
Average program size in population (points): 90.931
Average percent parens in population: 0.011
Minimum age in population: 66.54081018566146
Maximum age in population: 70.83446038792128
Average age in population: 69.01436676312905
Median age in population: 69.07123782605353
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.876
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.876
Total error diversity:				 0.292
Error (vector) diversity:			 0.294
Behavioral diversity:				 0.294
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 74789404
--- Timings ---
Current time: 1529615215146 milliseconds
Total Time:         185.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        73.5 seconds, 39.6%
Fitness Testing:     89.7 seconds, 48.3%
Report:              22.5 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Number IO problem report - generation 48
Test total error for best: 49065.23219999999
Test mean error for best: 24.53262
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: -3.0150328134 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 3.9630285699  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -6.6078675627 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 38.7960139475 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 1.1073236149  
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -1.9585065363 
Correct output: 118.3242489435 | Program output: 22.3242489435 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 28.907177534  
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction float_pop} {:instruction integer_min} {:instruction float_swap} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_rot} {:instruction float_sin} {:instruction tag_float_716} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_flush} {:instruction integer_yank} {:instruction float_tan} {:instruction tag_integer_508} {:instruction tag_float_716} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_max} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction 75.29715081734332} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_swap} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot float_pop integer_min float_swap integer_div integer_rot integer_yank float_cos integer_rot float_sin tag_float_716 float_cos integer_dec integer_flush integer_yank float_tan tag_integer_508 tag_float_716 integer_yankdup float_dec float_max integer_div integer_rot integer_yank print_integer integer_fromfloat 75.29715081734332 integer_yankdup float_mod float_max float_yankdup float_rot in2 float_tan integer_shove integer_fromfloat float_yank in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup float_rot in2 float_tan integer_shove in2 float_tan integer_shove in1 float_swap integer_dec float_mult float_dec float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [48.3356 12 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 3.2114 11 6.0 1 20.0234 8 98.0 12 4.0 2 76.0 3 75.0 3 87.0 3 31.052 10 5.0 1 36.0 2 20.0 1 23.036 9 96.0 3 78.0 13 97.0 2 6.748 8 49.0 3]
Total: 1141.4064
Mean: 22.828129
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2436.2322614999935
Median total errors in population: 1149.6821
Error averages by case: (91.16191839999985 10.619 70.54116639999997 3.676 124.99912479999999 2.536 78.98217819999999 1.622 69.44375930000001 1.638 62.9820546 2.57 54.4198135 1.62 61.80218400000045 10.537 62.67430729999998 2.424 79.95382659999969 9.894 145.7460513 12.164 52.06435349999998 2.595 122.42010850000001 3.588 121.91139039999999 3.546 137.6624000999999 4.235 84.74232219999982 11.109 50.2304339 1.569 84.4474923 2.568 69.7167276 1.612 85.58116249999945 10.226 132.37559780000004 5.899 124.1420119 13.107 142.0974694 2.616 88.53179690000071 10.14 101.31261009999996 4.18)
Error minima by case: (4.0942 8 2.2942 2 1.7098 1 29.0 1 19.0 1 12.0 2 5.0 1 1.223 8 6.0 1 14.3917 2 24.3843 9 3.0 2 38.796 3 20.3122 3 87.0 3 4.777 7 0.6016 1 12.4956 2 19.0 1 6.5581 2 22.3242 3 22.155 9 25.1969 2 5.748 5 23.5311 2)
Average genome size in population (length): 89.387
Average program size in population (points): 90.387
Average percent parens in population: 0.011
Minimum age in population: 67.86476007272938
Maximum age in population: 72.24868412722083
Average age in population: 70.36799141162335
Median age in population: 70.37689596354865
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.851
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.851
Total error diversity:				 0.289
Error (vector) diversity:			 0.292
Behavioral diversity:				 0.292
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 77024604
--- Timings ---
Current time: 1529615219568 milliseconds
Total Time:         190.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        75.0 seconds, 39.4%
Fitness Testing:     92.0 seconds, 48.4%
Report:              23.1 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Number IO problem report - generation 49
Test total error for best: 48217.9968
Test mean error for best: 24.10900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 3.8365486382  
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 1.5574077247  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: 0.4076099198  
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 38.7960139475 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 1.5574077247  
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: 1.5574077247  
Correct output: 118.3242489435 | Program output: 62.7038760992 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 28.907177534  
Correct output: 85.0399635851  | Program output: 60.9048132162 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mult} {:instruction float_sin} {:instruction tag_float_716} {:instruction 67.59641311186607} {:instruction float_tan} {:instruction integer_yank} {:instruction tag_float_716} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_flush} {:instruction integer_yank} {:instruction float_tan} {:instruction tag_integer_508} {:instruction tag_float_716} {:instruction float_min} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_yank} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction 75.29715081734332} {:instruction integer_yank} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction 75.29715081734332} {:instruction integer_yankdup} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_min} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (float_mult float_sin tag_float_716 67.59641311186607 float_tan integer_yank tag_float_716 float_cos integer_dec integer_flush integer_yank float_tan tag_integer_508 tag_float_716 float_min float_dec float_yankdup integer_div integer_rot integer_yank integer_min integer_fromfloat 75.29715081734332 integer_yank integer_min integer_fromfloat 75.29715081734332 integer_yankdup integer_fromfloat float_yank in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan float_min float_dec float_mod float_max float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_yankdup integer_shove float_dec float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [41.484 10 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.617 9 6.0 1 27.0389 12 98.0 12 4.0 2 76.0 3 75.0 3 87.0 3 30.6019 10 5.0 1 36.0 2 20.0 1 26.5519 12 55.6204 13 78.0 13 97.0 2 24.1352 11 49.0 3]
Total: 1140.0493
Mean: 22.800985
Genome size: 92
Size: 93
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2403.639484299997
Median total errors in population: 1149.4444000000003
Error averages by case: (90.40120239999905 10.449 67.36875470000004 3.641 123.95393949999999 2.535 77.8464947 1.624 68.38839030000001 1.659 61.8691876 2.571 53.0084197 1.624 60.935065900000474 10.832 59.94618389999997 2.441 78.14186009999972 10.565 147.0287499 12.156 50.2489104 2.603 121.599299 3.566 121.11452639999999 3.566 135.72936320000002 4.236 83.85931409999985 11.2 49.06721700000001 1.575 83.3836279 2.57 68.862065 1.623 85.26868559999936 9.436 120.4457944999999 8.482 123.1336654 13.089 141.44622849999996 2.58 90.45140990000041 10.903 100.3961287 4.219)
Error minima by case: (4.0942 7 3.6156 2 1.7098 1 29.0 1 18.2311 1 12.0 2 2.4484 1 1.9433 8 6.0 1 4.8696 2 22.1594 10 3.0 2 40.1101 3 75.0 3 87.0 3 4.777 7 0.4946 1 21.77 2 19.0 1 5.8442 2 43.6383 2 35.4538 10 51.2212 2 6.748 7 49.0 2)
Average genome size in population (length): 86.491
Average program size in population (points): 87.491
Average percent parens in population: 0.012
Minimum age in population: 69.50216516547005
Maximum age in population: 73.36073633391987
Average age in population: 71.7433594678906
Median age in population: 71.786745956849
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.83
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.83
Total error diversity:				 0.282
Error (vector) diversity:			 0.283
Behavioral diversity:				 0.285
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 79187129
--- Timings ---
Current time: 1529615224082 milliseconds
Total Time:         194.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        76.5 seconds, 39.3%
Fitness Testing:     94.5 seconds, 48.5%
Report:              23.7 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Number IO problem report - generation 50
Test total error for best: 48217.9968
Test mean error for best: 24.10900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 3.8365486382  
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 1.5574077247  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: 0.4076099198  
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 38.7960139475 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 1.5574077247  
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: 1.5574077247  
Correct output: 118.3242489435 | Program output: 62.7038760992 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 28.907177534  
Correct output: 85.0399635851  | Program output: 60.9048132162 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction 67.59641311186607} {:instruction float_tan} {:instruction integer_yank} {:instruction tag_float_716} {:instruction float_cos} {:instruction integer_dec} {:instruction float_shove} {:instruction integer_yank} {:instruction float_tan} {:instruction tag_integer_508} {:instruction integer_yank} {:instruction float_tan} {:instruction tag_integer_508} {:instruction tag_float_716} {:instruction float_min} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_yank} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction 75.29715081734332} {:instruction integer_yank} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction 75.29715081734332} {:instruction integer_yankdup} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_min} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot 67.59641311186607 float_tan integer_yank tag_float_716 float_cos integer_dec float_shove integer_yank float_tan tag_integer_508 integer_yank float_tan tag_integer_508 tag_float_716 float_min float_dec float_yankdup integer_div integer_rot integer_yank integer_min integer_fromfloat 75.29715081734332 integer_yank integer_min integer_fromfloat 75.29715081734332 integer_yankdup integer_fromfloat float_yank in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan float_min float_dec float_mod float_max float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_yankdup integer_shove float_dec float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [41.484 10 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.617 9 6.0 1 27.0389 12 98.0 12 4.0 2 76.0 3 75.0 3 87.0 3 30.6019 10 5.0 1 36.0 2 20.0 1 26.5519 12 55.6204 13 78.0 13 97.0 2 24.1352 11 49.0 3]
Total: 1140.0493
Mean: 22.800985
Genome size: 93
Size: 94
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2548.716984199994
Median total errors in population: 1170.2082500000001
Error averages by case: (96.01417949999887 10.528 73.8957117 3.89 129.03734400000002 2.604 82.83675649999999 1.7 73.4813491 1.766 66.9068036 2.637 57.6510876 1.704 67.60485190000027 10.845 68.20990689999998 2.695 84.46345159999976 10.525 151.69816690000005 12.156 54.0217476 2.667 126.0910814 3.605 125.72510830000002 3.597 142.51283529999995 4.496 89.45376619999982 11.198 52.07423389999999 1.655 88.5114632 2.653 73.54132449999999 1.673 96.27580709999894 9.177 124.9637493999999 8.599 127.82958889999999 13.079 145.51852949999997 2.606 100.71222050000054 11.154 108.0099191 4.467)
Error minima by case: (4.0942 8 16.4278 2 1.7098 1 28.9023 1 18.9041 1 2.7574 2 5.0 1 0.3627 7 5.0 1 3.6634 2 25.4063 9 0.7178 2 15.3469 3 66.6572 3 40.3219 3 3.2178 7 0.6016 1 12.9763 2 1.9337 1 1.8892 2 18.8751 2 36.193 9 26.4581 2 6.748 7 48.0 2)
Average genome size in population (length): 85.721
Average program size in population (points): 86.721
Average percent parens in population: 0.012
Minimum age in population: 70.68007736306606
Maximum age in population: 74.91377775173855
Average age in population: 73.13178448170035
Median age in population: 73.17111658591512
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.864
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.864
Total error diversity:				 0.306
Error (vector) diversity:			 0.306
Behavioral diversity:				 0.306
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 81330354
--- Timings ---
Current time: 1529615228702 milliseconds
Total Time:         199.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        78.0 seconds, 39.2%
Fitness Testing:     96.8 seconds, 48.6%
Report:              24.3 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Number IO problem report - generation 51
Test total error for best: 47058.493199999975
Test mean error for best: 23.52925
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 1.5574077247  
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 1.5574077247  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 1.5574077247  
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: 1.5574077247  
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction integer_rot} {:instruction float_sin} {:instruction integer_yank} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_yank float_cos 67.59641311186607 integer_rot float_sin integer_yank float_swap integer_div integer_fromfloat float_yank in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_yankdup integer_shove float_dec float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_yankdup integer_shove float_dec float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [43.7631 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.617 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 30.6019 10 5.0 1 36.0 2 20.0 1 26.5519 12 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1045.6475
Mean: 20.91295
Genome size: 87
Size: 88
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2852.824228399994
Median total errors in population: 1168.2830000000001
Error averages by case: (106.59082999999892 10.638 85.22212919999994 3.983 141.0454501 2.701 94.8753265 1.788 86.329443 1.879 79.9507417 2.73 70.83362360000001 1.801 79.7324885999998 10.74 79.21737509999996 2.617 95.26100399999969 10.334 166.80439530000004 12.203 67.5285806 2.773 138.18120820000001 3.754 138.7912851 3.731 152.601951 4.398 101.3616257999998 11.237 64.8807859 1.727 101.30816100000001 2.746 86.2829472 1.781 109.41831319999906 9.434 136.9630615000002 8.404 140.08358030000002 13.133 157.27782239999996 2.772 110.81942760000082 11.065 118.75067149999998 4.343)
Error minima by case: (20.4505 8 3.6156 2 1.7098 1 13.7628 1 18.4056 1 7.1519 2 5.0 1 0.3627 8 6.0 1 4.6388 2 23.4867 9 2.8809 2 40.1101 3 75.0 3 87.0 3 4.8587 7 0.0049 1 12.4956 2 19.0 1 3.2296 2 33.2961 3 36.3711 9 51.2212 2 6.748 7 49.0 2)
Average genome size in population (length): 86.213
Average program size in population (points): 87.213
Average percent parens in population: 0.012
Minimum age in population: 71.68007736306606
Maximum age in population: 76.33772059304945
Average age in population: 74.50592668323645
Median age in population: 74.5393376666417
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.877
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.877
Total error diversity:				 0.306
Error (vector) diversity:			 0.307
Behavioral diversity:				 0.307
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 83485879
--- Timings ---
Current time: 1529615233267 milliseconds
Total Time:         204.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        79.6 seconds, 39.0%
Fitness Testing:     99.3 seconds, 48.7%
Report:              25.0 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Number IO problem report - generation 52
Test total error for best: 47058.493199999975
Test mean error for best: 23.52925
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 1.5574077247  
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 1.5574077247  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 1.5574077247  
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: 1.5574077247  
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction integer_rot} {:instruction float_sin} {:instruction integer_yank} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_yank float_cos 67.59641311186607 integer_rot float_sin integer_yank float_swap integer_div integer_fromfloat float_yank in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_yankdup integer_shove float_dec float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_yankdup integer_shove float_dec float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [43.7631 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.617 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 30.6019 10 5.0 1 36.0 2 20.0 1 26.5519 12 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1045.6475
Mean: 20.91295
Genome size: 87
Size: 88
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2260.081626600002
Median total errors in population: 1145.7677999999999
Error averages by case: (87.84520459999916 10.859 62.822547400000026 3.534 118.06236160000002 2.487 72.1154828 1.569 62.4902376 1.605 56.24890599999999 2.511 46.6568203 1.569 53.399845300000024 10.488 55.83574009999999 2.334 71.97092639999975 9.749 137.258579 12.126 43.7679188 2.522 115.36317120000004 3.648 115.37329440000002 3.486 132.2817345 4.141 77.00813499999998 10.961 42.2371608 1.527 77.4720976 2.547 63.00901639999999 1.546 76.15265719999975 9.589 121.34084859999999 7.075 117.27227510000003 13.072 135.1005093 2.731 86.11864250000018 10.559 96.51751410000001 4.125)
Error minima by case: (2.127 8 14.549 2 3.7641 2 28.8313 1 18.9041 1 2.7574 2 6.0 1 0.3627 7 6.0 1 3.9854 2 21.6957 10 4.0 2 40.1101 3 67.2411 3 87.0 3 15.3998 7 1.4932 1 8.4899 2 20.0 1 8.6337 2 43.6383 3 4.9383 10 51.2212 2 5.748 7 49.0 3)
Average genome size in population (length): 86.98
Average program size in population (points): 87.98
Average percent parens in population: 0.011
Minimum age in population: 73.7896885161074
Maximum age in population: 77.69937549761799
Average age in population: 75.9561911381353
Median age in population: 76.00912207834752
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 33
Genome diversity (% unique Plush genomes):	 0.851
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.851
Total error diversity:				 0.351
Error (vector) diversity:			 0.351
Behavioral diversity:				 0.352
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 85660629
--- Timings ---
Current time: 1529615237824 milliseconds
Total Time:         208.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        81.1 seconds, 38.9%
Fitness Testing:    101.6 seconds, 48.8%
Report:              25.6 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Number IO problem report - generation 53
Test total error for best: 47058.493199999975
Test mean error for best: 23.52925
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 1.5574077247  
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 1.5574077247  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 1.5574077247  
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: 1.5574077247  
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction integer_rot} {:instruction float_sin} {:instruction integer_yank} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_yank float_cos 67.59641311186607 integer_rot float_sin integer_yank float_swap integer_div integer_fromfloat float_yank in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_yankdup integer_shove float_dec float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_yankdup integer_shove float_dec float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [43.7631 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.617 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 30.6019 10 5.0 1 36.0 2 20.0 1 26.5519 12 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1045.6475
Mean: 20.91295
Genome size: 87
Size: 88
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2607.337701299993
Median total errors in population: 1141.4064
Error averages by case: (99.50387229999978 11.094 74.1775506 3.902 133.4941901 2.612 88.70769370000002 1.724 80.1952362 1.878 71.4717893 2.635 61.2804841 1.776 65.29784059999973 10.422 71.44220100000001 2.736 83.78646860000006 9.761 153.31506180000002 12.142 59.8515264 2.734 126.7809313000002 4.399 130.1971451 3.623 145.54045460000003 4.465 85.51516399999974 10.582 55.87506859999999 1.659 94.03383340000002 2.778 78.264997 1.683 87.25491659999943 10.048 135.09795290000022 6.859 132.5819156 13.082 146.06062450000005 3.698 96.5636735000009 10.193 110.16210949999996 4.4)
Error minima by case: (13.6795 8 3.6156 2 1.7098 1 25.2445 1 19.0 1 4.7554 2 2.4484 1 0.3242 8 5.0 1 3.9854 2 25.311 9 3.0 2 36.204 3 17.1063 3 40.3219 3 3.9938 7 0.4099 1 21.1448 2 19.0 1 16.7783 2 22.3242 2 37.2196 11 28.9072 2 5.748 7 48.0 2)
Average genome size in population (length): 87.117
Average program size in population (points): 88.117
Average percent parens in population: 0.011
Minimum age in population: 74.92601728216728
Maximum age in population: 79.3648925513778
Average age in population: 77.45202786368723
Median age in population: 77.49537174084632
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.829
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.829
Total error diversity:				 0.307
Error (vector) diversity:			 0.307
Behavioral diversity:				 0.308
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 87838729
--- Timings ---
Current time: 1529615242497 milliseconds
Total Time:         213.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        82.7 seconds, 38.8%
Fitness Testing:    104.2 seconds, 48.9%
Report:              26.2 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Number IO problem report - generation 54
Test total error for best: 47058.493199999975
Test mean error for best: 23.52925
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 1.5574077247  
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 1.5574077247  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 1.5574077247  
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: 1.5574077247  
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_dup_items} {:instruction float_sin} {:instruction integer_yank} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_max} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_yank float_cos 67.59641311186607 float_dup_items float_sin integer_yank float_swap integer_div integer_fromfloat float_yank in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_max in1 float_stackdepth integer_dec integer_yankdup integer_shove float_dec float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_yankdup integer_shove float_dec float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [43.7631 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.617 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 30.6019 10 5.0 1 36.0 2 20.0 1 26.5519 12 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1045.6475
Mean: 20.91295
Genome size: 87
Size: 88
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2494.2260102000005
Median total errors in population: 1141.4064
Error averages by case: (96.89146839999944 10.803 73.78117989999996 3.695 126.9668985 2.568 80.1884908 1.669 71.70466060000001 1.864 64.7991655 2.623 59.01244670000001 1.905 65.94243489999964 10.248 66.55700249999998 2.54 82.41072249999996 9.998 145.4069847 12.156 56.8287886 2.775 115.04543140000057 5.89 124.6774323 3.64 140.55890639999996 4.312 86.10859279999977 10.62 56.333418299999984 1.671 87.62500460000003 2.78 71.51342819999999 1.662 83.9133778999999 10.212 119.9188663000006 8.544 126.50485750000001 13.082 131.46947699999998 5.786 108.00050130000086 10.848 105.91047259999999 4.265)
Error minima by case: (18.9097 7 3.6156 2 4.6396 2 25.2445 1 18.9041 1 2.7574 2 5.4498 1 0.4742 7 6.0 1 7.5594 2 25.4927 11 3.0 2 24.0 2 25.0 2 87.0 3 3.9938 7 1.6577 1 28.358 2 20.0 1 8.7739 2 22.3242 2 25.2396 11 3.0 1 5.748 7 49.0 3)
Average genome size in population (length): 89.022
Average program size in population (points): 90.022
Average percent parens in population: 0.011
Minimum age in population: 76.85438024355251
Maximum age in population: 81.0100177121652
Average age in population: 78.95858548736587
Median age in population: 78.98082066208406
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.849
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.849
Total error diversity:				 0.36
Error (vector) diversity:			 0.361
Behavioral diversity:				 0.362
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 90064379
--- Timings ---
Current time: 1529615246773 milliseconds
Total Time:         217.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        84.1 seconds, 38.7%
Fitness Testing:    106.5 seconds, 49.0%
Report:              26.8 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
;;******************************
;; -*- Number IO problem report - generation 55
Test total error for best: 47058.493199999975
Test mean error for best: 23.52925
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 1.5574077247  
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 1.5574077247  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 1.5574077247  
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: 1.5574077247  
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction integer_rot} {:instruction float_sin} {:instruction integer_yank} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction float_rot} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_yank float_cos 67.59641311186607 integer_rot float_sin integer_yank float_swap integer_div integer_fromfloat float_yank in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_yankdup integer_shove float_dec float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_yankdup integer_shove float_dec float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_mult float_shove integer_add float_rot in1 integer_sub float_max print_float)
Errors: [43.7631 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.617 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 30.6019 10 5.0 1 36.0 2 20.0 1 26.5519 12 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1045.6475
Mean: 20.91295
Genome size: 87
Size: 88
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2792.8013889999975
Median total errors in population: 1141.4064
Error averages by case: (108.25240189999933 10.843 84.80697819999992 3.902 138.777091 2.655 93.17885890000001 1.781 84.34974410000002 1.992 77.82140059999999 2.726 70.49564060000002 2.153 79.44101539999971 10.323 77.37219830000002 2.716 97.89230979999994 10.043 157.44255580000004 12.22 66.4243281 2.877 119.22507620000094 7.724 136.78412000000006 3.792 152.43695110000002 4.5 97.13855649999978 10.58 65.44458149999996 1.901 99.19358340000008 2.88 85.12441949999999 1.761 98.13116510000002 10.334 126.52690450000107 9.455 138.55758749999998 13.122 133.7265822 8.267 132.36208840000086 11.074 117.81025039999996 4.464)
Error minima by case: (15.977 7 2.6871 2 3.7641 1 25.2445 1 19.0 1 10.6798 2 0.8493 1 0.3242 7 5.0 1 15.7262 2 23.7687 10 3.0 2 24.0 2 25.0 2 68.5748 3 2.8158 7 0.4099 1 26.7773 2 19.0 1 10.9189 2 4.0 2 35.8302 10 3.0 1 4.1663 7 48.0 2)
Average genome size in population (length): 90.29
Average program size in population (points): 91.29
Average percent parens in population: 0.011
Minimum age in population: 78.14768433426711
Maximum age in population: 82.34746357850412
Average age in population: 80.40503377247371
Median age in population: 80.45324116192485
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 35
Genome diversity (% unique Plush genomes):	 0.856
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.856
Total error diversity:				 0.408
Error (vector) diversity:			 0.409
Behavioral diversity:				 0.409
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 92321904
--- Timings ---
Current time: 1529615251141 milliseconds
Total Time:         221.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        85.6 seconds, 38.6%
Fitness Testing:    108.8 seconds, 49.1%
Report:              27.3 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
;;******************************
;; -*- Number IO problem report - generation 56
Test total error for best: 47320.325799999955
Test mean error for best: 23.66016
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: -1.2422002421 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 3.105164448   
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -2.0328079067 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -2.4283902483 
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction integer_rot} {:instruction float_sin} {:instruction integer_yank} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction float_min} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_yank float_cos 67.59641311186607 integer_rot float_sin integer_yank float_swap integer_div integer_fromfloat float_yank in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod float_max float_yankdup integer_div in2 float_tan float_min in1 float_stackdepth integer_dec integer_yankdup integer_shove integer_dup_items float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_yankdup integer_shove float_dec float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [46.5627 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 4.0693 8 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 34.1921 9 5.0 1 36.0 2 20.0 1 22.5661 10 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1042.5038
Mean: 20.850077
Genome size: 87
Size: 88
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2422.9972910999995
Median total errors in population: 1138.0611999999999
Error averages by case: (92.34668539999913 10.811 69.63074129999995 4.018 126.1016434 2.566 79.90106850000001 1.661 70.64885530000001 1.839 63.96894559999999 2.615 57.11833290000001 2.067 63.73462969999969 10.103 62.196401899999984 2.562 81.16521089999979 9.946 144.18045890000002 12.169 53.5554142 2.739 105.74977840000076 8.068 125.08221870000001 3.729 136.591755 4.327 81.77008869999992 10.775 52.08291309999998 1.72 85.64082050000002 2.742 69.7913988 1.677 83.86507069999995 10.455 112.26425460000085 9.479 125.88271300000001 13.081 118.09176679999999 8.781 107.11651340000093 10.649 101.63261140000003 4.308)
Error minima by case: (15.977 8 6.5051 2 4.6757 1 30.0 1 20.0 1 13.0 2 0.8493 1 0.3242 7 6.0 1 2.3971 2 25.4927 10 4.0 2 1.3141 3 0.3141 3 87.0 3 2.8158 6 1.2879 1 29.5551 2 19.0 1 7.4566 2 21.3141 3 36.3563 8 22.3141 2 5.748 7 49.0 2)
Average genome size in population (length): 89.991
Average program size in population (points): 90.991
Average percent parens in population: 0.011
Minimum age in population: 79.14768433426711
Maximum age in population: 83.55792243241353
Average age in population: 81.8020303897379
Median age in population: 81.82937498282186
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 57
Genome diversity (% unique Plush genomes):	 0.857
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 57
Syntactic diversity (% unique Push programs):	 0.857
Total error diversity:				 0.422
Error (vector) diversity:			 0.424
Behavioral diversity:				 0.425
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 94571804
--- Timings ---
Current time: 1529615255978 milliseconds
Total Time:         226.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        87.2 seconds, 38.5%
Fitness Testing:    111.3 seconds, 49.1%
Report:              27.9 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
;;******************************
;; -*- Number IO problem report - generation 57
Test total error for best: 47320.325799999955
Test mean error for best: 23.66016
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: -1.2422002421 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 3.105164448   
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -2.0328079067 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -2.4283902483 
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction float_pop} {:instruction integer_min} {:instruction float_swap} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction integer_rot} {:instruction float_sin} {:instruction integer_yank} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction float_min} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot float_pop integer_min float_swap integer_rot integer_rot integer_yank float_cos 67.59641311186607 integer_rot float_sin integer_yank float_swap integer_div integer_fromfloat float_yank in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod float_max float_yankdup integer_div in2 float_tan float_min in1 float_stackdepth integer_dec integer_yankdup integer_shove integer_dup_items float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_yankdup integer_shove float_dec float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [46.5627 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 4.0693 8 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 34.1921 9 5.0 1 36.0 2 20.0 1 22.5661 10 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1042.5038
Mean: 20.850077
Genome size: 91
Size: 92
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2269.3460093999997
Median total errors in population: 1128.8165
Error averages by case: (86.72078549999897 10.903 64.84523099999991 3.683 121.2075142 2.513 74.8440584 1.586 65.58913400000004 1.82 58.8683872 2.556 51.604091900000014 2.077 58.1165966999996 9.929 56.12545809999999 2.261 74.71251899999973 9.871 139.42069240000004 12.168 48.80605740000001 2.757 96.40401440000096 8.508 118.16767610000004 3.571 132.0339898 4.106 76.64019599999975 10.678 47.112638699999984 1.712 80.63508610000004 2.707 65.4973419 1.595 76.61300960000005 10.748 103.88481150000108 10.019 121.1893866 13.08 109.9523848 9.469 91.02548850000083 10.122 96.77645959999998 4.114)
Error minima by case: (2.2976 6 1.0427 2 3.1183 1 25.2445 1 20.0 1 10.6798 2 0.8493 1 1.3136 7 6.0 1 14.3917 2 23.4867 10 0.2367 2 1.3141 3 0.3141 3 83.4997 3 2.8158 7 0.828 1 21.4273 2 19.0 1 18.1496 2 21.3141 3 36.3711 10 22.3141 2 5.748 7 48.6516 2)
Average genome size in population (length): 88.458
Average program size in population (points): 89.458
Average percent parens in population: 0.011
Minimum age in population: 80.54816861355808
Maximum age in population: 84.96350791664781
Average age in population: 83.16202067906299
Median age in population: 83.19682984156123
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 80
Genome diversity (% unique Plush genomes):	 0.816
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 80
Syntactic diversity (% unique Push programs):	 0.816
Total error diversity:				 0.364
Error (vector) diversity:			 0.364
Behavioral diversity:				 0.365
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 96783279
--- Timings ---
Current time: 1529615260482 milliseconds
Total Time:         231.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        88.7 seconds, 38.4%
Fitness Testing:    113.7 seconds, 49.2%
Report:              28.6 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
;;******************************
;; -*- Number IO problem report - generation 58
Test total error for best: 47320.325799999955
Test mean error for best: 23.66016
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: -1.2422002421 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 3.105164448   
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -2.0328079067 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -2.4283902483 
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction integer_rot} {:instruction float_sin} {:instruction integer_yank} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction float_min} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_yank float_cos 67.59641311186607 integer_rot float_sin integer_yank float_swap integer_div integer_fromfloat float_yank in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod float_max float_yankdup integer_div in2 float_tan float_min in1 float_stackdepth integer_dec integer_yankdup integer_shove integer_dup_items float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_yankdup integer_shove float_dec float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [46.5627 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 4.0693 8 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 34.1921 9 5.0 1 36.0 2 20.0 1 22.5661 10 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1042.5038
Mean: 20.850077
Genome size: 87
Size: 88
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2296.4046641000014
Median total errors in population: 1128.8152999999998
Error averages by case: (86.97605049999889 11.106 66.76859239999992 3.666 122.4935394 2.488 75.8958416 1.566 66.84038190000005 1.901 59.7362833 2.534 53.11328640000002 2.021 58.527430999999495 9.881 58.32084689999999 2.461 75.80342869999973 9.819 140.8650675 12.18 50.949218500000015 2.836 97.84370620000115 8.407 119.82964689999999 3.525 133.70618099999996 4.275 76.6061279999999 10.742 49.446646899999976 1.839 81.94134040000009 2.835 64.5888511 1.537 76.98176240000012 10.784 105.85338980000127 9.813 122.97080170000001 13.082 111.69522629999997 9.276 87.40206300000094 9.902 98.56295229999998 4.21)
Error minima by case: (6.327 9 5.7994 2 3.7832 1 25.2445 1 20.0 1 10.6798 2 0.8493 1 1.223 8 6.0 1 1.9339 2 26.5227 10 2.1552 2 40.1101 3 74.0 3 83.4997 3 2.7318 7 1.5534 1 21.1448 2 19.0 1 3.5708 2 43.6383 3 38.4215 10 51.2212 2 5.748 7 48.6516 2)
Average genome size in population (length): 87.609
Average program size in population (points): 88.609
Average percent parens in population: 0.011
Minimum age in population: 82.37887637143378
Maximum age in population: 86.45533405124215
Average age in population: 84.54637181053462
Median age in population: 84.5962384345274
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 72
Genome diversity (% unique Plush genomes):	 0.804
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 72
Syntactic diversity (% unique Push programs):	 0.804
Total error diversity:				 0.346
Error (vector) diversity:			 0.348
Behavioral diversity:				 0.349
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 98973504
--- Timings ---
Current time: 1529615265288 milliseconds
Total Time:         235.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        90.4 seconds, 38.4%
Fitness Testing:    116.0 seconds, 49.2%
Report:              29.2 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
;;******************************
;; -*- Number IO problem report - generation 59
Test total error for best: 47164.19039999997
Test mean error for best: 23.58210
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 1.9487828654  
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -0.5399685227 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction integer_rot} {:instruction float_sin} {:instruction integer_yank} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_yank float_cos 67.59641311186607 integer_rot float_sin integer_yank float_swap integer_div integer_fromfloat float_yank in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 float_stackdepth integer_dec integer_yankdup float_inc float_dec float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_yankdup integer_shove float_dec float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [43.3717 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 32.6993 10 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1032.8975999999998
Mean: 20.657951
Genome size: 82
Size: 83
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2088.6896940000015
Median total errors in population: 1126.5365
Error averages by case: (81.60089249999902 11.049 59.90249429999995 3.45 113.8172468 2.354 66.8220125 1.419 57.60930400000002 1.723 50.51657720000001 2.386 42.911651500000005 1.805 49.330381599999626 9.73 52.14009209999999 2.273 69.12544930000016 9.786 132.20499399999994 12.115 40.49154420000001 2.619 88.48511880000032 8.339 109.8645748 3.382 129.25233619999997 4.066 71.60999350000033 10.655 40.023880500000004 1.646 72.83437520000007 2.638 56.985149299999996 1.42 68.3324537999996 10.855 96.8218995000006 9.686 114.00103480000001 13.039 102.12949969999998 9.254 79.54426030000029 9.677 92.95747760000003 4.009)
Error minima by case: (6.327 9 3.3184 2 3.1183 1 25.2445 1 20.0 1 10.6798 2 0.8493 1 1.647 8 6.0 1 0.2226 2 27.0501 11 4.0 2 39.1101 3 25.0 2 87.0 3 0.6019 5 0.828 1 28.358 2 19.0 1 5.547 2 4.0 2 38.1742 12 3.0 1 5.748 7 49.0 2)
Average genome size in population (length): 87.501
Average program size in population (points): 88.501
Average percent parens in population: 0.011
Minimum age in population: 83.65841973373668
Maximum age in population: 88.05349564204214
Average age in population: 85.91406325119556
Median age in population: 85.93435778527018
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 48
Genome diversity (% unique Plush genomes):	 0.806
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.806
Total error diversity:				 0.329
Error (vector) diversity:			 0.329
Behavioral diversity:				 0.33
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 101161029
--- Timings ---
Current time: 1529615269682 milliseconds
Total Time:         240.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        91.9 seconds, 38.2%
Fitness Testing:    118.4 seconds, 49.2%
Report:              29.9 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
;;******************************
;; -*- Number IO problem report - generation 60
Test total error for best: 47164.19039999997
Test mean error for best: 23.58210
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 1.9487828654  
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -0.5399685227 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 68.0836706867208} {:instruction integer_rot} {:instruction float_sin} {:instruction integer_yank} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_yank float_cos 68.0836706867208 integer_rot float_sin integer_yank float_swap integer_div integer_fromfloat float_yank in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 float_stackdepth integer_dec integer_yankdup float_inc float_dec float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_yankdup integer_shove float_dec float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [43.3717 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 32.6993 10 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1032.8975999999998
Mean: 20.657951
Genome size: 82
Size: 83
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2280.4583432000018
Median total errors in population: 1124.72955
Error averages by case: (87.08964159999911 11.07 66.66889819999992 3.631 123.549382 2.47 76.90561629999999 1.543 66.78068390000003 1.833 60.72405159999999 2.509 51.84825680000002 2.036 57.14993029999956 9.792 57.357941 2.35 75.18872909999985 9.857 140.81508699999998 12.173 47.01209770000001 2.777 96.67910130000085 8.51 118.39204860000001 3.447 134.23226179999997 4.19 76.79165570000002 10.747 46.557985999999985 1.774 81.98412710000008 2.769 65.3749095 1.538 75.32680469999981 10.718 104.44342630000097 10.001 123.7190816 13.073 110.04397499999997 9.517 84.58646570000062 9.73 99.03318439999997 4.148)
Error minima by case: (13.1088 8 6.5051 2 70.0102 1 25.2445 1 20.0 1 10.6798 2 5.0 1 0.4231 7 6.0 1 14.3917 2 98.0 11 4.0 2 1.3141 3 0.3141 3 87.0 3 10.0642 7 5.0 1 36.0 2 17.3621 1 11.5036 2 21.3141 3 78.0 11 22.3141 2 2.9379 7 49.0 2)
Average genome size in population (length): 87.957
Average program size in population (points): 88.957
Average percent parens in population: 0.011
Minimum age in population: 84.86945706776
Maximum age in population: 89.463425875872
Average age in population: 87.21550235500466
Median age in population: 87.25790464040045
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.813
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.813
Total error diversity:				 0.348
Error (vector) diversity:			 0.348
Behavioral diversity:				 0.348
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 103359954
--- Timings ---
Current time: 1529615274514 milliseconds
Total Time:         245.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        93.6 seconds, 38.2%
Fitness Testing:    120.9 seconds, 49.3%
Report:              30.5 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
;;******************************
;; -*- Number IO problem report - generation 61
Test total error for best: 47164.19039999997
Test mean error for best: 23.58210
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 1.9487828654  
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -0.5399685227 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction integer_rot} {:instruction float_sin} {:instruction integer_yank} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_yank float_cos 67.59641311186607 integer_rot float_sin integer_yank float_swap integer_div integer_fromfloat float_yank in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 float_stackdepth integer_dec integer_yankdup float_inc float_dec float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_yankdup integer_shove float_dec float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [43.3717 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 32.6993 10 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1032.8975999999998
Mean: 20.657951
Genome size: 82
Size: 83
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2065.6966226000036
Median total errors in population: 1125.1925499999998
Error averages by case: (79.09223469999944 11.087 60.50233329999996 3.42 114.5166828 2.369 67.4766859 1.422 58.31017630000004 1.771 51.156629 2.394 43.16230690000001 1.841 47.8340298999998 9.67 48.91228819999999 2.156 68.1172304000002 9.675 132.884659 12.137 39.75559220000002 2.666 87.49946980000054 8.268 108.66110619999999 3.341 125.44231699999996 4.016 70.84825670000035 10.598 38.6554433 1.699 73.54421870000006 2.681 57.0093991 1.418 67.12256799999943 10.321 95.82869980000079 9.651 114.7959407 13.058 100.96907479999997 9.26 74.19205700000033 9.553 90.95022290000001 3.985)
Error minima by case: (12.4248 7 6.5051 2 4.6726 1 25.2445 1 20.0 1 10.6798 2 2.4484 1 1.1477 6 6.0 1 20.7091 2 25.814 12 4.0 2 24.0 2 25.0 2 87.0 3 8.173 7 2.3854 1 30.0617 2 19.0 1 8.7739 2 4.0 2 36.6281 12 3.0 1 4.1663 7 49.0 2)
Average genome size in population (length): 88.512
Average program size in population (points): 89.512
Average percent parens in population: 0.011
Minimum age in population: 86.05969954519674
Maximum age in population: 90.87076193731886
Average age in population: 88.67253691710962
Median age in population: 88.72875276007925
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.818
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.818
Total error diversity:				 0.356
Error (vector) diversity:			 0.359
Behavioral diversity:				 0.359
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 105572754
--- Timings ---
Current time: 1529615278948 milliseconds
Total Time:         249.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        95.1 seconds, 38.1%
Fitness Testing:    123.2 seconds, 49.4%
Report:              31.2 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
;;******************************
;; -*- Number IO problem report - generation 62
Test total error for best: 47164.19039999997
Test mean error for best: 23.58210
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 1.9487828654  
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -0.5399685227 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction float_tan} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction integer_rot} {:instruction float_sin} {:instruction integer_yank} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction in2} {:instruction float_dup_items} {:instruction integer_dec} {:instruction integer_yank} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot float_tan integer_yank float_cos 67.59641311186607 integer_rot float_sin integer_yank float_swap integer_div integer_fromfloat float_yank in2 float_dup_items integer_dec integer_yank float_swap integer_dup_times integer_fromfloat float_yank in2 float_tan float_frominteger float_swap integer_div integer_fromfloat float_yank in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 float_stackdepth integer_dec integer_yankdup float_inc float_dec float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_yankdup integer_shove float_dec float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [43.3717 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 32.6993 10 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1032.8975999999998
Mean: 20.657951
Genome size: 97
Size: 98
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2439.9810678000013
Median total errors in population: 1130.14545
Error averages by case: (95.76385509999946 11.112 74.20681539999997 3.642 127.8770451 2.536 81.7601555 1.626 72.69075200000005 1.935 65.75839900000001 2.593 60.128371500000014 2.127 64.38310810000007 9.638 61.2540385 2.352 82.42777349999972 9.639 145.91153679999996 12.154 54.45575830000002 2.84 105.78628680000087 8.348 126.41551010000002 3.576 136.25719569999995 4.201 83.36689079999998 10.559 51.99137849999998 1.817 87.63976620000007 2.839 72.4630085 1.599 81.46808029999914 9.876 113.86290550000098 9.552 127.94161790000001 13.073 119.11279859999999 9.298 95.19937550000093 9.81 100.94364460000006 4.173)
Error minima by case: (6.327 8 3.6156 2 3.8485 1 25.2445 1 20.0 1 10.6798 2 5.0 1 0.0876 7 6.0 1 7.481 2 6.3424 10 4.0 2 1.3141 3 0.3141 3 87.0 3 3.1421 7 3.384 1 30.914 2 19.0 1 1.8967 2 21.3141 3 17.4665 12 22.3141 2 6.748 8 49.0 2)
Average genome size in population (length): 88.243
Average program size in population (points): 89.243
Average percent parens in population: 0.011
Minimum age in population: 87.9694702203097
Maximum age in population: 91.84695082088186
Average age in population: 90.00812390931972
Median age in population: 90.05609604038601
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 36
Genome diversity (% unique Plush genomes):	 0.83
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.83
Total error diversity:				 0.375
Error (vector) diversity:			 0.375
Behavioral diversity:				 0.375
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 107778829
--- Timings ---
Current time: 1529615283927 milliseconds
Total Time:         254.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        96.7 seconds, 38.0%
Fitness Testing:    125.8 seconds, 49.5%
Report:              31.8 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
;;******************************
;; -*- Number IO problem report - generation 63
Test total error for best: 47164.19039999997
Test mean error for best: 23.58210
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 1.9487828654  
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -0.5399685227 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_dup_items} {:instruction integer_dec} {:instruction integer_yank} {:instruction float_swap} {:instruction float_add} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_rot integer_yank float_cos 67.59641311186607 float_dup_items integer_dec integer_yank float_swap float_add integer_fromfloat float_yank in2 float_tan float_frominteger float_swap integer_div integer_fromfloat float_yank in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 float_stackdepth integer_dec integer_yankdup float_inc float_dec float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_yankdup integer_shove float_dec float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [43.3717 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 32.6993 10 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1032.8975999999998
Mean: 20.657951
Genome size: 90
Size: 91
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2162.0501787999997
Median total errors in population: 1124.1948499999999
Error averages by case: (86.50530859999995 11.073 63.96736309999995 3.584 116.9541444 2.433 70.1551195 1.511 60.879274900000055 1.752 53.917100899999994 2.472 46.73638040000002 1.9 54.744308400000186 9.606 50.98868829999999 2.226 71.857095 9.499 135.24738920000001 12.111 43.44758460000002 2.648 93.17704410000087 8.283 113.983102 3.456 127.11790139999998 4.069 74.28546709999999 10.451 42.83704529999997 1.669 76.10000710000006 2.684 60.570621 1.494 69.48186989999923 9.798 102.35501020000098 9.497 117.0012246 13.029 107.09829609999998 9.15 83.30522410000067 9.724 91.16060860000005 4.058)
Error minima by case: (11.0001 8 13.5919 2 4.6757 1 25.2445 1 20.0 1 10.6798 2 0.2803 1 1.223 7 6.0 1 6.3136 2 24.5239 10 4.0 2 1.3141 3 0.3141 3 87.0 3 3.3848 8 1.9338 1 29.9154 2 19.0 1 13.5586 2 21.3141 3 35.7604 11 22.3141 2 3.7661 7 49.0 2)
Average genome size in population (length): 88.212
Average program size in population (points): 89.212
Average percent parens in population: 0.011
Minimum age in population: 89.24410743852349
Maximum age in population: 93.36917086634016
Average age in population: 91.28722976825185
Median age in population: 91.32255895157412
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 37
Genome diversity (% unique Plush genomes):	 0.821
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 37
Syntactic diversity (% unique Push programs):	 0.821
Total error diversity:				 0.368
Error (vector) diversity:			 0.368
Behavioral diversity:				 0.369
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 109984129
--- Timings ---
Current time: 1529615288320 milliseconds
Total Time:         259.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        98.1 seconds, 37.9%
Fitness Testing:    128.1 seconds, 49.5%
Report:              32.6 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 64
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 64
;;******************************
;; -*- Number IO problem report - generation 64
Test total error for best: 47126.249299999974
Test mean error for best: 23.56312
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 1.9487828654  
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 0.552670397   
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_mult} {:instruction float_sin} {:instruction integer_yank} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_yank float_cos 67.59641311186607 float_cos 67.59641311186607 float_mult float_sin integer_yank float_swap integer_div integer_fromfloat float_yank in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 float_stackdepth integer_dec integer_yankdup float_inc float_dec float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [43.3717 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 31.6066 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1030.8048999999999
Mean: 20.616098
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2162.966173600001
Median total errors in population: 1129.4929
Error averages by case: (84.3436402000004 11.144 60.602694199999945 3.571 116.62689089999999 2.42 69.92163169999999 1.487 60.81385040000005 1.866 53.7151778 2.452 48.400815900000026 1.964 54.075302999999984 9.796 52.31476759999999 2.335 71.16102669999998 9.465 134.94431769999994 12.134 46.55474460000002 2.767 92.66066360000072 8.21 113.19502270000001 3.432 128.27476829999998 4.165 73.44222079999982 10.702 46.45841699999997 1.765 75.91992870000007 2.758 60.6251527 1.499 68.6232465999994 9.85 101.95647470000097 9.406 116.94714590000001 13.053 106.54469049999997 9.082 83.23135980000066 9.809 92.35522160000008 4.125)
Error minima by case: (6.327 8 8.0366 2 2.6757 1 25.2445 1 20.0 1 10.6798 2 5.0 1 0.1902 7 6.0 1 16.46 2 24.5239 10 4.0 2 39.1101 3 25.0 2 87.0 3 18.8073 7 0.3854 1 27.9154 2 19.0 1 13.3778 2 42.6383 3 35.7604 11 48.7788 2 6.748 7 49.0 2)
Average genome size in population (length): 87.295
Average program size in population (points): 88.295
Average percent parens in population: 0.011
Minimum age in population: 90.26942820847412
Maximum age in population: 94.57486217384314
Average age in population: 92.67325594854324
Median age in population: 92.73226759472156
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.832
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.832
Total error diversity:				 0.366
Error (vector) diversity:			 0.367
Behavioral diversity:				 0.367
--- Run Statistics ---
Number of program evaluations used so far: 65000
Number of point (instruction) evaluations so far: 112166504
--- Timings ---
Current time: 1529615292935 milliseconds
Total Time:         263.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        99.6 seconds, 37.8%
Fitness Testing:    130.7 seconds, 49.6%
Report:              33.2 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 65
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 65
;;******************************
;; -*- Number IO problem report - generation 65
Test total error for best: 47126.249299999974
Test mean error for best: 23.56312
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 1.9487828654  
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 0.552670397   
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_mult} {:instruction float_sin} {:instruction integer_yank} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_yank float_cos 67.59641311186607 float_cos 67.59641311186607 float_mult float_sin integer_yank float_swap integer_div integer_fromfloat in2 in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 float_stackdepth integer_dec integer_yankdup float_inc float_dec float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [43.3717 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 31.6066 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1030.8048999999999
Mean: 20.616098
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2382.3052744000033
Median total errors in population: 1124.38655
Error averages by case: (91.38527500000077 11.194 67.59670149999995 3.653 125.86876600000001 2.539 79.88972580000001 1.654 70.74615590000005 1.907 63.92631529999999 2.599 56.799503500000014 2.091 63.02605739999982 9.882 61.058747000000004 2.45 81.0017415999996 9.304 143.962664 12.132 53.2319278 2.815 101.52409880000097 8.403 122.66940560000002 3.588 136.93280359999994 4.251 83.85353939999935 10.861 51.60495299999998 1.842 85.69952150000006 2.834 68.66174419999999 1.623 78.83284759999967 9.851 110.48749000000113 9.611 126.05527969999999 13.044 115.27980499999998 9.249 88.94855380000074 9.773 101.89165140000004 4.22)
Error minima by case: (13.6795 8 0.3541 2 3.1183 1 25.2445 1 20.0 1 10.6798 2 2.4484 1 1.223 7 6.0 1 12.8094 2 24.5239 9 4.0 2 1.3141 3 0.3141 3 40.3219 3 3.9938 8 0.828 1 28.257 2 19.0 1 13.5586 2 21.3141 3 35.404 8 22.3141 2 4.1663 7 3.9016 2)
Average genome size in population (length): 86.669
Average program size in population (points): 87.669
Average percent parens in population: 0.011
Minimum age in population: 91.32252351067207
Maximum age in population: 96.40148737372039
Average age in population: 94.03080076199937
Median age in population: 94.05110014203547
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.811
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.811
Total error diversity:				 0.334
Error (vector) diversity:			 0.335
Behavioral diversity:				 0.335
--- Run Statistics ---
Number of program evaluations used so far: 66000
Number of point (instruction) evaluations so far: 114333279
--- Timings ---
Current time: 1529615297390 milliseconds
Total Time:         268.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       101.2 seconds, 37.7%
Fitness Testing:    133.1 seconds, 49.6%
Report:              33.7 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 65
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 66
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 66
;;******************************
;; -*- Number IO problem report - generation 66
Test total error for best: 47126.249299999974
Test mean error for best: 23.56312
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 1.9487828654  
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 0.552670397   
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_mult} {:instruction float_sin} {:instruction integer_yank} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_mult integer_yank float_cos 67.59641311186607 float_mult float_sin integer_yank float_swap integer_div integer_fromfloat float_yank in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 float_stackdepth integer_dec integer_yankdup float_inc float_dec float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [43.3717 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 31.6066 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1030.8048999999999
Mean: 20.616098
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2340.226260400003
Median total errors in population: 1123.23405
Error averages by case: (90.85296630000092 11.177 66.89735289999992 3.866 124.2265105 2.518 77.82932040000001 1.633 68.90091880000006 2.014 61.73519100000001 2.586 55.28619760000003 2.198 61.236070099999715 9.919 61.34750029999998 2.72 77.90047659999954 9.466 142.43995399999997 12.15 52.65601270000002 2.937 98.33054130000103 8.479 119.78544310000001 3.543 136.4100974 4.494 80.54183169999928 10.858 51.087630399999966 1.928 83.90873790000009 2.914 66.52627249999999 1.611 75.9600889999997 10.021 106.54789920000135 9.833 124.9450349 13.05 111.71065409999997 9.447 88.095939800001 9.79 101.45361790000007 4.462)
Error minima by case: (14.5772 8 10.7902 2 3.1183 1 25.2445 1 19.0 1 10.6798 2 5.0 1 0.8858 6 5.6597 1 0.22 2 25.4927 11 4.0 2 1.3141 3 0.3141 3 86.1788 3 11.1837 7 0.828 1 28.358 2 16.4984 1 6.1416 2 21.3141 3 36.6168 11 22.3141 2 4.023 8 48.9835 2)
Average genome size in population (length): 86.445
Average program size in population (points): 87.445
Average percent parens in population: 0.012
Minimum age in population: 92.32252351067207
Maximum age in population: 97.46618262016194
Average age in population: 95.40730958693803
Median age in population: 95.43790229502228
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.82
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.82
Total error diversity:				 0.315
Error (vector) diversity:			 0.317
Behavioral diversity:				 0.318
--- Run Statistics ---
Number of program evaluations used so far: 67000
Number of point (instruction) evaluations so far: 116494404
--- Timings ---
Current time: 1529615302141 milliseconds
Total Time:         272.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       102.8 seconds, 37.7%
Fitness Testing:    135.6 seconds, 49.7%
Report:              34.3 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 66
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 67
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 67
;;******************************
;; -*- Number IO problem report - generation 67
Test total error for best: 47126.249299999974
Test mean error for best: 23.56312
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 1.9487828654  
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 0.552670397   
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_mult} {:instruction float_sin} {:instruction integer_yank} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_yank float_cos 67.59641311186607 float_cos 67.59641311186607 float_mult float_sin integer_yank float_swap integer_div integer_fromfloat in2 in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 float_stackdepth integer_dec integer_yankdup float_inc float_dec float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [43.3717 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 31.6066 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1030.8048999999999
Mean: 20.616098
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2463.9125271000025
Median total errors in population: 1127.2237499999999
Error averages by case: (96.5087003000009 11.213 72.93787859999995 3.667 127.97126340000003 2.558 81.85815690000001 1.656 72.91986050000001 2.032 65.85753719999998 2.607 59.892825100000024 2.158 67.46209609999971 9.969 65.05017750000002 2.536 84.10067969999955 9.427 146.00228130000008 12.177 58.1047017 2.935 103.3169173000009 8.483 124.61371550000001 3.595 141.39779639999995 4.326 86.25861149999939 10.902 57.01842019999997 1.967 87.82106330000008 2.93 72.49877260000001 1.65 80.1158669999997 9.904 112.83411750000103 9.721 128.475741 13.079 116.74738149999997 9.404 94.20476170000099 9.789 106.95320330000007 4.305)
Error minima by case: (5.611 8 13.7678 2 3.1183 1 25.2445 1 20.0 1 10.4209 2 0.3235 1 0.025 5 6.0 1 20.7197 2 24.3843 11 2.1268 2 24.0 2 25.0 2 87.0 3 12.8586 7 0.828 1 28.358 2 19.0 1 13.5586 2 4.0 2 36.3759 10 3.0 1 6.748 7 49.0 3)
Average genome size in population (length): 86.021
Average program size in population (points): 87.021
Average percent parens in population: 0.012
Minimum age in population: 93.32252351067207
Maximum age in population: 99.03990449395435
Average age in population: 96.76696520285861
Median age in population: 96.8080631722579
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.832
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.832
Total error diversity:				 0.3
Error (vector) diversity:			 0.301
Behavioral diversity:				 0.302
--- Run Statistics ---
Number of program evaluations used so far: 68000
Number of point (instruction) evaluations so far: 118644929
--- Timings ---
Current time: 1529615306545 milliseconds
Total Time:         277.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       104.3 seconds, 37.6%
Fitness Testing:    137.9 seconds, 49.7%
Report:              34.9 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 67
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 68
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 68
;;******************************
;; -*- Number IO problem report - generation 68
Test total error for best: 47126.249299999974
Test mean error for best: 23.56312
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 1.9487828654  
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 0.552670397   
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_mult} {:instruction float_sin} {:instruction integer_yank} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_yank float_cos 67.59641311186607 float_cos 67.59641311186607 float_mult float_sin integer_yank float_swap integer_div integer_fromfloat in2 in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 float_stackdepth integer_dec integer_yankdup float_inc float_dec float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [43.3717 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 31.6066 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1030.8048999999999
Mean: 20.616098
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2469.426956400005
Median total errors in population: 1113.1482999999998
Error averages by case: (96.20723890000102 11.19 70.85264329999993 3.849 129.7774024 2.562 83.4851053 1.664 74.53009500000003 2.003 67.4274112 2.618 60.643032900000016 2.101 68.03439279999971 9.926 63.718789399999984 2.568 83.69827329999961 9.573 147.84751580000005 12.176 58.186283499999995 2.867 104.23744070000082 8.587 125.75946900000001 3.557 139.5185719999999 4.351 86.0201091999996 10.793 57.01064249999996 1.89 89.50365460000008 2.89 73.6641109 1.657 79.97351929999947 10.149 112.73784230000119 9.863 130.1591771 13.077 117.71876299999998 9.522 91.06150530000072 9.705 104.18796670000005 4.328)
Error minima by case: (17.012 7 3.6156 2 70.0102 1 25.2445 1 19.0 1 10.6798 2 5.0 1 0.8858 7 5.0 1 7.481 2 97.0 11 3.0 2 1.3141 3 0.3141 3 83.4997 3 13.4574 8 4.0 1 35.0 2 19.0 1 0.3141 2 21.3141 2 77.0 11 22.3141 2 5.748 8 48.0 2)
Average genome size in population (length): 84.668
Average program size in population (points): 85.668
Average percent parens in population: 0.012
Minimum age in population: 94.32252351067207
Maximum age in population: 100.0642001881778
Average age in population: 98.13163323845762
Median age in population: 98.17064414076113
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.844
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.844
Total error diversity:				 0.309
Error (vector) diversity:			 0.309
Behavioral diversity:				 0.309
--- Run Statistics ---
Number of program evaluations used so far: 69000
Number of point (instruction) evaluations so far: 120761629
--- Timings ---
Current time: 1529615311120 milliseconds
Total Time:         281.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       106.1 seconds, 37.6%
Fitness Testing:    140.2 seconds, 49.7%
Report:              35.5 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 68
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 69
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 69
;;******************************
;; -*- Number IO problem report - generation 69
Test total error for best: 47126.249299999974
Test mean error for best: 23.56312
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 1.9487828654  
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 0.552670397   
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction float_dup} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_mult} {:instruction float_sin} {:instruction integer_yank} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot float_dup integer_yank float_cos 67.59641311186607 float_cos 67.59641311186607 float_mult float_sin integer_yank float_swap integer_div integer_fromfloat float_yank in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 float_stackdepth integer_dec integer_yankdup float_inc float_dec float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [43.3717 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 31.6066 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1030.8048999999999
Mean: 20.616098
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2265.1078626000017
Median total errors in population: 1112.4929499999998
Error averages by case: (87.43466350000088 11.159 63.02765739999997 3.534 121.82789750000002 2.442 75.0661379 1.511 65.94778880000003 1.843 59.0124 2.484 50.71811320000002 1.971 60.71506739999966 9.844 57.884115399999985 2.346 75.42846599999989 9.444 140.70375220000003 12.139 47.973074800000006 2.788 95.97503330000069 8.61 118.1519632 3.463 133.35324139999992 4.196 78.64069899999964 10.534 44.13044279999998 1.794 81.07533120000006 2.794 65.3681757 1.518 71.43895559999939 10.016 104.17371560000093 9.955 123.01865020000001 13.041 109.34412409999997 9.614 84.93052260000071 9.653 98.87687380000003 4.198)
Error minima by case: (1.9188 8 2.0467 2 3.1183 1 25.2445 1 12.015 1 10.6798 2 5.0 1 1.223 8 6.0 1 7.9534 2 27.0501 10 2.9748 2 39.1101 3 75.0 3 87.0 3 12.9037 7 0.828 1 28.358 2 19.0 1 13.5586 2 42.6383 2 38.1742 11 50.2212 2 6.748 7 49.0 2)
Average genome size in population (length): 82.431
Average program size in population (points): 83.431
Average percent parens in population: 0.012
Minimum age in population: 96.80284459045794
Maximum age in population: 101.6492963860006
Average age in population: 99.47974504163975
Median age in population: 99.51258029319946
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.806
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.806
Total error diversity:				 0.316
Error (vector) diversity:			 0.316
Behavioral diversity:				 0.317
--- Run Statistics ---
Number of program evaluations used so far: 70000
Number of point (instruction) evaluations so far: 122822404
--- Timings ---
Current time: 1529615315891 milliseconds
Total Time:         286.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       107.6 seconds, 37.5%
Fitness Testing:    142.8 seconds, 49.8%
Report:              36.0 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 69
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 70
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 70
;;******************************
;; -*- Number IO problem report - generation 70
Test total error for best: 47126.249299999974
Test mean error for best: 23.56312
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 1.9487828654  
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 0.552670397   
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction integer_rot} {:instruction float_sin} {:instruction integer_yank} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction in2} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_yank float_cos 67.59641311186607 integer_rot float_sin integer_yank float_swap integer_div integer_fromfloat float_yank in2 integer_div integer_fromfloat float_yank in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 float_stackdepth integer_dec integer_yankdup float_inc float_dec float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [43.3717 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 31.6066 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1030.8048999999999
Mean: 20.616098
Genome size: 80
Size: 81
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2132.0728557999983
Median total errors in population: 1067.0537
Error averages by case: (84.58800970000101 11.181 59.12890109999997 3.422 115.905887 2.439 69.14809770000001 1.512 59.94338270000003 1.808 52.9528336 2.473 45.443697700000016 1.863 54.497024199999686 9.856 51.59104479999999 2.328 72.83628969999981 9.529 134.22426639999998 12.151 43.18319990000002 2.706 89.63030750000085 8.75 112.4638012 3.452 129.33423000000002 4.145 73.34172509999966 10.437 42.10445199999999 1.719 75.08335930000007 2.692 59.6398597 1.487 67.70190639999922 10.112 98.02793680000093 10.032 116.0192928 13.076 103.18231089999996 9.73 77.53536280000061 9.604 93.96167680000005 4.1)
Error minima by case: (7.327 8 15.3452 2 3.7832 1 25.2445 1 20.0 1 10.6798 2 5.0 1 1.647 8 6.0 1 4.7497 2 24.5239 10 2.1552 2 39.1101 3 0.3074 3 87.0 3 3.9938 8 0.4099 1 28.7823 2 19.0 1 11.837 2 42.6383 3 35.7604 11 39.8917 2 5.748 8 49.0 2)
Average genome size in population (length): 80.016
Average program size in population (points): 81.016
Average percent parens in population: 0.012
Minimum age in population: 98.595565158827
Maximum age in population: 102.790516291011
Average age in population: 100.8878961859634
Median age in population: 100.935423028635
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.788
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.788
Total error diversity:				 0.272
Error (vector) diversity:			 0.274
Behavioral diversity:				 0.275
--- Run Statistics ---
Number of program evaluations used so far: 71000
Number of point (instruction) evaluations so far: 124822829
--- Timings ---
Current time: 1529615320173 milliseconds
Total Time:         290.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       109.1 seconds, 37.5%
Fitness Testing:    145.1 seconds, 49.9%
Report:              36.6 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 70
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 71
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 71
;;******************************
;; -*- Number IO problem report - generation 71
Test total error for best: 47126.249299999974
Test mean error for best: 23.56312
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 1.9487828654  
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 0.552670397   
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_mult} {:instruction float_sin} {:instruction integer_yank} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_yank float_cos 67.59641311186607 float_cos 67.59641311186607 float_mult float_sin integer_yank float_swap integer_div integer_fromfloat float_yank in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 float_stackdepth integer_dec integer_yankdup float_inc float_dec float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [43.3717 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 31.6066 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1030.8048999999999
Mean: 20.616098
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2137.3061316999974
Median total errors in population: 1067.0537
Error averages by case: (83.71640390000105 11.181 57.12605879999994 3.593 116.7577217 2.448 70.0522531 1.557 60.869319300000036 1.864 53.8463825 2.506 47.44893200000002 1.962 53.60915449999961 9.779 52.0072927 2.385 70.63866290000003 9.57 134.98738009999997 12.11 45.331721500000015 2.764 90.37681230000072 8.722 113.20736350000003 3.495 127.65579210000006 4.215 71.81388839999961 10.301 44.93852289999999 1.795 76.03263120000008 2.787 60.61625049999999 1.55 65.47201469999916 10.23 98.38950790000098 10.1 117.0042705 13.019 103.61417139999996 9.784 77.63541960000066 9.496 92.74520370000008 4.2)
Error minima by case: (13.6795 8 9.6639 2 3.1183 1 25.2445 1 20.0 1 10.6798 2 5.0 1 0.5942 8 6.0 1 1.0 1 21.7512 9 4.0 2 1.3141 3 0.3141 3 87.0 3 1.2592 8 0.4099 1 28.358 2 11.8405 1 7.2866 2 21.3141 3 32.8753 9 22.3141 2 6.748 8 49.0 2)
Average genome size in population (length): 79.547
Average program size in population (points): 80.547
Average percent parens in population: 0.012
Minimum age in population: 99.69272524754497
Maximum age in population: 104.2946368321834
Average age in population: 102.2826485946005
Median age in population: 102.3388211011926
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.804
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.804
Total error diversity:				 0.279
Error (vector) diversity:			 0.281
Behavioral diversity:				 0.281
--- Run Statistics ---
Number of program evaluations used so far: 72000
Number of point (instruction) evaluations so far: 126811529
--- Timings ---
Current time: 1529615324356 milliseconds
Total Time:         295.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       110.5 seconds, 37.5%
Fitness Testing:    147.3 seconds, 49.9%
Report:              37.2 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 71
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 72
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 72
;;******************************
;; -*- Number IO problem report - generation 72
Test total error for best: 47126.249299999974
Test mean error for best: 23.56312
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 1.9487828654  
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 0.552670397   
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 68.0836706867208} {:instruction integer_rot} {:instruction float_mult} {:instruction float_sin} {:instruction integer_yank} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction tagged_189} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_swap} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_yank float_cos 68.0836706867208 integer_rot float_mult float_sin integer_yank float_swap integer_div integer_fromfloat float_yank in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup float_rot float_tan integer_shove in1 integer_pop integer_dec float_mult float_dec float_mod integer_shove in1 float_stackdepth integer_dec integer_yankdup float_inc float_dec float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_yankdup integer_shove tagged_189 float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_swap float_max print_float)
Errors: [43.3717 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 31.6066 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1030.8048999999999
Mean: 20.616098
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2287.9556461999964
Median total errors in population: 1059.0014999999999
Error averages by case: (90.467089000001 11.214 66.79901369999997 3.621 122.8211648 2.52 75.2566085 1.589 66.14762390000004 1.902 59.1768286 2.561 53.17572890000002 2.075 60.64877839999972 9.898 59.0988379 2.321 77.95849909999984 9.493 140.11678299999997 12.189 50.6996412 2.796 95.22740660000079 8.685 117.58107540000002 3.518 134.7152059 4.104 79.2235998999996 10.384 49.915119599999976 1.812 81.25406400000006 2.794 65.0553655 1.562 73.7454841999996 10.057 103.59285430000097 10.002 122.0950024 13.104 108.90087059999998 9.619 83.20779830000063 9.622 99.53920250000004 4.094)
Error minima by case: (13.3717 9 9.5595 2 5.0867 1 25.2445 1 20.0 1 10.6798 2 5.0 1 0.845 7 6.0 1 16.0225 2 24.8315 11 4.0 2 1.3141 2 0.3141 2 87.0 3 1.6066 8 1.9338 1 30.5765 2 11.8405 1 13.5586 2 4.0 2 35.9556 10 3.0 1 6.748 8 49.0 2)
Average genome size in population (length): 79.963
Average program size in population (points): 80.963
Average percent parens in population: 0.012
Minimum age in population: 100.8492116370769
Maximum age in population: 105.7279603970059
Average age in population: 103.6795552284647
Median age in population: 103.7218842609104
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.827
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.827
Total error diversity:				 0.268
Error (vector) diversity:			 0.269
Behavioral diversity:				 0.269
--- Run Statistics ---
Number of program evaluations used so far: 73000
Number of point (instruction) evaluations so far: 128810604
--- Timings ---
Current time: 1529615328639 milliseconds
Total Time:         299.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       112.1 seconds, 37.4%
Fitness Testing:    149.5 seconds, 49.9%
Report:              37.7 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 72
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 73
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 73
;;******************************
;; -*- Number IO problem report - generation 73
Test total error for best: 47126.249299999974
Test mean error for best: 23.56312
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 1.9487828654  
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 0.552670397   
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_mult} {:instruction float_sin} {:instruction integer_yank} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction tagged_502} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (float_frominteger integer_rot integer_yank float_cos 67.59641311186607 float_cos 67.59641311186607 float_mult float_sin integer_yank float_swap integer_div integer_fromfloat in2 tagged_502 float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 float_stackdepth integer_dec integer_yankdup float_inc float_dec float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_mult float_shove integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [43.3717 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 31.6066 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1030.8048999999999
Mean: 20.616098
Genome size: 87
Size: 88
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2489.9519210999983
Median total errors in population: 1067.0537
Error averages by case: (97.51535430000118 11.214 74.13216759999993 3.756 129.9206754 2.579 83.90183019999999 1.668 74.89551070000003 1.996 67.93420439999998 2.615 61.60665030000002 2.141 67.7503233999997 9.846 66.8461527 2.547 84.90460169999946 9.549 147.96809860000002 12.177 59.209554800000014 2.904 104.51705910000098 8.655 126.18250789999999 3.587 141.50065489999997 4.337 86.50286499999952 10.36 58.04779629999997 1.858 89.79611370000008 2.885 74.62065559999999 1.655 79.7468980999996 10.162 112.60867530000128 10.0 130.21843570000001 13.096 117.55456619999997 9.679 92.07695720000096 9.629 106.78361200000005 4.315)
Error minima by case: (13.1404 7 14.4502 2 3.3138 2 25.2445 1 20.0 1 10.6798 2 6.0 1 1.647 8 6.0 1 13.1651 2 25.4927 10 4.0 2 40.1101 3 74.684 3 87.0 3 3.9938 8 1.1324 1 27.9783 2 20.0 1 13.5586 2 43.6383 3 35.9103 10 51.2212 2 6.748 8 49.0 3)
Average genome size in population (length): 79.953
Average program size in population (points): 80.953
Average percent parens in population: 0.012
Minimum age in population: 102.2012631509777
Maximum age in population: 107.2179824093895
Average age in population: 105.0477030354525
Median age in population: 105.0985388731837
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.831
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.831
Total error diversity:				 0.268
Error (vector) diversity:			 0.269
Behavioral diversity:				 0.269
--- Run Statistics ---
Number of program evaluations used so far: 74000
Number of point (instruction) evaluations so far: 130809429
--- Timings ---
Current time: 1529615333073 milliseconds
Total Time:         303.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       113.7 seconds, 37.4%
Fitness Testing:    151.8 seconds, 50.0%
Report:              38.2 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 73
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 74
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 74
;;******************************
;; -*- Number IO problem report - generation 74
Test total error for best: 47126.249299999974
Test mean error for best: 23.56312
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 1.9487828654  
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 0.552670397   
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_mult} {:instruction float_sin} {:instruction integer_yank} {:instruction float_swap} {:instruction integer_div} {:instruction float_shove} {:instruction in2} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_yank float_cos 67.59641311186607 float_cos 67.59641311186607 float_mult float_sin integer_yank float_swap integer_div float_shove in2 in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 float_stackdepth integer_dec integer_yankdup float_inc float_dec float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_mult float_shove in1 integer_sub float_max print_float)
Errors: [43.3717 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 31.6066 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1030.8048999999999
Mean: 20.616098
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2180.4960852999975
Median total errors in population: 1059.0014999999999
Error averages by case: (83.75298180000097 11.159 62.07736209999996 3.452 118.73584870000002 2.441 72.1289944 1.515 63.10879310000005 1.88 56.042545499999996 2.477 47.344364200000015 2.004 55.33431929999977 9.788 53.89026970000001 2.343 74.11088499999983 9.5 137.0410559 12.125 45.2867819 2.839 91.52850370000066 8.718 114.49225790000001 3.444 131.0158247 4.181 73.24743589999962 10.288 43.05611589999997 1.808 78.18938400000006 2.79 62.928056399999996 1.53 68.13269539999936 10.095 99.59578730000084 10.071 119.333769 13.032 104.80929049999997 9.763 78.70103450000038 9.519 95.71172850000004 4.138)
Error minima by case: (5.8997 8 13.7678 2 4.6757 1 2.6303 1 10.1207 1 10.6798 2 5.0 1 1.647 8 3.9746 1 12.8094 2 25.4927 10 4.0 2 39.1101 3 75.0 3 87.0 3 1.8526 8 0.4099 1 22.1564 2 18.0418 1 1.3431 2 42.6383 3 36.6168 11 50.2212 2 3.7661 8 49.0 2)
Average genome size in population (length): 80.457
Average program size in population (points): 81.457
Average percent parens in population: 0.012
Minimum age in population: 103.8260728885862
Maximum age in population: 108.4224526092643
Average age in population: 106.3943642662398
Median age in population: 106.4320052743968
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.853
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.853
Total error diversity:				 0.264
Error (vector) diversity:			 0.265
Behavioral diversity:				 0.265
--- Run Statistics ---
Number of program evaluations used so far: 75000
Number of point (instruction) evaluations so far: 132820879
--- Timings ---
Current time: 1529615337316 milliseconds
Total Time:         308.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       115.2 seconds, 37.4%
Fitness Testing:    154.0 seconds, 50.0%
Report:              38.7 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 74
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 75
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 75
;;******************************
;; -*- Number IO problem report - generation 75
Test total error for best: 47130.04629999997
Test mean error for best: 23.56502
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 1.9487828654  
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 0.552670397   
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_mult} {:instruction in1} {:instruction integer_yank} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_rot} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_yank float_cos 67.59641311186607 float_cos 67.59641311186607 float_mult in1 integer_yank float_swap integer_div integer_fromfloat in2 in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup float_rot in2 float_tan integer_shove in1 float_mult float_dec float_mod integer_shove in1 float_stackdepth integer_dec integer_yankdup float_inc float_dec float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div integer_rot float_tan integer_shove in1 float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [43.3717 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 31.6066 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1030.8048999999999
Mean: 20.616098
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2443.4703985999977
Median total errors in population: 1051.44295
Error averages by case: (96.8125483000009 11.174 73.25502909999999 3.643 127.58118420000002 2.548 81.2271842 1.645 72.12376140000003 1.939 65.1451842 2.594 59.24965620000002 2.014 66.76938469999968 9.804 65.43218669999999 2.465 84.61779159999945 9.622 145.66499180000002 12.168 56.60780470000001 2.83 101.48485360000102 8.881 124.2620284 3.546 141.20040259999993 4.278 85.73278549999954 10.308 56.37536469999997 1.869 87.13999060000006 2.826 72.6169302 1.633 79.5547905999997 10.21 109.38670250000114 10.218 127.6741961 13.085 114.66962209999998 9.895 89.57074760000087 9.624 106.23527700000002 4.261)
Error minima by case: (6.327 7 13.7678 2 4.6757 1 25.2445 1 15.8124 1 8.8124 2 5.0 1 1.647 7 6.0 1 16.8092 2 25.4927 9 0.1876 2 1.3141 3 0.3141 3 46.6781 3 1.6066 8 0.8124 1 29.9154 2 19.0 1 13.5586 2 21.3141 3 36.6168 9 22.3141 2 3.7661 8 3.9016 2)
Average genome size in population (length): 80.538
Average program size in population (points): 81.538
Average percent parens in population: 0.012
Minimum age in population: 105.2483425829832
Maximum age in population: 109.9145853465012
Average age in population: 107.8067679840024
Median age in population: 107.8376258591114
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.843
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.843
Total error diversity:				 0.247
Error (vector) diversity:			 0.248
Behavioral diversity:				 0.248
--- Run Statistics ---
Number of program evaluations used so far: 76000
Number of point (instruction) evaluations so far: 134834329
--- Timings ---
Current time: 1529615342021 milliseconds
Total Time:         312.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       116.9 seconds, 37.4%
Fitness Testing:    156.3 seconds, 50.0%
Report:              39.2 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 75
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 76
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 76
;;******************************
;; -*- Number IO problem report - generation 76
Test total error for best: 47126.249299999974
Test mean error for best: 23.56312
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 1.9487828654  
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 0.552670397   
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction in2} {:instruction integer_rot} {:instruction float_sin} {:instruction integer_yank} {:instruction float_swap} {:instruction integer_div} {:instruction float_sin} {:instruction integer_max} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_yank float_cos in2 integer_rot float_sin integer_yank float_swap integer_div float_sin integer_max float_swap integer_div integer_fromfloat in2 in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 float_stackdepth integer_dec integer_yankdup float_inc float_dec float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_yankdup integer_shove float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_mult integer_mult float_shove integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [43.3717 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 31.6066 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1030.8048999999999
Mean: 20.616098
Genome size: 85
Size: 86
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2705.3348269999997
Median total errors in population: 1067.0537
Error averages by case: (104.2351931000012 11.294 80.91714039999991 3.758 139.71289389999998 2.665 94.0371771 1.752 85.3261728 2.243 78.2189614 2.714 72.12963840000003 2.33 74.98931529999967 9.939 74.92380229999999 2.846 91.50285259999919 9.665 157.57857180000008 12.235 69.0433044 3.118 111.7955282000011 8.891 134.35778779999998 3.67 149.1317932999999 4.675 93.0312276999995 10.372 68.32665769999996 2.162 100.09935650000013 3.149 83.3650779 1.761 87.70716660000008 10.264 119.63898430000117 10.212 140.60856540000003 13.128 124.79483869999996 9.903 97.9652710000011 9.651 114.88054840000008 4.62)
Error minima by case: (14.3715 7 0.9573 2 6.8939 2 29.0 1 19.0 1 12.0 2 3.0181 1 0.8858 8 5.0 1 3.8184 2 25.7488 10 3.0 2 40.1101 3 75.0 3 86.0 3 3.9938 7 0.4099 1 29.9735 2 20.0 1 4.4014 2 43.6383 2 37.2196 12 51.2212 2 6.748 8 48.0 3)
Average genome size in population (length): 80.528
Average program size in population (points): 81.528
Average percent parens in population: 0.012
Minimum age in population: 106.9511614872878
Maximum age in population: 111.0329696938364
Average age in population: 109.1203705445384
Median age in population: 109.1568546892552
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.86
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.86
Total error diversity:				 0.28
Error (vector) diversity:			 0.283
Behavioral diversity:				 0.284
--- Run Statistics ---
Number of program evaluations used so far: 77000
Number of point (instruction) evaluations so far: 136847554
--- Timings ---
Current time: 1529615346308 milliseconds
Total Time:         317.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       118.4 seconds, 37.3%
Fitness Testing:    158.7 seconds, 50.0%
Report:              39.9 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 76
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 77
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 77
;;******************************
;; -*- Number IO problem report - generation 77
Test total error for best: 46800.55809999997
Test mean error for best: 23.40028
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 1.9487828654  
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.7656492996 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 0.552670397   
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010546
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction float_sin} {:instruction integer_yank} {:instruction float_cos} {:instruction in2} {:instruction integer_rot} {:instruction float_sin} {:instruction integer_yank} {:instruction float_swap} {:instruction integer_div} {:instruction integer_dup} {:instruction integer_yank} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_sub} {:instruction in2} {:instruction float_tan} {:instruction float_dec} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot float_sin integer_yank float_cos in2 integer_rot float_sin integer_yank float_swap integer_div integer_dup integer_yank float_swap integer_div integer_fromfloat in2 in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup integer_sub in2 float_tan float_dec in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 float_stackdepth integer_dec integer_yankdup float_inc float_dec float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div float_yankdup integer_div in2 float_tan integer_shove in1 float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_rot float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [43.3717 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 25.8657 11 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 31.6066 9 5.0 1 36.0 2 20.0 1 13.5586 10 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1030.2745999999997
Mean: 20.605492
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2206.980635499998
Median total errors in population: 1067.0537
Error averages by case: (87.80012330000088 11.22 61.164626499999954 3.534 118.8607708 2.496 72.34283359999999 1.579 63.19138880000004 1.897 56.200092399999996 2.54 49.83929220000001 2.002 58.38748379999967 9.88 53.155726200000004 2.348 74.17488909999976 9.382 137.0727686 12.145 46.6314037 2.787 93.22989850000077 8.559 115.2371878 3.506 130.01524099999995 4.156 77.00879119999958 10.375 46.314462699999986 1.79 78.26438880000005 2.792 62.1703098 1.56 71.38897219999946 9.964 101.64599090000098 9.861 119.29779970000001 13.063 106.72210209999997 9.525 81.99926900000044 9.619 94.1778228 4.107)
Error minima by case: (30.5369 8 10.0151 2 3.6757 1 29.0 1 19.0 1 12.0 2 5.0 1 0.5341 9 5.0 1 20.7197 2 25.4927 10 3.0 2 1.3141 3 0.3141 3 69.9975 3 18.8073 8 1.3854 1 28.9154 2 11.8405 1 12.5586 2 21.3141 2 20.7076 11 22.3141 2 5.748 8 44.5772 2)
Average genome size in population (length): 80.974
Average program size in population (points): 81.974
Average percent parens in population: 0.012
Minimum age in population: 108.0684967229597
Maximum age in population: 112.4782284107257
Average age in population: 110.4931241037096
Median age in population: 110.5266919246042
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.855
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.855
Total error diversity:				 0.27
Error (vector) diversity:			 0.271
Behavioral diversity:				 0.271
--- Run Statistics ---
Number of program evaluations used so far: 78000
Number of point (instruction) evaluations so far: 138871904
--- Timings ---
Current time: 1529615350741 milliseconds
Total Time:         321.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       119.9 seconds, 37.3%
Fitness Testing:    161.0 seconds, 50.1%
Report:              40.4 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 77
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 78
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 78
;;******************************
;; -*- Number IO problem report - generation 78
Test total error for best: 46800.55809999997
Test mean error for best: 23.40028
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 1.9487828654  
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.7656492996 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 0.552670397   
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010546
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction float_sin} {:instruction integer_yank} {:instruction float_cos} {:instruction in2} {:instruction integer_rot} {:instruction float_sin} {:instruction integer_yank} {:instruction float_swap} {:instruction integer_div} {:instruction integer_dup} {:instruction integer_yank} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_sub} {:instruction in2} {:instruction float_tan} {:instruction float_dec} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot float_sin integer_yank float_cos in2 integer_rot float_sin integer_yank float_swap integer_div integer_dup integer_yank float_swap integer_div integer_fromfloat in2 in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup integer_sub in2 float_tan float_dec in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 float_stackdepth integer_dec integer_yankdup float_inc float_dec float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div float_yankdup integer_div in2 float_tan integer_shove in1 float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_rot float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [43.3717 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 25.8657 11 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 31.6066 9 5.0 1 36.0 2 20.0 1 13.5586 10 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1030.2745999999997
Mean: 20.605492
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2140.6714553999996
Median total errors in population: 1067.0537
Error averages by case: (85.73356620000105 11.177 61.187489099999944 3.499 115.79806950000003 2.445 69.17361319999999 1.544 60.086139900000056 1.934 52.9526593 2.496 46.47487270000002 2.048 55.31503219999969 9.851 53.3963999 2.324 71.74896869999986 9.542 134.15683949999996 12.126 44.09677570000002 2.822 89.28354480000073 8.76 112.3565432 3.479 129.28073759999995 4.129 74.55920699999955 10.375 43.6722375 1.833 75.16226960000009 2.81 59.9203135 1.544 66.02069799999926 10.14 97.29877700000112 10.129 116.32934590000002 13.033 102.58487099999996 9.832 78.55338380000086 9.563 93.99310060000003 4.101)
Error minima by case: (0.0 0 4.9747 2 3.1183 1 25.2445 1 19.423 1 10.6798 2 5.0 1 0.0 0 6.0 1 14.3917 2 25.4927 9 3.8171 2 0.0 0 0.0 0 46.6781 3 0.0 0 0.828 1 28.358 2 19.0 1 12.5586 2 0.0 0 36.6168 9 0.0 0 3.7661 8 49.0 2)
Average genome size in population (length): 80.834
Average program size in population (points): 81.834
Average percent parens in population: 0.012
Minimum age in population: 109.5098493532932
Maximum age in population: 113.7877711301373
Average age in population: 111.9002483360765
Median age in population: 111.9451637730751
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.854
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.854
Total error diversity:				 0.282
Error (vector) diversity:			 0.282
Behavioral diversity:				 0.282
--- Run Statistics ---
Number of program evaluations used so far: 79000
Number of point (instruction) evaluations so far: 140892754
--- Timings ---
Current time: 1529615354903 milliseconds
Total Time:         325.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       121.4 seconds, 37.3%
Fitness Testing:    163.2 seconds, 50.1%
Report:              40.9 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 78
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 79
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 79
;;******************************
;; -*- Number IO problem report - generation 79
Test total error for best: 47126.249299999974
Test mean error for best: 23.56312
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 1.9487828654  
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 0.552670397   
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 68.0836706867208} {:instruction integer_rot} {:instruction float_sin} {:instruction integer_yank} {:instruction float_swap} {:instruction integer_div} {:instruction float_mult} {:instruction float_sin} {:instruction integer_yank} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_min} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_stackdepth} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_yank float_cos 68.0836706867208 integer_rot float_sin integer_yank float_swap integer_div float_mult float_sin integer_yank float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 float_stackdepth integer_dec integer_yankdup float_inc float_dec float_mod float_max float_yankdup integer_div integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_min integer_mult float_shove integer_add integer_stackdepth in1 integer_stackdepth float_max print_float)
Errors: [43.3717 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 31.6066 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1030.8048999999999
Mean: 20.616098
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2367.1063167999973
Median total errors in population: 1097.2536999999998
Error averages by case: (92.17757170000104 11.182 69.26341049999992 3.656 125.24585909999999 2.526 79.02785220000001 1.629 70.14290820000002 2.096 62.9877626 2.576 56.09098360000002 2.124 62.3297245999997 9.871 61.71411960000001 2.509 80.65127599999958 9.58 143.38872500000005 12.142 53.94022000000002 2.943 98.70644960000087 8.795 121.58815310000003 3.589 137.33077889999998 4.288 80.99234849999952 10.377 52.867012299999956 1.947 85.05565010000007 2.953 69.60911539999998 1.628 75.67492959999956 10.156 106.9161632000012 10.088 125.99360730000001 13.033 111.99763519999998 9.792 87.28033120000083 9.657 102.75372930000002 4.243)
Error minima by case: (13.6795 6 0.0 1 3.7641 1 25.2445 1 19.0 1 10.6798 2 5.0 1 0.5928 7 5.0 1 14.1937 2 25.2446 9 3.0 2 1.3141 3 0.3141 3 40.3219 3 1.4332 6 1.4932 1 29.8573 2 11.8405 1 12.5586 2 21.3141 2 36.1005 9 22.3141 2 3.7661 8 3.9016 2)
Average genome size in population (length): 80.919
Average program size in population (points): 81.919
Average percent parens in population: 0.012
Minimum age in population: 110.5098493532932
Maximum age in population: 115.3728942141535
Average age in population: 113.2645502697258
Median age in population: 113.2999049103817
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.883
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.883
Total error diversity:				 0.292
Error (vector) diversity:			 0.294
Behavioral diversity:				 0.294
--- Run Statistics ---
Number of program evaluations used so far: 80000
Number of point (instruction) evaluations so far: 142915729
--- Timings ---
Current time: 1529615359318 milliseconds
Total Time:         330.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       122.9 seconds, 37.3%
Fitness Testing:    165.5 seconds, 50.2%
Report:              41.4 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 79
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 80
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 80
;;******************************
;; -*- Number IO problem report - generation 80
Test total error for best: 47126.249299999974
Test mean error for best: 23.56312
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 1.9487828654  
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 0.552670397   
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_mult} {:instruction float_sin} {:instruction integer_yank} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction print_integer} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_yank float_cos 67.59641311186607 float_cos 67.59641311186607 float_mult float_sin integer_yank float_swap integer_dup integer_fromfloat in2 in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 float_stackdepth integer_dec integer_yankdup float_inc float_dec float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_mult float_shove in1 float_stackdepth integer_dec integer_mult float_shove print_integer integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [43.3717 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 31.6066 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1030.8048999999999
Mean: 20.616098
Genome size: 87
Size: 88
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2272.9350269999977
Median total errors in population: 1069.44015
Error averages by case: (89.43877830000095 11.217 66.06219149999998 3.631 120.54880429999999 2.532 74.04060360000001 1.604 65.01691820000003 1.955 58.0407777 2.571 51.96888160000002 2.125 60.854837899999744 9.885 60.46362760000002 2.558 79.00980389999991 9.572 138.78037659999998 12.182 48.98685830000001 2.905 93.87273220000056 8.62 116.1130301 3.56 135.72076729999995 4.353 79.44809629999968 10.405 48.337969699999995 1.952 80.09243640000005 2.893 63.67513609999999 1.601 74.03016279999943 10.173 102.36922360000057 9.919 120.96557949999999 13.103 107.46110919999997 9.591 84.19588820000034 9.622 100.56743610000004 4.344)
Error minima by case: (6.327 8 11.3452 2 3.1183 1 24.7065 1 20.0 1 13.0 2 6.0 1 0.0658 8 6.0 1 14.3917 2 24.3843 9 3.3612 2 1.3141 3 0.3141 3 46.6781 3 3.9938 8 0.2438 1 28.358 2 19.0 1 8.2127 2 2.0078 3 36.3759 9 9.5907 2 3.7661 8 3.9016 3)
Average genome size in population (length): 81.127
Average program size in population (points): 82.127
Average percent parens in population: 0.012
Minimum age in population: 111.5098493532932
Maximum age in population: 116.539920434123
Average age in population: 114.6876663632376
Median age in population: 114.7449984713389
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.865
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.865
Total error diversity:				 0.287
Error (vector) diversity:			 0.289
Behavioral diversity:				 0.289
--- Run Statistics ---
Number of program evaluations used so far: 81000
Number of point (instruction) evaluations so far: 144943904
--- Timings ---
Current time: 1529615363791 milliseconds
Total Time:         334.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       124.4 seconds, 37.2%
Fitness Testing:    167.8 seconds, 50.2%
Report:              42.0 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 80
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 81
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 81
;;******************************
;; -*- Number IO problem report - generation 81
Test total error for best: 47126.249299999974
Test mean error for best: 23.56312
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 1.9487828654  
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 0.552670397   
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction tagged_776} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_flush} {:instruction 67.59641311186607} {:instruction integer_yank} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_max} {:instruction tagged_115} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot tagged_776 float_cos 67.59641311186607 float_flush 67.59641311186607 integer_yank float_swap integer_div integer_fromfloat float_yank in2 float_tan float_frominteger integer_min float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod integer_mod float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 float_stackdepth integer_max tagged_115 float_inc float_dec float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [43.3717 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 31.6066 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1030.8048999999999
Mean: 20.616098
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2197.6116017999966
Median total errors in population: 1071.3834
Error averages by case: (86.69952440000097 11.198 62.15146399999993 3.655 118.58566520000001 2.435 72.078102 1.51 62.93389820000003 1.831 55.937864399999995 2.468 47.29679210000001 1.979 57.31193349999974 9.821 56.8404712 2.56 74.68553429999973 9.444 136.86820509999998 12.143 46.5175582 2.76 91.4957719000006 8.583 113.8355882 3.458 132.00911339999993 4.3 75.39979339999968 10.377 45.56746889999998 1.783 78.01647420000005 2.736 61.1041377 1.501 70.28610539999946 10.051 99.92650310000094 9.894 118.9129437 13.058 104.97147009999998 9.586 80.09953170000053 9.599 97.06068750000003 4.289)
Error minima by case: (24.016 8 0.9573 2 3.1183 2 25.2445 1 20.0 1 10.6798 2 6.0 1 1.647 6 6.0 1 2.0292 2 24.5239 10 4.0 2 40.1101 3 25.0 2 87.0 3 1.2592 8 0.828 1 28.358 2 20.0 1 3.666 2 43.6383 3 35.7604 10 48.7788 2 3.7661 8 49.0 3)
Average genome size in population (length): 81.308
Average program size in population (points): 82.308
Average percent parens in population: 0.012
Minimum age in population: 113.4020501020033
Maximum age in population: 117.9651618688352
Average age in population: 116.0726950856472
Median age in population: 116.111860282973
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.867
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.867
Total error diversity:				 0.275
Error (vector) diversity:			 0.276
Behavioral diversity:				 0.277
--- Run Statistics ---
Number of program evaluations used so far: 82000
Number of point (instruction) evaluations so far: 146976629
--- Timings ---
Current time: 1529615368015 milliseconds
Total Time:         338.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       125.9 seconds, 37.2%
Fitness Testing:    170.0 seconds, 50.2%
Report:              42.7 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 81
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 82
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 82
;;******************************
;; -*- Number IO problem report - generation 82
Test total error for best: 47126.249299999974
Test mean error for best: 23.56312
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 1.9487828654  
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 0.552670397   
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 68.0836706867208} {:instruction integer_rot} {:instruction float_sin} {:instruction integer_yank} {:instruction float_swap} {:instruction float_sin} {:instruction integer_yank} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_yank float_cos 68.0836706867208 integer_rot float_sin integer_yank float_swap float_sin integer_yank float_swap integer_div integer_fromfloat float_yank in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 float_stackdepth integer_dec integer_yankdup float_inc float_dec float_mod float_max float_yankdup integer_div integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove in1 float_stackdepth integer_dec integer_mult integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [43.3717 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 31.6066 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1030.8048999999999
Mean: 20.616098
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2306.028099299997
Median total errors in population: 1102.9532
Error averages by case: (91.18943510000113 11.137 65.94085019999994 3.667 121.9049467 2.525 76.03017720000001 1.62 67.07053790000003 2.088 60.211642700000006 2.573 53.694096100000024 2.167 61.69710419999967 9.84 59.754807500000005 2.639 76.73338969999945 9.482 140.12071619999998 12.108 51.104994300000016 2.944 96.92677650000088 8.656 119.2046054 3.535 135.02994069999994 4.448 79.92503969999963 10.371 50.02613629999998 1.956 81.85307120000007 2.953 66.9004908 1.611 73.11073039999954 10.04 105.0964214000012 9.989 122.8544261 13.007 110.30160999999997 9.638 86.04042580000095 9.631 100.25972720000007 4.421)
Error minima by case: (36.9108 8 6.5051 2 3.1183 2 25.2445 1 20.0 1 10.6798 2 6.0 1 0.5942 7 6.0 1 6.3136 2 15.7783 9 4.0 2 39.1101 3 75.0 3 87.0 3 3.4299 7 0.4099 1 3.7875 2 20.0 1 13.5586 2 42.6383 3 26.9024 10 39.8133 2 6.748 8 49.0 3)
Average genome size in population (length): 81.828
Average program size in population (points): 82.828
Average percent parens in population: 0.012
Minimum age in population: 114.4020501020033
Maximum age in population: 119.269443548647
Average age in population: 117.3690167736685
Median age in population: 117.4330041528564
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.88
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.88
Total error diversity:				 0.284
Error (vector) diversity:			 0.284
Behavioral diversity:				 0.285
--- Run Statistics ---
Number of program evaluations used so far: 83000
Number of point (instruction) evaluations so far: 149022379
--- Timings ---
Current time: 1529615372543 milliseconds
Total Time:         343.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       127.5 seconds, 37.1%
Fitness Testing:    172.4 seconds, 50.2%
Report:              43.2 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 82
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 83
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 83
;;******************************
;; -*- Number IO problem report - generation 83
Test total error for best: 47126.249299999974
Test mean error for best: 23.56312
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 1.9487828654  
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 0.552670397   
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_mult} {:instruction float_sin} {:instruction integer_yank} {:instruction float_swap} {:instruction integer_div} {:instruction integer_yank} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_max} {:instruction tagged_115} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_yank float_cos 67.59641311186607 float_cos 67.59641311186607 float_mult float_sin integer_yank float_swap integer_div integer_yank float_swap integer_div integer_fromfloat float_yank in2 float_tan float_frominteger integer_min float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod integer_mod float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 float_stackdepth integer_max tagged_115 float_inc float_dec float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div integer_div in2 float_tan integer_shove in1 float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [43.3717 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 31.6066 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1030.8048999999999
Mean: 20.616098
Genome size: 81
Size: 82
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2598.5391232999973
Median total errors in population: 1117.876
Error averages by case: (102.02256640000122 11.226 78.54240429999996 3.792 133.6275376 2.595 87.85487549999999 1.694 78.92891840000003 2.039 72.03450469999999 2.646 64.40318230000003 2.17 73.39244359999961 9.944 72.29703059999996 2.662 91.05505419999905 9.579 151.5834221 12.19 60.73095020000001 2.915 108.85333080000112 8.701 130.8437793 3.601 146.47422399999994 4.463 90.89719489999952 10.455 58.20464469999996 1.972 93.73174610000008 2.938 78.9963306 1.689 86.40924679999975 10.164 116.96410910000144 10.007 134.01135609999997 13.096 121.97544139999997 9.685 98.4936291000013 9.708 111.84420050000003 4.436)
Error minima by case: (15.2235 8 0.0427 2 3.1183 1 25.2445 1 20.0 1 10.6798 2 5.0 1 1.647 8 6.0 1 14.1937 2 25.6362 9 4.0 2 1.3141 2 0.3141 2 46.6781 3 1.6066 7 0.4099 1 28.358 2 19.0 1 13.5586 2 4.0 2 37.205 9 3.0 1 3.7661 8 3.9016 2)
Average genome size in population (length): 81.601
Average program size in population (points): 82.601
Average percent parens in population: 0.012
Minimum age in population: 116.2347532007352
Maximum age in population: 120.8262735616368
Average age in population: 118.7700353587073
Median age in population: 118.8366730585012
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.878
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.878
Total error diversity:				 0.286
Error (vector) diversity:			 0.288
Behavioral diversity:				 0.288
--- Run Statistics ---
Number of program evaluations used so far: 84000
Number of point (instruction) evaluations so far: 151062429
--- Timings ---
Current time: 1529615376756 milliseconds
Total Time:         347.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       128.9 seconds, 37.1%
Fitness Testing:    174.7 seconds, 50.3%
Report:              43.8 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 83
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 84
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 84
;;******************************
;; -*- Number IO problem report - generation 84
Test total error for best: 47126.249299999974
Test mean error for best: 23.56312
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 1.9487828654  
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 0.552670397   
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yank} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_cos} {:instruction 20.540494601296984} {:instruction float_mult} {:instruction float_sin} {:instruction integer_yank} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_yank integer_rot integer_yank float_cos 67.59641311186607 float_cos 20.540494601296984 float_mult float_sin integer_yank float_swap integer_div integer_fromfloat float_yank in2 float_tan float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth float_mult float_dec float_mod integer_shove in1 float_stackdepth integer_dec integer_yankdup float_inc float_dec float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_mult integer_add integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [43.3717 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 31.6066 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1030.8048999999999
Mean: 20.616098
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2904.695889399999
Median total errors in population: 1097.2536999999998
Error averages by case: (113.15821780000107 11.296 90.64166839999993 3.894 146.525279 2.746 101.388296 1.855 92.6865603 2.187 85.73421590000001 2.784 78.98202660000001 2.344 82.72793629999973 9.929 84.70079000000001 2.816 101.53312679999898 9.748 164.10358540000001 12.258 75.02174239999998 3.075 120.62501640000113 8.903 143.145923 3.793 157.4676562 4.588 101.32641629999952 10.481 72.07836879999998 2.109 107.16668580000007 3.078 92.38412930000001 1.846 97.3136166 10.371 128.2481756000015 10.223 146.77623540000002 13.161 133.5509616 9.863 106.31172290000129 9.656 123.49853660000008 4.595)
Error minima by case: (13.6795 8 2.0823 2 3.1183 1 30.0 1 20.0 1 13.0 2 4.7763 1 0.7585 7 6.0 1 14.1937 2 27.0501 10 4.0 2 1.3141 2 0.3141 2 40.3219 3 8.4415 8 0.828 1 28.358 2 3.5724 1 8.2875 2 4.0 2 4.4554 9 3.0 1 3.7661 8 49.0 3)
Average genome size in population (length): 81.737
Average program size in population (points): 82.737
Average percent parens in population: 0.012
Minimum age in population: 117.2347532007352
Maximum age in population: 122.4703311571812
Average age in population: 120.1775528718613
Median age in population: 120.1904298399185
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.875
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.875
Total error diversity:				 0.301
Error (vector) diversity:			 0.306
Behavioral diversity:				 0.307
--- Run Statistics ---
Number of program evaluations used so far: 85000
Number of point (instruction) evaluations so far: 153105929
--- Timings ---
Current time: 1529615380944 milliseconds
Total Time:         351.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       130.4 seconds, 37.1%
Fitness Testing:    176.9 seconds, 50.3%
Report:              44.3 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 84
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 85
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 85
;;******************************
;; -*- Number IO problem report - generation 85
Test total error for best: 46729.234599999974
Test mean error for best: 23.36462
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 26.6390022777 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: -0.5066479143 
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.5066479143 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -0.5066479143 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -0.3062166972 
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_yank float_cos 67.59641311186607 integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup float_rot in2 integer_mod float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 float_stackdepth integer_dec integer_yankdup float_inc float_dec float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [18.6815 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 7.6811 11 6.0 1 26.1247 11 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 32.6659 11 5.0 1 36.0 2 20.0 1 24.6883 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1025.5591
Mean: 20.511183
Genome size: 82
Size: 83
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2486.581397999997
Median total errors in population: 1107.13805
Error averages by case: (95.82559300000106 11.208 73.0031617999999 3.703 130.78278950000004 2.622 84.86828069999999 1.725 75.83811690000003 1.995 69.0379828 2.677 61.41117950000002 2.118 66.9213287999997 9.936 64.6601618 2.545 85.99196849999954 9.556 148.77074950000002 12.194 58.4842559 2.893 104.06853420000097 8.687 126.10886850000001 3.602 141.57783819999997 4.375 85.5091452999996 10.483 55.67218839999995 1.898 90.74022160000005 2.911 74.0073245 1.7 80.59849349999924 10.098 112.0299420000012 10.044 130.96529420000002 13.101 117.37506679999998 9.643 92.62286980000114 9.721 105.93204230000003 4.343)
Error minima by case: (13.6795 8 2.2716 2 3.1183 1 25.2445 1 20.0 1 10.6798 2 5.0 1 2.4903 7 6.0 1 4.7497 2 24.3843 9 4.0 2 1.3141 3 0.3141 3 40.3219 3 3.9938 8 0.2438 1 28.0282 2 11.8405 1 2.0 1 21.3141 3 36.3759 9 22.3141 2 5.1663 8 49.0 2)
Average genome size in population (length): 82.203
Average program size in population (points): 83.203
Average percent parens in population: 0.012
Minimum age in population: 119.0083067648623
Maximum age in population: 123.5016196631487
Average age in population: 121.5086426350355
Median age in population: 121.5151831351106
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.872
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.872
Total error diversity:				 0.288
Error (vector) diversity:			 0.289
Behavioral diversity:				 0.29
--- Run Statistics ---
Number of program evaluations used so far: 86000
Number of point (instruction) evaluations so far: 155161054
--- Timings ---
Current time: 1529615385237 milliseconds
Total Time:         356.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       131.8 seconds, 37.0%
Fitness Testing:    179.2 seconds, 50.3%
Report:              44.8 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 85
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 86
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 86
;;******************************
;; -*- Number IO problem report - generation 86
Test total error for best: 46778.21959999999
Test mean error for best: 23.38911
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 26.6390022777 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -0.6616225738 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_sub} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_dup_items} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_yank float_cos 67.59641311186607 integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_sub in1 float_stackdepth integer_dec integer_yankdup float_inc float_dec float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod float_max 31 integer_div in2 float_tan integer_shove in1 integer_mult float_shove integer_dec integer_mult float_shove integer_add integer_stackdepth integer_mult float_shove integer_add integer_stackdepth in1 integer_dup_items float_max print_float)
Errors: [18.6815 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 32.8209 12 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1011.2383
Mean: 20.224766
Genome size: 82
Size: 83
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2402.404471499998
Median total errors in population: 1111.3229
Error averages by case: (94.045754200001 11.141 69.87869019999995 3.595 126.0940789 2.541 79.98254060000001 1.656 71.0158171 2.03 63.9813215 2.605 56.70338210000003 2.172 63.605531199999724 9.858 63.319328800000015 2.609 84.77148219999957 9.749 144.20336790000002 12.144 55.02098140000001 2.934 99.53995050000071 8.753 122.02512430000002 3.586 140.15015949999997 4.432 83.33002319999967 10.368 54.98992699999999 1.998 85.90514720000006 2.927 69.7746019 1.648 77.5809821999997 10.326 107.75280520000076 10.068 126.5196957 13.048 112.90160859999997 9.741 89.76662810000067 9.554 105.66454200000001 4.398)
Error minima by case: (18.6815 8 2.1355 2 3.1183 1 25.2445 1 20.0 1 10.6798 2 5.0 1 1.223 7 6.0 1 1.7299 2 25.2446 10 4.0 2 1.3141 3 0.3141 3 87.0 3 11.6066 8 0.828 1 1.4627 2 11.8405 1 0.0931 2 21.3141 3 36.1005 10 22.3141 2 6.748 7 49.0 2)
Average genome size in population (length): 82.273
Average program size in population (points): 83.273
Average percent parens in population: 0.012
Minimum age in population: 120.8146153404505
Maximum age in population: 125.0269334408247
Average age in population: 122.8942642412155
Median age in population: 122.9154927363026
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.87
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.87
Total error diversity:				 0.307
Error (vector) diversity:			 0.308
Behavioral diversity:				 0.308
--- Run Statistics ---
Number of program evaluations used so far: 87000
Number of point (instruction) evaluations so far: 157217879
--- Timings ---
Current time: 1529615389527 milliseconds
Total Time:         360.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       133.3 seconds, 37.0%
Fitness Testing:    181.5 seconds, 50.4%
Report:              45.3 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 86
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 87
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 87
;;******************************
;; -*- Number IO problem report - generation 87
Test total error for best: 46729.234599999974
Test mean error for best: 23.36462
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 26.6390022777 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: -0.5066479143 
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.5066479143 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -0.5066479143 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -0.3062166972 
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_yank float_cos 67.59641311186607 integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup float_rot in2 integer_mod float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 float_stackdepth integer_dec integer_yankdup float_inc float_dec float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max print_float)
Errors: [18.6815 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 7.6811 11 6.0 1 26.1247 11 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 32.6659 11 5.0 1 36.0 2 20.0 1 24.6883 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1025.5591
Mean: 20.511183
Genome size: 82
Size: 83
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2476.6368775999977
Median total errors in population: 1062.6026
Error averages by case: (95.69034640000106 11.198 71.96107069999992 3.491 129.64967410000003 2.568 83.724133 1.661 74.68218650000003 1.966 67.787214 2.617 61.61061780000002 2.094 65.54185159999972 9.875 66.10280660000001 2.488 84.53167149999939 9.804 147.69212600000003 12.193 59.42037000000001 2.877 103.14610380000117 8.994 126.5424359 3.599 141.2228687999999 4.312 85.13716429999948 10.332 59.070959099999946 1.899 89.56885800000008 2.859 73.928431 1.66 80.90653829999962 10.362 110.94003890000148 10.336 129.91565930000002 13.114 116.13117259999997 10.065 90.97677550000101 9.579 106.52880390000001 4.284)
Error minima by case: (13.3717 8 0.9573 2 3.1183 1 25.2445 1 20.0 1 10.6798 2 5.0 1 1.223 8 6.0 1 2.3971 2 24.5239 10 2.1552 2 39.1101 3 74.0 3 87.0 3 1.6066 8 0.828 1 28.358 2 19.0 1 0.0 0 42.6383 3 35.7604 11 50.2212 2 3.7661 6 49.0 2)
Average genome size in population (length): 82.194
Average program size in population (points): 83.194
Average percent parens in population: 0.012
Minimum age in population: 121.9149425463056
Maximum age in population: 126.3668477460702
Average age in population: 124.2096821127371
Median age in population: 124.2369521713197
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.868
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.868
Total error diversity:				 0.279
Error (vector) diversity:			 0.281
Behavioral diversity:				 0.281
--- Run Statistics ---
Number of program evaluations used so far: 88000
Number of point (instruction) evaluations so far: 159272754
--- Timings ---
Current time: 1529615393895 milliseconds
Total Time:         364.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       134.8 seconds, 37.0%
Fitness Testing:    183.8 seconds, 50.4%
Report:              45.9 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 87
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 88
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 88
;;******************************
;; -*- Number IO problem report - generation 88
Test total error for best: 46927.20629999998
Test mean error for best: 23.46360
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 26.6390022777 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -0.6616225738 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_rot} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_yank float_cos 67.59641311186607 integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup float_rot in2 integer_mod float_yankdup float_rot float_max float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 float_stackdepth integer_dec integer_yankdup float_inc float_dec float_mod integer_yankdup float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_rot float_yankdup integer_div in2 float_tan integer_shove in1 float_mod float_max 31 integer_div in2 float_tan integer_shove in1 integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [18.6815 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 32.8209 12 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1011.2383
Mean: 20.224766
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2480.040409299998
Median total errors in population: 1057.9953
Error averages by case: (95.76554760000114 11.163 72.35481729999997 3.739 130.5291396 2.573 83.49609880000001 1.65 74.4791981 1.993 67.49454000000001 2.61 62.04556680000002 2.101 66.45583219999975 9.922 65.33987199999999 2.52 84.85610239999941 9.822 147.65631840000012 12.174 59.695812400000015 2.867 103.94355710000113 8.954 127.0390296 3.59 141.23981889999996 4.321 85.37928269999969 10.365 58.87183189999996 1.902 89.4346657000001 2.894 74.55877589999999 1.66 80.12165569999966 10.456 111.2431066000013 10.366 129.93881620000002 13.077 116.78238109999997 10.025 90.72976530000103 9.575 105.95487700000005 4.315)
Error minima by case: (12.8537 8 9.761 2 3.6757 1 30.0 1 20.0 1 13.0 2 5.0 1 0.8858 8 6.0 1 5.978 2 25.2446 10 4.0 2 30.9586 3 75.0 3 87.0 3 3.9938 8 1.3854 1 28.9154 2 13.678 1 5.8442 2 27.7756 3 36.1005 10 29.3175 2 1.2026 7 49.0 2)
Average genome size in population (length): 81.758
Average program size in population (points): 82.758
Average percent parens in population: 0.012
Minimum age in population: 123.3074223043711
Maximum age in population: 127.5684480752989
Average age in population: 125.5618220326787
Median age in population: 125.6269365736793
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.856
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.856
Total error diversity:				 0.289
Error (vector) diversity:			 0.29
Behavioral diversity:				 0.291
--- Run Statistics ---
Number of program evaluations used so far: 89000
Number of point (instruction) evaluations so far: 161316729
--- Timings ---
Current time: 1529615398066 milliseconds
Total Time:         368.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       136.2 seconds, 36.9%
Fitness Testing:    186.1 seconds, 50.5%
Report:              46.4 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 88
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 89
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 89
;;******************************
;; -*- Number IO problem report - generation 89
Test total error for best: 46927.20629999998
Test mean error for best: 23.46360
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 26.6390022777 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -0.6616225738 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_rot} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_yank float_cos 67.59641311186607 integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup float_rot in2 integer_mod float_yankdup float_rot float_max float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 float_stackdepth integer_dec integer_yankdup float_inc float_dec float_mod integer_yankdup float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_rot float_yankdup integer_div in2 float_tan integer_shove in1 float_mod float_max 31 integer_div in2 float_tan integer_shove in1 integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [18.6815 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 32.8209 12 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1011.2383
Mean: 20.224766
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2508.855314099998
Median total errors in population: 1067.0537
Error averages by case: (98.41565770000105 11.187 74.97273239999998 3.755 130.5461536 2.587 84.78285730000002 1.687 75.7959438 2.016 68.8662318 2.636 60.74764080000002 2.022 69.27997389999976 9.981 69.00898230000001 2.532 87.14940139999935 9.805 148.59299840000003 12.182 58.21334080000002 2.885 104.20452350000119 8.911 127.2666459 3.585 143.40831759999998 4.362 87.52026429999971 10.484 55.61069049999997 1.936 90.6441373000001 2.933 75.4446965 1.676 82.36614069999997 10.319 112.16954130000119 10.227 131.0147069 13.087 117.41678189999998 9.911 91.98615770000102 9.58 108.82479580000005 4.32)
Error minima by case: (6.327 8 11.4957 2 3.1183 1 25.2445 1 19.8727 1 10.6798 2 5.0 1 1.647 7 6.0 1 7.481 2 25.4927 9 2.1552 2 1.3141 3 0.3141 3 87.0 3 3.9938 7 0.8096 1 28.358 2 11.8405 1 11.287 2 21.3141 3 36.6168 10 22.3141 2 1.1112 7 49.0 2)
Average genome size in population (length): 81.59
Average program size in population (points): 82.59
Average percent parens in population: 0.012
Minimum age in population: 124.3847699759723
Maximum age in population: 129.0502697979007
Average age in population: 126.8731026710142
Median age in population: 126.88553264985
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.855
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.855
Total error diversity:				 0.3
Error (vector) diversity:			 0.303
Behavioral diversity:				 0.303
--- Run Statistics ---
Number of program evaluations used so far: 90000
Number of point (instruction) evaluations so far: 163356504
--- Timings ---
Current time: 1529615402324 milliseconds
Total Time:         373.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       137.6 seconds, 36.9%
Fitness Testing:    188.4 seconds, 50.5%
Report:              46.9 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 89
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 90
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 90
;;******************************
;; -*- Number IO problem report - generation 90
Test total error for best: 46927.20629999998
Test mean error for best: 23.46360
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 26.6390022777 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -0.6616225738 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_rot} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_yank float_cos 67.59641311186607 integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup float_rot in2 integer_mod float_yankdup float_rot float_max float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 float_stackdepth integer_dec integer_yankdup float_inc float_dec float_mod integer_yankdup float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_rot float_yankdup integer_div in2 float_tan integer_shove in1 float_mod float_max 31 integer_div in2 float_tan integer_shove in1 integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [18.6815 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 32.8209 12 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1011.2383
Mean: 20.224766
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2252.727570799997
Median total errors in population: 1067.0537
Error averages by case: (83.55117000000077 11.191 63.48378739999993 3.754 121.81765130000001 2.474 74.37604739999999 1.537 65.32621360000003 1.904 58.3326862 2.509 51.00397910000001 2.05 57.79439759999995 10.101 59.22219999999998 2.472 74.37266729999993 9.814 139.12762970000006 12.146 48.226958400000015 2.817 94.43919420000081 8.716 117.09733680000001 3.487 133.99794109999996 4.321 77.10449819999982 10.612 46.64485329999997 1.863 80.35059610000006 2.787 64.98675399999999 1.548 72.47932689999976 10.23 102.33649060000094 10.092 121.30719550000002 13.068 107.75238979999997 9.725 84.70598340000066 9.624 99.78262290000008 4.265)
Error minima by case: (13.5502 8 4.7646 2 4.1183 2 25.2445 1 20.0 1 10.6798 2 6.0 1 1.647 8 6.0 1 0.8992 2 24.7928 10 4.0 2 1.3141 3 0.3141 3 87.0 3 0.6019 8 0.9951 1 21.1448 2 20.0 1 2.536 2 21.3141 3 37.1742 10 22.3141 2 3.7661 8 49.0 3)
Average genome size in population (length): 81.817
Average program size in population (points): 82.817
Average percent parens in population: 0.012
Minimum age in population: 125.3847699759723
Maximum age in population: 130.5679510019563
Average age in population: 128.1843398812013
Median age in population: 128.2266636890323
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.838
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.838
Total error diversity:				 0.335
Error (vector) diversity:			 0.335
Behavioral diversity:				 0.336
--- Run Statistics ---
Number of program evaluations used so far: 91000
Number of point (instruction) evaluations so far: 165401929
--- Timings ---
Current time: 1529615406538 milliseconds
Total Time:         377.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       139.1 seconds, 36.9%
Fitness Testing:    190.7 seconds, 50.5%
Report:              47.4 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 90
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 91
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 91
;;******************************
;; -*- Number IO problem report - generation 91
Test total error for best: 46927.20629999998
Test mean error for best: 23.46360
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 26.6390022777 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -0.6616225738 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction float_sin} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_max} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot float_sin integer_yank float_cos 67.59641311186607 integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max integer_mod float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 float_stackdepth integer_dec integer_yankdup float_inc float_dec float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_max in1 float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [18.6815 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 32.8209 12 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1011.2383
Mean: 20.224766
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 1964.4401268000001
Median total errors in population: 1062.19965
Error averages by case: (68.63077170000015 11.157 51.46297699999997 3.35 111.2911677 2.384 64.227171 1.445 55.06252190000004 1.796 47.881493999999996 2.413 39.375371600000015 1.855 45.390150500000175 10.373 45.60120709999998 2.188 63.121621600000225 10.072 129.66771939999998 12.129 38.05007600000002 2.729 82.45416560000054 8.727 105.8899209 3.381 122.24264769999995 4.011 65.52176059999981 10.942 36.725428600000015 1.741 70.28008840000005 2.71 53.6620192 1.434 60.17933170000003 10.26 90.60441080000062 10.087 111.67915740000001 13.067 95.90899049999999 9.8 70.57359270000028 9.48 87.45536320000001 3.97)
Error minima by case: (18.6815 8 9.761 2 3.1183 2 18.155 1 20.0 1 3.5903 2 5.9659 1 2.4362 7 6.0 1 4.7497 2 25.4927 8 3.0618 2 1.3141 2 0.3141 2 87.0 3 6.3458 7 0.828 1 28.358 2 11.8405 1 11.287 2 4.0 2 36.6168 11 3.0 1 5.748 8 49.0 3)
Average genome size in population (length): 81.892
Average program size in population (points): 82.892
Average percent parens in population: 0.012
Minimum age in population: 127.0575325181498
Maximum age in population: 131.7273080012174
Average age in population: 129.3895106650962
Median age in population: 129.4246627002193
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.804
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.804
Total error diversity:				 0.328
Error (vector) diversity:			 0.328
Behavioral diversity:				 0.329
--- Run Statistics ---
Number of program evaluations used so far: 92000
Number of point (instruction) evaluations so far: 167449254
--- Timings ---
Current time: 1529615410879 milliseconds
Total Time:         381.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       140.6 seconds, 36.8%
Fitness Testing:    193.0 seconds, 50.6%
Report:              48.0 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 91
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 92
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 92
;;******************************
;; -*- Number IO problem report - generation 92
Test total error for best: 46927.20629999998
Test mean error for best: 23.46360
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 26.6390022777 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -0.6616225738 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction integer_dup_times} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_max} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_yank float_cos 67.59641311186607 integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup float_rot integer_dup_times integer_mod float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 float_stackdepth integer_dec integer_yankdup float_inc float_dec float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_max in1 float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [18.6815 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 32.8209 12 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1011.2383
Mean: 20.224766
Genome size: 82
Size: 83
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2252.4299655000023
Median total errors in population: 1120.3022999999998
Error averages by case: (77.75490650000047 11.096 64.30460120000001 3.669 120.5862932 2.422 73.8892932 1.493 64.81774970000006 1.885 57.6882933 2.459 50.64786300000003 1.992 60.13885900000025 10.441 56.942909299999954 2.384 75.89236990000006 10.287 138.87395899999999 12.109 47.60850560000001 2.779 95.9818798000011 8.517 117.8305523 3.458 133.20301999999995 4.187 79.2723907000006 11.296 47.47726639999996 1.819 79.92303490000009 2.768 65.1631744 1.486 74.27775399999979 10.212 104.56447260000124 9.793 120.97202940000001 13.028 109.64486509999996 9.44 83.93258110000093 9.557 98.32334189999997 4.141)
Error minima by case: (17.6815 8 6.5051 2 13.6655 2 25.2445 1 20.0 1 10.6798 2 6.0 1 0.8651 7 4.8859 1 7.481 2 27.6713 10 4.0 2 15.5028 3 66.8131 3 87.0 3 10.6533 7 5.0 1 21.1448 2 20.0 1 5.8442 2 19.031 3 69.9195 10 26.6139 2 3.7661 8 49.0 3)
Average genome size in population (length): 82.309
Average program size in population (points): 83.309
Average percent parens in population: 0.012
Minimum age in population: 128.0575325181498
Maximum age in population: 132.7711649465186
Average age in population: 130.7325649015435
Median age in population: 130.7463874202248
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.809
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.809
Total error diversity:				 0.323
Error (vector) diversity:			 0.324
Behavioral diversity:				 0.324
--- Run Statistics ---
Number of program evaluations used so far: 93000
Number of point (instruction) evaluations so far: 169507004
--- Timings ---
Current time: 1529615415199 milliseconds
Total Time:         385.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       142.1 seconds, 36.8%
Fitness Testing:    195.3 seconds, 50.6%
Report:              48.5 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 92
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 93
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 93
;;******************************
;; -*- Number IO problem report - generation 93
Test total error for best: 46927.20629999998
Test mean error for best: 23.46360
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 26.6390022777 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -0.6616225738 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_flush} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_swap} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_yank float_cos 67.59641311186607 integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 in2 float_tan integer_shove float_dec float_mod integer_mod float_yankdup float_rot in2 in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_flush in1 float_stackdepth integer_dec integer_yankdup float_inc float_dec float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_yankdup integer_div in2 float_tan integer_swap in1 float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [18.6815 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 32.8209 12 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1011.2383
Mean: 20.224766
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2220.1896603000014
Median total errors in population: 1091.4425999999999
Error averages by case: (74.79269289999992 11.172 62.91735969999998 3.461 119.9173833 2.45 73.4533162 1.516 64.30289210000004 1.83 57.330010300000005 2.479 50.47970770000001 1.984 57.771382 10.274 56.68156849999997 2.294 72.69555050000018 10.613 138.17791569999997 12.172 47.990696700000015 2.762 93.70513210000055 8.72 116.40194360000001 3.459 132.43726519999993 4.13 77.34427030000012 11.573 47.6183329 1.771 79.39016810000007 2.763 64.0531764 1.523 71.22127689999986 10.387 101.83092400000082 10.069 120.2720005 13.091 107.20354439999997 9.719 81.38959300000053 9.544 96.9505573 4.105)
Error minima by case: (3.6924 7 6.5051 2 3.1183 1 25.2445 1 20.0 1 10.6798 2 2.5058 1 2.5335 7 6.0 1 0.5964 2 24.6292 11 4.0 2 39.1101 3 24.2166 3 87.0 3 1.1593 7 0.828 1 28.358 2 19.0 1 5.8442 2 42.6383 3 35.7533 11 50.2212 2 5.748 8 49.0 2)
Average genome size in population (length): 82.101
Average program size in population (points): 83.101
Average percent parens in population: 0.012
Minimum age in population: 129.6852397451246
Maximum age in population: 134.3803611744421
Average age in population: 132.0842912487064
Median age in population: 132.1401574999759
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 29
Genome diversity (% unique Plush genomes):	 0.791
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.791
Total error diversity:				 0.331
Error (vector) diversity:			 0.332
Behavioral diversity:				 0.332
--- Run Statistics ---
Number of program evaluations used so far: 94000
Number of point (instruction) evaluations so far: 171559554
--- Timings ---
Current time: 1529615419618 milliseconds
Total Time:         390.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       143.4 seconds, 36.8%
Fitness Testing:    197.7 seconds, 50.7%
Report:              49.0 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 93
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 94
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 94
;;******************************
;; -*- Number IO problem report - generation 94
Test total error for best: 46927.20629999998
Test mean error for best: 23.46360
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 26.6390022777 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -0.6616225738 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction integer_dup_times} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_max} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_yank float_cos 67.59641311186607 integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup float_rot integer_dup_times integer_mod float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 float_stackdepth integer_dec integer_yankdup float_inc float_dec float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_max in1 float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [18.6815 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 32.8209 12 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1011.2383
Mean: 20.224766
Genome size: 82
Size: 83
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2406.3522142000043
Median total errors in population: 1049.4402
Error averages by case: (82.78081830000059 11.146 72.65394509999996 3.633 125.2769588 2.564 79.92801229999999 1.687 70.25089880000003 1.996 63.3368139 2.608 58.85806720000002 2.109 65.47618619999972 9.894 66.0708888 2.493 82.01299850000017 10.812 143.4118755 12.167 55.46276100000001 2.875 100.47238470000129 8.922 123.6587421 3.606 140.45279889999995 4.232 87.16290530000086 11.69 55.4109413 1.897 85.16147560000005 2.908 71.78489379999999 1.668 77.84424639999976 10.453 108.1124076000014 10.311 125.7742822 13.08 113.55723439999998 9.967 89.2984826000013 9.483 105.69919490000001 4.241)
Error minima by case: (5.7121 8 3.6156 2 2.5515 1 25.2445 1 20.0 1 10.6798 2 5.0 1 0.5828 7 6.0 1 7.481 2 12.4878 10 4.0 2 1.3141 3 0.3141 2 87.0 3 5.2738 8 0.828 1 28.358 2 19.0 1 2.1227 2 21.3141 3 23.6119 10 22.3141 2 5.748 8 49.0 2)
Average genome size in population (length): 81.822
Average program size in population (points): 82.822
Average percent parens in population: 0.012
Minimum age in population: 131.3373947142701
Maximum age in population: 135.5843485880569
Average age in population: 133.3915332989884
Median age in population: 133.4327896074771
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.764
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.764
Total error diversity:				 0.29
Error (vector) diversity:			 0.291
Behavioral diversity:				 0.291
--- Run Statistics ---
Number of program evaluations used so far: 95000
Number of point (instruction) evaluations so far: 173605154
--- Timings ---
Current time: 1529615423818 milliseconds
Total Time:         394.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       144.9 seconds, 36.7%
Fitness Testing:    200.0 seconds, 50.7%
Report:              49.6 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 94
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 95
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 95
;;******************************
;; -*- Number IO problem report - generation 95
Test total error for best: 46927.20629999998
Test mean error for best: 23.46360
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 26.6390022777 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -0.6616225738 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction integer_rot} {:instruction float_inc} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction integer_dup_times} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_yank float_cos 67.59641311186607 integer_rot float_inc float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup float_rot integer_dup_times integer_mod float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 float_stackdepth integer_dec integer_yankdup float_inc float_dec float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [18.6815 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 32.8209 12 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1011.2383
Mean: 20.224766
Genome size: 82
Size: 83
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2081.925068300002
Median total errors in population: 1089.7892
Error averages by case: (69.6307134999998 11.057 57.95125229999995 3.531 114.82704680000002 2.448 68.1254405 1.529 58.91765730000004 1.799 51.950482699999995 2.489 45.099557300000015 1.942 49.7758937999997 9.822 50.54759 2.35 66.59448860000028 10.841 133.18757039999997 12.121 41.91600660000001 2.707 89.11325000000065 8.809 112.56063440000001 3.497 127.02185359999993 4.086 71.2352264999998 11.6 40.9274758 1.72 74.03335680000004 2.695 58.71269459999999 1.524 63.06522539999924 10.476 96.83589340000103 10.239 115.0731246 13.056 102.55857569999998 9.834 76.97260800000058 9.473 91.5204497 4.126)
Error minima by case: (5.002 8 3.6156 2 4.2087 2 18.155 1 20.0 1 3.5903 2 6.0 1 1.1149 7 6.0 1 1.2923 2 21.7944 10 4.0 2 38.796 3 75.0 3 87.0 3 2.1713 7 0.4099 1 7.553 2 20.0 1 5.8442 2 22.3242 3 35.0072 10 28.9072 2 6.748 6 49.0 3)
Average genome size in population (length): 82.161
Average program size in population (points): 83.161
Average percent parens in population: 0.012
Minimum age in population: 132.4708182579129
Maximum age in population: 136.7827456885722
Average age in population: 134.7203184764329
Median age in population: 134.7875676627641
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.832
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.832
Total error diversity:				 0.332
Error (vector) diversity:			 0.332
Behavioral diversity:				 0.333
--- Run Statistics ---
Number of program evaluations used so far: 96000
Number of point (instruction) evaluations so far: 175659204
--- Timings ---
Current time: 1529615428181 milliseconds
Total Time:         398.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       146.4 seconds, 36.7%
Fitness Testing:    202.3 seconds, 50.7%
Report:              50.1 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 95
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 96
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 96
;;******************************
;; -*- Number IO problem report - generation 96
Test total error for best: 46927.20629999998
Test mean error for best: 23.46360
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 26.6390022777 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -0.6616225738 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction float_sin} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_mod} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_max} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot float_sin integer_yank float_cos 67.59641311186607 integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 float_stackdepth integer_dec integer_yankdup float_inc float_dec float_mod float_max float_yankdup integer_div integer_mod float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod float_max float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_mult float_shove integer_mult integer_max integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [18.6815 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 32.8209 12 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1011.2383
Mean: 20.224766
Genome size: 82
Size: 83
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2741.193759400003
Median total errors in population: 1104.4179
Error averages by case: (95.69041030000055 11.236 86.42870839999998 3.721 140.1578991 2.718 94.98729239999999 1.805 85.97663499999997 2.077 79.28233219999997 2.751 70.03450150000002 2.115 77.76422110000013 9.951 78.98393560000001 2.663 94.23992120000018 10.878 157.96245900000008 12.258 67.06410399999997 2.969 114.23886920000115 8.919 136.63315790000001 3.67 152.98279220000006 4.328 97.56891860000047 11.809 64.60632539999996 2.009 100.65033010000006 2.98 85.70729569999999 1.775 90.39639379999998 10.485 122.16333940000136 10.2 140.2298929 13.161 127.16618689999999 9.905 103.1584290000013 9.688 118.67440849999996 4.374)
Error minima by case: (8.7236 8 3.6156 2 3.6757 2 25.2445 1 20.0 1 10.6798 2 4.4426 1 0.0631 7 6.0 1 0.5964 2 25.2446 10 4.0 2 1.3141 3 0.3141 3 39.3219 3 6.3458 7 1.3854 1 25.4431 2 20.0 1 5.8442 2 21.3141 3 36.1005 10 22.3141 2 3.7661 7 49.0 3)
Average genome size in population (length): 82.494
Average program size in population (points): 83.494
Average percent parens in population: 0.012
Minimum age in population: 133.5956984153885
Maximum age in population: 137.9543059649951
Average age in population: 136.0455939601981
Median age in population: 136.0765096445673
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.812
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.812
Total error diversity:				 0.32
Error (vector) diversity:			 0.322
Behavioral diversity:				 0.322
--- Run Statistics ---
Number of program evaluations used so far: 97000
Number of point (instruction) evaluations so far: 177721554
--- Timings ---
Current time: 1529615432526 milliseconds
Total Time:         403.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       147.8 seconds, 36.7%
Fitness Testing:    204.7 seconds, 50.8%
Report:              50.6 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 96
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 97
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 97
;;******************************
;; -*- Number IO problem report - generation 97
Test total error for best: 46927.20629999998
Test mean error for best: 23.46360
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 26.6390022777 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -0.6616225738 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_max} {:instruction tagged_115} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction in2} {:instruction float_tan} {:instruction integer_max} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_yank float_cos 67.59641311186607 integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 in2 float_tan integer_shove float_dec float_mod integer_mod float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_swap float_mult float_dec float_mod integer_shove in1 float_stackdepth integer_max tagged_115 float_inc float_dec float_mod integer_dec integer_yankdup float_inc float_dec float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup float_frominteger in2 float_tan integer_max in1 float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [18.6815 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 32.8209 12 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1011.2383
Mean: 20.224766
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2085.9491119000027
Median total errors in population: 1069.4268499999998
Error averages by case: (69.65497920000004 11.066 58.254609399999936 3.453 115.65470150000002 2.404 69.1098556 1.48 59.867461100000035 1.764 52.9311089 2.439 45.34638260000001 1.842 48.9203526999997 9.807 51.88867180000002 2.282 67.60409860000028 10.899 133.83601510000003 12.116 42.656137500000014 2.67 87.69195130000098 8.906 111.80244370000001 3.449 128.3180239999999 4.01 70.73961839999998 11.59 40.978706599999974 1.686 74.95253540000004 2.675 59.75246859999999 1.48 62.562927099999 10.544 95.57794810000131 10.281 115.75165030000001 13.037 101.05487079999997 9.981 74.88866750000058 9.406 92.85592609999999 4.03)
Error minima by case: (17.6815 8 3.6156 2 3.1183 1 25.2445 1 18.7883 1 10.6798 2 5.0 1 0.6531 7 6.0 1 0.5964 2 25.2446 10 3.6741 2 39.1101 3 75.0 3 87.0 3 3.9938 7 0.4099 1 21.1448 2 19.0 1 0.3141 2 42.6383 3 36.1005 10 50.2212 2 3.7661 7 49.0 2)
Average genome size in population (length): 82.642
Average program size in population (points): 83.642
Average percent parens in population: 0.012
Minimum age in population: 134.7293634122458
Maximum age in population: 139.4801786363005
Average age in population: 137.4301907326592
Median age in population: 137.4694855676989
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.836
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.836
Total error diversity:				 0.309
Error (vector) diversity:			 0.309
Behavioral diversity:				 0.31
--- Run Statistics ---
Number of program evaluations used so far: 98000
Number of point (instruction) evaluations so far: 179787604
--- Timings ---
Current time: 1529615436785 milliseconds
Total Time:         407.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       149.2 seconds, 36.6%
Fitness Testing:    207.0 seconds, 50.8%
Report:              51.1 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 97
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 98
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 98
;;******************************
;; -*- Number IO problem report - generation 98
Test total error for best: 46927.20629999998
Test mean error for best: 23.46360
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 26.6390022777 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -0.6616225738 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_max} {:instruction 67.59641311186607} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_max} {:instruction tagged_115} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_swap} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_yank float_max 67.59641311186607 integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 in2 float_tan integer_shove float_dec float_mod integer_mod float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 float_stackdepth integer_max tagged_115 float_inc float_dec float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_sub float_yankdup integer_div in2 float_tan integer_swap in1 float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [18.6815 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 32.8209 12 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1011.2383
Mean: 20.224766
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2212.3542391000033
Median total errors in population: 1066.10745
Error averages by case: (76.00931689999997 11.08 63.715599399999945 3.447 119.2918791 2.483 73.0256425 1.58 63.90078880000006 1.868 57.005662699999995 2.53 50.696704400000016 1.971 56.582051499999736 9.8 54.242556799999996 2.288 73.40114910000027 10.852 137.5478865 12.12 47.21826020000002 2.771 94.08264810000054 8.82 117.1386454 3.488 130.71155009999993 4.002 77.34715249999996 11.667 46.31049109999999 1.823 78.87875980000005 2.763 64.7706943 1.577 68.53390689999934 10.387 101.9655506000009 10.209 119.4635358 13.032 107.48707379999999 9.839 83.77082390000065 9.447 95.3859089 4.026)
Error minima by case: (13.6795 8 3.6156 2 3.6757 1 25.2445 1 18.2411 1 10.6798 2 5.0 1 0.172 6 6.0 1 1.2769 2 6.9713 10 1.6174 2 38.796 3 74.0 3 40.3219 3 3.9938 8 0.4996 1 21.7863 2 19.0 1 6.4732 2 22.3242 3 18.0954 8 28.9072 2 3.7661 8 49.0 2)
Average genome size in population (length): 82.795
Average program size in population (points): 83.795
Average percent parens in population: 0.012
Minimum age in population: 135.7293634122458
Maximum age in population: 140.617408292131
Average age in population: 138.7930834440008
Median age in population: 138.8289969332375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.829
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.829
Total error diversity:				 0.31
Error (vector) diversity:			 0.31
Behavioral diversity:				 0.31
--- Run Statistics ---
Number of program evaluations used so far: 99000
Number of point (instruction) evaluations so far: 181857479
--- Timings ---
Current time: 1529615441137 milliseconds
Total Time:         411.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       150.7 seconds, 36.6%
Fitness Testing:    209.3 seconds, 50.8%
Report:              51.7 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 98
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 99
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 99
;;******************************
;; -*- Number IO problem report - generation 99
Test total error for best: 46927.20629999998
Test mean error for best: 23.46360
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 26.6390022777 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -0.6616225738 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_max} {:instruction tagged_115} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_swap} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_yank float_cos float_cos 67.59641311186607 integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 in2 float_tan integer_shove float_dec float_mod integer_mod float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 float_stackdepth integer_max tagged_115 float_inc float_dec float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_sub float_yankdup integer_div in2 float_tan integer_swap in1 float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [18.6815 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 32.8209 12 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1011.2383
Mean: 20.224766
Genome size: 80
Size: 81
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2317.7395084000027
Median total errors in population: 1077.4319
Error averages by case: (79.25298380000025 11.147 65.85980669999995 3.539 124.0145298 2.509 77.8736376 1.597 68.81086940000003 1.966 62.804465099999994 2.554 55.32442800000002 2.084 61.65209419999964 9.847 59.085694700000005 2.392 76.78919190000025 10.724 142.1292284 12.14 53.15802820000001 2.855 97.20482110000073 8.999 121.1252376 3.554 135.25743539999993 4.128 81.02502440000013 11.719 52.02453429999999 1.867 83.75284190000008 2.852 68.6165677 1.594 72.64424779999956 10.351 104.45172440000104 10.328 124.35566269999998 13.048 110.02914439999998 10.047 85.45696220000065 9.563 99.48934670000001 4.147)
Error minima by case: (13.6795 9 3.6156 2 3.1183 1 29.0 1 19.0 1 12.0 2 5.0 1 0.1725 7 5.0 1 7.481 2 24.0552 9 3.0 2 1.3141 3 0.3141 3 86.0 3 6.3458 8 0.828 1 28.358 2 19.0 1 5.8442 2 21.3141 2 33.5581 10 22.3141 2 5.748 6 48.0 2)
Average genome size in population (length): 82.84
Average program size in population (points): 83.84
Average percent parens in population: 0.012
Minimum age in population: 136.7293634122458
Maximum age in population: 142.3593080003638
Average age in population: 140.1572617697019
Median age in population: 140.2124176753323
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.861
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.861
Total error diversity:				 0.301
Error (vector) diversity:			 0.303
Behavioral diversity:				 0.303
--- Run Statistics ---
Number of program evaluations used so far: 100000
Number of point (instruction) evaluations so far: 183928529
--- Timings ---
Current time: 1529615445520 milliseconds
Total Time:         416.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       152.2 seconds, 36.6%
Fitness Testing:    211.6 seconds, 50.8%
Report:              52.3 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 99
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 100
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 100
;;******************************
;; -*- Number IO problem report - generation 100
Test total error for best: 46927.20629999998
Test mean error for best: 23.46360
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 26.6390022777 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -0.6616225738 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction integer_swap} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_max} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_dup} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_yank float_cos 67.59641311186607 integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup float_rot in2 integer_mod integer_swap float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 float_stackdepth integer_dec integer_yankdup float_inc float_dec float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_max in1 float_mod float_max 31 integer_div in2 float_tan integer_shove float_dup_times float_stackdepth integer_dec integer_dup float_shove integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [18.6815 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 32.8209 12 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1011.2383
Mean: 20.224766
Genome size: 82
Size: 83
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2702.4060781000035
Median total errors in population: 1106.1895999999997
Error averages by case: (93.35599440000081 11.18 84.56167229999996 3.733 139.0470204 2.665 93.240489 1.76 84.29378190000001 2.062 77.54618880000001 2.715 70.14163640000002 2.235 75.50557460000049 9.93 77.91024599999999 2.572 90.86001170000033 10.913 156.90307240000007 12.231 67.25121150000001 2.965 112.24981120000162 8.819 134.40678789999998 3.666 152.11228619999997 4.27 95.22795570000075 11.785 65.28359979999995 2.008 99.14842980000009 2.962 83.865659 1.756 88.27218170000016 10.49 120.3861164000019 10.094 139.2612918 13.145 125.39662459999998 9.795 100.80168020000167 9.64 117.68375439999998 4.302)
Error minima by case: (5.002 8 12.8876 2 70.0102 1 25.2445 1 19.0 1 10.6798 2 3.5204 1 0.5951 7 5.0 1 0.5964 2 97.0 12 3.0 2 35.9754 3 75.0 3 86.0 3 0.1447 7 4.0 1 35.0 2 19.0 1 5.8442 2 22.3242 2 77.0 11 28.9072 2 5.1663 8 48.0 2)
Average genome size in population (length): 82.941
Average program size in population (points): 83.941
Average percent parens in population: 0.012
Minimum age in population: 137.7293634122458
Maximum age in population: 143.6976424612392
Average age in population: 141.5635472431827
Median age in population: 141.622569700293
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.863
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.863
Total error diversity:				 0.317
Error (vector) diversity:			 0.318
Behavioral diversity:				 0.318
--- Run Statistics ---
Number of program evaluations used so far: 101000
Number of point (instruction) evaluations so far: 186002104
--- Timings ---
Current time: 1529615450043 milliseconds
Total Time:         420.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       153.7 seconds, 36.5%
Fitness Testing:    214.0 seconds, 50.9%
Report:              52.8 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 100
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 101
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 101
;;******************************
;; -*- Number IO problem report - generation 101
Test total error for best: 46927.20629999998
Test mean error for best: 23.46360
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 26.6390022777 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -0.6616225738 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.1947695517409} {:instruction integer_rot} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_yank} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_rot} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_yank float_cos 67.1947695517409 integer_rot float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_yank float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_yankdup float_rot float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 float_stackdepth integer_dec integer_yankdup float_inc float_dec float_mod integer_yankdup float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_rot float_yankdup integer_div in2 float_tan integer_shove in1 float_mod float_max 31 integer_div in2 float_tan integer_shove in1 integer_mult float_shove integer_add integer_stackdepth integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [18.6815 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 32.8209 12 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1011.2383
Mean: 20.224766
Genome size: 82
Size: 83
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2194.1431849000037
Median total errors in population: 1105.1318999999999
Error averages by case: (74.13888950000015 11.122 62.38558499999995 3.471 117.74117890000001 2.417 71.1911313 1.493 62.08664780000005 1.837 55.0411015 2.459 49.310092300000015 2.005 55.36314409999971 9.92 55.73001070000002 2.429 73.60467130000022 10.723 136.0771026 12.154 45.6683996 2.771 93.69745190000096 8.654 116.21632149999999 3.412 132.6591493999999 4.097 77.71224830000018 11.771 44.18471729999998 1.777 77.16382730000005 2.744 63.6577439 1.485 69.29379789999939 10.301 101.98344210000117 9.97 118.1855811 13.069 106.95124559999996 9.688 83.69018120000088 9.587 96.89752279999998 4.156)
Error minima by case: (5.7796 8 2.8749 2 3.1183 2 24.2445 1 20.0 1 9.6798 2 6.0 1 0.5828 7 2.7551 1 7.481 2 26.5227 11 2.1552 2 35.9754 3 25.0 2 87.0 3 2.1713 8 0.828 1 28.358 2 20.0 1 5.8442 2 22.3242 3 38.1742 11 28.9072 2 4.1663 8 49.0 3)
Average genome size in population (length): 83.243
Average program size in population (points): 84.243
Average percent parens in population: 0.012
Minimum age in population: 138.7293634122458
Maximum age in population: 144.9722511283583
Average age in population: 142.8728710384953
Median age in population: 142.9119054782479
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.871
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.871
Total error diversity:				 0.315
Error (vector) diversity:			 0.317
Behavioral diversity:				 0.317
--- Run Statistics ---
Number of program evaluations used so far: 102000
Number of point (instruction) evaluations so far: 188083254
--- Timings ---
Current time: 1529615454374 milliseconds
Total Time:         425.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       155.1 seconds, 36.5%
Fitness Testing:    216.3 seconds, 50.9%
Report:              53.5 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 101
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 102
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 102
;;******************************
;; -*- Number IO problem report - generation 102
Test total error for best: 46927.20629999998
Test mean error for best: 23.46360
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 26.6390022777 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -0.6616225738 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_rot} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_fromfloat integer_rot integer_yank float_cos 67.59641311186607 integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup float_rot in2 integer_mod float_yankdup float_rot float_max float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 float_stackdepth integer_dec integer_yankdup float_inc float_dec float_mod integer_yankdup float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_rot float_yankdup integer_div in2 float_tan integer_shove in1 float_mod float_max 31 integer_div in2 float_tan integer_shove in1 integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [18.6815 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 32.8209 12 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1011.2383
Mean: 20.224766
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2311.8071297000038
Median total errors in population: 1101.1927999999998
Error averages by case: (78.48815780000044 11.12 66.80054109999995 3.584 124.01871650000002 2.503 77.53041940000001 1.598 68.46120270000003 1.897 61.40472529999999 2.552 54.17860040000001 1.99 60.821182799999754 9.874 58.658950499999996 2.562 76.5536172000002 10.779 142.19838650000003 12.15 51.50868710000002 2.793 98.40953980000104 8.682 120.75886390000001 3.528 134.44318929999994 4.271 80.10444210000041 11.707 50.893667499999964 1.853 83.51834520000007 2.789 68.2508183 1.586 73.28106979999966 10.352 105.82851220000124 10.029 124.07755350000001 13.059 111.46843299999998 9.676 86.04656290000102 9.592 99.28994490000002 4.287)
Error minima by case: (5.002 7 12.8876 2 3.6757 1 25.2445 1 20.0 1 10.6798 2 5.0 1 0.5063 7 6.0 1 1.2923 2 26.4927 12 4.0 2 28.0493 3 74.0 3 87.0 3 2.1713 6 1.3854 1 28.9154 2 19.0 1 5.8442 2 31.5775 2 37.6168 10 39.1604 2 1.7068 7 49.0 2)
Average genome size in population (length): 83.487
Average program size in population (points): 84.487
Average percent parens in population: 0.012
Minimum age in population: 139.7293634122458
Maximum age in population: 146.2821539975096
Average age in population: 144.2264763398231
Median age in population: 144.236631414107
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.867
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.867
Total error diversity:				 0.315
Error (vector) diversity:			 0.316
Behavioral diversity:				 0.316
--- Run Statistics ---
Number of program evaluations used so far: 103000
Number of point (instruction) evaluations so far: 190170554
--- Timings ---
Current time: 1529615459251 milliseconds
Total Time:         429.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       156.8 seconds, 36.5%
Fitness Testing:    218.8 seconds, 50.9%
Report:              54.1 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 102
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 103
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 103
;;******************************
;; -*- Number IO problem report - generation 103
Test total error for best: 46927.20629999998
Test mean error for best: 23.46360
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 26.6390022777 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -0.6616225738 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_max} {:instruction tagged_115} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_swap} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_yank float_cos 67.59641311186607 integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 in2 float_tan integer_shove float_dec float_mod integer_mod float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 float_stackdepth integer_max tagged_115 float_inc float_dec float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_sub float_yankdup integer_div in2 float_tan integer_swap in1 float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_mult float_shove integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [18.6815 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 32.8209 12 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1011.2383
Mean: 20.224766
Genome size: 82
Size: 83
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2645.4319335000023
Median total errors in population: 1116.2687
Error averages by case: (94.60186660000066 11.244 82.36435719999992 3.726 135.3753738 2.672 89.7401884 1.752 80.81317980000004 2.087 73.93410209999999 2.703 66.70677310000002 2.232 73.88310960000005 10.02 74.82932670000002 2.625 90.51157540000032 10.923 153.32292830000006 12.287 64.03018430000002 2.997 109.7052509000012 8.849 132.0197085 3.635 149.67412059999995 4.327 95.97157490000053 11.85 62.437765599999956 2.024 95.63775690000011 3.033 80.5109781 1.747 85.42297279999973 10.52 117.67782040000144 10.163 135.9127354 13.205 122.91734829999997 9.818 103.73905620000116 9.73 115.15887959999998 4.364)
Error minima by case: (10.6629 8 3.6156 2 3.1183 1 25.2445 1 20.0 1 10.6798 2 5.0 1 0.2973 7 6.0 1 7.481 2 25.4927 10 4.0 2 40.1101 3 75.0 3 87.0 3 6.3458 7 0.4099 1 28.358 2 19.0 1 5.8442 2 43.6383 3 36.6168 12 51.2212 2 6.748 8 49.0 2)
Average genome size in population (length): 84.044
Average program size in population (points): 85.044
Average percent parens in population: 0.012
Minimum age in population: 142.5417747054397
Maximum age in population: 147.5651874912754
Average age in population: 145.6752522904809
Median age in population: 145.7501002322486
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.876
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.876
Total error diversity:				 0.311
Error (vector) diversity:			 0.314
Behavioral diversity:				 0.315
--- Run Statistics ---
Number of program evaluations used so far: 104000
Number of point (instruction) evaluations so far: 192271804
--- Timings ---
Current time: 1529615463628 milliseconds
Total Time:         434.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       158.3 seconds, 36.4%
Fitness Testing:    221.1 seconds, 50.9%
Report:              54.8 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 103
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 104
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 104
;;******************************
;; -*- Number IO problem report - generation 104
Test total error for best: 46927.20629999998
Test mean error for best: 23.46360
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 26.6390022777 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -0.6616225738 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_max} {:instruction tagged_115} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_max} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_yank float_cos 67.59641311186607 integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 in2 float_tan integer_shove float_dec float_mod integer_mod float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 float_stackdepth integer_max tagged_115 float_inc float_dec float_mod integer_dec integer_yankdup float_inc float_dec float_stackdepth float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_max in1 float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [18.6815 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 32.8209 12 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1011.2383
Mean: 20.224766
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2361.4490979000034
Median total errors in population: 1093.7043999999999
Error averages by case: (83.06352170000044 11.178 70.76784459999993 3.537 124.45435290000002 2.572 78.46864309999998 1.665 69.23838560000004 1.866 62.50624749999999 2.609 55.80283190000002 1.917 63.31411289999957 9.892 61.024753800000006 2.387 77.57384360000022 10.855 142.5681068 12.206 52.1906686 2.774 100.25622060000094 8.736 122.6414904 3.594 138.99810919999993 4.149 84.90669330000036 11.762 51.12679489999997 1.799 84.19982720000006 2.79 70.80950779999999 1.675 74.81760119999946 10.478 108.60425820000101 10.017 124.40818930000002 13.128 113.64495349999997 9.682 88.046197000001 9.556 103.01994229999997 4.172)
Error minima by case: (13.6795 8 0.9573 2 3.6757 1 25.2445 1 20.0 1 10.6798 2 4.4426 1 2.0007 7 6.0 1 0.5964 2 25.2446 10 4.0 2 1.3141 3 0.3141 2 40.3219 3 1.5882 7 1.3854 1 28.9154 2 18.4426 1 7.4036 2 21.3141 3 36.1005 10 22.3141 2 3.7661 8 49.0 2)
Average genome size in population (length): 84.309
Average program size in population (points): 85.309
Average percent parens in population: 0.012
Minimum age in population: 144.4221951401801
Maximum age in population: 148.8868361103002
Average age in population: 147.0462493803765
Median age in population: 147.0877387042439
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.858
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.858
Total error diversity:				 0.317
Error (vector) diversity:			 0.321
Behavioral diversity:				 0.321
--- Run Statistics ---
Number of program evaluations used so far: 105000
Number of point (instruction) evaluations so far: 194379954
--- Timings ---
Current time: 1529615468511 milliseconds
Total Time:         439.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       159.8 seconds, 36.4%
Fitness Testing:    223.8 seconds, 51.0%
Report:              55.3 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 104
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 105
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 105
;;******************************
;; -*- Number IO problem report - generation 105
Test total error for best: 46927.20629999998
Test mean error for best: 23.46360
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 26.6390022777 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -0.6616225738 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction integer_rot} {:instruction in2} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_max} {:instruction tagged_115} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_mult} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_max} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_yank float_cos 67.59641311186607 integer_rot in2 integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 in2 float_tan integer_shove float_dec float_mod integer_mod float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_swap float_mult float_dec float_mod integer_shove in1 float_stackdepth integer_max tagged_115 float_inc float_dec float_mod integer_dec integer_yankdup float_inc float_dec float_mod float_max float_yankdup integer_div integer_mult float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_max in1 float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_mult float_shove float_yank integer_stackdepth in1 integer_sub float_max print_float)
Errors: [18.6815 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 32.8209 12 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1011.2383
Mean: 20.224766
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2125.446012400005
Median total errors in population: 1053.74255
Error averages by case: (71.93665559999988 11.065 58.29267239999995 3.402 116.57074180000002 2.456 70.0528046 1.539 60.733806100000045 1.737 53.91006339999999 2.496 47.441054500000014 1.887 53.212946699999726 9.829 50.55262129999999 2.305 68.78750540000024 10.89 134.82036789999998 12.138 44.2173584 2.661 91.66401460000073 8.89 115.2969254 3.494 126.77229549999988 4.041 74.98018519999995 11.696 43.99401779999999 1.69 75.26579850000003 2.669 61.55093859999999 1.536 65.02291169999904 10.495 98.48981190000111 10.28 116.4929086 13.071 104.03145809999998 9.941 77.29583200000049 9.384 90.40631640000001 4.062)
Error minima by case: (17.6815 8 7.761 2 3.1183 1 18.155 1 20.0 1 3.5903 2 5.0 1 0.8858 7 6.0 1 9.5771 2 25.4927 11 4.0 2 39.1101 3 74.0 3 87.0 3 6.3458 7 0.828 1 28.358 2 19.0 1 2.2891 2 42.6383 3 36.6168 11 50.2212 2 3.7661 8 49.0 2)
Average genome size in population (length): 84.18
Average program size in population (points): 85.18
Average percent parens in population: 0.012
Minimum age in population: 146.0636009239659
Maximum age in population: 150.3407855918807
Average age in population: 148.4020041131847
Median age in population: 148.4394176937162
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.853
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.853
Total error diversity:				 0.309
Error (vector) diversity:			 0.31
Behavioral diversity:				 0.31
--- Run Statistics ---
Number of program evaluations used so far: 106000
Number of point (instruction) evaluations so far: 196484704
--- Timings ---
Current time: 1529615472787 milliseconds
Total Time:         443.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       161.2 seconds, 36.3%
Fitness Testing:    226.2 seconds, 51.0%
Report:              56.0 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 105
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 106
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 106
;;******************************
;; -*- Number IO problem report - generation 106
Test total error for best: 46927.20629999998
Test mean error for best: 23.46360
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 26.6390022777 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -0.6616225738 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction integer_rot} {:instruction in2} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_rot} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction float_add} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_yank float_cos integer_rot integer_yank float_cos 67.59641311186607 integer_rot in2 integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup float_frominteger in2 float_tan integer_shove in1 integer_pop integer_dec float_mult float_dec float_mod integer_shove in1 float_stackdepth integer_dec integer_yankdup float_inc float_dec float_mod integer_yankdup float_yankdup integer_div in2 float_dec float_mod float_rot float_yankdup integer_div in2 float_tan integer_shove in1 float_mod float_max 31 integer_div float_add float_tan integer_shove in1 integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [18.6815 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 32.8209 12 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1011.2383
Mean: 20.224766
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2176.0866982000034
Median total errors in population: 1060.4559
Error averages by case: (72.5523272 11.114 61.91608969999994 3.465 119.5363803 2.489 72.0454486 1.554 62.87976230000005 1.828 56.8801738 2.523 49.14246830000001 1.964 53.06816079999971 9.765 54.1000313 2.36 69.8831219000002 10.917 136.8332344 12.138 45.615670800000004 2.718 91.62140130000125 8.881 115.22543580000003 3.515 131.19989169999994 4.129 75.1026630000001 11.683 45.046985999999954 1.761 78.93432390000007 2.761 64.521637 1.567 66.12179409999919 10.538 99.78983100000141 10.199 118.75032669999999 13.065 104.95139679999996 9.92 80.63984810000093 9.432 95.30129339999998 4.141)
Error minima by case: (17.6815 8 0.1172 2 3.1183 1 18.155 1 20.0 1 3.5903 2 4.4426 1 0.3939 7 6.0 1 1.2923 2 24.5624 9 4.0 2 1.3141 2 0.3141 2 87.0 3 2.1713 7 0.872 1 28.358 2 18.4426 1 5.8442 2 4.0 2 36.1245 11 3.0 1 6.748 8 49.0 3)
Average genome size in population (length): 84.081
Average program size in population (points): 85.081
Average percent parens in population: 0.012
Minimum age in population: 147.0636009239659
Maximum age in population: 151.659226229133
Average age in population: 149.7564499963405
Median age in population: 149.7851075531393
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.868
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.868
Total error diversity:				 0.304
Error (vector) diversity:			 0.304
Behavioral diversity:				 0.305
--- Run Statistics ---
Number of program evaluations used so far: 107000
Number of point (instruction) evaluations so far: 198587054
--- Timings ---
Current time: 1529615477141 milliseconds
Total Time:         447.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       162.7 seconds, 36.3%
Fitness Testing:    228.5 seconds, 51.0%
Report:              56.6 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 106
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 107
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 107
;;******************************
;; -*- Number IO problem report - generation 107
Test total error for best: 46927.20629999998
Test mean error for best: 23.46360
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 26.6390022777 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -0.6616225738 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction integer_dup_times} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_max} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_yank float_cos 67.59641311186607 integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup float_rot integer_dup_times integer_mod float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 float_stackdepth integer_dec integer_yankdup float_inc float_dec float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_max in1 float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec integer_mult float_shove integer_dec integer_mult float_shove float_yank integer_stackdepth in1 integer_sub float_max print_float)
Errors: [18.6815 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 32.8209 12 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1011.2383
Mean: 20.224766
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2079.365917400003
Median total errors in population: 1098.40035
Error averages by case: (69.99496999999987 11.067 55.19884879999995 3.391 115.8149477 2.412 68.90875650000001 1.482 59.61582540000002 1.721 52.652464599999995 2.449 45.74361290000002 1.866 49.7690005999997 9.796 45.68034790000001 2.267 66.02911470000025 10.963 134.0696822 12.137 43.348611899999995 2.667 88.9811387000007 8.791 112.18967460000002 3.446 125.0779134999999 4.051 70.9510667999999 11.639 43.445043499999976 1.7 74.85153670000004 2.667 59.3982228 1.476 62.416001499999155 10.548 97.49416170000094 10.061 115.74145150000001 13.077 102.40435819999998 9.827 77.23157600000046 9.466 89.30158870000001 4.089)
Error minima by case: (17.6815 9 0.0427 2 3.1183 1 25.2445 1 20.0 1 10.6798 2 5.0 1 1.1215 7 2.2208 1 1.2923 2 25.3026 9 4.0 2 1.3141 3 0.3141 3 87.0 3 6.3458 7 0.828 1 28.358 2 19.0 1 5.8442 2 21.3141 3 36.7212 11 22.3141 2 3.7661 8 49.0 2)
Average genome size in population (length): 84.204
Average program size in population (points): 85.204
Average percent parens in population: 0.012
Minimum age in population: 148.3742742040774
Maximum age in population: 153.2645685859771
Average age in population: 151.1465119376331
Median age in population: 151.1815564077301
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.875
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.875
Total error diversity:				 0.313
Error (vector) diversity:			 0.313
Behavioral diversity:				 0.313
--- Run Statistics ---
Number of program evaluations used so far: 108000
Number of point (instruction) evaluations so far: 200692529
--- Timings ---
Current time: 1529615481578 milliseconds
Total Time:         452.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       164.2 seconds, 36.3%
Fitness Testing:    230.9 seconds, 51.0%
Report:              57.1 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 107
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 108
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 108
;;******************************
;; -*- Number IO problem report - generation 108
Test total error for best: 46927.20629999998
Test mean error for best: 23.46360
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 26.6390022777 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -0.6616225738 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction float_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dup_times} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot float_yank float_cos 67.59641311186607 integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup float_rot in2 integer_mod float_yankdup float_rot float_max float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 float_stackdepth integer_dup_times integer_yankdup float_inc float_dec float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod float_max 31 integer_div in2 float_tan integer_shove in1 integer_mult float_shove integer_add integer_stackdepth in1 integer_sub float_max print_float)
Errors: [18.6815 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 32.8209 12 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1011.2383
Mean: 20.224766
Genome size: 80
Size: 81
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2267.7482723000026
Median total errors in population: 1099.72355
Error averages by case: (78.86904849999996 11.106 64.06856099999996 3.484 122.35049390000003 2.475 76.1581312 1.549 66.898245 1.782 60.14467249999999 2.505 52.33476680000001 1.938 58.83122329999967 9.809 56.77723349999998 2.351 74.8933651000003 10.82 140.40837510000003 12.151 49.8232792 2.696 94.43927500000055 8.769 117.5633481 3.508 135.34692149999995 4.073 80.02898459999996 11.669 50.03540069999998 1.729 81.90416530000002 2.714 66.087538 1.559 72.3478896999993 10.49 102.32950540000101 10.117 122.1337934 13.086 107.69082859999996 9.776 84.44862130000068 9.522 98.04160560000004 4.115)
Error minima by case: (9.0429 8 3.5656 2 3.1183 1 16.9951 1 6.9951 1 0.0049 2 5.0 1 0.5063 7 6.0 1 0.3458 2 25.3026 9 2.2596 2 15.8568 2 25.0 2 87.0 3 6.3458 8 0.828 1 22.9951 2 1.4238 1 5.8442 2 4.0 2 36.6689 10 3.0 1 3.7661 7 49.0 2)
Average genome size in population (length): 83.574
Average program size in population (points): 84.574
Average percent parens in population: 0.012
Minimum age in population: 150.264132071479
Maximum age in population: 154.4984205873632
Average age in population: 152.5605481056571
Median age in population: 152.6181554979686
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.885
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.885
Total error diversity:				 0.306
Error (vector) diversity:			 0.308
Behavioral diversity:				 0.308
--- Run Statistics ---
Number of program evaluations used so far: 109000
Number of point (instruction) evaluations so far: 202782154
--- Timings ---
Current time: 1529615485936 milliseconds
Total Time:         456.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       165.6 seconds, 36.3%
Fitness Testing:    233.2 seconds, 51.1%
Report:              57.7 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 108
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 109
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 109
;;******************************
;; -*- Number IO problem report - generation 109
Test total error for best: 46927.20629999998
Test mean error for best: 23.46360
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 26.6390022777 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: -0.6616225738 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction integer_shove} {:instruction 67.59641311186607} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction -54} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_max} {:instruction tagged_115} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_yank integer_shove 67.59641311186607 integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup -54 in2 float_tan integer_shove float_dec float_mod integer_mod float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 float_stackdepth integer_max tagged_115 float_inc float_dec float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap integer_mult float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max print_float)
Errors: [18.6815 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 32.8209 12 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 1011.2383
Mean: 20.224766
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2502.5512251000023
Median total errors in population: 1105.1318999999999
Error averages by case: (85.55712660000026 11.133 74.25611329999995 3.621 132.51375380000002 2.587 86.60498810000001 1.713 77.61475320000001 2.021 70.6784234 2.65 61.02156030000002 2.092 66.5248912999998 9.856 69.6911543 2.615 83.49060450000019 10.902 150.35459360000004 12.167 58.735618 2.885 103.28260030000082 8.865 126.40358980000002 3.594 145.27655789999994 4.325 86.58500020000032 11.643 55.81616589999997 1.894 92.46515160000007 2.911 75.39641040000001 1.703 78.42885469999985 10.512 111.15692700000086 10.205 132.72678140000005 13.063 116.42850939999997 9.878 93.87848470000088 9.526 110.95561139999998 4.346)
Error minima by case: (5.002 8 2.7232 2 4.6757 1 25.2445 1 19.0 1 10.6798 2 5.0 1 1.0232 7 6.0 1 0.5964 2 25.4927 9 3.0 2 1.3141 3 0.3141 3 40.3219 3 6.3458 6 1.3854 1 21.1448 2 19.0 1 5.8442 2 21.3141 2 36.6168 9 22.3141 2 6.748 8 3.9016 2)
Average genome size in population (length): 83.305
Average program size in population (points): 84.305
Average percent parens in population: 0.012
Minimum age in population: 151.5010916290184
Maximum age in population: 155.8482932415603
Average age in population: 153.9991206095435
Median age in population: 154.0943866322422
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.87
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.87
Total error diversity:				 0.334
Error (vector) diversity:			 0.335
Behavioral diversity:				 0.336
--- Run Statistics ---
Number of program evaluations used so far: 110000
Number of point (instruction) evaluations so far: 204865154
--- Timings ---
Current time: 1529615490241 milliseconds
Total Time:         461.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       167.1 seconds, 36.2%
Fitness Testing:    235.6 seconds, 51.1%
Report:              58.2 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 109
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 110
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 110
;;******************************
;; -*- Number IO problem report - generation 110
Test total error for best: 48301.19809999997
Test mean error for best: 24.15060
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 22.1506611101 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 22.1506611101 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_max} {:instruction tagged_115} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 22.150661110105858} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_yank float_cos 67.59641311186607 integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 in2 float_tan integer_shove float_dec float_mod integer_mod float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 float_stackdepth integer_max tagged_115 float_inc float_dec float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 22.150661110105858 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max print_float)
Errors: [23.1699 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 10.0086 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 989.9143999999999
Mean: 19.798288
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2002.0793615000034
Median total errors in population: 1107.9843499999997
Error averages by case: (66.99367399999976 11.067 54.805098399999956 3.338 112.314972 2.378 65.2278132 1.44 55.91596040000001 1.677 48.90537789999999 2.404 40.600620100000015 1.712 47.104480799999706 9.829 46.129711799999995 2.225 63.57302290000025 10.825 130.66149349999998 12.1 38.674754400000005 2.587 86.13293680000044 8.571 108.48936750000001 3.353 124.09680229999995 4.064 68.64627169999969 11.658 36.5394219 1.582 71.19355240000003 2.603 56.4440648 1.441 58.977363199999395 10.379 94.22160480000062 9.972 112.31739510000001 13.023 99.73607249999998 9.578 75.67402660000018 9.519 87.33150249999998 4.047)
Error minima by case: (5.002 7 3.6156 2 3.6757 2 25.2445 1 20.0 1 10.6798 2 6.0 1 1.1864 7 6.0 1 0.0 0 25.4927 9 4.0 2 1.3141 3 0.3141 3 87.0 3 1.8668 6 1.3854 1 28.9154 2 6.8596 1 0.0 0 21.3141 3 36.6168 9 22.3141 2 5.1663 8 49.0 3)
Average genome size in population (length): 83.563
Average program size in population (points): 84.563
Average percent parens in population: 0.012
Minimum age in population: 153.0955724088761
Maximum age in population: 157.1185591183224
Average age in population: 155.3139240814914
Median age in population: 155.3911807748153
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.848
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.848
Total error diversity:				 0.325
Error (vector) diversity:			 0.325
Behavioral diversity:				 0.325
--- Run Statistics ---
Number of program evaluations used so far: 111000
Number of point (instruction) evaluations so far: 206954754
--- Timings ---
Current time: 1529615494537 milliseconds
Total Time:         465.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       168.5 seconds, 36.2%
Fitness Testing:    237.9 seconds, 51.1%
Report:              58.7 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 110
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 111
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 111
;;******************************
;; -*- Number IO problem report - generation 111
Test total error for best: 48301.19809999997
Test mean error for best: 24.15060
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 22.1506611101 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 22.1506611101 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_max} {:instruction tagged_115} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 22.150661110105858} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_yank float_cos 67.59641311186607 integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 in2 float_tan integer_shove float_dec float_mod integer_mod float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 float_stackdepth integer_max tagged_115 float_inc float_dec float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 22.150661110105858 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max print_float)
Errors: [23.1699 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 10.0086 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 989.9143999999999
Mean: 19.798288
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2248.876961100003
Median total errors in population: 1067.0537
Error averages by case: (76.81398340000024 11.125 63.22763809999996 3.424 121.8669424 2.524 74.7084918 1.618 66.59587310000003 1.903 59.6273147 2.57 52.14080710000002 1.973 55.78151479999962 9.852 56.16835360000001 2.425 73.40061830000025 10.917 140.0343365 12.177 50.98513210000001 2.799 93.98187720000135 8.85 118.1740722 3.538 133.30501999999996 4.164 78.37532230000029 11.721 49.67443329999997 1.836 81.53944460000007 2.798 65.5431361 1.612 69.69783439999935 10.495 101.92825450000147 10.206 122.2215294 13.104 108.19767089999998 9.885 82.1554399000011 9.485 97.52492039999998 4.206)
Error minima by case: (18.6815 8 0.1172 2 3.1183 2 25.2445 1 20.0 1 10.6798 2 6.0 1 0.0775 7 6.0 1 7.481 2 25.4218 10 4.0 2 40.1101 3 75.0 3 87.0 3 3.9938 7 0.4099 1 21.1448 2 20.0 1 5.8442 2 43.6383 3 36.5962 10 51.2212 2 6.748 8 49.0 3)
Average genome size in population (length): 83.037
Average program size in population (points): 84.037
Average percent parens in population: 0.012
Minimum age in population: 154.1805190385776
Maximum age in population: 158.8745320600883
Average age in population: 156.7305815658682
Median age in population: 156.7751566747636
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.863
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.863
Total error diversity:				 0.303
Error (vector) diversity:			 0.303
Behavioral diversity:				 0.303
--- Run Statistics ---
Number of program evaluations used so far: 112000
Number of point (instruction) evaluations so far: 209031304
--- Timings ---
Current time: 1529615498816 milliseconds
Total Time:         469.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       169.9 seconds, 36.2%
Fitness Testing:    240.2 seconds, 51.2%
Report:              59.3 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 111
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 112
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 112
;;******************************
;; -*- Number IO problem report - generation 112
Test total error for best: 48301.19809999997
Test mean error for best: 24.15060
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 22.1506611101 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 22.1506611101 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_max} {:instruction tagged_115} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 22.150661110105858} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_yank float_cos 67.59641311186607 integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 in2 float_tan integer_shove float_dec float_mod integer_mod float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 float_stackdepth integer_max tagged_115 float_inc float_dec float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 22.150661110105858 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max print_float)
Errors: [23.1699 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 10.0086 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 989.9143999999999
Mean: 19.798288
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2619.621992400003
Median total errors in population: 1077.7386000000001
Error averages by case: (90.53619980000055 11.155 79.63784729999998 3.627 136.15285720000003 2.614 90.29554669999999 1.713 81.3264497 2.014 74.3884173 2.658 67.84910960000002 2.119 72.42282119999996 9.878 72.19680499999998 2.594 87.99097430000018 10.865 154.10414240000006 12.203 63.623995799999996 2.895 109.72855060000138 8.838 132.42209770000005 3.622 147.08164600000003 4.31 92.1162195000006 11.723 62.37817469999997 1.947 96.20708360000006 2.906 81.9645611 1.712 84.46181279999983 10.479 117.55890830000158 10.185 136.3963479 13.099 123.09654659999998 9.776 96.45885080000137 9.534 112.4180265 4.342)
Error minima by case: (8.7236 8 9.761 2 3.6757 1 25.2445 1 20.0 1 10.6798 2 5.0 1 0.5247 7 6.0 1 1.2923 2 26.4927 9 4.0 2 1.3141 3 0.3141 3 87.0 3 6.3458 7 1.3854 1 28.9154 2 19.0 1 0.3141 2 21.3141 3 37.6168 9 22.3141 2 0.4149 7 49.0 2)
Average genome size in population (length): 83.385
Average program size in population (points): 84.385
Average percent parens in population: 0.012
Minimum age in population: 155.5348375754107
Maximum age in population: 159.9629146452209
Average age in population: 158.1547789741037
Median age in population: 158.1975346749588
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.87
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.87
Total error diversity:				 0.309
Error (vector) diversity:			 0.31
Behavioral diversity:				 0.31
--- Run Statistics ---
Number of program evaluations used so far: 113000
Number of point (instruction) evaluations so far: 211116679
--- Timings ---
Current time: 1529615503161 milliseconds
Total Time:         473.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       171.3 seconds, 36.2%
Fitness Testing:    242.7 seconds, 51.2%
Report:              59.8 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 112
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 113
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 113
;;******************************
;; -*- Number IO problem report - generation 113
Test total error for best: 48271.30139999997
Test mean error for best: 24.13565
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 22.1506611101 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 22.1506611101 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction float_flush} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_max} {:instruction tagged_115} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 22.150661110105858} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot float_flush float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 in2 float_tan integer_shove float_dec float_mod integer_mod float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 float_stackdepth integer_max tagged_115 float_inc float_dec float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 22.150661110105858 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max print_float)
Errors: [23.1699 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 10.0086 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 989.0051
Mean: 19.780102
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2323.1803745000016
Median total errors in population: 1091.4425999999999
Error averages by case: (81.42630590000007 11.19 69.59393039999995 3.602 123.2413975 2.522 76.9734464 1.605 67.91410380000003 1.936 60.948795399999995 2.562 52.60917090000001 1.961 61.408590099999685 9.866 61.10055849999999 2.572 78.06052070000023 10.79 141.37976989999996 12.203 51.04729080000001 2.913 96.97147150000063 8.765 119.7556706 3.549 137.39307179999997 4.267 83.19710850000018 11.675 49.492999999999995 1.897 82.89405710000007 2.833 67.6313115 1.602 74.27553979999973 10.386 105.06836280000064 10.099 123.52679739999999 13.126 110.25760539999997 9.782 89.11803240000054 9.586 102.33946540000005 4.266)
Error minima by case: (17.6815 8 1.0 1 3.6757 1 21.3287 1 20.0 1 6.7641 2 5.0 1 1.0879 7 6.0 1 1.0 1 25.7488 10 4.0 2 1.3141 2 0.3141 2 87.0 3 6.3458 7 0.4099 1 28.9154 2 19.0 1 1.0 1 4.0 2 37.2196 11 3.0 1 3.7661 7 49.0 2)
Average genome size in population (length): 83.717
Average program size in population (points): 84.717
Average percent parens in population: 0.012
Minimum age in population: 156.6094762407181
Maximum age in population: 161.3830776086927
Average age in population: 159.5014919038304
Median age in population: 159.5419773661527
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.859
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.859
Total error diversity:				 0.317
Error (vector) diversity:			 0.318
Behavioral diversity:				 0.319
--- Run Statistics ---
Number of program evaluations used so far: 114000
Number of point (instruction) evaluations so far: 213210404
--- Timings ---
Current time: 1529615507429 milliseconds
Total Time:         478.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       172.8 seconds, 36.1%
Fitness Testing:    245.0 seconds, 51.2%
Report:              60.3 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 113
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 114
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 114
;;******************************
;; -*- Number IO problem report - generation 114
Test total error for best: 48271.30139999997
Test mean error for best: 24.13565
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 22.1506611101 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 22.1506611101 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_max} {:instruction tagged_115} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 22.150661110105858} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_yank float_cos 67.59641311186607 integer_rot in2 float_cos integer_dup float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 in2 float_tan integer_shove float_dec float_mod integer_mod float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 float_stackdepth integer_max tagged_115 float_inc float_dec float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 22.150661110105858 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max print_float)
Errors: [23.1699 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 10.0086 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 989.0051
Mean: 19.780102
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2416.508350300002
Median total errors in population: 1091.4425999999999
Error averages by case: (84.17844180000014 11.163 69.48486719999995 3.69 127.6791798 2.531 81.63133219999999 1.626 72.72240170000003 2.01 65.6318969 2.573 56.58031230000002 2.08 64.44935529999971 9.821 66.27327480000004 2.808 80.73310430000022 10.889 145.78201979999997 12.183 54.57600459999997 3.034 102.737877000001 8.757 124.55872800000002 3.599 140.76404709999994 4.399 83.36538910000033 11.403 52.244003399999954 2.062 87.59937680000007 2.898 71.35897130000001 1.611 76.30527289999964 10.528 109.7870664000013 10.091 128.24478290000002 13.091 114.87371429999997 9.794 92.67033150000097 9.517 105.64859890000004 4.47)
Error minima by case: (5.6712 8 0.1172 2 3.1183 1 25.2445 1 20.0 1 10.6798 2 5.0 1 1.1134 7 6.0 1 0.5964 2 25.5448 11 4.0 2 1.3141 2 0.3141 2 87.0 3 8.5113 7 0.828 1 28.358 2 19.0 1 7.4036 2 4.0 2 36.6689 11 3.0 1 6.748 7 49.0 2)
Average genome size in population (length): 83.328
Average program size in population (points): 84.328
Average percent parens in population: 0.012
Minimum age in population: 158.3185320869468
Maximum age in population: 163.074004622567
Average age in population: 160.8860254472268
Median age in population: 160.9359539860339
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.875
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.875
Total error diversity:				 0.342
Error (vector) diversity:			 0.342
Behavioral diversity:				 0.343
--- Run Statistics ---
Number of program evaluations used so far: 115000
Number of point (instruction) evaluations so far: 215294229
--- Timings ---
Current time: 1529615511836 milliseconds
Total Time:         482.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       174.3 seconds, 36.1%
Fitness Testing:    247.4 seconds, 51.3%
Report:              60.8 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 114
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 115
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 115
;;******************************
;; -*- Number IO problem report - generation 115
Test total error for best: 48304.04059999997
Test mean error for best: 24.15202
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 22.9139934914 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 22.9139934914 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_flush} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_sub} {:instruction float_inc} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 22.913993491405808} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_fromfloat integer_rot integer_yank float_cos 67.59641311186607 integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_max float_yankdup float_rot float_frominteger integer_mod float_yankdup integer_flush float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 float_stackdepth integer_dec integer_sub float_inc float_dec float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 22.913993491405808 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_dup_items in1 integer_sub float_max print_float)
Errors: [22.4065 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 9.2453 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 988.3877
Mean: 19.767754
Genome size: 87
Size: 88
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2654.200516500003
Median total errors in population: 1085.7500499999999
Error averages by case: (90.02500619999982 11.204 82.28966089999992 3.918 137.17422720000002 2.619 91.4508447 1.716 82.3348953 1.926 75.5840911 2.657 66.84610190000001 2.043 74.60112449999995 9.919 77.61819430000006 2.92 91.77374990000015 10.891 155.0258542 12.197 63.62963699999996 3.121 111.36076520000128 8.803 133.6063554 3.675 151.09317840000003 4.575 86.50576040000044 10.918 62.46589789999995 2.166 97.20733100000004 2.84 82.1089841 1.712 87.51780109999979 10.543 118.62542610000142 10.142 136.81190270000002 13.11 124.05261909999999 9.818 99.62016280000118 9.568 117.23394510000004 4.636)
Error minima by case: (5.7121 8 2.6156 2 2.5515 1 30.0 1 20.0 1 13.0 2 2.305 1 0.4231 7 6.0 1 4.7497 2 24.7895 11 4.0 2 17.7239 3 25.0 2 87.0 3 5.9702 7 2.1421 1 29.9154 2 19.0 1 4.8442 2 21.2521 3 36.2843 10 28.8351 2 3.7661 8 49.0 2)
Average genome size in population (length): 83.035
Average program size in population (points): 84.035
Average percent parens in population: 0.012
Minimum age in population: 159.6179612173715
Maximum age in population: 164.410060628815
Average age in population: 162.3928911389438
Median age in population: 162.4666205029714
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 33
Genome diversity (% unique Plush genomes):	 0.826
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.826
Total error diversity:				 0.366
Error (vector) diversity:			 0.368
Behavioral diversity:				 0.369
--- Run Statistics ---
Number of program evaluations used so far: 116000
Number of point (instruction) evaluations so far: 217370879
--- Timings ---
Current time: 1529615516437 milliseconds
Total Time:         487.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       175.7 seconds, 36.1%
Fitness Testing:    249.9 seconds, 51.3%
Report:              61.3 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 115
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 116
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 116
;;******************************
;; -*- Number IO problem report - generation 116
Test total error for best: 48363.164499999984
Test mean error for best: 24.18158
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 26.6390022777 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 22.1506611101 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction float_cos} {:instruction 66.78157484920919} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 29} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 22.150661110105858} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot float_cos 66.78157484920919 integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_yankdup float_rot in2 integer_mod float_yankdup integer_fromfloat integer_flush float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod float_max 29 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 22.150661110105858 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_dup_items in1 integer_sub float_max print_float)
Errors: [18.6815 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 10.0086 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 985.4259999999999
Mean: 19.70852
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2035.4830399000011
Median total errors in population: 1079.7356999999997
Error averages by case: (65.04380340000036 11.161 57.17673479999995 3.61 112.3477385 2.476 65.6151189 1.563 56.28306620000002 1.787 49.4165339 2.504 43.62480880000001 1.849 49.72324629999973 9.803 52.5262997 2.865 66.51583540000024 10.543 130.75728299999997 12.126 42.642788899999985 3.229 86.55973930000047 8.559 108.9319158 3.499 128.00087580000013 4.485 55.334124000000294 10.104 43.13769569999995 2.247 71.44684410000004 2.688 56.15176829999999 1.552 62.79687679999925 10.438 95.16092270000091 9.838 112.4440405 13.034 100.21424799999998 9.502 77.26371370000041 9.584 92.7810174 4.54)
Error minima by case: (5.002 8 2.3727 2 3.6757 1 25.2445 1 19.8004 1 10.6798 2 5.0 1 0.1867 7 6.0 1 1.1275 2 25.2446 9 4.0 2 1.3141 2 0.3141 2 46.6781 3 8.4621 8 1.3854 1 7.7647 2 2.1507 1 4.6013 2 4.0 2 36.1005 9 3.0 1 0.0 0 3.9016 2)
Average genome size in population (length): 82.253
Average program size in population (points): 83.253
Average percent parens in population: 0.012
Minimum age in population: 161.4405632252695
Maximum age in population: 165.7721399036447
Average age in population: 163.8966998566599
Median age in population: 163.9302854126617
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 46
Genome diversity (% unique Plush genomes):	 0.817
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 46
Syntactic diversity (% unique Push programs):	 0.817
Total error diversity:				 0.355
Error (vector) diversity:			 0.355
Behavioral diversity:				 0.355
--- Run Statistics ---
Number of program evaluations used so far: 117000
Number of point (instruction) evaluations so far: 219427779
--- Timings ---
Current time: 1529615520737 milliseconds
Total Time:         491.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       177.2 seconds, 36.1%
Fitness Testing:    252.1 seconds, 51.3%
Report:              62.0 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 116
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 117
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 117
;;******************************
;; -*- Number IO problem report - generation 117
Test total error for best: 48363.164499999984
Test mean error for best: 24.18158
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 26.6390022777 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 22.1506611101 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction float_cos} {:instruction 66.78157484920919} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 29} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 22.150661110105858} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot float_cos 66.78157484920919 integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_yankdup float_rot in2 integer_mod float_yankdup integer_fromfloat integer_flush float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod float_max 29 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 22.150661110105858 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_dup_items in1 integer_sub float_max print_float)
Errors: [18.6815 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 10.0086 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 985.4259999999999
Mean: 19.70852
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2565.612997600001
Median total errors in population: 1070.1187
Error averages by case: (86.50522699999931 11.27 79.66497069999988 3.801 133.32528010000001 2.662 87.79636020000001 1.755 78.56317099999998 1.857 72.0781189 2.684 64.61003350000001 1.992 71.07821959999987 9.895 74.28143890000007 2.909 88.3097505999998 10.495 151.2980277 12.229 62.34780969999996 3.247 107.94562200000108 8.77 130.1433851 3.626 148.22528450000013 4.549 75.27884840000044 9.885 61.89776449999994 2.284 93.34696590000003 2.772 78.73365950000002 1.743 84.32615009999985 10.671 116.16283730000129 10.047 133.1118526 13.176 121.16948589999997 9.736 95.41560140000122 9.603 113.7471325000001 4.592)
Error minima by case: (5.002 8 3.6156 2 3.7641 1 27.2908 1 19.0 1 10.6798 2 5.0 1 0.8487 7 5.0 1 4.0237 2 24.5239 10 3.0 2 35.9754 3 52.8493 3 86.0 3 7.6055 8 0.4099 1 7.7647 2 2.1507 1 1.0182 2 22.3242 2 35.7604 10 28.9072 2 6.748 8 48.0 2)
Average genome size in population (length): 80.906
Average program size in population (points): 81.906
Average percent parens in population: 0.012
Minimum age in population: 162.4405632252695
Maximum age in population: 167.30326613016
Average age in population: 165.4228705075871
Median age in population: 165.4660732291572
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 31
Genome diversity (% unique Plush genomes):	 0.769
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.769
Total error diversity:				 0.349
Error (vector) diversity:			 0.351
Behavioral diversity:				 0.352
--- Run Statistics ---
Number of program evaluations used so far: 118000
Number of point (instruction) evaluations so far: 221450554
--- Timings ---
Current time: 1529615525271 milliseconds
Total Time:         496.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       178.8 seconds, 36.1%
Fitness Testing:    254.5 seconds, 51.3%
Report:              62.5 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 117
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 118
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 118
;;******************************
;; -*- Number IO problem report - generation 118
Test total error for best: 48363.164499999984
Test mean error for best: 24.18158
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 26.6390022777 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 22.1506611101 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction float_cos} {:instruction 66.78157484920919} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 29} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 22.150661110105858} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot float_cos 66.78157484920919 integer_rot float_frominteger float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_yankdup float_rot in2 integer_mod float_yankdup integer_fromfloat integer_flush float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod float_max 29 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 22.150661110105858 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_dup_items in1 integer_sub float_max print_float)
Errors: [18.6815 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 10.0086 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 985.4259999999999
Mean: 19.70852
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2055.883017300001
Median total errors in population: 1072.3194999999998
Error averages by case: (64.08697320000047 11.185 57.7078561999999 3.725 115.264924 2.437 68.5887888 1.505 59.08622760000002 1.651 52.388226499999995 2.472 44.16555770000001 1.808 49.09231539999976 9.732 52.38402090000004 2.935 67.70384910000013 9.902 133.5673314 12.119 41.208626099999975 3.247 87.88848060000063 8.657 110.51125640000001 3.422 127.93447530000017 4.545 51.930632100000366 9.695 40.810838399999945 2.261 74.28436500000002 2.573 59.3964333 1.509 64.0777977999993 10.372 96.26991610000074 9.962 114.82071050000002 13.045 101.33750989999997 9.668 75.7492633000003 9.573 92.99964170000008 4.627)
Error minima by case: (6.327 9 0.5143 2 3.7641 2 27.2908 1 19.8004 1 13.0 2 3.473 1 1.223 7 6.0 1 12.8591 2 25.2446 10 4.0 2 1.3141 3 0.3141 3 87.0 3 0.1922 7 1.4932 1 7.7647 2 2.1507 1 9.9628 2 21.3141 3 36.1005 9 22.3141 2 6.748 8 49.0 3)
Average genome size in population (length): 80.639
Average program size in population (points): 81.639
Average percent parens in population: 0.012
Minimum age in population: 164.330845884656
Maximum age in population: 168.4963137153272
Average age in population: 166.8229306947654
Median age in population: 166.8249236561492
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.792
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.792
Total error diversity:				 0.321
Error (vector) diversity:			 0.322
Behavioral diversity:				 0.322
--- Run Statistics ---
Number of program evaluations used so far: 119000
Number of point (instruction) evaluations so far: 223466604
--- Timings ---
Current time: 1529615529879 milliseconds
Total Time:         500.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       180.4 seconds, 36.0%
Fitness Testing:    257.1 seconds, 51.4%
Report:              63.1 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 118
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 119
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 119
;;******************************
;; -*- Number IO problem report - generation 119
Test total error for best: 48363.164499999984
Test mean error for best: 24.18158
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 26.6390022777 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 22.1506611101 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction float_cos} {:instruction 66.78157484920919} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 29} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 22.150661110105858} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot float_cos 66.78157484920919 integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_yankdup float_rot in2 integer_mod float_yankdup integer_fromfloat integer_flush float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod float_max 29 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 22.150661110105858 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_dup_items in1 integer_sub float_max print_float)
Errors: [18.6815 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 10.0086 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 985.4259999999999
Mean: 19.70852
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2454.867650200001
Median total errors in population: 1083.6104999999998
Error averages by case: (80.47488929999957 11.249 75.30812949999994 3.943 128.746135 2.539 82.4413444 1.617 73.29672510000002 1.87 66.3757611 2.575 59.5378088 1.98 66.51154469999977 9.861 71.20617640000007 3.218 85.96991759999966 10.037 146.80402700000005 12.172 58.27776529999999 3.367 103.56524240000091 8.456 124.5161063 3.524 146.27219820000013 4.827 68.33027080000045 9.749 58.160080699999924 2.445 88.32321680000005 2.773 72.84482639999999 1.611 78.60448279999991 10.495 112.314138200001 9.711 128.67336600000002 13.095 117.21738619999998 9.33 94.05757640000105 9.604 112.08653480000015 4.904)
Error minima by case: (18.6815 9 4.1507 2 5.0867 2 30.0 1 20.0 1 13.0 2 5.5802 1 1.647 6 6.0 1 2.3971 2 24.5239 10 4.0 2 24.072 3 74.0 3 87.0 3 9.2453 7 1.9338 1 30.9137 2 6.7914 1 5.8442 2 27.6002 3 35.7604 11 35.1831 2 5.6841 8 49.0 3)
Average genome size in population (length): 81.257
Average program size in population (points): 82.257
Average percent parens in population: 0.012
Minimum age in population: 166.0976980628396
Maximum age in population: 170.1350528523064
Average age in population: 168.2728896165565
Median age in population: 168.3171517833738
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.802
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.802
Total error diversity:				 0.368
Error (vector) diversity:			 0.369
Behavioral diversity:				 0.369
--- Run Statistics ---
Number of program evaluations used so far: 120000
Number of point (instruction) evaluations so far: 225498079
--- Timings ---
Current time: 1529615534328 milliseconds
Total Time:         504.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       181.7 seconds, 36.0%
Fitness Testing:    259.4 seconds, 51.4%
Report:              63.6 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 119
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 120
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 120
;;******************************
;; -*- Number IO problem report - generation 120
Test total error for best: 48363.164499999984
Test mean error for best: 24.18158
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 26.6390022777 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 22.1506611101 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction float_cos} {:instruction 66.78157484920919} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 29} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 22.150661110105858} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot float_cos 66.78157484920919 integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_yankdup float_rot in2 integer_mod float_yankdup integer_fromfloat integer_flush float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod float_max 29 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 22.150661110105858 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_dup_items in1 integer_sub float_max print_float)
Errors: [18.6815 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 10.0086 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 985.4259999999999
Mean: 19.70852
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2445.297690999999
Median total errors in population: 1082.78985
Error averages by case: (79.10813519999974 11.281 72.40950559999987 3.893 130.5371928 2.595 83.5533058 1.677 75.34077710000004 1.903 68.56756449999999 2.632 59.61219340000001 2.061 63.02100799999975 9.852 68.50236920000013 3.186 82.54230629999982 10.077 148.4477608 12.177 58.01464429999995 3.603 104.11973690000097 8.65 126.9925718 3.583 142.40450460000022 4.755 67.4186175000005 9.827 56.20153279999991 2.629 90.28138420000005 2.817 74.15275630000001 1.669 77.34338589999946 10.293 112.34605750000125 9.978 129.277056 13.086 118.26191579999997 9.645 92.08675500000075 9.71 108.30965370000013 4.866)
Error minima by case: (13.6795 9 6.5051 2 17.4749 2 27.2908 1 19.8004 1 13.0 2 5.0 1 1.1149 7 6.0 1 7.481 2 12.4878 10 4.0 2 38.796 3 75.0 3 40.3219 3 8.7603 8 5.0 1 7.7647 2 11.8405 1 5.8442 2 22.3242 3 23.6119 10 28.9072 2 5.748 8 49.0 3)
Average genome size in population (length): 83.068
Average program size in population (points): 84.068
Average percent parens in population: 0.012
Minimum age in population: 167.3642044591685
Maximum age in population: 171.7782238934097
Average age in population: 169.6519735516167
Median age in population: 169.6761857040504
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 59
Genome diversity (% unique Plush genomes):	 0.803
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.803
Total error diversity:				 0.365
Error (vector) diversity:			 0.366
Behavioral diversity:				 0.366
--- Run Statistics ---
Number of program evaluations used so far: 121000
Number of point (instruction) evaluations so far: 227574779
--- Timings ---
Current time: 1529615538986 milliseconds
Total Time:         509.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       183.3 seconds, 36.0%
Fitness Testing:    262.0 seconds, 51.4%
Report:              64.3 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 120
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 121
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 121
;;******************************
;; -*- Number IO problem report - generation 121
Test total error for best: 48380.87679999996
Test mean error for best: 24.19044
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 26.6390022777 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 22.9139934914 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction float_cos} {:instruction 66.78157484920919} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 29} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 22.913993491405808} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot float_cos 66.78157484920919 integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_yankdup float_rot in2 integer_mod float_yankdup integer_fromfloat integer_flush float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod float_max 29 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 22.913993491405808 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_dup_items in1 integer_sub float_max print_float)
Errors: [18.6815 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 9.2453 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 984.6627
Mean: 19.693254
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2521.8369504000007
Median total errors in population: 1093.75155
Error averages by case: (87.34669399999986 11.249 76.17662589999989 3.806 130.8836287 2.596 84.77780730000002 1.697 75.56743180000001 1.876 68.7916219 2.634 61.25482900000001 1.976 70.78441689999993 9.905 72.55356240000006 3.184 88.27387029999993 10.138 148.86560350000002 12.186 59.94832559999998 3.457 106.46865340000102 8.402 126.8103413 3.586 146.35088980000015 4.778 74.1689216000004 9.931 60.208538099999906 2.522 90.54224860000004 2.794 75.33326879999998 1.681 84.75479989999984 10.105 115.45973120000122 9.63 130.6163882 13.101 120.14593279999998 9.254 98.48329030000117 9.811 112.07152910000013 4.899)
Error minima by case: (13.6795 8 3.6156 2 4.6757 2 25.2445 1 19.8004 1 10.6798 2 5.3435 1 1.223 7 6.0 1 2.0 1 25.4927 9 4.0 2 24.0 2 24.2166 2 87.0 3 8.7603 8 2.8751 1 7.7647 2 2.1507 1 2.0 1 4.0 2 36.6168 9 3.0 1 6.748 7 49.0 3)
Average genome size in population (length): 84.951
Average program size in population (points): 85.951
Average percent parens in population: 0.012
Minimum age in population: 168.9726634381584
Maximum age in population: 173.0776534641355
Average age in population: 170.9298203311197
Median age in population: 170.9611181556405
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 87
Genome diversity (% unique Plush genomes):	 0.813
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 87
Syntactic diversity (% unique Push programs):	 0.813
Total error diversity:				 0.376
Error (vector) diversity:			 0.376
Behavioral diversity:				 0.377
--- Run Statistics ---
Number of program evaluations used so far: 122000
Number of point (instruction) evaluations so far: 229698579
--- Timings ---
Current time: 1529615543451 milliseconds
Total Time:         514.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       184.7 seconds, 35.9%
Fitness Testing:    264.3 seconds, 51.4%
Report:              64.8 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 121
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 122
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 122
;;******************************
;; -*- Number IO problem report - generation 122
Test total error for best: 48380.87679999996
Test mean error for best: 24.19044
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 26.6390022777 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 22.9139934914 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction integer_rot} {:instruction in2} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 29} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 22.913993491405808} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_div} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_yank float_cos 67.59641311186607 integer_rot in2 integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_yankdup float_rot in2 integer_mod float_yankdup integer_fromfloat integer_flush float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod float_max 29 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 22.913993491405808 float_shove integer_dec integer_div float_shove integer_add integer_dup_items in1 integer_sub float_max integer_dup_items in1 integer_sub float_max print_float)
Errors: [18.6815 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 9.2453 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 984.6627
Mean: 19.693254
Genome size: 89
Size: 90
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2298.6189231000003
Median total errors in population: 1079.3195999999998
Error averages by case: (77.73912109999996 11.167 68.33769649999986 3.624 124.08188220000001 2.476 77.64241299999999 1.551 68.25925660000003 1.671 61.5005429 2.503 52.01627910000001 1.809 59.65586509999969 9.768 64.86584260000014 2.994 75.79544020000017 10.617 142.1499139 12.179 49.06451529999997 3.402 97.03259190000064 8.72 119.4476161 3.448 139.5660132000003 4.596 63.12213490000053 9.826 47.98564379999994 2.448 83.38760870000003 2.603 68.1355615 1.532 73.54494779999945 10.352 105.60874890000106 9.991 123.555128 13.117 110.53117859999999 9.697 86.13608040000062 9.609 105.0529008000001 4.704)
Error minima by case: (13.6795 7 6.5051 2 4.0558 1 30.0 1 20.0 1 13.0 2 5.0 1 0.78 7 6.0 1 4.7497 2 26.1127 12 4.0 2 1.3141 3 16.1063 3 40.3219 3 8.7603 8 1.7654 1 29.2954 2 2.1507 1 5.8442 2 21.3141 3 37.2368 9 22.3141 2 6.748 7 49.0 3)
Average genome size in population (length): 86.246
Average program size in population (points): 87.246
Average percent parens in population: 0.012
Minimum age in population: 170.2471422902985
Maximum age in population: 174.3133756778543
Average age in population: 172.2994556494618
Median age in population: 172.3674868369263
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 97
Genome diversity (% unique Plush genomes):	 0.787
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 97
Syntactic diversity (% unique Push programs):	 0.787
Total error diversity:				 0.337
Error (vector) diversity:			 0.338
Behavioral diversity:				 0.338
--- Run Statistics ---
Number of program evaluations used so far: 123000
Number of point (instruction) evaluations so far: 231854779
--- Timings ---
Current time: 1529615547965 milliseconds
Total Time:         518.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       186.3 seconds, 35.9%
Fitness Testing:    266.8 seconds, 51.4%
Report:              65.5 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 122
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 123
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 123
;;******************************
;; -*- Number IO problem report - generation 123
Test total error for best: 48380.87679999996
Test mean error for best: 24.19044
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 26.6390022777 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 22.9139934914 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction float_cos} {:instruction 67.39956373280218} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 29} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 22.913993491405808} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot float_cos 67.39956373280218 integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_yankdup float_rot in2 integer_mod float_yankdup integer_fromfloat integer_flush float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 29 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 22.913993491405808 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_dup_items in1 integer_sub float_max print_float)
Errors: [18.6815 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 9.2453 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 984.6627
Mean: 19.693254
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2224.724696899998
Median total errors in population: 1100.5988
Error averages by case: (73.14684039999999 11.149 63.663775499999836 3.881 121.44712089999999 2.473 74.8272213 1.559 65.54371460000002 1.729 58.677221100000004 2.509 49.99236240000001 1.866 57.075393999999726 9.814 61.77055050000015 3.371 71.9272499000002 10.381 139.65047350000003 12.131 47.712864299999936 3.531 95.03225590000079 8.315 115.8871726 3.456 135.05771100000027 4.868 58.961148000000456 9.913 46.789408999999935 2.584 80.67632150000003 2.649 65.4385391 1.54 68.69912499999927 10.071 103.59143950000103 9.563 121.177743 13.062 108.7165216 9.143 83.45147120000074 9.68 101.58805110000013 4.985)
Error minima by case: (5.002 7 3.6156 2 17.4749 2 25.2445 1 19.8004 1 10.6798 2 5.3435 1 0.8751 7 6.0 1 4.7497 2 47.6433 11 4.0 2 1.3141 3 0.3141 3 87.0 3 1.7921 8 5.0 1 7.7647 2 2.1507 1 5.8442 2 21.3141 3 58.7674 10 22.3141 2 5.748 8 49.0 3)
Average genome size in population (length): 87.102
Average program size in population (points): 88.102
Average percent parens in population: 0.011
Minimum age in population: 171.3413692108399
Maximum age in population: 175.7557898687302
Average age in population: 173.6557991057785
Median age in population: 173.6829917431157
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 87
Genome diversity (% unique Plush genomes):	 0.807
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 87
Syntactic diversity (% unique Push programs):	 0.807
Total error diversity:				 0.334
Error (vector) diversity:			 0.334
Behavioral diversity:				 0.334
--- Run Statistics ---
Number of program evaluations used so far: 124000
Number of point (instruction) evaluations so far: 234032354
--- Timings ---
Current time: 1529615552703 milliseconds
Total Time:         523.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       187.9 seconds, 35.9%
Fitness Testing:    269.2 seconds, 51.4%
Report:              66.1 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 123
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 124
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 124
;;******************************
;; -*- Number IO problem report - generation 124
Test total error for best: 48380.87679999996
Test mean error for best: 24.19044
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 26.6390022777 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 22.9139934914 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction float_cos} {:instruction 67.39956373280218} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 29} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 22.913993491405808} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot float_cos 67.39956373280218 integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_yankdup float_rot in2 integer_mod float_yankdup integer_fromfloat integer_flush float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 29 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 22.913993491405808 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_dup_items in1 integer_sub float_max print_float)
Errors: [18.6815 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 9.2453 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 984.6627
Mean: 19.693254
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2366.0685351999973
Median total errors in population: 1100.5988
Error averages by case: (79.64108229999994 11.166 69.33990999999988 3.793 126.8184799 2.553 80.5540113 1.644 71.29552380000003 1.821 64.5011407 2.595 55.80467560000002 1.97 62.32465859999973 9.854 65.94227260000011 3.186 78.39422510000013 10.618 144.8764435 12.186 53.53018899999994 3.502 101.03141430000095 8.574 123.1560091 3.556 139.91548100000026 4.736 64.60172590000046 9.936 53.87097079999993 2.546 86.34883020000004 2.751 71.13237569999998 1.632 74.39973969999951 10.311 108.3167005000011 9.845 126.3654703 13.109 113.81537989999998 9.494 88.63247960000072 9.703 105.54334580000014 4.835)
Error minima by case: (5.6712 8 3.6156 2 3.1183 1 25.2445 1 20.0 1 10.6798 2 5.0 1 0.0785 7 6.0 1 7.481 2 25.4927 9 1.6479 2 1.3141 3 0.3141 3 87.0 3 2.9682 8 0.828 1 28.358 2 19.0 1 5.8442 2 21.3141 3 36.6168 9 22.3141 2 6.748 7 49.0 2)
Average genome size in population (length): 87.381
Average program size in population (points): 88.381
Average percent parens in population: 0.011
Minimum age in population: 172.4355961313814
Maximum age in population: 177.3852389920966
Average age in population: 175.0678254390315
Median age in population: 175.1245476274284
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 67
Genome diversity (% unique Plush genomes):	 0.821
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 67
Syntactic diversity (% unique Push programs):	 0.821
Total error diversity:				 0.347
Error (vector) diversity:			 0.349
Behavioral diversity:				 0.349
--- Run Statistics ---
Number of program evaluations used so far: 125000
Number of point (instruction) evaluations so far: 236216879
--- Timings ---
Current time: 1529615557209 milliseconds
Total Time:         527.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       189.5 seconds, 35.9%
Fitness Testing:    271.6 seconds, 51.4%
Report:              66.8 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 124
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 125
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 125
;;******************************
;; -*- Number IO problem report - generation 125
Test total error for best: 48380.87679999996
Test mean error for best: 24.19044
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 26.6390022777 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 22.9139934914 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction float_cos} {:instruction 66.78157484920919} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 29} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 22.913993491405808} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot float_cos 66.78157484920919 integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_yankdup float_rot in2 integer_mod float_yankdup integer_fromfloat integer_flush float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod float_max 29 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 22.913993491405808 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_dup_items in1 integer_sub float_max print_float)
Errors: [18.6815 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 9.2453 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 984.6627
Mean: 19.693254
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2136.1964099999973
Median total errors in population: 1100.2970999999998
Error averages by case: (71.38314439999975 11.157 60.88513089999998 3.725 115.6993211 2.441 68.9287595 1.497 59.57525770000001 1.667 52.765673 2.463 44.94036599999997 1.925 55.581541699999825 9.834 58.91423720000012 3.261 70.8924709000002 10.455 134.0187072 12.16 43.8613436 3.507 92.53362380000081 8.139 113.1292865 3.436 133.22733520000017 4.797 57.3340953000004 9.879 43.84289589999992 2.519 74.74183340000003 2.589 59.48389 1.488 68.08770179999945 10.23 101.03182260000092 9.498 115.47266 13.107 105.78726639999998 8.992 82.17648330000068 9.666 98.55256260000009 4.917)
Error minima by case: (5.002 8 3.6156 2 6.8939 1 26.5274 1 19.0371 1 13.0 2 5.0 1 0.471 7 6.0 1 6.7262 2 25.7488 10 4.0 2 16.8812 3 25.0 3 87.0 3 9.0086 8 0.4099 1 7.0014 2 0.3994 1 5.0894 2 4.0 3 37.2196 12 3.0 2 6.748 7 49.0 2)
Average genome size in population (length): 88.106
Average program size in population (points): 89.106
Average percent parens in population: 0.011
Minimum age in population: 173.8011858947518
Maximum age in population: 178.7114169664863
Average age in population: 176.463185344923
Median age in population: 176.4859173186767
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 41
Genome diversity (% unique Plush genomes):	 0.828
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.828
Total error diversity:				 0.374
Error (vector) diversity:			 0.376
Behavioral diversity:				 0.376
--- Run Statistics ---
Number of program evaluations used so far: 126000
Number of point (instruction) evaluations so far: 238419529
--- Timings ---
Current time: 1529615562086 milliseconds
Total Time:         532.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       191.1 seconds, 35.9%
Fitness Testing:    274.0 seconds, 51.4%
Report:              67.3 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 125
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 126
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 126
;;******************************
;; -*- Number IO problem report - generation 126
Test total error for best: 48380.87679999996
Test mean error for best: 24.19044
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 26.6390022777 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 22.9139934914 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction float_cos} {:instruction 67.39956373280218} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 29} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 22.913993491405808} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_dup_items} {:instruction in1} {:instruction float_max} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot float_cos 67.39956373280218 integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_yankdup float_rot in2 integer_mod float_yankdup integer_fromfloat integer_flush float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 29 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 22.913993491405808 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_dup_items in1 float_max in1 integer_sub float_max print_float)
Errors: [18.6815 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 9.2453 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 984.6627
Mean: 19.693254
Genome size: 94
Size: 95
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2019.776400599996
Median total errors in population: 1078.5563
Error averages by case: (65.85158309999947 11.116 54.795148899999965 3.427 113.4196 2.351 66.38365479999999 1.408 56.94869760000002 1.567 50.07578410000001 2.382 41.67039009999999 2.005 48.82841859999974 9.732 50.85551740000011 2.908 65.53312640000026 10.425 131.71027889999996 12.131 40.15118840000002 3.252 87.05558590000041 8.532 109.3566127 3.339 127.24001870000008 4.517 51.210994900000316 9.837 39.46315809999999 2.3 72.2323911 2.496 56.4744309 1.4 62.475873499999224 10.198 95.74304270000067 9.938 112.90870939999999 13.077 100.76057799999998 9.498 74.96724040000042 9.481 91.70937600000015 4.638)
Error minima by case: (13.6795 8 0.8828 2 18.2383 1 25.2445 1 19.0371 1 10.6798 2 5.0 1 0.0945 7 6.0 1 2.7477 2 48.4067 12 4.0 2 38.796 3 74.0 3 87.0 3 9.2453 9 5.0 1 7.0014 2 19.0 1 0.0 0 22.3242 3 59.5308 11 28.9072 2 6.748 7 49.0 2)
Average genome size in population (length): 89.082
Average program size in population (points): 90.082
Average percent parens in population: 0.011
Minimum age in population: 175.6093962600832
Maximum age in population: 179.9874441103995
Average age in population: 177.9080083973338
Median age in population: 177.9317470259808
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 47
Genome diversity (% unique Plush genomes):	 0.798
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.798
Total error diversity:				 0.359
Error (vector) diversity:			 0.359
Behavioral diversity:				 0.36
--- Run Statistics ---
Number of program evaluations used so far: 127000
Number of point (instruction) evaluations so far: 240646579
--- Timings ---
Current time: 1529615566987 milliseconds
Total Time:         537.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       192.6 seconds, 35.8%
Fitness Testing:    276.8 seconds, 51.5%
Report:              68.1 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 126
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 127
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 127
;;******************************
;; -*- Number IO problem report - generation 127
Test total error for best: 48380.87679999996
Test mean error for best: 24.19044
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 26.6390022777 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 22.9139934914 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction float_cos} {:instruction 67.39956373280218} {:instruction integer_rot} {:instruction in2} {:instruction float_inc} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 29} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 22.913993491405808} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot float_cos 67.39956373280218 integer_rot in2 float_inc 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_yankdup float_rot in2 integer_mod float_yankdup integer_fromfloat integer_flush float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 29 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 22.913993491405808 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_dup_items in1 integer_sub float_max print_float)
Errors: [18.6815 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 9.2453 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 984.6627
Mean: 19.693254
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2001.2335834999963
Median total errors in population: 1083.32865
Error averages by case: (66.77735209999953 11.104 54.78329890000002 3.481 111.84532470000002 2.398 65.13054520000001 1.462 55.70409050000003 1.607 48.913801299999996 2.424 39.6401233 2.181 49.135683299999805 9.78 52.439940600000085 3.067 65.53499940000023 10.562 130.1927987 12.12 38.83173220000003 3.185 85.51481390000062 8.546 107.877936 3.398 127.68171500000004 4.663 51.045067300000575 9.84 38.096473199999984 2.207 70.92833030000003 2.565 54.7854756 1.457 60.86605839999912 10.222 94.07785490000094 10.053 111.6210301 13.049 99.17672429999999 9.482 74.56177680000049 9.546 92.92063750000008 4.751)
Error minima by case: (0.1003 8 2.6156 2 3.6757 1 18.155 1 20.0 1 3.5903 2 5.0 1 1.1215 7 6.0 1 0.5964 2 25.2446 9 4.0 2 12.7967 3 17.1087 3 40.3219 3 9.2453 8 1.3854 1 28.9154 2 19.0 1 5.8442 2 22.3242 3 36.1005 8 10.3837 2 6.748 8 49.0 2)
Average genome size in population (length): 89.597
Average program size in population (points): 90.597
Average percent parens in population: 0.011
Minimum age in population: 177.2365005681493
Maximum age in population: 181.272402218075
Average age in population: 179.2936611548995
Median age in population: 179.3343664713104
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 53
Genome diversity (% unique Plush genomes):	 0.791
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 53
Syntactic diversity (% unique Push programs):	 0.791
Total error diversity:				 0.328
Error (vector) diversity:			 0.328
Behavioral diversity:				 0.328
--- Run Statistics ---
Number of program evaluations used so far: 128000
Number of point (instruction) evaluations so far: 242886504
--- Timings ---
Current time: 1529615571579 milliseconds
Total Time:         542.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       194.0 seconds, 35.8%
Fitness Testing:    279.3 seconds, 51.5%
Report:              68.7 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 127
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 128
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 128
;;******************************
;; -*- Number IO problem report - generation 128
Test total error for best: 48380.87679999996
Test mean error for best: 24.19044
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 26.6390022777 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 22.9139934914 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction float_cos} {:instruction 66.78157484920919} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 29} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 22.913993491405808} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot float_cos 66.78157484920919 integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_yankdup float_rot in2 integer_mod float_yankdup integer_fromfloat integer_flush float_yankdup float_rot in2 integer_mod float_yankdup integer_fromfloat integer_flush float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod float_max 29 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 22.913993491405808 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_dup_items in1 integer_sub float_max print_float)
Errors: [18.6815 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 9.2453 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 984.6627
Mean: 19.693254
Genome size: 93
Size: 94
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2116.8422145999953
Median total errors in population: 1099.8355
Error averages by case: (72.31905199999987 11.184 59.36125590000004 3.541 115.29154039999999 2.458 68.32558720000002 1.518 58.982852700000024 1.71 52.0565872 2.49 45.754738199999984 2.43 55.42173399999983 9.937 55.7918971000001 3.072 70.2563115000002 10.345 133.5848355 12.17 44.22207050000005 3.308 89.92754440000061 8.41 111.44005770000001 3.419 131.03520990000007 4.662 56.05453060000031 9.994 45.19595179999999 2.35 74.18768900000003 2.62 58.94281839999999 1.51 67.7979395999995 9.974 98.91976050000073 9.794 115.07595020000001 13.107 104.72635 9.251 82.22989510000055 9.735 96.20005520000014 4.751)
Error minima by case: (15.9502 8 2.6156 2 18.2383 2 25.2445 1 19.0371 1 10.6798 2 5.5802 1 1.1215 7 6.0 1 1.2923 2 48.4067 9 4.0 2 28.0667 3 24.2166 3 87.0 3 8.2145 9 5.0 1 7.0014 2 10.7861 1 5.8442 2 21.3242 3 59.5308 10 27.9072 2 1.6894 8 49.0 3)
Average genome size in population (length): 89.824
Average program size in population (points): 90.824
Average percent parens in population: 0.011
Minimum age in population: 178.4669397521806
Maximum age in population: 182.750984304782
Average age in population: 180.6321526568012
Median age in population: 180.635169603338
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 44
Genome diversity (% unique Plush genomes):	 0.817
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 44
Syntactic diversity (% unique Push programs):	 0.817
Total error diversity:				 0.324
Error (vector) diversity:			 0.324
Behavioral diversity:				 0.325
--- Run Statistics ---
Number of program evaluations used so far: 129000
Number of point (instruction) evaluations so far: 245132129
--- Timings ---
Current time: 1529615576147 milliseconds
Total Time:         546.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       195.6 seconds, 35.8%
Fitness Testing:    281.8 seconds, 51.5%
Report:              69.4 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 128
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 129
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 129
;;******************************
;; -*- Number IO problem report - generation 129
Test total error for best: 48380.87679999996
Test mean error for best: 24.19044
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 26.6390022777 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 22.9139934914 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction float_cos} {:instruction 66.78157484920919} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 29} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 22.913993491405808} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot float_cos 66.78157484920919 integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_yankdup float_rot in2 integer_mod float_yankdup integer_fromfloat integer_flush float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod float_max 29 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 22.913993491405808 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_dup_items in1 integer_sub float_max print_float)
Errors: [18.6815 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 9.2453 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 984.6627
Mean: 19.693254
Genome size: 85
Size: 86
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2263.884051899995
Median total errors in population: 1096.7473
Error averages by case: (78.94311100000014 11.186 66.42399120000002 3.539 121.566 2.442 74.82 1.506 65.45100340000002 1.647 58.602 2.471 50.32191619999996 2.32 60.23650659999978 9.92 61.39811070000007 2.932 77.34108520000021 10.494 139.72032179999997 12.166 48.24344220000005 3.187 95.87224020000082 8.533 117.6144204 3.429 136.8031827 4.589 63.44593530000057 9.996 47.93171099999997 2.229 80.65950320000002 2.585 65.24 1.502 74.56402389999973 10.095 104.18551160000109 10.084 121.0709526 13.1 110.10922519999997 9.529 87.39880300000084 9.692 102.0890545000001 4.659)
Error minima by case: (5.6712 8 3.6156 2 78.0 1 29.0 1 19.0 1 12.0 2 5.0 1 0.3109 7 5.0 1 7.481 2 97.0 12 3.0 2 38.796 3 74.0 3 86.0 3 7.1745 8 4.0 1 35.0 2 19.0 1 5.8442 2 22.3242 2 77.0 11 28.9072 2 6.748 7 48.0 2)
Average genome size in population (length): 90.065
Average program size in population (points): 91.065
Average percent parens in population: 0.011
Minimum age in population: 179.7101397127217
Maximum age in population: 183.6795073324124
Average age in population: 181.9509671889907
Median age in population: 181.9729645240641
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 32
Genome diversity (% unique Plush genomes):	 0.832
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.832
Total error diversity:				 0.287
Error (vector) diversity:			 0.289
Behavioral diversity:				 0.289
--- Run Statistics ---
Number of program evaluations used so far: 130000
Number of point (instruction) evaluations so far: 247383754
--- Timings ---
Current time: 1529615580849 milliseconds
Total Time:         551.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       197.1 seconds, 35.7%
Fitness Testing:    284.5 seconds, 51.6%
Report:              69.9 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 129
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 130
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 130
;;******************************
;; -*- Number IO problem report - generation 130
Test total error for best: 48426.80479999995
Test mean error for best: 24.21340
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 26.6390022777 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 25.0333326384 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction float_cos} {:instruction 67.39956373280218} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 29} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 25.03333263836172} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot float_cos 67.39956373280218 integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_yankdup float_rot in2 integer_mod float_yankdup integer_fromfloat integer_flush float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 29 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 25.03333263836172 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_dup_items in1 integer_sub float_max print_float)
Errors: [18.6815 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 7.126 11 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 984.5433999999999
Mean: 19.690868
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2120.875293999995
Median total errors in population: 1107.1577
Error averages by case: (71.64862039999979 11.148 59.46357050000002 3.531 115.8472555 2.407 68.9423044 1.469 59.58176270000001 1.654 52.696653399999995 2.435 46.036463399999995 2.304 55.02756119999977 9.938 55.10518340000007 2.919 70.7923715000002 10.301 134.09833540000002 12.129 44.04871280000003 3.158 91.62461740000047 8.167 112.03429849999999 3.392 130.39741669999998 4.561 56.67529560000046 10.0 43.74113080000002 2.189 74.82521620000003 2.588 59.4313611 1.463 68.4093971999993 9.947 100.08620900000096 9.569 115.5433427 13.057 104.60157649999998 9.023 82.77556240000058 9.778 95.69107530000008 4.623)
Error minima by case: (5.6712 8 0.9573 2 6.8939 2 30.0 1 20.0 1 13.0 2 5.5802 1 0.1443 7 6.0 1 4.7497 2 25.7488 10 4.0 2 38.796 3 25.0 2 40.3219 3 7.126 8 0.4099 1 29.9735 2 20.0 1 5.8442 2 22.3242 3 37.2196 11 28.9072 2 3.7661 8 49.0 3)
Average genome size in population (length): 90.162
Average program size in population (points): 91.162
Average percent parens in population: 0.011
Minimum age in population: 180.7101397127217
Maximum age in population: 185.2787943043576
Average age in population: 183.3789483244502
Median age in population: 183.4272592812097
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.867
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.867
Total error diversity:				 0.309
Error (vector) diversity:			 0.309
Behavioral diversity:				 0.309
--- Run Statistics ---
Number of program evaluations used so far: 131000
Number of point (instruction) evaluations so far: 249637829
--- Timings ---
Current time: 1529615585482 milliseconds
Total Time:         556.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       198.5 seconds, 35.7%
Fitness Testing:    287.0 seconds, 51.6%
Report:              70.5 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 130
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 131
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 131
;;******************************
;; -*- Number IO problem report - generation 131
Test total error for best: 48426.80479999995
Test mean error for best: 24.21340
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 26.6390022777 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 25.0333326384 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction float_cos} {:instruction 67.39956373280218} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction integer_swap} {:instruction in2} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_sub} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 29} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 25.03333263836172} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot float_cos 67.39956373280218 integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_yankdup integer_swap in2 integer_mod float_yankdup integer_fromfloat integer_flush float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div integer_sub float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 29 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 25.03333263836172 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_dup_items in1 integer_sub float_max print_float)
Errors: [18.6815 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 7.126 11 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 984.5433999999999
Mean: 19.690868
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2335.1945142999953
Median total errors in population: 1102.6025
Error averages by case: (79.51215710000038 11.198 69.52051280000003 3.599 123.55503230000001 2.479 77.0538528 1.549 67.78881460000001 1.755 60.9547206 2.519 52.317765099999946 2.385 61.088909199999726 9.913 66.98043210000004 3.22 80.91377270000027 10.395 141.69371470000004 12.177 49.88763320000009 3.434 100.43469410000102 8.19 120.49709860000002 3.481 140.93511739999997 4.773 65.92691010000057 10.05 48.43571899999995 2.469 82.87668680000006 2.675 68.4080748 1.54 78.36637099999966 10.053 109.43447770000134 9.702 123.34730429999999 13.101 114.1142587 9.069 90.12770910000101 9.771 106.66877550000014 4.857)
Error minima by case: (0.7107 8 4.914 2 3.1183 2 26.5274 1 19.0371 1 13.0 2 4.4184 1 0.7563 7 6.0 1 4.7497 2 27.0501 9 4.0 2 1.3141 3 0.3141 2 87.0 3 7.126 8 0.828 1 7.0014 2 20.0 1 5.8442 2 21.3141 3 38.1742 9 22.3141 2 5.748 7 49.0 3)
Average genome size in population (length): 90.131
Average program size in population (points): 91.131
Average percent parens in population: 0.011
Minimum age in population: 182.4789418022059
Maximum age in population: 186.7508459670379
Average age in population: 184.7015552494546
Median age in population: 184.7574063123636
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.864
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.864
Total error diversity:				 0.316
Error (vector) diversity:			 0.317
Behavioral diversity:				 0.317
--- Run Statistics ---
Number of program evaluations used so far: 132000
Number of point (instruction) evaluations so far: 251891104
--- Timings ---
Current time: 1529615590176 milliseconds
Total Time:         560.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       200.0 seconds, 35.7%
Fitness Testing:    289.6 seconds, 51.6%
Report:              71.2 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 131
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 132
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 132
;;******************************
;; -*- Number IO problem report - generation 132
Test total error for best: 48426.80479999995
Test mean error for best: 24.21340
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 26.6390022777 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 25.0333326384 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_div} {:instruction float_cos} {:instruction 67.39956373280218} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 29} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 25.03333263836172} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_div float_cos 67.39956373280218 integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_yankdup float_rot in2 integer_mod float_yankdup integer_fromfloat integer_flush float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 29 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 25.03333263836172 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_dup_items in1 integer_sub float_max print_float)
Errors: [18.6815 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 7.126 11 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 984.5433999999999
Mean: 19.690868
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2289.254956799994
Median total errors in population: 1103.1605999999997
Error averages by case: (78.25957510000006 11.199 66.7707814 3.663 122.03011719999998 2.525 75.73249789999998 1.616 66.50201740000001 1.813 59.72502930000001 2.58 52.73138389999996 2.579 60.65215749999981 9.894 62.08679900000007 3.192 76.73116920000017 10.485 140.22874880000003 12.151 49.79873100000006 3.383 98.34878180000098 8.406 119.70621690000002 3.523 137.2707888 4.767 62.430420600000545 10.034 49.96114919999996 2.433 81.50335940000005 2.731 67.6332249 1.619 73.74398959999962 10.057 106.92760140000105 9.902 122.97829309999999 13.082 111.75341699999997 9.31 87.62551220000081 9.741 102.58419420000008 4.854)
Error minima by case: (5.002 7 3.6156 2 3.1183 1 25.2445 1 19.0371 1 10.6798 2 3.4608 1 0.1443 7 5.7792 1 7.481 2 27.0501 9 4.0 2 1.3141 3 0.3141 3 87.0 3 7.126 8 0.828 1 7.0014 2 2.914 1 5.8442 2 21.3141 3 38.1742 12 22.3141 2 5.748 8 49.0 2)
Average genome size in population (length): 89.754
Average program size in population (points): 90.754
Average percent parens in population: 0.011
Minimum age in population: 183.5710509774024
Maximum age in population: 187.9037622411658
Average age in population: 185.9975943480133
Median age in population: 186.0317163806531
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.848
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.848
Total error diversity:				 0.303
Error (vector) diversity:			 0.305
Behavioral diversity:				 0.305
--- Run Statistics ---
Number of program evaluations used so far: 133000
Number of point (instruction) evaluations so far: 254134954
--- Timings ---
Current time: 1529615594655 milliseconds
Total Time:         565.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       201.5 seconds, 35.6%
Fitness Testing:    292.1 seconds, 51.7%
Report:              71.7 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 132
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 133
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 133
;;******************************
;; -*- Number IO problem report - generation 133
Test total error for best: 48426.80479999995
Test mean error for best: 24.21340
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 26.6390022777 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 25.0333326384 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction float_cos} {:instruction 67.39956373280218} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 29} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 25.03333263836172} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_dup_items} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot float_cos 67.39956373280218 integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_yankdup float_rot in2 integer_mod float_yankdup integer_fromfloat integer_flush float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 29 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 25.03333263836172 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_dup_items in1 integer_dup_items float_max print_float)
Errors: [18.6815 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 7.126 11 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 984.5433999999999
Mean: 19.690868
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2205.1480009999946
Median total errors in population: 1101.87735
Error averages by case: (74.56650689999998 11.177 62.82261600000002 3.744 119.5991856 2.529 73.1378864 1.616 63.730719300000025 1.779 57.0326963 2.569 48.15773579999995 2.635 56.99633009999976 9.871 60.721544600000065 3.277 72.16653470000021 10.412 137.78792790000003 12.134 45.90059920000003 3.457 93.87624820000066 8.36 114.95266260000002 3.546 134.826197 4.827 60.46171210000038 10.096 45.20892049999999 2.531 78.83762590000005 2.7 63.6260524 1.609 69.2719795999994 10.066 102.95056500000116 9.848 119.22654049999998 13.066 107.80691329999999 9.232 85.52430870000055 9.695 100.30399240000008 4.878)
Error minima by case: (17.6815 8 3.6156 2 3.7641 1 25.2445 1 19.0371 1 10.6798 2 3.4608 1 0.0854 6 6.0 1 7.481 2 24.8891 9 4.0 2 1.3141 3 0.3141 3 46.6781 3 6.126 8 0.7336 1 7.0014 2 2.914 1 5.8442 2 21.3141 3 36.0132 9 22.3141 2 5.748 8 3.9016 2)
Average genome size in population (length): 88.971
Average program size in population (points): 89.971
Average percent parens in population: 0.011
Minimum age in population: 184.9670748839485
Maximum age in population: 189.3883174678326
Average age in population: 187.308581367529
Median age in population: 187.3379919321091
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.869
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.869
Total error diversity:				 0.337
Error (vector) diversity:			 0.337
Behavioral diversity:				 0.338
--- Run Statistics ---
Number of program evaluations used so far: 134000
Number of point (instruction) evaluations so far: 256359229
--- Timings ---
Current time: 1529615599157 milliseconds
Total Time:         569.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       203.0 seconds, 35.6%
Fitness Testing:    294.5 seconds, 51.7%
Report:              72.3 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 133
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 134
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 134
;;******************************
;; -*- Number IO problem report - generation 134
Test total error for best: 48426.80479999995
Test mean error for best: 24.21340
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 26.6390022777 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 25.0333326384 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction float_cos} {:instruction 66.78157484920919} {:instruction integer_rot} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 29} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 25.03333263836172} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot float_cos 66.78157484920919 integer_rot float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_yankdup float_rot in2 integer_mod integer_flush float_yankdup float_rot in2 integer_mod float_yankdup integer_fromfloat integer_flush float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 29 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 25.03333263836172 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_dup_items in1 integer_sub float_max print_float)
Errors: [18.6815 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 7.126 11 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 984.5433999999999
Mean: 19.690868
Genome size: 92
Size: 93
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2074.702503399995
Median total errors in population: 1099.5653499999999
Error averages by case: (70.33812699999979 11.144 58.43847390000001 3.655 114.01086820000002 2.439 67.28499900000001 1.515 57.91857320000003 1.689 51.1216804 2.479 43.72738619999999 2.37 52.823303199999664 9.882 55.22922330000005 3.092 65.74568770000029 10.613 132.36951649999997 12.146 41.78133600000004 3.28 88.7974194000006 8.424 110.4694803 3.42 130.36403630000004 4.682 54.66309760000001 10.247 41.63757879999998 2.323 73.08384510000002 2.628 57.882286099999995 1.507 63.71246569999927 10.22 97.78919370000092 9.877 113.87980609999998 13.084 102.56352849999998 9.342 79.10909890000053 9.67 95.51449230000003 4.719)
Error minima by case: (0.0935 7 3.6156 2 3.1183 1 9.2542 1 11.0521 1 10.6798 2 3.4608 1 0.1006 6 6.0 1 1.2923 2 25.4927 9 3.7453 2 1.3141 3 0.3141 3 87.0 3 7.126 8 0.4634 1 3.0889 2 2.914 1 5.8442 2 21.3141 3 36.6168 9 22.3141 2 6.748 8 49.0 2)
Average genome size in population (length): 88.673
Average program size in population (points): 89.673
Average percent parens in population: 0.011
Minimum age in population: 186.1720033325888
Maximum age in population: 190.6661683439881
Average age in population: 188.5941882422322
Median age in population: 188.6386771643046
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 34
Genome diversity (% unique Plush genomes):	 0.848
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.848
Total error diversity:				 0.354
Error (vector) diversity:			 0.355
Behavioral diversity:				 0.355
--- Run Statistics ---
Number of program evaluations used so far: 135000
Number of point (instruction) evaluations so far: 258576054
--- Timings ---
Current time: 1529615604067 milliseconds
Total Time:         574.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       204.7 seconds, 35.6%
Fitness Testing:    297.0 seconds, 51.7%
Report:              72.8 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 134
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 135
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 135
;;******************************
;; -*- Number IO problem report - generation 135
Test total error for best: 48422.01839999998
Test mean error for best: 24.21101
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 26.6390022777 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 24.7821902927 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction float_cos} {:instruction 67.39956373280218} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction integer_swap} {:instruction in2} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_sub} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 29} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 24.782190292694423} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot float_cos 67.39956373280218 integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_yankdup integer_swap in2 integer_mod float_yankdup integer_fromfloat integer_flush float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div integer_sub float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 29 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 24.782190292694423 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_dup_items in1 integer_sub float_max print_float)
Errors: [18.6815 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 7.3771 10 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 983.7945
Mean: 19.67589
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2434.8347777999966
Median total errors in population: 1100.48
Error averages by case: (84.22921950000018 11.226 72.683378 3.891 127.86488170000003 2.566 81.5191665 1.651 72.2219853 1.769 65.4541665 2.606 57.80807309999998 2.636 67.81900629999986 9.947 69.75327719999997 3.253 81.89832940000014 10.421 145.90854030000003 12.191 55.92826660000002 3.449 103.51800350000072 8.328 123.8691346 3.539 143.61235710000008 4.808 68.87182059999967 10.808 55.62801310000002 2.555 87.30318440000002 2.705 71.9643425 1.648 79.07383989999967 10.051 112.96221250000104 9.769 127.43540180000001 13.141 117.54088579999997 9.126 93.96395630000089 9.69 109.41633529999996 4.813)
Error minima by case: (14.4823 6 4.914 2 20.3576 2 24.4081 1 16.9177 1 10.6798 2 0.2431 1 0.3403 7 5.0 1 1.2923 2 50.526 9 3.0 2 1.3141 3 0.3141 3 86.0 3 3.9082 9 4.0 1 4.882 2 2.914 1 5.7575 2 21.3141 2 61.6501 9 22.3141 2 5.748 8 48.0 3)
Average genome size in population (length): 88.369
Average program size in population (points): 89.369
Average percent parens in population: 0.011
Minimum age in population: 187.4167644703761
Maximum age in population: 191.9689555830576
Average age in population: 189.8941752679136
Median age in population: 189.9537879863653
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 42
Genome diversity (% unique Plush genomes):	 0.838
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.838
Total error diversity:				 0.33
Error (vector) diversity:			 0.33
Behavioral diversity:				 0.331
--- Run Statistics ---
Number of program evaluations used so far: 136000
Number of point (instruction) evaluations so far: 260785304
--- Timings ---
Current time: 1529615608761 milliseconds
Total Time:         579.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       206.3 seconds, 35.6%
Fitness Testing:    299.5 seconds, 51.7%
Report:              73.5 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 135
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 136
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 136
;;******************************
;; -*- Number IO problem report - generation 136
Test total error for best: 48422.01839999998
Test mean error for best: 24.21101
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 26.6390022777 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 24.7821902927 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction 67.39956373280218} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction integer_swap} {:instruction in2} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_sub} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 29} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 24.782190292694423} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (float_cos 67.39956373280218 integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_yankdup integer_swap in2 integer_mod float_yankdup integer_fromfloat integer_flush float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div integer_sub float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 29 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 24.782190292694423 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_dup_items in1 integer_sub float_max print_float)
Errors: [18.6815 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 7.3771 10 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 983.7945
Mean: 19.67589
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2278.5020079000005
Median total errors in population: 1097.3264
Error averages by case: (79.45200010000005 11.235 67.74620610000002 3.756 121.84416590000001 2.462 75.2078144 1.522 65.95794900000004 1.732 59.024196 2.501 51.27766570000003 2.408 62.00250699999975 9.892 63.73096099999996 3.036 77.18011920000023 10.404 139.99120299999998 12.187 49.46130969999999 3.307 95.19298480000057 8.543 116.8223564 3.444 138.13978800000018 4.634 62.14361259999933 11.175 49.27123670000005 2.414 81.10252950000005 2.656 65.7004319 1.517 74.97039589999959 10.098 104.10000090000096 10.006 121.55368499999999 13.13 108.76192629999997 9.469 88.29142940000054 9.703 103.72853339999985 4.616)
Error minima by case: (18.6815 7 3.6156 2 3.1183 1 25.2445 1 19.0 1 10.6798 2 2.6919 1 0.1443 7 5.0 1 2.0792 2 27.0501 11 3.0 2 24.0 2 25.0 2 86.0 3 5.5686 8 0.828 1 28.358 2 19.0 1 3.716 2 4.0 2 38.1742 11 3.0 1 3.7661 7 48.0 3)
Average genome size in population (length): 88.379
Average program size in population (points): 89.379
Average percent parens in population: 0.011
Minimum age in population: 188.9954248392011
Maximum age in population: 193.3592230288187
Average age in population: 191.2178718801114
Median age in population: 191.2557414754218
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 43
Genome diversity (% unique Plush genomes):	 0.82
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.82
Total error diversity:				 0.321
Error (vector) diversity:			 0.322
Behavioral diversity:				 0.322
--- Run Statistics ---
Number of program evaluations used so far: 137000
Number of point (instruction) evaluations so far: 262994804
--- Timings ---
Current time: 1529615613199 milliseconds
Total Time:         583.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       207.8 seconds, 35.6%
Fitness Testing:    302.0 seconds, 51.7%
Report:              74.0 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 136
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 137
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 137
;;******************************
;; -*- Number IO problem report - generation 137
Test total error for best: 48422.01839999998
Test mean error for best: 24.21101
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 26.6390022777 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 24.7821902927 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction 67.39956373280218} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction integer_swap} {:instruction in2} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_sub} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 29} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 24.782190292694423} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (float_cos 67.39956373280218 integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_yankdup integer_swap in2 integer_mod float_yankdup integer_fromfloat integer_flush float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div integer_sub float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 29 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 24.782190292694423 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_dup_items in1 integer_sub float_max print_float)
Errors: [18.6815 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 7.3771 10 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 983.7945
Mean: 19.67589
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2141.9445417000024
Median total errors in population: 1089.5738
Error averages by case: (71.18984989999984 11.117 61.01196100000002 3.765 117.71004230000001 2.435 71.143105 1.513 61.77586820000002 1.663 54.9833638 2.473 45.184803700000046 2.385 53.381056599999745 9.781 58.41686889999991 3.052 70.5407739000002 10.752 135.95916019999999 12.125 43.91499119999995 3.319 91.10862390000068 8.572 113.39251920000001 3.448 133.4719168000002 4.673 54.16274859999887 11.265 42.68196440000005 2.463 76.93800450000003 2.608 61.771401 1.506 66.19027009999924 10.362 99.324056100001 10.218 117.41784240000001 13.053 104.76832759999998 9.517 80.61991370000044 9.488 98.75310869999981 4.579)
Error minima by case: (4.2253 8 3.6156 2 3.1183 1 30.0 1 20.0 1 13.0 2 2.4608 1 0.3201 7 6.0 1 6.2355 2 24.0552 9 4.0 2 30.7935 3 16.1063 3 87.0 3 6.126 9 0.828 1 28.358 2 5.0333 1 5.8442 2 22.3242 3 33.5581 10 28.9072 2 1.0374 8 49.0 3)
Average genome size in population (length): 88.66
Average program size in population (points): 89.66
Average percent parens in population: 0.011
Minimum age in population: 189.9954248392011
Maximum age in population: 194.8462309035664
Average age in population: 192.5619850403819
Median age in population: 192.5993654747902
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 33
Genome diversity (% unique Plush genomes):	 0.819
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.819
Total error diversity:				 0.308
Error (vector) diversity:			 0.309
Behavioral diversity:				 0.309
--- Run Statistics ---
Number of program evaluations used so far: 138000
Number of point (instruction) evaluations so far: 265211329
--- Timings ---
Current time: 1529615617851 milliseconds
Total Time:         588.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       209.2 seconds, 35.6%
Fitness Testing:    304.4 seconds, 51.7%
Report:              74.6 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 137
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 138
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 138
;;******************************
;; -*- Number IO problem report - generation 138
Test total error for best: 48535.467899999974
Test mean error for best: 24.26773
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 26.6390022777 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 26.5000805613 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction float_cos} {:instruction 67.39956373280218} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction integer_dup} {:instruction integer_swap} {:instruction in2} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 29} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 26.500080561323614} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot float_cos 67.39956373280218 integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items integer_dup integer_swap in2 integer_mod float_yankdup integer_fromfloat integer_flush float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div float_yankdup integer_div integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 29 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 26.500080561323614 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_dup_items in1 integer_sub float_max print_float)
Errors: [18.6815 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 5.6592 11 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 983.0766
Mean: 19.661531
Genome size: 99
Size: 100
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2256.7467556000024
Median total errors in population: 1098.2527999999998
Error averages by case: (75.35387630000024 11.13 65.26591410000002 4.089 121.72625360000002 2.492 75.25902639999998 1.591 65.95690110000001 1.771 59.15551999999999 2.543 50.27452050000005 2.565 59.52543789999968 9.818 63.5525816999999 3.381 74.82456880000018 10.663 139.82707730000004 12.145 49.04955149999995 3.522 95.40676330000106 8.565 117.26572010000002 3.506 138.0193545000001 4.911 59.582795899998594 11.348 49.08655320000013 2.66 81.03270110000004 2.677 65.93278039999998 1.581 70.8053305999995 10.313 103.51776810000145 10.138 121.3849045 13.075 108.67791329999999 9.536 84.105548800001 9.562 103.78439259999973 4.791)
Error minima by case: (5.6712 8 0.1172 2 4.6757 1 24.4081 1 16.9177 1 10.6798 2 3.4608 1 1.1215 6 5.0 1 0.5964 2 25.4927 10 2.5247 2 1.3141 2 0.3141 2 39.3219 3 5.6592 7 1.2809 1 4.882 2 19.0 1 5.8442 2 4.0 2 36.6168 10 3.0 1 6.748 8 48.0 2)
Average genome size in population (length): 88.873
Average program size in population (points): 89.873
Average percent parens in population: 0.011
Minimum age in population: 190.9954248392011
Maximum age in population: 196.0388550719311
Average age in population: 193.9007427620542
Median age in population: 193.9402665533054
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.844
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.844
Total error diversity:				 0.313
Error (vector) diversity:			 0.313
Behavioral diversity:				 0.313
--- Run Statistics ---
Number of program evaluations used so far: 139000
Number of point (instruction) evaluations so far: 267433179
--- Timings ---
Current time: 1529615622656 milliseconds
Total Time:         593.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       210.7 seconds, 35.5%
Fitness Testing:    307.1 seconds, 51.8%
Report:              75.4 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 138
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 139
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 139
;;******************************
;; -*- Number IO problem report - generation 139
Test total error for best: 48535.467899999974
Test mean error for best: 24.26773
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 26.6390022777 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 26.5000805613 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction float_cos} {:instruction 67.39956373280218} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction integer_dup} {:instruction integer_swap} {:instruction in2} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 29} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 26.500080561323614} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot float_cos 67.39956373280218 integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items integer_dup integer_swap in2 integer_mod float_yankdup integer_fromfloat integer_flush float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div float_yankdup integer_div integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 29 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 26.500080561323614 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_dup_items in1 integer_sub float_max print_float)
Errors: [18.6815 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 5.6592 11 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 983.0766
Mean: 19.661531
Genome size: 99
Size: 100
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2411.4128916000045
Median total errors in population: 1089.5738
Error averages by case: (82.81926910000065 11.228 70.37045130000001 3.773 126.9901459 2.577 80.8196523 1.645 71.57400779999999 1.789 64.87321179999999 2.6 58.652961500000046 2.482 66.36989339999981 9.933 66.72748739999993 3.017 81.32363620000024 10.589 144.99623820000002 12.22 56.94472019999995 3.365 102.99890390000125 8.546 124.3646026 3.547 142.23217820000016 4.646 65.36813579999861 11.449 57.76970350000011 2.494 86.54547000000001 2.71 72.38973150000001 1.634 77.46831940000001 10.204 111.4617550000015 10.067 126.5570402 13.155 116.40260149999997 9.486 90.67926860000145 9.661 107.33050629999978 4.566)
Error minima by case: (5.002 8 3.6156 2 4.6757 2 30.0 1 20.0 1 13.0 2 3.4608 1 1.1215 7 6.0 1 6.481 2 6.3424 10 4.0 2 38.796 3 73.4426 3 87.0 3 5.6592 8 1.9338 1 29.9154 2 20.0 1 4.8442 2 22.3242 3 17.4665 11 28.9072 2 6.748 8 49.0 3)
Average genome size in population (length): 89.204
Average program size in population (points): 90.204
Average percent parens in population: 0.011
Minimum age in population: 191.9954248392011
Maximum age in population: 197.5874608539832
Average age in population: 195.2181449416153
Median age in population: 195.2672276281686
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.849
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.849
Total error diversity:				 0.296
Error (vector) diversity:			 0.297
Behavioral diversity:				 0.297
--- Run Statistics ---
Number of program evaluations used so far: 140000
Number of point (instruction) evaluations so far: 269663279
--- Timings ---
Current time: 1529615627114 milliseconds
Total Time:         597.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       212.2 seconds, 35.5%
Fitness Testing:    309.5 seconds, 51.8%
Report:              75.9 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 139
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 140
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 140
;;******************************
;; -*- Number IO problem report - generation 140
Test total error for best: 48457.37059999998
Test mean error for best: 24.22869
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 26.6390022777 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 25.7125934515 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction float_cos} {:instruction 67.39956373280218} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 29} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 25.712593451480178} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot float_cos 67.39956373280218 integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_yankdup float_rot in2 integer_mod float_yankdup integer_fromfloat integer_flush float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 29 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 25.712593451480178 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_dup_items in1 integer_sub float_max print_float)
Errors: [18.6815 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 6.4467 10 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 982.8640999999999
Mean: 19.657282
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2407.635376100002
Median total errors in population: 1101.9966999999997
Error averages by case: (82.10824700000029 11.204 71.24707830000003 3.932 126.7103652 2.57 80.4829874 1.656 71.30771200000001 1.87 64.4635335 2.607 56.99856720000004 2.506 66.6270898999998 9.965 67.99275239999994 3.221 81.5497326000001 10.481 144.79791540000002 12.175 55.752225699999954 3.41 103.12418700000075 8.276 123.3293558 3.575 142.11305200000015 4.808 65.84532279999904 11.374 55.88566070000009 2.531 86.31277280000003 2.776 71.14469360000001 1.648 77.77340759999983 10.155 111.6178356000011 9.735 126.6480291 13.101 116.65124039999998 9.038 92.27067260000067 9.699 107.82693949999978 4.741)
Error minima by case: (6.6077 8 0.1172 2 3.6757 2 14.2064 1 6.716 1 10.6798 2 1.9941 1 0.0854 7 6.0 1 0.1275 2 24.5239 10 2.1552 2 1.3141 3 0.3141 3 87.0 3 3.0757 9 1.9338 1 5.3197 2 5.0333 1 0.4207 2 21.3141 3 35.7604 10 22.3141 2 6.1816 7 49.0 3)
Average genome size in population (length): 88.988
Average program size in population (points): 89.988
Average percent parens in population: 0.011
Minimum age in population: 192.9954248392011
Maximum age in population: 198.574607453321
Average age in population: 196.6088403798298
Median age in population: 196.6492996087688
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.869
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.869
Total error diversity:				 0.328
Error (vector) diversity:			 0.328
Behavioral diversity:				 0.328
--- Run Statistics ---
Number of program evaluations used so far: 141000
Number of point (instruction) evaluations so far: 271887979
--- Timings ---
Current time: 1529615631893 milliseconds
Total Time:         602.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       213.7 seconds, 35.5%
Fitness Testing:    312.3 seconds, 51.8%
Report:              76.5 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 140
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 141
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 141
;;******************************
;; -*- Number IO problem report - generation 141
Test total error for best: 48457.37059999998
Test mean error for best: 24.22869
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 26.6390022777 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 25.7125934515 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction float_cos} {:instruction 67.39956373280218} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 29} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 25.712593451480178} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot float_cos 67.39956373280218 integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_yankdup float_rot in2 integer_mod float_yankdup integer_fromfloat integer_flush float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 29 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 25.712593451480178 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_dup_items in1 integer_sub float_max print_float)
Errors: [18.6815 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 6.4467 10 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 982.8640999999999
Mean: 19.657282
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2124.0032738000027
Median total errors in population: 1099.7161999999998
Error averages by case: (70.90188340000003 11.181 59.5961443 3.874 115.6832553 2.439 68.8032767 1.524 59.50273030000002 1.711 52.553712 2.484 44.99036740000004 2.336 54.34052149999967 9.876 56.54253819999996 3.066 70.01591490000027 10.578 134.01425419999995 12.164 43.991061699999975 3.286 92.29007750000052 8.287 113.09172819999999 3.427 131.26167670000012 4.662 54.7905440999993 11.256 43.929782400000036 2.389 74.71944440000004 2.633 59.380832299999994 1.516 66.66062189999938 10.129 101.52953440000097 9.783 115.5612326 13.099 106.27108519999997 9.143 81.85996930000066 9.717 96.54608489999985 4.615)
Error minima by case: (5.002 8 3.4715 2 3.1183 1 24.6592 1 17.1689 1 10.6798 2 0.469 1 0.0785 5 6.0 1 4.4187 2 27.0501 11 4.0 2 38.796 3 74.0 3 87.0 3 5.6592 8 0.828 1 5.1332 2 19.0 1 5.7001 2 22.3242 3 38.1742 12 28.9072 2 6.748 8 49.0 2)
Average genome size in population (length): 89.192
Average program size in population (points): 90.192
Average percent parens in population: 0.011
Minimum age in population: 195.2995899398758
Maximum age in population: 200.1860810268278
Average age in population: 197.9420781320049
Median age in population: 198.0010514583046
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.832
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.832
Total error diversity:				 0.355
Error (vector) diversity:			 0.355
Behavioral diversity:				 0.355
--- Run Statistics ---
Number of program evaluations used so far: 142000
Number of point (instruction) evaluations so far: 274117804
--- Timings ---
Current time: 1529615636353 milliseconds
Total Time:         607.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       215.2 seconds, 35.5%
Fitness Testing:    314.7 seconds, 51.8%
Report:              77.0 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 141
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 142
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 142
;;******************************
;; -*- Number IO problem report - generation 142
Test total error for best: 48534.34569999998
Test mean error for best: 24.26717
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 26.5000805613 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 26.5000805613 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction float_cos} {:instruction 67.39956373280218} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction integer_dup} {:instruction integer_swap} {:instruction in2} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 30} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 26.500080561323614} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot float_cos 67.39956373280218 integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items integer_dup integer_swap in2 integer_mod float_yankdup integer_fromfloat integer_flush float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div float_yankdup integer_div integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 30 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 26.500080561323614 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_dup_items in1 integer_sub float_max print_float)
Errors: [18.8204 10 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 5.6592 11 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 982.2155
Mean: 19.64431
Genome size: 99
Size: 100
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2444.6220440000025
Median total errors in population: 1107.30595
Error averages by case: (84.73276680000033 11.218 71.59864809999995 3.987 128.48967539999998 2.634 82.6582945 1.731 73.47934400000001 1.902 66.8112498 2.683 58.936543100000044 2.581 65.69658059999975 9.99 68.88414800000001 3.124 82.77622950000016 10.585 146.5481685 12.219 57.263792299999956 3.415 103.82614720000083 8.187 123.6375023 3.585 142.75695249999995 4.759 68.26585939999946 11.179 56.38706960000003 2.487 88.35604770000005 2.819 72.6594187 1.701 79.10123610000002 10.225 113.2460912000011 9.58 128.5145166 13.168 117.89331529999997 8.941 95.46521110000084 9.836 109.33823569999981 4.763)
Error minima by case: (5.002 8 3.6156 2 5.0867 1 24.4081 1 16.9177 1 10.6798 2 1.9941 1 0.0785 7 6.0 1 7.2326 2 24.5239 10 3.656 2 1.3141 3 16.1063 3 87.0 3 4.7012 9 0.3829 1 4.882 2 5.0333 1 5.8442 2 21.3141 3 35.7604 10 22.3141 2 5.748 8 49.0 2)
Average genome size in population (length): 89.401
Average program size in population (points): 90.401
Average percent parens in population: 0.011
Minimum age in population: 196.5902752474497
Maximum age in population: 201.4609341434665
Average age in population: 199.313703460408
Median age in population: 199.3517763673425
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 38
Genome diversity (% unique Plush genomes):	 0.847
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 38
Syntactic diversity (% unique Push programs):	 0.847
Total error diversity:				 0.407
Error (vector) diversity:			 0.408
Behavioral diversity:				 0.409
--- Run Statistics ---
Number of program evaluations used so far: 143000
Number of point (instruction) evaluations so far: 276352829
--- Timings ---
Current time: 1529615641169 milliseconds
Total Time:         611.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       217.0 seconds, 35.5%
Fitness Testing:    317.2 seconds, 51.8%
Report:              77.6 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 142
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 143
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 143
;;******************************
;; -*- Number IO problem report - generation 143
Test total error for best: 48534.34569999998
Test mean error for best: 24.26717
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 26.5000805613 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 26.5000805613 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_rot} {:instruction float_cos} {:instruction 67.39956373280218} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction integer_dup} {:instruction integer_swap} {:instruction in2} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 30} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 26.500080561323614} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_rot integer_rot float_cos 67.39956373280218 integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items integer_dup integer_swap in2 integer_mod float_yankdup integer_fromfloat integer_flush float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div float_yankdup integer_div integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 30 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 26.500080561323614 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_dup_items in1 integer_sub float_max print_float)
Errors: [18.8204 10 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 5.6592 11 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 982.2155
Mean: 19.64431
Genome size: 101
Size: 102
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2399.978039299998
Median total errors in population: 1099.50265
Error averages by case: (82.49457470000024 11.168 70.73968499999997 3.904 126.93206959999999 2.55 80.6120012 1.629 71.33374390000002 1.818 64.5824796 2.579 56.558089900000056 2.52 64.4628428999997 9.94 67.4662221 3.184 80.11746450000025 10.658 144.97197100000002 12.193 55.49835069999995 3.537 102.24250750000104 8.427 123.1958187 3.516 142.2318737999999 4.828 65.59577229999945 10.965 55.940918 2.605 86.38109040000005 2.738 71.1632059 1.621 76.36077039999954 10.235 110.97353020000128 9.874 126.5725515 13.122 115.87365849999998 9.326 92.62109330000106 9.725 107.56175369999983 4.832)
Error minima by case: (5.002 7 0.1434 2 6.8939 1 22.9413 1 15.451 1 13.0 2 1.9941 1 0.0309 7 6.0 1 1.2923 2 25.7488 9 4.0 2 1.3141 3 16.1063 3 46.6781 3 5.5658 9 0.4099 1 3.4153 2 19.0 1 5.6978 2 21.3141 3 37.2196 9 22.3141 2 4.1663 8 3.9016 2)
Average genome size in population (length): 90.402
Average program size in population (points): 91.402
Average percent parens in population: 0.011
Minimum age in population: 197.5902752474497
Maximum age in population: 202.7763016505248
Average age in population: 200.6139650924783
Median age in population: 200.6467431551669
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 52
Genome diversity (% unique Plush genomes):	 0.824
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 52
Syntactic diversity (% unique Push programs):	 0.824
Total error diversity:				 0.396
Error (vector) diversity:			 0.397
Behavioral diversity:				 0.397
--- Run Statistics ---
Number of program evaluations used so far: 144000
Number of point (instruction) evaluations so far: 278612879
--- Timings ---
Current time: 1529615645793 milliseconds
Total Time:         616.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       218.4 seconds, 35.4%
Fitness Testing:    319.6 seconds, 51.9%
Report:              78.2 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 143
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 144
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 144
;;******************************
;; -*- Number IO problem report - generation 144
Test total error for best: 48457.37059999998
Test mean error for best: 24.22869
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 26.6390022777 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 25.7125934515 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction float_cos} {:instruction 67.39956373280218} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 29} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 25.712593451480178} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot float_cos 67.39956373280218 integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_yankdup float_rot in2 integer_mod float_yankdup integer_fromfloat integer_flush float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 29 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 25.712593451480178 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_dup_items in1 integer_sub float_max print_float)
Errors: [18.6815 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 6.4467 10 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 982.8640999999999
Mean: 19.657282
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2365.276019499999
Median total errors in population: 1102.3309
Error averages by case: (81.25576570000013 11.139 69.95096559999995 3.692 126.0487823 2.538 79.59710080000002 1.618 70.3086134 1.785 63.4932302 2.57 55.54579980000001 2.383 62.80499449999969 9.938 63.50855989999997 2.949 78.8135999000002 10.657 144.1168186 12.161 52.47601939999999 3.38 102.83669900000064 8.262 122.9881061 3.536 139.62114129999992 4.674 62.651101099999835 10.96 51.89798989999997 2.425 85.40114900000003 2.71 71.0232488 1.633 76.68435189999964 10.291 111.25654350000092 9.67 125.66592830000002 13.102 116.39562529999999 9.088 91.14140030000073 9.739 104.17548489999984 4.717)
Error minima by case: (18.6815 7 3.6156 2 20.1064 2 24.6592 1 17.1689 1 13.0 2 1.9941 1 0.1006 7 6.0 1 1.5262 2 50.2749 9 4.0 2 26.3323 3 16.1063 3 87.0 3 5.6592 7 5.0 1 5.1332 2 6.5001 1 5.8442 2 22.3242 3 61.399 9 28.9072 2 3.4238 8 49.0 3)
Average genome size in population (length): 92.102
Average program size in population (points): 93.102
Average percent parens in population: 0.011
Minimum age in population: 198.5902752474497
Maximum age in population: 203.8744179150175
Average age in population: 202.0051487612872
Median age in population: 202.0829688517982
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 33
Genome diversity (% unique Plush genomes):	 0.828
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.828
Total error diversity:				 0.387
Error (vector) diversity:			 0.387
Behavioral diversity:				 0.388
--- Run Statistics ---
Number of program evaluations used so far: 145000
Number of point (instruction) evaluations so far: 280915429
--- Timings ---
Current time: 1529615650602 milliseconds
Total Time:         621.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       219.9 seconds, 35.4%
Fitness Testing:    322.4 seconds, 51.9%
Report:              78.9 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 144
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 145
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 145
;;******************************
;; -*- Number IO problem report - generation 145
Test total error for best: 48433.77329999998
Test mean error for best: 24.21689
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 26.5000805613 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 26.5000805613 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_rot} {:instruction float_cos} {:instruction 67.39956373280218} {:instruction integer_rot} {:instruction integer_yankdup} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 26.500080561323614} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_pop integer_rot float_cos 67.39956373280218 integer_rot integer_yankdup float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_yankdup float_rot in2 integer_mod float_yankdup integer_fromfloat integer_flush float_yankdup float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div float_yankdup integer_div integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 26.500080561323614 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_dup_items in1 integer_sub float_max print_float)
Errors: [18.8204 10 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 5.6592 11 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 982.2155
Mean: 19.64431
Genome size: 97
Size: 98
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2627.9639797999994
Median total errors in population: 1104.495
Error averages by case: (91.98165770000028 11.172 80.51597079999999 4.203 135.185595 2.694 89.4891224 1.806 80.3246212 1.978 73.6620366 2.74 65.44734950000006 2.658 74.8504441000001 10.03 78.01732270000001 3.328 89.07715950000029 10.657 153.102987 12.231 64.05705519999995 3.615 111.66641800000093 8.294 131.4708941 3.662 151.08117029999988 5.056 74.35604599999951 11.173 63.85343259999996 2.631 95.1727383 2.885 80.1971029 1.789 85.85482789999993 10.265 120.30841450000118 9.612 135.049927 13.161 125.32491859999998 9.04 101.10088380000093 9.83 117.25588409999988 5.05)
Error minima by case: (5.6712 8 3.6156 2 3.6757 1 23.7288 1 16.2385 1 10.6798 2 1.9941 1 0.1006 7 6.0 1 0.5964 2 25.7488 9 4.0 2 1.3141 2 0.3141 2 87.0 3 0.5254 7 0.4099 1 4.2028 2 6.5001 1 0.0 0 4.0 2 37.2196 9 3.0 1 4.1663 8 49.0 3)
Average genome size in population (length): 93.413
Average program size in population (points): 94.413
Average percent parens in population: 0.011
Minimum age in population: 200.6687031381859
Maximum age in population: 205.2392324143536
Average age in population: 203.3695655788945
Median age in population: 203.4288100059318
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.839
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.839
Total error diversity:				 0.402
Error (vector) diversity:			 0.403
Behavioral diversity:				 0.403
--- Run Statistics ---
Number of program evaluations used so far: 146000
Number of point (instruction) evaluations so far: 283250754
--- Timings ---
Current time: 1529615655365 milliseconds
Total Time:         625.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       221.3 seconds, 35.4%
Fitness Testing:    324.9 seconds, 51.9%
Report:              79.5 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 145
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 146
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 146
;;******************************
;; -*- Number IO problem report - generation 146
Test total error for best: 48433.77329999998
Test mean error for best: 24.21689
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 26.5000805613 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 26.5000805613 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_rot} {:instruction float_cos} {:instruction 67.39956373280218} {:instruction integer_rot} {:instruction integer_yankdup} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 26.500080561323614} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_pop integer_rot float_cos 67.39956373280218 integer_rot integer_yankdup float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_yankdup float_rot in2 integer_mod float_yankdup integer_fromfloat integer_flush float_yankdup float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div float_yankdup integer_div integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 31 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 26.500080561323614 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_dup_items in1 integer_sub float_max print_float)
Errors: [18.8204 10 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 5.6592 11 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 982.2155
Mean: 19.64431
Genome size: 97
Size: 98
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2650.3736190999953
Median total errors in population: 1101.29515
Error averages by case: (93.06669260000051 11.202 80.6853358 4.057 136.7042353 2.667 91.1293271 1.758 81.9489071 1.911 75.3575673 2.701 66.52529630000008 2.666 74.73014730000014 10.031 76.66147740000005 3.255 90.82954050000012 10.629 154.5713168 12.217 65.32989089999992 3.495 112.09580350000111 8.43 132.5892719 3.644 151.5476016999999 4.978 74.88664949999983 11.125 64.88157129999995 2.567 96.73809280000003 2.815 81.07080400000001 1.754 86.73499609999999 10.22 120.87886520000119 9.922 136.391663 13.145 125.56166429999998 9.312 103.10780230000103 9.86 117.03409909999984 4.954)
Error minima by case: (5.002 8 0.9573 2 4.6757 1 22.9413 1 15.451 1 13.0 2 1.7816 1 0.3201 7 6.0 1 1.6907 2 24.5239 10 4.0 2 38.796 3 24.2166 3 87.0 3 5.4467 8 1.9338 1 3.4153 2 19.0 1 5.8442 2 22.3242 3 35.7604 10 28.9072 2 6.2507 8 49.0 2)
Average genome size in population (length): 92.865
Average program size in population (points): 93.865
Average percent parens in population: 0.011
Minimum age in population: 201.8752624216483
Maximum age in population: 206.6199223525213
Average age in population: 204.6850612026684
Median age in population: 204.7644016536624
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 50
Genome diversity (% unique Plush genomes):	 0.832
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.832
Total error diversity:				 0.39
Error (vector) diversity:			 0.393
Behavioral diversity:				 0.394
--- Run Statistics ---
Number of program evaluations used so far: 147000
Number of point (instruction) evaluations so far: 285572379
--- Timings ---
Current time: 1529615660241 milliseconds
Total Time:         630.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       222.8 seconds, 35.3%
Fitness Testing:    327.7 seconds, 51.9%
Report:              80.3 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 146
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 147
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 147
;;******************************
;; -*- Number IO problem report - generation 147
Test total error for best: 48466.61089999999
Test mean error for best: 24.23331
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 25.7125934515 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 25.7125934515 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_rot} {:instruction float_cos} {:instruction 67.39956373280218} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 30} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 25.712593451480178} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_rot float_cos 67.39956373280218 integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_yankdup float_rot in2 integer_mod float_yankdup integer_fromfloat integer_flush float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 30 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 25.712593451480178 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_dup_items in1 integer_sub float_max print_float)
Errors: [19.6079 8 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 6.4467 10 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 980.7904999999998
Mean: 19.61581
Genome size: 89
Size: 90
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2581.7821499999973
Median total errors in population: 1103.3353499999998
Error averages by case: (90.6853209000006 11.144 78.28616279999994 4.036 134.2294637 2.612 88.21822339999999 1.715 78.98075039999999 1.822 72.2559718 2.661 63.212892300000064 2.529 72.88624109999992 9.959 73.86523000000011 3.203 87.52417350000022 10.567 152.1721145 12.186 61.222888799999964 3.408 109.94088470000096 8.195 129.5636647 3.62 148.76887930000004 4.968 72.41830799999997 10.991 60.911700299999964 2.473 93.94083620000005 2.743 78.7833999 1.721 87.0244976999999 10.171 119.17818150000132 9.498 133.74103639999998 13.107 123.87101029999997 8.959 98.86980300000117 9.802 114.15751479999994 4.983)
Error minima by case: (3.5708 8 3.6156 2 37.9432 1 25.2445 1 19.4315 1 10.6798 2 0.9941 1 0.8599 7 6.0 1 4.9122 2 95.4712 11 3.4737 2 1.3141 3 16.1063 3 87.0 3 4.6592 8 2.2707 1 3.0889 2 6.5001 1 5.8442 2 21.3141 3 56.5933 10 22.3141 2 6.748 8 49.0 3)
Average genome size in population (length): 90.943
Average program size in population (points): 91.943
Average percent parens in population: 0.011
Minimum age in population: 203.870791219549
Maximum age in population: 208.1244567784634
Average age in population: 206.0604400930998
Median age in population: 206.0954125968145
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 71
Genome diversity (% unique Plush genomes):	 0.823
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 71
Syntactic diversity (% unique Push programs):	 0.823
Total error diversity:				 0.375
Error (vector) diversity:			 0.375
Behavioral diversity:				 0.376
--- Run Statistics ---
Number of program evaluations used so far: 148000
Number of point (instruction) evaluations so far: 287845954
--- Timings ---
Current time: 1529615664637 milliseconds
Total Time:         635.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       224.2 seconds, 35.3%
Fitness Testing:    330.1 seconds, 52.0%
Report:              80.8 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 147
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 148
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 148
;;******************************
;; -*- Number IO problem report - generation 148
Test total error for best: 48466.61089999999
Test mean error for best: 24.23331
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 25.7125934515 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 25.7125934515 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_rot} {:instruction float_cos} {:instruction 67.39956373280218} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 30} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 25.712593451480178} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_rot float_cos 67.39956373280218 integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_yankdup float_rot in2 integer_mod float_yankdup integer_fromfloat integer_flush float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 30 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 25.712593451480178 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_dup_items in1 integer_sub float_max print_float)
Errors: [19.6079 8 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 6.4467 10 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 980.7904999999998
Mean: 19.61581
Genome size: 89
Size: 90
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2388.833651200001
Median total errors in population: 1106.7778999999998
Error averages by case: (82.4101524000004 11.055 70.13538089999989 3.942 125.72424700000002 2.546 79.5151523 1.631 70.33532510000003 1.848 63.53906599999999 2.586 55.70403470000006 2.573 65.97141399999978 9.914 69.16794300000018 3.259 80.30022780000023 10.323 143.8403534 12.145 54.290211399999954 3.465 101.61292300000098 8.128 121.4219203 3.513 142.5987811999999 4.976 65.60207560000016 10.823 53.223441699999945 2.517 85.31485000000006 2.753 70.227942 1.627 78.24927819999971 9.897 111.26033540000134 9.464 125.70105080000002 13.062 115.74568669999998 8.892 92.82909210000099 9.758 108.4007662 5.015)
Error minima by case: (13.6795 8 3.6156 2 3.6757 2 23.7288 1 16.2385 1 10.6798 2 1.9941 1 0.4231 7 6.0 1 1.2923 2 25.7488 10 4.0 2 38.796 3 49.2874 3 87.0 3 1.2592 8 0.4099 1 4.2028 2 5.7126 1 5.8442 2 22.3242 3 37.2196 12 28.9072 2 3.1663 8 49.0 3)
Average genome size in population (length): 89.373
Average program size in population (points): 90.373
Average percent parens in population: 0.011
Minimum age in population: 204.9738809944462
Maximum age in population: 209.689606524374
Average age in population: 207.4255582787879
Median age in population: 207.439754509236
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 80
Genome diversity (% unique Plush genomes):	 0.814
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 80
Syntactic diversity (% unique Push programs):	 0.814
Total error diversity:				 0.355
Error (vector) diversity:			 0.356
Behavioral diversity:				 0.356
--- Run Statistics ---
Number of program evaluations used so far: 149000
Number of point (instruction) evaluations so far: 290080304
--- Timings ---
Current time: 1529615669157 milliseconds
Total Time:         639.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       225.8 seconds, 35.3%
Fitness Testing:    332.5 seconds, 52.0%
Report:              81.4 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 148
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 149
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 149
;;******************************
;; -*- Number IO problem report - generation 149
Test total error for best: 48507.946299999974
Test mean error for best: 24.25397
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 25.7125934515 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 25.7125934515 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_rot} {:instruction float_cos} {:instruction 67.39956373280218} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction float_flush} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 30} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 25.712593451480178} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_rot float_cos 67.39956373280218 integer_rot in2 float_cos 67.59641311186607 float_swap float_flush integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_yankdup float_rot in2 integer_mod float_yankdup integer_fromfloat integer_flush float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 30 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 25.712593451480178 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_dup_items in1 integer_sub float_max print_float)
Errors: [19.6079 8 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 6.4467 10 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 979.8811999999998
Mean: 19.597624
Genome size: 89
Size: 90
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2345.5122740999996
Median total errors in population: 1102.7320499999998
Error averages by case: (80.92893390000008 11.048 69.64074199999995 3.698 124.0539146 2.528 77.60193980000001 1.59 68.40801530000003 1.811 61.5098081 2.557 52.99070490000003 2.423 64.0905626999998 9.941 65.83018210000012 2.954 80.26620100000025 10.438 142.20061320000002 12.217 51.30315739999997 3.333 100.73798910000085 8.099 120.505891 3.492 140.60171389999996 4.685 63.66443930000021 10.874 50.07814509999995 2.355 83.48227830000003 2.722 68.32080330000001 1.598 76.99296249999965 9.961 110.06752710000097 9.588 123.9288907 13.169 114.88663239999997 8.874 92.9460404000008 9.851 105.91918599999997 4.749)
Error minima by case: (8.7236 8 3.6156 2 5.1714 2 23.7288 1 16.2385 1 10.6798 2 1.7816 1 0.0472 7 6.0 1 1.2923 2 24.7928 10 4.0 2 27.5539 3 26.5539 3 87.0 3 5.4527 8 0.9951 1 4.2028 2 20.0 1 5.8442 2 43.6383 3 37.216 11 48.5539 2 6.748 8 49.0 3)
Average genome size in population (length): 89.304
Average program size in population (points): 90.304
Average percent parens in population: 0.011
Minimum age in population: 205.9738809944462
Maximum age in population: 210.730493393849
Average age in population: 208.700074243658
Median age in population: 208.7563520246955
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 71
Genome diversity (% unique Plush genomes):	 0.822
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 71
Syntactic diversity (% unique Push programs):	 0.822
Total error diversity:				 0.353
Error (vector) diversity:			 0.356
Behavioral diversity:				 0.357
--- Run Statistics ---
Number of program evaluations used so far: 150000
Number of point (instruction) evaluations so far: 292312929
--- Timings ---
Current time: 1529615673838 milliseconds
Total Time:         644.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       227.5 seconds, 35.3%
Fitness Testing:    335.0 seconds, 52.0%
Report:              81.9 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 149
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 150
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 150
;;******************************
;; -*- Number IO problem report - generation 150
Test total error for best: 48507.946299999974
Test mean error for best: 24.25397
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 25.7125934515 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 25.7125934515 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_rot} {:instruction float_cos} {:instruction 67.39956373280218} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction float_flush} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 30} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 25.712593451480178} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_rot float_cos 67.39956373280218 integer_rot in2 float_cos 67.59641311186607 float_swap float_flush integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_yankdup float_rot in2 integer_mod float_yankdup integer_fromfloat integer_flush float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 30 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 25.712593451480178 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_dup_items in1 integer_sub float_max print_float)
Errors: [19.6079 8 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 6.4467 10 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 979.8811999999998
Mean: 19.597624
Genome size: 89
Size: 90
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2609.0807752000014
Median total errors in population: 1100.3174
Error averages by case: (90.8308148000003 10.929 79.61011159999991 3.843 134.99092340000004 2.638 89.40014469999998 1.73 80.26548079999999 1.892 73.67998009999998 2.686 63.55601480000008 2.658 75.21612219999994 9.961 75.3674009000002 3.129 89.96430140000022 10.497 152.92945960000003 12.187 60.97486859999992 3.495 110.31416770000114 8.342 130.7692931 3.585 148.7832421999999 4.856 76.40523780000017 10.905 58.592119499999946 2.537 95.06205050000003 2.81 80.2123575 1.72 88.06931649999986 10.085 119.0536732000012 9.72 134.86424849999997 13.114 124.07954459999999 9.124 103.51083560000113 9.877 115.34706559999991 4.912)
Error minima by case: (5.002 8 3.6905 2 3.1183 2 8.2542 1 10.0521 1 10.6798 2 1.9941 1 0.3109 7 6.0 1 1.6907 2 25.7488 9 3.0164 2 24.0 2 25.0 2 87.0 3 5.5906 8 0.4099 1 4.2028 2 5.7126 1 5.8442 2 4.0 2 37.2196 10 3.0 1 6.748 8 49.0 3)
Average genome size in population (length): 90.215
Average program size in population (points): 91.215
Average percent parens in population: 0.011
Minimum age in population: 207.7075552636265
Maximum age in population: 211.9972417036511
Average age in population: 210.0087490093964
Median age in population: 210.0720708183051
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 41
Genome diversity (% unique Plush genomes):	 0.827
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.827
Total error diversity:				 0.369
Error (vector) diversity:			 0.369
Behavioral diversity:				 0.37
--- Run Statistics ---
Number of program evaluations used so far: 151000
Number of point (instruction) evaluations so far: 294568329
--- Timings ---
Current time: 1529615678215 milliseconds
Total Time:         648.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       228.9 seconds, 35.3%
Fitness Testing:    337.4 seconds, 52.0%
Report:              82.5 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 150
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 151
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 151
;;******************************
;; -*- Number IO problem report - generation 151
Test total error for best: 48507.946299999974
Test mean error for best: 24.25397
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 25.7125934515 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 25.7125934515 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 30} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 25.712593451480178} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_pop integer_rot float_cos integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_yankdup float_rot in2 integer_mod float_yankdup integer_fromfloat integer_flush float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 30 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 25.712593451480178 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_dup_items in1 integer_sub float_max print_float)
Errors: [19.6079 8 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 6.4467 10 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 979.8811999999998
Mean: 19.597624
Genome size: 87
Size: 88
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2263.1328648999997
Median total errors in population: 1093.9197
Error averages by case: (74.4448378999999 10.575 66.2491898999999 3.923 121.4380003 2.505 75.2540838 1.58 65.94065430000002 1.746 59.281272599999994 2.546 49.1618067000001 2.613 60.0208830999997 9.89 61.36700460000015 3.119 75.8649304000002 10.405 139.64732110000003 12.144 47.128856199999916 3.432 97.98190010000098 8.158 118.2007543 3.502 137.07673769999994 4.861 60.07887310000026 10.909 45.63969409999994 2.486 80.92484170000002 2.68 65.9697436 1.574 74.25981159999981 9.932 107.18354920000127 9.526 121.25165499999999 13.075 111.93603839999996 8.964 89.23289850000103 9.837 102.72452669999991 4.891)
Error minima by case: (13.6795 8 0.5507 2 0.6771 2 22.9413 1 15.451 1 13.0 2 1.9941 1 1.1215 7 6.0 1 1.1048 2 25.5467 10 3.4737 2 1.3141 3 0.3141 3 40.3219 3 4.765 7 0.4099 1 3.0889 2 5.7126 1 1.5747 2 21.3141 3 34.8057 9 22.3141 2 5.1663 8 49.0 3)
Average genome size in population (length): 91.207
Average program size in population (points): 92.207
Average percent parens in population: 0.011
Minimum age in population: 209.1319163443999
Maximum age in population: 213.3891668778077
Average age in population: 211.3282538148368
Median age in population: 211.3334164784124
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 41
Genome diversity (% unique Plush genomes):	 0.818
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.818
Total error diversity:				 0.369
Error (vector) diversity:			 0.37
Behavioral diversity:				 0.37
--- Run Statistics ---
Number of program evaluations used so far: 152000
Number of point (instruction) evaluations so far: 296848504
--- Timings ---
Current time: 1529615682881 milliseconds
Total Time:         653.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       230.4 seconds, 35.3%
Fitness Testing:    339.9 seconds, 52.0%
Report:              83.0 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 151
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 152
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 152
;;******************************
;; -*- Number IO problem report - generation 152
Test total error for best: 48507.946299999974
Test mean error for best: 24.25397
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 25.7125934515 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 25.7125934515 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_rot} {:instruction float_cos} {:instruction 67.39956373280218} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction float_flush} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 30} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 25.712593451480178} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_rot float_cos 67.39956373280218 integer_rot in2 float_cos 67.59641311186607 float_swap float_flush integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_yankdup float_rot in2 integer_mod float_yankdup integer_fromfloat integer_flush float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 30 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 25.712593451480178 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_dup_items in1 integer_sub float_max print_float)
Errors: [19.6079 8 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 6.4467 10 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 979.8811999999998
Mean: 19.597624
Genome size: 89
Size: 90
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2283.6244752999983
Median total errors in population: 1094.9438
Error averages by case: (73.24014330000007 10.154 67.88360749999995 3.814 122.2744354 2.498 75.77458490000001 1.577 66.37946290000001 1.677 59.668279 2.537 51.003735000000034 2.496 60.954327499999735 9.941 64.88076920000013 3.042 77.60018550000018 10.426 140.4273752 12.17 49.23612939999997 3.395 98.93492660000082 7.991 117.6788141 3.461 138.28615089999983 4.802 61.030294800000256 11.009 47.85448369999993 2.468 81.50371300000003 2.61 66.3866631 1.559 74.28415029999961 10.024 107.20085430000107 9.402 121.7719885 13.105 112.19965129999999 8.745 89.6760089000006 9.845 103.94174099999992 4.804)
Error minima by case: (5.141 8 12.8876 2 4.6757 1 23.7288 1 16.2385 1 10.6798 2 0.9941 1 0.7102 7 6.0 1 7.481 2 25.4927 9 4.0 2 1.3141 3 0.3141 3 87.0 3 5.4467 8 2.3854 1 4.2028 2 19.0 1 5.8442 2 21.3141 3 36.6168 9 22.3141 2 3.7661 8 49.0 2)
Average genome size in population (length): 92.098
Average program size in population (points): 93.098
Average percent parens in population: 0.011
Minimum age in population: 210.7650225387586
Maximum age in population: 214.7982702852435
Average age in population: 212.6222741974184
Median age in population: 212.6431381795555
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 65
Genome diversity (% unique Plush genomes):	 0.823
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 65
Syntactic diversity (% unique Push programs):	 0.823
Total error diversity:				 0.393
Error (vector) diversity:			 0.393
Behavioral diversity:				 0.394
--- Run Statistics ---
Number of program evaluations used so far: 153000
Number of point (instruction) evaluations so far: 299150954
--- Timings ---
Current time: 1529615688022 milliseconds
Total Time:         658.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       232.2 seconds, 35.3%
Fitness Testing:    342.5 seconds, 52.0%
Report:              83.7 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 152
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 153
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 153
;;******************************
;; -*- Number IO problem report - generation 153
Test total error for best: 48507.946299999974
Test mean error for best: 24.25397
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 25.7125934515 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 25.7125934515 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction float_cos} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 30} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 25.712593451480178} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot float_cos float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_yankdup float_rot in2 integer_mod float_yankdup integer_fromfloat integer_flush float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 30 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 25.712593451480178 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_dup_items in1 integer_sub float_max print_float)
Errors: [19.6079 8 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 6.4467 10 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 979.8811999999998
Mean: 19.597624
Genome size: 85
Size: 86
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2391.5289032999976
Median total errors in population: 1078.8644
Error averages by case: (75.95275970000053 9.666 68.79665069999992 4.006 127.9029063 2.576 81.73489529999999 1.658 72.49689690000004 1.857 65.72815409999998 2.608 56.42462290000007 2.52 63.16375199999971 9.901 67.32293780000013 3.127 80.07998000000006 10.444 145.8930631 12.171 54.29637129999996 3.373 102.89557050000118 8.29 123.1586783 3.526 140.8395612 4.844 64.24507100000031 10.894 53.86035359999995 2.428 87.49343260000003 2.766 72.2751912 1.649 77.3847531999997 10.114 111.11376790000126 9.724 127.5920111 13.101 116.87947459999997 9.088 92.30686360000128 9.768 106.70818439999995 4.884)
Error minima by case: (5.002 8 1.046 2 3.1183 1 23.7288 1 16.2385 1 13.0 2 1.9941 1 1.0813 7 6.0 1 0.3965 2 27.0501 9 4.0 2 1.3141 3 0.3141 3 40.0333 3 5.5153 8 0.828 1 4.2028 2 5.7126 1 4.1222 2 21.3141 3 38.1742 9 22.3141 2 6.748 8 3.9016 2)
Average genome size in population (length): 91.482
Average program size in population (points): 92.482
Average percent parens in population: 0.011
Minimum age in population: 211.8101640401616
Maximum age in population: 215.6423428318602
Average age in population: 213.9276845302282
Median age in population: 213.9796552882704
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 83
Genome diversity (% unique Plush genomes):	 0.812
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 83
Syntactic diversity (% unique Push programs):	 0.812
Total error diversity:				 0.368
Error (vector) diversity:			 0.369
Behavioral diversity:				 0.369
--- Run Statistics ---
Number of program evaluations used so far: 154000
Number of point (instruction) evaluations so far: 301438004
--- Timings ---
Current time: 1529615692437 milliseconds
Total Time:         663.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       233.6 seconds, 35.2%
Fitness Testing:    344.9 seconds, 52.0%
Report:              84.5 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 153
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 154
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 154
;;******************************
;; -*- Number IO problem report - generation 154
Test total error for best: 48507.946299999974
Test mean error for best: 24.25397
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 25.7125934515 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 25.7125934515 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 30} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 25.712593451480178} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_rot integer_rot float_cos integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_yankdup float_rot in2 integer_mod float_yankdup integer_fromfloat integer_flush float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 30 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 25.712593451480178 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_dup_items in1 integer_sub float_max print_float)
Errors: [19.6079 8 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 6.4467 10 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 979.8811999999998
Mean: 19.597624
Genome size: 89
Size: 90
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2238.466087999999
Median total errors in population: 1072.3915
Error averages by case: (71.5786941000007 9.3 65.08195449999991 3.614 120.6037452 2.458 74.09803290000002 1.532 64.71679800000003 1.652 58.01316 2.495 50.32443460000001 2.533 59.50939139999972 9.904 60.940341600000096 2.873 76.9195870999999 10.189 138.78575870000003 12.152 48.9733803 3.337 95.25010170000076 8.511 116.8972395 3.426 136.73820669999986 4.646 60.91682790000025 10.773 49.37640869999996 2.363 79.83056130000001 2.579 64.702332 1.536 72.7119540999996 10.0 103.88921670000086 9.99 120.1739193 13.099 108.94519099999997 9.416 85.5972710000008 9.662 101.12657970000004 4.725)
Error minima by case: (13.6795 8 4.0104 2 6.1714 1 22.9413 1 15.451 1 12.0 2 1.9876 1 0.1853 7 6.0 1 0.145 2 23.7928 10 4.0 2 31.1981 3 74.0 3 40.3219 3 5.646 8 0.0049 1 3.4153 2 13.9175 1 1.7818 2 22.3242 3 36.216 11 28.9072 2 1.442 8 49.0 2)
Average genome size in population (length): 89.919
Average program size in population (points): 90.919
Average percent parens in population: 0.011
Minimum age in population: 212.8101640401616
Maximum age in population: 217.3885653949868
Average age in population: 215.2865281343407
Median age in population: 215.362402405077
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 70
Genome diversity (% unique Plush genomes):	 0.786
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 70
Syntactic diversity (% unique Push programs):	 0.786
Total error diversity:				 0.32
Error (vector) diversity:			 0.323
Behavioral diversity:				 0.324
--- Run Statistics ---
Number of program evaluations used so far: 155000
Number of point (instruction) evaluations so far: 303685979
--- Timings ---
Current time: 1529615697093 milliseconds
Total Time:         667.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       235.3 seconds, 35.2%
Fitness Testing:    347.4 seconds, 52.0%
Report:              85.0 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 154
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 155
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 155
;;******************************
;; -*- Number IO problem report - generation 155
Test total error for best: 48507.946299999974
Test mean error for best: 24.25397
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 25.7125934515 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 25.7125934515 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_rot} {:instruction float_cos} {:instruction 67.39956373280218} {:instruction integer_rot} {:instruction in2} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 30} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 25.712593451480178} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_rot float_cos 67.39956373280218 integer_rot in2 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_yankdup float_rot in2 integer_mod float_yankdup integer_fromfloat integer_flush float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 30 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 25.712593451480178 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_dup_items in1 integer_sub float_max print_float)
Errors: [19.6079 8 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 6.4467 10 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 979.8811999999998
Mean: 19.597624
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2222.780011599998
Median total errors in population: 1074.8979999999997
Error averages by case: (70.62689520000096 9.181 64.11239539999991 3.74 119.93173300000001 2.474 73.14365919999999 1.544 63.85835730000002 1.747 56.92565919999999 2.511 50.00430150000003 2.523 58.53832289999972 9.945 62.256550800000156 3.042 75.95309049999996 10.011 138.16164179999998 12.173 49.13867079999999 3.421 94.86276420000084 8.398 115.8417345 3.443 136.59415729999984 4.819 57.91168700000025 10.675 49.401794899999956 2.449 79.04307140000004 2.666 63.732923799999995 1.537 70.08248179999951 10.11 103.58514310000089 9.951 119.6930693 13.114 108.65843849999999 9.294 85.28305640000065 9.664 102.11141180000006 4.895)
Error minima by case: (5.9284 8 12.8876 2 21.0369 2 23.7288 1 16.2385 1 10.6798 2 1.9941 1 1.647 6 6.0 1 1.2923 2 51.2053 9 4.0 2 1.3141 3 0.3141 3 87.0 3 2.1593 8 5.0 1 4.2028 2 20.0 1 13.5586 2 21.3141 3 62.3294 9 22.3141 2 3.1531 8 49.0 3)
Average genome size in population (length): 89.298
Average program size in population (points): 90.298
Average percent parens in population: 0.011
Minimum age in population: 214.3629044675742
Maximum age in population: 218.5489820357804
Average age in population: 216.679467916757
Median age in population: 216.7171569246632
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.833
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.833
Total error diversity:				 0.336
Error (vector) diversity:			 0.338
Behavioral diversity:				 0.339
--- Run Statistics ---
Number of program evaluations used so far: 156000
Number of point (instruction) evaluations so far: 305918429
--- Timings ---
Current time: 1529615701842 milliseconds
Total Time:         672.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       236.8 seconds, 35.2%
Fitness Testing:    349.9 seconds, 52.0%
Report:              85.6 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 155
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 156
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 156
;;******************************
;; -*- Number IO problem report - generation 156
Test total error for best: 48546.56019999998
Test mean error for best: 24.27328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 27.1957212027 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 27.1957212027 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 30} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 27.19572120265825} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_pop} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_div integer_rot float_cos integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_yankdup float_rot in2 integer_mod float_yankdup float_yankdup integer_fromfloat integer_flush float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 30 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 27.19572120265825 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_pop in1 integer_sub float_max print_float)
Errors: [18.1248 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 4.9636 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 978.915
Mean: 19.5783
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2217.4190393999997
Median total errors in population: 1077.8644999999997
Error averages by case: (70.05145590000078 9.096 65.71941239999994 3.695 118.98781410000004 2.463 72.42156870000001 1.537 62.77496050000002 1.789 56.27172249999999 2.501 48.990525399999996 2.385 58.90796409999974 9.918 62.802233400000105 2.957 78.59868089999968 9.574 137.12159069999998 12.139 48.19955740000002 3.303 94.98176650000069 8.349 116.01857120000001 3.488 136.8516958999999 4.747 58.768694200000255 10.629 47.68610919999998 2.314 77.92301120000002 2.685 62.62651849999999 1.537 73.4199986999997 9.923 103.52242470000067 9.752 118.69060950000001 13.059 108.60943499999998 9.191 83.42714760000061 9.715 102.49257120000014 4.807)
Error minima by case: (6.327 8 7.7126 2 2.6757 1 23.7288 1 16.2385 1 10.6798 2 2.7816 1 0.3109 8 6.0 1 7.481 2 27.4927 9 4.0 2 1.3141 3 16.1063 3 46.6781 3 4.9636 8 0.3854 1 4.2028 2 5.7126 1 5.8442 2 22.3242 3 38.6168 9 22.3141 2 3.1531 8 3.9016 2)
Average genome size in population (length): 88.989
Average program size in population (points): 89.989
Average percent parens in population: 0.011
Minimum age in population: 215.6046014830378
Maximum age in population: 220.10019452994
Average age in population: 218.1119663244918
Median age in population: 218.1444413433793
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.856
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.856
Total error diversity:				 0.306
Error (vector) diversity:			 0.307
Behavioral diversity:				 0.307
--- Run Statistics ---
Number of program evaluations used so far: 157000
Number of point (instruction) evaluations so far: 308143154
--- Timings ---
Current time: 1529615706913 milliseconds
Total Time:         677.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       238.5 seconds, 35.2%
Fitness Testing:    352.7 seconds, 52.1%
Report:              86.3 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 156
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 157
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 157
;;******************************
;; -*- Number IO problem report - generation 157
Test total error for best: 48546.56019999998
Test mean error for best: 24.27328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 27.1957212027 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 27.1957212027 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 30} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 27.19572120265825} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_pop} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_div integer_rot float_cos integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_yankdup float_rot in2 integer_mod float_yankdup float_yankdup integer_fromfloat integer_flush float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 30 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 27.19572120265825 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_pop in1 integer_sub float_max print_float)
Errors: [18.1248 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 4.9636 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 978.915
Mean: 19.5783
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2665.3624126
Median total errors in population: 1075.9793999999997
Error averages by case: (86.3000976000012 9.089 82.16972479999983 3.825 138.11374950000004 2.622 91.5777819 1.707 83.18018640000001 1.878 76.4975931 2.663 66.61324420000008 2.636 73.82897559999971 9.896 80.02219410000022 3.281 92.4874181999995 9.719 155.94595410000002 12.196 63.10646339999992 3.633 114.66149720000135 8.491 135.4392377 3.641 154.3659253999999 5.042 75.14756000000025 10.618 60.66204959999994 2.687 98.04942120000004 2.795 83.63567979999999 1.707 88.24941219999972 10.132 122.73251620000146 10.04 137.7528852 13.108 128.008172 9.323 101.5514944000012 9.702 119.66917879999993 5.163)
Error minima by case: (5.327 8 6.5051 2 21.0369 1 23.7288 1 16.2385 1 13.0 2 2.7816 1 0.3109 7 6.0 1 7.481 2 51.2053 9 4.0 2 1.3141 3 0.3141 3 87.0 3 4.9636 8 5.0 1 4.2028 2 19.0 1 5.8442 2 21.3141 3 62.3294 9 22.3141 2 5.1663 8 49.0 2)
Average genome size in population (length): 89.226
Average program size in population (points): 90.226
Average percent parens in population: 0.011
Minimum age in population: 217.3921654920892
Maximum age in population: 221.3777770606707
Average age in population: 219.4946990512824
Median age in population: 219.5298928906134
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.844
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.844
Total error diversity:				 0.274
Error (vector) diversity:			 0.274
Behavioral diversity:				 0.275
--- Run Statistics ---
Number of program evaluations used so far: 158000
Number of point (instruction) evaluations so far: 310373804
--- Timings ---
Current time: 1529615711564 milliseconds
Total Time:         682.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       239.9 seconds, 35.2%
Fitness Testing:    355.2 seconds, 52.1%
Report:              86.9 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 157
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 158
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 158
;;******************************
;; -*- Number IO problem report - generation 158
Test total error for best: 48546.56019999998
Test mean error for best: 24.27328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 27.1957212027 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 27.1957212027 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 30} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 27.19572120265825} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_pop} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_div integer_rot float_cos integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_yankdup float_rot in2 integer_mod float_yankdup float_yankdup integer_fromfloat integer_flush float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 30 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 27.19572120265825 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_pop in1 integer_sub float_max print_float)
Errors: [18.1248 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 4.9636 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 978.915
Mean: 19.5783
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2453.1258608000007
Median total errors in population: 1077.1464999999998
Error averages by case: (77.30008530000102 9.086 73.05335449999993 3.718 130.7471698 2.538 83.363852 1.603 75.46889620000002 1.778 69.2829733 2.582 58.63575970000001 2.416 67.68381549999975 9.953 69.77375590000013 2.868 84.15904349999961 9.715 149.41177730000004 12.176 54.6010434 3.295 105.46845550000096 8.519 126.88081410000001 3.515 143.66337569999985 4.677 66.48554290000027 10.599 52.733170999999956 2.337 90.86198670000003 2.704 75.0001587 1.592 80.77108759999963 10.141 111.97799540000095 9.918 131.1539893 13.099 118.09755449999997 9.431 93.23286930000084 9.749 110.55833370000003 4.75)
Error minima by case: (5.9284 8 0.9573 2 21.0369 1 23.7288 1 16.2385 1 10.6798 2 1.7816 1 0.5942 8 6.0 1 6.4503 2 51.2053 10 4.0 2 39.1101 3 74.0 3 87.0 3 4.8803 8 5.0 1 4.2028 2 19.0 1 4.8135 2 42.6383 3 62.3294 12 50.2212 2 4.1663 8 49.0 2)
Average genome size in population (length): 89.12
Average program size in population (points): 90.12
Average percent parens in population: 0.011
Minimum age in population: 218.3921654920892
Maximum age in population: 222.7956646480041
Average age in population: 220.8447461566712
Median age in population: 220.9255072816205
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.863
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.863
Total error diversity:				 0.325
Error (vector) diversity:			 0.326
Behavioral diversity:				 0.326
--- Run Statistics ---
Number of program evaluations used so far: 159000
Number of point (instruction) evaluations so far: 312601854
--- Timings ---
Current time: 1529615715995 milliseconds
Total Time:         686.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       241.4 seconds, 35.1%
Fitness Testing:    357.6 seconds, 52.1%
Report:              87.6 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 158
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 159
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 159
;;******************************
;; -*- Number IO problem report - generation 159
Test total error for best: 48546.56019999998
Test mean error for best: 24.27328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 27.1957212027 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 27.1957212027 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 30} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 27.19572120265825} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_pop} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_div integer_rot float_cos integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_yankdup float_rot in2 integer_mod float_yankdup float_yankdup integer_fromfloat integer_flush float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 30 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 27.19572120265825 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_pop in1 integer_sub float_max print_float)
Errors: [18.1248 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 4.9636 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 978.915
Mean: 19.5783
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 1969.1666489999989
Median total errors in population: 1074.1407
Error averages by case: (58.372428900000706 9.067 53.796557899999925 3.478 112.25777660000001 2.379 65.25676560000001 1.431 55.87423700000002 1.651 48.96102439999999 2.402 39.28836179999999 2.339 45.189283899999744 9.843 48.86049130000005 2.62 64.16915650000023 9.58 130.6231612 12.108 36.94665140000005 3.186 87.02887970000057 8.363 108.4456317 3.372 124.9075932999999 4.438 46.43096160000026 10.505 35.572683000000005 2.191 71.13484420000003 2.572 55.23168939999999 1.421 63.21861139999936 9.994 95.16761400000067 9.933 112.06660560000002 13.043 100.70913189999997 9.263 70.91449850000016 9.543 89.4900082000001 4.53)
Error minima by case: (5.9284 8 1.847 2 4.6757 2 23.7288 1 16.2385 1 12.0 2 1.2984 1 1.356 6 6.0 1 11.8363 2 25.4927 9 4.0 2 1.3141 3 0.3141 3 87.0 3 4.9636 8 2.3854 1 4.2028 2 5.7126 1 12.5586 2 21.3141 2 36.6168 9 22.3141 2 5.748 8 49.0 3)
Average genome size in population (length): 89.103
Average program size in population (points): 90.103
Average percent parens in population: 0.011
Minimum age in population: 219.9983834875635
Maximum age in population: 224.4473185477886
Average age in population: 222.1573810269992
Median age in population: 222.186281948448
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.842
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.842
Total error diversity:				 0.296
Error (vector) diversity:			 0.296
Behavioral diversity:				 0.296
--- Run Statistics ---
Number of program evaluations used so far: 160000
Number of point (instruction) evaluations so far: 314829454
--- Timings ---
Current time: 1529615720557 milliseconds
Total Time:         691.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       243.0 seconds, 35.1%
Fitness Testing:    360.0 seconds, 52.1%
Report:              88.1 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 159
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 160
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 160
;;******************************
;; -*- Number IO problem report - generation 160
Test total error for best: 48546.56019999998
Test mean error for best: 24.27328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 27.1957212027 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 27.1957212027 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 30} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 27.19572120265825} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_pop} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_div integer_rot float_cos integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_yankdup float_rot in2 integer_mod float_yankdup float_yankdup integer_fromfloat integer_flush float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 30 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 27.19572120265825 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_pop in1 integer_sub float_max print_float)
Errors: [18.1248 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 4.9636 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 978.915
Mean: 19.5783
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2420.469627900001
Median total errors in population: 1076.5355
Error averages by case: (78.79327820000103 9.434 72.1616543999999 3.726 127.105492 2.59 80.9416217 1.673 71.48113930000001 1.86 64.96153519999999 2.635 57.75108600000005 2.643 67.59065049999973 9.905 68.70755040000013 3.04 86.82078639999938 9.528 145.09130270000003 12.183 56.814328199999956 3.493 102.08243280000111 8.472 123.1952581 3.584 143.30888519999996 4.836 67.52479980000032 10.599 57.120040799999934 2.522 86.47507830000004 2.756 72.29763639999999 1.668 81.78660699999966 9.931 110.40258380000125 10.067 126.67629720000001 13.114 115.61680349999997 9.382 93.04453040000095 9.731 108.43524959999993 4.911)
Error minima by case: (5.9284 8 7.7126 2 21.0369 1 23.7288 1 16.2385 1 13.0 2 1.2984 1 1.223 8 4.9645 1 7.481 2 51.2053 10 4.0 2 38.796 3 24.2166 3 40.3219 3 4.9636 8 5.0 1 4.2028 2 5.7126 1 13.5586 2 22.3242 3 41.3832 11 28.9072 2 6.748 8 49.0 2)
Average genome size in population (length): 89.283
Average program size in population (points): 90.283
Average percent parens in population: 0.011
Minimum age in population: 221.0169369870131
Maximum age in population: 225.5641275613088
Average age in population: 223.5038326351562
Median age in population: 223.5673519520301
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.87
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.87
Total error diversity:				 0.281
Error (vector) diversity:			 0.283
Behavioral diversity:				 0.283
--- Run Statistics ---
Number of program evaluations used so far: 161000
Number of point (instruction) evaluations so far: 317061529
--- Timings ---
Current time: 1529615725212 milliseconds
Total Time:         695.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       244.4 seconds, 35.1%
Fitness Testing:    362.6 seconds, 52.1%
Report:              88.7 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 160
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 161
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 161
;;******************************
;; -*- Number IO problem report - generation 161
Test total error for best: 48546.56019999998
Test mean error for best: 24.27328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 27.1957212027 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 27.1957212027 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 30} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 27.19572120265825} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_pop} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_div integer_rot float_cos integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_yankdup float_rot in2 integer_mod float_yankdup float_yankdup integer_fromfloat integer_flush float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div in2 float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 30 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 27.19572120265825 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_pop in1 integer_sub float_max print_float)
Errors: [18.1248 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 4.9636 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 978.915
Mean: 19.5783
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2341.680737299999
Median total errors in population: 1084.4285
Error averages by case: (76.07864230000091 9.898 70.21027789999984 3.848 123.09329260000001 2.469 75.91487629999999 1.545 67.43171880000003 1.755 61.585539499999996 2.512 52.48376070000002 2.645 64.45289289999977 9.887 68.63775720000005 3.056 83.86264439999938 9.461 141.2470984 12.148 51.119663200000005 3.481 99.88516890000105 8.117 119.73140649999999 3.479 142.18701710000005 4.874 64.60095170000048 10.39 50.84782639999992 2.469 82.65302080000002 2.665 67.374226 1.544 79.19182789999974 9.849 109.22226240000127 9.579 122.891941 13.08 113.96719579999998 8.895 92.52466870000099 9.813 108.09405989999992 4.932)
Error minima by case: (5.002 6 8.0694 2 3.6757 1 22.2457 1 14.7553 1 10.6798 2 0.2984 1 0.1901 8 5.0 1 12.8094 2 24.5239 10 3.0 2 24.0 2 25.0 2 86.0 3 4.9636 8 1.0962 1 2.7196 2 19.0 1 12.5586 2 4.0 2 35.7604 11 3.0 1 5.748 8 48.0 2)
Average genome size in population (length): 88.694
Average program size in population (points): 89.694
Average percent parens in population: 0.011
Minimum age in population: 222.0169369870131
Maximum age in population: 226.8617206464555
Average age in population: 224.8287306350245
Median age in population: 224.8697898962281
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.88
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.88
Total error diversity:				 0.322
Error (vector) diversity:			 0.323
Behavioral diversity:				 0.323
--- Run Statistics ---
Number of program evaluations used so far: 162000
Number of point (instruction) evaluations so far: 319278879
--- Timings ---
Current time: 1529615729932 milliseconds
Total Time:         700.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       246.0 seconds, 35.1%
Fitness Testing:    365.2 seconds, 52.1%
Report:              89.4 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 161
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 162
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 162
;;******************************
;; -*- Number IO problem report - generation 162
Test total error for best: 48611.96119999998
Test mean error for best: 24.30598
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 28.2597883067 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 28.2597883067 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 30} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 28.259788306656205} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_pop} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (float_sub integer_rot float_cos integer_rot in2 float_cos 67.59641311186607 float_swap float_mod integer_fromfloat in2 in2 integer_min float_frominteger float_max in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_dup_items integer_flush integer_stackdepth float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div integer_div float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 30 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 28.259788306656205 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_pop in1 integer_sub float_max print_float)
Errors: [17.0607 12 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 3.8995 8 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 976.7867999999999
Mean: 19.535736
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2303.4745189000014
Median total errors in population: 1077.8644999999997
Error averages by case: (72.57964440000032 10.525 67.71424209999998 3.782 123.2029761 2.5 75.8915619 1.585 67.47184820000004 1.781 60.52298499999999 2.541 53.05038700000001 2.511 61.67743659999976 9.937 63.658778899999994 2.931 78.93378119999956 9.58 141.3812173 12.145 50.1790916 3.404 99.490329800001 8.395 120.62920830000002 3.534 138.32945650000005 4.785 60.88134120000065 10.131 50.008631299999934 2.395 82.58066940000003 2.692 68.2606739 1.603 76.07314659999972 9.958 108.85349000000129 9.823 123.15144390000002 13.057 113.40234079999998 9.235 88.31294080000106 9.782 103.7868960999999 4.838)
Error minima by case: (5.9284 8 9.1957 2 5.6757 2 25.2445 1 19.0 1 10.6798 2 1.2984 1 1.3165 8 5.0 1 2.3971 2 24.4927 11 3.0 2 14.3975 3 65.7078 3 86.0 3 3.8995 7 0.3854 1 29.9154 2 5.6216 1 13.5586 2 17.9257 2 36.6168 11 25.5087 2 3.0119 8 48.0 3)
Average genome size in population (length): 88.389
Average program size in population (points): 89.389
Average percent parens in population: 0.011
Minimum age in population: 223.4987917753114
Maximum age in population: 228.1175916633794
Average age in population: 226.184645761529
Median age in population: 226.2368190036967
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 32
Genome diversity (% unique Plush genomes):	 0.839
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.839
Total error diversity:				 0.329
Error (vector) diversity:			 0.329
Behavioral diversity:				 0.329
--- Run Statistics ---
Number of program evaluations used so far: 163000
Number of point (instruction) evaluations so far: 321488629
--- Timings ---
Current time: 1529615734573 milliseconds
Total Time:         705.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       247.3 seconds, 35.1%
Fitness Testing:    367.7 seconds, 52.1%
Report:              89.9 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 162
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 163
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 163
;;******************************
;; -*- Number IO problem report - generation 163
Test total error for best: 48611.96119999998
Test mean error for best: 24.30598
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 28.2597883067 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 28.2597883067 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 30} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 28.259788306656205} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_pop} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (float_sub integer_rot float_cos integer_rot in2 float_cos 67.59641311186607 float_swap float_mod integer_fromfloat in2 in2 integer_min float_frominteger float_max in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_dup_items integer_flush integer_stackdepth float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div integer_div float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 30 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 28.259788306656205 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_pop in1 integer_sub float_max print_float)
Errors: [17.0607 12 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 3.8995 8 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 976.7867999999999
Mean: 19.535736
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2391.664563299997
Median total errors in population: 1075.8638999999998
Error averages by case: (76.43675540000027 11.043 71.46849139999996 3.724 127.4916403 2.574 80.81338829999999 1.653 72.41667430000003 1.86 65.73464549999998 2.601 55.14863590000001 2.465 61.94819269999979 9.867 67.37484649999993 2.872 81.3663561999994 9.534 145.6110889 12.187 52.945709400000005 3.526 103.10069140000083 8.434 124.31032750000001 3.483 142.30690470000016 4.746 64.75186590000064 9.997 49.73797119999994 2.452 87.17965460000005 2.775 72.3955045 1.595 79.02161279999967 9.998 111.74238520000125 10.022 127.55022360000001 13.098 116.90147479999997 9.301 91.52472940000096 9.804 108.00979289999984 4.764)
Error minima by case: (4.4453 8 2.6156 2 4.6757 1 22.2457 1 14.7553 1 10.6798 2 1.2984 1 1.3165 6 6.0 1 6.481 2 24.9353 10 4.0 2 1.3141 3 16.1063 3 87.0 3 3.8995 7 2.3854 1 2.7196 2 7.1957 1 5.8442 2 21.3141 3 36.0594 10 22.3141 2 5.1663 8 49.0 3)
Average genome size in population (length): 88.163
Average program size in population (points): 89.163
Average percent parens in population: 0.011
Minimum age in population: 224.4987917753114
Maximum age in population: 229.7207969606352
Average age in population: 227.5461426645651
Median age in population: 227.588233462961
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.817
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.817
Total error diversity:				 0.314
Error (vector) diversity:			 0.315
Behavioral diversity:				 0.315
--- Run Statistics ---
Number of program evaluations used so far: 164000
Number of point (instruction) evaluations so far: 323692704
--- Timings ---
Current time: 1529615739319 milliseconds
Total Time:         710.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       248.9 seconds, 35.0%
Fitness Testing:    370.4 seconds, 52.2%
Report:              90.7 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 163
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 164
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 164
;;******************************
;; -*- Number IO problem report - generation 164
Test total error for best: 48611.96119999998
Test mean error for best: 24.30598
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 28.2597883067 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 28.2597883067 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_swap} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 30} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 28.259788306656205} {:instruction float_shove} {:instruction float_tan} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_pop} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_min integer_rot float_cos integer_rot in2 float_cos 67.59641311186607 float_swap integer_swap integer_fromfloat in2 in2 integer_min float_frominteger float_max in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_dup_items integer_flush integer_stackdepth float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div integer_div float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 30 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 28.259788306656205 float_shove float_tan integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_pop in1 integer_sub float_max print_float)
Errors: [17.0607 12 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 3.8995 8 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 976.7867999999999
Mean: 19.535736
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2654.5759969999967
Median total errors in population: 1069.7449499999998
Error averages by case: (86.24870310000044 11.271 81.78441549999992 3.852 137.18508749999995 2.652 90.6476961 1.76 82.30976720000001 1.95 75.5553779 2.703 67.34098900000001 2.647 76.41895139999968 9.855 77.96211610000005 2.953 93.42278649999913 9.68 154.9831274 12.192 65.17227440000003 3.564 112.59106760000125 8.735 134.36556050000002 3.674 151.3576740000001 4.822 74.79037670000105 9.922 64.39217809999985 2.525 97.14630290000002 2.853 82.45174259999999 1.775 89.93071829999992 10.17 120.21229840000164 10.348 136.95898169999998 13.107 125.45446669999997 9.691 101.35813860000127 9.797 117.2001987999999 4.837)
Error minima by case: (3.9536 8 6.5051 2 3.6757 1 22.2457 1 14.7553 1 10.6798 2 0.2344 1 2.4903 8 6.0 1 7.481 2 26.4927 9 4.0 2 1.3141 3 16.1063 3 87.0 3 3.7948 8 1.3854 1 2.7196 2 7.1957 1 5.8442 2 21.3141 3 37.6168 9 22.3141 2 6.748 8 49.0 2)
Average genome size in population (length): 88.193
Average program size in population (points): 89.193
Average percent parens in population: 0.011
Minimum age in population: 226.3696133962983
Maximum age in population: 230.9776857592298
Average age in population: 228.9072101400396
Median age in population: 228.9258424774264
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.832
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.832
Total error diversity:				 0.272
Error (vector) diversity:			 0.273
Behavioral diversity:				 0.273
--- Run Statistics ---
Number of program evaluations used so far: 165000
Number of point (instruction) evaluations so far: 325897529
--- Timings ---
Current time: 1529615743964 milliseconds
Total Time:         714.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       250.3 seconds, 35.0%
Fitness Testing:    372.9 seconds, 52.2%
Report:              91.2 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 164
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 165
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 165
;;******************************
;; -*- Number IO problem report - generation 165
Test total error for best: 48611.96119999998
Test mean error for best: 24.30598
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 28.2597883067 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 28.2597883067 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 30} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 28.259788306656205} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_pop} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_div integer_rot float_cos integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_yankdup float_rot in2 integer_mod integer_flush float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div integer_div float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 30 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 28.259788306656205 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_pop in1 integer_sub float_max print_float)
Errors: [17.0607 12 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 3.8995 8 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 976.7867999999999
Mean: 19.535736
Genome size: 90
Size: 91
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2208.9875753999963
Median total errors in population: 1073.21115
Error averages by case: (68.05463819999954 11.305 65.97066800000005 3.668 120.52967570000001 2.408 72.95932429999999 1.462 64.35397450000002 1.623 57.493006099999995 2.43 47.70372619999999 2.363 57.25866749999975 9.778 62.777843799999886 2.766 75.06029159999981 9.667 138.6961863 12.156 46.039314100000034 3.422 93.9324731000005 8.48 115.6565267 3.376 136.96499050000023 4.624 56.08440340000041 9.758 44.3230637 2.331 79.57847440000003 2.557 64.1365154 1.443 71.1568736999993 10.086 102.48374060000091 10.092 119.998621 13.09 107.70179839999997 9.404 84.84868370000063 9.722 102.56709449999993 4.646)
Error minima by case: (17.0607 9 2.0823 2 79.0 1 30.0 1 20.0 1 13.0 2 0.2344 1 1.647 6 6.0 1 2.245 2 98.0 9 4.0 2 37.204 3 16.1063 3 46.6781 3 3.8995 7 5.0 1 36.0 2 19.0 1 3.8818 2 22.3242 3 78.0 9 28.9072 2 6.748 7 3.9016 2)
Average genome size in population (length): 88.183
Average program size in population (points): 89.183
Average percent parens in population: 0.011
Minimum age in population: 227.3696133962983
Maximum age in population: 232.4267222169218
Average age in population: 230.2901149686648
Median age in population: 230.3207397963123
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.848
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.848
Total error diversity:				 0.291
Error (vector) diversity:			 0.291
Behavioral diversity:				 0.292
--- Run Statistics ---
Number of program evaluations used so far: 166000
Number of point (instruction) evaluations so far: 328102104
--- Timings ---
Current time: 1529615748462 milliseconds
Total Time:         719.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       251.8 seconds, 35.0%
Fitness Testing:    375.3 seconds, 52.2%
Report:              91.9 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 165
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 166
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 166
;;******************************
;; -*- Number IO problem report - generation 166
Test total error for best: 48645.941699999996
Test mean error for best: 24.32297
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 28.8686554576 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 28.8686554576 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction 81} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 30} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 28.868655457563438} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_pop} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_rot integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 float_frominteger float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_yankdup float_rot 81 integer_mod float_yankdup integer_fromfloat integer_flush float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div integer_div float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 30 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 28.868655457563438 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_pop in1 integer_sub float_max print_float)
Errors: [16.4519 10 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 3.2906 11 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 976.5690999999999
Mean: 19.531382
Genome size: 87
Size: 88
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2228.1986330999985
Median total errors in population: 1074.7700999999997
Error averages by case: (70.10818160000012 11.442 65.68113729999996 3.949 120.1402997 2.451 73.39162300000001 1.509 64.21968930000004 1.818 57.202752399999994 2.477 49.326764100000005 2.631 60.16077559999974 9.906 63.82572039999987 3.026 77.94439259999967 9.516 138.3929946 12.158 47.963294200000014 3.565 93.70479820000081 8.448 115.07758100000001 3.416 137.9207290000002 4.814 58.40256890000027 9.729 47.688761299999946 2.581 79.34068890000005 2.708 63.995026599999996 1.527 72.34402229999945 9.937 101.583194700001 10.027 120.2023604 13.09 106.89127149999999 9.378 84.36808160000079 9.736 103.56092389999998 4.922)
Error minima by case: (16.4519 9 9.1957 2 22.52 1 21.1816 1 13.6913 1 13.0 2 0.2344 1 0.3271 7 6.0 1 7.2573 2 52.6884 11 4.0 2 1.3141 3 0.3141 3 87.0 3 3.2906 8 5.0 1 1.6556 2 7.1957 1 12.5586 2 21.3141 3 63.8125 11 22.3141 2 3.7661 6 49.0 2)
Average genome size in population (length): 87.787
Average program size in population (points): 88.787
Average percent parens in population: 0.011
Minimum age in population: 228.3696133962983
Maximum age in population: 233.6042344442719
Average age in population: 231.6605393182937
Median age in population: 231.7208075516662
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.853
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.853
Total error diversity:				 0.332
Error (vector) diversity:			 0.335
Behavioral diversity:				 0.335
--- Run Statistics ---
Number of program evaluations used so far: 167000
Number of point (instruction) evaluations so far: 330296779
--- Timings ---
Current time: 1529615753185 milliseconds
Total Time:         723.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       253.3 seconds, 35.0%
Fitness Testing:    377.8 seconds, 52.2%
Report:              92.5 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 166
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 167
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 167
;;******************************
;; -*- Number IO problem report - generation 167
Test total error for best: 48645.941699999996
Test mean error for best: 24.32297
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 28.8686554576 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 28.8686554576 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction 81} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 30} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 28.868655457563438} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_pop} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_rot integer_rot integer_rot integer_rot in2 float_cos 67.59641311186607 float_swap integer_div integer_fromfloat in2 in2 float_frominteger float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_yankdup float_rot 81 integer_mod float_yankdup integer_fromfloat integer_flush float_yankdup float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div integer_div float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 30 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 28.868655457563438 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_pop in1 integer_sub float_max print_float)
Errors: [16.4519 10 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 3.2906 11 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 976.5690999999999
Mean: 19.531382
Genome size: 87
Size: 88
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2053.451349099998
Median total errors in population: 1070.0733
Error averages by case: (59.76211040000042 11.607 60.48515359999997 3.74 112.97832460000001 2.429 65.4787474 1.495 56.78199610000003 1.684 50.1146185 2.464 42.017566400000014 2.52 53.987655599999684 9.832 57.1698706999999 2.839 71.61894240000002 9.429 131.2108113 12.093 40.300999900000015 3.26 87.71606580000044 8.575 110.1660145 3.421 132.53564470000003 4.552 48.166175499999866 9.429 40.77721960000001 2.355 71.94205990000005 2.602 57.3247563 1.512 66.26760149999926 9.878 95.1186903000008 10.034 112.61322240000001 13.026 100.52922489999997 9.578 78.06189700000034 9.764 97.51197980000006 4.696)
Error minima by case: (14.6038 9 2.9387 2 3.6757 2 21.1816 1 13.6913 1 12.2476 2 0.2344 1 0.5828 7 6.0 1 7.481 2 19.8189 9 4.0 2 40.1101 3 75.0 3 87.0 3 3.0409 8 1.3854 1 1.2234 2 20.0 1 5.8442 2 43.6383 3 22.4293 9 13.8898 2 6.748 8 49.0 3)
Average genome size in population (length): 87.408
Average program size in population (points): 88.408
Average percent parens in population: 0.011
Minimum age in population: 230.7335166792115
Maximum age in population: 234.9955415370067
Average age in population: 233.0049053193773
Median age in population: 233.064142513521
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 40
Genome diversity (% unique Plush genomes):	 0.824
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.824
Total error diversity:				 0.321
Error (vector) diversity:			 0.321
Behavioral diversity:				 0.322
--- Run Statistics ---
Number of program evaluations used so far: 168000
Number of point (instruction) evaluations so far: 332481979
--- Timings ---
Current time: 1529615757984 milliseconds
Total Time:         728.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       254.9 seconds, 35.0%
Fitness Testing:    380.5 seconds, 52.2%
Report:              93.2 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 167
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 168
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 168
;;******************************
;; -*- Number IO problem report - generation 168
Test total error for best: 48593.67569999998
Test mean error for best: 24.29684
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 28.919663598  
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 28.919663598  
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 30} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 28.919663597968174} {:instruction float_shove} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_pop} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (float_sub integer_rot float_cos integer_rot in2 float_cos 67.59641311186607 float_swap float_mod integer_fromfloat in2 in2 integer_min float_frominteger float_max in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_dup_items integer_flush integer_stackdepth float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div integer_div float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 30 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 28.919663597968174 float_shove float_shove integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_pop in1 integer_sub float_max print_float)
Errors: [16.4009 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 3.2396 10 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 976.4671
Mean: 19.529343
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2273.9362877
Median total errors in population: 1068.8602499999997
Error averages by case: (69.0080808000009 11.851 67.50029049999992 3.743 123.2936979 2.487 76.1070873 1.56 67.58370450000002 1.735 60.7713152 2.519 51.49776150000004 2.246 59.749344399999686 9.916 64.16964409999989 2.848 78.66942159999948 9.795 141.39517709999998 12.154 48.799728499999986 2.999 96.50241220000117 8.674 118.8223189 3.449 139.11790979999998 4.509 57.28189959999977 9.123 47.497589600000026 2.177 82.67787510000004 2.66 67.5098286 1.548 74.8558580999998 10.257 104.04433960000125 10.18 122.936209 13.083 109.44480789999997 9.691 86.97829410000111 9.708 104.16669180000014 4.643)
Error minima by case: (13.6795 8 3.6156 2 4.6757 1 30.0 1 20.0 1 13.0 2 0.2344 1 0.7675 8 6.0 1 7.481 2 24.5239 10 4.0 2 38.796 3 74.0 3 40.3219 3 3.2396 7 1.9338 1 29.9154 2 17.7628 1 5.8442 2 22.3242 3 35.7604 11 28.9072 2 6.748 8 49.0 2)
Average genome size in population (length): 87.121
Average program size in population (points): 88.121
Average percent parens in population: 0.011
Minimum age in population: 231.7981510988771
Maximum age in population: 236.3001020516507
Average age in population: 234.3029182833854
Median age in population: 234.3320361472231
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 44
Genome diversity (% unique Plush genomes):	 0.838
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 44
Syntactic diversity (% unique Push programs):	 0.838
Total error diversity:				 0.309
Error (vector) diversity:			 0.313
Behavioral diversity:				 0.313
--- Run Statistics ---
Number of program evaluations used so far: 169000
Number of point (instruction) evaluations so far: 334660004
--- Timings ---
Current time: 1529615762419 milliseconds
Total Time:         733.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       256.5 seconds, 35.0%
Fitness Testing:    382.8 seconds, 52.2%
Report:              93.7 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 168
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 169
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 169
;;******************************
;; -*- Number IO problem report - generation 169
Test total error for best: 48624.282800000015
Test mean error for best: 24.31214
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 29.0551338237 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 29.0551338237 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 30} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 29.055133823688582} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_pop} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (float_sub integer_rot float_cos integer_rot in2 float_cos 67.59641311186607 float_swap float_mod integer_fromfloat in2 in2 integer_min float_frominteger float_max in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_dup_items integer_flush integer_stackdepth float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div integer_div float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 30 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 29.055133823688582 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_pop in1 integer_sub float_max print_float)
Errors: [16.2654 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 3.1042 10 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 976.1961999999999
Mean: 19.523924
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 1970.7869762000018
Median total errors in population: 1064.9590999999998
Error averages by case: (57.51091470000096 11.915 57.49419259999988 3.96 109.9014379 2.384 62.658230700000004 1.445 53.30139740000001 1.7 46.313924799999995 2.407 40.23746440000006 2.503 46.54707069999979 9.937 54.955730699999876 3.033 65.91449600000024 9.661 128.35805119999998 12.124 39.38752859999995 3.107 82.9755325000004 8.692 105.8789528 3.351 129.6940497999999 4.646 45.36231389999976 9.067 39.93623020000005 2.393 68.59414720000004 2.606 53.2746381 1.452 61.53074049999932 10.219 91.16531990000063 10.267 109.8272778 13.058 96.56929049999998 9.703 74.52063170000028 9.672 94.79241160000022 4.783)
Error minima by case: (14.9589 8 6.5051 2 23.584 1 21.1816 1 13.6913 1 10.6798 2 0.2344 1 1.4124 7 5.0 1 4.6401 2 53.7525 9 3.0 2 37.204 3 16.1063 3 86.0 3 1.7977 7 4.0 1 1.6556 2 19.0 1 5.8442 2 22.3242 2 64.8766 9 28.9072 2 5.748 8 48.0 2)
Average genome size in population (length): 87.707
Average program size in population (points): 88.707
Average percent parens in population: 0.011
Minimum age in population: 232.9053295541242
Maximum age in population: 237.6032767310455
Average age in population: 235.7069685798635
Median age in population: 235.7837924340122
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 34
Genome diversity (% unique Plush genomes):	 0.837
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.837
Total error diversity:				 0.324
Error (vector) diversity:			 0.326
Behavioral diversity:				 0.326
--- Run Statistics ---
Number of program evaluations used so far: 170000
Number of point (instruction) evaluations so far: 336852679
--- Timings ---
Current time: 1529615767173 milliseconds
Total Time:         737.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       258.2 seconds, 35.0%
Fitness Testing:    385.3 seconds, 52.2%
Report:              94.2 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 169
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 170
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 170
;;******************************
;; -*- Number IO problem report - generation 170
Test total error for best: 48624.282800000015
Test mean error for best: 24.31214
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 29.0551338237 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 29.0551338237 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_swap} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction tag_float_840} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 30} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 29.055133823688582} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_pop} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_min integer_rot float_cos integer_rot in2 float_cos 67.59641311186607 float_swap integer_swap integer_fromfloat in2 in2 integer_min float_frominteger float_max in2 integer_min float_frominteger tag_float_840 float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_dup_items integer_flush integer_stackdepth float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div integer_div float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 30 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 29.055133823688582 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_pop in1 integer_sub float_max print_float)
Errors: [16.2654 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 3.1042 10 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 976.1961999999999
Mean: 19.523924
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2402.3487244000007
Median total errors in population: 1071.9526999999998
Error averages by case: (75.59277680000096 11.926 75.5535330999999 4.132 125.63989140000001 2.518 79.3282547 1.602 70.06976730000002 1.789 63.275383999999995 2.561 56.48654460000004 2.532 64.27748139999974 9.978 72.81471749999996 3.194 85.07425099999935 9.83 143.7060916 12.175 55.448154499999966 3.185 100.48115270000105 8.51 121.94701189999999 3.491 147.05901319999995 4.799 63.77230989999975 9.185 55.01692310000002 2.413 85.12307350000003 2.716 70.17592869999999 1.604 81.18529039999994 10.252 109.2347029000011 9.948 125.36857360000002 13.091 114.07482029999997 9.39 93.80891670000095 9.787 112.2681596000002 4.958)
Error minima by case: (2.0742 9 3.9416 2 3.6757 1 21.1816 1 13.6913 1 10.6798 2 0.2344 1 0.8858 7 6.0 1 5.1884 2 26.4927 11 4.0 2 38.1603 3 74.0 3 87.0 3 2.7701 8 1.3854 1 1.6556 2 19.0 1 5.8442 2 23.3242 3 37.6168 11 29.9072 2 3.7661 7 49.0 2)
Average genome size in population (length): 87.726
Average program size in population (points): 88.726
Average percent parens in population: 0.011
Minimum age in population: 234.7133092249919
Maximum age in population: 238.9956879236819
Average age in population: 237.0980321424887
Median age in population: 237.1334098336602
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 37
Genome diversity (% unique Plush genomes):	 0.846
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 37
Syntactic diversity (% unique Push programs):	 0.846
Total error diversity:				 0.316
Error (vector) diversity:			 0.317
Behavioral diversity:				 0.318
--- Run Statistics ---
Number of program evaluations used so far: 171000
Number of point (instruction) evaluations so far: 339045829
--- Timings ---
Current time: 1529615771583 milliseconds
Total Time:         742.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       259.7 seconds, 35.0%
Fitness Testing:    387.7 seconds, 52.2%
Report:              94.8 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 170
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 171
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 171
;;******************************
;; -*- Number IO problem report - generation 171
Test total error for best: 48624.282800000015
Test mean error for best: 24.31214
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 29.0551338237 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 29.0551338237 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 30} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 29.055133823688582} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 28.259788306656205} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_pop} {:instruction integer_div} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (float_sub integer_rot float_cos integer_rot in2 float_cos 67.59641311186607 float_swap float_mod integer_fromfloat in2 in2 integer_min float_frominteger float_max in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_dup_items integer_flush integer_stackdepth float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div integer_div float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 30 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 29.055133823688582 float_shove integer_dec integer_mult float_shove integer_add in1 float_stackdepth integer_swap 28.259788306656205 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_pop integer_div integer_sub float_max print_float)
Errors: [16.2654 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 3.1042 10 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 976.1961999999999
Mean: 19.523924
Genome size: 95
Size: 96
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2086.6607240000003
Median total errors in population: 1057.4618999999998
Error averages by case: (61.79340270000093 11.809 60.85659069999992 3.803 114.9924924 2.409 68.0403732 1.462 58.718036300000016 1.69 51.7947222 2.43 44.07571870000004 2.247 51.04540759999975 9.878 58.11891739999992 2.884 71.94096879999982 9.936 133.31044500000002 12.141 42.73610509999999 3.047 89.12521630000062 8.561 111.2651062 3.35 132.54889099999994 4.541 49.74687439999982 9.137 42.61167960000003 2.257 73.94959680000002 2.617 58.773535900000006 1.454 66.74386839999943 10.407 97.2754900000007 10.183 114.83777010000001 13.077 102.58122049999999 9.584 78.63994550000042 9.615 97.96934920000012 4.65)
Error minima by case: (2.5859 9 6.5051 2 6.8939 1 21.1816 1 13.6913 1 13.0 2 0.2344 1 1.7414 8 6.0 1 14.3917 2 25.7488 10 4.0 2 38.1603 3 74.0 3 87.0 3 2.372 8 0.4099 1 1.6556 2 19.0 1 12.964 2 22.3242 3 37.2196 11 28.9072 2 5.8203 8 49.0 2)
Average genome size in population (length): 87.794
Average program size in population (points): 88.794
Average percent parens in population: 0.011
Minimum age in population: 235.8583971318508
Maximum age in population: 240.2657629865611
Average age in population: 238.4118419183692
Median age in population: 238.43485505945
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 32
Genome diversity (% unique Plush genomes):	 0.827
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.827
Total error diversity:				 0.338
Error (vector) diversity:			 0.338
Behavioral diversity:				 0.338
--- Run Statistics ---
Number of program evaluations used so far: 172000
Number of point (instruction) evaluations so far: 341240679
--- Timings ---
Current time: 1529615776198 milliseconds
Total Time:         746.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       261.4 seconds, 35.0%
Fitness Testing:    390.1 seconds, 52.2%
Report:              95.3 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 171
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 172
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 172
;;******************************
;; -*- Number IO problem report - generation 172
Test total error for best: 48624.282800000015
Test mean error for best: 24.31214
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 29.0551338237 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 29.0551338237 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_rot} {:instruction float_cos} {:instruction float_max} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 30} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 29.055133823688582} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_pop} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (float_sub integer_rot float_cos float_max in2 float_cos 67.59641311186607 float_swap float_mod integer_fromfloat in2 in2 integer_min float_frominteger float_max in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_dup_items integer_flush integer_stackdepth float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div integer_div float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 30 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 29.055133823688582 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_pop in1 integer_sub float_max print_float)
Errors: [16.2654 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 3.1042 10 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 976.1961999999999
Mean: 19.523924
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2307.3268693000005
Median total errors in population: 1068.84195
Error averages by case: (71.67428550000069 11.693 68.91598659999993 3.751 123.5299824 2.549 76.9739599 1.627 67.67547250000001 1.801 60.85308919999999 2.587 53.41112600000004 2.488 62.2147455999997 9.987 64.60991629999998 2.944 80.75093059999966 9.644 141.6773555 12.183 52.73008859999998 3.178 97.15340630000092 8.669 119.1897345 3.517 139.05151809999984 4.623 59.79000559999995 9.696 52.985236699999994 2.363 82.77523750000002 2.714 67.42019289999999 1.618 75.26509589999968 10.134 105.54830430000098 10.136 123.162108 13.113 110.54651319999999 9.705 89.97576370000081 9.774 104.2538139000001 4.699)
Error minima by case: (13.8525 8 10.2598 2 23.584 1 20.5728 1 13.0824 1 10.6798 2 0.2344 1 0.3731 8 6.0 1 4.7497 2 53.7525 9 4.0 2 1.3141 2 0.3141 2 46.6781 3 0.6913 8 5.0 1 1.0467 2 8.2598 1 12.5586 2 4.0 2 64.8766 9 3.0 1 5.748 8 3.9016 2)
Average genome size in population (length): 88.439
Average program size in population (points): 89.439
Average percent parens in population: 0.011
Minimum age in population: 237.2481014095609
Maximum age in population: 241.7348930380573
Average age in population: 239.8144844516512
Median age in population: 239.8907626874795
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.841
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.841
Total error diversity:				 0.337
Error (vector) diversity:			 0.339
Behavioral diversity:				 0.339
--- Run Statistics ---
Number of program evaluations used so far: 173000
Number of point (instruction) evaluations so far: 343451654
--- Timings ---
Current time: 1529615780789 milliseconds
Total Time:         751.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       262.9 seconds, 35.0%
Fitness Testing:    392.6 seconds, 52.2%
Report:              95.9 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 172
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 173
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 173
;;******************************
;; -*- Number IO problem report - generation 173
Test total error for best: 48624.282800000015
Test mean error for best: 24.31214
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 29.0551338237 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 29.0551338237 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 30} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 29.055133823688582} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_pop} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (float_sub integer_rot float_cos integer_rot in2 float_cos 67.59641311186607 float_swap float_mod integer_fromfloat in2 in2 integer_min float_frominteger float_max in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_dup_items integer_flush integer_stackdepth float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div integer_div float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 30 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 29.055133823688582 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_pop in1 integer_sub float_max print_float)
Errors: [16.2654 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 3.1042 10 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 976.1961999999999
Mean: 19.523924
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2026.1314013000003
Median total errors in population: 1057.4618999999998
Error averages by case: (58.89796120000014 11.313 57.91456889999994 3.648 112.98936900000001 2.445 66.2653125 1.526 56.94727220000006 1.748 50.09492029999999 2.473 41.46313490000006 2.313 50.008283799999774 9.875 53.756605999999955 2.821 68.25782930000005 9.673 131.29819679999997 12.122 40.41561930000002 3.139 86.49307390000054 8.714 109.57364980000001 3.434 129.20513129999983 4.551 47.802633200000216 10.085 39.466501799999975 2.264 72.09914470000005 2.661 56.72636909999997 1.509 63.79010639999918 10.23 94.92768380000103 10.207 112.8985475 13.052 100.0346567 9.82 76.83467860000037 9.642 94.11915030000011 4.586)
Error minima by case: (2.5859 9 7.0221 2 3.1183 2 18.155 1 13.6913 1 3.5903 2 0.2261 1 1.3798 6 6.0 1 4.7497 2 10.7704 9 3.9363 2 1.3141 3 0.3141 3 40.3219 3 1.7121 7 1.3854 1 1.6556 2 9.0551 1 5.8442 2 21.3141 3 21.8945 9 22.3141 2 5.8203 8 49.0 3)
Average genome size in population (length): 88.266
Average program size in population (points): 89.266
Average percent parens in population: 0.011
Minimum age in population: 238.7342310211399
Maximum age in population: 243.2513367962772
Average age in population: 241.2698583755636
Median age in population: 241.3386286031024
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 40
Genome diversity (% unique Plush genomes):	 0.827
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.827
Total error diversity:				 0.356
Error (vector) diversity:			 0.357
Behavioral diversity:				 0.357
--- Run Statistics ---
Number of program evaluations used so far: 174000
Number of point (instruction) evaluations so far: 345658329
--- Timings ---
Current time: 1529615785140 milliseconds
Total Time:         755.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       264.3 seconds, 35.0%
Fitness Testing:    395.0 seconds, 52.3%
Report:              96.5 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 173
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 174
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 174
;;******************************
;; -*- Number IO problem report - generation 174
Test total error for best: 48618.33029999999
Test mean error for best: 24.30917
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 28.6150794615 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 28.6150794615 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction integer_stackdepth} {:instruction float_swap} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 30} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 28.615079461536244} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_pop} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (float_sub integer_rot float_cos integer_rot in2 float_cos integer_stackdepth float_swap float_mod integer_fromfloat in2 in2 integer_min float_frominteger float_max in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_dup_items integer_flush integer_stackdepth float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div integer_div float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 30 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 28.615079461536244 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_pop in1 integer_sub float_max print_float)
Errors: [16.7054 11 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 3.5442 8 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 975.0762
Mean: 19.501524
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2251.0843683000007
Median total errors in population: 1070.1866499999999
Error averages by case: (67.30807619999955 11.186 66.98457979999999 3.854 121.9984799 2.493 75.0424133 1.57 66.61945700000004 1.833 59.8316994 2.526 51.13728830000006 2.44 55.877836299999764 9.931 62.30405499999997 2.941 74.3013985999998 9.67 140.1543961 12.142 49.45903200000004 3.22 97.08801630000089 8.54 119.2304276 3.478 137.65184689999987 4.736 55.614160400000586 10.533 48.71098309999996 2.309 81.57127050000005 2.728 66.7378856 1.572 72.13044549999931 10.217 105.41951330000126 10.106 122.10115360000002 13.072 110.76847169999996 9.633 84.78853310000098 9.698 103.12894880000002 4.696)
Error minima by case: (15.2654 8 6.5051 2 3.6757 1 20.3863 1 12.8959 1 10.6798 2 0.2344 1 1.2856 7 6.0 1 4.7497 2 25.2446 9 4.0 2 38.796 3 74.0 3 87.0 3 2.1042 7 1.3854 1 0.8602 2 19.0 1 13.5586 2 22.3242 3 36.1005 10 28.9072 2 6.748 8 49.0 3)
Average genome size in population (length): 87.855
Average program size in population (points): 88.855
Average percent parens in population: 0.011
Minimum age in population: 240.2488236085877
Maximum age in population: 244.4349362509592
Average age in population: 242.7135008805842
Median age in population: 242.7903266169587
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 71
Genome diversity (% unique Plush genomes):	 0.792
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 71
Syntactic diversity (% unique Push programs):	 0.792
Total error diversity:				 0.334
Error (vector) diversity:			 0.334
Behavioral diversity:				 0.334
--- Run Statistics ---
Number of program evaluations used so far: 175000
Number of point (instruction) evaluations so far: 347854704
--- Timings ---
Current time: 1529615789758 milliseconds
Total Time:         760.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       265.9 seconds, 35.0%
Fitness Testing:    397.4 seconds, 52.3%
Report:              97.0 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 174
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 175
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 175
;;******************************
;; -*- Number IO problem report - generation 175
Test total error for best: 49138.260899999965
Test mean error for best: 24.56913
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 43.2392541152 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 43.2392541152 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction float_mod} {:instruction -90} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 30} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 43.23925411521981} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_pop} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (float_sub integer_rot float_cos integer_rot in2 float_cos 67.59641311186607 float_swap float_mod -90 in2 in2 integer_min float_frominteger float_max in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_dup_items integer_flush integer_stackdepth float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div integer_div float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 30 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 43.23925411521981 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_pop in1 integer_sub float_max print_float)
Errors: [2.0813 8 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 11.08 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 966.8972
Mean: 19.337944
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2308.5577098000012
Median total errors in population: 1066.52765
Error averages by case: (71.96920339999913 11.224 69.29854630000007 3.79 123.65257040000002 2.529 76.31950220000002 1.608 67.81181250000002 1.823 60.9639683 2.564 52.96342760000009 2.493 63.445483799999785 9.947 65.17472479999998 3.004 79.09936579999952 9.519 141.77182890000003 12.158 51.879465800000105 3.378 97.73069490000094 8.53 119.2245752 3.505 139.8168705999997 4.852 60.276068100000906 10.605 52.26258259999988 2.492 82.93930180000002 2.744 67.4389658 1.598 75.16444389999951 9.98 105.09156850000117 10.138 123.3589052 13.085 110.88856259999994 9.678 89.1885574000008 9.782 105.0837133999999 4.717)
Error minima by case: (2.0813 8 6.5051 2 6.8939 1 25.2445 1 20.0 1 10.6798 2 0.1209 1 0.4231 7 6.0 1 7.481 2 25.7488 9 4.0 2 1.3141 2 0.3141 2 46.6781 3 3.1042 8 0.4099 1 29.9735 2 8.2598 1 5.8442 2 4.0 2 37.2196 9 3.0 1 5.748 8 3.9016 2)
Average genome size in population (length): 87.282
Average program size in population (points): 88.282
Average percent parens in population: 0.011
Minimum age in population: 242.015252650065
Maximum age in population: 245.9147155712731
Average age in population: 244.1518889928692
Median age in population: 244.2181826200174
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 80
Genome diversity (% unique Plush genomes):	 0.801
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 80
Syntactic diversity (% unique Push programs):	 0.801
Total error diversity:				 0.317
Error (vector) diversity:			 0.318
Behavioral diversity:				 0.318
--- Run Statistics ---
Number of program evaluations used so far: 176000
Number of point (instruction) evaluations so far: 350036754
--- Timings ---
Current time: 1529615794170 milliseconds
Total Time:         764.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       267.4 seconds, 35.0%
Fitness Testing:    399.8 seconds, 52.3%
Report:              97.6 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 175
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 176
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 176
;;******************************
;; -*- Number IO problem report - generation 176
Test total error for best: 49138.260899999965
Test mean error for best: 24.56913
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 43.2392541152 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 0.3440526367  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -3.0020264326 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 43.2392541152 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction float_mod} {:instruction -90} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 30} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 43.23925411521981} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_pop} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (float_sub integer_rot float_cos integer_rot in2 float_cos 67.59641311186607 float_swap float_mod -90 in2 in2 integer_min float_frominteger float_max in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_dup_items integer_flush integer_stackdepth float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div integer_div float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 30 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 43.23925411521981 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_pop in1 integer_sub float_max print_float)
Errors: [2.0813 8 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 6.8304 9 6.0 1 23.6293 12 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 11.08 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 966.8972
Mean: 19.337944
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 1970.4338563
Median total errors in population: 1056.7739499999998
Error averages by case: (56.21650309999913 11.18 53.13226550000006 3.625 112.1565188 2.38 65.0017589 1.451 55.63294670000002 1.659 48.675624 2.405 40.462477100000065 2.203 46.11408449999975 9.87 50.16077149999996 2.782 65.74320090000023 9.732 130.53868369999998 12.135 39.06039450000008 3.12 84.50538790000036 8.64 107.29645260000001 3.334 125.63991569999976 4.654 44.30556560000077 10.485 39.37361619999993 2.186 70.92594260000004 2.58 55.4459324 1.439 60.015423399999314 10.232 92.63683680000065 10.235 111.9437607 13.072 97.91314399999997 9.923 73.31961050000017 9.653 90.75803869999999 4.484)
Error minima by case: (2.0813 8 6.5051 2 24.3794 1 15.3673 1 7.8769 1 10.6798 2 0.1209 1 0.3433 7 6.0 1 14.9985 2 54.5478 9 4.0 2 1.3141 3 0.3141 3 87.0 3 1.9148 8 5.0 1 0.8602 2 9.0551 1 2.2891 2 21.3141 3 65.6719 9 22.3141 2 3.7661 8 49.0 2)
Average genome size in population (length): 87.549
Average program size in population (points): 88.549
Average percent parens in population: 0.011
Minimum age in population: 243.150120949741
Maximum age in population: 247.3828851296508
Average age in population: 245.5482675561732
Median age in population: 245.5688391374186
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 73
Genome diversity (% unique Plush genomes):	 0.832
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 73
Syntactic diversity (% unique Push programs):	 0.832
Total error diversity:				 0.291
Error (vector) diversity:			 0.293
Behavioral diversity:				 0.293
--- Run Statistics ---
Number of program evaluations used so far: 177000
Number of point (instruction) evaluations so far: 352225554
--- Timings ---
Current time: 1529615798716 milliseconds
Total Time:         769.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       269.0 seconds, 35.0%
Fitness Testing:    402.2 seconds, 52.3%
Report:              98.1 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 176
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 177
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 177
;;******************************
;; -*- Number IO problem report - generation 177
Test total error for best: 49179.596299999954
Test mean error for best: 24.58980
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 43.2392541152 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 43.2392541152 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_rot} {:instruction integer_mod} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction float_cos} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction float_mod} {:instruction float_swap} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 30} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 43.23925411521981} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_pop} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (float_sub integer_rot integer_mod integer_rot in2 float_cos float_cos integer_rot in2 float_cos 67.59641311186607 float_swap float_mod float_swap float_mod integer_fromfloat in2 in2 integer_min float_frominteger float_max in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_dup_items integer_flush integer_stackdepth float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div integer_div float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod in1 float_mod float_max 30 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 43.23925411521981 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_pop in1 integer_sub float_max print_float)
Errors: [2.0813 8 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 11.08 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 965.9879
Mean: 19.319757
Genome size: 94
Size: 95
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2075.0291656000018
Median total errors in population: 1070.9179
Error averages by case: (60.63387629999888 11.209 58.545637100000064 3.613 115.0031306 2.421 68.06137179999999 1.489 58.66966040000002 1.649 51.79237179999999 2.452 42.89434210000008 2.244 53.53886369999971 9.91 55.14815199999994 2.769 71.0276426999999 9.508 133.3281318 12.137 41.35820560000009 3.124 89.35246420000081 8.464 111.24894710000001 3.389 129.90629969999983 4.668 49.58843820000082 10.505 40.98069289999991 2.186 73.93493090000004 2.582 58.546320599999994 1.478 67.1128168999993 9.928 97.27231370000095 9.986 114.671755 13.075 102.86374689999997 9.543 81.4378131000006 9.791 95.46324049999996 4.528)
Error minima by case: (2.0813 8 11.0551 2 5.6757 1 20.3863 1 12.8959 1 10.6798 2 0.1209 1 0.8858 7 6.0 1 7.481 2 24.4927 11 4.0 2 38.796 3 74.0 3 87.0 3 2.1042 8 3.3854 1 0.8602 2 9.0551 1 0.0 0 22.3242 3 35.6168 12 28.9072 2 6.748 8 49.0 3)
Average genome size in population (length): 87.953
Average program size in population (points): 88.953
Average percent parens in population: 0.011
Minimum age in population: 244.5307864642513
Maximum age in population: 248.9561004627432
Average age in population: 246.8884429709999
Median age in population: 246.9464117214873
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 49
Genome diversity (% unique Plush genomes):	 0.842
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 49
Syntactic diversity (% unique Push programs):	 0.842
Total error diversity:				 0.29
Error (vector) diversity:			 0.292
Behavioral diversity:				 0.293
--- Run Statistics ---
Number of program evaluations used so far: 178000
Number of point (instruction) evaluations so far: 354424429
--- Timings ---
Current time: 1529615803170 milliseconds
Total Time:         773.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       270.5 seconds, 35.0%
Fitness Testing:    404.6 seconds, 52.3%
Report:              98.6 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 177
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 178
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 178
;;******************************
;; -*- Number IO problem report - generation 178
Test total error for best: 49179.596299999954
Test mean error for best: 24.58980
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 43.2392541152 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 43.2392541152 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_rot} {:instruction float_cos} {:instruction in1} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction float_mod} {:instruction float_swap} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction in2} {:instruction float_frominteger} {:instruction float_max} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_dec} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 30} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 43.23925411521981} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_pop} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (float_sub integer_rot float_cos in1 in2 float_cos 67.59641311186607 float_swap float_mod float_swap float_mod integer_fromfloat in2 float_frominteger float_max in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_dup_items integer_flush integer_stackdepth float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div integer_dec float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 30 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 43.23925411521981 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_pop in1 integer_sub float_max print_float)
Errors: [2.0813 8 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 11.08 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 965.9879
Mean: 19.319757
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2364.3560483999986
Median total errors in population: 1056.8712999999998
Error averages by case: (71.98030569999936 11.107 70.11692670000004 3.76 126.77191940000002 2.563 80.6991649 1.662 71.49362300000001 1.832 64.7746363 2.621 56.86707220000006 2.486 64.15867079999978 9.882 66.03053829999996 2.864 81.93140929999963 9.71 144.85806300000004 12.146 55.50476090000006 3.298 98.77380850000064 8.86 121.70005160000002 3.556 140.2946872999999 4.728 61.215726700000566 10.397 55.64300329999996 2.378 86.47041920000005 2.751 71.57936740000001 1.658 77.0744385999996 10.093 106.7643898000009 10.332 126.6217906 13.069 111.88873209999997 10.065 89.34764470000077 9.652 105.7428981 4.582)
Error minima by case: (2.0813 8 9.6639 2 3.7641 2 25.2445 1 20.0 1 10.6798 2 0.1209 1 2.4903 7 6.0 1 7.481 2 25.2446 10 4.0 2 40.1101 3 74.0 3 87.0 3 1.5745 8 0.4099 1 29.8573 2 20.0 1 5.8442 2 43.6383 3 36.1005 10 51.2212 2 5.1663 8 49.0 3)
Average genome size in population (length): 88.583
Average program size in population (points): 89.583
Average percent parens in population: 0.011
Minimum age in population: 245.6785765280963
Maximum age in population: 250.1497972950831
Average age in population: 248.1151599483141
Median age in population: 248.1526824929408
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.849
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.849
Total error diversity:				 0.29
Error (vector) diversity:			 0.29
Behavioral diversity:				 0.29
--- Run Statistics ---
Number of program evaluations used so far: 179000
Number of point (instruction) evaluations so far: 356639054
--- Timings ---
Current time: 1529615807721 milliseconds
Total Time:         778.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       271.9 seconds, 34.9%
Fitness Testing:    407.1 seconds, 52.3%
Report:              99.2 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 178
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 179
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 179
;;******************************
;; -*- Number IO problem report - generation 179
Test total error for best: 49179.596299999954
Test mean error for best: 24.58980
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 43.2392541152 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 43.2392541152 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_add} {:instruction integer_mod} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction float_cos} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction float_mod} {:instruction float_swap} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 30} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 43.23925411521981} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_pop} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (float_sub float_add integer_mod integer_rot in2 float_cos float_cos integer_rot in2 float_cos 67.59641311186607 float_swap float_mod float_swap float_dec integer_fromfloat in2 in2 integer_min float_frominteger float_max in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_dup_items integer_flush integer_stackdepth float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div integer_div float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod in1 float_mod float_max 30 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 43.23925411521981 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_pop in1 integer_sub float_max print_float)
Errors: [2.0813 8 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 11.08 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 965.9879
Mean: 19.319757
Genome size: 94
Size: 95
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2368.8116148000004
Median total errors in population: 1060.1542
Error averages by case: (71.91694949999942 10.995 70.66827110000004 3.843 126.21810600000003 2.564 79.89195360000001 1.64 70.58817950000001 1.829 64.11907759999998 2.592 55.86198960000006 2.443 64.8323803999998 10.028 67.07699309999995 2.897 82.36333449999948 9.741 144.1693145 12.193 54.83841100000005 3.313 99.98010310000097 8.733 122.2682622 3.533 142.16981090000002 4.728 62.52466840000032 10.2 54.09909209999996 2.347 85.65455080000002 2.745 70.4903044 1.646 76.83373069999973 10.095 107.88207740000112 10.232 125.79525439999999 13.112 113.14133749999996 9.851 91.21844210000113 9.8 108.46502039999997 4.644)
Error minima by case: (1.23 8 3.6156 2 3.6757 2 6.2022 1 1.2882 1 10.6798 2 0.1209 1 0.1529 8 6.0 1 0.7189 2 25.4927 9 4.0 2 1.3141 2 0.3141 2 46.6781 3 2.5526 7 1.3854 1 0.8602 2 11.8405 1 2.3557 2 4.0 2 25.4493 9 3.0 1 6.748 7 3.9016 3)
Average genome size in population (length): 88.251
Average program size in population (points): 89.251
Average percent parens in population: 0.011
Minimum age in population: 247.2502819307209
Maximum age in population: 251.3408080954756
Average age in population: 249.3655672010188
Median age in population: 249.4223260257225
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.841
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.841
Total error diversity:				 0.331
Error (vector) diversity:			 0.334
Behavioral diversity:				 0.334
--- Run Statistics ---
Number of program evaluations used so far: 180000
Number of point (instruction) evaluations so far: 358845379
--- Timings ---
Current time: 1529615812201 milliseconds
Total Time:         782.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       273.5 seconds, 34.9%
Fitness Testing:    409.4 seconds, 52.3%
Report:              99.9 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 179
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 180
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 180
;;******************************
;; -*- Number IO problem report - generation 180
Test total error for best: 49179.596299999954
Test mean error for best: 24.58980
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 43.2392541152 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 43.2392541152 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_rot} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction in2} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction integer_div} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 30} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 43.23925411521981} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_pop} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (float_sub integer_rot float_cos integer_rot in2 in2 integer_min float_frominteger float_max in2 float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod integer_dup float_dup_items integer_flush integer_stackdepth float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div integer_div float_dec float_mod float_max float_yankdup integer_stackdepth integer_div float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 30 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 43.23925411521981 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_pop in1 integer_sub float_max print_float)
Errors: [2.0813 8 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 11.08 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 965.9879
Mean: 19.319757
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2446.6326954000015
Median total errors in population: 1046.663
Error averages by case: (72.02421119999998 10.42 75.27500799999996 3.925 128.8592041 2.584 82.6551262 1.669 73.45958580000003 1.87 66.63690720000001 2.622 60.74892350000005 2.609 67.10203569999975 9.903 70.41344579999999 2.984 85.80346629999961 9.93 146.87707800000004 12.171 60.24175170000005 3.353 102.22606920000078 9.009 124.98606660000002 3.589 145.16519360000018 4.79 66.60452410000028 9.762 61.668406000000026 2.34 88.45939910000006 2.785 72.77820419999999 1.66 81.38897299999981 10.194 110.29392110000097 10.325 128.6571385 13.069 115.25929849999999 10.056 92.80724030000081 9.627 110.26051769999994 4.735)
Error minima by case: (2.0813 8 9.3477 2 3.7641 2 27.2302 1 20.0 1 13.0 2 0.1209 1 1.1215 8 6.0 1 7.481 2 25.2446 10 4.0 2 1.3141 2 0.3141 2 87.0 3 2.1593 8 1.4932 1 21.2302 2 8.6151 1 12.5586 2 4.0 2 36.1005 10 3.0 1 3.7661 7 49.0 3)
Average genome size in population (length): 88.086
Average program size in population (points): 89.086
Average percent parens in population: 0.011
Minimum age in population: 248.2502819307209
Maximum age in population: 252.5606548830803
Average age in population: 250.618627034861
Median age in population: 250.6612446615803
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 42
Genome diversity (% unique Plush genomes):	 0.804
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.804
Total error diversity:				 0.332
Error (vector) diversity:			 0.332
Behavioral diversity:				 0.332
--- Run Statistics ---
Number of program evaluations used so far: 181000
Number of point (instruction) evaluations so far: 361047579
--- Timings ---
Current time: 1529615817014 milliseconds
Total Time:         787.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       275.1 seconds, 34.9%
Fitness Testing:    411.9 seconds, 52.3%
Report:             100.4 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 180
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 181
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 181
;;******************************
;; -*- Number IO problem report - generation 181
Test total error for best: 49179.596299999954
Test mean error for best: 24.58980
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 43.2392541152 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 43.2392541152 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction integer_stackdepth} {:instruction float_swap} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_fromfloat} {:instruction float_frominteger} {:instruction in2} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction integer_div} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 30} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 43.23925411521981} {:instruction float_shove} {:instruction integer_swap} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_pop} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (float_sub integer_rot float_cos integer_rot in2 float_cos integer_stackdepth float_swap float_mod integer_fromfloat in2 in2 integer_fromfloat float_frominteger in2 float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod integer_dup float_dup_items integer_flush integer_stackdepth float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div integer_div float_dec float_mod float_max float_yankdup integer_stackdepth integer_div float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 30 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 43.23925411521981 float_shove integer_swap integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_pop in1 integer_sub float_max print_float)
Errors: [2.0813 8 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 11.08 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 965.9879
Mean: 19.319757
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 1884.3196577000022
Median total errors in population: 1056.94605
Error averages by case: (45.29055219999985 9.588 50.86583490000001 3.784 107.55458780000001 2.374 59.59223640000002 1.443 50.98329600000003 1.668 43.9899182 2.41 38.055654700000034 2.408 45.38401079999975 9.891 47.53721889999991 2.726 62.06243010000022 9.76 126.04530479999998 12.114 37.64689220000004 3.251 81.64388830000034 8.749 103.99978349999999 3.37 122.91200770000019 4.62 45.63866380000047 9.703 38.48969339999996 2.173 66.31201030000005 2.589 50.4080514 1.442 58.98094409999943 9.94 89.96923220000072 10.056 107.6161595 12.991 95.03568519999997 9.752 69.85435350000012 9.63 87.4012478 4.618)
Error minima by case: (2.0813 8 3.6156 2 3.6757 1 25.2445 1 19.0 1 10.6798 2 0.1209 1 1.1215 7 6.0 1 7.481 2 25.4927 10 4.0 2 1.3141 3 0.3141 3 87.0 3 3.1042 7 1.3854 1 28.9154 2 3.3651 1 5.8442 2 21.3141 3 36.6168 10 22.3141 2 3.7661 8 49.0 3)
Average genome size in population (length): 87.723
Average program size in population (points): 88.723
Average percent parens in population: 0.011
Minimum age in population: 249.8146931385618
Maximum age in population: 253.9536340488048
Average age in population: 251.9976900353869
Median age in population: 252.0560015952395
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 39
Genome diversity (% unique Plush genomes):	 0.79
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.79
Total error diversity:				 0.332
Error (vector) diversity:			 0.333
Behavioral diversity:				 0.334
--- Run Statistics ---
Number of program evaluations used so far: 182000
Number of point (instruction) evaluations so far: 363240679
--- Timings ---
Current time: 1529615821435 milliseconds
Total Time:         792.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       276.6 seconds, 34.9%
Fitness Testing:    414.3 seconds, 52.3%
Report:             101.1 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 181
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 182
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 182
;;******************************
;; -*- Number IO problem report - generation 182
Test total error for best: 49179.596299999954
Test mean error for best: 24.58980
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 43.2392541152 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 43.2392541152 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_rot} {:instruction float_cos} {:instruction in1} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction float_mod} {:instruction float_swap} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction in2} {:instruction float_frominteger} {:instruction float_max} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_dec} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 30} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 43.23925411521981} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_pop} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (float_sub integer_rot float_cos in1 in2 float_cos 67.59641311186607 float_swap float_mod float_swap float_mod integer_fromfloat in2 float_frominteger float_max in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_dup_items integer_flush integer_stackdepth float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div integer_dec float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 30 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 43.23925411521981 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_pop in1 integer_sub float_max print_float)
Errors: [2.0813 8 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 11.08 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 965.9879
Mean: 19.319757
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2284.367400700002
Median total errors in population: 1050.7788999999998
Error averages by case: (59.051381299999555 9.11 68.41977649999997 3.878 121.90986160000001 2.541 74.1828979 1.625 66.44717900000003 1.799 59.74817170000001 2.587 53.67786110000004 2.55 61.94520279999973 9.936 66.33442609999987 2.919 78.88148659999968 9.902 140.06353410000003 12.144 52.84445500000003 3.359 97.63716440000107 8.903 120.0204954 3.54 139.70389450000022 4.799 64.12066390000088 9.79 53.334438200000044 2.304 81.49305530000004 2.722 66.5594534 1.647 75.1476320999996 10.21 105.48188590000137 10.18 121.94338809999999 13.014 110.9790822 9.831 85.53192130000119 9.617 105.19609229999995 4.805)
Error minima by case: (0.4092 8 2.6583 2 3.1183 2 6.2022 1 1.2882 1 10.6798 2 0.1209 1 1.1215 7 6.0 1 1.2071 2 0.0685 9 4.0 2 1.3141 3 16.1063 3 87.0 3 3.1042 8 0.828 1 13.3239 2 8.6151 1 0.4297 2 21.3141 3 11.1926 10 22.3141 2 6.748 8 49.0 3)
Average genome size in population (length): 88.11
Average program size in population (points): 89.11
Average percent parens in population: 0.011
Minimum age in population: 250.8146931385618
Maximum age in population: 255.5686771628369
Average age in population: 253.3832118055106
Median age in population: 253.4068169135766
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.79
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.79
Total error diversity:				 0.306
Error (vector) diversity:			 0.307
Behavioral diversity:				 0.307
--- Run Statistics ---
Number of program evaluations used so far: 183000
Number of point (instruction) evaluations so far: 365443454
--- Timings ---
Current time: 1529615826070 milliseconds
Total Time:         796.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       278.1 seconds, 34.9%
Fitness Testing:    416.9 seconds, 52.3%
Report:             101.7 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 182
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 183
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 183
;;******************************
;; -*- Number IO problem report - generation 183
Test total error for best: 49179.596299999954
Test mean error for best: 24.58980
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 43.2392541152 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 43.2392541152 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction 67.59641311186607} {:instruction float_swap} {:instruction integer_swap} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 30} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 43.23925411521981} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_pop} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (integer_min integer_rot float_cos integer_rot in2 float_cos 67.59641311186607 float_swap integer_swap integer_fromfloat in2 in2 in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_dup_items integer_flush integer_stackdepth float_rot in2 float_tan integer_shove in1 float_stackdepth integer_swap float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div integer_div float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 30 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 43.23925411521981 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_pop in1 integer_sub float_max print_float)
Errors: [2.0813 8 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 11.08 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 965.9879
Mean: 19.319757
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2495.7644498000027
Median total errors in population: 1046.663
Error averages by case: (68.89087269999987 9.059 79.13901119999989 3.991 129.99960080000002 2.571 83.78836650000001 1.656 74.54463450000003 1.817 67.7549313 2.612 62.25530700000002 2.653 71.1014748999997 9.937 75.68781609999996 3.001 90.62973809999923 9.603 148.10934469999998 12.181 61.325208500000016 3.463 103.17341740000116 9.152 125.9459471 3.558 149.08525180000012 4.954 73.62358460000097 9.917 61.2616701 2.378 89.59005910000003 2.749 74.2995433 1.646 84.9887878999999 10.055 110.57822640000134 10.445 130.32216759999997 13.031 115.88847829999999 10.169 93.57160400000103 9.657 115.01040589999982 4.944)
Error minima by case: (1.0813 7 13.7678 2 4.6757 1 30.0 1 20.0 1 13.0 2 0.1209 1 0.6114 5 6.0 1 9.5771 2 25.4927 9 4.0 2 1.3141 2 0.3141 2 87.0 3 3.1042 7 2.3854 1 29.9154 2 19.0 1 6.1416 2 4.0 2 36.6168 9 3.0 1 6.748 8 49.0 2)
Average genome size in population (length): 88.731
Average program size in population (points): 89.731
Average percent parens in population: 0.011
Minimum age in population: 252.6355939608954
Maximum age in population: 256.5502247576463
Average age in population: 254.6993275851328
Median age in population: 254.7356667490341
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.803
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.803
Total error diversity:				 0.29
Error (vector) diversity:			 0.291
Behavioral diversity:				 0.292
--- Run Statistics ---
Number of program evaluations used so far: 184000
Number of point (instruction) evaluations so far: 367661729
--- Timings ---
Current time: 1529615830689 milliseconds
Total Time:         801.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       279.5 seconds, 34.9%
Fitness Testing:    419.3 seconds, 52.3%
Report:             102.2 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 183
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 184
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 184
;;******************************
;; -*- Number IO problem report - generation 184
Test total error for best: 49179.596299999954
Test mean error for best: 24.58980
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 43.2392541152 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 43.2392541152 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_rot} {:instruction in2} {:instruction float_frominteger} {:instruction float_max} {:instruction in2} {:instruction integer_min} {:instruction float_swap} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 30} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 43.23925411521981} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_pop} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (float_sub integer_rot float_cos integer_rot in2 float_frominteger float_max in2 integer_min float_swap float_mod integer_fromfloat in2 in2 integer_min float_frominteger float_max in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_mod float_max float_yankdup integer_div integer_div float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 30 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 43.23925411521981 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_pop in1 integer_sub float_max print_float)
Errors: [2.0813 8 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 11.08 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 965.9879
Mean: 19.319757
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2126.553783900002
Median total errors in population: 1058.5278999999998
Error averages by case: (51.96070659999963 8.958 58.82189200000001 3.801 117.90906250000002 2.432 70.9921698 1.503 61.67098740000003 1.695 54.742605 2.469 47.07516010000002 2.417 53.8555378999997 9.875 56.97307809999988 2.778 72.33160229999986 9.594 136.1794253 12.123 46.54791980000001 3.235 91.05311210000073 8.751 112.88118589999999 3.404 132.1039569000002 4.707 56.70451780000096 9.829 46.45864700000001 2.171 76.90867330000003 2.597 61.3966991 1.507 68.96714849999938 10.027 99.3279593000011 10.011 117.77280849999998 12.995 104.56705939999996 9.686 81.14377590000069 9.663 97.23909339999992 4.741)
Error minima by case: (2.0813 8 0.8001 2 38.5635 2 6.2022 1 1.2882 1 10.6798 2 6.0 1 1.647 7 5.0 1 3.0653 2 68.7319 10 3.0 2 1.3141 3 0.3141 3 86.0 3 8.7607 7 4.0 1 13.3239 2 20.0 1 1.4285 2 21.3141 2 77.0 10 22.3141 2 3.7661 8 48.0 3)
Average genome size in population (length): 88.633
Average program size in population (points): 89.633
Average percent parens in population: 0.011
Minimum age in population: 253.7476667009534
Maximum age in population: 257.9884784413239
Average age in population: 255.9880054999326
Median age in population: 256.0239180661826
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.846
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.846
Total error diversity:				 0.275
Error (vector) diversity:			 0.278
Behavioral diversity:				 0.278
--- Run Statistics ---
Number of program evaluations used so far: 185000
Number of point (instruction) evaluations so far: 369877604
--- Timings ---
Current time: 1529615835506 milliseconds
Total Time:         806.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       281.1 seconds, 34.9%
Fitness Testing:    422.0 seconds, 52.3%
Report:             103.0 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 184
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 185
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 185
;;******************************
;; -*- Number IO problem report - generation 185
Test total error for best: 49179.596299999954
Test mean error for best: 24.58980
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 43.2392541152 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 43.2392541152 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction integer_stackdepth} {:instruction float_swap} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction in2} {:instruction integer_min} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction 67} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 30} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction 25} {:instruction integer_swap} {:instruction 43.23925411521981} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_pop} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (float_frominteger integer_rot float_cos integer_rot in2 float_cos integer_stackdepth float_swap float_mod integer_fromfloat in2 in2 integer_min float_frominteger float_max in2 integer_min float_max float_yankdup float_yank 67 float_tan integer_shove float_dec float_mod float_dup_items float_dup_items integer_flush integer_stackdepth float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup float_mod integer_yankdup float_mod float_max float_yankdup integer_div integer_div float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 30 integer_div in2 float_tan integer_shove in1 25 integer_swap 43.23925411521981 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_pop in1 integer_sub float_max print_float)
Errors: [2.0813 8 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 11.08 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 965.9879
Mean: 19.319757
Genome size: 85
Size: 86
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2226.022614200003
Median total errors in population: 1059.3691
Error averages by case: (55.07235849999947 8.963 68.14387280000003 3.932 120.5520577 2.484 73.5640154 1.564 64.63049060000003 1.774 57.7976847 2.538 51.35927970000002 2.69 60.28144549999975 9.9 64.04573559999986 2.779 77.51143179999943 9.64 138.77077910000003 12.153 51.73924670000002 3.426 93.26809060000105 8.978 115.7146816 3.483 138.7011098000002 4.794 60.810963300000886 9.832 51.20550950000001 2.347 79.37924060000005 2.694 64.1436245 1.56 72.37821229999938 10.091 100.2467098000013 10.176 120.61677759999999 12.994 106.04812129999999 9.916 82.77324150000096 9.642 104.1049336999998 4.813)
Error minima by case: (1.2907 8 4.9747 2 3.6757 2 6.2022 1 20.0 1 10.6798 2 6.0 1 0.8858 7 6.0 1 6.0941 2 25.4927 9 4.0 2 1.3141 2 0.3141 2 87.0 3 8.7607 7 1.3854 1 28.9154 2 20.0 1 7.7309 2 4.0 2 36.6168 9 3.0 1 6.748 8 49.0 3)
Average genome size in population (length): 88.56
Average program size in population (points): 89.56
Average percent parens in population: 0.011
Minimum age in population: 254.7941919238905
Maximum age in population: 259.3962932107706
Average age in population: 257.3265927071532
Median age in population: 257.3368141589141
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.865
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.865
Total error diversity:				 0.281
Error (vector) diversity:			 0.282
Behavioral diversity:				 0.282
--- Run Statistics ---
Number of program evaluations used so far: 186000
Number of point (instruction) evaluations so far: 372091604
--- Timings ---
Current time: 1529615840034 milliseconds
Total Time:         810.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       282.6 seconds, 34.9%
Fitness Testing:    424.4 seconds, 52.4%
Report:             103.5 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 185
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 186
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 186
;;******************************
;; -*- Number IO problem report - generation 186
Test total error for best: 49179.596299999954
Test mean error for best: 24.58980
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 43.2392541152 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 43.2392541152 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction integer_stackdepth} {:instruction float_swap} {:instruction float_pop} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_fromfloat} {:instruction float_frominteger} {:instruction float_max} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 30} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 43.23925411521981} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_pop} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (float_sub integer_rot float_cos integer_rot in2 float_cos integer_stackdepth float_swap float_pop integer_fromfloat in2 in2 integer_fromfloat float_frominteger float_max in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_dup_items integer_flush integer_stackdepth float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div integer_div float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 30 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 43.23925411521981 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_pop in1 integer_sub float_max print_float)
Errors: [2.0813 8 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 11.08 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 965.9879
Mean: 19.319757
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2434.066793600003
Median total errors in population: 1062.1064499999998
Error averages by case: (65.00556839999955 9.097 73.74382609999988 4.067 128.79655680000002 2.58 82.5051758 1.665 73.3293983 1.851 66.5352625 2.627 59.52507140000002 2.724 66.88304439999968 9.961 71.12299629999994 3.011 84.20904519999942 9.52 146.8746034 12.18 57.86746590000002 3.507 103.84200590000094 8.819 125.07371250000001 3.545 145.5379422000002 4.981 69.31529940000094 9.904 57.07103639999999 2.421 88.36544880000004 2.757 73.3750433 1.663 79.94359369999971 9.996 111.83883280000113 10.054 128.84268699999998 13.014 117.1206625 9.704 91.9085052000009 9.753 111.04000939999987 4.993)
Error minima by case: (1.604 8 15.3452 2 38.5635 2 6.2022 1 1.2882 1 3.5903 2 6.0 1 0.2662 6 6.0 1 2.3971 2 68.7319 9 4.0 2 1.3141 3 0.3141 3 87.0 3 8.7607 8 5.0 1 13.3239 2 20.0 1 13.5586 2 21.3141 3 78.0 9 22.3141 2 6.748 8 49.0 3)
Average genome size in population (length): 88.906
Average program size in population (points): 89.906
Average percent parens in population: 0.011
Minimum age in population: 256.228729805758
Maximum age in population: 260.6298818161558
Average age in population: 258.7222005610858
Median age in population: 258.7412485254936
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.876
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.876
Total error diversity:				 0.268
Error (vector) diversity:			 0.269
Behavioral diversity:				 0.269
--- Run Statistics ---
Number of program evaluations used so far: 187000
Number of point (instruction) evaluations so far: 374314254
--- Timings ---
Current time: 1529615844898 milliseconds
Total Time:         815.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       284.0 seconds, 34.8%
Fitness Testing:    427.3 seconds, 52.4%
Report:             104.2 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 186
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 187
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 187
;;******************************
;; -*- Number IO problem report - generation 187
Test total error for best: 49179.596299999954
Test mean error for best: 24.58980
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 43.2392541152 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 43.2392541152 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_rot} {:instruction integer_mod} {:instruction float_dup} {:instruction in2} {:instruction float_cos} {:instruction float_cos} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction integer_stackdepth} {:instruction float_swap} {:instruction float_mod} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_sin} {:instruction float_max} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_add} {:instruction integer_div} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 30} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 43.23925411521981} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_pop} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (float_sub integer_rot integer_mod float_dup in2 float_cos float_cos integer_rot in2 float_cos integer_stackdepth float_swap float_mod in2 in2 integer_min float_sin float_max in2 integer_min float_frominteger float_max float_yankdup float_yank integer_stackdepth float_tan integer_shove float_dec float_mod float_dup_items float_dup_items integer_flush integer_stackdepth float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_add integer_div float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod in1 float_mod float_max 30 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 43.23925411521981 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_pop in1 integer_sub float_max print_float)
Errors: [2.0813 8 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 11.08 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 965.9879
Mean: 19.319757
Genome size: 91
Size: 92
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2209.9269234000035
Median total errors in population: 1046.663
Error averages by case: (57.37867679999961 8.948 63.62577500000001 4.021 120.6219913 2.461 74.0582515 1.532 64.83263030000005 1.817 57.8980384 2.494 50.01759880000003 2.584 57.63871929999976 9.905 61.22704339999989 2.897 76.22332379999948 9.809 138.79621519999998 12.171 49.21523870000001 3.358 92.95067410000101 9.018 115.871601 3.418 136.52702730000016 4.814 62.1337485000011 9.779 49.07392829999999 2.277 79.94149370000007 2.723 63.969482400000004 1.524 70.8087738999993 10.239 100.60510080000147 10.338 120.70240539999999 13.011 105.86426639999998 10.091 83.71052140000096 9.58 102.59739769999987 4.828)
Error minima by case: (1.0813 8 9.6639 2 0.2823 1 29.0 1 19.0 1 12.0 2 6.0 1 1.8751 7 6.0 1 3.8184 2 26.089 9 4.0 2 1.3141 3 0.3141 3 40.3219 3 8.7607 7 0.828 1 28.358 2 19.0 1 1.0 1 21.3141 3 37.6616 9 22.3141 2 5.748 8 49.0 3)
Average genome size in population (length): 88.774
Average program size in population (points): 89.774
Average percent parens in population: 0.011
Minimum age in population: 257.228729805758
Maximum age in population: 262.1828071317879
Average age in population: 260.0473358485383
Median age in population: 260.0997881431098
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.875
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.875
Total error diversity:				 0.276
Error (vector) diversity:			 0.277
Behavioral diversity:				 0.277
--- Run Statistics ---
Number of program evaluations used so far: 188000
Number of point (instruction) evaluations so far: 376533629
--- Timings ---
Current time: 1529615849481 milliseconds
Total Time:         820.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       285.4 seconds, 34.8%
Fitness Testing:    429.7 seconds, 52.4%
Report:             104.7 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 187
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 188
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 188
;;******************************
;; -*- Number IO problem report - generation 188
Test total error for best: 49096.20629999997
Test mean error for best: 24.54810
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 41.1219840527 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 41.1219840527 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_rot} {:instruction float_cos} {:instruction in2} {:instruction float_cos} {:instruction float_mod} {:instruction -90} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 30} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 41.12198405274626} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_pop} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (float_sub integer_rot float_cos in2 float_cos float_mod -90 in2 in2 integer_min float_frominteger float_max in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_dup_items integer_flush integer_stackdepth float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod integer_yankdup float_mod float_max integer_dec integer_yankdup float_mod float_max float_yankdup integer_div integer_div float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 30 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 41.12198405274626 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_pop in1 integer_sub float_max print_float)
Errors: [4.1985 7 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 8.9627 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 964.9877999999999
Mean: 19.299755
Genome size: 89
Size: 90
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2062.1909910000018
Median total errors in population: 1060.2474
Error averages by case: (49.35189700000006 9.006 59.465610100000035 3.956 114.03581290000001 2.428 67.02909030000001 1.488 57.71943010000004 1.712 50.77221949999999 2.459 45.54440250000002 2.492 51.07400809999977 9.973 56.84577459999987 2.868 67.76563880000026 9.665 132.3992429 12.152 44.63575470000002 3.329 89.03678600000056 8.659 110.3146557 3.406 131.4238248000003 4.784 53.99827110000091 9.846 45.11159999999999 2.244 72.99305760000006 2.64 57.605065 1.503 63.51150319999934 10.162 97.40732510000076 9.845 114.15264159999998 13.007 102.67869909999999 9.516 79.03283490000058 9.71 96.63884539999992 4.797)
Error minima by case: (2.0813 7 9.6639 2 4.6757 1 6.2022 1 1.2882 1 10.6798 2 5.0 1 0.5828 7 6.0 1 7.481 2 25.4927 10 4.0 2 40.1101 3 8.5796 3 87.0 3 8.9627 7 2.3854 1 13.3239 2 19.0 1 13.5586 2 43.6383 3 36.6168 12 48.7788 2 6.748 7 49.0 3)
Average genome size in population (length): 88.509
Average program size in population (points): 89.509
Average percent parens in population: 0.011
Minimum age in population: 259.0108554904656
Maximum age in population: 263.7652545977061
Average age in population: 261.4349677350418
Median age in population: 261.4662462257116
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.887
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.887
Total error diversity:				 0.315
Error (vector) diversity:			 0.317
Behavioral diversity:				 0.317
--- Run Statistics ---
Number of program evaluations used so far: 189000
Number of point (instruction) evaluations so far: 378746354
--- Timings ---
Current time: 1529615853953 milliseconds
Total Time:         824.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       287.0 seconds, 34.8%
Fitness Testing:    432.2 seconds, 52.4%
Report:             105.4 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 188
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 189
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 189
;;******************************
;; -*- Number IO problem report - generation 189
Test total error for best: 49096.20629999997
Test mean error for best: 24.54810
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 41.1219840527 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 41.1219840527 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_rot} {:instruction float_cos} {:instruction in2} {:instruction float_cos} {:instruction float_mod} {:instruction -90} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 30} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 41.12198405274626} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_pop} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (float_sub integer_rot float_cos in2 float_cos float_mod -90 in2 in2 integer_min float_frominteger float_max in2 integer_min float_frominteger float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_dup_items integer_flush integer_stackdepth float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod integer_yankdup float_mod float_max integer_dec integer_yankdup float_mod float_max float_yankdup integer_div integer_div float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 30 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 41.12198405274626 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items float_shove integer_add integer_dup_items in1 integer_sub float_max integer_pop in1 integer_sub float_max print_float)
Errors: [4.1985 7 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 8.9627 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 964.9877999999999
Mean: 19.299755
Genome size: 92
Size: 93
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2188.6420447000028
Median total errors in population: 1059.8805499999999
Error averages by case: (54.36493939999976 8.898 65.61066319999998 3.685 119.71004350000001 2.438 73.0702136 1.515 63.69860740000003 1.656 56.912907499999996 2.483 49.49992430000001 2.295 56.387651399999775 9.883 63.33309809999987 2.736 75.23213569999956 9.646 137.86929699999996 12.126 46.8764361 3.167 92.24127670000081 8.814 114.2853985 3.421 137.31899410000017 4.674 59.583687200000924 9.785 46.22412279999996 2.129 78.87030100000004 2.585 63.3323038 1.515 71.38306969999951 10.104 100.20011520000101 10.085 119.36326279999999 12.989 105.57622069999998 9.744 83.82715070000083 9.664 103.13022429999992 4.703)
Error minima by case: (1.0813 7 6.5051 2 3.1183 1 6.2022 1 1.2882 1 10.6798 2 5.0 1 0.8858 7 6.0 1 4.7497 2 27.0501 10 4.0 2 39.1101 3 24.2166 3 87.0 3 8.7607 7 0.828 1 13.3239 2 19.0 1 11.0833 2 42.6383 3 38.1742 12 50.2212 2 6.748 8 49.0 2)
Average genome size in population (length): 88.65
Average program size in population (points): 89.65
Average percent parens in population: 0.011
Minimum age in population: 260.3913053769457
Maximum age in population: 264.7668983421474
Average age in population: 262.695340434897
Median age in population: 262.7315418495698
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.878
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.878
Total error diversity:				 0.294
Error (vector) diversity:			 0.295
Behavioral diversity:				 0.296
--- Run Statistics ---
Number of program evaluations used so far: 190000
Number of point (instruction) evaluations so far: 380962604
--- Timings ---
Current time: 1529615858877 milliseconds
Total Time:         829.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       288.6 seconds, 34.8%
Fitness Testing:    434.6 seconds, 52.4%
Report:             106.0 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 189
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 190
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 190
;;******************************
;; -*- Number IO problem report - generation 190
Test total error for best: 49096.20629999997
Test mean error for best: 24.54810
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 41.1219840527 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.2353220543 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 41.1219840527 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction integer_max} {:instruction float_cos} {:instruction integer_rot} {:instruction in2} {:instruction float_cos} {:instruction integer_stackdepth} {:instruction float_swap} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction in2} {:instruction integer_min} {:instruction float_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 30} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 41.12198405274626} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_pop} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (float_frominteger integer_max float_cos integer_rot in2 float_cos integer_stackdepth float_swap float_mod integer_fromfloat in2 in2 integer_min float_frominteger float_max in2 integer_min float_max float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_dup_items integer_flush integer_stackdepth float_rot in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_yankdup float_mod float_max integer_dec integer_yankdup float_mod float_max float_yankdup integer_div integer_div float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 30 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 41.12198405274626 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_pop in1 integer_sub float_max print_float)
Errors: [4.1985 7 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 26.396 10 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 8.9627 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 964.9877999999999
Mean: 19.299755
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2281.4249537000032
Median total errors in population: 1063.9712
Error averages by case: (60.37233509999957 9.066 68.23386989999995 4.194 121.19647140000002 2.518 74.82024500000001 1.602 65.60490780000006 1.86 58.7267495 2.553 53.78337320000003 2.812 61.07886109999976 9.94 67.37007929999987 3.17 78.57970409999973 9.679 139.3782057 12.159 53.22578590000003 3.517 96.02456880000096 8.874 117.74763300000001 3.505 141.00758350000015 5.107 64.54939890000087 9.89 53.97817379999998 2.441 80.65929280000006 2.762 65.35248879999999 1.597 74.29392389999947 10.105 104.20196090000113 10.088 121.37758369999997 12.998 109.50545689999998 9.736 88.47963540000109 9.772 106.79266529999987 5.139)
Error minima by case: (2.0813 7 0.0 0 3.1183 1 30.0 1 20.0 1 13.0 2 5.0 1 0.1901 7 6.0 1 7.481 2 24.5239 9 4.0 2 1.3141 3 0.3141 3 87.0 3 8.754 7 0.4099 1 28.358 2 19.0 1 6.2068 2 21.3141 3 35.7604 9 22.3141 2 4.1663 8 49.0 2)
Average genome size in population (length): 88.372
Average program size in population (points): 89.372
Average percent parens in population: 0.011
Minimum age in population: 261.3913053769457
Maximum age in population: 266.075526601943
Average age in population: 264.0078920627215
Median age in population: 264.0404893035188
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.889
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.889
Total error diversity:				 0.3
Error (vector) diversity:			 0.302
Behavioral diversity:				 0.303
--- Run Statistics ---
Number of program evaluations used so far: 191000
Number of point (instruction) evaluations so far: 383171929
--- Timings ---
Current time: 1529615863414 milliseconds
Total Time:         834.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       290.1 seconds, 34.8%
Fitness Testing:    437.1 seconds, 52.4%
Report:             106.7 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 190
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 191
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 191
;;******************************
;; -*- Number IO problem report - generation 191
Test total error for best: 49544.72179999998
Test mean error for best: 24.77236
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 43.2392541152 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.8981414517 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 43.2392541152 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_rot} {:instruction integer_dup} {:instruction float_cos} {:instruction integer_stackdepth} {:instruction float_swap} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction in2} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction float_mod} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 30} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 43.23925411521981} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_pop} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (float_sub integer_rot float_cos integer_rot integer_dup float_cos integer_stackdepth float_swap float_mod integer_fromfloat in2 in2 integer_min float_frominteger float_max in2 integer_min float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_dup_items integer_flush integer_stackdepth float_rot in2 float_tan integer_shove in1 float_stackdepth float_mod integer_yankdup float_mod float_max float_yankdup integer_div integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div integer_div float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 30 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 43.23925411521981 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_pop in1 integer_sub float_max print_float)
Errors: [2.0813 8 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 25.7332 8 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 11.08 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 963.3250999999999
Mean: 19.266502
Genome size: 96
Size: 97
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2574.4349726000028
Median total errors in population: 1061.52985
Error averages by case: (71.7771194000001 9.065 81.9985449999999 4.111 132.54603740000002 2.57 85.269806 1.657 77.3388766 1.784 70.62469809999999 2.607 64.2468748 2.652 73.05475389999967 10.002 79.6139031 3.072 91.79101799999904 9.672 150.42739980000002 12.228 63.23635130000001 3.478 108.65373770000114 8.911 130.0096064 3.559 152.42448380000013 5.01 76.689277600001 9.961 64.22244130000001 2.403 92.30066090000004 2.717 78.21790209999999 1.641 86.77007429999992 10.085 116.51765220000142 10.115 132.2291077 13.083 121.54684999999999 9.825 99.38277710000126 9.798 118.52501809999985 5.014)
Error minima by case: (1.0813 7 1.5589 2 3.6757 1 25.2445 1 20.0 1 10.6798 2 0.7306 1 0.5928 6 6.0 1 1.531 2 24.7062 11 4.0 2 38.796 3 74.0 3 87.0 3 3.5815 7 1.3854 1 30.2712 2 19.0 1 2.5043 2 22.3242 3 37.6168 12 28.5018 2 3.7661 8 49.0 2)
Average genome size in population (length): 88.908
Average program size in population (points): 89.908
Average percent parens in population: 0.011
Minimum age in population: 263.1301204944008
Maximum age in population: 267.3792632703101
Average age in population: 265.3699214958571
Median age in population: 265.380101661733
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.88
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.88
Total error diversity:				 0.289
Error (vector) diversity:			 0.294
Behavioral diversity:				 0.295
--- Run Statistics ---
Number of program evaluations used so far: 192000
Number of point (instruction) evaluations so far: 385394679
--- Timings ---
Current time: 1529615868024 milliseconds
Total Time:         838.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       291.7 seconds, 34.8%
Fitness Testing:    439.6 seconds, 52.4%
Report:             107.3 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 191
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 192
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 192
;;******************************
;; -*- Number IO problem report - generation 192
Test total error for best: 49544.72179999998
Test mean error for best: 24.77236
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 43.2392541152 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: 2.0201014274  
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -0.8981414517 
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 43.2392541152 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -11.4359010453
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_rot} {:instruction integer_dup} {:instruction float_cos} {:instruction integer_stackdepth} {:instruction float_swap} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction in2} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction float_mod} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 30} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 43.23925411521981} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_pop} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (float_sub integer_rot float_cos integer_rot integer_dup float_cos integer_stackdepth float_swap float_mod integer_fromfloat in2 in2 integer_min float_frominteger float_max in2 integer_min float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_dup_items integer_flush integer_stackdepth float_rot in2 float_tan integer_shove in1 float_stackdepth float_mod integer_yankdup float_mod float_max float_yankdup integer_div integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dec float_mult float_dec float_mod integer_shove in1 integer_dup integer_dec integer_yankdup float_mod float_max float_yankdup integer_div integer_div float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 30 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 43.23925411521981 float_shove integer_dec integer_mult float_shove integer_add integer_dup_items in1 integer_sub float_max integer_pop in1 integer_sub float_max print_float)
Errors: [2.0813 8 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 5.1544 9 6.0 1 25.7332 8 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 11.08 9 5.0 1 36.0 2 20.0 1 13.5586 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 963.3250999999999
Mean: 19.266502
Genome size: 96
Size: 97
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2457.472811300003
Median total errors in population: 1064.2976999999998
Error averages by case: (64.51493739999954 9.014 75.92950029999996 4.128 129.73842050000002 2.577 83.8982242 1.661 74.72684890000002 1.898 67.988029 2.615 60.27935870000002 2.639 67.6370024999997 9.981 73.2212268999999 3.104 84.8524797999996 9.769 147.5919303 12.179 59.981434100000016 3.456 103.65714370000101 8.817 124.6879553 3.544 146.66424210000008 4.97 69.04451860000074 9.93 59.17787750000001 2.402 89.62109110000004 2.802 73.7341575 1.658 80.45951749999968 10.176 111.3566165000012 9.983 129.60935179999998 13.022 116.88261259999999 9.632 95.01364970000103 9.76 112.48368479999986 5.004)
Error minima by case: (0.1325 7 0.0 0 4.6757 1 30.0 1 20.0 1 13.0 2 5.0 1 0.521 7 5.7491 1 0.0 0 24.5239 9 1.7662 2 3.1292 3 16.1063 2 37.3219 3 1.8526 8 1.9338 1 29.9154 2 19.0 1 0.0 0 0.3991 3 25.4133 9 7.982 2 5.748 7 3.9016 2)
Average genome size in population (length): 88.97
Average program size in population (points): 89.97
Average percent parens in population: 0.011
Minimum age in population: 264.1301204944008
Maximum age in population: 269.0486090143453
Average age in population: 266.7418846007283
Median age in population: 266.7773094813995
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.884
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.884
Total error diversity:				 0.318
Error (vector) diversity:			 0.322
Behavioral diversity:				 0.323
--- Run Statistics ---
Number of program evaluations used so far: 193000
Number of point (instruction) evaluations so far: 387618954
--- Timings ---
Current time: 1529615872472 milliseconds
Total Time:         843.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       293.2 seconds, 34.8%
Fitness Testing:    442.0 seconds, 52.4%
Report:             107.8 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 192
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 193
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 193
;;******************************
;; -*- Number IO problem report - generation 193
Test total error for best: 49322.27719999997
Test mean error for best: 24.66114
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 41.1219840527 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: -0.0993437337 
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -22.6088805258
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 41.1219840527 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -0.3062166972 
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_rot} {:instruction integer_dup} {:instruction float_cos} {:instruction integer_stackdepth} {:instruction float_swap} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction in2} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction float_mod} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dup} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 30} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 41.12198405274626} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction float_dup} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_pop} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (float_sub integer_rot float_cos integer_rot integer_dup float_cos integer_stackdepth float_swap float_mod integer_fromfloat in2 in2 integer_min float_frominteger float_max in2 integer_min float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_dup_items integer_flush integer_stackdepth float_rot in2 float_tan integer_shove in1 float_stackdepth float_mod integer_yankdup float_mod float_max float_yankdup integer_div integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dup integer_yankdup float_mod float_max integer_dec integer_yankdup float_mod float_max float_yankdup integer_div integer_div float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 30 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 41.12198405274626 float_shove integer_dec integer_mult float_shove float_dup integer_dup_items in1 integer_sub float_max integer_pop in1 integer_sub float_max print_float)
Errors: [4.1985 7 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 7.2738 12 6.0 1 4.0224 9 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 8.9627 9 5.0 1 36.0 2 20.0 1 24.6883 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 957.8633
Mean: 19.157267
Genome size: 93
Size: 94
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2378.5573753000012
Median total errors in population: 1060.4906999999998
Error averages by case: (62.364185299999676 8.772 71.50863759999999 4.077 126.9693503 2.524 80.63274100000001 1.612 71.43242470000001 1.815 64.61052529999999 2.567 57.20085580000003 2.712 63.622925999999765 9.837 70.56156029999994 3.045 82.81516149999953 9.676 145.04711410000004 12.135 56.19435720000001 3.463 99.55889750000085 8.922 121.2411062 3.503 144.2028757000001 4.883 66.71180650000022 9.784 55.73545079999999 2.428 86.48236270000005 2.732 70.24882930000001 1.603 78.84899399999979 10.219 107.44083000000097 10.15 126.89529619999998 13.002 112.67909629999996 9.881 91.37164470000084 9.679 110.2453462999999 4.914)
Error minima by case: (2.0813 7 12.4724 2 6.8939 2 8.3194 1 0.8291 1 10.6798 2 5.0 1 1.4814 7 6.0 1 4.0224 2 25.7488 10 4.0 2 24.0 2 25.0 2 87.0 3 8.9627 8 0.4099 1 11.2066 2 19.0 1 12.5586 2 4.0 2 37.2196 12 3.0 1 5.748 8 49.0 3)
Average genome size in population (length): 89.025
Average program size in population (points): 90.025
Average percent parens in population: 0.011
Minimum age in population: 265.6639317339549
Maximum age in population: 270.2186431714513
Average age in population: 268.0391036013236
Median age in population: 268.0473769080166
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.866
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.866
Total error diversity:				 0.317
Error (vector) diversity:			 0.319
Behavioral diversity:				 0.319
--- Run Statistics ---
Number of program evaluations used so far: 194000
Number of point (instruction) evaluations so far: 389844654
--- Timings ---
Current time: 1529615877258 milliseconds
Total Time:         848.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       294.8 seconds, 34.8%
Fitness Testing:    444.6 seconds, 52.4%
Report:             108.4 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 193
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 194
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 194
;;******************************
;; -*- Number IO problem report - generation 194
Test total error for best: 49322.27719999997
Test mean error for best: 24.66114
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 41.1219840527 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: -0.0993437337 
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -22.6088805258
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 41.1219840527 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -0.3062166972 
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_rot} {:instruction integer_dup} {:instruction float_cos} {:instruction integer_stackdepth} {:instruction float_swap} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction in2} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_flush} {:instruction integer_mod} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction float_mod} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dup} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 30} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 41.12198405274626} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction float_dup} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_pop} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (float_sub integer_rot float_cos integer_rot integer_dup float_cos integer_stackdepth float_swap float_mod integer_fromfloat in2 in2 integer_min float_frominteger float_max in2 integer_min float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_dup_items integer_flush integer_mod float_rot in2 float_tan integer_shove in1 float_stackdepth float_mod integer_yankdup float_mod float_max float_yankdup integer_div integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dup integer_yankdup float_mod float_max integer_dec integer_yankdup float_mod float_max float_yankdup integer_div integer_div float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 30 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 41.12198405274626 float_shove integer_dec integer_mult float_shove float_dup integer_dup_items in1 integer_sub float_max integer_pop in1 integer_sub float_max print_float)
Errors: [4.1985 7 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 7.2738 12 6.0 1 4.0224 9 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 8.9627 9 5.0 1 36.0 2 20.0 1 24.6883 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 957.8633
Mean: 19.157267
Genome size: 93
Size: 94
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2194.835146800002
Median total errors in population: 1060.5933
Error averages by case: (55.024471499999656 8.563 66.08761860000001 4.002 118.968488 2.48 72.07548799999999 1.549 62.785655800000015 1.771 55.806487999999995 2.515 51.51775150000002 2.579 56.05973289999974 9.924 62.79369339999996 3.032 75.77791209999988 9.7 137.1994172 12.165 49.78977480000001 3.368 93.63666430000075 8.82 115.5644204 3.444 136.7842290000001 4.751 58.15508869999989 9.82 49.956279499999965 2.342 78.01044120000003 2.686 63.342487999999996 1.556 70.30479129999934 10.24 101.54417340000091 10.123 118.805017 13.066 106.72329969999996 9.863 82.89175390000058 9.66 102.39300859999994 4.818)
Error minima by case: (1.8801 7 9.5595 2 78.0 1 29.0 1 19.0 1 12.0 2 5.0 1 1.647 7 5.0 1 4.0224 2 97.0 10 3.0 2 1.3141 3 0.3141 2 86.0 3 7.9379 7 4.0 1 35.0 2 19.0 1 4.8878 2 21.3141 2 77.0 11 22.3141 2 3.7661 8 48.0 2)
Average genome size in population (length): 89.322
Average program size in population (points): 90.322
Average percent parens in population: 0.011
Minimum age in population: 266.7891781210942
Maximum age in population: 271.7671041002911
Average age in population: 269.3904095396741
Median age in population: 269.4273820490272
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.862
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.862
Total error diversity:				 0.316
Error (vector) diversity:			 0.319
Behavioral diversity:				 0.32
--- Run Statistics ---
Number of program evaluations used so far: 195000
Number of point (instruction) evaluations so far: 392077704
--- Timings ---
Current time: 1529615881861 milliseconds
Total Time:         852.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       296.2 seconds, 34.8%
Fitness Testing:    447.1 seconds, 52.4%
Report:             109.0 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 194
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 195
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 195
;;******************************
;; -*- Number IO problem report - generation 195
Test total error for best: 49322.27719999997
Test mean error for best: 24.66114
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 41.1219840527 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: -0.0993437337 
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -22.6088805258
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 41.1219840527 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -0.3062166972 
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_rot} {:instruction integer_dup} {:instruction float_cos} {:instruction integer_stackdepth} {:instruction float_swap} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction in2} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_flush} {:instruction integer_mod} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction float_mod} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dup} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 30} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 41.12198405274626} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction float_dup} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_pop} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (float_sub integer_rot float_cos integer_rot integer_dup float_cos integer_stackdepth float_swap float_mod integer_fromfloat in2 in2 integer_min float_frominteger float_max in2 integer_min float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_dup_items integer_flush integer_mod float_rot in2 float_tan integer_shove in1 float_stackdepth float_mod integer_yankdup float_mod float_max float_yankdup integer_div integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dup integer_yankdup float_mod float_max integer_dec integer_yankdup float_mod float_max float_yankdup integer_div integer_div float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 30 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 41.12198405274626 float_shove integer_dec integer_mult float_shove float_dup integer_dup_items in1 integer_sub float_max integer_pop in1 integer_sub float_max print_float)
Errors: [4.1985 7 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 7.2738 12 6.0 1 4.0224 9 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 8.9627 9 5.0 1 36.0 2 20.0 1 24.6883 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 957.8633
Mean: 19.157267
Genome size: 93
Size: 94
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2240.2799567000006
Median total errors in population: 1062.9710999999998
Error averages by case: (58.82105119999949 8.5 69.42914610000004 4.0 120.11232070000003 2.468 73.57819810000001 1.548 64.23567420000005 1.755 57.4563705 2.504 49.541078300000045 2.628 61.01004519999981 10.02 66.11501169999998 2.994 77.59319949999984 9.435 138.21183729999998 12.14 48.29361760000003 3.45 95.50860980000095 8.575 115.94545060000002 3.451 140.4098675 4.653 60.93888499999922 9.948 47.652888799999886 2.449 79.35425040000005 2.682 63.885557899999995 1.566 73.81956639999949 10.034 103.09245920000109 9.765 119.6802818 13.051 108.39598259999994 9.471 89.6024288000008 9.892 105.90417749999988 4.713)
Error minima by case: (2.0813 7 2.2089 2 3.1183 2 25.2445 1 19.0 1 10.6798 2 6.0 1 1.6526 8 5.0 1 4.0224 2 25.7488 9 3.0 2 1.3141 2 0.3141 2 40.3219 3 7.9627 7 0.4099 1 28.358 2 20.0 1 2.1227 2 4.0 2 37.2196 9 3.0 1 5.748 8 3.9016 3)
Average genome size in population (length): 90.593
Average program size in population (points): 91.593
Average percent parens in population: 0.011
Minimum age in population: 268.2118590923135
Maximum age in population: 272.8549238099864
Average age in population: 270.7108221088442
Median age in population: 270.7729334913274
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.849
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.849
Total error diversity:				 0.309
Error (vector) diversity:			 0.31
Behavioral diversity:				 0.311
--- Run Statistics ---
Number of program evaluations used so far: 196000
Number of point (instruction) evaluations so far: 394342554
--- Timings ---
Current time: 1529615886648 milliseconds
Total Time:         857.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       297.9 seconds, 34.7%
Fitness Testing:    449.6 seconds, 52.4%
Report:             109.7 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 195
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 196
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 196
;;******************************
;; -*- Number IO problem report - generation 196
Test total error for best: 49322.27719999997
Test mean error for best: 24.66114
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 41.1219840527 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: -0.0993437337 
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -22.6088805258
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 41.1219840527 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -0.3062166972 
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_rot} {:instruction integer_dup} {:instruction float_cos} {:instruction integer_stackdepth} {:instruction float_swap} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction in2} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_flush} {:instruction integer_mod} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction float_mod} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dup} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 30} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 41.12198405274626} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction float_dup} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_pop} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (float_sub integer_rot float_cos integer_rot integer_dup float_cos integer_stackdepth float_swap float_mod integer_fromfloat in2 in2 integer_min float_frominteger float_max in2 integer_min float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_dup_items integer_flush integer_mod float_rot in2 float_tan integer_shove in1 float_stackdepth float_mod integer_yankdup float_mod float_max float_yankdup integer_div integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dup integer_yankdup float_mod float_max integer_dec integer_yankdup float_mod float_max float_yankdup integer_div integer_div float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 30 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 41.12198405274626 float_shove integer_dec integer_mult float_shove float_dup integer_dup_items in1 integer_sub float_max integer_pop in1 integer_sub float_max print_float)
Errors: [4.1985 7 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 7.2738 12 6.0 1 4.0224 9 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 8.9627 9 5.0 1 36.0 2 20.0 1 24.6883 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 957.8633
Mean: 19.157267
Genome size: 93
Size: 94
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2307.1033860999996
Median total errors in population: 1062.06135
Error averages by case: (60.56159869999941 8.425 70.36460479999998 4.005 124.17941900000001 2.501 76.820729 1.58 67.53621610000002 1.752 61.71605610000001 2.544 54.094535400000005 2.649 61.10985919999987 10.067 66.63871939999997 3.059 79.41418869999991 9.429 142.30607720000003 12.169 53.109045399999985 3.478 97.8739437000005 8.652 118.8467615 3.48 140.54180920000002 4.677 63.64122779999916 9.871 52.31390859999993 2.492 82.65351160000004 2.7 67.53345449999999 1.579 76.82640589999954 10.108 105.580205900001 9.978 123.1028349 13.081 110.95833149999994 9.661 90.03536790000045 9.818 106.81957409999995 4.77)
Error minima by case: (0.7346 7 1.8509 2 3.7641 1 8.3194 1 0.8291 1 13.0 2 5.0 1 0.7836 7 6.0 1 4.0224 2 24.5239 10 4.0 2 40.1101 3 73.4426 3 87.0 3 7.9627 7 1.4932 1 11.2066 2 3.3651 1 8.8366 2 43.6383 3 35.7604 10 51.2212 2 6.748 8 49.0 2)
Average genome size in population (length): 91.219
Average program size in population (points): 92.219
Average percent parens in population: 0.011
Minimum age in population: 269.4893792890147
Maximum age in population: 273.9302029592939
Average age in population: 271.982257706612
Median age in population: 272.0244365433862
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.844
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.844
Total error diversity:				 0.324
Error (vector) diversity:			 0.325
Behavioral diversity:				 0.326
--- Run Statistics ---
Number of program evaluations used so far: 197000
Number of point (instruction) evaluations so far: 396623029
--- Timings ---
Current time: 1529615891399 milliseconds
Total Time:         861.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       299.4 seconds, 34.7%
Fitness Testing:    452.2 seconds, 52.5%
Report:             110.2 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 196
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 197
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 197
;;******************************
;; -*- Number IO problem report - generation 197
Test total error for best: 49322.27719999997
Test mean error for best: 24.66114
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 41.1219840527 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: -0.0993437337 
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -22.6088805258
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 41.1219840527 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -0.3062166972 
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_rot} {:instruction integer_dup} {:instruction float_cos} {:instruction integer_stackdepth} {:instruction float_swap} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction in2} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction float_mod} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dup} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 30} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 41.12198405274626} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction float_dup} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_pop} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (float_sub integer_rot float_cos integer_rot integer_dup float_cos integer_stackdepth float_swap float_mod integer_fromfloat in2 in2 integer_min float_frominteger float_max in2 integer_min float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_dup_items integer_flush integer_stackdepth float_rot in2 float_tan integer_shove in1 float_stackdepth float_mod integer_yankdup float_mod float_max float_yankdup integer_div integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dup integer_yankdup float_mod float_max integer_dec integer_yankdup float_mod float_max float_yankdup integer_div integer_div float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 30 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 41.12198405274626 float_shove integer_dec integer_mult float_shove float_dup integer_dup_items in1 integer_sub float_max integer_pop in1 integer_sub float_max print_float)
Errors: [4.1985 7 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 7.2738 12 6.0 1 4.0224 9 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 8.9627 9 5.0 1 36.0 2 20.0 1 24.6883 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 957.8633
Mean: 19.157267
Genome size: 93
Size: 94
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2286.2062703
Median total errors in population: 1061.8993
Error averages by case: (59.920028399999396 8.433 69.77121470000002 4.065 122.28609040000003 2.534 76.03950159999998 1.627 66.78207890000003 1.84 60.00603830000001 2.579 51.98171480000005 2.657 62.65373179999988 10.191 68.20052139999997 3.131 78.51698860000005 9.359 140.4863391 12.169 51.566010300000045 3.523 95.64886440000068 8.738 116.94441409999999 3.529 141.7082143 4.785 63.1248906999993 9.861 51.40756009999989 2.524 81.79154890000005 2.738 65.8684711 1.621 76.8152444999997 10.213 103.92057530000106 9.939 122.29216500000001 13.074 108.69560019999996 9.747 88.88406510000078 9.741 107.42639829999987 4.85)
Error minima by case: (1.0813 7 1.5722 2 3.7458 1 8.3194 1 0.8291 1 10.6798 2 5.0 1 0.4426 8 5.0 1 4.0224 2 25.2446 9 3.0 2 1.3141 3 16.1063 3 86.0 3 8.9627 8 1.2542 1 3.3804 2 8.1888 1 5.151 2 21.3141 2 36.1005 9 22.3141 2 4.2866 8 48.0 2)
Average genome size in population (length): 92.24
Average program size in population (points): 93.24
Average percent parens in population: 0.011
Minimum age in population: 271.0148976638505
Maximum age in population: 275.2366196709324
Average age in population: 273.3301245614586
Median age in population: 273.3519478711333
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.859
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.859
Total error diversity:				 0.345
Error (vector) diversity:			 0.346
Behavioral diversity:				 0.346
--- Run Statistics ---
Number of program evaluations used so far: 198000
Number of point (instruction) evaluations so far: 398929054
--- Timings ---
Current time: 1529615895925 milliseconds
Total Time:         866.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       300.9 seconds, 34.7%
Fitness Testing:    454.6 seconds, 52.5%
Report:             111.0 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 197
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 198
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 198
;;******************************
;; -*- Number IO problem report - generation 198
Test total error for best: 49322.27719999997
Test mean error for best: 24.66114
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 41.1219840527 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: -0.0993437337 
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -22.6088805258
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 41.1219840527 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -0.3062166972 
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_rot} {:instruction integer_dup} {:instruction float_cos} {:instruction integer_stackdepth} {:instruction float_swap} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction in2} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction float_mod} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dup} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 30} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 41.12198405274626} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_min} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_pop} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (float_sub integer_rot float_cos integer_rot integer_dup float_cos integer_stackdepth float_swap float_mod integer_fromfloat in2 in2 integer_min float_frominteger float_max in2 integer_min float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_dup_items integer_flush integer_stackdepth float_rot in2 float_tan integer_shove in1 float_stackdepth float_mod integer_yankdup float_mod float_max float_yankdup integer_div integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dup integer_yankdup float_mod float_max integer_dec integer_yankdup float_mod float_max float_yankdup integer_div integer_div float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 30 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 41.12198405274626 float_shove integer_dec integer_mult float_shove integer_min integer_dup_items in1 integer_sub float_max integer_pop in1 integer_sub float_max print_float)
Errors: [4.1985 7 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 7.2738 12 6.0 1 4.0224 9 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 8.9627 9 5.0 1 36.0 2 20.0 1 24.6883 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 957.8633
Mean: 19.157267
Genome size: 93
Size: 94
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2362.096887399999
Median total errors in population: 1064.0007500000002
Error averages by case: (63.433404399999475 8.538 73.83145720000002 3.891 124.6226957 2.503 78.0468032 1.579 68.73543370000002 1.732 61.913803200000004 2.54 55.199676200000006 2.465 66.04990550000011 10.578 70.97739419999994 2.93 76.77308830000025 9.182 142.74017580000003 12.163 54.684617 3.414 101.57076750000088 8.495 121.6654204 3.489 144.76976620000008 4.696 66.1273552999996 9.909 54.22240399999993 2.398 83.87923430000002 2.641 68.64406880000001 1.579 79.4727218999999 10.089 109.21438620000096 9.866 124.26821069999998 13.052 114.16962729999995 9.587 94.80599420000071 9.856 110.38247619999991 4.724)
Error minima by case: (1.0813 6 15.3452 2 37.4462 1 7.3194 1 0.1709 1 10.6798 2 5.0 1 0.8858 6 6.0 1 4.0224 2 67.6147 10 4.0 2 39.1101 3 74.0 3 87.0 3 7.8648 9 5.0 1 12.2066 2 19.0 1 13.3947 2 42.6383 3 78.0 10 50.2212 2 6.748 7 49.0 2)
Average genome size in population (length): 93.806
Average program size in population (points): 94.806
Average percent parens in population: 0.011
Minimum age in population: 272.1218769306524
Maximum age in population: 276.9486554763447
Average age in population: 274.6261705304043
Median age in population: 274.6340673878545
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.858
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.858
Total error diversity:				 0.357
Error (vector) diversity:			 0.359
Behavioral diversity:				 0.359
--- Run Statistics ---
Number of program evaluations used so far: 199000
Number of point (instruction) evaluations so far: 401274204
--- Timings ---
Current time: 1529615900647 milliseconds
Total Time:         871.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       302.4 seconds, 34.7%
Fitness Testing:    457.3 seconds, 52.5%
Report:             111.5 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 198
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 199
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 199
;;******************************
;; -*- Number IO problem report - generation 199
Test total error for best: 49322.27719999997
Test mean error for best: 24.66114
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 41.1219840527 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: -0.0993437337 
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -22.6088805258
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 41.1219840527 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -0.3062166972 
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_rot} {:instruction integer_dup} {:instruction tagged_501} {:instruction integer_stackdepth} {:instruction float_swap} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction in2} {:instruction float_swap} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction in2} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_flush} {:instruction integer_mod} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction float_mod} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dup} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 30} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 41.12198405274626} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction float_dup} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_max} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (float_sub integer_rot float_cos integer_rot integer_dup tagged_501 integer_stackdepth float_swap float_mod integer_fromfloat in2 float_swap float_mod integer_fromfloat in2 integer_min float_frominteger float_max in2 integer_min float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_dup_items integer_flush integer_mod float_rot in2 float_tan integer_shove in1 float_stackdepth float_mod integer_yankdup float_mod float_max float_yankdup integer_div integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dup integer_yankdup float_mod float_max integer_dec integer_yankdup float_mod float_max float_yankdup integer_div integer_div float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 30 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 41.12198405274626 float_shove integer_dec integer_mult float_shove float_dup integer_dup_items in1 integer_sub float_max integer_max in1 integer_sub float_max print_float)
Errors: [4.1985 7 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 7.2738 12 6.0 1 4.0224 9 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 8.9627 9 5.0 1 36.0 2 20.0 1 24.6883 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 957.8633
Mean: 19.157267
Genome size: 96
Size: 97
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2289.6071835000007
Median total errors in population: 1065.20125
Error averages by case: (61.429247099999394 8.384 72.94904800000003 3.791 123.02831780000002 2.449 74.9625115 1.512 66.94991670000002 1.655 60.253642299999996 2.476 49.74992420000002 2.313 61.35632760000039 11.014 69.23766769999999 2.824 74.82341830000041 9.216 141.11342849999997 12.135 47.8367235 3.187 98.6438877000008 8.313 117.7291888 3.433 143.4980995 4.503 63.90174359999916 9.823 45.40238059999992 2.209 81.48713879999998 2.586 66.69459439999999 1.509 79.15933089999987 10.174 105.54401030000109 9.746 121.67025459999999 13.047 111.21612199999994 9.49 92.50486320000086 9.763 108.35039589999992 4.563)
Error minima by case: (2.0813 7 10.5472 2 6.8939 1 30.0 1 20.0 1 13.0 2 5.0 1 0.7791 7 6.0 1 0.6995 2 25.7488 9 4.0 2 1.3141 3 0.3141 3 85.9255 3 7.8648 7 0.4099 1 29.9735 2 11.2255 1 5.4224 2 21.3141 3 37.2196 9 22.3141 2 6.748 8 49.0 2)
Average genome size in population (length): 94.184
Average program size in population (points): 95.184
Average percent parens in population: 0.011
Minimum age in population: 273.1218769306524
Maximum age in population: 278.4649752083859
Average age in population: 275.9219852047201
Median age in population: 275.9599904256717
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 45
Genome diversity (% unique Plush genomes):	 0.839
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 45
Syntactic diversity (% unique Push programs):	 0.839
Total error diversity:				 0.357
Error (vector) diversity:			 0.358
Behavioral diversity:				 0.359
--- Run Statistics ---
Number of program evaluations used so far: 200000
Number of point (instruction) evaluations so far: 403628829
--- Timings ---
Current time: 1529615905215 milliseconds
Total Time:         875.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       303.8 seconds, 34.7%
Fitness Testing:    459.8 seconds, 52.5%
Report:             112.1 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 199
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 200
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 200
;;******************************
;; -*- Number IO problem report - generation 200
Test total error for best: 49322.27719999997
Test mean error for best: 24.66114
;;------------------------------
Outputs of best individual on training cases:
Correct output: 45.3205195452  | Program output: 41.1219840527 
Correct output: -22.7658954997 | Program output: -40.7658954997
Correct output: 4.6757403904   | Program output: 83.6757403904 
Correct output: 49.4414284912  | Program output: 79.4414284912 
Correct output: 41.9510447786  | Program output: 61.9510447786 
Correct output: 64.0061015037  | Program output: 77.0061015037 
Correct output: 28.4941668882  | Program output: 22.4941668882 
Correct output: 7.1744514781   | Program output: -0.0993437337 
Correct output: -67.7792458223 | Program output: -61.7792458223
Correct output: -26.6313145907 | Program output: -22.6088805258
Correct output: -25.4926767768 | Program output: 72.5073232232 
Correct output: 8.2513564266   | Program output: 12.2513564266 
Correct output: 114.7960139475 | Program output: 74.6859333988 
Correct output: 166.1063166808 | Program output: 91.1063166808 
Correct output: -127.3218760196 | Program output: -40.3218760196
Correct output: 32.1592946667  | Program output: 41.1219840527 
Correct output: 2.3853941457   | Program output: 7.3853941457  
Correct output: 29.9153689352  | Program output: 65.9153689352 
Correct output: 97.5153974481  | Program output: 77.5153974481 
Correct output: -24.9945089525 | Program output: -0.3062166972 
Correct output: 118.3242489435 | Program output: 74.6859333988 
Correct output: -36.6167768666 | Program output: 41.3832231334 
Correct output: 125.907177534  | Program output: 74.6859333988 
Correct output: 85.0399635851  | Program output: 91.7879668518 
Correct output: -101.9015572683 | Program output: -52.9015572683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_rot} {:instruction integer_dup} {:instruction tagged_501} {:instruction integer_stackdepth} {:instruction float_swap} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction in2} {:instruction in2} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_max} {:instruction in2} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_flush} {:instruction integer_mod} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction float_mod} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dup} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_max} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_mod} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_mod} {:instruction in1} {:instruction float_mod} {:instruction float_max} {:instruction 30} {:instruction integer_div} {:instruction in2} {:instruction float_tan} {:instruction integer_shove} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction 41.12198405274626} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction float_dup} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction integer_pop} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction print_float})
Best program: (float_sub integer_rot float_cos integer_rot integer_dup tagged_501 integer_stackdepth float_swap float_mod integer_fromfloat in2 in2 integer_min float_frominteger float_max in2 integer_min float_yankdup float_yank in2 float_tan integer_shove float_dec float_mod float_dup_items float_dup_items integer_flush integer_mod float_rot in2 float_tan integer_shove in1 float_stackdepth float_mod integer_yankdup float_mod float_max float_yankdup integer_div integer_div in2 float_tan integer_shove in1 float_stackdepth integer_dup integer_yankdup float_mod float_max integer_dec integer_yankdup float_yankdup float_max float_yankdup integer_div integer_div float_dec float_mod float_max float_yankdup integer_div in2 float_tan integer_shove in1 float_mod in1 float_mod float_max 30 integer_div in2 float_tan integer_shove in1 float_stackdepth integer_swap 41.12198405274626 float_shove integer_dec integer_mult float_shove float_dup integer_dup_items in1 integer_sub float_max integer_pop in1 integer_sub float_max print_float)
Errors: [4.1985 7 18.0 2 79.0 2 30.0 1 20.0 1 13.0 2 6.0 1 7.2738 12 6.0 1 4.0224 9 98.0 12 4.0 2 40.1101 11 75.0 3 87.0 3 8.9627 9 5.0 1 36.0 2 20.0 1 24.6883 11 43.6383 13 78.0 13 51.2212 13 6.748 8 49.0 3]
Total: 957.8633
Mean: 19.157267
Genome size: 93
Size: 94
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2120.194331700003
Median total errors in population: 1062.8937
Error averages by case: (54.560278999999355 8.339 61.7988969000001 3.668 116.87571350000002 2.391 66.06651269999999 1.429 60.65830720000003 1.621 53.7591339 2.404 47.782233600000005 2.379 54.87916140000042 11.452 57.86521300000002 2.708 62.19710230000052 9.166 135.2353087 12.142 46.99014740000001 3.29 92.71231420000058 8.393 113.2371388 3.374 132.81775109999995 4.388 56.07621199999925 9.84 47.33352079999991 2.27 75.93328170000002 2.575 60.5154049 1.438 72.72575110000025 10.199 100.0333105000009 9.893 116.65974 13.076 105.11540749999993 9.688 80.05833500000054 9.632 98.09815449999998 4.455)
Error minima by case: (2.0813 7 6.5051 2 4.1352 2 8.3194 1 0.8291 1 10.6798 2 3.4936 1 1.223 7 6.0 1 0.6995 2 66.6147 10 4.0 2 27.5284 3 31.7607 3 87.0 3 0.1715 8 5.0 1 11.2066 2 19.7886 1 11.971 2 7.3184 3 77.7388 11 38.6395 2 2.2277 7 49.0 3)
Average genome size in population (length): 94.011
Average program size in population (points): 95.011
Average percent parens in population: 0.011
Minimum age in population: 274.1218769306524
Maximum age in population: 279.6954383693348
Average age in population: 277.2728390802177
Median age in population: 277.31912744557
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 42
Genome diversity (% unique Plush genomes):	 0.84
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.84
Total error diversity:				 0.298
Error (vector) diversity:			 0.299
Behavioral diversity:				 0.299
--- Run Statistics ---
Number of program evaluations used so far: 201000
Number of point (instruction) evaluations so far: 405979104
--- Timings ---
Current time: 1529615909919 milliseconds
Total Time:         880.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       305.3 seconds, 34.7%
Fitness Testing:    462.4 seconds, 52.5%
Report:             112.7 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 200
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

FAILURE
