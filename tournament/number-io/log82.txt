Command line args: clojush.problems.software.number-io :parent-selection :tournament :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
epigenetic-markers = []
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :tournament
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
report-simplifications = 0
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [[60.899481648258785 -80] -19.100518351741215]
Train Case:   1 | Input/Output: [[-21.665117046636624 55] 33.334882953363376]
Train Case:   2 | Input/Output: [[-49.37310379290787 -41] -90.37310379290787]
Train Case:   3 | Input/Output: [[8.59982327151269 -96] -87.40017672848731]
Train Case:   4 | Input/Output: [[72.59705185144472 -81] -8.402948148555282]
Train Case:   5 | Input/Output: [[88.54820053263424 -70] 18.54820053263424]
Train Case:   6 | Input/Output: [[-75.2136840603699 84] 8.7863159396301]
Train Case:   7 | Input/Output: [[-5.232236464598671 30] 24.76776353540133]
Train Case:   8 | Input/Output: [[50.61435038903383 -59] -8.38564961096617]
Train Case:   9 | Input/Output: [[-9.596655682782213 52] 42.40334431721779]
Train Case:  10 | Input/Output: [[35.25597161767254 -41] -5.744028382327457]
Train Case:  11 | Input/Output: [[17.9486170066627 32] 49.9486170066627]
Train Case:  12 | Input/Output: [[58.687211618807794 -50] 8.687211618807794]
Train Case:  13 | Input/Output: [[-32.58803160386738 61] 28.41196839613262]
Train Case:  14 | Input/Output: [[22.32309979211739 -74] -51.67690020788261]
Train Case:  15 | Input/Output: [[-1.7194574251507362 29] 27.280542574849264]
Train Case:  16 | Input/Output: [[-28.7039689337621 8] -20.7039689337621]
Train Case:  17 | Input/Output: [[-92.70918196680427 -88] -180.70918196680427]
Train Case:  18 | Input/Output: [[50.192852041441995 72] 122.192852041442]
Train Case:  19 | Input/Output: [[-78.23069182484188 68] -10.230691824841884]
Train Case:  20 | Input/Output: [[-88.49381740295705 -16] -104.49381740295705]
Train Case:  21 | Input/Output: [[-50.41093978048963 57] 6.5890602195103725]
Train Case:  22 | Input/Output: [[22.95853883512045 -97] -74.04146116487955]
Train Case:  23 | Input/Output: [[99.60313002006382 46] 145.60313002006382]
Train Case:  24 | Input/Output: [[77.99492011071177 48] 125.99492011071177]
Test Case:   0 | Input/Output: [[53.86637549960844 -49] 4.866375499608438]
Test Case:   1 | Input/Output: [[59.02920180666976 96] 155.02920180666976]
Test Case:   2 | Input/Output: [[-3.828975701604236 -92] -95.82897570160424]
Test Case:   3 | Input/Output: [[-21.234185479476892 -6] -27.234185479476892]
Test Case:   4 | Input/Output: [[50.710535821210755 -30] 20.710535821210755]
Test Case:   5 | Input/Output: [[73.10648031319369 49] 122.10648031319369]
Test Case:   6 | Input/Output: [[28.658665604753907 -42] -13.341334395246093]
Test Case:   7 | Input/Output: [[15.164771949075842 0] 15.164771949075842]
Test Case:   8 | Input/Output: [[-21.458862240311333 62] 40.54113775968867]
Test Case:   9 | Input/Output: [[73.01907368895334 -82] -8.980926311046659]
Test Case:  10 | Input/Output: [[-58.02962398241709 1] -57.02962398241709]
Test Case:  11 | Input/Output: [[55.04456148115767 0] 55.04456148115767]
Test Case:  12 | Input/Output: [[-66.75252605238349 16] -50.75252605238349]
Test Case:  13 | Input/Output: [[-25.73776234288188 23] -2.7377623428818794]
Test Case:  14 | Input/Output: [[4.419303769418974 89] 93.41930376941897]
Test Case:  15 | Input/Output: [[75.46534297754161 72] 147.4653429775416]
Test Case:  16 | Input/Output: [[57.31278164296555 -95] -37.68721835703445]
Test Case:  17 | Input/Output: [[-38.32943165863094 85] 46.67056834136906]
Test Case:  18 | Input/Output: [[5.255801648683828 66] 71.25580164868383]
Test Case:  19 | Input/Output: [[-78.05964248474396 -15] -93.05964248474396]
Test Case:  20 | Input/Output: [[66.47041545485953 49] 115.47041545485953]
Test Case:  21 | Input/Output: [[-50.47079626034397 85] 34.52920373965603]
Test Case:  22 | Input/Output: [[-31.729676940715606 -4] -35.729676940715606]
Test Case:  23 | Input/Output: [[-73.2756842847815 49] -24.275684284781505]
Test Case:  24 | Input/Output: [[19.518309015661558 -90] -70.48169098433844]
Test Case:  25 | Input/Output: [[-29.6256757482916 -32] -61.6256757482916]
Test Case:  26 | Input/Output: [[23.452452545279343 65] 88.45245254527934]
Test Case:  27 | Input/Output: [[12.843100759001274 -28] -15.156899240998726]
Test Case:  28 | Input/Output: [[61.70355773211611 -14] 47.70355773211611]
Test Case:  29 | Input/Output: [[51.39732038232253 39] 90.39732038232253]
Test Case:  30 | Input/Output: [[-9.518707795415835 59] 49.481292204584165]
Test Case:  31 | Input/Output: [[-25.854184991331493 41] 15.145815008668507]
Test Case:  32 | Input/Output: [[-74.27622989104607 16] -58.27622989104607]
Test Case:  33 | Input/Output: [[-57.515639238442475 -80] -137.51563923844247]
Test Case:  34 | Input/Output: [[-94.49140399308942 68] -26.49140399308942]
Test Case:  35 | Input/Output: [[-80.70476451933375 76] -4.70476451933375]
Test Case:  36 | Input/Output: [[96.37669741967267 -12] 84.37669741967267]
Test Case:  37 | Input/Output: [[-94.98377684044206 -63] -157.98377684044206]
Test Case:  38 | Input/Output: [[-23.866475607240375 -64] -87.86647560724037]
Test Case:  39 | Input/Output: [[-52.76945867921643 -46] -98.76945867921643]
Test Case:  40 | Input/Output: [[-32.82247942054781 38] 5.177520579452192]
Test Case:  41 | Input/Output: [[-5.212144637507393 12] 6.787855362492607]
Test Case:  42 | Input/Output: [[32.76662693455913 67] 99.76662693455913]
Test Case:  43 | Input/Output: [[-13.450965178869751 99] 85.54903482113025]
Test Case:  44 | Input/Output: [[48.344267979232086 56] 104.34426797923209]
Test Case:  45 | Input/Output: [[-78.93128129170314 96] 17.068718708296856]
Test Case:  46 | Input/Output: [[-22.109189491609598 82] 59.8908105083904]
Test Case:  47 | Input/Output: [[72.96673244242965 -97] -24.033267557570355]
Test Case:  48 | Input/Output: [[97.37598518981264 -37] 60.37598518981264]
Test Case:  49 | Input/Output: [[48.25533332349076 -70] -21.74466667650924]
Test Case:  50 | Input/Output: [[11.474002892208972 -55] -43.52599710779103]
Test Case:  51 | Input/Output: [[84.39224186065405 3] 87.39224186065405]
Test Case:  52 | Input/Output: [[-88.85767519765322 -61] -149.85767519765324]
Test Case:  53 | Input/Output: [[88.2626208928526 -62] 26.262620892852595]
Test Case:  54 | Input/Output: [[61.29658781733508 52] 113.29658781733508]
Test Case:  55 | Input/Output: [[84.14777608145994 34] 118.14777608145994]
Test Case:  56 | Input/Output: [[-38.297188684647665 15] -23.297188684647665]
Test Case:  57 | Input/Output: [[-92.18191079103283 57] -35.181910791032834]
Test Case:  58 | Input/Output: [[34.582999579727954 -75] -40.417000420272046]
Test Case:  59 | Input/Output: [[-6.0479997822068725 21] 14.952000217793127]
Test Case:  60 | Input/Output: [[57.965838595513986 7] 64.96583859551399]
Test Case:  61 | Input/Output: [[-7.530094942698668 -26] -33.53009494269867]
Test Case:  62 | Input/Output: [[-82.02283072543581 78] -4.02283072543581]
Test Case:  63 | Input/Output: [[-38.42623682121218 9] -29.42623682121218]
Test Case:  64 | Input/Output: [[82.0914944096937 21] 103.0914944096937]
Test Case:  65 | Input/Output: [[5.873014126844993 46] 51.87301412684499]
Test Case:  66 | Input/Output: [[-55.68031000203166 2] -53.68031000203166]
Test Case:  67 | Input/Output: [[97.20727045001419 79] 176.2072704500142]
Test Case:  68 | Input/Output: [[-75.10349350738295 -49] -124.10349350738295]
Test Case:  69 | Input/Output: [[-29.73722196245869 57] 27.26277803754131]
Test Case:  70 | Input/Output: [[63.28784807502589 -16] 47.28784807502589]
Test Case:  71 | Input/Output: [[13.15054769422413 2] 15.15054769422413]
Test Case:  72 | Input/Output: [[-56.34564433571227 2] -54.34564433571227]
Test Case:  73 | Input/Output: [[-32.831091700785734 -71] -103.83109170078573]
Test Case:  74 | Input/Output: [[-5.5425474460027715 -22] -27.54254744600277]
Test Case:  75 | Input/Output: [[91.6491686310365 -9] 82.6491686310365]
Test Case:  76 | Input/Output: [[-92.83713168593538 -44] -136.8371316859354]
Test Case:  77 | Input/Output: [[-39.80494808833155 -72] -111.80494808833154]
Test Case:  78 | Input/Output: [[-22.115182044445618 -54] -76.11518204444562]
Test Case:  79 | Input/Output: [[-37.48625688354763 -53] -90.48625688354764]
Test Case:  80 | Input/Output: [[27.223537619725334 26] 53.223537619725334]
Test Case:  81 | Input/Output: [[-60.023522587107195 49] -11.023522587107195]
Test Case:  82 | Input/Output: [[-96.89376920650278 -83] -179.89376920650278]
Test Case:  83 | Input/Output: [[-85.13391631997268 37] -48.133916319972684]
Test Case:  84 | Input/Output: [[-7.19642331569861 53] 45.80357668430139]
Test Case:  85 | Input/Output: [[74.36308225944256 -86] -11.636917740557436]
Test Case:  86 | Input/Output: [[-95.26157999483178 84] -11.261579994831777]
Test Case:  87 | Input/Output: [[-59.44731945578572 12] -47.44731945578572]
Test Case:  88 | Input/Output: [[83.65081866353506 100] 183.65081866353506]
Test Case:  89 | Input/Output: [[71.81681222587693 50] 121.81681222587693]
Test Case:  90 | Input/Output: [[-99.46532697085078 -18] -117.46532697085078]
Test Case:  91 | Input/Output: [[27.33772085190725 87] 114.33772085190725]
Test Case:  92 | Input/Output: [[-29.34806092028485 -61] -90.34806092028485]
Test Case:  93 | Input/Output: [[33.27700488824277 10] 43.27700488824277]
Test Case:  94 | Input/Output: [[0.30622254411174765 -30] -29.693777455888252]
Test Case:  95 | Input/Output: [[68.66776876425519 62] 130.6677687642552]
Test Case:  96 | Input/Output: [[88.55403845468877 -4] 84.55403845468877]
Test Case:  97 | Input/Output: [[-31.435426705179736 -73] -104.43542670517974]
Test Case:  98 | Input/Output: [[-40.493106791028865 56] 15.506893208971135]
Test Case:  99 | Input/Output: [[-0.276983922997303 -49] -49.2769839229973]
Test Case: 100 | Input/Output: [[36.43285064189911 95] 131.4328506418991]
Test Case: 101 | Input/Output: [[-36.25989386300248 -98] -134.25989386300247]
Test Case: 102 | Input/Output: [[-52.50299079240612 -5] -57.50299079240612]
Test Case: 103 | Input/Output: [[-78.39771282298456 2] -76.39771282298456]
Test Case: 104 | Input/Output: [[-82.453492676434 92] 9.546507323566004]
Test Case: 105 | Input/Output: [[-97.63955635976755 22] -75.63955635976755]
Test Case: 106 | Input/Output: [[-56.77623344808496 -72] -128.77623344808495]
Test Case: 107 | Input/Output: [[-18.67939121589086 100] 81.32060878410914]
Test Case: 108 | Input/Output: [[-43.409301259087904 75] 31.590698740912096]
Test Case: 109 | Input/Output: [[-88.10567107806786 82] -6.105671078067857]
Test Case: 110 | Input/Output: [[23.519751909084334 61] 84.51975190908433]
Test Case: 111 | Input/Output: [[33.32623076794894 -15] 18.326230767948942]
Test Case: 112 | Input/Output: [[90.77895907836748 61] 151.77895907836748]
Test Case: 113 | Input/Output: [[-47.27045681120718 74] 26.729543188792817]
Test Case: 114 | Input/Output: [[92.98610370732709 22] 114.98610370732709]
Test Case: 115 | Input/Output: [[65.10979686026707 -11] 54.10979686026707]
Test Case: 116 | Input/Output: [[95.2774281005444 25] 120.2774281005444]
Test Case: 117 | Input/Output: [[-34.82655945969064 73] 38.17344054030936]
Test Case: 118 | Input/Output: [[-24.237621514188916 27] 2.762378485811084]
Test Case: 119 | Input/Output: [[-34.83774724143433 -3] -37.83774724143433]
Test Case: 120 | Input/Output: [[84.07022565567942 41] 125.07022565567942]
Test Case: 121 | Input/Output: [[97.68758160454595 0] 97.68758160454595]
Test Case: 122 | Input/Output: [[20.74065868142179 -55] -34.25934131857821]
Test Case: 123 | Input/Output: [[28.492897242491097 18] 46.4928972424911]
Test Case: 124 | Input/Output: [[88.68706776146368 -75] 13.68706776146368]
Test Case: 125 | Input/Output: [[17.617708748054127 25] 42.61770874805413]
Test Case: 126 | Input/Output: [[36.941290698354294 -12] 24.941290698354294]
Test Case: 127 | Input/Output: [[-83.8074413440872 -26] -109.8074413440872]
Test Case: 128 | Input/Output: [[-94.16100838976398 -76] -170.161008389764]
Test Case: 129 | Input/Output: [[-77.4921808494233 -47] -124.4921808494233]
Test Case: 130 | Input/Output: [[-22.94965043679626 35] 12.050349563203739]
Test Case: 131 | Input/Output: [[-58.58209528729894 68] 9.417904712701059]
Test Case: 132 | Input/Output: [[-24.165256906466936 80] 55.83474309353306]
Test Case: 133 | Input/Output: [[93.48781648383368 61] 154.48781648383368]
Test Case: 134 | Input/Output: [[37.61155258547035 93] 130.61155258547035]
Test Case: 135 | Input/Output: [[59.57500288658463 -43] 16.575002886584628]
Test Case: 136 | Input/Output: [[59.061580744239876 -59] 0.06158074423987614]
Test Case: 137 | Input/Output: [[-43.469994445752725 1] -42.469994445752725]
Test Case: 138 | Input/Output: [[16.175899632822933 59] 75.17589963282293]
Test Case: 139 | Input/Output: [[83.56583958758745 74] 157.56583958758745]
Test Case: 140 | Input/Output: [[-73.58149593531087 90] 16.41850406468913]
Test Case: 141 | Input/Output: [[87.18030384237397 93] 180.18030384237397]
Test Case: 142 | Input/Output: [[-50.58843127406654 21] -29.588431274066537]
Test Case: 143 | Input/Output: [[90.02086165275921 76] 166.0208616527592]
Test Case: 144 | Input/Output: [[-97.86776196061481 5] -92.86776196061481]
Test Case: 145 | Input/Output: [[-77.41022572883239 93] 15.589774271167613]
Test Case: 146 | Input/Output: [[-70.51952203099383 56] -14.519522030993826]
Test Case: 147 | Input/Output: [[68.29624778944773 -53] 15.296247789447733]
Test Case: 148 | Input/Output: [[-46.89323617704135 -8] -54.89323617704135]
Test Case: 149 | Input/Output: [[-0.7334058930876779 -87] -87.73340589308768]
Test Case: 150 | Input/Output: [[87.13234364343424 52] 139.13234364343424]
Test Case: 151 | Input/Output: [[96.71560579461334 -8] 88.71560579461334]
Test Case: 152 | Input/Output: [[49.20144444268115 74] 123.20144444268115]
Test Case: 153 | Input/Output: [[-0.8498725963595746 47] 46.150127403640425]
Test Case: 154 | Input/Output: [[-32.38519596923335 51] 18.61480403076665]
Test Case: 155 | Input/Output: [[47.15701423341159 40] 87.15701423341159]
Test Case: 156 | Input/Output: [[-2.3453173585081544 21] 18.654682641491846]
Test Case: 157 | Input/Output: [[-27.262804151110515 92] 64.73719584888948]
Test Case: 158 | Input/Output: [[53.75808841506972 -89] -35.24191158493028]
Test Case: 159 | Input/Output: [[-83.22569361953269 54] -29.22569361953269]
Test Case: 160 | Input/Output: [[-96.12317754306254 19] -77.12317754306254]
Test Case: 161 | Input/Output: [[-77.04172114089877 60] -17.041721140898773]
Test Case: 162 | Input/Output: [[-99.75914827530734 -32] -131.75914827530733]
Test Case: 163 | Input/Output: [[-11.438316091103147 -56] -67.43831609110315]
Test Case: 164 | Input/Output: [[-61.37261268989065 -95] -156.37261268989064]
Test Case: 165 | Input/Output: [[28.533413546875863 -19] 9.533413546875863]
Test Case: 166 | Input/Output: [[-54.58729638532527 4] -50.58729638532527]
Test Case: 167 | Input/Output: [[6.625537763865097 -7] -0.37446223613490304]
Test Case: 168 | Input/Output: [[-97.57858462547095 -41] -138.57858462547097]
Test Case: 169 | Input/Output: [[75.38414052533344 -4] 71.38414052533344]
Test Case: 170 | Input/Output: [[-67.63342164402638 42] -25.633421644026384]
Test Case: 171 | Input/Output: [[69.81692362004662 71] 140.81692362004662]
Test Case: 172 | Input/Output: [[73.03322068037164 56] 129.03322068037164]
Test Case: 173 | Input/Output: [[-14.636326540408334 65] 50.363673459591666]
Test Case: 174 | Input/Output: [[-19.672369285126507 -13] -32.67236928512651]
Test Case: 175 | Input/Output: [[-35.48982307464625 -54] -89.48982307464625]
Test Case: 176 | Input/Output: [[-10.065248695853697 -33] -43.0652486958537]
Test Case: 177 | Input/Output: [[80.24234621183362 11] 91.24234621183362]
Test Case: 178 | Input/Output: [[-36.09729928335845 33] -3.0972992833584527]
Test Case: 179 | Input/Output: [[-84.31367927826703 43] -41.31367927826703]
Test Case: 180 | Input/Output: [[-21.048318545894304 -87] -108.0483185458943]
Test Case: 181 | Input/Output: [[30.37527591277481 5] 35.37527591277481]
Test Case: 182 | Input/Output: [[28.980413003917675 -12] 16.980413003917675]
Test Case: 183 | Input/Output: [[-70.81795789334319 1] -69.81795789334319]
Test Case: 184 | Input/Output: [[96.77471473733758 76] 172.77471473733758]
Test Case: 185 | Input/Output: [[-75.84601206087179 -55] -130.84601206087177]
Test Case: 186 | Input/Output: [[0.47050583153645675 60] 60.47050583153646]
Test Case: 187 | Input/Output: [[-21.713259266524858 77] 55.28674073347514]
Test Case: 188 | Input/Output: [[93.91402547712877 -27] 66.91402547712877]
Test Case: 189 | Input/Output: [[45.22651124335118 -47] -1.7734887566488169]
Test Case: 190 | Input/Output: [[94.80492183447612 -22] 72.80492183447612]
Test Case: 191 | Input/Output: [[-96.73120433364717 72] -24.73120433364717]
Test Case: 192 | Input/Output: [[8.235026984726971 -49] -40.76497301527303]
Test Case: 193 | Input/Output: [[-84.97077835102205 -80] -164.97077835102203]
Test Case: 194 | Input/Output: [[-19.25548054649863 68] 48.74451945350137]
Test Case: 195 | Input/Output: [[20.781257011047714 -70] -49.218742988952286]
Test Case: 196 | Input/Output: [[-2.077123072240994 26] 23.922876927759006]
Test Case: 197 | Input/Output: [[-45.583581518753455 4] -41.583581518753455]
Test Case: 198 | Input/Output: [[43.08230574753213 15] 58.08230574753213]
Test Case: 199 | Input/Output: [[95.80938301966216 -28] 67.80938301966216]
Test Case: 200 | Input/Output: [[-40.02414289141991 -23] -63.02414289141991]
Test Case: 201 | Input/Output: [[-37.19365959193035 84] 46.80634040806965]
Test Case: 202 | Input/Output: [[54.178463697242336 67] 121.17846369724234]
Test Case: 203 | Input/Output: [[17.771783970838314 -4] 13.771783970838314]
Test Case: 204 | Input/Output: [[-20.63637401034846 85] 64.36362598965154]
Test Case: 205 | Input/Output: [[17.477911873305956 69] 86.47791187330596]
Test Case: 206 | Input/Output: [[-72.94404069957447 -54] -126.94404069957447]
Test Case: 207 | Input/Output: [[-83.04948014342288 63] -20.049480143422883]
Test Case: 208 | Input/Output: [[60.21499298048289 -1] 59.21499298048289]
Test Case: 209 | Input/Output: [[48.17299754836188 83] 131.17299754836188]
Test Case: 210 | Input/Output: [[-28.96150244014997 78] 49.03849755985003]
Test Case: 211 | Input/Output: [[-94.83494716922405 -36] -130.83494716922405]
Test Case: 212 | Input/Output: [[43.7980054685961 65] 108.7980054685961]
Test Case: 213 | Input/Output: [[28.99496343711283 -29] -0.005036562887170248]
Test Case: 214 | Input/Output: [[89.91645392666518 91] 180.91645392666518]
Test Case: 215 | Input/Output: [[-23.81614493921282 62] 38.18385506078718]
Test Case: 216 | Input/Output: [[7.361658016573756 -64] -56.638341983426244]
Test Case: 217 | Input/Output: [[-30.03384284859554 -63] -93.03384284859554]
Test Case: 218 | Input/Output: [[42.60147667609169 -88] -45.39852332390831]
Test Case: 219 | Input/Output: [[-23.08100656192407 -83] -106.08100656192407]
Test Case: 220 | Input/Output: [[-80.80991328267717 23] -57.80991328267717]
Test Case: 221 | Input/Output: [[85.63260717562363 -31] 54.63260717562363]
Test Case: 222 | Input/Output: [[45.146179237611136 -88] -42.853820762388864]
Test Case: 223 | Input/Output: [[-60.17147888061236 -22] -82.17147888061237]
Test Case: 224 | Input/Output: [[-82.58314729760774 64] -18.583147297607738]
Test Case: 225 | Input/Output: [[33.02663163351329 23] 56.02663163351329]
Test Case: 226 | Input/Output: [[90.21089426621441 -41] 49.21089426621441]
Test Case: 227 | Input/Output: [[11.04269276927181 -58] -46.95730723072819]
Test Case: 228 | Input/Output: [[76.3821991805838 -99] -22.617800819416203]
Test Case: 229 | Input/Output: [[67.32893288482501 55] 122.32893288482501]
Test Case: 230 | Input/Output: [[-10.585567507935139 -37] -47.58556750793514]
Test Case: 231 | Input/Output: [[-25.2408363520954 -58] -83.2408363520954]
Test Case: 232 | Input/Output: [[-68.13531074292929 22] -46.13531074292929]
Test Case: 233 | Input/Output: [[-23.49914734349771 71] 47.50085265650229]
Test Case: 234 | Input/Output: [[15.846443856223132 -53] -37.15355614377687]
Test Case: 235 | Input/Output: [[65.1681723518814 59] 124.1681723518814]
Test Case: 236 | Input/Output: [[7.612476244116209 -21] -13.387523755883791]
Test Case: 237 | Input/Output: [[-27.85425169031042 40] 12.14574830968958]
Test Case: 238 | Input/Output: [[-31.212448055071135 97] 65.78755194492886]
Test Case: 239 | Input/Output: [[56.15565750108962 -93] -36.84434249891038]
Test Case: 240 | Input/Output: [[-22.761697291667588 -6] -28.761697291667588]
Test Case: 241 | Input/Output: [[55.547483624910484 -96] -40.452516375089516]
Test Case: 242 | Input/Output: [[82.69651743971039 -45] 37.69651743971039]
Test Case: 243 | Input/Output: [[71.23650268841092 -37] 34.23650268841092]
Test Case: 244 | Input/Output: [[94.10039594046572 -20] 74.10039594046572]
Test Case: 245 | Input/Output: [[38.71685396998552 -55] -16.28314603001448]
Test Case: 246 | Input/Output: [[-85.92271476081976 -92] -177.92271476081976]
Test Case: 247 | Input/Output: [[-91.99261843348017 -38] -129.99261843348017]
Test Case: 248 | Input/Output: [[65.24116228054365 -13] 52.24116228054365]
Test Case: 249 | Input/Output: [[44.36631009863123 -97] -52.63368990136877]
Test Case: 250 | Input/Output: [[-40.492922109586345 -36] -76.49292210958635]
Test Case: 251 | Input/Output: [[-22.501369474702358 -23] -45.50136947470236]
Test Case: 252 | Input/Output: [[-60.23018083347722 43] -17.23018083347722]
Test Case: 253 | Input/Output: [[-81.39516979240898 93] 11.604830207591021]
Test Case: 254 | Input/Output: [[16.857994636319205 100] 116.8579946363192]
Test Case: 255 | Input/Output: [[-70.81560352425802 -33] -103.81560352425802]
Test Case: 256 | Input/Output: [[22.857379214764293 63] 85.8573792147643]
Test Case: 257 | Input/Output: [[39.621050679518305 -30] 9.621050679518305]
Test Case: 258 | Input/Output: [[82.54224126105532 82] 164.54224126105532]
Test Case: 259 | Input/Output: [[-7.224625696359226 43] 35.775374303640774]
Test Case: 260 | Input/Output: [[12.369001050083227 1] 13.369001050083227]
Test Case: 261 | Input/Output: [[87.3791442155146 25] 112.3791442155146]
Test Case: 262 | Input/Output: [[-69.16462769960911 -52] -121.16462769960911]
Test Case: 263 | Input/Output: [[78.50401813625987 -35] 43.50401813625987]
Test Case: 264 | Input/Output: [[14.82149710011673 -53] -38.17850289988327]
Test Case: 265 | Input/Output: [[-41.54556698882428 -77] -118.54556698882428]
Test Case: 266 | Input/Output: [[-67.60703857532741 -11] -78.60703857532741]
Test Case: 267 | Input/Output: [[8.564574590495823 62] 70.56457459049582]
Test Case: 268 | Input/Output: [[42.29782361446112 -65] -22.702176385538877]
Test Case: 269 | Input/Output: [[-3.9232612474174857 -68] -71.92326124741749]
Test Case: 270 | Input/Output: [[3.9443190433052564 -58] -54.055680956694744]
Test Case: 271 | Input/Output: [[-46.58187488969847 -10] -56.58187488969847]
Test Case: 272 | Input/Output: [[84.44782670852072 -45] 39.44782670852072]
Test Case: 273 | Input/Output: [[-4.870240554216807 -97] -101.8702405542168]
Test Case: 274 | Input/Output: [[70.94321524272894 30] 100.94321524272894]
Test Case: 275 | Input/Output: [[33.230474580013265 -37] -3.769525419986735]
Test Case: 276 | Input/Output: [[9.574042739826027 1] 10.574042739826027]
Test Case: 277 | Input/Output: [[-4.677129400775897 -94] -98.6771294007759]
Test Case: 278 | Input/Output: [[-71.80322108862241 89] 17.196778911377592]
Test Case: 279 | Input/Output: [[-61.826863233924726 -21] -82.82686323392473]
Test Case: 280 | Input/Output: [[69.78078255092828 -16] 53.78078255092828]
Test Case: 281 | Input/Output: [[42.04160912660808 45] 87.04160912660808]
Test Case: 282 | Input/Output: [[21.950704757846594 -59] -37.049295242153406]
Test Case: 283 | Input/Output: [[66.44364496779252 -64] 2.4436449677925225]
Test Case: 284 | Input/Output: [[-4.299605255106258 48] 43.70039474489374]
Test Case: 285 | Input/Output: [[-33.2446855887774 41] 7.755314411222599]
Test Case: 286 | Input/Output: [[67.49077196962358 67] 134.49077196962358]
Test Case: 287 | Input/Output: [[39.83697727451471 68] 107.83697727451471]
Test Case: 288 | Input/Output: [[-9.479306603054141 -96] -105.47930660305414]
Test Case: 289 | Input/Output: [[81.0848054133601 -49] 32.0848054133601]
Test Case: 290 | Input/Output: [[-82.80843728119704 -73] -155.80843728119703]
Test Case: 291 | Input/Output: [[-3.3020675646370705 -64] -67.30206756463707]
Test Case: 292 | Input/Output: [[84.88386011629791 -31] 53.88386011629791]
Test Case: 293 | Input/Output: [[86.21923476903694 35] 121.21923476903694]
Test Case: 294 | Input/Output: [[-65.6817185108496 66] 0.3182814891503938]
Test Case: 295 | Input/Output: [[-7.966810742035307 38] 30.033189257964693]
Test Case: 296 | Input/Output: [[57.65622898457144 2] 59.65622898457144]
Test Case: 297 | Input/Output: [[-13.344841288923973 -26] -39.34484128892397]
Test Case: 298 | Input/Output: [[72.84725711049586 51] 123.84725711049586]
Test Case: 299 | Input/Output: [[-92.31835155571974 29] -63.318351555719744]
Test Case: 300 | Input/Output: [[-58.15236616991384 37] -21.15236616991384]
Test Case: 301 | Input/Output: [[95.39303676238745 44] 139.39303676238745]
Test Case: 302 | Input/Output: [[-33.17128401112133 6] -27.17128401112133]
Test Case: 303 | Input/Output: [[-72.32463835311037 22] -50.32463835311037]
Test Case: 304 | Input/Output: [[-91.02554772809084 40] -51.02554772809084]
Test Case: 305 | Input/Output: [[-27.51940020589143 80] 52.48059979410857]
Test Case: 306 | Input/Output: [[12.359204367830174 -60] -47.64079563216983]
Test Case: 307 | Input/Output: [[54.19404618636017 43] 97.19404618636017]
Test Case: 308 | Input/Output: [[52.18760420551746 19] 71.18760420551746]
Test Case: 309 | Input/Output: [[42.94681808746978 87] 129.94681808746978]
Test Case: 310 | Input/Output: [[68.19417389647089 91] 159.1941738964709]
Test Case: 311 | Input/Output: [[-78.03021535494744 -15] -93.03021535494744]
Test Case: 312 | Input/Output: [[-97.03568968577561 7] -90.03568968577561]
Test Case: 313 | Input/Output: [[-51.0990045646585 -53] -104.0990045646585]
Test Case: 314 | Input/Output: [[-37.35284321330143 29] -8.352843213301433]
Test Case: 315 | Input/Output: [[-58.7585455651715 59] 0.2414544348284977]
Test Case: 316 | Input/Output: [[3.1799310207651246 -86] -82.82006897923488]
Test Case: 317 | Input/Output: [[76.66267967479075 9] 85.66267967479075]
Test Case: 318 | Input/Output: [[-47.95441778993674 52] 4.045582210063259]
Test Case: 319 | Input/Output: [[97.51744735047245 -93] 4.517447350472452]
Test Case: 320 | Input/Output: [[10.127195197288756 30] 40.127195197288756]
Test Case: 321 | Input/Output: [[-89.47095903107342 -32] -121.47095903107342]
Test Case: 322 | Input/Output: [[27.04194310352534 -89] -61.95805689647466]
Test Case: 323 | Input/Output: [[-42.21895457850411 17] -25.21895457850411]
Test Case: 324 | Input/Output: [[-97.32382375551325 99] 1.6761762444867543]
Test Case: 325 | Input/Output: [[-99.12236005581059 -71] -170.1223600558106]
Test Case: 326 | Input/Output: [[-37.92217607313528 53] 15.077823926864717]
Test Case: 327 | Input/Output: [[-54.769310685682115 95] 40.230689314317885]
Test Case: 328 | Input/Output: [[23.959946433039534 -53] -29.040053566960466]
Test Case: 329 | Input/Output: [[68.97841605232784 -40] 28.978416052327844]
Test Case: 330 | Input/Output: [[-87.37517398704873 8] -79.37517398704873]
Test Case: 331 | Input/Output: [[-11.347711277407882 -97] -108.34771127740788]
Test Case: 332 | Input/Output: [[33.19128354962115 -38] -4.808716450378853]
Test Case: 333 | Input/Output: [[-89.31980431816075 62] -27.31980431816075]
Test Case: 334 | Input/Output: [[21.12889838353327 -88] -66.87110161646673]
Test Case: 335 | Input/Output: [[-11.155957475496962 -66] -77.15595747549696]
Test Case: 336 | Input/Output: [[-76.66784680021293 100] 23.332153199787072]
Test Case: 337 | Input/Output: [[27.235851547402177 48] 75.23585154740218]
Test Case: 338 | Input/Output: [[-31.213963938738388 -64] -95.21396393873839]
Test Case: 339 | Input/Output: [[15.082185117213413 34] 49.08218511721341]
Test Case: 340 | Input/Output: [[-54.68587137152683 18] -36.68587137152683]
Test Case: 341 | Input/Output: [[53.00383594710644 -83] -29.996164052893562]
Test Case: 342 | Input/Output: [[-29.757830143417422 49] 19.242169856582578]
Test Case: 343 | Input/Output: [[90.76498429296404 84] 174.76498429296404]
Test Case: 344 | Input/Output: [[-50.10027971470477 18] -32.10027971470477]
Test Case: 345 | Input/Output: [[-37.37827046519471 56] 18.62172953480529]
Test Case: 346 | Input/Output: [[-15.779416970936182 83] 67.22058302906382]
Test Case: 347 | Input/Output: [[74.58473840811618 -86] -11.41526159188382]
Test Case: 348 | Input/Output: [[-15.759168416516545 -79] -94.75916841651654]
Test Case: 349 | Input/Output: [[-36.555163504976626 -26] -62.555163504976626]
Test Case: 350 | Input/Output: [[-30.25174821648858 92] 61.74825178351142]
Test Case: 351 | Input/Output: [[91.43706826594882 -11] 80.43706826594882]
Test Case: 352 | Input/Output: [[-67.67317420242881 99] 31.32682579757119]
Test Case: 353 | Input/Output: [[93.68256147475742 11] 104.68256147475742]
Test Case: 354 | Input/Output: [[49.024949792769235 -97] -47.975050207230765]
Test Case: 355 | Input/Output: [[-20.562492745465107 80] 59.43750725453489]
Test Case: 356 | Input/Output: [[-29.85271924029685 83] 53.14728075970315]
Test Case: 357 | Input/Output: [[-53.19959560987995 -83] -136.19959560987996]
Test Case: 358 | Input/Output: [[-4.942919968938469 -71] -75.94291996893847]
Test Case: 359 | Input/Output: [[-50.08914268616387 -75] -125.08914268616387]
Test Case: 360 | Input/Output: [[27.394987147851964 -37] -9.605012852148036]
Test Case: 361 | Input/Output: [[68.95360386938657 47] 115.95360386938657]
Test Case: 362 | Input/Output: [[66.95445927439289 55] 121.95445927439289]
Test Case: 363 | Input/Output: [[36.19280781901753 -86] -49.80719218098247]
Test Case: 364 | Input/Output: [[35.16974163468839 -1] 34.16974163468839]
Test Case: 365 | Input/Output: [[61.12622262818192 -86] -24.87377737181808]
Test Case: 366 | Input/Output: [[-82.39933898183585 74] -8.399338981835854]
Test Case: 367 | Input/Output: [[43.86170411299875 46] 89.86170411299875]
Test Case: 368 | Input/Output: [[-69.56511208110707 28] -41.565112081107074]
Test Case: 369 | Input/Output: [[0.6549906398878562 71] 71.65499063988786]
Test Case: 370 | Input/Output: [[-83.10322676538442 13] -70.10322676538442]
Test Case: 371 | Input/Output: [[-54.22547210553663 -6] -60.22547210553663]
Test Case: 372 | Input/Output: [[52.88914390799687 -68] -15.110856092003132]
Test Case: 373 | Input/Output: [[78.3214852859659 -70] 8.321485285965906]
Test Case: 374 | Input/Output: [[70.84406205026625 -46] 24.844062050266245]
Test Case: 375 | Input/Output: [[56.027896525753846 -36] 20.027896525753846]
Test Case: 376 | Input/Output: [[-63.99018187834997 -39] -102.99018187834997]
Test Case: 377 | Input/Output: [[80.23864127897801 -65] 15.238641278978008]
Test Case: 378 | Input/Output: [[82.3515760887442 -17] 65.3515760887442]
Test Case: 379 | Input/Output: [[-96.16528544128971 -9] -105.16528544128971]
Test Case: 380 | Input/Output: [[-31.961137733788263 60] 28.038862266211737]
Test Case: 381 | Input/Output: [[51.117268147193585 -84] -32.882731852806415]
Test Case: 382 | Input/Output: [[-76.5481217155375 2] -74.5481217155375]
Test Case: 383 | Input/Output: [[-92.64611792409552 -76] -168.6461179240955]
Test Case: 384 | Input/Output: [[-18.232231806262632 -57] -75.23223180626263]
Test Case: 385 | Input/Output: [[-32.75884992359421 -61] -93.75884992359421]
Test Case: 386 | Input/Output: [[-89.78367155168117 87] -2.7836715516811665]
Test Case: 387 | Input/Output: [[-49.43748303894442 -91] -140.43748303894444]
Test Case: 388 | Input/Output: [[85.33418921479156 -93] -7.665810785208436]
Test Case: 389 | Input/Output: [[-15.737489172903679 -79] -94.73748917290368]
Test Case: 390 | Input/Output: [[-30.31666360960044 -72] -102.31666360960044]
Test Case: 391 | Input/Output: [[-87.18808059402481 63] -24.18808059402481]
Test Case: 392 | Input/Output: [[-54.82935223842609 -8] -62.82935223842609]
Test Case: 393 | Input/Output: [[5.596052559917595 -53] -47.403947440082405]
Test Case: 394 | Input/Output: [[69.84709446773769 1] 70.84709446773769]
Test Case: 395 | Input/Output: [[49.042469699446826 -20] 29.042469699446826]
Test Case: 396 | Input/Output: [[-6.443418236534697 -49] -55.4434182365347]
Test Case: 397 | Input/Output: [[-12.528484893279796 21] 8.471515106720204]
Test Case: 398 | Input/Output: [[-95.91706602433958 -6] -101.91706602433958]
Test Case: 399 | Input/Output: [[-84.01671333671017 25] -59.01671333671017]
Test Case: 400 | Input/Output: [[78.00404123262541 3] 81.00404123262541]
Test Case: 401 | Input/Output: [[-84.943184250809 100] 15.056815749191003]
Test Case: 402 | Input/Output: [[76.56866137698378 22] 98.56866137698378]
Test Case: 403 | Input/Output: [[-23.303659263584905 97] 73.6963407364151]
Test Case: 404 | Input/Output: [[-87.202897567465 -5] -92.202897567465]
Test Case: 405 | Input/Output: [[-62.85360786701468 58] -4.853607867014681]
Test Case: 406 | Input/Output: [[-93.19812024006512 52] -41.19812024006512]
Test Case: 407 | Input/Output: [[14.013023485714754 -74] -59.986976514285246]
Test Case: 408 | Input/Output: [[-64.1466967419464 47] -17.1466967419464]
Test Case: 409 | Input/Output: [[39.89435957327956 -81] -41.10564042672044]
Test Case: 410 | Input/Output: [[80.32370560202759 -11] 69.32370560202759]
Test Case: 411 | Input/Output: [[69.18876638763257 -10] 59.18876638763257]
Test Case: 412 | Input/Output: [[-47.40598116365573 -98] -145.40598116365572]
Test Case: 413 | Input/Output: [[17.228994148070754 -49] -31.771005851929246]
Test Case: 414 | Input/Output: [[19.554690087239408 38] 57.55469008723941]
Test Case: 415 | Input/Output: [[12.377634178352181 -100] -87.62236582164782]
Test Case: 416 | Input/Output: [[64.17763294513873 -7] 57.177632945138726]
Test Case: 417 | Input/Output: [[-6.444839732160943 60] 53.55516026783906]
Test Case: 418 | Input/Output: [[92.47719319092178 -65] 27.47719319092178]
Test Case: 419 | Input/Output: [[-61.17588703873462 -19] -80.17588703873463]
Test Case: 420 | Input/Output: [[6.042750167744131 30] 36.04275016774413]
Test Case: 421 | Input/Output: [[14.82796460078049 -16] -1.17203539921951]
Test Case: 422 | Input/Output: [[-61.06719428587739 -99] -160.0671942858774]
Test Case: 423 | Input/Output: [[98.36867954330904 -44] 54.36867954330904]
Test Case: 424 | Input/Output: [[49.0225311716587 20] 69.0225311716587]
Test Case: 425 | Input/Output: [[-70.01391804852115 100] 29.98608195147885]
Test Case: 426 | Input/Output: [[-32.313949141237686 -41] -73.31394914123769]
Test Case: 427 | Input/Output: [[-56.06627521670886 -41] -97.06627521670886]
Test Case: 428 | Input/Output: [[-45.62016702022183 -3] -48.62016702022183]
Test Case: 429 | Input/Output: [[-28.924258489507395 -51] -79.9242584895074]
Test Case: 430 | Input/Output: [[-32.54713611451825 -52] -84.54713611451825]
Test Case: 431 | Input/Output: [[-96.58832899569647 -69] -165.5883289956965]
Test Case: 432 | Input/Output: [[49.60448405957675 -1] 48.60448405957675]
Test Case: 433 | Input/Output: [[-79.92840898670133 -41] -120.92840898670133]
Test Case: 434 | Input/Output: [[-19.647675607361492 23] 3.352324392638508]
Test Case: 435 | Input/Output: [[-66.89013375175865 -9] -75.89013375175865]
Test Case: 436 | Input/Output: [[-98.47838741205292 -56] -154.47838741205294]
Test Case: 437 | Input/Output: [[95.83727042162488 -28] 67.83727042162488]
Test Case: 438 | Input/Output: [[-87.38539274181144 40] -47.385392741811444]
Test Case: 439 | Input/Output: [[-65.99788627818668 40] -25.997886278186684]
Test Case: 440 | Input/Output: [[-21.031415830372225 -67] -88.03141583037223]
Test Case: 441 | Input/Output: [[20.546555118656244 -30] -9.453444881343756]
Test Case: 442 | Input/Output: [[89.50689735288339 -15] 74.50689735288339]
Test Case: 443 | Input/Output: [[-53.4901414192106 38] -15.490141419210602]
Test Case: 444 | Input/Output: [[-12.393825381911341 -66] -78.39382538191134]
Test Case: 445 | Input/Output: [[-48.38068642600306 78] 29.61931357399694]
Test Case: 446 | Input/Output: [[44.518486805190804 59] 103.5184868051908]
Test Case: 447 | Input/Output: [[-83.50008196670905 -18] -101.50008196670905]
Test Case: 448 | Input/Output: [[21.01002208090081 33] 54.01002208090081]
Test Case: 449 | Input/Output: [[-55.60439660056262 -29] -84.60439660056262]
Test Case: 450 | Input/Output: [[49.11778996874864 -3] 46.11778996874864]
Test Case: 451 | Input/Output: [[73.60670774253109 -6] 67.60670774253109]
Test Case: 452 | Input/Output: [[28.502655575765573 2] 30.502655575765573]
Test Case: 453 | Input/Output: [[58.11242288206063 -71] -12.887577117939372]
Test Case: 454 | Input/Output: [[5.025707813610097 -94] -88.9742921863899]
Test Case: 455 | Input/Output: [[-95.78289847121285 0] -95.78289847121285]
Test Case: 456 | Input/Output: [[61.89506078433081 -47] 14.89506078433081]
Test Case: 457 | Input/Output: [[39.53347110101336 48] 87.53347110101336]
Test Case: 458 | Input/Output: [[58.411386029300814 84] 142.41138602930081]
Test Case: 459 | Input/Output: [[83.99930316716777 -78] 5.999303167167767]
Test Case: 460 | Input/Output: [[0.7563116740164162 -52] -51.243688325983584]
Test Case: 461 | Input/Output: [[-87.83908754490409 -66] -153.8390875449041]
Test Case: 462 | Input/Output: [[71.17976236983395 16] 87.17976236983395]
Test Case: 463 | Input/Output: [[21.901842218184186 -81] -59.098157781815814]
Test Case: 464 | Input/Output: [[-9.582653473922747 -75] -84.58265347392275]
Test Case: 465 | Input/Output: [[-85.57050744344514 -39] -124.57050744344514]
Test Case: 466 | Input/Output: [[96.17239554197707 -8] 88.17239554197707]
Test Case: 467 | Input/Output: [[61.28716853044426 -7] 54.28716853044426]
Test Case: 468 | Input/Output: [[-88.92614206752987 6] -82.92614206752987]
Test Case: 469 | Input/Output: [[27.3000146087077 65] 92.3000146087077]
Test Case: 470 | Input/Output: [[22.795657522276926 23] 45.795657522276926]
Test Case: 471 | Input/Output: [[-75.91874970943881 63] -12.918749709438814]
Test Case: 472 | Input/Output: [[-5.411875944654113 -22] -27.411875944654113]
Test Case: 473 | Input/Output: [[-60.78580903013122 -55] -115.78580903013122]
Test Case: 474 | Input/Output: [[-56.509366865484665 -11] -67.50936686548467]
Test Case: 475 | Input/Output: [[84.52996004824774 -13] 71.52996004824774]
Test Case: 476 | Input/Output: [[-98.35206826241445 24] -74.35206826241445]
Test Case: 477 | Input/Output: [[-10.55911787269757 92] 81.44088212730243]
Test Case: 478 | Input/Output: [[12.780775259308825 59] 71.78077525930883]
Test Case: 479 | Input/Output: [[-58.64571126079212 -35] -93.64571126079213]
Test Case: 480 | Input/Output: [[5.304046106348736 95] 100.30404610634874]
Test Case: 481 | Input/Output: [[89.07381567698462 79] 168.07381567698462]
Test Case: 482 | Input/Output: [[-56.9249434192876 43] -13.924943419287601]
Test Case: 483 | Input/Output: [[-47.27557995422087 -92] -139.27557995422086]
Test Case: 484 | Input/Output: [[25.13388946277486 -34] -8.86611053722514]
Test Case: 485 | Input/Output: [[-93.08170602412635 39] -54.08170602412635]
Test Case: 486 | Input/Output: [[79.52116787885063 94] 173.52116787885063]
Test Case: 487 | Input/Output: [[53.29550441421068 73] 126.29550441421068]
Test Case: 488 | Input/Output: [[33.93079924936731 49] 82.93079924936731]
Test Case: 489 | Input/Output: [[-23.59823510818177 47] 23.40176489181823]
Test Case: 490 | Input/Output: [[-29.449803984186573 -79] -108.44980398418657]
Test Case: 491 | Input/Output: [[40.72496909516764 40] 80.72496909516764]
Test Case: 492 | Input/Output: [[85.22533770938881 -42] 43.22533770938881]
Test Case: 493 | Input/Output: [[-89.16289766868138 -21] -110.16289766868138]
Test Case: 494 | Input/Output: [[26.223048655596727 33] 59.22304865559673]
Test Case: 495 | Input/Output: [[2.5229326347231904 37] 39.52293263472319]
Test Case: 496 | Input/Output: [[-13.345892081357817 25] 11.654107918642183]
Test Case: 497 | Input/Output: [[-2.982240746153934 4] 1.0177592538460658]
Test Case: 498 | Input/Output: [[15.191373645501244 67] 82.19137364550124]
Test Case: 499 | Input/Output: [[-84.01165612260601 92] 7.988343877393987]
Test Case: 500 | Input/Output: [[-41.731170813039384 60] 18.268829186960616]
Test Case: 501 | Input/Output: [[54.62219487736277 -81] -26.377805122637227]
Test Case: 502 | Input/Output: [[72.33718526223666 -38] 34.33718526223666]
Test Case: 503 | Input/Output: [[-72.82514493814618 -22] -94.82514493814618]
Test Case: 504 | Input/Output: [[47.31596437082936 -8] 39.31596437082936]
Test Case: 505 | Input/Output: [[68.2424968454628 0] 68.2424968454628]
Test Case: 506 | Input/Output: [[65.9125714810391 14] 79.9125714810391]
Test Case: 507 | Input/Output: [[-49.194244126174105 -43] -92.19424412617411]
Test Case: 508 | Input/Output: [[29.106038374502447 58] 87.10603837450245]
Test Case: 509 | Input/Output: [[30.766135726213207 -17] 13.766135726213207]
Test Case: 510 | Input/Output: [[72.97688359441074 8] 80.97688359441074]
Test Case: 511 | Input/Output: [[81.61556054851752 16] 97.61556054851752]
Test Case: 512 | Input/Output: [[-60.1501663084141 -99] -159.1501663084141]
Test Case: 513 | Input/Output: [[-15.291460130534972 -48] -63.29146013053497]
Test Case: 514 | Input/Output: [[62.195016606763176 15] 77.19501660676318]
Test Case: 515 | Input/Output: [[47.538331889544395 94] 141.5383318895444]
Test Case: 516 | Input/Output: [[48.46056154010151 -35] 13.460561540101509]
Test Case: 517 | Input/Output: [[-27.642853970700315 33] 5.357146029299685]
Test Case: 518 | Input/Output: [[25.113862354710264 -56] -30.886137645289736]
Test Case: 519 | Input/Output: [[80.57482537312274 10] 90.57482537312274]
Test Case: 520 | Input/Output: [[-92.15156980201063 7] -85.15156980201063]
Test Case: 521 | Input/Output: [[-36.424671862263345 76] 39.575328137736655]
Test Case: 522 | Input/Output: [[24.041146897342117 8] 32.04114689734212]
Test Case: 523 | Input/Output: [[-85.72337017788017 -60] -145.72337017788016]
Test Case: 524 | Input/Output: [[-84.47472974697877 -82] -166.47472974697877]
Test Case: 525 | Input/Output: [[-2.894885644683228 -72] -74.89488564468323]
Test Case: 526 | Input/Output: [[-20.396601753404056 44] 23.603398246595944]
Test Case: 527 | Input/Output: [[24.41191436184434 45] 69.41191436184434]
Test Case: 528 | Input/Output: [[-39.16906271895735 -49] -88.16906271895735]
Test Case: 529 | Input/Output: [[84.2421099391448 78] 162.2421099391448]
Test Case: 530 | Input/Output: [[12.955104693468058 -90] -77.04489530653194]
Test Case: 531 | Input/Output: [[-5.030808973368224 -82] -87.03080897336822]
Test Case: 532 | Input/Output: [[-35.73550756040589 -85] -120.73550756040589]
Test Case: 533 | Input/Output: [[45.260272615091765 -16] 29.260272615091765]
Test Case: 534 | Input/Output: [[-52.9496148795612 26] -26.949614879561203]
Test Case: 535 | Input/Output: [[-27.72115225895506 60] 32.27884774104494]
Test Case: 536 | Input/Output: [[-93.27161009553986 12] -81.27161009553986]
Test Case: 537 | Input/Output: [[-5.659363107508341 -32] -37.65936310750834]
Test Case: 538 | Input/Output: [[41.75638716781626 -23] 18.756387167816257]
Test Case: 539 | Input/Output: [[57.58840052561439 -69] -11.41159947438561]
Test Case: 540 | Input/Output: [[-23.495250946352158 59] 35.50474905364784]
Test Case: 541 | Input/Output: [[-52.688741466264055 -92] -144.68874146626405]
Test Case: 542 | Input/Output: [[-96.17579364180686 58] -38.17579364180686]
Test Case: 543 | Input/Output: [[51.68036383814706 -35] 16.68036383814706]
Test Case: 544 | Input/Output: [[21.306756199965562 70] 91.30675619996556]
Test Case: 545 | Input/Output: [[48.01025069973923 -67] -18.98974930026077]
Test Case: 546 | Input/Output: [[-45.79030331691207 -97] -142.79030331691206]
Test Case: 547 | Input/Output: [[-35.51802576161411 20] -15.518025761614112]
Test Case: 548 | Input/Output: [[27.535007878516126 -36] -8.464992121483874]
Test Case: 549 | Input/Output: [[-57.753175921007525 -32] -89.75317592100753]
Test Case: 550 | Input/Output: [[-94.25981312214013 69] -25.25981312214013]
Test Case: 551 | Input/Output: [[-20.90864274387738 3] -17.90864274387738]
Test Case: 552 | Input/Output: [[62.795388602933855 38] 100.79538860293385]
Test Case: 553 | Input/Output: [[91.9438634506167 -20] 71.9438634506167]
Test Case: 554 | Input/Output: [[-88.56008601126626 89] 0.43991398873373555]
Test Case: 555 | Input/Output: [[-73.51967429452631 -46] -119.51967429452631]
Test Case: 556 | Input/Output: [[2.7339015391426074 11] 13.733901539142607]
Test Case: 557 | Input/Output: [[-24.85588255622247 12] -12.855882556222468]
Test Case: 558 | Input/Output: [[68.23782797843148 12] 80.23782797843148]
Test Case: 559 | Input/Output: [[85.43822159778841 61] 146.4382215977884]
Test Case: 560 | Input/Output: [[-85.28778285600256 97] 11.712217143997435]
Test Case: 561 | Input/Output: [[-25.28476434315718 -17] -42.28476434315718]
Test Case: 562 | Input/Output: [[63.91181626830843 -94] -30.088183731691572]
Test Case: 563 | Input/Output: [[49.211323584511774 -62] -12.788676415488226]
Test Case: 564 | Input/Output: [[-35.958499221556096 52] 16.041500778443904]
Test Case: 565 | Input/Output: [[39.2786080417211 -2] 37.2786080417211]
Test Case: 566 | Input/Output: [[68.77121918378378 46] 114.77121918378378]
Test Case: 567 | Input/Output: [[40.087990069928935 88] 128.08799006992894]
Test Case: 568 | Input/Output: [[-54.59077427849665 63] 8.409225721503347]
Test Case: 569 | Input/Output: [[80.84111993564386 -77] 3.84111993564386]
Test Case: 570 | Input/Output: [[1.9902094022825167 2] 3.9902094022825167]
Test Case: 571 | Input/Output: [[-17.430807961119115 -22] -39.430807961119115]
Test Case: 572 | Input/Output: [[-61.657041721596386 -97] -158.65704172159639]
Test Case: 573 | Input/Output: [[46.26008386962047 95] 141.26008386962047]
Test Case: 574 | Input/Output: [[-47.989037264121094 72] 24.010962735878906]
Test Case: 575 | Input/Output: [[-94.65971478668764 -85] -179.65971478668763]
Test Case: 576 | Input/Output: [[93.88000901906432 -22] 71.88000901906432]
Test Case: 577 | Input/Output: [[-63.667244210624375 -66] -129.66724421062438]
Test Case: 578 | Input/Output: [[68.35750665880457 -4] 64.35750665880457]
Test Case: 579 | Input/Output: [[-75.81401210074876 -95] -170.81401210074876]
Test Case: 580 | Input/Output: [[64.8740992221667 24] 88.8740992221667]
Test Case: 581 | Input/Output: [[46.5469711231396 -23] 23.5469711231396]
Test Case: 582 | Input/Output: [[66.24323678922204 88] 154.24323678922204]
Test Case: 583 | Input/Output: [[-94.47521460451509 47] -47.47521460451509]
Test Case: 584 | Input/Output: [[-41.99271836522313 43] 1.0072816347768665]
Test Case: 585 | Input/Output: [[60.913244951752176 71] 131.91324495175218]
Test Case: 586 | Input/Output: [[98.97132816915101 -3] 95.97132816915101]
Test Case: 587 | Input/Output: [[-4.8051922229556965 47] 42.1948077770443]
Test Case: 588 | Input/Output: [[-74.15259207919638 12] -62.15259207919638]
Test Case: 589 | Input/Output: [[-18.803178841261342 58] 39.19682115873866]
Test Case: 590 | Input/Output: [[29.94689405000821 76] 105.94689405000821]
Test Case: 591 | Input/Output: [[-92.05472538009707 58] -34.05472538009707]
Test Case: 592 | Input/Output: [[48.920517395814386 33] 81.92051739581439]
Test Case: 593 | Input/Output: [[-74.34580699442775 30] -44.34580699442775]
Test Case: 594 | Input/Output: [[-1.5355670923514566 9] 7.464432907648543]
Test Case: 595 | Input/Output: [[-1.1212534288764289 90] 88.87874657112357]
Test Case: 596 | Input/Output: [[-60.249981584653845 -3] -63.249981584653845]
Test Case: 597 | Input/Output: [[-18.780572561068425 60] 41.219427438931575]
Test Case: 598 | Input/Output: [[62.09506701256592 -20] 42.09506701256592]
Test Case: 599 | Input/Output: [[-94.42200880516891 -40] -134.4220088051689]
Test Case: 600 | Input/Output: [[75.35804996216905 48] 123.35804996216905]
Test Case: 601 | Input/Output: [[-42.908697930257155 -66] -108.90869793025715]
Test Case: 602 | Input/Output: [[92.07598376391118 34] 126.07598376391118]
Test Case: 603 | Input/Output: [[-28.44716014834796 37] 8.552839851652038]
Test Case: 604 | Input/Output: [[50.048864320308695 -68] -17.951135679691305]
Test Case: 605 | Input/Output: [[-82.63664902149637 -35] -117.63664902149637]
Test Case: 606 | Input/Output: [[-99.86739847647807 36] -63.86739847647807]
Test Case: 607 | Input/Output: [[-29.70231161902055 1] -28.70231161902055]
Test Case: 608 | Input/Output: [[70.33834877402484 -20] 50.33834877402484]
Test Case: 609 | Input/Output: [[65.87977870363841 47] 112.87977870363841]
Test Case: 610 | Input/Output: [[-92.89152629589749 22] -70.89152629589749]
Test Case: 611 | Input/Output: [[-62.82610371638124 30] -32.82610371638124]
Test Case: 612 | Input/Output: [[47.381803415202114 -55] -7.618196584797886]
Test Case: 613 | Input/Output: [[46.748731923530954 85] 131.74873192353095]
Test Case: 614 | Input/Output: [[-6.583756105749018 16] 9.416243894250982]
Test Case: 615 | Input/Output: [[-25.246174946377977 96] 70.75382505362202]
Test Case: 616 | Input/Output: [[-54.86229412822681 -54] -108.86229412822681]
Test Case: 617 | Input/Output: [[-63.03453553115246 49] -14.034535531152457]
Test Case: 618 | Input/Output: [[-8.097576976131293 -99] -107.0975769761313]
Test Case: 619 | Input/Output: [[45.54497098737616 82] 127.54497098737616]
Test Case: 620 | Input/Output: [[-94.33393388152018 79] -15.333933881520181]
Test Case: 621 | Input/Output: [[39.45877474466502 39] 78.45877474466502]
Test Case: 622 | Input/Output: [[-64.47621229831532 50] -14.476212298315318]
Test Case: 623 | Input/Output: [[52.853854365416396 -5] 47.853854365416396]
Test Case: 624 | Input/Output: [[55.22884055653168 -37] 18.22884055653168]
Test Case: 625 | Input/Output: [[-60.66540574835961 -48] -108.6654057483596]
Test Case: 626 | Input/Output: [[48.06449532981688 -43] 5.064495329816879]
Test Case: 627 | Input/Output: [[66.61400036284132 27] 93.61400036284132]
Test Case: 628 | Input/Output: [[-12.677312451569108 43] 30.322687548430892]
Test Case: 629 | Input/Output: [[-29.402010828937136 -36] -65.40201082893714]
Test Case: 630 | Input/Output: [[99.10292552492086 -22] 77.10292552492086]
Test Case: 631 | Input/Output: [[3.6102172459449946 -32] -28.389782754055005]
Test Case: 632 | Input/Output: [[49.02329769897716 15] 64.02329769897716]
Test Case: 633 | Input/Output: [[5.239672417241152 95] 100.23967241724115]
Test Case: 634 | Input/Output: [[-89.15146403791331 -5] -94.15146403791331]
Test Case: 635 | Input/Output: [[22.578531560542743 -6] 16.578531560542743]
Test Case: 636 | Input/Output: [[31.807308417706793 -100] -68.19269158229321]
Test Case: 637 | Input/Output: [[64.62568488808083 -83] -18.374315111919174]
Test Case: 638 | Input/Output: [[-66.7395840245361 58] -8.7395840245361]
Test Case: 639 | Input/Output: [[-31.531447034827835 -2] -33.531447034827835]
Test Case: 640 | Input/Output: [[19.73807517463615 -37] -17.26192482536385]
Test Case: 641 | Input/Output: [[7.574865615032962 7] 14.574865615032962]
Test Case: 642 | Input/Output: [[53.537743406348284 -6] 47.537743406348284]
Test Case: 643 | Input/Output: [[16.682404871435907 87] 103.6824048714359]
Test Case: 644 | Input/Output: [[0.3131114040191676 -58] -57.68688859598083]
Test Case: 645 | Input/Output: [[37.20475218464736 -17] 20.20475218464736]
Test Case: 646 | Input/Output: [[-64.16604200977142 -60] -124.16604200977142]
Test Case: 647 | Input/Output: [[26.25452534218506 -43] -16.74547465781494]
Test Case: 648 | Input/Output: [[-51.03137788901526 -57] -108.03137788901526]
Test Case: 649 | Input/Output: [[-29.159597991767413 -42] -71.15959799176741]
Test Case: 650 | Input/Output: [[38.95538534872523 -42] -3.0446146512747703]
Test Case: 651 | Input/Output: [[-3.326929998560928 -76] -79.32692999856093]
Test Case: 652 | Input/Output: [[-54.02918003365072 28] -26.029180033650718]
Test Case: 653 | Input/Output: [[-24.495799264232517 -33] -57.49579926423252]
Test Case: 654 | Input/Output: [[-58.37602411390399 96] 37.62397588609601]
Test Case: 655 | Input/Output: [[34.91089057131913 22] 56.91089057131913]
Test Case: 656 | Input/Output: [[55.416009563993214 -60] -4.583990436006786]
Test Case: 657 | Input/Output: [[-33.19116372643438 -57] -90.19116372643438]
Test Case: 658 | Input/Output: [[-21.13313789647009 8] -13.133137896470089]
Test Case: 659 | Input/Output: [[-15.369115513965156 -15] -30.369115513965156]
Test Case: 660 | Input/Output: [[-74.44830468732928 98] 23.551695312670716]
Test Case: 661 | Input/Output: [[32.58042676999389 89] 121.58042676999389]
Test Case: 662 | Input/Output: [[-27.148709603186887 -56] -83.14870960318689]
Test Case: 663 | Input/Output: [[50.39444397203616 36] 86.39444397203616]
Test Case: 664 | Input/Output: [[-38.996710095696095 -10] -48.996710095696095]
Test Case: 665 | Input/Output: [[-91.08623349192852 -35] -126.08623349192852]
Test Case: 666 | Input/Output: [[-15.62322234335187 73] 57.37677765664813]
Test Case: 667 | Input/Output: [[62.78617130839541 2] 64.78617130839541]
Test Case: 668 | Input/Output: [[34.75419992536172 40] 74.75419992536172]
Test Case: 669 | Input/Output: [[2.489068626039284 87] 89.48906862603928]
Test Case: 670 | Input/Output: [[93.39729954438045 30] 123.39729954438045]
Test Case: 671 | Input/Output: [[15.368842053534621 61] 76.36884205353462]
Test Case: 672 | Input/Output: [[-21.961791990062764 -97] -118.96179199006276]
Test Case: 673 | Input/Output: [[-38.544122567926784 -10] -48.544122567926784]
Test Case: 674 | Input/Output: [[-4.533749381182005 27] 22.466250618817995]
Test Case: 675 | Input/Output: [[-44.14863992338098 10] -34.14863992338098]
Test Case: 676 | Input/Output: [[57.62810007886742 -15] 42.62810007886742]
Test Case: 677 | Input/Output: [[-8.65594956991373 -54] -62.65594956991373]
Test Case: 678 | Input/Output: [[79.35412932286584 71] 150.35412932286584]
Test Case: 679 | Input/Output: [[45.22836501088335 35] 80.22836501088335]
Test Case: 680 | Input/Output: [[-30.211236312716423 -98] -128.21123631271644]
Test Case: 681 | Input/Output: [[73.76917909697329 -46] 27.76917909697329]
Test Case: 682 | Input/Output: [[-82.03207364612229 9] -73.03207364612229]
Test Case: 683 | Input/Output: [[-52.931816668078135 -84] -136.93181666807814]
Test Case: 684 | Input/Output: [[-87.33688138300289 87] -0.33688138300288983]
Test Case: 685 | Input/Output: [[10.584786558191837 -57] -46.41521344180816]
Test Case: 686 | Input/Output: [[-79.57050209009992 8] -71.57050209009992]
Test Case: 687 | Input/Output: [[-2.208639995870442 -58] -60.20863999587044]
Test Case: 688 | Input/Output: [[-88.20679805230027 59] -29.20679805230027]
Test Case: 689 | Input/Output: [[-94.92783629337822 99] 4.0721637066217795]
Test Case: 690 | Input/Output: [[-28.552897097873426 -30] -58.552897097873426]
Test Case: 691 | Input/Output: [[-25.53456180833649 58] 32.46543819166351]
Test Case: 692 | Input/Output: [[45.55339079059058 -42] 3.5533907905905835]
Test Case: 693 | Input/Output: [[11.867536989394026 -31] -19.132463010605974]
Test Case: 694 | Input/Output: [[-90.00797213429605 -7] -97.00797213429605]
Test Case: 695 | Input/Output: [[12.11620410598664 12] 24.11620410598664]
Test Case: 696 | Input/Output: [[69.44318980222008 64] 133.44318980222008]
Test Case: 697 | Input/Output: [[25.820157207411157 97] 122.82015720741116]
Test Case: 698 | Input/Output: [[-22.830875270329514 -97] -119.83087527032951]
Test Case: 699 | Input/Output: [[89.08953768874846 62] 151.08953768874846]
Test Case: 700 | Input/Output: [[-15.290566974117013 23] 7.709433025882987]
Test Case: 701 | Input/Output: [[68.35513825287282 -59] 9.35513825287282]
Test Case: 702 | Input/Output: [[11.175954602508952 67] 78.17595460250895]
Test Case: 703 | Input/Output: [[68.7413836068086 97] 165.7413836068086]
Test Case: 704 | Input/Output: [[77.78929332150739 55] 132.7892933215074]
Test Case: 705 | Input/Output: [[-63.85530797407875 -14] -77.85530797407876]
Test Case: 706 | Input/Output: [[67.57622471246495 -54] 13.576224712464949]
Test Case: 707 | Input/Output: [[-25.23902074859008 -59] -84.23902074859008]
Test Case: 708 | Input/Output: [[4.597461098377579 -3] 1.597461098377579]
Test Case: 709 | Input/Output: [[-30.87336559757894 -86] -116.87336559757894]
Test Case: 710 | Input/Output: [[80.37860712636626 -95] -14.621392873633738]
Test Case: 711 | Input/Output: [[5.723448928619177 -35] -29.276551071380823]
Test Case: 712 | Input/Output: [[98.51542964751695 44] 142.51542964751695]
Test Case: 713 | Input/Output: [[51.23070467825141 -11] 40.23070467825141]
Test Case: 714 | Input/Output: [[99.8205100848958 17] 116.8205100848958]
Test Case: 715 | Input/Output: [[-52.045598099646504 -72] -124.0455980996465]
Test Case: 716 | Input/Output: [[26.675821517376576 -68] -41.324178482623424]
Test Case: 717 | Input/Output: [[-80.74292573163737 91] 10.25707426836263]
Test Case: 718 | Input/Output: [[-70.60059149105732 -12] -82.60059149105732]
Test Case: 719 | Input/Output: [[-1.2879899664741714 36] 34.71201003352583]
Test Case: 720 | Input/Output: [[-17.26760836799201 -58] -75.26760836799201]
Test Case: 721 | Input/Output: [[31.756363731981423 79] 110.75636373198142]
Test Case: 722 | Input/Output: [[-11.654485478916314 76] 64.34551452108369]
Test Case: 723 | Input/Output: [[11.94332393725874 58] 69.94332393725874]
Test Case: 724 | Input/Output: [[-63.25587886003608 -76] -139.2558788600361]
Test Case: 725 | Input/Output: [[-69.56574486706279 61] -8.56574486706279]
Test Case: 726 | Input/Output: [[-58.188454773807166 -75] -133.18845477380717]
Test Case: 727 | Input/Output: [[-56.808173754154076 77] 20.191826245845924]
Test Case: 728 | Input/Output: [[21.796130873111025 -76] -54.203869126888975]
Test Case: 729 | Input/Output: [[-68.76937413256645 68] -0.7693741325664547]
Test Case: 730 | Input/Output: [[9.31501266704899 -32] -22.68498733295101]
Test Case: 731 | Input/Output: [[-85.10418921620979 1] -84.10418921620979]
Test Case: 732 | Input/Output: [[-6.110959844176662 -97] -103.11095984417666]
Test Case: 733 | Input/Output: [[13.101393028396544 15] 28.101393028396544]
Test Case: 734 | Input/Output: [[-6.6633932997228555 -48] -54.663393299722856]
Test Case: 735 | Input/Output: [[92.00907436401732 41] 133.00907436401732]
Test Case: 736 | Input/Output: [[-22.39189170074735 87] 64.60810829925265]
Test Case: 737 | Input/Output: [[-42.4061201616781 61] 18.593879838321897]
Test Case: 738 | Input/Output: [[73.94564354741476 44] 117.94564354741476]
Test Case: 739 | Input/Output: [[-35.46498108757896 26] -9.464981087578963]
Test Case: 740 | Input/Output: [[75.6027786401101 -85] -9.397221359889897]
Test Case: 741 | Input/Output: [[-11.206110228732172 -15] -26.20611022873217]
Test Case: 742 | Input/Output: [[-18.184203886112087 -1] -19.184203886112087]
Test Case: 743 | Input/Output: [[-31.965244403039932 -10] -41.96524440303993]
Test Case: 744 | Input/Output: [[-65.6978818590211 -11] -76.6978818590211]
Test Case: 745 | Input/Output: [[-15.983521991607418 -24] -39.98352199160742]
Test Case: 746 | Input/Output: [[-34.62827893390485 -20] -54.62827893390485]
Test Case: 747 | Input/Output: [[82.60877122079054 36] 118.60877122079054]
Test Case: 748 | Input/Output: [[-39.80488352380813 -76] -115.80488352380813]
Test Case: 749 | Input/Output: [[82.57203083807875 -5] 77.57203083807875]
Test Case: 750 | Input/Output: [[20.942290387092342 4] 24.942290387092342]
Test Case: 751 | Input/Output: [[49.347374582563674 -53] -3.652625417436326]
Test Case: 752 | Input/Output: [[-8.239231134681475 89] 80.76076886531852]
Test Case: 753 | Input/Output: [[40.41356029387106 -65] -24.586439706128942]
Test Case: 754 | Input/Output: [[-27.135001240415477 -87] -114.13500124041548]
Test Case: 755 | Input/Output: [[1.9369482784536558 58] 59.936948278453656]
Test Case: 756 | Input/Output: [[-19.717641367830538 91] 71.28235863216946]
Test Case: 757 | Input/Output: [[94.67191279916074 29] 123.67191279916074]
Test Case: 758 | Input/Output: [[-90.22870414929913 -88] -178.22870414929912]
Test Case: 759 | Input/Output: [[-33.311028152332355 -83] -116.31102815233236]
Test Case: 760 | Input/Output: [[39.61256737435491 22] 61.61256737435491]
Test Case: 761 | Input/Output: [[64.23824073339688 23] 87.23824073339688]
Test Case: 762 | Input/Output: [[27.187231788916492 19] 46.18723178891649]
Test Case: 763 | Input/Output: [[-12.962030625401951 -65] -77.96203062540195]
Test Case: 764 | Input/Output: [[-70.98909446629187 12] -58.989094466291874]
Test Case: 765 | Input/Output: [[82.20774051120122 -26] 56.20774051120122]
Test Case: 766 | Input/Output: [[-72.71226908695738 -76] -148.71226908695738]
Test Case: 767 | Input/Output: [[92.02870846646687 20] 112.02870846646687]
Test Case: 768 | Input/Output: [[-39.17338301410778 42] 2.8266169858922225]
Test Case: 769 | Input/Output: [[-45.302926969993294 -28] -73.3029269699933]
Test Case: 770 | Input/Output: [[91.78366016195389 -8] 83.78366016195389]
Test Case: 771 | Input/Output: [[28.237195643191313 -3] 25.237195643191313]
Test Case: 772 | Input/Output: [[20.40391785465674 -10] 10.40391785465674]
Test Case: 773 | Input/Output: [[-83.48520471066416 14] -69.48520471066416]
Test Case: 774 | Input/Output: [[47.34504007901589 82] 129.3450400790159]
Test Case: 775 | Input/Output: [[-0.9618556277904986 13] 12.038144372209501]
Test Case: 776 | Input/Output: [[-2.787543481011639 9] 6.212456518988361]
Test Case: 777 | Input/Output: [[-6.1845834042503895 -100] -106.18458340425039]
Test Case: 778 | Input/Output: [[38.67689913299327 26] 64.67689913299327]
Test Case: 779 | Input/Output: [[90.5510763467731 85] 175.5510763467731]
Test Case: 780 | Input/Output: [[-32.85661588951194 -88] -120.85661588951194]
Test Case: 781 | Input/Output: [[-29.064699524328645 -83] -112.06469952432865]
Test Case: 782 | Input/Output: [[-53.185183113532 -97] -150.185183113532]
Test Case: 783 | Input/Output: [[-72.74809161085669 -23] -95.74809161085669]
Test Case: 784 | Input/Output: [[-15.94394675480899 -52] -67.94394675480899]
Test Case: 785 | Input/Output: [[30.383386926564924 57] 87.38338692656492]
Test Case: 786 | Input/Output: [[52.69612011425471 -80] -27.30387988574529]
Test Case: 787 | Input/Output: [[41.50107799173162 17] 58.50107799173162]
Test Case: 788 | Input/Output: [[72.82409541403695 -99] -26.175904585963053]
Test Case: 789 | Input/Output: [[60.48612976667786 84] 144.48612976667786]
Test Case: 790 | Input/Output: [[18.583181450896078 18] 36.58318145089608]
Test Case: 791 | Input/Output: [[-9.317114975901333 86] 76.68288502409867]
Test Case: 792 | Input/Output: [[-19.548587892056844 48] 28.451412107943156]
Test Case: 793 | Input/Output: [[70.45920031317468 -39] 31.459200313174676]
Test Case: 794 | Input/Output: [[-76.07174747199838 69] -7.071747471998378]
Test Case: 795 | Input/Output: [[13.417209546743564 -31] -17.582790453256436]
Test Case: 796 | Input/Output: [[-2.8049704386966283 14] 11.195029561303372]
Test Case: 797 | Input/Output: [[-99.54875487230383 -80] -179.54875487230385]
Test Case: 798 | Input/Output: [[38.73285768477723 -76] -37.26714231522277]
Test Case: 799 | Input/Output: [[81.59200583890816 -90] -8.407994161091835]
Test Case: 800 | Input/Output: [[96.12952167854004 89] 185.12952167854004]
Test Case: 801 | Input/Output: [[64.56988810646041 -76] -11.43011189353959]
Test Case: 802 | Input/Output: [[98.19864955067195 49] 147.19864955067195]
Test Case: 803 | Input/Output: [[-38.02963757717772 60] 21.970362422822276]
Test Case: 804 | Input/Output: [[36.93187664379931 34] 70.93187664379931]
Test Case: 805 | Input/Output: [[-69.09257820952385 63] -6.09257820952385]
Test Case: 806 | Input/Output: [[-41.66740108473015 -34] -75.66740108473016]
Test Case: 807 | Input/Output: [[-45.938389930920856 -76] -121.93838993092086]
Test Case: 808 | Input/Output: [[7.913262226954814 93] 100.91326222695481]
Test Case: 809 | Input/Output: [[30.44881165157605 -92] -61.55118834842395]
Test Case: 810 | Input/Output: [[38.300218245817916 -72] -33.699781754182084]
Test Case: 811 | Input/Output: [[64.50153960583825 -13] 51.501539605838246]
Test Case: 812 | Input/Output: [[88.67829716974876 61] 149.67829716974876]
Test Case: 813 | Input/Output: [[-61.04834104826793 -91] -152.04834104826793]
Test Case: 814 | Input/Output: [[39.580525289101075 -43] -3.4194747108989247]
Test Case: 815 | Input/Output: [[51.78423840267527 92] 143.78423840267527]
Test Case: 816 | Input/Output: [[8.302420194115712 50] 58.30242019411571]
Test Case: 817 | Input/Output: [[-83.67183449584758 28] -55.67183449584758]
Test Case: 818 | Input/Output: [[-5.776586439207904 34] 28.223413560792096]
Test Case: 819 | Input/Output: [[91.63479553933328 70] 161.63479553933328]
Test Case: 820 | Input/Output: [[56.37621120686879 -38] 18.37621120686879]
Test Case: 821 | Input/Output: [[84.45610299561667 62] 146.45610299561667]
Test Case: 822 | Input/Output: [[14.241136530158968 -98] -83.75886346984103]
Test Case: 823 | Input/Output: [[-42.277204817014336 -91] -133.27720481701434]
Test Case: 824 | Input/Output: [[-95.9796311685973 80] -15.979631168597294]
Test Case: 825 | Input/Output: [[54.047401402626804 -73] -18.952598597373196]
Test Case: 826 | Input/Output: [[62.14334535931215 1] 63.14334535931215]
Test Case: 827 | Input/Output: [[-74.2025379657302 69] -5.202537965730201]
Test Case: 828 | Input/Output: [[-39.00479736482507 93] 53.99520263517493]
Test Case: 829 | Input/Output: [[10.284318872947424 12] 22.284318872947424]
Test Case: 830 | Input/Output: [[-51.99580967665787 96] 44.00419032334213]
Test Case: 831 | Input/Output: [[32.045321288734726 52] 84.04532128873473]
Test Case: 832 | Input/Output: [[81.65211975785255 73] 154.65211975785255]
Test Case: 833 | Input/Output: [[97.91238314985642 40] 137.91238314985642]
Test Case: 834 | Input/Output: [[49.3353002442461 70] 119.3353002442461]
Test Case: 835 | Input/Output: [[-18.5503988448462 89] 70.4496011551538]
Test Case: 836 | Input/Output: [[2.088407571599447 -79] -76.91159242840055]
Test Case: 837 | Input/Output: [[93.90264182293123 78] 171.90264182293123]
Test Case: 838 | Input/Output: [[37.11819194689261 -42] -4.881808053107392]
Test Case: 839 | Input/Output: [[5.919162899978517 -31] -25.080837100021483]
Test Case: 840 | Input/Output: [[-79.69936619341551 -10] -89.69936619341551]
Test Case: 841 | Input/Output: [[-50.48188911837417 -87] -137.48188911837417]
Test Case: 842 | Input/Output: [[85.18723304197789 -100] -14.81276695802211]
Test Case: 843 | Input/Output: [[-52.5881272638709 36] -16.588127263870902]
Test Case: 844 | Input/Output: [[-49.89905915393833 -75] -124.89905915393834]
Test Case: 845 | Input/Output: [[-84.90337542910052 -30] -114.90337542910052]
Test Case: 846 | Input/Output: [[33.91128174587266 -52] -18.088718254127343]
Test Case: 847 | Input/Output: [[-43.70785351436337 37] -6.7078535143633715]
Test Case: 848 | Input/Output: [[-74.54685417986062 44] -30.546854179860617]
Test Case: 849 | Input/Output: [[91.52117582251978 -77] 14.52117582251978]
Test Case: 850 | Input/Output: [[-11.655713007072748 -24] -35.65571300707275]
Test Case: 851 | Input/Output: [[-45.70767436338337 -97] -142.70767436338338]
Test Case: 852 | Input/Output: [[10.373095955265029 41] 51.37309595526503]
Test Case: 853 | Input/Output: [[-7.289008875786763 -21] -28.289008875786763]
Test Case: 854 | Input/Output: [[92.08627468158159 -80] 12.086274681581585]
Test Case: 855 | Input/Output: [[4.497545950262733 81] 85.49754595026273]
Test Case: 856 | Input/Output: [[-93.69747043945705 -71] -164.69747043945705]
Test Case: 857 | Input/Output: [[-1.9950169072220092 88] 86.00498309277799]
Test Case: 858 | Input/Output: [[-41.470138867070425 -1] -42.470138867070425]
Test Case: 859 | Input/Output: [[81.76975252556147 -83] -1.2302474744385279]
Test Case: 860 | Input/Output: [[-60.67285327817884 -65] -125.67285327817885]
Test Case: 861 | Input/Output: [[-46.18547978777503 -88] -134.18547978777502]
Test Case: 862 | Input/Output: [[-28.221275903092774 23] -5.221275903092774]
Test Case: 863 | Input/Output: [[-6.023528016360075 20] 13.976471983639925]
Test Case: 864 | Input/Output: [[88.75821475856921 39] 127.75821475856921]
Test Case: 865 | Input/Output: [[87.27056221720943 -52] 35.27056221720943]
Test Case: 866 | Input/Output: [[-68.0224565573121 -4] -72.0224565573121]
Test Case: 867 | Input/Output: [[-71.34455591073932 -42] -113.34455591073932]
Test Case: 868 | Input/Output: [[-79.2124931335767 20] -59.2124931335767]
Test Case: 869 | Input/Output: [[69.57195007667511 12] 81.57195007667511]
Test Case: 870 | Input/Output: [[60.528174565048545 -17] 43.528174565048545]
Test Case: 871 | Input/Output: [[-65.4878826332713 77] 11.512117366728702]
Test Case: 872 | Input/Output: [[47.701097741799686 -89] -41.298902258200314]
Test Case: 873 | Input/Output: [[60.27358237903536 91] 151.27358237903536]
Test Case: 874 | Input/Output: [[-66.25235225320984 92] 25.747647746790165]
Test Case: 875 | Input/Output: [[4.341119964190582 -92] -87.65888003580942]
Test Case: 876 | Input/Output: [[-99.79936009241585 8] -91.79936009241585]
Test Case: 877 | Input/Output: [[56.87844596765274 15] 71.87844596765274]
Test Case: 878 | Input/Output: [[87.23295576968661 40] 127.23295576968661]
Test Case: 879 | Input/Output: [[47.54582681544832 44] 91.54582681544832]
Test Case: 880 | Input/Output: [[-11.482934253615326 75] 63.517065746384674]
Test Case: 881 | Input/Output: [[78.84120163723847 -28] 50.84120163723847]
Test Case: 882 | Input/Output: [[60.62163347359365 -48] 12.621633473593647]
Test Case: 883 | Input/Output: [[-44.014106745708226 15] -29.014106745708226]
Test Case: 884 | Input/Output: [[-13.122528926958537 -16] -29.122528926958537]
Test Case: 885 | Input/Output: [[28.936950302520103 36] 64.9369503025201]
Test Case: 886 | Input/Output: [[-69.78129342040287 40] -29.781293420402875]
Test Case: 887 | Input/Output: [[59.27108343475723 50] 109.27108343475723]
Test Case: 888 | Input/Output: [[-73.12846938154296 53] -20.128469381542956]
Test Case: 889 | Input/Output: [[85.16925285460866 4] 89.16925285460866]
Test Case: 890 | Input/Output: [[8.93896068565418 -57] -48.06103931434582]
Test Case: 891 | Input/Output: [[48.40784243768883 4] 52.40784243768883]
Test Case: 892 | Input/Output: [[-59.52989655402041 -2] -61.52989655402041]
Test Case: 893 | Input/Output: [[-26.2722952684949 90] 63.7277047315051]
Test Case: 894 | Input/Output: [[50.30663674015295 -45] 5.306636740152953]
Test Case: 895 | Input/Output: [[-17.317017800209285 -10] -27.317017800209285]
Test Case: 896 | Input/Output: [[-90.31773092996596 -84] -174.31773092996596]
Test Case: 897 | Input/Output: [[-37.7857410803637 81] 43.2142589196363]
Test Case: 898 | Input/Output: [[-75.75820564814254 90] 14.241794351857465]
Test Case: 899 | Input/Output: [[-94.48771322441003 -96] -190.48771322441002]
Test Case: 900 | Input/Output: [[44.957954968524774 9] 53.957954968524774]
Test Case: 901 | Input/Output: [[-58.115455122427775 4] -54.115455122427775]
Test Case: 902 | Input/Output: [[72.41633305152118 -48] 24.41633305152118]
Test Case: 903 | Input/Output: [[-31.44293909117637 34] 2.5570609088236296]
Test Case: 904 | Input/Output: [[40.071061640812644 -21] 19.071061640812644]
Test Case: 905 | Input/Output: [[-32.09501480185877 68] 35.90498519814123]
Test Case: 906 | Input/Output: [[-43.5636511631226 18] -25.5636511631226]
Test Case: 907 | Input/Output: [[-79.1992468962485 9] -70.1992468962485]
Test Case: 908 | Input/Output: [[-0.6271256119909907 98] 97.37287438800901]
Test Case: 909 | Input/Output: [[-76.9764209313436 57] -19.976420931343597]
Test Case: 910 | Input/Output: [[43.50344455625449 -77] -33.49655544374551]
Test Case: 911 | Input/Output: [[20.04125840686457 -36] -15.958741593135429]
Test Case: 912 | Input/Output: [[-74.09934413705324 -23] -97.09934413705324]
Test Case: 913 | Input/Output: [[-6.311268399140218 -12] -18.311268399140218]
Test Case: 914 | Input/Output: [[94.06218745339058 -21] 73.06218745339058]
Test Case: 915 | Input/Output: [[69.48802882153558 18] 87.48802882153558]
Test Case: 916 | Input/Output: [[-79.65751853697569 53] -26.657518536975687]
Test Case: 917 | Input/Output: [[-46.89882250834756 53] 6.101177491652443]
Test Case: 918 | Input/Output: [[54.52665322930548 81] 135.52665322930548]
Test Case: 919 | Input/Output: [[90.0984992350968 -88] 2.0984992350967957]
Test Case: 920 | Input/Output: [[-78.24715386221975 33] -45.24715386221975]
Test Case: 921 | Input/Output: [[-75.37164074148772 85] 9.628359258512276]
Test Case: 922 | Input/Output: [[-45.09891926907732 -39] -84.09891926907733]
Test Case: 923 | Input/Output: [[-66.982458853621 -12] -78.982458853621]
Test Case: 924 | Input/Output: [[81.05804925983259 -24] 57.058049259832586]
Test Case: 925 | Input/Output: [[-37.271457532086075 5] -32.271457532086075]
Test Case: 926 | Input/Output: [[49.505776353482304 99] 148.5057763534823]
Test Case: 927 | Input/Output: [[27.477856939994226 -83] -55.522143060005774]
Test Case: 928 | Input/Output: [[-30.02218511211676 89] 58.97781488788324]
Test Case: 929 | Input/Output: [[46.37060999626567 -96] -49.62939000373433]
Test Case: 930 | Input/Output: [[33.80459263436987 9] 42.80459263436987]
Test Case: 931 | Input/Output: [[68.14758330875105 -69] -0.8524166912489477]
Test Case: 932 | Input/Output: [[41.21221949674967 -80] -38.78778050325033]
Test Case: 933 | Input/Output: [[93.72328026587567 10] 103.72328026587567]
Test Case: 934 | Input/Output: [[-33.20338330732888 37] 3.7966166926711225]
Test Case: 935 | Input/Output: [[86.58330826117748 53] 139.58330826117748]
Test Case: 936 | Input/Output: [[-11.968397173487944 -90] -101.96839717348794]
Test Case: 937 | Input/Output: [[15.475788991429184 -66] -50.524211008570816]
Test Case: 938 | Input/Output: [[41.85625844912852 55] 96.85625844912852]
Test Case: 939 | Input/Output: [[53.914579985034294 40] 93.9145799850343]
Test Case: 940 | Input/Output: [[-7.767202653864729 96] 88.23279734613527]
Test Case: 941 | Input/Output: [[-28.93722154226181 -72] -100.93722154226181]
Test Case: 942 | Input/Output: [[56.58700714555425 -29] 27.587007145554253]
Test Case: 943 | Input/Output: [[78.46819698038209 71] 149.4681969803821]
Test Case: 944 | Input/Output: [[-85.42458798190849 62] -23.424587981908488]
Test Case: 945 | Input/Output: [[-17.23764950417123 -21] -38.23764950417123]
Test Case: 946 | Input/Output: [[96.7947631407217 20] 116.7947631407217]
Test Case: 947 | Input/Output: [[74.26793714217214 39] 113.26793714217214]
Test Case: 948 | Input/Output: [[-47.79445927051209 -41] -88.79445927051209]
Test Case: 949 | Input/Output: [[96.29887481041814 -29] 67.29887481041814]
Test Case: 950 | Input/Output: [[14.947906759807083 94] 108.94790675980708]
Test Case: 951 | Input/Output: [[70.23885698667337 72] 142.23885698667337]
Test Case: 952 | Input/Output: [[98.72341672484805 25] 123.72341672484805]
Test Case: 953 | Input/Output: [[-38.942364683107655 -78] -116.94236468310766]
Test Case: 954 | Input/Output: [[-75.641402101935 -24] -99.641402101935]
Test Case: 955 | Input/Output: [[-72.79346287268682 -96] -168.7934628726868]
Test Case: 956 | Input/Output: [[8.825634747834684 -64] -55.174365252165316]
Test Case: 957 | Input/Output: [[14.267914434758964 64] 78.26791443475896]
Test Case: 958 | Input/Output: [[57.97414523362053 -60] -2.0258547663794673]
Test Case: 959 | Input/Output: [[-16.437658266086316 98] 81.56234173391368]
Test Case: 960 | Input/Output: [[10.422531503718076 -95] -84.57746849628192]
Test Case: 961 | Input/Output: [[-79.51279940495454 -41] -120.51279940495454]
Test Case: 962 | Input/Output: [[66.68196358662834 -64] 2.681963586628342]
Test Case: 963 | Input/Output: [[-13.26080889870498 -84] -97.26080889870498]
Test Case: 964 | Input/Output: [[51.00904370383995 69] 120.00904370383995]
Test Case: 965 | Input/Output: [[-50.56209835572692 -60] -110.56209835572692]
Test Case: 966 | Input/Output: [[-58.45768258627126 37] -21.45768258627126]
Test Case: 967 | Input/Output: [[-87.14514250859511 -4] -91.14514250859511]
Test Case: 968 | Input/Output: [[39.88551741877177 -36] 3.8855174187717694]
Test Case: 969 | Input/Output: [[10.759523148930043 88] 98.75952314893004]
Test Case: 970 | Input/Output: [[53.13797863702692 -3] 50.13797863702692]
Test Case: 971 | Input/Output: [[-51.39942877422439 51] -0.3994287742243898]
Test Case: 972 | Input/Output: [[55.83179549062635 -14] 41.83179549062635]
Test Case: 973 | Input/Output: [[-6.971757699683451 24] 17.02824230031655]
Test Case: 974 | Input/Output: [[71.53372438354648 64] 135.53372438354648]
Test Case: 975 | Input/Output: [[-34.89594058965572 9] -25.895940589655723]
Test Case: 976 | Input/Output: [[59.08903123723579 33] 92.08903123723579]
Test Case: 977 | Input/Output: [[-75.53979773754884 -75] -150.53979773754884]
Test Case: 978 | Input/Output: [[50.251031818355386 -43] 7.251031818355386]
Test Case: 979 | Input/Output: [[48.40318487034813 -64] -15.596815129651873]
Test Case: 980 | Input/Output: [[20.503620968537376 49] 69.50362096853738]
Test Case: 981 | Input/Output: [[-12.648624896117312 -75] -87.64862489611731]
Test Case: 982 | Input/Output: [[62.13777844762021 -76] -13.862221552379793]
Test Case: 983 | Input/Output: [[39.94526236693653 94] 133.94526236693653]
Test Case: 984 | Input/Output: [[-86.79590784997325 91] 4.204092150026753]
Test Case: 985 | Input/Output: [[-91.91876556999195 91] -0.9187655699919475]
Test Case: 986 | Input/Output: [[-74.13905631952736 -11] -85.13905631952736]
Test Case: 987 | Input/Output: [[-46.84110826911312 -96] -142.84110826911314]
Test Case: 988 | Input/Output: [[-82.08347492564553 -52] -134.08347492564553]
Test Case: 989 | Input/Output: [[-6.903502077887765 13] 6.096497922112235]
Test Case: 990 | Input/Output: [[54.75346692681677 -52] 2.7534669268167704]
Test Case: 991 | Input/Output: [[-30.790401858299916 99] 68.20959814170008]
Test Case: 992 | Input/Output: [[-27.24301230004511 -31] -58.24301230004511]
Test Case: 993 | Input/Output: [[-26.76987312828271 71] 44.23012687171729]
Test Case: 994 | Input/Output: [[-22.74714002823363 66] 43.25285997176637]
Test Case: 995 | Input/Output: [[83.50097705024632 52] 135.50097705024632]
Test Case: 996 | Input/Output: [[-78.1039539197867 22] -56.103953919786704]
Test Case: 997 | Input/Output: [[1.5764029352957323 41] 42.57640293529573]
Test Case: 998 | Input/Output: [[-2.4606995413465143 99] 96.53930045865349]
Test Case: 999 | Input/Output: [[-88.39141053098953 -48] -136.39141053098953]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove vector_boolean_pushall zip_insert_left_fromcode exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup vector_integer_butlast vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse exec_k vector_integer_yank float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times genome_dup return_code_pop char_swap integer_max return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank zip_shove vector_integer_flush vector_integer_subvec vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean integer_min exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add code_stackdepth exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse integer_swap string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.11.1-1-SNAPSHOTHash of last Git commit = 8a64f874173fae27ed1a77827849de0fade43c2b
GitHub link = https://github.com/lspector/Clojush/commit/8a64f874173fae27ed1a77827849de0fade43c2b
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = []
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :tournament
pop-when-tagging = true
population-size = 1000
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
random-screen = false
random-seed = 56 35 117 -82 3 -7 99 67 127 -100 50 -10 98 77 73 7
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Number IO problem report - generation 0
Test total error for best: 62335.008599999965
Test mean error for best: 31.16750
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: 
-79.0

      
Correct output: 33.3348829534  | Program output: 
56.0

       
Correct output: -90.3731037929 | Program output: 
-40.0

      
Correct output: -87.4001767285 | Program output: 
-95.0

      
Correct output: -8.4029481486  | Program output: 
-80.0

      
Correct output: 18.5482005326  | Program output: 
-69.0

      
Correct output: 8.7863159396   | Program output: 
85.0

       
Correct output: 24.7677635354  | Program output: 
31.0

       
Correct output: -8.385649611   | Program output: 
-58.0

      
Correct output: 42.4033443172  | Program output: 
53.0

       
Correct output: -5.7440283823  | Program output: 
-40.0

      
Correct output: 49.9486170067  | Program output: 
33.0

       
Correct output: 8.6872116188   | Program output: 
-49.0

      
Correct output: 28.4119683961  | Program output: 
62.0

       
Correct output: -51.6769002079 | Program output: 
-73.0

      
Correct output: 27.2805425748  | Program output: 
30.0

       
Correct output: -20.7039689338 | Program output: 
9.0

        
Correct output: -180.7091819668 | Program output: 
-87.0

      
Correct output: 122.1928520414 | Program output: 
73.0

       
Correct output: -10.2306918248 | Program output: 
69.0

       
Correct output: -104.493817403 | Program output: 
-15.0

      
Correct output: 6.5890602195   | Program output: 
58.0

       
Correct output: -74.0414611649 | Program output: 
-96.0

      
Correct output: 145.6031300201 | Program output: 
47.0

       
Correct output: 125.9949201107 | Program output: 
49.0

       
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction -62} {:instruction print_newline} {:instruction integer_mult} {:instruction float_max} {:instruction integer_flush} {:instruction integer_dup} {:instruction float_tan} {:instruction integer_dec} {:instruction in2} {:instruction float_frominteger} {:instruction float_sub} {:instruction integer_sub} {:instruction float_mod} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction print_float} {:instruction integer_min} {:instruction 96.0946415854821} {:instruction float_dec} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_mult} {:instruction integer_mult} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction print_newline} {:instruction float_add} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction float_tan} {:instruction float_dup} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_mult} {:instruction float_div} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction float_sin} {:instruction integer_min} {:instruction integer_stackdepth} {:instruction float_max} {:instruction integer_shove} {:instruction integer_min} {:instruction integer_inc} {:instruction float_dup_times} {:instruction float_mod} {:instruction float_tan} {:instruction in2} {:instruction integer_max} {:instruction integer_dec} {:instruction tagged_467} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_shove} {:instruction integer_swap} {:instruction tag_float_696} {:instruction integer_dup} {:instruction float_swap} {:instruction 59} {:instruction float_sub} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction integer_inc} {:instruction float_dup_items} {:instruction tagged_675} {:instruction 79} {:instruction print_newline} {:instruction float_inc} {:instruction integer_pop} {:instruction integer_shove} {:instruction float_add} {:instruction float_flush} {:instruction float_yankdup} {:instruction tagged_955} {:instruction float_cos})
Best program: (-62 print_newline integer_mult float_max integer_flush integer_dup float_tan integer_dec in2 float_frominteger float_sub integer_sub float_mod float_inc integer_stackdepth float_yank print_float integer_min 96.0946415854821 float_dec float_inc float_dup_items float_dup_items integer_mult integer_mult integer_sub integer_fromfloat print_newline float_add float_sub integer_fromfloat float_dec float_rot integer_div float_rot float_tan float_dup float_dec integer_dup_times integer_dup_items integer_mult float_div integer_yankdup float_shove float_frominteger integer_fromfloat float_sin integer_min integer_stackdepth float_max integer_shove integer_min integer_inc float_dup_times float_mod float_tan in2 integer_max integer_dec tagged_467 integer_mult integer_dup_times integer_pop float_frominteger integer_shove integer_swap tag_float_696 integer_dup float_swap 59 float_sub float_dup_times float_stackdepth float_inc integer_inc float_dup_items tagged_675 79 print_newline float_inc integer_pop integer_shove float_add float_flush float_yankdup tagged_955 float_cos)
Errors: [59.8995 11 22.6651 13 50.3731 11 7.5998 12 71.5971 11 87.5482 12 76.2137 10 6.2322 13 49.6144 11 10.5967 12 34.256 11 16.9486 12 57.6872 12 33.588 12 21.3231 12 2.7195 12 29.704 12 93.7092 12 49.1929 12 79.2307 12 89.4938 12 51.4109 9 21.9585 12 98.6031 11 76.9949 11]
Total: 1489.1601999999998
Mean: 29.783203
Genome size: 87
Size: 88
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 18161.768668200002
Median total errors in population: 25334.0
Error averages by case: (714.156443799999 13.88 708.4274185000008 13.466 725.4465288000002 13.06 723.5613546000005 13.846 712.7784677999991 12.924 713.1041948999997 12.371 708.4414344000003 12.512 700.0855084999995 13.263 709.0572263000003 12.299 707.2794277000005 13.264 705.9046377999991 13.083 698.3340997000006 12.482 709.8180108999999 11.848 705.3012334000006 13.152 717.3457478000001 13.88 701.0825920999997 12.969 697.3202998000016 12.963 751.6902525000011 13.899 719.783723600002 13.238 707.7548016999991 12.997 725.5117302000015 13.121 705.3674539999996 12.349 723.1746146000012 14.057 723.6698326999991 13.183 719.9796321000011 13.286)
Error minima by case: (0.843 8 4.9506 8 0.358 1 0.4002 8 0.0705 8 1.0522 1 1.2137 8 2.3352 7 0.0878 7 1.4585 8 0.3333 8 0.8618 2 1.3128 1 1.309 9 0.3231 8 0.1776 7 0.7605 1 4.7092 3 10.292 3 0.8021 2 2.2696 3 0.1743 9 3.3209 9 33.7023 2 5.6581 3)
Average genome size in population (length): 49.169
Average program size in population (points): 50.169
Average percent parens in population: 0.047
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 2
Genome diversity (% unique Plush genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.32
Error (vector) diversity:			 0.348
Behavioral diversity:				 0.368
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 1233064
--- Timings ---
Current time: 1529615878571 milliseconds
Total Time:           3.7 seconds
Initialization:       0.1 seconds,  3.6%
Reproduction:         0.6 seconds, 15.5%
Fitness Testing:      3.0 seconds, 81.0%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Number IO problem report - generation 1
Test total error for best: 62269.008599999965
Test mean error for best: 31.13450
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: 
-79.0
       
Correct output: 33.3348829534  | Program output: 
56.0
        
Correct output: -90.3731037929 | Program output: 
-40.0
       
Correct output: -87.4001767285 | Program output: 
-95.0
       
Correct output: -8.4029481486  | Program output: 
-80.0
       
Correct output: 18.5482005326  | Program output: 
-69.0
       
Correct output: 8.7863159396   | Program output: 
85.0
        
Correct output: 24.7677635354  | Program output: 
31.0
        
Correct output: -8.385649611   | Program output: 
-58.0
       
Correct output: 42.4033443172  | Program output: 
53.0
        
Correct output: -5.7440283823  | Program output: 
-40.0
       
Correct output: 49.9486170067  | Program output: 
33.0
        
Correct output: 8.6872116188   | Program output: 
-49.0
       
Correct output: 28.4119683961  | Program output: 
62.0
        
Correct output: -51.6769002079 | Program output: 
-73.0
       
Correct output: 27.2805425748  | Program output: 
30.0
        
Correct output: -20.7039689338 | Program output: 
9.0
         
Correct output: -180.7091819668 | Program output: 
-87.0
       
Correct output: 122.1928520414 | Program output: 
73.0
        
Correct output: -10.2306918248 | Program output: 
69.0
        
Correct output: -104.493817403 | Program output: 
-15.0
       
Correct output: 6.5890602195   | Program output: 
58.0
        
Correct output: -74.0414611649 | Program output: 
-96.0
       
Correct output: 145.6031300201 | Program output: 
47.0
        
Correct output: 125.9949201107 | Program output: 
49.0
        
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction -62} {:instruction print_newline} {:instruction integer_mult} {:instruction float_max} {:instruction integer_flush} {:instruction integer_dup} {:instruction float_tan} {:instruction integer_dec} {:instruction in2} {:instruction float_frominteger} {:instruction float_sub} {:instruction integer_sub} {:instruction float_mod} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction print_float} {:instruction integer_min} {:instruction 96.0946415854821} {:instruction float_dec} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_mult} {:instruction integer_mult} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction print_newline} {:instruction float_add} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction float_tan} {:instruction float_dup} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_mult} {:instruction float_div} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction float_sin} {:instruction integer_min} {:instruction integer_stackdepth} {:instruction float_max} {:instruction integer_shove} {:instruction integer_min} {:instruction integer_inc} {:instruction float_dup_times} {:instruction float_mod} {:instruction float_tan} {:instruction in2} {:instruction integer_max} {:instruction integer_dec} {:instruction tagged_467} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_shove} {:instruction integer_swap} {:instruction tag_float_696} {:instruction integer_dup} {:instruction float_swap} {:instruction 59} {:instruction float_sub} {:instruction float_dup_times} {:instruction float_stackdepth})
Best program: (-62 print_newline integer_mult float_max integer_flush integer_dup float_tan integer_dec in2 float_frominteger float_sub integer_sub float_mod float_inc integer_stackdepth float_yank print_float integer_min 96.0946415854821 float_dec float_inc float_dup_items float_dup_items integer_mult integer_mult integer_sub integer_fromfloat print_newline float_add float_dup integer_fromfloat float_dec float_rot integer_div float_rot float_tan float_dup float_dec integer_dup_times integer_dup_items integer_mult float_div integer_yankdup float_shove float_frominteger integer_fromfloat float_sin integer_min integer_stackdepth float_max integer_shove integer_min integer_inc float_dup_times float_mod float_tan in2 integer_max integer_dec tagged_467 integer_mult integer_dup_times integer_pop float_frominteger integer_shove integer_swap tag_float_696 integer_dup float_swap 59 float_sub float_dup_times float_stackdepth)
Errors: [59.8995 11 22.6651 13 50.3731 11 7.5998 12 71.5971 11 87.5482 12 76.2137 10 6.2322 12 49.6144 11 10.5967 12 34.256 11 16.9486 12 57.6872 12 33.588 12 21.3231 12 2.7195 12 29.704 12 93.7092 12 49.1929 12 79.2307 12 89.4938 11 51.4109 9 21.9585 12 98.6031 11 76.9949 11]
Total: 1487.1601999999998
Mean: 29.743204
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 6158.847121700001
Median total errors in population: 1618.8111999999999
Error averages by case: (225.79889810000006 12.562 221.62600669999944 12.48 261.2963936999987 11.4 255.9660618000003 12.42 218.56688469999924 11.494 226.56287039999867 10.973 219.86250490000012 11.593 206.92493470000014 12.285 213.3948390000003 11.127 218.0599432000005 12.141 207.40416310000037 11.719 212.81973220000117 11.294 215.34209909999777 10.761 216.9397797000002 12.06 234.90048799999926 12.553 207.35346249999944 11.775 205.46934139999925 11.426 329.43665799999997 12.15 264.6215801999987 11.923 217.36343039999713 11.297 271.88997079999876 11.558 212.86270570000013 11.244 251.4759225999993 12.817 282.57777670000127 11.704 265.6026740999982 11.972)
Error minima by case: (1.1005 8 2.6651 8 0.358 1 1.4002 8 0.0705 8 1.0522 1 0.7863 8 5.1673 7 0.0878 8 1.4585 8 0.3333 7 0.8618 2 0.6872 1 1.4313 9 1.7604 9 1.7195 7 2.704 1 16.5376 3 10.6467 3 0.8021 2 2.2696 3 0.1743 8 3.3209 9 35.6031 2 5.6581 3)
Average genome size in population (length): 58.567
Average program size in population (points): 59.567
Average percent parens in population: 0.022
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.493
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.775
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.775
Total error diversity:				 0.28
Error (vector) diversity:			 0.303
Behavioral diversity:				 0.324
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 2702075
--- Timings ---
Current time: 1529615883431 milliseconds
Total Time:           8.9 seconds
Initialization:       0.1 seconds,  1.5%
Reproduction:         3.4 seconds, 38.8%
Fitness Testing:      4.6 seconds, 51.3%
Report:               0.7 seconds,  8.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Number IO problem report - generation 2
Test total error for best: 62269.008599999965
Test mean error for best: 31.13450
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: 
-79.0
       
Correct output: 33.3348829534  | Program output: 
56.0
        
Correct output: -90.3731037929 | Program output: 
-40.0
       
Correct output: -87.4001767285 | Program output: 
-95.0
       
Correct output: -8.4029481486  | Program output: 
-80.0
       
Correct output: 18.5482005326  | Program output: 
-69.0
       
Correct output: 8.7863159396   | Program output: 
85.0
        
Correct output: 24.7677635354  | Program output: 
31.0
        
Correct output: -8.385649611   | Program output: 
-58.0
       
Correct output: 42.4033443172  | Program output: 
53.0
        
Correct output: -5.7440283823  | Program output: 
-40.0
       
Correct output: 49.9486170067  | Program output: 
33.0
        
Correct output: 8.6872116188   | Program output: 
-49.0
       
Correct output: 28.4119683961  | Program output: 
62.0
        
Correct output: -51.6769002079 | Program output: 
-73.0
       
Correct output: 27.2805425748  | Program output: 
30.0
        
Correct output: -20.7039689338 | Program output: 
9.0
         
Correct output: -180.7091819668 | Program output: 
-87.0
       
Correct output: 122.1928520414 | Program output: 
73.0
        
Correct output: -10.2306918248 | Program output: 
69.0
        
Correct output: -104.493817403 | Program output: 
-15.0
       
Correct output: 6.5890602195   | Program output: 
58.0
        
Correct output: -74.0414611649 | Program output: 
-96.0
       
Correct output: 145.6031300201 | Program output: 
47.0
        
Correct output: 125.9949201107 | Program output: 
49.0
        
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction -62} {:instruction print_newline} {:instruction integer_mult} {:instruction float_max} {:instruction integer_flush} {:instruction integer_dup} {:instruction float_tan} {:instruction integer_dec} {:instruction in2} {:instruction float_frominteger} {:instruction float_sub} {:instruction integer_sub} {:instruction float_mod} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction print_float} {:instruction integer_min} {:instruction 96.0946415854821} {:instruction float_dec} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_mult} {:instruction integer_mult} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction print_newline} {:instruction float_add} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction float_tan} {:instruction float_dup} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_mult} {:instruction float_div} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction float_sin} {:instruction integer_min} {:instruction integer_stackdepth} {:instruction float_max} {:instruction integer_shove} {:instruction integer_min} {:instruction integer_inc} {:instruction float_dup_times} {:instruction float_mod} {:instruction float_tan} {:instruction in2} {:instruction integer_max} {:instruction integer_dec} {:instruction tagged_467} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_shove} {:instruction integer_swap} {:instruction tag_float_696} {:instruction integer_dup} {:instruction float_swap} {:instruction 59} {:instruction float_sub} {:instruction float_dup_times} {:instruction float_stackdepth})
Best program: (-62 print_newline integer_mult float_max integer_flush integer_dup float_tan integer_dec in2 float_frominteger float_sub integer_sub float_mod float_inc integer_stackdepth float_yank print_float integer_min 96.0946415854821 float_dec float_inc float_dup_items float_dup_items integer_mult integer_mult integer_sub integer_fromfloat print_newline float_add float_dup integer_fromfloat float_dec float_rot integer_div float_rot float_tan float_dup float_dec integer_dup_times integer_dup_items integer_mult float_div integer_yankdup float_shove float_frominteger integer_fromfloat float_sin integer_min integer_stackdepth float_max integer_shove integer_min integer_inc float_dup_times float_mod float_tan in2 integer_max integer_dec tagged_467 integer_mult integer_dup_times integer_pop float_frominteger integer_shove integer_swap tag_float_696 integer_dup float_swap 59 float_sub float_dup_times float_stackdepth)
Errors: [59.8995 11 22.6651 13 50.3731 11 7.5998 12 71.5971 11 87.5482 12 76.2137 10 6.2322 12 49.6144 11 10.5967 12 34.256 11 16.9486 12 57.6872 12 33.588 12 21.3231 12 2.7195 12 29.704 12 93.7092 12 49.1929 12 79.2307 12 89.4938 11 51.4109 9 21.9585 12 98.6031 11 76.9949 11]
Total: 1487.1601999999998
Mean: 29.743204
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 5055.175602900014
Median total errors in population: 1507.1601999999998
Error averages by case: (190.0886663999999 12.264 169.26095530000083 11.991 203.44827879999846 12.023 182.36677439999931 12.242 193.42536320000158 10.763 204.7976958999986 11.802 193.82263699999768 11.044 156.51035049999933 11.955 180.49904009999958 10.076 164.8373321999986 11.928 170.64341839999838 11.24 170.56154240000168 12.413 184.70092719999764 11.587 174.29496609999958 11.514 178.31194490000038 12.253 154.51253680000164 11.821 162.04990699999888 12.441 255.95272380000299 12.478 210.46934619999809 12.804 195.1157912999971 11.881 227.95643329999848 12.102 178.1244594999992 11.005 186.27380750000017 12.823 243.63151150000073 12.238 226.08119319999852 12.75)
Error minima by case: (4.2314 9 20.6651 8 41.0 2 4.5998 8 0.0705 7 6.897 1 0.7863 8 4.2322 7 0.0878 8 8.5967 9 0.744 7 11.159 2 0.6872 1 16.7608 9 2.6965 9 0.7195 7 5.8349 1 88.0 3 46.1929 3 1.7573 2 16.0 3 0.2511 8 18.9585 9 45.0 3 47.0 3)
Average genome size in population (length): 50.163
Average program size in population (points): 51.163
Average percent parens in population: 0.029
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.9735
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 46
Genome diversity (% unique Plush genomes):	 0.671
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 46
Syntactic diversity (% unique Push programs):	 0.671
Total error diversity:				 0.16
Error (vector) diversity:			 0.168
Behavioral diversity:				 0.182
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 3962781
--- Timings ---
Current time: 1529615886465 milliseconds
Total Time:          11.9 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         4.8 seconds, 40.3%
Fitness Testing:      5.8 seconds, 48.6%
Report:               1.2 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Number IO problem report - generation 3
Test total error for best: 61742.008599999965
Test mean error for best: 30.87100
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -79.0
        
Correct output: 33.3348829534  | Program output: 56.0
         
Correct output: -90.3731037929 | Program output: -40.0
        
Correct output: -87.4001767285 | Program output: -95.0
        
Correct output: -8.4029481486  | Program output: -80.0
        
Correct output: 18.5482005326  | Program output: -69.0
        
Correct output: 8.7863159396   | Program output: 85.0
         
Correct output: 24.7677635354  | Program output: 31.0
         
Correct output: -8.385649611   | Program output: -58.0
        
Correct output: 42.4033443172  | Program output: 53.0
         
Correct output: -5.7440283823  | Program output: -40.0
        
Correct output: 49.9486170067  | Program output: 33.0
         
Correct output: 8.6872116188   | Program output: -49.0
        
Correct output: 28.4119683961  | Program output: 62.0
         
Correct output: -51.6769002079 | Program output: -73.0
        
Correct output: 27.2805425748  | Program output: 30.0
         
Correct output: -20.7039689338 | Program output: 9.0
          
Correct output: -180.7091819668 | Program output: -87.0
        
Correct output: 122.1928520414 | Program output: 73.0
         
Correct output: -10.2306918248 | Program output: 69.0
         
Correct output: -104.493817403 | Program output: -15.0
        
Correct output: 6.5890602195   | Program output: 58.0
         
Correct output: -74.0414611649 | Program output: -96.0
        
Correct output: 145.6031300201 | Program output: 47.0
         
Correct output: 125.9949201107 | Program output: 49.0
         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_pop} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction integer_dup_items} {:instruction float_sin} {:instruction float_max} {:instruction integer_flush} {:instruction integer_dup} {:instruction float_tan} {:instruction integer_dec} {:instruction in2} {:instruction float_frominteger} {:instruction float_sub} {:instruction integer_sub} {:instruction float_mod} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction print_float} {:instruction integer_min} {:instruction 96.0946415854821} {:instruction float_dec} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_mult} {:instruction integer_mult} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction print_newline} {:instruction float_add} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction float_tan} {:instruction float_dup} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_mult} {:instruction float_div} {:instruction integer_yankdup})
Best program: (float_pop integer_stackdepth float_shove integer_dup_items float_sin float_max integer_flush integer_dup float_tan integer_dec in2 float_frominteger float_sub integer_sub float_mod float_inc integer_stackdepth float_yank print_float integer_min 96.0946415854821 float_dec float_inc float_dup_items float_dup_items integer_mult integer_mult integer_sub integer_fromfloat print_newline float_add float_dup integer_fromfloat float_dec float_rot integer_div float_rot float_tan float_dup float_dec integer_dup_times integer_dup_items integer_mult float_div integer_yankdup)
Errors: [59.8995 10 22.6651 12 50.3731 10 7.5998 11 71.5971 10 87.5482 12 76.2137 10 6.2322 12 49.6144 10 10.5967 11 34.256 10 16.9486 11 57.6872 12 33.588 12 21.3231 11 2.7195 11 29.704 12 93.7092 11 49.1929 12 79.2307 12 89.4938 10 51.4109 9 21.9585 11 98.6031 11 76.9949 11]
Total: 1473.1601999999998
Mean: 29.463203
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 4290.421544700019
Median total errors in population: 1496.1601999999998
Error averages by case: (171.29619699999964 12.157 138.7456253999995 12.138 159.628748199998 12.155 128.0904518999994 12.22 181.14372900000296 10.393 193.43527469999816 12.175 184.60039309999618 10.98 122.08591189999893 12.094 160.05904880000003 9.575 127.51510819999822 12.035 146.8029563999975 11.197 134.21887960000225 12.865 166.43667799999722 11.967 148.3087517000007 11.388 138.6390372999989 12.198 120.06535770000221 12.012 126.54355879999873 12.922 201.35868500000274 12.278 165.51174059999732 12.969 187.36019579999603 12.146 192.66279239999753 12.068 162.80540279999911 10.901 141.03091189999847 12.951 206.39579300000045 12.183 186.85931549999881 12.854)
Error minima by case: (17.1005 9 20.6651 9 8.3731 3 4.5998 10 6.4029 7 10.5482 2 0.7863 9 4.2322 7 6.3856 8 8.5967 9 3.744 9 13.9486 3 0.6872 2 20.412 10 13.6769 9 0.7195 7 8.0 2 6.7092 4 23.8071 3 8.2307 3 16.0 4 1.4109 8 7.9585 10 46.0 3 27.9949 3)
Average genome size in population (length): 42.037
Average program size in population (points): 43.037
Average percent parens in population: 0.036
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.497
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 90
Genome diversity (% unique Plush genomes):	 0.584
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 90
Syntactic diversity (% unique Push programs):	 0.584
Total error diversity:				 0.06
Error (vector) diversity:			 0.061
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 5020944
--- Timings ---
Current time: 1529615889411 milliseconds
Total Time:          14.9 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.3 seconds, 42.3%
Fitness Testing:      6.9 seconds, 46.0%
Report:               1.6 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Number IO problem report - generation 4
Test total error for best: 64968.38179999996
Test mean error for best: 32.48419
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20           
Correct output: 33.3348829534  | Program output: 34            
Correct output: -90.3731037929 | Program output: -8            
Correct output: -87.4001767285 | Program output: -88           
Correct output: -8.4029481486  | Program output: -9            
Correct output: 18.5482005326  | Program output: -52           
Correct output: 8.7863159396   | Program output: 9             
Correct output: 24.7677635354  | Program output: 25            
Correct output: -8.385649611   | Program output: -9            
Correct output: 42.4033443172  | Program output: 43            
Correct output: -5.7440283823  | Program output: -6            
Correct output: 49.9486170067  | Program output: 17            
Correct output: 8.6872116188   | Program output: -42           
Correct output: 28.4119683961  | Program output: 29            
Correct output: -51.6769002079 | Program output: -52           
Correct output: 27.2805425748  | Program output: 28            
Correct output: -20.7039689338 | Program output: 4             
Correct output: -180.7091819668 | Program output: -4            
Correct output: 122.1928520414 | Program output: 50            
Correct output: -10.2306918248 | Program output: 58            
Correct output: -104.493817403 | Program output: -8            
Correct output: 6.5890602195   | Program output: 7             
Correct output: -74.0414611649 | Program output: -75           
Correct output: 145.6031300201 | Program output: 7             
Correct output: 125.9949201107 | Program output: 29            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction integer_swap} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction float_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_add} {:instruction in2} {:instruction integer_add} {:instruction integer_mod} {:instruction float_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_657} {:instruction float_tan} {:instruction integer_mod} {:instruction float_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_657} {:instruction float_tan} {:instruction float_pop} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction float_min} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc integer_swap integer_dup_items integer_yank float_max in1 float_add float_yank float_dup_times float_yankdup integer_dup_times float_sub float_rot integer_sub integer_sub float_add in2 integer_add integer_mod float_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_657 float_tan integer_mod float_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_657 float_tan float_pop integer_dup_times float_dup float_pop 8 print_float integer_shove float_dec print_integer integer_min float_min integer_div integer_div integer_fromfloat float_swap integer_inc in1 float_min float_dec integer_pop float_frominteger integer_min)
Errors: [0.8995 12 0.6651 11 82.3731 13 0.5998 11 0.5971 11 70.5482 11 0.2137 11 0.2322 11 0.6144 10 0.5967 11 0.256 12 32.9486 11 50.6872 11 0.588 11 0.3231 11 0.7195 11 24.704 14 176.7092 14 72.1929 12 68.2307 13 96.4938 12 0.4109 12 0.9585 12 138.6031 14 96.9949 12]
Total: 1212.1601999999998
Mean: 24.243204
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 4632.276458000019
Median total errors in population: 1495.1601999999998
Error averages by case: (184.6475542999996 11.992 150.9875938000005 12.253 175.366302299998 11.976 141.4443638999989 12.202 194.50323560000342 10.662 207.98893699999795 12.305 196.62822329999605 10.729 136.46568909999894 12.105 175.37778489999917 10.125 140.82921809999755 11.907 161.93637079999706 11.177 146.81643870000215 12.526 182.08861599999628 11.958 160.30013819999976 11.828 152.08015569999927 12.181 133.50107230000268 11.873 152.2270246999987 12.636 214.60968440000295 12.265 176.0433307999971 12.715 198.9339971999956 12.171 208.0242249999975 11.756 175.05690409999818 10.349 153.40244349999878 12.529 217.51310320000067 12.016 198.99005109999837 12.278)
Error minima by case: (0.8995 10 0.6651 10 20.849 2 0.5998 10 0.5971 8 10.5482 2 0.2137 9 0.2322 8 0.6144 9 0.5967 9 0.256 8 14.0514 2 0.6872 2 0.588 9 0.3231 9 0.7195 10 7.0 1 88.0 3 31.1929 3 9.5605 2 16.0 3 0.4109 9 0.9585 11 45.0 2 34.9949 3)
Average genome size in population (length): 50.654
Average program size in population (points): 51.654
Average percent parens in population: 0.027
Minimum age in population: 4.0
Maximum age in population: 7.625
Average age in population: 5.925625
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 44
Genome diversity (% unique Plush genomes):	 0.652
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 44
Syntactic diversity (% unique Push programs):	 0.652
Total error diversity:				 0.059
Error (vector) diversity:			 0.063
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 6290372
--- Timings ---
Current time: 1529615892735 milliseconds
Total Time:          18.2 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         7.8 seconds, 43.1%
Fitness Testing:      8.2 seconds, 45.2%
Report:               2.0 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Number IO problem report - generation 5
Test total error for best: 64968.38179999996
Test mean error for best: 32.48419
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20           
Correct output: 33.3348829534  | Program output: 34            
Correct output: -90.3731037929 | Program output: -8            
Correct output: -87.4001767285 | Program output: -88           
Correct output: -8.4029481486  | Program output: -9            
Correct output: 18.5482005326  | Program output: -52           
Correct output: 8.7863159396   | Program output: 9             
Correct output: 24.7677635354  | Program output: 25            
Correct output: -8.385649611   | Program output: -9            
Correct output: 42.4033443172  | Program output: 43            
Correct output: -5.7440283823  | Program output: -6            
Correct output: 49.9486170067  | Program output: 17            
Correct output: 8.6872116188   | Program output: -42           
Correct output: 28.4119683961  | Program output: 29            
Correct output: -51.6769002079 | Program output: -52           
Correct output: 27.2805425748  | Program output: 28            
Correct output: -20.7039689338 | Program output: 4             
Correct output: -180.7091819668 | Program output: -4            
Correct output: 122.1928520414 | Program output: 50            
Correct output: -10.2306918248 | Program output: 58            
Correct output: -104.493817403 | Program output: -8            
Correct output: 6.5890602195   | Program output: 7             
Correct output: -74.0414611649 | Program output: -75           
Correct output: 145.6031300201 | Program output: 7             
Correct output: 125.9949201107 | Program output: 29            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction integer_swap} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction float_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_add} {:instruction in2} {:instruction integer_add} {:instruction integer_mod} {:instruction float_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_657} {:instruction float_tan} {:instruction integer_mod} {:instruction float_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_657} {:instruction float_tan} {:instruction float_pop} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction float_min} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc integer_swap integer_dup_items integer_yank float_max in1 float_add float_yank float_dup_times float_yankdup integer_dup_times float_sub float_rot integer_sub integer_sub float_add in2 integer_add integer_mod float_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_657 float_tan integer_mod float_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_657 float_tan float_pop integer_dup_times float_dup float_pop 8 print_float integer_shove float_dec print_integer integer_min float_min integer_div integer_div integer_fromfloat float_swap integer_inc in1 float_min float_dec integer_pop float_frominteger integer_min)
Errors: [0.8995 12 0.6651 11 82.3731 13 0.5998 11 0.5971 11 70.5482 11 0.2137 11 0.2322 11 0.6144 10 0.5967 11 0.256 12 32.9486 11 50.6872 11 0.588 11 0.3231 11 0.7195 11 24.704 14 176.7092 14 72.1929 12 68.2307 13 96.4938 12 0.4109 12 0.9585 12 138.6031 14 96.9949 12]
Total: 1212.1601999999998
Mean: 24.243204
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 4505.292583800019
Median total errors in population: 1487.1601999999998
Error averages by case: (178.65935149999967 11.423 145.76355180000007 12.619 172.41611579999807 11.438 137.42462389999935 12.056 188.15981340000263 10.987 201.7221106999985 12.118 189.85534469999627 10.521 131.37150299999905 12.134 169.67684459999978 10.738 135.76363049999816 11.795 156.62782089999763 11.294 141.71646860000206 11.951 176.44282179999715 11.979 154.59216190000024 12.108 147.42278669999934 12.053 128.47653230000213 11.741 150.45517289999873 12.178 212.53172190000262 12.154 171.47369769999756 12.069 192.43413999999646 12.114 205.13757339999765 11.178 168.82565239999903 9.655 148.83926919999888 12.099 213.53299590000032 11.374 194.62987829999895 11.565)
Error minima by case: (0.8995 9 0.6651 10 20.849 3 0.5998 9 0.5971 8 1.0 2 0.2137 9 0.2322 10 0.6144 8 0.5967 10 0.256 8 2.9486 3 1.0 2 0.588 9 0.3231 9 0.7195 8 1.0 2 88.0 4 48.1929 3 1.0 3 16.0 4 0.4109 8 0.9585 9 45.0 3 47.0 3)
Average genome size in population (length): 60.94
Average program size in population (points): 61.94
Average percent parens in population: 0.017
Minimum age in population: 5.625
Maximum age in population: 9.4375
Average age in population: 7.4206875
Median age in population: 7.4375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.716
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.716
Total error diversity:				 0.072
Error (vector) diversity:			 0.076
Behavioral diversity:				 0.082
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 7814938
--- Timings ---
Current time: 1529615896093 milliseconds
Total Time:          21.6 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         9.3 seconds, 43.1%
Fitness Testing:      9.7 seconds, 44.9%
Report:               2.5 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Number IO problem report - generation 6
Test total error for best: 64968.38179999996
Test mean error for best: 32.48419
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20           
Correct output: 33.3348829534  | Program output: 34            
Correct output: -90.3731037929 | Program output: -8            
Correct output: -87.4001767285 | Program output: -88           
Correct output: -8.4029481486  | Program output: -9            
Correct output: 18.5482005326  | Program output: -52           
Correct output: 8.7863159396   | Program output: 9             
Correct output: 24.7677635354  | Program output: 25            
Correct output: -8.385649611   | Program output: -9            
Correct output: 42.4033443172  | Program output: 43            
Correct output: -5.7440283823  | Program output: -6            
Correct output: 49.9486170067  | Program output: 17            
Correct output: 8.6872116188   | Program output: -42           
Correct output: 28.4119683961  | Program output: 29            
Correct output: -51.6769002079 | Program output: -52           
Correct output: 27.2805425748  | Program output: 28            
Correct output: -20.7039689338 | Program output: 4             
Correct output: -180.7091819668 | Program output: -4            
Correct output: 122.1928520414 | Program output: 50            
Correct output: -10.2306918248 | Program output: 58            
Correct output: -104.493817403 | Program output: -8            
Correct output: 6.5890602195   | Program output: 7             
Correct output: -74.0414611649 | Program output: -75           
Correct output: 145.6031300201 | Program output: 7             
Correct output: 125.9949201107 | Program output: 29            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction integer_swap} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction float_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_add} {:instruction in2} {:instruction integer_add} {:instruction integer_mod} {:instruction float_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_657} {:instruction float_tan} {:instruction integer_mod} {:instruction float_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_657} {:instruction float_tan} {:instruction float_pop} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction float_tan} {:instruction in2} {:instruction integer_max} {:instruction integer_dec} {:instruction tagged_467} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_shove} {:instruction integer_swap} {:instruction tag_float_696} {:instruction integer_dup} {:instruction float_swap} {:instruction 59} {:instruction float_sub} {:instruction float_dup_times} {:instruction float_stackdepth})
Best program: (float_inc integer_swap integer_dup_items integer_yank float_max in1 float_add float_yank float_dup_times float_yankdup integer_dup_times float_sub float_rot integer_sub integer_sub float_add in2 integer_add integer_mod float_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_657 float_tan integer_mod float_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_657 float_tan float_pop integer_dup_times float_dup float_pop 8 print_float integer_shove float_dec print_integer integer_min float_min integer_div float_tan in2 integer_max integer_dec tagged_467 integer_mult integer_dup_times integer_pop float_frominteger integer_shove integer_swap tag_float_696 integer_dup float_swap 59 float_sub float_dup_times float_stackdepth)
Errors: [0.8995 12 0.6651 11 82.3731 13 0.5998 11 0.5971 11 70.5482 11 0.2137 11 0.2322 11 0.6144 10 0.5967 11 0.256 12 32.9486 11 50.6872 11 0.588 11 0.3231 11 0.7195 11 24.704 14 176.7092 14 72.1929 12 68.2307 13 96.4938 12 0.4109 12 0.9585 12 138.6031 14 96.9949 12]
Total: 1212.1601999999998
Mean: 24.243204
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3926.49360240002
Median total errors in population: 1473.1601999999998
Error averages by case: (153.55156869999965 10.804 123.35070999999878 12.394 149.52669689999797 10.836 112.01547729999945 11.591 163.1292478000018 10.621 178.74352149999893 12.038 167.6221857999961 10.307 108.976754899999 12.084 144.81285680000127 10.475 113.27579389999819 11.511 131.46520909999745 10.756 119.68142490000221 11.473 152.56404019999846 11.939 132.33719020000186 12.066 121.90316089999779 11.621 106.03823010000215 11.464 129.2875259999987 12.175 191.47153980000255 11.707 149.59362609999712 12.151 172.12182569999666 12.125 182.8973384999975 10.725 146.85726260000035 9.486 123.01467149999718 11.633 193.74704540000022 11.351 173.84069779999948 11.335)
Error minima by case: (0.8995 8 0.6651 10 12.6269 3 0.5998 10 0.5971 8 10.5482 2 0.2137 9 0.2322 10 0.6144 8 0.5967 10 0.256 10 15.9486 3 0.6872 2 0.588 10 0.3231 10 0.7195 9 6.9043 2 30.7092 4 25.0982 4 5.1488 3 16.0 4 0.4109 7 0.9585 9 45.0 3 28.9003 4)
Average genome size in population (length): 58.214
Average program size in population (points): 59.214
Average percent parens in population: 0.018
Minimum age in population: 6.75
Maximum age in population: 11.15625
Average age in population: 8.939
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 32
Genome diversity (% unique Plush genomes):	 0.743
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.743
Total error diversity:				 0.057
Error (vector) diversity:			 0.063
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 9273163
--- Timings ---
Current time: 1529615899262 milliseconds
Total Time:          24.8 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        10.8 seconds, 43.4%
Fitness Testing:     11.1 seconds, 44.6%
Report:               2.8 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Number IO problem report - generation 7
Test total error for best: 64968.38179999996
Test mean error for best: 32.48419
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20           
Correct output: 33.3348829534  | Program output: 34            
Correct output: -90.3731037929 | Program output: -8            
Correct output: -87.4001767285 | Program output: -88           
Correct output: -8.4029481486  | Program output: -9            
Correct output: 18.5482005326  | Program output: -52           
Correct output: 8.7863159396   | Program output: 9             
Correct output: 24.7677635354  | Program output: 25            
Correct output: -8.385649611   | Program output: -9            
Correct output: 42.4033443172  | Program output: 43            
Correct output: -5.7440283823  | Program output: -6            
Correct output: 49.9486170067  | Program output: 17            
Correct output: 8.6872116188   | Program output: -42           
Correct output: 28.4119683961  | Program output: 29            
Correct output: -51.6769002079 | Program output: -52           
Correct output: 27.2805425748  | Program output: 28            
Correct output: -20.7039689338 | Program output: 4             
Correct output: -180.7091819668 | Program output: -4            
Correct output: 122.1928520414 | Program output: 50            
Correct output: -10.2306918248 | Program output: 58            
Correct output: -104.493817403 | Program output: -8            
Correct output: 6.5890602195   | Program output: 7             
Correct output: -74.0414611649 | Program output: -75           
Correct output: 145.6031300201 | Program output: 7             
Correct output: 125.9949201107 | Program output: 29            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction integer_swap} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction float_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_add} {:instruction in2} {:instruction integer_add} {:instruction integer_mod} {:instruction float_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_657} {:instruction float_tan} {:instruction integer_mod} {:instruction float_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_657} {:instruction float_tan} {:instruction float_pop} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction float_min} {:instruction float_dec} {:instruction integer_pop} {:instruction float_min} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc integer_swap integer_dup_items integer_yank float_max in1 float_add float_yank float_dup_times float_yankdup integer_dup_times float_sub float_rot integer_sub integer_sub float_add in2 integer_add integer_mod float_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_657 float_tan integer_mod float_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_657 float_tan float_pop integer_dup_times float_dup float_pop 8 print_float integer_shove float_dec print_integer integer_min float_min integer_div integer_div integer_fromfloat float_swap integer_inc in1 float_min float_dec integer_pop float_min float_dec integer_pop float_frominteger integer_min)
Errors: [0.8995 12 0.6651 11 82.3731 13 0.5998 11 0.5971 11 70.5482 11 0.2137 11 0.2322 11 0.6144 10 0.5967 11 0.256 12 32.9486 11 50.6872 11 0.588 11 0.3231 11 0.7195 11 24.704 14 176.7092 14 72.1929 12 68.2307 13 96.4938 12 0.4109 12 0.9585 12 138.6031 14 96.9949 12]
Total: 1212.1601999999998
Mean: 24.243204
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3446.4634733000175
Median total errors in population: 1473.1601999999998
Error averages by case: (129.30444239999972 10.732 101.87903849999908 11.94 137.48856399999818 10.829 97.95753999999997 11.296 136.96538779999997 10.43 159.15139380000014 11.699 138.36373799999686 10.371 89.09893079999924 11.91 122.48543850000196 10.101 93.55494879999917 11.195 109.82935689999833 10.653 102.82295190000201 11.1 133.26863809999998 11.623 109.92006640000189 11.852 103.51385369999886 11.323 86.75767430000063 11.174 108.12345569999884 12.276 187.44847990000213 11.683 134.44967959999744 12.075 149.96967119999886 12.114 167.2440344999977 10.64 121.49856020000149 9.772 105.61944049999803 11.506 180.3468729999995 11.637 158.10231480000047 11.368)
Error minima by case: (0.1005 9 0.3349 10 39.3731 2 0.4002 10 0.4029 8 1.5482 1 0.2137 8 0.2322 10 0.3856 8 0.4033 9 0.256 9 14.9486 2 0.6872 1 0.412 9 0.3231 10 0.2805 10 0.296 1 88.0 3 12.8071 3 0.7693 2 16.0 3 0.4109 7 0.0415 10 4.6878 3 8.6878 3)
Average genome size in population (length): 56.659
Average program size in population (points): 57.659
Average percent parens in population: 0.019
Minimum age in population: 8.3125
Maximum age in population: 12.3125
Average age in population: 10.48021875
Median age in population: 10.484375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 39
Genome diversity (% unique Plush genomes):	 0.707
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.707
Total error diversity:				 0.073
Error (vector) diversity:			 0.076
Behavioral diversity:				 0.081
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 10701701
--- Timings ---
Current time: 1529615902521 milliseconds
Total Time:          28.0 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.2 seconds, 43.8%
Fitness Testing:     12.4 seconds, 44.2%
Report:               3.2 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Number IO problem report - generation 8
Test total error for best: 11478.010800000002
Test mean error for best: 5.73901
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20           
Correct output: 33.3348829534  | Program output: 34            
Correct output: -90.3731037929 | Program output: -90           
Correct output: -87.4001767285 | Program output: -88           
Correct output: -8.4029481486  | Program output: -9            
Correct output: 18.5482005326  | Program output: 18            
Correct output: 8.7863159396   | Program output: 9             
Correct output: 24.7677635354  | Program output: 25            
Correct output: -8.385649611   | Program output: -9            
Correct output: 42.4033443172  | Program output: 43            
Correct output: -5.7440283823  | Program output: -6            
Correct output: 49.9486170067  | Program output: 49            
Correct output: 8.6872116188   | Program output: 8             
Correct output: 28.4119683961  | Program output: 29            
Correct output: -51.6769002079 | Program output: -52           
Correct output: 27.2805425748  | Program output: 28            
Correct output: -20.7039689338 | Program output: -20           
Correct output: -180.7091819668 | Program output: -180          
Correct output: 122.1928520414 | Program output: 122           
Correct output: -10.2306918248 | Program output: -10           
Correct output: -104.493817403 | Program output: -104          
Correct output: 6.5890602195   | Program output: 7             
Correct output: -74.0414611649 | Program output: -75           
Correct output: 145.6031300201 | Program output: 145           
Correct output: 125.9949201107 | Program output: 125           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction integer_swap} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction float_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction float_add} {:instruction in2} {:instruction integer_add} {:instruction integer_mod} {:instruction float_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_657} {:instruction float_tan} {:instruction integer_mod} {:instruction float_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_657} {:instruction float_tan} {:instruction float_pop} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction float_max} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction float_min} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc integer_swap integer_dup_items integer_yank float_max in1 float_add float_yank float_dup_times float_yankdup integer_dup_times float_sub float_rot integer_sub integer_fromfloat float_add in2 integer_add integer_mod float_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_657 float_tan integer_mod float_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_657 float_tan float_pop integer_dup_times float_dup float_pop 8 print_float integer_shove float_dec print_integer float_pop float_min integer_div integer_div float_max float_swap integer_inc in1 float_min float_dec integer_pop float_frominteger integer_min)
Errors: [0.8995 12 0.6651 11 0.3731 11 0.5998 11 0.5971 11 0.5482 11 0.2137 11 0.2322 11 0.6144 10 0.5967 11 0.256 12 0.9486 11 0.6872 11 0.588 11 0.3231 11 0.7195 11 0.704 11 0.7092 11 0.1929 11 0.2307 11 0.4938 10 0.4109 12 0.9585 12 0.6031 11 0.9949 11]
Total: 291.16020000000003
Mean: 5.823204
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 3062.3457087000047
Median total errors in population: 1242.2244
Error averages by case: (97.1785248999998 11.716 79.16840189999927 11.573 142.70538129999815 12.238 93.95926890000005 11.444 99.04559979999961 10.957 141.9226104000009 11.307 90.6828145999988 10.811 72.0530428999994 11.581 94.83835440000072 10.136 76.27843199999998 11.308 87.38458779999947 11.544 94.71982520000181 11.201 119.67698880000029 11.2 82.34246930000141 11.45 89.46310479999957 11.515 71.6028663999998 11.287 90.55308029999907 13.08 214.90957410000306 13.021 130.78910769999788 12.18 127.4997351000001 12.549 161.19168139999763 11.613 85.33165960000115 11.03 93.12073479999891 12.082 182.48741439999952 12.972 151.69644790000063 11.949)
Error minima by case: (0.1005 8 0.3349 9 0.3731 3 0.4002 10 0.4029 8 0.5482 2 0.2137 8 0.2322 10 0.0548 7 0.4033 10 0.256 9 0.9486 2 0.6872 2 0.412 7 0.3231 10 0.2805 3 0.296 2 0.7092 3 0.1929 3 0.2307 3 0.4938 4 0.4109 7 0.0415 10 0.6031 3 0.9949 4)
Average genome size in population (length): 57.064
Average program size in population (points): 58.064
Average percent parens in population: 0.018
Minimum age in population: 9.5
Maximum age in population: 13.890625
Average age in population: 11.979421875
Median age in population: 12.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 92
Genome diversity (% unique Plush genomes):	 0.697
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 92
Syntactic diversity (% unique Push programs):	 0.697
Total error diversity:				 0.101
Error (vector) diversity:			 0.106
Behavioral diversity:				 0.113
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 12166877
--- Timings ---
Current time: 1529615905608 milliseconds
Total Time:          31.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.7 seconds, 43.9%
Fitness Testing:     13.7 seconds, 43.9%
Report:               3.7 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Number IO problem report - generation 9
Test total error for best: 11478.010800000002
Test mean error for best: 5.73901
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20           
Correct output: 33.3348829534  | Program output: 34            
Correct output: -90.3731037929 | Program output: -90           
Correct output: -87.4001767285 | Program output: -88           
Correct output: -8.4029481486  | Program output: -9            
Correct output: 18.5482005326  | Program output: 18            
Correct output: 8.7863159396   | Program output: 9             
Correct output: 24.7677635354  | Program output: 25            
Correct output: -8.385649611   | Program output: -9            
Correct output: 42.4033443172  | Program output: 43            
Correct output: -5.7440283823  | Program output: -6            
Correct output: 49.9486170067  | Program output: 49            
Correct output: 8.6872116188   | Program output: 8             
Correct output: 28.4119683961  | Program output: 29            
Correct output: -51.6769002079 | Program output: -52           
Correct output: 27.2805425748  | Program output: 28            
Correct output: -20.7039689338 | Program output: -20           
Correct output: -180.7091819668 | Program output: -180          
Correct output: 122.1928520414 | Program output: 122           
Correct output: -10.2306918248 | Program output: -10           
Correct output: -104.493817403 | Program output: -104          
Correct output: 6.5890602195   | Program output: 7             
Correct output: -74.0414611649 | Program output: -75           
Correct output: 145.6031300201 | Program output: 145           
Correct output: 125.9949201107 | Program output: 125           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction integer_swap} {:instruction in1} {:instruction float_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction float_add} {:instruction in2} {:instruction integer_add} {:instruction integer_mod} {:instruction float_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_657} {:instruction float_tan} {:instruction integer_mod} {:instruction float_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_657} {:instruction float_tan} {:instruction float_pop} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction float_max} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction float_min} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc integer_swap in1 float_add float_yank float_dup_times float_yankdup integer_dup_times float_sub float_rot integer_sub integer_fromfloat float_add in2 integer_add integer_mod float_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_657 float_tan integer_mod float_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_657 float_tan float_pop integer_dup_times float_dup float_pop 8 print_float integer_shove float_dec print_integer float_pop float_min integer_div integer_div float_max float_swap integer_inc in1 float_min float_dec integer_pop float_frominteger integer_min)
Errors: [0.8995 12 0.6651 11 0.3731 11 0.5998 11 0.5971 11 0.5482 11 0.2137 11 0.2322 11 0.6144 10 0.5967 11 0.256 12 0.9486 11 0.6872 11 0.588 11 0.3231 11 0.7195 11 0.704 11 0.7092 11 0.1929 11 0.2307 11 0.4938 10 0.4109 12 0.9585 12 0.6031 11 0.9949 11]
Total: 291.16020000000003
Mean: 5.823204
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2017.4300997000094
Median total errors in population: 1212.1601999999998
Error averages by case: (42.91932349999976 12.126 35.76205739999948 11.232 109.57737309999821 12.856 47.44423860000067 11.355 42.18651969999972 11.121 98.01714020000067 11.106 37.169596200000136 10.992 32.27850239999964 11.252 40.15470059999955 10.142 35.41202639999951 11.268 37.25965580000033 11.951 60.403480000001295 11.126 79.18259920000023 11.024 36.628119999999996 11.199 43.603853300000495 11.407 32.99845999999964 11.235 47.5626159999998 13.567 195.54578360000275 13.761 99.82800799999853 12.079 92.58665520000005 12.814 122.82336579999769 12.02 33.6877869999998 11.759 47.371499500000326 12.279 152.23279999999798 13.705 119.25993820000178 12.158)
Error minima by case: (0.1005 10 0.3349 9 0.3731 2 0.4002 9 0.4029 8 0.5482 1 0.2137 8 0.2322 10 0.3856 8 0.4033 9 0.256 9 0.9486 2 0.6872 1 0.412 9 0.3231 10 0.2805 9 0.296 1 0.7092 3 0.1929 3 0.2307 2 0.4938 3 0.4109 8 0.0415 10 0.6031 3 0.9949 3)
Average genome size in population (length): 57.354
Average program size in population (points): 58.354
Average percent parens in population: 0.017
Minimum age in population: 11.0
Maximum age in population: 15.35546875
Average age in population: 13.3451796875
Median age in population: 13.388671875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 91
Genome diversity (% unique Plush genomes):	 0.663
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 91
Syntactic diversity (% unique Push programs):	 0.663
Total error diversity:				 0.066
Error (vector) diversity:			 0.067
Behavioral diversity:				 0.071
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 13653202
--- Timings ---
Current time: 1529615908619 milliseconds
Total Time:          34.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.0 seconds, 44.1%
Fitness Testing:     15.0 seconds, 43.8%
Report:               4.0 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Number IO problem report - generation 10
Test total error for best: 11478.010800000002
Test mean error for best: 5.73901
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20           
Correct output: 33.3348829534  | Program output: 34            
Correct output: -90.3731037929 | Program output: -90           
Correct output: -87.4001767285 | Program output: -88           
Correct output: -8.4029481486  | Program output: -9            
Correct output: 18.5482005326  | Program output: 18            
Correct output: 8.7863159396   | Program output: 9             
Correct output: 24.7677635354  | Program output: 25            
Correct output: -8.385649611   | Program output: -9            
Correct output: 42.4033443172  | Program output: 43            
Correct output: -5.7440283823  | Program output: -6            
Correct output: 49.9486170067  | Program output: 49            
Correct output: 8.6872116188   | Program output: 8             
Correct output: 28.4119683961  | Program output: 29            
Correct output: -51.6769002079 | Program output: -52           
Correct output: 27.2805425748  | Program output: 28            
Correct output: -20.7039689338 | Program output: -20           
Correct output: -180.7091819668 | Program output: -180          
Correct output: 122.1928520414 | Program output: 122           
Correct output: -10.2306918248 | Program output: -10           
Correct output: -104.493817403 | Program output: -104          
Correct output: 6.5890602195   | Program output: 7             
Correct output: -74.0414611649 | Program output: -75           
Correct output: 145.6031300201 | Program output: 145           
Correct output: 125.9949201107 | Program output: 125           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction integer_swap} {:instruction float_dup_times} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction float_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction float_add} {:instruction in2} {:instruction integer_add} {:instruction integer_mod} {:instruction float_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_657} {:instruction float_tan} {:instruction integer_mod} {:instruction float_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_657} {:instruction float_tan} {:instruction float_pop} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction float_max} {:instruction float_swap} {:instruction float_min} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc integer_swap float_dup_times integer_yank float_max in1 float_add float_yank float_dup_times float_yankdup integer_dup_times float_sub float_rot integer_sub integer_fromfloat float_add in2 integer_add integer_mod float_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_657 float_tan integer_mod float_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_657 float_tan float_pop integer_dup_times float_dup float_pop 8 print_float integer_shove float_dec print_integer float_pop float_min integer_div integer_div float_max float_swap float_min float_dec integer_pop float_frominteger integer_min)
Errors: [0.8995 12 0.6651 11 0.3731 11 0.5998 11 0.5971 11 0.5482 11 0.2137 11 0.2322 11 0.6144 10 0.5967 11 0.256 12 0.9486 11 0.6872 11 0.588 11 0.3231 11 0.7195 11 0.704 11 0.7092 11 0.1929 11 0.2307 11 0.4938 10 0.4109 12 0.9585 12 0.6031 11 0.9949 11]
Total: 291.16020000000003
Mean: 5.823204
Genome size: 54
Size: 55
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2109.949363100007
Median total errors in population: 1212.1601999999998
Error averages by case: (46.95957699999979 12.073 43.73435099999937 11.209 109.88483049999833 12.725 52.321162400000674 11.352 46.040322499999746 11.121 97.37199240000072 11.159 44.719834800000164 10.973 40.202352499999584 11.258 44.01126389999956 10.143 43.644402699999866 11.279 41.585615900000384 11.871 63.60137740000134 11.158 79.81359040000025 11.11 44.0874159000004 11.255 48.24017040000048 11.422 39.6567294999996 11.289 55.095131999999566 13.374 190.11251520000226 13.615 101.99660379999845 12.048 96.19324690000008 12.737 121.87209899999773 11.888 41.71226150000012 11.697 52.206078000000325 12.215 150.9131009999982 13.524 119.29133650000176 12.187)
Error minima by case: (0.1005 10 0.3349 9 0.3731 3 0.4002 9 0.4029 9 0.4518 2 0.2137 9 0.2322 10 0.3856 9 0.4033 10 0.256 9 0.0514 3 0.3128 2 0.412 9 0.3231 10 0.2805 9 0.296 2 0.7092 4 0.1929 4 0.2307 3 0.4938 4 0.4109 9 0.0415 10 0.3969 3 0.0051 4)
Average genome size in population (length): 57.235
Average program size in population (points): 58.235
Average percent parens in population: 0.017
Minimum age in population: 12.0
Maximum age in population: 16.60546875
Average age in population: 14.7525625
Median age in population: 14.7958984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 43
Genome diversity (% unique Plush genomes):	 0.744
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.744
Total error diversity:				 0.063
Error (vector) diversity:			 0.064
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 15137127
--- Timings ---
Current time: 1529615911756 milliseconds
Total Time:          37.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.6 seconds, 44.4%
Fitness Testing:     16.2 seconds, 43.5%
Report:               4.4 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Number IO problem report - generation 11
Test total error for best: 11478.010800000002
Test mean error for best: 5.73901
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20           
Correct output: 33.3348829534  | Program output: 34            
Correct output: -90.3731037929 | Program output: -90           
Correct output: -87.4001767285 | Program output: -88           
Correct output: -8.4029481486  | Program output: -9            
Correct output: 18.5482005326  | Program output: 18            
Correct output: 8.7863159396   | Program output: 9             
Correct output: 24.7677635354  | Program output: 25            
Correct output: -8.385649611   | Program output: -9            
Correct output: 42.4033443172  | Program output: 43            
Correct output: -5.7440283823  | Program output: -6            
Correct output: 49.9486170067  | Program output: 49            
Correct output: 8.6872116188   | Program output: 8             
Correct output: 28.4119683961  | Program output: 29            
Correct output: -51.6769002079 | Program output: -52           
Correct output: 27.2805425748  | Program output: 28            
Correct output: -20.7039689338 | Program output: -20           
Correct output: -180.7091819668 | Program output: -180          
Correct output: 122.1928520414 | Program output: 122           
Correct output: -10.2306918248 | Program output: -10           
Correct output: -104.493817403 | Program output: -104          
Correct output: 6.5890602195   | Program output: 7             
Correct output: -74.0414611649 | Program output: -75           
Correct output: 145.6031300201 | Program output: 145           
Correct output: 125.9949201107 | Program output: 125           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction integer_swap} {:instruction integer_dup_items} {:instruction integer_max} {:instruction float_max} {:instruction in1} {:instruction float_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_add} {:instruction in2} {:instruction integer_add} {:instruction integer_mod} {:instruction float_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_fromfloat} {:instruction float_add} {:instruction in2} {:instruction integer_add} {:instruction integer_mod} {:instruction float_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_657} {:instruction float_tan} {:instruction integer_mod} {:instruction float_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_657} {:instruction float_tan} {:instruction float_pop} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction float_max} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction float_min} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc integer_swap integer_dup_items integer_max float_max in1 float_add float_yank float_dup_times float_yankdup integer_dup_times float_sub float_rot integer_sub integer_sub float_add in2 integer_add integer_mod float_add tag_integer_667 float_yank integer_fromfloat float_add in2 integer_add integer_mod float_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_657 float_tan integer_mod float_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_657 float_tan float_pop integer_dup_times float_dup float_pop 8 print_float integer_shove float_dec print_integer float_pop float_min integer_div integer_div float_max float_swap integer_inc in1 float_min float_dec integer_pop float_frominteger integer_min)
Errors: [0.8995 12 0.6651 11 0.3731 11 0.5998 11 0.5971 11 0.5482 11 0.2137 11 0.2322 11 0.6144 10 0.5967 11 0.256 12 0.9486 11 0.6872 11 0.588 11 0.3231 11 0.7195 11 0.704 11 0.7092 11 0.1929 11 0.2307 11 0.4938 10 0.4109 12 0.9585 12 0.6031 11 0.9949 11]
Total: 291.16020000000003
Mean: 5.823204
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2041.6015950000028
Median total errors in population: 1211.6634
Error averages by case: (53.45973799999986 11.98 51.41840369999931 11.21 95.32363819999837 12.091 60.12851420000061 11.321 52.20527819999981 11.122 85.59645660000017 11.181 50.44788400000017 10.989 47.069940199999515 11.275 50.509924799999645 10.151 51.91480420000001 11.255 48.37902390000031 11.784 63.62091800000116 11.175 71.45966480000025 11.196 52.46073780000065 11.329 55.99848680000042 11.395 46.675123999999585 11.342 57.38882179999956 12.474 149.51777759999965 12.769 90.80480239999892 11.798 84.10631210000007 12.204 102.6204173999978 11.232 46.987102800000464 11.623 60.301355000000235 12.086 121.71301129999742 12.584 101.93445720000098 11.993)
Error minima by case: (0.1005 10 0.3349 9 0.3731 2 0.4002 9 0.4029 9 0.4518 3 0.2137 10 0.2322 10 0.3856 8 0.4033 9 0.256 9 0.0514 4 0.3128 2 0.412 9 0.3231 10 0.2005 8 0.296 2 0.2908 4 0.1929 4 0.2307 4 0.4938 4 0.4109 9 0.0415 10 0.3969 3 0.0051 4)
Average genome size in population (length): 57.762
Average program size in population (points): 58.762
Average percent parens in population: 0.017
Minimum age in population: 13.5625
Maximum age in population: 17.9873046875
Average age in population: 16.0696455078125
Median age in population: 16.10009765625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 77
Genome diversity (% unique Plush genomes):	 0.712
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 77
Syntactic diversity (% unique Push programs):	 0.712
Total error diversity:				 0.088
Error (vector) diversity:			 0.09
Behavioral diversity:				 0.091
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 16635216
--- Timings ---
Current time: 1529615914871 milliseconds
Total Time:          40.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.0 seconds, 44.6%
Fitness Testing:     17.5 seconds, 43.3%
Report:               4.7 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Number IO problem report - generation 12
Test total error for best: 11478.010800000002
Test mean error for best: 5.73901
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20           
Correct output: 33.3348829534  | Program output: 34            
Correct output: -90.3731037929 | Program output: -90           
Correct output: -87.4001767285 | Program output: -88           
Correct output: -8.4029481486  | Program output: -9            
Correct output: 18.5482005326  | Program output: 18            
Correct output: 8.7863159396   | Program output: 9             
Correct output: 24.7677635354  | Program output: 25            
Correct output: -8.385649611   | Program output: -9            
Correct output: 42.4033443172  | Program output: 43            
Correct output: -5.7440283823  | Program output: -6            
Correct output: 49.9486170067  | Program output: 49            
Correct output: 8.6872116188   | Program output: 8             
Correct output: 28.4119683961  | Program output: 29            
Correct output: -51.6769002079 | Program output: -52           
Correct output: 27.2805425748  | Program output: 28            
Correct output: -20.7039689338 | Program output: -20           
Correct output: -180.7091819668 | Program output: -180          
Correct output: 122.1928520414 | Program output: 122           
Correct output: -10.2306918248 | Program output: -10           
Correct output: -104.493817403 | Program output: -104          
Correct output: 6.5890602195   | Program output: 7             
Correct output: -74.0414611649 | Program output: -75           
Correct output: 145.6031300201 | Program output: 145           
Correct output: 125.9949201107 | Program output: 125           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction integer_swap} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction float_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction float_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yankdup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_min} {:instruction float_add} {:instruction in2} {:instruction integer_add} {:instruction integer_mod} {:instruction float_add} {:instruction tag_integer_667} {:instruction float_swap} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_657} {:instruction float_tan} {:instruction integer_mod} {:instruction float_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_657} {:instruction float_tan} {:instruction float_pop} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 10} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction print_integer} {:instruction integer_div} {:instruction float_tan} {:instruction in2} {:instruction integer_max} {:instruction integer_dec} {:instruction tagged_467} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_shove} {:instruction integer_swap} {:instruction tag_float_696} {:instruction integer_dup} {:instruction float_swap} {:instruction 59} {:instruction float_sub} {:instruction float_dup_times} {:instruction float_stackdepth})
Best program: (float_inc integer_swap integer_dup_items integer_yank float_max in1 float_add integer_fromfloat float_dup_times float_yankdup integer_dup_times float_sub float_yank float_dup_times float_yankdup integer_dup_times float_sub float_rot integer_sub float_min float_add in2 integer_add integer_mod float_add tag_integer_667 float_swap integer_dec integer_fromfloat tagged_657 float_tan integer_mod float_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_657 float_tan float_pop integer_dup_times float_dup float_pop 10 print_float integer_shove float_dec print_integer integer_div float_tan in2 integer_max integer_dec tagged_467 integer_mult integer_dup_times integer_pop float_frominteger integer_shove integer_swap tag_float_696 integer_dup float_swap 59 float_sub float_dup_times float_stackdepth)
Errors: [0.8995 12 0.6651 11 0.3731 11 0.5998 11 0.5971 11 0.5482 11 0.2137 11 0.2322 11 0.6144 10 0.5967 11 0.256 12 0.9486 11 0.6872 11 0.588 11 0.3231 11 0.7195 11 0.704 11 0.7092 11 0.1929 11 0.2307 11 0.4938 10 0.4109 12 0.9585 12 0.6031 11 0.9949 11]
Total: 291.16020000000003
Mean: 5.823204
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 1800.3994749000015
Median total errors in population: 291.16020000000003
Error averages by case: (59.21837149999976 12.128 54.986922999999216 11.239 68.63231629999895 11.41 63.98906840000105 11.387 58.56788889999963 11.139 63.57237579999921 11.159 53.86404210000016 11.011 50.39943159999937 11.279 56.35728959999941 10.171 54.3877976000001 11.292 54.12710400000051 11.935 57.35719040000113 11.161 55.75284240000022 11.049 56.42322800000085 11.219 59.99567670000064 11.443 50.23813599999958 11.255 50.19627199999977 11.442 85.55927759999872 11.62 68.52480880000022 11.368 60.620035400000056 11.415 71.99568739999849 10.588 50.78231290000048 11.77 63.94413450000037 12.277 76.13309079999974 11.523 71.0281731999996 11.466)
Error minima by case: (0.1005 10 0.3349 9 0.3731 5 0.4002 9 0.4029 9 0.4518 3 0.2137 10 0.2322 10 0.3856 9 0.4033 9 0.256 9 0.0514 4 0.3128 2 0.412 9 0.3231 10 0.2805 9 0.296 2 0.2908 6 0.1929 5 0.2307 4 0.4938 6 0.4109 9 0.0415 10 0.3969 5 0.0051 5)
Average genome size in population (length): 57.412
Average program size in population (points): 58.412
Average percent parens in population: 0.017
Minimum age in population: 14.6708984375
Maximum age in population: 19.66748046875
Average age in population: 17.47300830078125
Median age in population: 17.53857421875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 113
Genome diversity (% unique Plush genomes):	 0.702
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 113
Syntactic diversity (% unique Push programs):	 0.702
Total error diversity:				 0.069
Error (vector) diversity:			 0.071
Behavioral diversity:				 0.073
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 18122841
--- Timings ---
Current time: 1529615918167 milliseconds
Total Time:          43.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        19.4 seconds, 44.4%
Fitness Testing:     19.0 seconds, 43.5%
Report:               5.1 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Number IO problem report - generation 13
Test total error for best: 9490.77400000001
Test mean error for best: 4.74539
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20.08        
Correct output: 33.3348829534  | Program output: 34.08         
Correct output: -90.3731037929 | Program output: -90.08        
Correct output: -87.4001767285 | Program output: -88.08        
Correct output: -8.4029481486  | Program output: -9.08         
Correct output: 18.5482005326  | Program output: 18.08         
Correct output: 8.7863159396   | Program output: 9.08          
Correct output: 24.7677635354  | Program output: 25.08         
Correct output: -8.385649611   | Program output: -9.08         
Correct output: 42.4033443172  | Program output: 43.08         
Correct output: -5.7440283823  | Program output: -6.08         
Correct output: 49.9486170067  | Program output: 49.08         
Correct output: 8.6872116188   | Program output: 8.08          
Correct output: 28.4119683961  | Program output: 29.08         
Correct output: -51.6769002079 | Program output: -52.08        
Correct output: 27.2805425748  | Program output: 28.08         
Correct output: -20.7039689338 | Program output: -20.08        
Correct output: -180.7091819668 | Program output: -180.08       
Correct output: 122.1928520414 | Program output: 122.08        
Correct output: -10.2306918248 | Program output: -10.08        
Correct output: -104.493817403 | Program output: -104.08       
Correct output: 6.5890602195   | Program output: 7.08          
Correct output: -74.0414611649 | Program output: -75.08        
Correct output: 145.6031300201 | Program output: 145.08        
Correct output: 125.9949201107 | Program output: 125.08        
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction integer_swap} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction float_add} {:instruction float_yank} {:instruction float_mult} {:instruction float_yankdup} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_add} {:instruction in2} {:instruction integer_add} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_add} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_tan} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction float_min} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc integer_swap integer_dup_items integer_yank float_max in1 float_add float_yank float_mult float_yankdup integer_dup_times float_dup_items float_rot integer_sub integer_sub float_add in2 integer_add integer_inc float_add tag_integer_667 float_yank integer_dec integer_fromfloat float_sub float_rot integer_sub integer_sub float_add in2 integer_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_752 float_tan float_frominteger integer_dup_times float_dup float_pop 8 print_float integer_shove float_dec print_integer integer_min float_min integer_div integer_div integer_fromfloat float_swap integer_inc in1 float_min float_dec integer_pop float_frominteger integer_min)
Errors: [0.9795 10 0.7451 10 0.2931 9 0.6798 9 0.6771 9 0.4682 9 0.2937 10 0.3122 11 0.6944 9 0.6767 10 0.336 9 0.8686 9 0.6072 9 0.668 10 0.4031 10 0.7995 9 0.624 8 0.6292 8 0.1129 9 0.1507 8 0.4138 8 0.4909 10 1.0385 10 0.5231 9 0.9149 9]
Total: 245.4002
Mean: 4.908004
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 1475.9881449000025
Median total errors in population: 291.16020000000003
Error averages by case: (45.06982049999972 12.175 44.5856029999991 11.206 53.416098299999106 11.367 51.484336200001025 11.342 42.84599189999955 11.153 47.8956971999997 11.148 42.79036320000016 10.985 41.30858599999931 11.247 41.92406229999926 10.168 44.828670999999694 11.247 39.512167900000584 11.985 45.71466000000064 11.152 41.44116800000024 11.023 44.761496000000506 11.181 47.06038890000077 11.412 41.762753999999546 11.216 40.9601280000003 11.348 67.04961839999875 11.501 56.85345900000024 11.298 44.591478200000054 11.319 56.265364799998416 10.503 40.318156400000035 11.806 51.5982415000004 12.274 60.70453480000023 11.431 58.373299399999475 11.385)
Error minima by case: (0.1005 10 0.3349 9 0.2931 3 0.4002 9 0.4029 9 0.4518 2 0.2137 10 0.2322 10 0.3856 9 0.4033 9 0.256 9 0.0514 2 0.3128 2 0.412 10 0.3231 10 0.2805 9 0.296 3 0.2908 3 0.1129 2 0.1507 3 0.4138 3 0.4109 10 0.0415 10 0.3969 2 0.0051 2)
Average genome size in population (length): 57.361
Average program size in population (points): 58.361
Average percent parens in population: 0.017
Minimum age in population: 16.4951171875
Maximum age in population: 20.870849609375
Average age in population: 18.89758251953125
Median age in population: 18.928955078125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 63
Genome diversity (% unique Plush genomes):	 0.746
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.746
Total error diversity:				 0.057
Error (vector) diversity:			 0.058
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 19608766
--- Timings ---
Current time: 1529615921305 milliseconds
Total Time:          46.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.9 seconds, 44.5%
Fitness Testing:     20.3 seconds, 43.3%
Report:               5.6 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Number IO problem report - generation 14
Test total error for best: 9490.77400000001
Test mean error for best: 4.74539
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20.08        
Correct output: 33.3348829534  | Program output: 34.08         
Correct output: -90.3731037929 | Program output: -90.08        
Correct output: -87.4001767285 | Program output: -88.08        
Correct output: -8.4029481486  | Program output: -9.08         
Correct output: 18.5482005326  | Program output: 18.08         
Correct output: 8.7863159396   | Program output: 9.08          
Correct output: 24.7677635354  | Program output: 25.08         
Correct output: -8.385649611   | Program output: -9.08         
Correct output: 42.4033443172  | Program output: 43.08         
Correct output: -5.7440283823  | Program output: -6.08         
Correct output: 49.9486170067  | Program output: 49.08         
Correct output: 8.6872116188   | Program output: 8.08          
Correct output: 28.4119683961  | Program output: 29.08         
Correct output: -51.6769002079 | Program output: -52.08        
Correct output: 27.2805425748  | Program output: 28.08         
Correct output: -20.7039689338 | Program output: -20.08        
Correct output: -180.7091819668 | Program output: -180.08       
Correct output: 122.1928520414 | Program output: 122.08        
Correct output: -10.2306918248 | Program output: -10.08        
Correct output: -104.493817403 | Program output: -104.08       
Correct output: 6.5890602195   | Program output: 7.08          
Correct output: -74.0414611649 | Program output: -75.08        
Correct output: 145.6031300201 | Program output: 145.08        
Correct output: 125.9949201107 | Program output: 125.08        
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction integer_swap} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction float_add} {:instruction float_yank} {:instruction float_mult} {:instruction float_yankdup} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_add} {:instruction in2} {:instruction integer_add} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_add} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_tan} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction float_min} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc integer_swap integer_dup_items integer_yank float_max in1 float_add float_yank float_mult float_yankdup integer_dup_times float_dup_items float_rot integer_sub integer_sub float_add in2 integer_add integer_inc float_add tag_integer_667 float_yank integer_dec integer_fromfloat float_sub float_rot integer_sub integer_sub float_add in2 integer_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_752 float_tan float_frominteger integer_dup_times float_dup float_pop 8 print_float integer_shove float_dec print_integer integer_min float_min integer_div integer_div integer_fromfloat float_swap integer_inc in1 float_min float_dec integer_pop float_frominteger integer_min)
Errors: [0.9795 10 0.7451 10 0.2931 9 0.6798 9 0.6771 9 0.4682 9 0.2937 10 0.3122 11 0.6944 9 0.6767 10 0.336 9 0.8686 9 0.6072 9 0.668 10 0.4031 10 0.7995 9 0.624 8 0.6292 8 0.1129 9 0.1507 8 0.4138 8 0.4909 10 1.0385 10 0.5231 9 0.9149 9]
Total: 245.4002
Mean: 4.908004
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 1525.1226475000024
Median total errors in population: 291.16020000000003
Error averages by case: (48.71099309999975 12.168 45.66023159999918 11.217 58.56223559999879 11.345 55.44191860000111 11.357 47.5674503999996 11.141 46.914269399999895 11.11 44.51364840000016 10.976 41.43363139999935 11.257 45.25634809999934 10.169 45.185079799999606 11.26 42.527395500000566 11.947 44.28826180000041 11.127 40.16041460000022 10.989 45.87748560000033 11.18 50.39296830000069 11.434 41.67512999999957 11.202 43.59464060000036 11.316 73.27704319999874 11.487 55.54172440000027 11.28 50.914197100000045 11.287 61.654658599998385 10.503 41.31308320000003 11.767 55.29848800000039 12.295 59.682853100000216 11.419 57.06749709999937 11.378)
Error minima by case: (0.1005 10 0.3349 9 0.2931 3 0.4002 9 0.4029 9 0.4518 2 0.2137 9 0.2322 10 0.3856 9 0.4033 8 0.256 9 0.0514 3 0.3128 2 0.412 9 0.3231 9 0.2805 8 0.296 2 0.2908 4 0.1129 3 0.1507 3 0.4138 4 0.4109 10 0.0415 10 0.3969 3 0.0051 3)
Average genome size in population (length): 57.2
Average program size in population (points): 58.2
Average percent parens in population: 0.017
Minimum age in population: 17.68408203125
Maximum age in population: 22.515380859375
Average age in population: 20.36925244140625
Median age in population: 20.41461181640625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 32
Genome diversity (% unique Plush genomes):	 0.799
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.799
Total error diversity:				 0.08
Error (vector) diversity:			 0.082
Behavioral diversity:				 0.083
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 21090091
--- Timings ---
Current time: 1529615924298 milliseconds
Total Time:          49.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.2 seconds, 44.6%
Fitness Testing:     21.6 seconds, 43.3%
Report:               5.9 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Number IO problem report - generation 15
Test total error for best: 9490.77400000001
Test mean error for best: 4.74539
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20.08        
Correct output: 33.3348829534  | Program output: 34.08         
Correct output: -90.3731037929 | Program output: -90.08        
Correct output: -87.4001767285 | Program output: -88.08        
Correct output: -8.4029481486  | Program output: -9.08         
Correct output: 18.5482005326  | Program output: 18.08         
Correct output: 8.7863159396   | Program output: 9.08          
Correct output: 24.7677635354  | Program output: 25.08         
Correct output: -8.385649611   | Program output: -9.08         
Correct output: 42.4033443172  | Program output: 43.08         
Correct output: -5.7440283823  | Program output: -6.08         
Correct output: 49.9486170067  | Program output: 49.08         
Correct output: 8.6872116188   | Program output: 8.08          
Correct output: 28.4119683961  | Program output: 29.08         
Correct output: -51.6769002079 | Program output: -52.08        
Correct output: 27.2805425748  | Program output: 28.08         
Correct output: -20.7039689338 | Program output: -20.08        
Correct output: -180.7091819668 | Program output: -180.08       
Correct output: 122.1928520414 | Program output: 122.08        
Correct output: -10.2306918248 | Program output: -10.08        
Correct output: -104.493817403 | Program output: -104.08       
Correct output: 6.5890602195   | Program output: 7.08          
Correct output: -74.0414611649 | Program output: -75.08        
Correct output: 145.6031300201 | Program output: 145.08        
Correct output: 125.9949201107 | Program output: 125.08        
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction integer_swap} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction float_add} {:instruction float_yank} {:instruction float_mult} {:instruction float_yankdup} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_add} {:instruction in2} {:instruction integer_add} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_add} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_tan} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction float_min} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc integer_swap integer_dup_items integer_yank float_max in1 float_add float_yank float_mult float_yankdup integer_dup_times float_dup_items float_rot integer_sub integer_sub float_add in2 integer_add integer_inc float_add tag_integer_667 float_yank integer_dec integer_fromfloat float_sub float_rot integer_sub integer_sub float_add in2 integer_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_752 float_tan float_frominteger integer_dup_times float_dup float_pop 8 print_float integer_shove float_dec print_integer integer_min float_min integer_div integer_div integer_fromfloat float_swap integer_inc in1 float_min float_dec integer_pop float_frominteger integer_min)
Errors: [0.9795 10 0.7451 10 0.2931 9 0.6798 9 0.6771 9 0.4682 9 0.2937 10 0.3122 11 0.6944 9 0.6767 10 0.336 9 0.8686 9 0.6072 9 0.668 10 0.4031 10 0.7995 9 0.624 8 0.6292 8 0.1129 9 0.1507 8 0.4138 8 0.4909 10 1.0385 10 0.5231 9 0.9149 9]
Total: 245.4002
Mean: 4.908004
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 1218.0225846000028
Median total errors in population: 291.16020000000003
Error averages by case: (39.46306349999985 12.059 32.2966822999995 11.181 44.98132029999965 11.254 41.908999800000394 11.253 38.71976429999974 11.029 38.367100400000204 11.065 33.840048700000104 10.953 27.920957399999775 11.233 36.34278649999956 10.087 31.258273399999457 11.216 33.47653790000038 11.856 30.87351419999981 11.075 33.44453820000015 10.954 32.866507999999904 11.128 39.37217980000044 11.341 28.171534499999684 11.139 31.72487200000053 11.221 57.88988879999918 11.35 39.30257069999961 11.215 38.03055640000004 11.179 48.53751939999913 10.407 30.732383699999776 11.723 42.61845900000031 12.199 44.06562580000019 11.32 41.09689960000003 11.283)
Error minima by case: (0.1005 9 0.3349 9 0.2931 4 0.4002 9 0.4029 9 0.4518 3 0.2137 9 0.2322 10 0.3856 8 0.4033 8 0.256 9 0.0514 3 0.3128 3 0.412 9 0.3231 10 0.2805 8 0.296 2 0.2908 4 0.1129 3 0.1507 4 0.4138 4 0.4109 9 0.0415 9 0.3969 3 0.0051 3)
Average genome size in population (length): 56.808
Average program size in population (points): 57.808
Average percent parens in population: 0.017
Minimum age in population: 19.46484375
Maximum age in population: 23.85186767578125
Average age in population: 21.84293304443359
Median age in population: 21.85906982421875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.818
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.818
Total error diversity:				 0.068
Error (vector) diversity:			 0.07
Behavioral diversity:				 0.073
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 22560591
--- Timings ---
Current time: 1529615927540 milliseconds
Total Time:          53.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.5 seconds, 44.5%
Fitness Testing:     23.0 seconds, 43.4%
Report:               6.3 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Number IO problem report - generation 16
Test total error for best: 9141.395000000002
Test mean error for best: 4.57070
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20.019       
Correct output: 33.3348829534  | Program output: 34.019        
Correct output: -90.3731037929 | Program output: -90.019       
Correct output: -87.4001767285 | Program output: -88.019       
Correct output: -8.4029481486  | Program output: -9.019        
Correct output: 18.5482005326  | Program output: 18.019        
Correct output: 8.7863159396   | Program output: 9.019         
Correct output: 24.7677635354  | Program output: 25.019        
Correct output: -8.385649611   | Program output: -9.019        
Correct output: 42.4033443172  | Program output: 43.019        
Correct output: -5.7440283823  | Program output: -6.019        
Correct output: 49.9486170067  | Program output: 49.019        
Correct output: 8.6872116188   | Program output: 8.019         
Correct output: 28.4119683961  | Program output: 29.019        
Correct output: -51.6769002079 | Program output: -52.019       
Correct output: 27.2805425748  | Program output: 28.019        
Correct output: -20.7039689338 | Program output: -20.019       
Correct output: -180.7091819668 | Program output: -180.019      
Correct output: 122.1928520414 | Program output: 122.019       
Correct output: -10.2306918248 | Program output: -10.019       
Correct output: -104.493817403 | Program output: -104.019      
Correct output: 6.5890602195   | Program output: 7.019         
Correct output: -74.0414611649 | Program output: -75.019       
Correct output: 145.6031300201 | Program output: 145.019       
Correct output: 125.9949201107 | Program output: 125.019       
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction integer_swap} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction float_add} {:instruction float_yank} {:instruction float_mult} {:instruction float_yankdup} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_add} {:instruction in2} {:instruction integer_add} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_sub} {:instruction 19.42355631150687} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_tan} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction float_min} {:instruction float_dec})
Best program: (float_inc integer_swap integer_dup_items integer_yank float_max in1 float_add float_yank float_mult float_yankdup integer_dup_times float_dup_items float_rot integer_sub integer_sub float_add in2 integer_add integer_inc float_add tag_integer_667 float_yank integer_dec integer_fromfloat float_sub float_rot integer_sub integer_sub 19.42355631150687 in2 integer_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_752 float_tan float_frominteger integer_dup_times float_dup float_pop 8 print_float integer_shove float_dec print_integer integer_min float_min integer_div integer_div integer_fromfloat float_swap integer_inc in1 float_min float_dec)
Errors: [0.9185 10 0.6841 10 0.3541 8 0.6188 9 0.6161 9 0.5292 9 0.2327 9 0.2512 11 0.6334 9 0.6157 9 0.275 10 0.9296 9 0.6682 9 0.607 9 0.3421 9 0.7385 10 0.685 8 0.6902 7 0.1739 8 0.2117 8 0.4748 8 0.4299 8 0.9775 8 0.5841 8 0.9759 8]
Total: 234.2172
Mean: 4.684344
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 1687.241939900003
Median total errors in population: 291.16020000000003
Error averages by case: (54.479508399999915 11.801 55.72131809999939 11.065 63.3313819999993 11.012 57.559852100000896 11.012 54.99963659999981 10.81 56.14530989999944 10.872 55.11062530000022 10.839 51.31982569999953 11.241 52.58373599999953 9.986 55.314402600000555 11.085 50.29467770000056 11.496 50.34600800000097 10.851 48.13237040000008 10.743 56.54076390000071 11.047 54.53218880000071 11.21 51.18688159999971 10.883 53.038457299999756 10.875 74.27070579999932 10.973 58.37465430000041 10.98 59.21458919999992 10.85 66.00384129999892 10.161 52.244800000000495 11.476 57.835834500000466 11.923 63.338826300000036 11.106 59.92874409999963 11.096)
Error minima by case: (0.1005 9 0.3349 9 0.2851 1 0.4002 9 0.4029 8 0.4518 2 0.2137 9 0.2322 10 0.3856 8 0.4033 8 0.256 8 0.0514 2 0.3128 2 0.412 9 0.3231 9 0.2805 8 0.296 1 0.2908 3 0.1049 3 0.1427 2 0.4058 3 0.4109 8 0.0415 8 0.3969 3 0.0051 3)
Average genome size in population (length): 56.956
Average program size in population (points): 57.956
Average percent parens in population: 0.017
Minimum age in population: 20.87255859375
Maximum age in population: 25.27078247070312
Average age in population: 23.35710140991211
Median age in population: 23.41624450683594
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 44
Genome diversity (% unique Plush genomes):	 0.818
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 44
Syntactic diversity (% unique Push programs):	 0.818
Total error diversity:				 0.087
Error (vector) diversity:			 0.087
Behavioral diversity:				 0.089
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 24030166
--- Timings ---
Current time: 1529615930603 milliseconds
Total Time:          56.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        24.9 seconds, 44.4%
Fitness Testing:     24.3 seconds, 43.2%
Report:               6.8 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Number IO problem report - generation 17
Test total error for best: 9141.395000000002
Test mean error for best: 4.57070
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20.019       
Correct output: 33.3348829534  | Program output: 34.019        
Correct output: -90.3731037929 | Program output: -90.019       
Correct output: -87.4001767285 | Program output: -88.019       
Correct output: -8.4029481486  | Program output: -9.019        
Correct output: 18.5482005326  | Program output: 18.019        
Correct output: 8.7863159396   | Program output: 9.019         
Correct output: 24.7677635354  | Program output: 25.019        
Correct output: -8.385649611   | Program output: -9.019        
Correct output: 42.4033443172  | Program output: 43.019        
Correct output: -5.7440283823  | Program output: -6.019        
Correct output: 49.9486170067  | Program output: 49.019        
Correct output: 8.6872116188   | Program output: 8.019         
Correct output: 28.4119683961  | Program output: 29.019        
Correct output: -51.6769002079 | Program output: -52.019       
Correct output: 27.2805425748  | Program output: 28.019        
Correct output: -20.7039689338 | Program output: -20.019       
Correct output: -180.7091819668 | Program output: -180.019      
Correct output: 122.1928520414 | Program output: 122.019       
Correct output: -10.2306918248 | Program output: -10.019       
Correct output: -104.493817403 | Program output: -104.019      
Correct output: 6.5890602195   | Program output: 7.019         
Correct output: -74.0414611649 | Program output: -75.019       
Correct output: 145.6031300201 | Program output: 145.019       
Correct output: 125.9949201107 | Program output: 125.019       
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction integer_swap} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction float_add} {:instruction float_yank} {:instruction float_mult} {:instruction float_yankdup} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_add} {:instruction in2} {:instruction integer_add} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_sub} {:instruction 19.42355631150687} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_tan} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction float_min} {:instruction float_dec})
Best program: (float_inc integer_swap integer_dup_items integer_yank float_max in1 float_add float_yank float_mult float_yankdup integer_dup_times float_dup_items float_rot integer_sub integer_sub float_add in2 integer_add integer_inc float_add tag_integer_667 float_yank integer_dec integer_fromfloat float_sub float_rot integer_sub integer_sub 19.42355631150687 in2 integer_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_752 float_tan float_frominteger integer_dup_times float_dup float_pop 8 print_float integer_shove float_dec print_integer integer_min float_min integer_div integer_div integer_fromfloat float_swap integer_inc in1 float_min float_dec)
Errors: [0.9185 10 0.6841 10 0.3541 8 0.6188 9 0.6161 9 0.5292 9 0.2327 9 0.2512 11 0.6334 9 0.6157 9 0.275 10 0.9296 9 0.6682 9 0.607 9 0.3421 9 0.7385 10 0.685 8 0.6902 7 0.1739 8 0.2117 8 0.4748 8 0.4299 8 0.9775 8 0.5841 8 0.9759 8]
Total: 234.2172
Mean: 4.684344
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 1706.9929581000026
Median total errors in population: 291.16020000000003
Error averages by case: (59.37789070000029 10.971 56.355144799999785 10.685 74.53772309999981 10.18 57.614243400000284 10.18 58.699398700000216 10.005 50.14203909999996 10.111 59.51429920000022 10.483 52.18766589999994 11.223 56.37996979999993 9.612 54.262485300000584 10.606 53.20873370000047 10.333 40.09993990000055 10.041 45.604153499999775 10.007 57.59010180000014 10.687 56.640473500000645 10.748 51.18971860000001 10.028 65.11141260000024 9.666 85.31287239999955 9.732 47.567208900000054 10.173 72.20369489999963 9.679 76.66035399999942 9.314 55.80499309999996 10.658 60.68554720000045 11.085 53.65677899999967 10.233 49.87911500000029 10.267)
Error minima by case: (0.1005 9 0.2549 8 0.2851 2 0.4002 8 0.4029 8 0.4518 1 0.2137 8 0.2322 9 0.3856 8 0.3233 8 0.256 8 0.0514 3 0.3128 1 0.332 8 0.3231 9 0.2005 8 0.296 2 0.2908 3 0.1049 3 0.1427 3 0.4058 3 0.4109 8 0.0415 8 0.3969 3 0.0051 3)
Average genome size in population (length): 58.049
Average program size in population (points): 59.049
Average percent parens in population: 0.017
Minimum age in population: 21.87255859375
Maximum age in population: 26.76931762695312
Average age in population: 24.87520449829102
Median age in population: 24.87614440917969
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 87
Genome diversity (% unique Plush genomes):	 0.744
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 87
Syntactic diversity (% unique Push programs):	 0.744
Total error diversity:				 0.11
Error (vector) diversity:			 0.113
Behavioral diversity:				 0.116
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 25516303
--- Timings ---
Current time: 1529615933735 milliseconds
Total Time:          59.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.3 seconds, 44.5%
Fitness Testing:     25.6 seconds, 43.2%
Report:               7.2 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Number IO problem report - generation 18
Test total error for best: 9141.395000000002
Test mean error for best: 4.57070
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20.019       
Correct output: 33.3348829534  | Program output: 34.019        
Correct output: -90.3731037929 | Program output: -90.019       
Correct output: -87.4001767285 | Program output: -88.019       
Correct output: -8.4029481486  | Program output: -9.019        
Correct output: 18.5482005326  | Program output: 18.019        
Correct output: 8.7863159396   | Program output: 9.019         
Correct output: 24.7677635354  | Program output: 25.019        
Correct output: -8.385649611   | Program output: -9.019        
Correct output: 42.4033443172  | Program output: 43.019        
Correct output: -5.7440283823  | Program output: -6.019        
Correct output: 49.9486170067  | Program output: 49.019        
Correct output: 8.6872116188   | Program output: 8.019         
Correct output: 28.4119683961  | Program output: 29.019        
Correct output: -51.6769002079 | Program output: -52.019       
Correct output: 27.2805425748  | Program output: 28.019        
Correct output: -20.7039689338 | Program output: -20.019       
Correct output: -180.7091819668 | Program output: -180.019      
Correct output: 122.1928520414 | Program output: 122.019       
Correct output: -10.2306918248 | Program output: -10.019       
Correct output: -104.493817403 | Program output: -104.019      
Correct output: 6.5890602195   | Program output: 7.019         
Correct output: -74.0414611649 | Program output: -75.019       
Correct output: 145.6031300201 | Program output: 145.019       
Correct output: 125.9949201107 | Program output: 125.019       
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction integer_swap} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction float_add} {:instruction float_yank} {:instruction float_mult} {:instruction float_yankdup} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_add} {:instruction in2} {:instruction integer_add} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_sub} {:instruction 19.42355631150687} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_tan} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_inc})
Best program: (float_inc integer_swap integer_dup_items integer_yank float_max in1 float_add float_yank float_mult float_yankdup integer_dup_times float_dup_items float_rot integer_sub integer_sub float_add in2 integer_add integer_inc float_add tag_integer_667 float_yank integer_dec integer_fromfloat float_sub float_rot integer_sub integer_sub 19.42355631150687 in2 integer_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_752 float_tan float_frominteger integer_dup_times float_dup float_pop 8 print_float integer_shove float_dec print_integer integer_min float_min integer_div integer_div integer_fromfloat float_swap integer_inc)
Errors: [0.9185 10 0.6841 10 0.3541 8 0.6188 9 0.6161 9 0.5292 9 0.2327 9 0.2512 11 0.6334 9 0.6157 9 0.275 10 0.9296 9 0.6682 9 0.607 9 0.3421 9 0.7385 10 0.685 8 0.6902 7 0.1739 8 0.2117 8 0.4748 8 0.4299 8 0.9775 8 0.5841 8 0.9759 8]
Total: 234.2172
Mean: 4.684344
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 1660.0273834000006
Median total errors in population: 245.4002
Error averages by case: (51.810106600000616 10.251 60.069935800000074 10.284 77.82249270000017 9.525 52.6379336999999 9.45 53.567817300000456 9.294 42.72457760000016 9.524 66.64704640000025 10.119 56.72321150000019 11.122 49.92902880000023 9.234 58.968968400001025 10.105 46.9195209000003 9.409 30.361032200000295 9.411 36.75551769999969 9.399 65.1056908999995 10.33 50.06288560000064 10.331 56.7785513000004 9.287 74.03419860000055 8.736 87.09435629999996 8.704 36.73618690000002 9.489 80.36131299999933 8.745 82.78251349999965 8.634 62.88653699999917 9.983 53.684570300000395 10.365 44.460250999999396 9.52 40.240139400000366 9.612)
Error minima by case: (0.0205 8 0.2549 8 0.2831 2 0.3202 8 0.3229 8 0.4582 2 0.2137 9 0.2322 9 0.3056 8 0.3233 8 0.256 8 0.8586 3 0.5972 2 0.332 9 0.3231 9 0.2005 8 0.376 2 0.3708 4 0.1029 3 0.1407 3 0.4038 4 0.4109 7 0.0385 8 0.5043 3 0.9049 3)
Average genome size in population (length): 59.179
Average program size in population (points): 60.179
Average percent parens in population: 0.017
Minimum age in population: 23.552978515625
Maximum age in population: 28.32476806640625
Average age in population: 26.36873456573486
Median age in population: 26.3743896484375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 89
Genome diversity (% unique Plush genomes):	 0.738
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 89
Syntactic diversity (% unique Push programs):	 0.738
Total error diversity:				 0.112
Error (vector) diversity:			 0.113
Behavioral diversity:				 0.114
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 27024041
--- Timings ---
Current time: 1529615936918 milliseconds
Total Time:          62.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        27.7 seconds, 44.3%
Fitness Testing:     27.1 seconds, 43.3%
Report:               7.6 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Number IO problem report - generation 19
Test total error for best: 8880.679799999994
Test mean error for best: 4.44034
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20.0462      
Correct output: 33.3348829534  | Program output: 34.01056      
Correct output: -90.3731037929 | Program output: -90.08372     
Correct output: -87.4001767285 | Program output: -88.08010     
Correct output: -8.4029481486  | Program output: -9.0110       
Correct output: 18.5482005326  | Program output: 18.0272       
Correct output: 8.7863159396   | Program output: 9.056         
Correct output: 24.7677635354  | Program output: 25.0552       
Correct output: -8.385649611   | Program output: -9.0110       
Correct output: 42.4033443172  | Program output: 43.01722      
Correct output: -5.7440283823  | Program output: -6.056        
Correct output: 49.9486170067  | Program output: 49.02256      
Correct output: 8.6872116188   | Program output: 8.042         
Correct output: 28.4119683961  | Program output: 29.0756       
Correct output: -51.6769002079 | Program output: -52.02862     
Correct output: 27.2805425748  | Program output: 28.0702       
Correct output: -20.7039689338 | Program output: -20.0462      
Correct output: -180.7091819668 | Program output: -180.032942   
Correct output: 122.1928520414 | Program output: 122.014520    
Correct output: -10.2306918248 | Program output: -10.0132      
Correct output: -104.493817403 | Program output: -104.011130   
Correct output: 6.5890602195   | Program output: 7.030         
Correct output: -74.0414611649 | Program output: -75.05852     
Correct output: 145.6031300201 | Program output: 145.020592    
Correct output: 125.9949201107 | Program output: 125.015252    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction integer_swap} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction float_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yankdup} {:instruction integer_dup_times} {:instruction float_mult} {:instruction float_yankdup} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_add} {:instruction in2} {:instruction integer_add} {:instruction integer_rot} {:instruction float_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_add} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_swap} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_tan} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_sub} {:instruction tagged_657} {:instruction float_tan} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_sub} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction integer_mult} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_inc} {:instruction integer_flush} {:instruction float_min} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc integer_swap integer_dup_items integer_yank float_inc integer_swap integer_dup_items integer_yank float_max in1 float_add float_yank float_dup_times float_yankdup integer_dup_times float_mult float_yankdup integer_dup_times integer_dup_items float_rot integer_sub integer_sub float_add in2 integer_add integer_rot float_add tag_integer_667 float_yank integer_dec integer_fromfloat float_sub float_rot integer_sub integer_sub float_add in2 integer_add tag_integer_667 float_yank integer_swap integer_fromfloat tagged_752 float_tan integer_dec integer_dec integer_sub tagged_657 float_tan integer_dec integer_fromfloat tagged_752 float_tan float_frominteger float_sub float_dup float_pop 8 print_float integer_shove integer_mult print_integer integer_min float_min integer_div integer_div integer_fromfloat float_swap integer_inc integer_flush float_min float_dec integer_pop float_frominteger integer_min)
Errors: [0.9457 11 0.6757 10 0.2894 7 0.6799 9 0.6081 9 0.521 8 0.2697 9 0.2874 9 0.6254 9 0.6139 8 0.312 10 0.9261 9 0.6452 9 0.6636 10 0.3517 9 0.7897 9 0.6578 8 0.6762 8 0.1783 7 0.2175 7 0.4827 7 0.4409 9 1.0171 10 0.5825 8 0.9797 9]
Total: 232.43720000000005
Mean: 4.648744
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2223.670858600002
Median total errors in population: 245.4002
Error averages by case: (74.79300320000056 10.294 84.29191430000002 10.201 99.6435326999991 9.507 71.59960899999925 9.519 75.26275930000045 9.3 67.0452452000006 9.455 89.4600620999995 10.128 79.79331890000009 11.019 71.84524179999961 9.253 82.51425600000046 9.97 68.92909810000063 9.459 55.85116220000073 9.382 62.26771519999956 9.37 85.99648480000043 10.343 72.15325280000053 10.285 78.87062749999976 9.407 92.3865785999998 8.735 107.71154439999914 8.688 63.94446550000013 9.398 100.39574879999924 8.736 103.02470659999892 8.669 86.13723680000005 9.815 73.48247400000018 10.238 69.62338669999951 9.411 66.55643410000096 9.509)
Error minima by case: (0.0125 8 0.2469 8 0.2831 7 0.3122 8 0.3149 7 0.4518 7 0.2137 8 0.2322 9 0.2976 8 0.3153 7 0.256 7 0.0514 7 0.3128 7 0.324 8 0.3231 8 0.1925 7 0.296 6 0.2908 6 0.1029 7 0.1407 7 0.4038 6 0.4109 7 0.0225 7 0.3969 7 0.0051 7)
Average genome size in population (length): 61.029
Average program size in population (points): 62.029
Average percent parens in population: 0.016
Minimum age in population: 25.65180969238281
Maximum age in population: 29.83173370361328
Average age in population: 27.83168179321289
Median age in population: 27.86825942993164
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 36
Genome diversity (% unique Plush genomes):	 0.757
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.757
Total error diversity:				 0.151
Error (vector) diversity:			 0.155
Behavioral diversity:				 0.155
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 28582366
--- Timings ---
Current time: 1529615940290 milliseconds
Total Time:          65.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.1 seconds, 44.3%
Fitness Testing:     28.5 seconds, 43.4%
Report:               8.0 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Number IO problem report - generation 20
Test total error for best: 8871.038199999999
Test mean error for best: 4.43552
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20.0198      
Correct output: 33.3348829534  | Program output: 34.0198       
Correct output: -90.3731037929 | Program output: -90.0198      
Correct output: -87.4001767285 | Program output: -88.0198      
Correct output: -8.4029481486  | Program output: -9.0198       
Correct output: 18.5482005326  | Program output: 18.0198       
Correct output: 8.7863159396   | Program output: 9.0198        
Correct output: 24.7677635354  | Program output: 25.0198       
Correct output: -8.385649611   | Program output: -9.0198       
Correct output: 42.4033443172  | Program output: 43.0198       
Correct output: -5.7440283823  | Program output: -6.0198       
Correct output: 49.9486170067  | Program output: 49.0198       
Correct output: 8.6872116188   | Program output: 8.0198        
Correct output: 28.4119683961  | Program output: 29.0198       
Correct output: -51.6769002079 | Program output: -52.0198      
Correct output: 27.2805425748  | Program output: 28.0198       
Correct output: -20.7039689338 | Program output: -20.0198      
Correct output: -180.7091819668 | Program output: -180.0198     
Correct output: 122.1928520414 | Program output: 122.0198      
Correct output: -10.2306918248 | Program output: -10.0198      
Correct output: -104.493817403 | Program output: -104.0198     
Correct output: 6.5890602195   | Program output: 7.0198        
Correct output: -74.0414611649 | Program output: -75.0198      
Correct output: 145.6031300201 | Program output: 145.0198      
Correct output: 125.9949201107 | Program output: 125.0198      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction print_integer} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction float_add} {:instruction float_yank} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_sub} {:instruction 19.42355631150687} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_tan} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction float_tan} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction integer_mult} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction float_min} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc print_integer integer_dup_items integer_yank float_max in1 float_add float_yank float_mult float_yankdup float_yankdup float_dup_items float_rot integer_sub integer_inc float_add tag_integer_667 float_yank integer_dec integer_fromfloat float_sub float_rot integer_sub integer_sub 19.42355631150687 in2 integer_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_752 float_tan float_frominteger integer_dup_times float_dup float_pop 8 print_float integer_shove float_dec print_integer integer_min float_min integer_div float_tan float_frominteger integer_dup_times float_dup float_pop 8 print_float integer_shove integer_mult print_integer integer_min float_min integer_div integer_div integer_fromfloat float_swap integer_inc in1 float_min float_dec integer_pop float_frominteger integer_min)
Errors: [0.9193 10 0.6849 10 0.3533 8 0.6196 8 0.6169 8 0.5284 9 0.2335 9 0.252 11 0.6342 9 0.6165 9 0.2758 9 0.9288 9 0.6674 8 0.6078 8 0.3429 10 0.7393 9 0.6842 7 0.6894 6 0.1731 8 0.2109 7 0.474 8 0.4307 8 0.9783 9 0.5833 8 0.9751 8]
Total: 227.21959999999999
Mean: 4.544392
Genome size: 68
Size: 69
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2449.5615752000003
Median total errors in population: 238.42419999999998
Error averages by case: (88.33945040000044 10.266 88.83414009999983 9.997 107.26051199999866 9.225 83.7205312999991 9.513 89.2068079000002 9.205 78.28885720000011 9.303 92.60341849999945 9.87 84.76392679999978 10.87 86.05619009999964 9.212 86.84749030000002 9.512 83.4559189999996 9.643 68.85936090000064 9.32 72.43955789999985 9.333 91.94483010000117 10.086 85.21342579999978 10.028 82.3347091000003 9.587 100.19186319999937 8.671 113.04665339999882 8.34 78.50050529999996 9.027 105.93473129999943 8.628 108.86130209999881 8.6 89.6044694000006 9.192 86.0948572999994 9.712 81.4542667999993 9.017 80.40979900000058 9.137)
Error minima by case: (0.0165 8 0.2469 8 0.2831 3 0.3162 8 0.3189 7 0.4518 2 0.2137 8 0.2322 8 0.3016 7 0.3153 7 0.256 8 0.0514 3 0.3128 2 0.324 8 0.3231 8 0.1925 7 0.296 2 0.2908 4 0.1029 4 0.1407 3 0.4038 4 0.4109 6 0.0225 7 0.3969 4 0.0051 4)
Average genome size in population (length): 62.419
Average program size in population (points): 63.419
Average percent parens in population: 0.016
Minimum age in population: 26.65180969238281
Maximum age in population: 31.22019958496094
Average age in population: 29.31325831222534
Median age in population: 29.37875270843506
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 60
Genome diversity (% unique Plush genomes):	 0.72
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 60
Syntactic diversity (% unique Push programs):	 0.72
Total error diversity:				 0.169
Error (vector) diversity:			 0.174
Behavioral diversity:				 0.175
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 30180991
--- Timings ---
Current time: 1529615943591 milliseconds
Total Time:          69.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.5 seconds, 44.2%
Fitness Testing:     30.0 seconds, 43.4%
Report:               8.4 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Number IO problem report - generation 21
Test total error for best: 8851.002899999994
Test mean error for best: 4.42550
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20.01988     
Correct output: 33.3348829534  | Program output: 34.01988      
Correct output: -90.3731037929 | Program output: -90.01988     
Correct output: -87.4001767285 | Program output: -88.01988     
Correct output: -8.4029481486  | Program output: -9.01988      
Correct output: 18.5482005326  | Program output: 18.01988      
Correct output: 8.7863159396   | Program output: 9.01988       
Correct output: 24.7677635354  | Program output: 25.01988      
Correct output: -8.385649611   | Program output: -9.01988      
Correct output: 42.4033443172  | Program output: 43.01988      
Correct output: -5.7440283823  | Program output: -6.01988      
Correct output: 49.9486170067  | Program output: 49.01988      
Correct output: 8.6872116188   | Program output: 8.01988       
Correct output: 28.4119683961  | Program output: 29.01988      
Correct output: -51.6769002079 | Program output: -52.01988     
Correct output: 27.2805425748  | Program output: 28.01988      
Correct output: -20.7039689338 | Program output: -20.01988     
Correct output: -180.7091819668 | Program output: -180.01988    
Correct output: 122.1928520414 | Program output: 122.01988     
Correct output: -10.2306918248 | Program output: -10.01988     
Correct output: -104.493817403 | Program output: -104.01988    
Correct output: 6.5890602195   | Program output: 7.01988       
Correct output: -74.0414611649 | Program output: -75.01988     
Correct output: 145.6031300201 | Program output: 145.01988     
Correct output: 125.9949201107 | Program output: 125.01988     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction print_integer} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction float_add} {:instruction float_yank} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_sub} {:instruction 19.42355631150687} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_tan} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction float_tan} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction integer_mult} {:instruction print_integer} {:instruction integer_min} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction integer_mult} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction float_min} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc print_integer integer_dup_items integer_yank float_max in1 float_add float_yank float_mult float_yankdup float_yankdup float_dup_items float_rot integer_sub integer_inc float_add tag_integer_667 float_yank integer_dec integer_fromfloat float_sub float_rot integer_sub integer_sub 19.42355631150687 in2 integer_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_752 float_tan float_frominteger integer_dup_times float_dup float_pop 8 print_float integer_shove float_dec print_integer integer_min float_min integer_div float_tan float_frominteger integer_dup_times float_dup float_pop 8 print_float integer_shove integer_mult print_integer integer_min float_pop 8 print_float integer_shove integer_mult print_integer integer_min float_min integer_div integer_div integer_fromfloat float_swap integer_inc in1 float_min float_dec integer_pop float_frominteger integer_min)
Errors: [0.9194 10 0.685 9 0.3532 8 0.6197 8 0.6169 7 0.5283 9 0.2336 9 0.2521 11 0.6342 9 0.6165 10 0.2759 9 0.9287 9 0.6673 7 0.6079 8 0.343 10 0.7393 9 0.6841 6 0.6893 6 0.173 8 0.2108 6 0.4739 8 0.4308 9 0.9784 9 0.5833 8 0.975 8]
Total: 224.21959999999999
Mean: 4.484392
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 1858.9920758000014
Median total errors in population: 234.2172
Error averages by case: (60.78502149999996 10.222 68.26553599999936 10.241 81.57766009999884 8.794 59.271436599999156 9.444 61.10680899999972 9.264 54.020139999999714 9.486 72.49315629999981 9.408 64.27057539999952 11.085 57.841822299999585 9.228 66.98996860000034 9.359 55.01388860000052 10.075 46.70462960000038 9.423 48.701040000000056 9.347 69.49912070000123 9.589 57.37128210000071 9.631 64.51059669999981 9.998 77.08706659999947 8.726 90.40497879999901 8.014 54.47387480000062 8.745 83.6091021999998 8.649 86.48440860000007 8.627 69.40376910000077 8.549 59.82178270000049 8.962 59.94962099999992 8.8 56.78578849999968 8.883)
Error minima by case: (0.0565 8 0.2509 8 0.2841 7 0.321 7 0.3039 7 0.4518 7 0.2137 8 0.2322 9 0.2866 8 0.3193 8 0.256 8 0.0704 7 0.3318 7 0.328 7 0.3231 8 0.1965 7 0.315 6 0.3098 5 0.1039 7 0.1417 6 0.4048 6 0.4109 7 0.0163 7 0.4159 7 0.0205 7)
Average genome size in population (length): 58.732
Average program size in population (points): 59.732
Average percent parens in population: 0.017
Minimum age in population: 28.31167602539062
Maximum age in population: 32.72311115264893
Average age in population: 30.77512990951538
Median age in population: 30.83037281036377
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 90
Genome diversity (% unique Plush genomes):	 0.701
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 90
Syntactic diversity (% unique Push programs):	 0.701
Total error diversity:				 0.136
Error (vector) diversity:			 0.136
Behavioral diversity:				 0.136
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 31679116
--- Timings ---
Current time: 1529615946843 milliseconds
Total Time:          72.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.9 seconds, 44.2%
Fitness Testing:     31.4 seconds, 43.4%
Report:               8.8 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Number IO problem report - generation 22
Test total error for best: 8851.002899999994
Test mean error for best: 4.42550
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20.01988     
Correct output: 33.3348829534  | Program output: 34.01988      
Correct output: -90.3731037929 | Program output: -90.01988     
Correct output: -87.4001767285 | Program output: -88.01988     
Correct output: -8.4029481486  | Program output: -9.01988      
Correct output: 18.5482005326  | Program output: 18.01988      
Correct output: 8.7863159396   | Program output: 9.01988       
Correct output: 24.7677635354  | Program output: 25.01988      
Correct output: -8.385649611   | Program output: -9.01988      
Correct output: 42.4033443172  | Program output: 43.01988      
Correct output: -5.7440283823  | Program output: -6.01988      
Correct output: 49.9486170067  | Program output: 49.01988      
Correct output: 8.6872116188   | Program output: 8.01988       
Correct output: 28.4119683961  | Program output: 29.01988      
Correct output: -51.6769002079 | Program output: -52.01988     
Correct output: 27.2805425748  | Program output: 28.01988      
Correct output: -20.7039689338 | Program output: -20.01988     
Correct output: -180.7091819668 | Program output: -180.01988    
Correct output: 122.1928520414 | Program output: 122.01988     
Correct output: -10.2306918248 | Program output: -10.01988     
Correct output: -104.493817403 | Program output: -104.01988    
Correct output: 6.5890602195   | Program output: 7.01988       
Correct output: -74.0414611649 | Program output: -75.01988     
Correct output: 145.6031300201 | Program output: 145.01988     
Correct output: 125.9949201107 | Program output: 125.01988     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction print_integer} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction float_add} {:instruction float_yank} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_sub} {:instruction 19.67377018489123} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_tan} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction print_integer} {:instruction integer_min} {:instruction integer_dup_items} {:instruction integer_div} {:instruction float_tan} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction integer_mult} {:instruction print_integer} {:instruction integer_min} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction integer_mult} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction float_min} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc print_integer integer_dup_items integer_yank float_max in1 float_add float_yank float_mult float_yankdup float_yankdup float_dup_items float_rot integer_sub integer_inc float_add tag_integer_667 float_yank integer_dec integer_fromfloat float_sub float_rot integer_sub integer_sub 19.67377018489123 in2 integer_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_752 float_tan float_frominteger integer_dup_times float_dup float_pop 8 print_float integer_shove float_dec print_integer integer_min integer_dup_items integer_div float_tan float_frominteger integer_dup_times float_dup float_pop 8 print_float integer_shove integer_mult print_integer integer_min float_pop 8 print_float integer_shove integer_mult print_integer integer_min float_min integer_div integer_div integer_fromfloat float_swap integer_inc in1 float_min float_dec integer_pop float_frominteger integer_min)
Errors: [0.9194 10 0.685 9 0.3532 8 0.6197 8 0.6169 7 0.5283 9 0.2336 9 0.2521 11 0.6342 9 0.6165 10 0.2759 9 0.9287 9 0.6673 7 0.6079 8 0.343 10 0.7393 9 0.6841 6 0.6893 6 0.173 8 0.2108 6 0.4739 8 0.4308 9 0.9784 9 0.5833 8 0.975 8]
Total: 224.21959999999999
Mean: 4.484392
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2443.4515548000018
Median total errors in population: 234.2172
Error averages by case: (96.19081439999971 10.366 82.92478219999943 10.393 102.99938109999901 8.784 89.26806349999917 9.445 95.86698329999959 9.19 88.20029660000021 9.491 88.38529209999932 9.457 75.10431179999964 11.132 91.9411178000006 9.309 79.15528649999959 9.474 88.36966189999971 10.122 68.47032300000072 9.472 83.44215490000006 9.236 85.48856710000098 9.543 90.24389239999977 9.84 74.24184950000036 9.966 88.50434629999968 8.612 114.37811999999924 7.978 78.11356509999992 8.726 98.23393279999989 8.514 108.30500779999964 8.659 83.44758550000066 8.673 93.81656939999935 9.197 85.05060449999894 8.813 79.93904530000026 8.978)
Error minima by case: (0.0807 8 0.3151 8 0.2851 3 0.3804 7 0.3831 7 0.4518 2 0.2137 8 0.2322 9 0.3658 6 0.3835 8 0.256 8 0.0704 3 0.3318 2 0.3922 7 0.3231 8 0.2155 8 0.296 2 0.2908 4 0.1049 4 0.1427 3 0.4058 4 0.4109 7 0.0217 7 0.4115 4 0.0177 4)
Average genome size in population (length): 60.283
Average program size in population (points): 61.283
Average percent parens in population: 0.017
Minimum age in population: 29.69622802734375
Maximum age in population: 34.11284017562866
Average age in population: 32.20245872497559
Median age in population: 32.25285172462463
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 59
Genome diversity (% unique Plush genomes):	 0.723
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.723
Total error diversity:				 0.166
Error (vector) diversity:			 0.169
Behavioral diversity:				 0.169
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 33215541
--- Timings ---
Current time: 1529615950061 milliseconds
Total Time:          75.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.3 seconds, 44.0%
Fitness Testing:     32.9 seconds, 43.5%
Report:               9.3 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Number IO problem report - generation 23
Test total error for best: 8921.149400000002
Test mean error for best: 4.46057
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20.0818      
Correct output: 33.3348829534  | Program output: 34.0818       
Correct output: -90.3731037929 | Program output: -90.0818      
Correct output: -87.4001767285 | Program output: -88.0818      
Correct output: -8.4029481486  | Program output: -9.0818       
Correct output: 18.5482005326  | Program output: 18.0818       
Correct output: 8.7863159396   | Program output: 9.0818        
Correct output: 24.7677635354  | Program output: 25.0818       
Correct output: -8.385649611   | Program output: -9.0818       
Correct output: 42.4033443172  | Program output: 43.0818       
Correct output: -5.7440283823  | Program output: -6.0818       
Correct output: 49.9486170067  | Program output: 49.0818       
Correct output: 8.6872116188   | Program output: 8.0818        
Correct output: 28.4119683961  | Program output: 29.0818       
Correct output: -51.6769002079 | Program output: -52.0818      
Correct output: 27.2805425748  | Program output: 28.0818       
Correct output: -20.7039689338 | Program output: -20.0818      
Correct output: -180.7091819668 | Program output: -180.0818     
Correct output: 122.1928520414 | Program output: 122.0818      
Correct output: -10.2306918248 | Program output: -10.0818      
Correct output: -104.493817403 | Program output: -104.0818     
Correct output: 6.5890602195   | Program output: 7.0818        
Correct output: -74.0414611649 | Program output: -75.0818      
Correct output: 145.6031300201 | Program output: 145.0818      
Correct output: 125.9949201107 | Program output: 125.0818      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction print_integer} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction float_add} {:instruction float_yank} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_sub} {:instruction 19.42355631150687} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction float_div} {:instruction float_dec} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_dec} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction print_integer} {:instruction integer_dup_times} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc print_integer integer_dup_items integer_yank float_max in1 float_add float_yank float_mult float_yankdup float_yankdup float_dup_items float_rot integer_sub integer_inc float_add tag_integer_667 float_yank integer_dec integer_fromfloat float_sub float_rot integer_sub integer_sub 19.42355631150687 in2 integer_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_752 float_frominteger integer_dup_times float_dup float_pop 8 print_float float_div float_dec print_integer integer_min float_min integer_div integer_div integer_fromfloat float_swap integer_dup_times float_dup integer_dec 8 print_float integer_shove float_dec print_integer integer_dup_times float_dec integer_pop float_frominteger integer_min)
Errors: [0.9813 9 0.7469 10 0.2913 9 0.6816 8 0.6789 7 0.4664 9 0.2955 9 0.314 11 0.6962 8 0.6785 9 0.3378 8 0.8668 8 0.6054 7 0.6698 9 0.4049 10 0.8013 9 0.6222 7 0.6274 6 0.1111 8 0.1489 7 0.412 7 0.4927 9 1.0403 9 0.5213 8 0.9131 8]
Total: 223.4056
Mean: 4.468112
Genome size: 60
Size: 61
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2631.672856400002
Median total errors in population: 232.43720000000005
Error averages by case: (96.9455800999991 10.367 94.8534871999992 10.284 105.60597019999992 8.832 95.4334633 9.079 97.93253069999895 8.728 91.84120969999985 9.505 98.78175820000016 9.513 89.41611429999932 11.149 94.81859440000053 9.353 91.10097529999963 9.511 91.35056370000062 9.708 81.5294894000004 9.49 85.48625900000032 8.793 96.53215970000015 9.252 93.21514970000057 10.21 88.70198440000067 9.549 99.66936060000049 8.172 116.11575530000022 7.576 91.11555559999968 8.724 109.52904430000042 8.041 111.7979579999999 8.589 93.79766129999987 8.824 96.86050400000028 9.513 94.812060099999 8.846 93.81366790000015 9.008)
Error minima by case: (0.0157 8 0.2357 8 0.2843 4 0.3154 7 0.3181 6 0.4518 3 0.2137 8 0.2322 9 0.3008 7 0.3623 7 0.256 7 0.0704 4 0.3318 3 0.3418 7 0.3231 8 0.1925 7 0.296 3 0.2908 5 0.1049 5 0.1419 4 0.405 5 0.4109 7 0.0225 7 0.4159 5 0.0241 5)
Average genome size in population (length): 67.021
Average program size in population (points): 68.021
Average percent parens in population: 0.015
Minimum age in population: 31.04495525360107
Maximum age in population: 35.40345048904419
Average age in population: 33.69650956606865
Median age in population: 33.838463306427
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.741
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.741
Total error diversity:				 0.206
Error (vector) diversity:			 0.214
Behavioral diversity:				 0.216
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 34922041
--- Timings ---
Current time: 1529615953804 milliseconds
Total Time:          79.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.7 seconds, 43.8%
Fitness Testing:     34.6 seconds, 43.7%
Report:               9.7 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Number IO problem report - generation 24
Test total error for best: 8670.087299999994
Test mean error for best: 4.33504
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20.08198     
Correct output: 33.3348829534  | Program output: 34.08198      
Correct output: -90.3731037929 | Program output: -90.08198     
Correct output: -87.4001767285 | Program output: -88.08198     
Correct output: -8.4029481486  | Program output: -9.08198      
Correct output: 18.5482005326  | Program output: 18.08198      
Correct output: 8.7863159396   | Program output: 9.08198       
Correct output: 24.7677635354  | Program output: 25.08198      
Correct output: -8.385649611   | Program output: -9.08198      
Correct output: 42.4033443172  | Program output: 43.08198      
Correct output: -5.7440283823  | Program output: -6.08198      
Correct output: 49.9486170067  | Program output: 49.08198      
Correct output: 8.6872116188   | Program output: 8.08198       
Correct output: 28.4119683961  | Program output: 29.08198      
Correct output: -51.6769002079 | Program output: -52.08198     
Correct output: 27.2805425748  | Program output: 28.08198      
Correct output: -20.7039689338 | Program output: -20.08198     
Correct output: -180.7091819668 | Program output: -180.08198    
Correct output: 122.1928520414 | Program output: 122.08198     
Correct output: -10.2306918248 | Program output: -10.08198     
Correct output: -104.493817403 | Program output: -104.08198    
Correct output: 6.5890602195   | Program output: 7.08198       
Correct output: -74.0414611649 | Program output: -75.08198     
Correct output: 145.6031300201 | Program output: 145.08198     
Correct output: 125.9949201107 | Program output: 125.08198     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction tag_float_718} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction float_add} {:instruction float_yank} {:instruction float_mult} {:instruction float_yankdup} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_add} {:instruction integer_dup} {:instruction integer_add} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_sub} {:instruction 19.42355631150687} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_tan} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction 69.54768671383735} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_div} {:instruction float_max} {:instruction integer_min} {:instruction 8} {:instruction float_stackdepth} {:instruction in1} {:instruction float_yankdup} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction float_min} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc tag_float_718 integer_dup_items integer_yank float_max in1 float_add float_yank float_mult float_yankdup integer_dup_times float_dup_items float_rot integer_sub integer_sub float_add integer_dup integer_add integer_inc float_add tag_integer_667 float_yank integer_dec integer_fromfloat float_sub float_rot integer_sub integer_sub 19.42355631150687 in2 integer_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_752 float_tan float_frominteger integer_dup_times float_dup float_pop 8 print_float 69.54768671383735 float_dec print_integer float_pop 8 print_float integer_shove float_dec print_integer float_pop float_min integer_div integer_div integer_div float_max integer_min 8 float_stackdepth in1 float_yankdup print_integer integer_min float_min integer_div integer_div integer_fromfloat float_swap integer_inc in1 float_min float_dec integer_pop float_frominteger integer_min)
Errors: [0.9815 10 0.7471 9 0.2911 8 0.6818 8 0.679 7 0.4662 9 0.2957 8 0.3142 11 0.6963 8 0.6786 9 0.338 9 0.8666 8 0.6052 7 0.67 8 0.4051 10 0.8014 9 0.622 7 0.6272 5 0.1109 9 0.1487 7 0.4118 7 0.4929 8 1.0405 9 0.5212 8 0.9129 8]
Total: 220.40589999999997
Mean: 4.408118
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2982.6180934999993
Median total errors in population: 227.21959999999999
Error averages by case: (107.49116699999912 10.298 110.23937289999878 10.182 120.41976630000035 8.886 108.47128060000058 8.902 109.39220959999872 8.382 102.53994149999997 9.657 114.00638830000078 9.504 105.73148829999903 11.378 106.41712820000032 9.462 108.37558720000017 9.862 103.82273370000027 9.599 96.60061349999971 9.523 99.16805820000047 8.404 112.59038879999997 8.974 103.61838590000033 10.464 105.05888380000053 9.512 113.88112450000057 7.727 130.82350490000024 7.195 105.86675259999961 8.837 122.55484960000075 7.719 127.45659740000009 8.739 110.8144841999998 8.943 107.644584700001 9.654 111.26329489999911 8.875 108.67950690000013 9.012)
Error minima by case: (0.0806 8 0.2469 8 0.2843 3 0.3803 7 0.3831 6 0.4518 2 0.2156 8 0.2341 9 0.3658 7 0.3153 8 0.2579 8 0.0712 3 0.3326 2 0.324 7 0.325 8 0.1925 7 0.3158 2 0.3106 4 0.1041 4 0.1419 3 0.405 4 0.4128 7 0.0216 7 0.4167 4 0.0249 4)
Average genome size in population (length): 69.246
Average program size in population (points): 70.246
Average percent parens in population: 0.014
Minimum age in population: 32.64381980895996
Maximum age in population: 37.02422881126404
Average age in population: 35.04107677602768
Median age in population: 35.0906982421875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.764
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.764
Total error diversity:				 0.206
Error (vector) diversity:			 0.218
Behavioral diversity:				 0.218
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 36678441
--- Timings ---
Current time: 1529615957323 milliseconds
Total Time:          82.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.1 seconds, 43.6%
Fitness Testing:     36.3 seconds, 43.9%
Report:              10.2 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Number IO problem report - generation 25
Test total error for best: 8670.087299999994
Test mean error for best: 4.33504
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20.08198     
Correct output: 33.3348829534  | Program output: 34.08198      
Correct output: -90.3731037929 | Program output: -90.08198     
Correct output: -87.4001767285 | Program output: -88.08198     
Correct output: -8.4029481486  | Program output: -9.08198      
Correct output: 18.5482005326  | Program output: 18.08198      
Correct output: 8.7863159396   | Program output: 9.08198       
Correct output: 24.7677635354  | Program output: 25.08198      
Correct output: -8.385649611   | Program output: -9.08198      
Correct output: 42.4033443172  | Program output: 43.08198      
Correct output: -5.7440283823  | Program output: -6.08198      
Correct output: 49.9486170067  | Program output: 49.08198      
Correct output: 8.6872116188   | Program output: 8.08198       
Correct output: 28.4119683961  | Program output: 29.08198      
Correct output: -51.6769002079 | Program output: -52.08198     
Correct output: 27.2805425748  | Program output: 28.08198      
Correct output: -20.7039689338 | Program output: -20.08198     
Correct output: -180.7091819668 | Program output: -180.08198    
Correct output: 122.1928520414 | Program output: 122.08198     
Correct output: -10.2306918248 | Program output: -10.08198     
Correct output: -104.493817403 | Program output: -104.08198    
Correct output: 6.5890602195   | Program output: 7.08198       
Correct output: -74.0414611649 | Program output: -75.08198     
Correct output: 145.6031300201 | Program output: 145.08198     
Correct output: 125.9949201107 | Program output: 125.08198     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction tag_float_718} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction float_add} {:instruction float_yank} {:instruction float_mult} {:instruction float_yankdup} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_add} {:instruction integer_dup} {:instruction integer_add} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_sub} {:instruction 19.42355631150687} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_tan} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction 69.54768671383735} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_div} {:instruction float_max} {:instruction integer_min} {:instruction 8} {:instruction float_stackdepth} {:instruction in1} {:instruction float_yankdup} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction float_min} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc tag_float_718 integer_dup_items integer_yank float_max in1 float_add float_yank float_mult float_yankdup integer_dup_times float_dup_items float_rot integer_sub integer_sub float_add integer_dup integer_add integer_inc float_add tag_integer_667 float_yank integer_dec integer_fromfloat float_sub float_rot integer_sub integer_sub 19.42355631150687 in2 integer_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_752 float_tan float_frominteger integer_dup_times float_dup float_pop 8 print_float 69.54768671383735 float_dec print_integer float_pop 8 print_float integer_shove float_dec print_integer float_pop float_min integer_div integer_div integer_div float_max integer_min 8 float_stackdepth in1 float_yankdup print_integer integer_min float_min integer_div integer_div integer_fromfloat float_swap integer_inc in1 float_min float_dec integer_pop float_frominteger integer_min)
Errors: [0.9815 10 0.7471 9 0.2911 8 0.6818 8 0.679 7 0.4662 9 0.2957 8 0.3142 11 0.6963 8 0.6786 9 0.338 9 0.8666 8 0.6052 7 0.67 8 0.4051 10 0.8014 9 0.622 7 0.6272 5 0.1109 9 0.1487 7 0.4118 7 0.4929 8 1.0405 9 0.5212 8 0.9129 8]
Total: 220.40589999999997
Mean: 4.408118
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3023.092678300001
Median total errors in population: 224.21959999999999
Error averages by case: (116.8044600999993 10.297 108.86919779999911 9.832 118.17617219999951 8.823 114.57729899999971 8.793 113.6149002999988 7.907 111.86012850000077 9.571 115.24623980000129 9.443 105.22361199999928 11.362 111.1630462000003 9.426 108.81085300000024 10.195 111.78891629999906 9.491 102.52431990000015 9.397 107.12633530000042 7.87 109.0292927000007 8.855 111.68896379999924 10.426 104.93708240000052 9.504 111.71868459999968 7.251 126.51690959999918 7.001 104.01800319999948 8.747 118.51236090000043 7.275 122.70187569999928 8.623 112.13106230000045 9.247 114.40988150000162 9.611 108.81900589999913 8.762 106.22507530000064 8.89)
Error minima by case: (0.0807 8 0.2529 7 0.2843 5 0.3804 7 0.3831 7 0.4518 4 0.2137 7 0.2322 9 0.3658 8 0.3214 8 0.256 8 0.0712 5 0.3326 4 0.33 7 0.3231 9 0.1986 8 0.3158 4 0.3106 5 0.1041 6 0.1419 5 0.405 6 0.4109 7 0.0217 8 0.4167 6 0.0249 6)
Average genome size in population (length): 71.015
Average program size in population (points): 72.015
Average percent parens in population: 0.014
Minimum age in population: 34.17773818969727
Maximum age in population: 38.51445585489273
Average age in population: 36.50361518514156
Median age in population: 36.53815814852715
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.77
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.77
Total error diversity:				 0.186
Error (vector) diversity:			 0.193
Behavioral diversity:				 0.193
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 38478966
--- Timings ---
Current time: 1529615961122 milliseconds
Total Time:          86.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.5 seconds, 43.4%
Fitness Testing:     38.1 seconds, 44.1%
Report:              10.7 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Number IO problem report - generation 26
Test total error for best: 8707.114699999993
Test mean error for best: 4.35356
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20.0361361   
Correct output: 33.3348829534  | Program output: 34.0361361    
Correct output: -90.3731037929 | Program output: -90.0361361   
Correct output: -87.4001767285 | Program output: -88.0361361   
Correct output: -8.4029481486  | Program output: -9.0361361    
Correct output: 18.5482005326  | Program output: 18.0361361    
Correct output: 8.7863159396   | Program output: 9.0361361     
Correct output: 24.7677635354  | Program output: 25.0361361    
Correct output: -8.385649611   | Program output: -9.0361361    
Correct output: 42.4033443172  | Program output: 43.0361361    
Correct output: -5.7440283823  | Program output: -6.0361361    
Correct output: 49.9486170067  | Program output: 49.0361361    
Correct output: 8.6872116188   | Program output: 8.0361361     
Correct output: 28.4119683961  | Program output: 29.0361361    
Correct output: -51.6769002079 | Program output: -52.0361361   
Correct output: 27.2805425748  | Program output: 28.0361361    
Correct output: -20.7039689338 | Program output: -20.0361361   
Correct output: -180.7091819668 | Program output: -180.0361361  
Correct output: 122.1928520414 | Program output: 122.0361361   
Correct output: -10.2306918248 | Program output: -10.0361361   
Correct output: -104.493817403 | Program output: -104.0361361  
Correct output: 6.5890602195   | Program output: 7.0361361     
Correct output: -74.0414611649 | Program output: -75.0361361   
Correct output: 145.6031300201 | Program output: 145.0361361   
Correct output: 125.9949201107 | Program output: 125.0361361   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction print_integer} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction float_add} {:instruction float_yank} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_add} {:instruction float_yank} {:instruction integer_flush} {:instruction float_yankdup} {:instruction integer_dup_times} {:instruction float_add} {:instruction float_yank} {:instruction tagged_717} {:instruction float_yankdup} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_rot} {:instruction integer_sub} {:instruction float_yankdup} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_sub} {:instruction 19.42355631150687} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_tan} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction integer_mult} {:instruction print_integer} {:instruction integer_min} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction integer_mult} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction float_cos} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc print_integer integer_dup_items integer_yank float_max in1 float_add float_yank float_mult float_yankdup float_add float_yank integer_flush float_yankdup integer_dup_times float_add float_yank tagged_717 float_yankdup integer_dup_times float_dup_items float_rot integer_sub float_yankdup integer_dup_times float_dup_items float_rot integer_sub integer_sub float_add integer_sub integer_fromfloat float_sub float_rot integer_sub integer_sub 19.42355631150687 in2 integer_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_752 float_tan float_frominteger integer_dup_times float_dup float_pop 8 print_float integer_dup_times float_dup float_pop 8 print_float integer_shove integer_mult print_integer integer_min float_pop 8 print_float integer_shove integer_mult print_integer integer_min float_min integer_div integer_div integer_fromfloat float_swap integer_inc in1 float_cos float_dec integer_pop float_frominteger integer_min)
Errors: [0.9356 8 0.7013 10 0.337 8 0.636 9 0.6332 9 0.5121 9 0.2498 8 0.2684 9 0.6505 7 0.6328 8 0.2921 10 0.9125 7 0.6511 7 0.6242 7 0.3592 10 0.7556 10 0.6678 6 0.673 7 0.1567 9 0.1946 7 0.4577 7 0.4471 10 0.9947 7 0.567 6 0.9588 9]
Total: 218.2688
Mean: 4.365376
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3065.8638509000007
Median total errors in population: 224.21959999999999
Error averages by case: (112.47860269999917 10.135 115.79419679999869 9.718 124.4513127999994 8.861 107.86870949999961 8.69 111.21802829999855 7.719 110.92454720000094 9.6 119.31561440000186 9.306 110.12642499999896 11.32 108.74002200000032 9.247 114.72023270000044 10.112 106.58619919999876 9.349 101.1083028000002 9.307 107.32086320000053 7.709 116.34819840000091 8.771 105.58091779999897 10.418 108.19646820000048 9.373 119.41993129999969 7.275 133.75701229999905 6.908 107.73806119999904 8.853 124.12802480000065 7.229 130.2244669999991 8.523 116.04244300000063 9.215 107.6269233000017 9.597 110.78799809999923 8.78 110.44134890000099 8.904)
Error minima by case: (0.0806 8 0.2529 8 0.2842 7 0.3803 7 0.3831 6 0.4518 6 0.2326 7 0.2511 9 0.3658 7 0.3214 8 0.2749 8 0.0713 7 0.3327 5 0.33 7 0.342 8 0.1986 8 0.3158 6 0.3106 5 0.104 6 0.1418 6 0.4049 6 0.4298 7 0.0216 7 0.4167 6 0.025 7)
Average genome size in population (length): 71.646
Average program size in population (points): 72.646
Average percent parens in population: 0.014
Minimum age in population: 35.636225938797
Maximum age in population: 39.87290722131729
Average age in population: 37.99251585432887
Median age in population: 38.04174274206161
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.788
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.788
Total error diversity:				 0.191
Error (vector) diversity:			 0.197
Behavioral diversity:				 0.197
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 40295041
--- Timings ---
Current time: 1529615964987 milliseconds
Total Time:          90.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        39.0 seconds, 43.1%
Fitness Testing:     40.0 seconds, 44.2%
Report:              11.3 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Number IO problem report - generation 27
Test total error for best: 8635.108299999996
Test mean error for best: 4.31755
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20.081918    
Correct output: 33.3348829534  | Program output: 34.081918     
Correct output: -90.3731037929 | Program output: -90.081918    
Correct output: -87.4001767285 | Program output: -88.081918    
Correct output: -8.4029481486  | Program output: -9.081918     
Correct output: 18.5482005326  | Program output: 18.081918     
Correct output: 8.7863159396   | Program output: 9.081918      
Correct output: 24.7677635354  | Program output: 25.081918     
Correct output: -8.385649611   | Program output: -9.081918     
Correct output: 42.4033443172  | Program output: 43.081918     
Correct output: -5.7440283823  | Program output: -6.081918     
Correct output: 49.9486170067  | Program output: 49.081918     
Correct output: 8.6872116188   | Program output: 8.081918      
Correct output: 28.4119683961  | Program output: 29.081918     
Correct output: -51.6769002079 | Program output: -52.081918    
Correct output: 27.2805425748  | Program output: 28.081918     
Correct output: -20.7039689338 | Program output: -20.081918    
Correct output: -180.7091819668 | Program output: -180.081918   
Correct output: 122.1928520414 | Program output: 122.081918    
Correct output: -10.2306918248 | Program output: -10.081918    
Correct output: -104.493817403 | Program output: -104.081918   
Correct output: 6.5890602195   | Program output: 7.081918      
Correct output: -74.0414611649 | Program output: -75.081918    
Correct output: 145.6031300201 | Program output: 145.081918    
Correct output: 125.9949201107 | Program output: 125.081918    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction integer_min} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction float_add} {:instruction float_yank} {:instruction float_mult} {:instruction float_yankdup} {:instruction integer_dup_times} {:instruction float_rot} {:instruction float_swap} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_sub} {:instruction 19.42355631150687} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_tan} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction 69.54768671383735} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction 8} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_dec} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_min} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction integer_mult} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction float_min} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc integer_min integer_dup_items integer_yank float_max in1 float_add float_yank float_mult float_yankdup integer_dup_times float_rot float_swap integer_inc float_add tag_integer_667 float_yank float_yank integer_dec integer_fromfloat float_sub float_rot integer_sub integer_sub 19.42355631150687 in2 integer_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_752 float_tan float_frominteger integer_dup_times float_dup float_pop 8 print_float 69.54768671383735 float_dec print_integer float_pop 8 integer_stackdepth integer_shove float_dec print_integer integer_shove integer_stackdepth print_integer integer_min float_pop 8 print_float integer_shove integer_mult print_integer integer_min float_min integer_div integer_div integer_fromfloat float_swap integer_inc in1 float_min float_dec integer_pop float_frominteger integer_min)
Errors: [0.9814 9 0.747 9 0.2912 8 0.6817 8 0.679 8 0.4663 9 0.2956 8 0.3142 11 0.6963 7 0.6786 9 0.3379 9 0.8667 8 0.6053 6 0.6699 8 0.405 10 0.8014 9 0.6221 7 0.6273 5 0.1109 8 0.1488 7 0.4119 7 0.4929 9 1.0405 8 0.5212 8 0.913 8]
Total: 217.40609999999995
Mean: 4.348122
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3223.965485500001
Median total errors in population: 224.21949999999998
Error averages by case: (126.41176539999911 10.081 113.55261709999868 9.823 130.8249753000001 8.963 123.6230925000005 8.752 125.23474339999973 7.799 116.97584990000003 9.581 114.51669100000053 9.117 110.63645599999886 11.308 122.93870859999994 8.911 113.72087919999966 9.79 122.32949500000002 9.361 109.05962549999967 8.981 110.3857277000007 7.721 114.62433239999994 8.926 123.67801670000013 10.432 110.3871130999998 9.391 123.0797548000002 7.644 137.70580889999982 6.762 114.10464379999938 9.104 128.17242130000074 7.527 134.2480710000001 8.188 111.80361629999993 9.061 125.31676170000088 9.538 119.54442709999975 8.768 116.62689180000005 8.934)
Error minima by case: (0.0187 7 0.2529 7 0.2811 4 0.3184 7 0.3211 6 0.4518 3 0.2225 7 0.241 9 0.3038 7 0.3214 7 0.2648 7 0.1332 4 0.3946 3 0.33 6 0.3319 8 0.1986 7 0.3159 3 0.3107 5 0.1009 5 0.1387 4 0.4018 5 0.4197 7 0.0403 7 0.4787 5 0.0869 5)
Average genome size in population (length): 71.603
Average program size in population (points): 72.603
Average percent parens in population: 0.014
Minimum age in population: 37.21367287635803
Maximum age in population: 41.38852426409721
Average age in population: 39.52058641977608
Median age in population: 39.55159322917461
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 33
Genome diversity (% unique Plush genomes):	 0.762
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.762
Total error diversity:				 0.228
Error (vector) diversity:			 0.242
Behavioral diversity:				 0.242
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 42109866
--- Timings ---
Current time: 1529615968555 milliseconds
Total Time:          94.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        40.4 seconds, 43.0%
Fitness Testing:     41.7 seconds, 44.3%
Report:              11.8 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Number IO problem report - generation 28
Test total error for best: 8570.242600000005
Test mean error for best: 4.28512
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20.081528    
Correct output: 33.3348829534  | Program output: 34.081528     
Correct output: -90.3731037929 | Program output: -90.081528    
Correct output: -87.4001767285 | Program output: -88.081528    
Correct output: -8.4029481486  | Program output: -9.081528     
Correct output: 18.5482005326  | Program output: 18.081528     
Correct output: 8.7863159396   | Program output: 9.081528      
Correct output: 24.7677635354  | Program output: 25.081528     
Correct output: -8.385649611   | Program output: -9.081528     
Correct output: 42.4033443172  | Program output: 43.081528     
Correct output: -5.7440283823  | Program output: -6.081528     
Correct output: 49.9486170067  | Program output: 49.081528     
Correct output: 8.6872116188   | Program output: 8.081528      
Correct output: 28.4119683961  | Program output: 29.081528     
Correct output: -51.6769002079 | Program output: -52.081528    
Correct output: 27.2805425748  | Program output: 28.081528     
Correct output: -20.7039689338 | Program output: -20.081528    
Correct output: -180.7091819668 | Program output: -180.081528   
Correct output: 122.1928520414 | Program output: 122.081528    
Correct output: -10.2306918248 | Program output: -10.081528    
Correct output: -104.493817403 | Program output: -104.081528   
Correct output: 6.5890602195   | Program output: 7.081528      
Correct output: -74.0414611649 | Program output: -75.081528    
Correct output: 145.6031300201 | Program output: 145.081528    
Correct output: 125.9949201107 | Program output: 125.081528    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction tag_float_718} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction float_add} {:instruction float_yank} {:instruction float_mult} {:instruction float_frominteger} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_add} {:instruction in2} {:instruction integer_add} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_sub} {:instruction 19.42355631150687} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_tan} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction 8} {:instruction print_float} {:instruction float_div} {:instruction float_dec} {:instruction print_integer} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction integer_mult} {:instruction print_integer} {:instruction integer_min} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction integer_mult} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction float_min} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc tag_float_718 integer_dup_items integer_yank float_max in1 float_add float_yank float_mult float_frominteger integer_rot float_dup_items float_rot integer_sub integer_sub float_add in2 integer_add integer_inc float_add tag_integer_667 float_yank integer_dec integer_fromfloat float_sub float_rot integer_sub integer_sub 19.42355631150687 in2 integer_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_752 float_tan float_frominteger integer_dup_times float_dup float_pop 8 8 print_float float_div float_dec print_integer 8 print_float integer_shove integer_mult print_integer integer_min float_pop 8 print_float integer_shove integer_mult print_integer integer_min float_min integer_div integer_div integer_fromfloat float_swap integer_inc in1 float_min float_dec integer_pop float_frominteger integer_min)
Errors: [0.981 9 0.7466 9 0.2916 8 0.6814 7 0.6786 8 0.4667 7 0.2952 8 0.3138 10 0.6959 9 0.6782 9 0.3375 8 0.8671 8 0.6057 7 0.6696 9 0.4046 10 0.801 7 0.6224 7 0.6277 6 0.1113 8 0.1492 6 0.4123 7 0.4925 9 1.0401 9 0.5216 7 0.9134 9]
Total: 215.405
Mean: 4.3081
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3632.3613616000002
Median total errors in population: 220.40589999999997
Error averages by case: (137.52114319999856 10.36 133.55851189999817 9.861 146.4292513000009 9.039 142.84269830000076 8.986 136.44599890000032 7.992 130.11279659999914 9.698 131.9498559000009 8.941 131.4220224999982 11.437 134.54477059999985 8.804 134.03333109999963 9.771 132.17671860000138 9.638 126.44736999999859 8.876 126.78583370000105 7.912 137.09942569999956 9.029 134.11677030000158 10.576 130.6077489999985 9.51 142.51205910000112 8.042 154.95039489999994 6.644 130.27315729999978 9.605 144.7658557000006 7.959 153.25663480000085 8.142 128.9477409999991 8.908 136.83043030000115 9.743 134.86168340000094 8.929 132.3361574999993 9.131)
Error minima by case: (0.0185 7 0.2467 7 0.2811 7 0.3182 7 0.321 6 0.4562 7 0.2239 7 0.2424 9 0.3037 6 0.3151 8 0.2662 7 0.1334 7 0.3948 6 0.3238 6 0.3333 8 0.1923 7 0.378 6 0.3728 5 0.1009 7 0.1387 5 0.4018 6 0.4211 7 0.0405 7 0.4788 6 0.0871 7)
Average genome size in population (length): 74.895
Average program size in population (points): 75.895
Average percent parens in population: 0.013
Minimum age in population: 38.21367287635803
Maximum age in population: 43.00961488485336
Average age in population: 40.95935366820544
Median age in population: 41.00056390091777
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 37
Genome diversity (% unique Plush genomes):	 0.783
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 37
Syntactic diversity (% unique Push programs):	 0.783
Total error diversity:				 0.223
Error (vector) diversity:			 0.237
Behavioral diversity:				 0.237
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 44006841
--- Timings ---
Current time: 1529615972577 milliseconds
Total Time:          97.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        41.9 seconds, 42.8%
Fitness Testing:     43.6 seconds, 44.5%
Report:              12.3 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Number IO problem report - generation 29
Test total error for best: 8570.242600000005
Test mean error for best: 4.28512
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20.081528    
Correct output: 33.3348829534  | Program output: 34.081528     
Correct output: -90.3731037929 | Program output: -90.081528    
Correct output: -87.4001767285 | Program output: -88.081528    
Correct output: -8.4029481486  | Program output: -9.081528     
Correct output: 18.5482005326  | Program output: 18.081528     
Correct output: 8.7863159396   | Program output: 9.081528      
Correct output: 24.7677635354  | Program output: 25.081528     
Correct output: -8.385649611   | Program output: -9.081528     
Correct output: 42.4033443172  | Program output: 43.081528     
Correct output: -5.7440283823  | Program output: -6.081528     
Correct output: 49.9486170067  | Program output: 49.081528     
Correct output: 8.6872116188   | Program output: 8.081528      
Correct output: 28.4119683961  | Program output: 29.081528     
Correct output: -51.6769002079 | Program output: -52.081528    
Correct output: 27.2805425748  | Program output: 28.081528     
Correct output: -20.7039689338 | Program output: -20.081528    
Correct output: -180.7091819668 | Program output: -180.081528   
Correct output: 122.1928520414 | Program output: 122.081528    
Correct output: -10.2306918248 | Program output: -10.081528    
Correct output: -104.493817403 | Program output: -104.081528   
Correct output: 6.5890602195   | Program output: 7.081528      
Correct output: -74.0414611649 | Program output: -75.081528    
Correct output: 145.6031300201 | Program output: 145.081528    
Correct output: 125.9949201107 | Program output: 125.081528    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction tag_float_718} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction float_add} {:instruction float_yank} {:instruction float_mult} {:instruction float_frominteger} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_add} {:instruction in2} {:instruction integer_add} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_sub} {:instruction 19.42355631150687} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_tan} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction 8} {:instruction print_float} {:instruction float_div} {:instruction float_dec} {:instruction print_integer} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction integer_mult} {:instruction print_integer} {:instruction integer_min} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction integer_mult} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction float_min} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc tag_float_718 integer_dup_items integer_yank float_max in1 float_add float_yank float_mult float_frominteger integer_rot float_dup_items float_rot integer_sub integer_sub float_add in2 integer_add integer_inc float_add tag_integer_667 float_yank integer_dec integer_fromfloat float_sub float_rot integer_sub integer_sub 19.42355631150687 in2 integer_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_752 float_tan float_frominteger integer_dup_times float_dup float_pop 8 8 print_float float_div float_dec print_integer 8 print_float integer_shove integer_mult print_integer integer_min float_pop 8 print_float integer_shove integer_mult print_integer integer_min float_min integer_div integer_div integer_fromfloat float_swap integer_inc in1 float_min float_dec integer_pop float_frominteger integer_min)
Errors: [0.981 9 0.7466 9 0.2916 8 0.6814 7 0.6786 8 0.4667 7 0.2952 8 0.3138 10 0.6959 9 0.6782 9 0.3375 8 0.8671 8 0.6057 7 0.6696 9 0.4046 10 0.801 7 0.6224 7 0.6277 6 0.1113 8 0.1492 6 0.4123 7 0.4925 9 1.0401 9 0.5216 7 0.9134 9]
Total: 215.405
Mean: 4.3081
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3556.5068455999995
Median total errors in population: 220.40589999999997
Error averages by case: (135.2360132999987 10.222 127.28792189999808 9.752 143.633467400001 8.965 135.74150270000112 8.928 135.64212010000057 8.003 131.53966249999922 9.608 132.15439140000086 8.79 122.57688969999823 11.279 132.79205689999927 8.634 128.4168890999998 9.637 130.05203010000142 9.564 120.52784999999862 8.71 129.40461500000114 7.86 135.2910893999992 8.865 130.40473450000152 10.476 120.78387309999866 9.476 136.20776390000086 7.973 153.16036599999967 6.636 128.30514579999993 9.544 139.34132820000082 7.966 151.35445420000102 8.05 132.4321973999993 8.834 132.81300670000098 9.634 134.7078858000009 8.818 131.355590499999 9.12)
Error minima by case: (0.0185 5 0.246 7 0.2811 6 0.3182 7 0.321 6 0.4518 7 0.2239 7 0.2424 8 0.3037 5 0.3145 7 0.2662 8 0.0876 7 0.349 5 0.3231 6 0.3333 8 0.1917 7 0.378 5 0.3728 5 0.1009 6 0.1387 6 0.4018 6 0.4211 7 0.0053 6 0.433 6 0.0413 7)
Average genome size in population (length): 75.024
Average program size in population (points): 76.024
Average percent parens in population: 0.013
Minimum age in population: 39.21367287635803
Maximum age in population: 44.30697013065219
Average age in population: 42.40888552008569
Median age in population: 42.46349525265396
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.841
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.841
Total error diversity:				 0.24
Error (vector) diversity:			 0.251
Behavioral diversity:				 0.253
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 45907416
--- Timings ---
Current time: 1529615976213 milliseconds
Total Time:         101.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        43.3 seconds, 42.6%
Fitness Testing:     45.3 seconds, 44.6%
Report:              12.9 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Number IO problem report - generation 30
Test total error for best: 8570.242600000005
Test mean error for best: 4.28512
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20.081528    
Correct output: 33.3348829534  | Program output: 34.081528     
Correct output: -90.3731037929 | Program output: -90.081528    
Correct output: -87.4001767285 | Program output: -88.081528    
Correct output: -8.4029481486  | Program output: -9.081528     
Correct output: 18.5482005326  | Program output: 18.081528     
Correct output: 8.7863159396   | Program output: 9.081528      
Correct output: 24.7677635354  | Program output: 25.081528     
Correct output: -8.385649611   | Program output: -9.081528     
Correct output: 42.4033443172  | Program output: 43.081528     
Correct output: -5.7440283823  | Program output: -6.081528     
Correct output: 49.9486170067  | Program output: 49.081528     
Correct output: 8.6872116188   | Program output: 8.081528      
Correct output: 28.4119683961  | Program output: 29.081528     
Correct output: -51.6769002079 | Program output: -52.081528    
Correct output: 27.2805425748  | Program output: 28.081528     
Correct output: -20.7039689338 | Program output: -20.081528    
Correct output: -180.7091819668 | Program output: -180.081528   
Correct output: 122.1928520414 | Program output: 122.081528    
Correct output: -10.2306918248 | Program output: -10.081528    
Correct output: -104.493817403 | Program output: -104.081528   
Correct output: 6.5890602195   | Program output: 7.081528      
Correct output: -74.0414611649 | Program output: -75.081528    
Correct output: 145.6031300201 | Program output: 145.081528    
Correct output: 125.9949201107 | Program output: 125.081528    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction tag_float_718} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction float_add} {:instruction float_yank} {:instruction float_mult} {:instruction float_frominteger} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_add} {:instruction in2} {:instruction integer_add} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_sub} {:instruction 19.42355631150687} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_tan} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction 8} {:instruction print_float} {:instruction float_div} {:instruction float_dec} {:instruction print_integer} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction integer_mult} {:instruction print_integer} {:instruction integer_min} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction integer_mult} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction float_min} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc tag_float_718 integer_dup_items integer_yank float_max in1 float_add float_yank float_mult float_frominteger integer_rot float_dup_items float_rot integer_sub integer_sub float_add in2 integer_add integer_inc float_add tag_integer_667 float_yank integer_dec integer_fromfloat float_sub float_rot integer_sub integer_sub 19.42355631150687 in2 integer_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_752 float_tan float_frominteger integer_dup_times float_dup float_pop 8 8 print_float float_div float_dec print_integer 8 print_float integer_shove integer_mult print_integer integer_min float_pop 8 print_float integer_shove integer_mult print_integer integer_min float_min integer_div integer_div integer_fromfloat float_swap integer_inc in1 float_min float_dec integer_pop float_frominteger integer_min)
Errors: [0.981 9 0.7466 9 0.2916 8 0.6814 7 0.6786 8 0.4667 7 0.2952 8 0.3138 10 0.6959 9 0.6782 9 0.3375 8 0.8671 8 0.6057 7 0.6696 9 0.4046 10 0.801 7 0.6224 7 0.6277 6 0.1113 8 0.1492 6 0.4123 7 0.4925 9 1.0401 9 0.5216 7 0.9134 9]
Total: 215.405
Mean: 4.3081
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3150.3608856000005
Median total errors in population: 220.40589999999997
Error averages by case: (118.19079519999907 9.921 116.77800859999917 9.875 125.86618580000103 8.917 116.43462820000084 8.936 117.55103799999996 8.363 114.84798729999991 9.512 118.54205250000027 8.84 111.72923149999883 11.024 115.2750404999998 8.503 115.10845920000001 9.521 112.95107930000086 9.648 106.79218539999921 8.588 109.50427830000076 7.766 116.67524719999935 8.759 114.94284760000097 10.361 110.27721059999894 9.533 120.50759240000015 7.888 134.07440129999938 6.814 111.78996519999998 9.357 126.41030450000069 7.955 130.2189085000008 7.974 115.03717179999957 9.183 116.90548480000061 9.226 115.39781560000071 8.511 114.39596629999944 9.182)
Error minima by case: (0.0644 7 0.253 7 0.2812 7 0.3641 7 0.3668 7 0.1246 6 0.2137 7 0.2322 8 0.3495 6 0.3214 7 0.256 7 0.0875 7 0.3489 5 0.3301 6 0.3231 8 0.1986 7 0.3322 5 0.327 4 0.1009 7 0.1388 6 0.4019 6 0.4109 7 0.0054 5 0.433 5 0.0412 7)
Average genome size in population (length): 75.085
Average program size in population (points): 76.085
Average percent parens in population: 0.013
Minimum age in population: 41.6894588470459
Maximum age in population: 45.95152170211077
Average age in population: 43.87322113064863
Median age in population: 43.92101132683456
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.823
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.823
Total error diversity:				 0.261
Error (vector) diversity:			 0.276
Behavioral diversity:				 0.276
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 47809866
--- Timings ---
Current time: 1529615980178 milliseconds
Total Time:         105.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        44.6 seconds, 42.3%
Fitness Testing:     47.4 seconds, 44.9%
Report:              13.4 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Number IO problem report - generation 31
Test total error for best: 8570.242600000005
Test mean error for best: 4.28512
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20.081528    
Correct output: 33.3348829534  | Program output: 34.081528     
Correct output: -90.3731037929 | Program output: -90.081528    
Correct output: -87.4001767285 | Program output: -88.081528    
Correct output: -8.4029481486  | Program output: -9.081528     
Correct output: 18.5482005326  | Program output: 18.081528     
Correct output: 8.7863159396   | Program output: 9.081528      
Correct output: 24.7677635354  | Program output: 25.081528     
Correct output: -8.385649611   | Program output: -9.081528     
Correct output: 42.4033443172  | Program output: 43.081528     
Correct output: -5.7440283823  | Program output: -6.081528     
Correct output: 49.9486170067  | Program output: 49.081528     
Correct output: 8.6872116188   | Program output: 8.081528      
Correct output: 28.4119683961  | Program output: 29.081528     
Correct output: -51.6769002079 | Program output: -52.081528    
Correct output: 27.2805425748  | Program output: 28.081528     
Correct output: -20.7039689338 | Program output: -20.081528    
Correct output: -180.7091819668 | Program output: -180.081528   
Correct output: 122.1928520414 | Program output: 122.081528    
Correct output: -10.2306918248 | Program output: -10.081528    
Correct output: -104.493817403 | Program output: -104.081528   
Correct output: 6.5890602195   | Program output: 7.081528      
Correct output: -74.0414611649 | Program output: -75.081528    
Correct output: 145.6031300201 | Program output: 145.081528    
Correct output: 125.9949201107 | Program output: 125.081528    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction tag_float_718} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction float_add} {:instruction float_yank} {:instruction float_mult} {:instruction float_frominteger} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_add} {:instruction in2} {:instruction integer_add} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_sub} {:instruction 19.42355631150687} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_tan} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction 8} {:instruction print_float} {:instruction float_div} {:instruction float_dec} {:instruction print_integer} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction integer_mult} {:instruction print_integer} {:instruction integer_min} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction integer_mult} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction float_min} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc tag_float_718 integer_dup_items integer_yank float_max in1 float_add float_yank float_mult float_frominteger integer_rot float_dup_items float_rot integer_sub integer_sub float_add in2 integer_add integer_inc float_add tag_integer_667 float_yank integer_dec integer_fromfloat float_sub float_rot integer_sub integer_sub 19.42355631150687 in2 integer_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_752 float_tan float_frominteger integer_dup_times float_dup float_pop 8 8 print_float float_div float_dec print_integer 8 print_float integer_shove integer_mult print_integer integer_min float_pop 8 print_float integer_shove integer_mult print_integer integer_min float_min integer_div integer_div integer_fromfloat float_swap integer_inc in1 float_min float_dec integer_pop float_frominteger integer_min)
Errors: [0.981 9 0.7466 9 0.2916 8 0.6814 7 0.6786 8 0.4667 7 0.2952 8 0.3138 10 0.6959 9 0.6782 9 0.3375 8 0.8671 8 0.6057 7 0.6696 9 0.4046 10 0.801 7 0.6224 7 0.6277 6 0.1113 8 0.1492 6 0.4123 7 0.4925 9 1.0401 9 0.5216 7 0.9134 9]
Total: 215.405
Mean: 4.3081
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3442.2766639000006
Median total errors in population: 218.40529999999995
Error averages by case: (131.73053580000013 9.676 125.63274430000057 9.927 138.7913745000016 8.957 128.1193809000003 8.997 132.1014193000002 8.682 127.98762110000044 9.395 128.14070829999943 8.827 121.06396969999953 10.993 129.27623439999974 8.322 123.99556400000014 9.621 126.25981519999993 9.672 115.12020769999988 8.471 121.55270029999991 7.67 127.63004849999903 8.784 128.99659580000005 10.312 120.33953239999921 9.552 130.30462299999857 7.939 148.13482059999845 6.936 122.83262380000026 9.095 136.4732306999997 7.983 143.54231300000137 7.872 124.84648920000028 9.484 130.9027242000001 9.054 128.63841680000056 8.344 126.10197039999973 9.196)
Error minima by case: (0.0186 6 0.253 7 0.2843 6 0.3183 7 0.321 7 0.4594 5 0.2137 7 0.2322 8 0.3037 6 0.3214 7 0.256 7 0.0707 6 0.3321 5 0.3301 6 0.3231 8 0.1986 7 0.3779 5 0.3727 4 0.1041 6 0.1419 6 0.405 6 0.4109 7 0.0221 6 0.3969 6 0.0244 7)
Average genome size in population (length): 74.726
Average program size in population (points): 75.726
Average percent parens in population: 0.013
Minimum age in population: 43.14234598726034
Maximum age in population: 47.26107437815517
Average age in population: 45.23377562279068
Median age in population: 45.24044360453263
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 42
Genome diversity (% unique Plush genomes):	 0.784
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.784
Total error diversity:				 0.273
Error (vector) diversity:			 0.295
Behavioral diversity:				 0.295
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 49703391
--- Timings ---
Current time: 1529615983797 milliseconds
Total Time:         109.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        46.0 seconds, 42.1%
Fitness Testing:     49.2 seconds, 45.0%
Report:              14.0 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Number IO problem report - generation 32
Test total error for best: 8566.104599999999
Test mean error for best: 4.28305
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20.081928    
Correct output: 33.3348829534  | Program output: 34.081928     
Correct output: -90.3731037929 | Program output: -90.081928    
Correct output: -87.4001767285 | Program output: -88.081928    
Correct output: -8.4029481486  | Program output: -9.081928     
Correct output: 18.5482005326  | Program output: 18.081928     
Correct output: 8.7863159396   | Program output: 9.081928      
Correct output: 24.7677635354  | Program output: 25.081928     
Correct output: -8.385649611   | Program output: -9.081928     
Correct output: 42.4033443172  | Program output: 43.081928     
Correct output: -5.7440283823  | Program output: -6.081928     
Correct output: 49.9486170067  | Program output: 49.081928     
Correct output: 8.6872116188   | Program output: 8.081928      
Correct output: 28.4119683961  | Program output: 29.081928     
Correct output: -51.6769002079 | Program output: -52.081928    
Correct output: 27.2805425748  | Program output: 28.081928     
Correct output: -20.7039689338 | Program output: -20.081928    
Correct output: -180.7091819668 | Program output: -180.081928   
Correct output: 122.1928520414 | Program output: 122.081928    
Correct output: -10.2306918248 | Program output: -10.081928    
Correct output: -104.493817403 | Program output: -104.081928   
Correct output: 6.5890602195   | Program output: 7.081928      
Correct output: -74.0414611649 | Program output: -75.081928    
Correct output: 145.6031300201 | Program output: 145.081928    
Correct output: 125.9949201107 | Program output: 125.081928    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction integer_swap} {:instruction float_cos} {:instruction tag_float_718} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction float_add} {:instruction float_yank} {:instruction float_mult} {:instruction float_yankdup} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction tagged_993} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_add} {:instruction integer_dup} {:instruction integer_add} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_swap} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_sub} {:instruction 19.42355631150687} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction float_max} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_tan} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction 69.54768671383735} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_div} {:instruction float_pop} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction float_tan} {:instruction float_max} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction 24} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_min} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction integer_mult} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction float_min} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger})
Best program: (float_inc integer_swap float_cos tag_float_718 integer_dup_items integer_yank float_max in1 float_add float_yank float_mult float_yankdup integer_dup_times float_dup_items tagged_993 integer_sub integer_sub float_add integer_dup integer_add integer_inc float_add tag_integer_667 float_yank integer_dec integer_fromfloat integer_swap float_rot integer_sub integer_sub 19.42355631150687 in2 integer_add tag_integer_667 float_yank float_max integer_fromfloat tagged_752 float_tan float_frominteger integer_dup_times float_dup float_pop 8 print_float 69.54768671383735 float_dec print_integer float_pop 8 print_float integer_shove float_dec print_integer float_pop float_min integer_div integer_div integer_div float_pop print_float integer_shove float_dec float_tan float_max integer_dup_times float_dup float_pop 8 print_float 24 integer_stackdepth print_integer integer_min float_pop 8 print_float integer_shove integer_mult print_integer integer_min float_min integer_div integer_div integer_fromfloat float_swap integer_inc in1 float_min float_dec integer_pop float_frominteger)
Errors: [0.9814 10 0.747 9 0.2912 7 0.6818 7 0.679 8 0.4663 8 0.2956 8 0.3142 11 0.6963 8 0.6786 9 0.3379 8 0.8667 8 0.6053 7 0.67 8 0.405 9 0.8014 8 0.622 7 0.6273 5 0.1109 8 0.1488 6 0.4119 7 0.4929 9 1.0405 9 0.5212 7 0.913 8]
Total: 213.40619999999998
Mean: 4.268124
Genome size: 92
Size: 93
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3306.8217903999985
Median total errors in population: 217.40609999999995
Error averages by case: (128.31671430000054 9.953 118.23496110000077 9.708 131.02850710000155 8.915 127.76330380000067 8.792 128.24670840000036 8.601 120.01906520000011 9.021 119.91189479999883 8.698 114.39032220000057 11.13 126.12579009999975 8.543 117.9393580999995 9.905 123.60263959999921 9.452 114.39015839999968 8.379 116.44798429999963 7.676 120.9016963999983 8.972 126.45405619999937 10.139 114.14200859999895 9.229 126.13083649999845 8.009 137.38789249999806 6.632 119.04973770000004 8.901 130.21371579999945 7.82 134.27336640000144 7.627 118.08173930000021 9.376 128.18590569999998 9.308 122.48354060000068 8.293 120.90888730000034 9.112)
Error minima by case: (0.0186 7 0.2468 8 0.2816 4 0.3183 7 0.321 7 0.4567 3 0.2289 7 0.2474 8 0.3037 6 0.3153 7 0.2712 7 0.1333 4 0.3947 3 0.3239 6 0.3383 8 0.1925 6 0.3779 3 0.3727 4 0.1013 5 0.1392 4 0.4023 5 0.4261 7 0.0404 7 0.4788 5 0.087 5)
Average genome size in population (length): 76.025
Average program size in population (points): 77.025
Average percent parens in population: 0.013
Minimum age in population: 44.14234598726034
Maximum age in population: 48.64657980157062
Average age in population: 46.60038544439711
Median age in population: 46.64552128477953
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.765
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.765
Total error diversity:				 0.256
Error (vector) diversity:			 0.28
Behavioral diversity:				 0.28
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 51629891
--- Timings ---
Current time: 1529615987628 milliseconds
Total Time:         113.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        47.4 seconds, 41.9%
Fitness Testing:     51.1 seconds, 45.2%
Report:              14.4 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Number IO problem report - generation 33
Test total error for best: 8566.104599999999
Test mean error for best: 4.28305
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20.081928    
Correct output: 33.3348829534  | Program output: 34.081928     
Correct output: -90.3731037929 | Program output: -90.081928    
Correct output: -87.4001767285 | Program output: -88.081928    
Correct output: -8.4029481486  | Program output: -9.081928     
Correct output: 18.5482005326  | Program output: 18.081928     
Correct output: 8.7863159396   | Program output: 9.081928      
Correct output: 24.7677635354  | Program output: 25.081928     
Correct output: -8.385649611   | Program output: -9.081928     
Correct output: 42.4033443172  | Program output: 43.081928     
Correct output: -5.7440283823  | Program output: -6.081928     
Correct output: 49.9486170067  | Program output: 49.081928     
Correct output: 8.6872116188   | Program output: 8.081928      
Correct output: 28.4119683961  | Program output: 29.081928     
Correct output: -51.6769002079 | Program output: -52.081928    
Correct output: 27.2805425748  | Program output: 28.081928     
Correct output: -20.7039689338 | Program output: -20.081928    
Correct output: -180.7091819668 | Program output: -180.081928   
Correct output: 122.1928520414 | Program output: 122.081928    
Correct output: -10.2306918248 | Program output: -10.081928    
Correct output: -104.493817403 | Program output: -104.081928   
Correct output: 6.5890602195   | Program output: 7.081928      
Correct output: -74.0414611649 | Program output: -75.081928    
Correct output: 145.6031300201 | Program output: 145.081928    
Correct output: 125.9949201107 | Program output: 125.081928    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction tag_float_718} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction float_add} {:instruction integer_mod} {:instruction float_mult} {:instruction float_yankdup} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_sub} {:instruction float_add} {:instruction integer_dup} {:instruction integer_add} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_sub} {:instruction 19.42355631150687} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_tan} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction 8} {:instruction print_float} {:instruction 69.54768671383735} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_div} {:instruction 24} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_min} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction integer_mult} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction float_min} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc tag_float_718 integer_dup_items integer_yank float_max in1 float_add integer_mod float_mult float_yankdup integer_dup_times float_dup_items float_rot float_frominteger integer_sub float_add integer_dup integer_add integer_inc float_add tag_integer_667 float_yank integer_dec integer_fromfloat float_sub float_rot integer_sub integer_sub 19.42355631150687 in2 integer_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_752 float_tan float_frominteger integer_dup_times float_dup float_pop 8 8 print_float 69.54768671383735 float_dec print_integer float_pop 8 print_float integer_shove float_dec print_integer float_pop float_min integer_div integer_div integer_div 24 integer_stackdepth print_integer integer_min float_pop 8 print_float integer_shove integer_mult print_integer integer_min float_min integer_div integer_div integer_fromfloat float_swap integer_inc in1 float_min float_dec integer_pop float_frominteger integer_min)
Errors: [0.9814 10 0.747 9 0.2912 7 0.6818 7 0.679 8 0.4663 8 0.2956 8 0.3142 11 0.6963 8 0.6786 9 0.3379 8 0.8667 8 0.6053 7 0.67 8 0.405 9 0.8014 8 0.622 7 0.6273 5 0.1109 8 0.1488 6 0.4119 7 0.4929 9 1.0405 9 0.5212 7 0.913 8]
Total: 213.40619999999998
Mean: 4.268124
Genome size: 81
Size: 82
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3592.4590928999987
Median total errors in population: 217.40579999999997
Error averages by case: (135.86583370000005 10.082 133.99872670000005 9.843 144.2277935000005 9.012 134.22844410000044 8.66 136.17041450000042 8.772 130.4445664000004 8.72 134.51828479999867 8.85 131.60343290000083 10.973 133.82949170000072 9.092 133.2886242999992 9.999 131.46232139999884 9.356 122.67198120000027 8.56 123.88133479999988 8.049 135.69038039999828 9.427 133.31636429999924 10.343 131.7810155000003 8.844 139.10693219999862 8.222 151.16698499999876 6.995 128.15008040000032 8.993 143.38573469999972 7.753 147.61380600000072 7.866 131.74699389999918 9.53 135.20295789999997 9.591 132.9558940999994 8.269 130.8656985000007 9.484)
Error minima by case: (0.0185 7 0.2469 8 0.2816 7 0.3182 6 0.321 6 0.4518 6 0.2238 7 0.2424 9 0.3037 6 0.3153 7 0.2661 7 0.0667 6 0.3281 5 0.324 6 0.3333 7 0.1925 7 0.378 6 0.3728 4 0.1013 6 0.1392 5 0.4023 6 0.4211 7 0.0262 6 0.4121 5 0.0204 7)
Average genome size in population (length): 76.823
Average program size in population (points): 77.823
Average percent parens in population: 0.013
Minimum age in population: 45.46997947245836
Maximum age in population: 49.59926951932721
Average age in population: 47.91679439212219
Median age in population: 47.98416472505778
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 51
Genome diversity (% unique Plush genomes):	 0.788
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 51
Syntactic diversity (% unique Push programs):	 0.788
Total error diversity:				 0.269
Error (vector) diversity:			 0.302
Behavioral diversity:				 0.302
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 53576191
--- Timings ---
Current time: 1529615991380 milliseconds
Total Time:         116.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        48.6 seconds, 41.7%
Fitness Testing:     53.0 seconds, 45.4%
Report:              14.9 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Number IO problem report - generation 34
Test total error for best: 8566.104599999999
Test mean error for best: 4.28305
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20.081928    
Correct output: 33.3348829534  | Program output: 34.081928     
Correct output: -90.3731037929 | Program output: -90.081928    
Correct output: -87.4001767285 | Program output: -88.081928    
Correct output: -8.4029481486  | Program output: -9.081928     
Correct output: 18.5482005326  | Program output: 18.081928     
Correct output: 8.7863159396   | Program output: 9.081928      
Correct output: 24.7677635354  | Program output: 25.081928     
Correct output: -8.385649611   | Program output: -9.081928     
Correct output: 42.4033443172  | Program output: 43.081928     
Correct output: -5.7440283823  | Program output: -6.081928     
Correct output: 49.9486170067  | Program output: 49.081928     
Correct output: 8.6872116188   | Program output: 8.081928      
Correct output: 28.4119683961  | Program output: 29.081928     
Correct output: -51.6769002079 | Program output: -52.081928    
Correct output: 27.2805425748  | Program output: 28.081928     
Correct output: -20.7039689338 | Program output: -20.081928    
Correct output: -180.7091819668 | Program output: -180.081928   
Correct output: 122.1928520414 | Program output: 122.081928    
Correct output: -10.2306918248 | Program output: -10.081928    
Correct output: -104.493817403 | Program output: -104.081928   
Correct output: 6.5890602195   | Program output: 7.081928      
Correct output: -74.0414611649 | Program output: -75.081928    
Correct output: 145.6031300201 | Program output: 145.081928    
Correct output: 125.9949201107 | Program output: 125.081928    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction integer_swap} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_max} {:instruction in1} {:instruction float_add} {:instruction float_yank} {:instruction integer_add} {:instruction integer_inc} {:instruction float_add} {:instruction integer_dup} {:instruction integer_add} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_add} {:instruction integer_dup} {:instruction integer_add} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_sub} {:instruction 19.42355631150687} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_tan} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction 8} {:instruction print_float} {:instruction 69.54768671383735} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_div} {:instruction 24} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_min} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction integer_mult} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction float_min} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc integer_swap integer_dup_items integer_yank float_inc integer_swap integer_dup_items integer_swap float_max in1 float_add float_yank integer_add integer_inc float_add integer_dup integer_add integer_inc float_add tag_integer_667 float_yank float_sub float_rot integer_sub integer_sub float_add integer_dup integer_add integer_inc float_add tag_integer_667 float_yank integer_dec integer_fromfloat float_sub float_rot integer_sub integer_sub 19.42355631150687 in2 integer_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_752 float_tan float_frominteger integer_dup_times float_dup float_pop 8 8 print_float 69.54768671383735 float_dec print_integer float_pop 8 print_float integer_shove float_dec print_integer float_pop float_min integer_div integer_div integer_div 24 integer_stackdepth print_integer integer_min float_pop 8 print_float integer_shove integer_mult print_integer integer_min float_min integer_div integer_div integer_fromfloat float_swap integer_inc in1 float_min float_dec integer_pop float_frominteger integer_min)
Errors: [0.9814 10 0.747 9 0.2912 7 0.6818 7 0.679 8 0.4663 8 0.2956 8 0.3142 11 0.6963 8 0.6786 9 0.3379 8 0.8667 8 0.6053 7 0.67 8 0.405 9 0.8014 8 0.622 7 0.6273 5 0.1109 8 0.1488 6 0.4119 7 0.4929 9 1.0405 9 0.5212 7 0.913 8]
Total: 213.40619999999998
Mean: 4.268124
Genome size: 91
Size: 92
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3677.859542099999
Median total errors in population: 215.405
Error averages by case: (138.26705919999978 9.878 137.91859879999984 9.902 146.0867788999989 8.901 135.51435720000075 8.311 138.6337494000004 8.795 134.7164069000006 8.35 136.56229569999812 8.881 135.06476930000127 10.802 136.51276760000093 9.421 136.8017559999987 9.76 134.61735909999865 9.038 129.6232890000011 8.898 126.62472070000004 7.963 138.99510729999844 9.719 135.2168599999993 10.629 134.79958980000146 8.258 142.72960039999816 8.193 152.23142050000033 7.234 136.46997520000025 9.04 146.64575430000068 7.403 148.86096129999956 8.149 133.44169549999808 9.615 136.95120599999987 9.745 140.69632999999865 8.233 138.96713400000053 9.792)
Error minima by case: (0.019 7 0.2461 7 0.2795 6 0.3186 6 0.3214 7 0.4518 5 0.2137 7 0.2424 8 0.3041 6 0.3145 7 0.2661 7 0.1329 6 0.3128 5 0.3232 6 0.3333 7 0.1917 6 0.3776 5 0.3723 4 0.0992 7 0.1371 5 0.4002 6 0.4211 7 0.0401 7 0.4784 6 0.0866 7)
Average genome size in population (length): 74.545
Average program size in population (points): 75.545
Average percent parens in population: 0.013
Minimum age in population: 46.46997947245836
Maximum age in population: 51.18743789265864
Average age in population: 49.35833270156162
Median age in population: 49.3869852994103
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 53
Genome diversity (% unique Plush genomes):	 0.777
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 53
Syntactic diversity (% unique Push programs):	 0.777
Total error diversity:				 0.236
Error (vector) diversity:			 0.258
Behavioral diversity:				 0.258
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 55465891
--- Timings ---
Current time: 1529615995313 milliseconds
Total Time:         120.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.1 seconds, 41.5%
Fitness Testing:     55.0 seconds, 45.5%
Report:              15.5 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Number IO problem report - generation 35
Test total error for best: 8600.106999999995
Test mean error for best: 4.30005
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20.081921    
Correct output: 33.3348829534  | Program output: 34.081921     
Correct output: -90.3731037929 | Program output: -90.081921    
Correct output: -87.4001767285 | Program output: -88.081921    
Correct output: -8.4029481486  | Program output: -9.081921     
Correct output: 18.5482005326  | Program output: 18.081921     
Correct output: 8.7863159396   | Program output: 9.081921      
Correct output: 24.7677635354  | Program output: 25.081921     
Correct output: -8.385649611   | Program output: -9.081921     
Correct output: 42.4033443172  | Program output: 43.081921     
Correct output: -5.7440283823  | Program output: -6.081921     
Correct output: 49.9486170067  | Program output: 49.081921     
Correct output: 8.6872116188   | Program output: 8.081921      
Correct output: 28.4119683961  | Program output: 29.081921     
Correct output: -51.6769002079 | Program output: -52.081921    
Correct output: 27.2805425748  | Program output: 28.081921     
Correct output: -20.7039689338 | Program output: -20.081921    
Correct output: -180.7091819668 | Program output: -180.081921   
Correct output: 122.1928520414 | Program output: 122.081921    
Correct output: -10.2306918248 | Program output: -10.081921    
Correct output: -104.493817403 | Program output: -104.081921   
Correct output: 6.5890602195   | Program output: 7.081921      
Correct output: -74.0414611649 | Program output: -75.081921    
Correct output: 145.6031300201 | Program output: 145.081921    
Correct output: 125.9949201107 | Program output: 125.081921    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction tag_float_718} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction float_add} {:instruction integer_mod} {:instruction float_mult} {:instruction float_yankdup} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_sub} {:instruction float_add} {:instruction integer_dup} {:instruction integer_add} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_sub} {:instruction 19.42355631150687} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_tan} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction 8} {:instruction print_float} {:instruction 69.54768671383735} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_div} {:instruction 24} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_min} {:instruction float_pop} {:instruction 8} {:instruction integer_div} {:instruction integer_shove} {:instruction integer_mult} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction float_min} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc tag_float_718 integer_dup_items integer_yank float_max in1 float_add integer_mod float_mult float_yankdup integer_dup_times float_dup_items float_rot float_frominteger integer_sub float_add integer_dup integer_add integer_inc float_add tag_integer_667 float_yank integer_dec integer_fromfloat float_sub float_rot integer_sub integer_sub 19.42355631150687 in2 integer_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_752 float_tan float_frominteger integer_dup_times float_dup float_pop 8 8 print_float 69.54768671383735 float_dec print_integer float_pop 8 print_float integer_shove float_dec print_integer float_pop float_min integer_div integer_div integer_div 24 integer_stackdepth print_integer integer_min float_pop 8 integer_div integer_shove integer_mult print_integer integer_min float_min integer_div integer_div integer_fromfloat float_swap integer_inc in1 float_min float_dec integer_pop float_frominteger integer_min)
Errors: [0.9814 9 0.747 9 0.2912 7 0.6817 8 0.679 8 0.4663 8 0.2956 8 0.3142 11 0.6963 7 0.6786 9 0.3379 8 0.8667 8 0.6053 7 0.67 8 0.405 9 0.8014 9 0.622 8 0.6273 6 0.1109 8 0.1488 7 0.4119 7 0.4929 8 1.0405 8 0.5212 6 0.913 7]
Total: 212.4061
Mean: 4.248122
Genome size: 81
Size: 82
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3584.5907304999996
Median total errors in population: 215.405
Error averages by case: (138.19513289999995 9.93 131.84118129999965 9.884 144.41018729999954 8.804 136.27811530000088 8.298 138.3663955000003 8.728 129.29544890000048 8.458 132.60206669999846 8.873 127.95921020000071 10.903 136.24526700000064 9.279 130.60075559999896 9.748 134.03712249999887 8.968 123.3522296000006 8.974 122.73222189999993 8.03 132.38043329999851 9.602 136.12454339999928 10.522 126.23069950000075 8.362 139.1633415999989 8.211 150.59153479999895 7.147 127.99081980000044 9.077 144.89821620000026 7.443 146.8603269000002 8.121 130.2178273999983 9.585 138.05132270000001 9.661 131.49476069999884 8.334 129.95656950000082 9.773)
Error minima by case: (0.0186 7 0.253 8 0.2843 5 0.3186 6 0.3214 7 0.4494 4 0.229 7 0.2475 8 0.3041 6 0.3214 7 0.2713 7 0.1329 5 0.3943 4 0.33 6 0.3384 8 0.1986 6 0.3776 4 0.3723 4 0.094 6 0.1419 5 0.405 5 0.4262 7 0.0401 6 0.4784 6 0.0866 6)
Average genome size in population (length): 76.32
Average program size in population (points): 77.32
Average percent parens in population: 0.013
Minimum age in population: 48.32519452506676
Maximum age in population: 52.55880425905343
Average age in population: 50.83659528554755
Median age in population: 50.85800036921864
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 29
Genome diversity (% unique Plush genomes):	 0.83
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.83
Total error diversity:				 0.239
Error (vector) diversity:			 0.259
Behavioral diversity:				 0.259
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 57399916
--- Timings ---
Current time: 1529615998987 milliseconds
Total Time:         124.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.4 seconds, 41.3%
Fitness Testing:     56.8 seconds, 45.7%
Report:              16.1 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Number IO problem report - generation 36
Test total error for best: 8597.106299999996
Test mean error for best: 4.29855
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20.0819216   
Correct output: 33.3348829534  | Program output: 34.0819216    
Correct output: -90.3731037929 | Program output: -90.0819216   
Correct output: -87.4001767285 | Program output: -88.0819216   
Correct output: -8.4029481486  | Program output: -9.0819216    
Correct output: 18.5482005326  | Program output: 18.0819216    
Correct output: 8.7863159396   | Program output: 9.0819216     
Correct output: 24.7677635354  | Program output: 25.0819216    
Correct output: -8.385649611   | Program output: -9.0819216    
Correct output: 42.4033443172  | Program output: 43.0819216    
Correct output: -5.7440283823  | Program output: -6.0819216    
Correct output: 49.9486170067  | Program output: 49.0819216    
Correct output: 8.6872116188   | Program output: 8.0819216     
Correct output: 28.4119683961  | Program output: 29.0819216    
Correct output: -51.6769002079 | Program output: -52.0819216   
Correct output: 27.2805425748  | Program output: 28.0819216    
Correct output: -20.7039689338 | Program output: -20.0819216   
Correct output: -180.7091819668 | Program output: -180.0819216  
Correct output: 122.1928520414 | Program output: 122.0819216   
Correct output: -10.2306918248 | Program output: -10.0819216   
Correct output: -104.493817403 | Program output: -104.0819216  
Correct output: 6.5890602195   | Program output: 7.0819216     
Correct output: -74.0414611649 | Program output: -75.0819216   
Correct output: 145.6031300201 | Program output: 145.0819216   
Correct output: 125.9949201107 | Program output: 125.0819216   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction tag_float_718} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction float_add} {:instruction float_yank} {:instruction float_dup_items} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_sub} {:instruction float_add} {:instruction integer_dup} {:instruction integer_add} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_sub} {:instruction 19.42355631150687} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_tan} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction 8} {:instruction print_float} {:instruction 69.54768671383735} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_div} {:instruction 24} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_min} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_add} {:instruction integer_mult} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction float_min} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc tag_float_718 integer_dup_items integer_yank float_max in1 float_add float_yank float_dup_items float_rot float_frominteger integer_sub float_add integer_dup integer_add integer_inc float_add tag_integer_667 float_yank integer_dec integer_fromfloat float_sub float_rot integer_sub integer_sub 19.42355631150687 in2 integer_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_752 float_tan float_frominteger integer_dup_times float_dup float_pop 8 8 print_float 69.54768671383735 float_dec print_integer float_pop 8 print_float integer_shove float_dec print_integer float_pop float_min integer_div integer_div integer_div 24 integer_stackdepth print_integer integer_min float_pop 8 print_float integer_add integer_mult print_integer integer_min float_min integer_div integer_div integer_fromfloat float_swap integer_inc in1 float_min float_dec integer_pop float_frominteger integer_min)
Errors: [0.9814 9 0.747 9 0.2912 8 0.6817 8 0.679 8 0.4663 8 0.2956 7 0.3142 11 0.6963 7 0.6786 9 0.3379 9 0.8667 7 0.6053 7 0.67 8 0.405 9 0.8014 9 0.622 8 0.6273 6 0.1109 8 0.1488 7 0.4119 7 0.4929 8 1.0405 7 0.5212 7 0.913 7]
Total: 212.4061
Mean: 4.248122
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3889.6233932999994
Median total errors in population: 215.405
Error averages by case: (148.2102792999999 10.22 146.9058543000009 9.823 152.73787630000132 8.515 146.7448937000008 8.423 148.42982560000098 8.781 144.11330530000006 8.69 146.00360989999888 8.834 143.721565299999 11.162 146.52904400000017 9.022 146.0838076999997 9.755 144.50785999999934 9.053 137.27145010000024 8.849 137.40102219999898 8.057 147.57729449999914 9.235 146.09640739999932 10.245 143.18298339999947 8.768 148.61110340000022 8.236 158.6493160999982 6.874 141.87562990000006 8.993 155.01975599999926 7.461 155.15130840000143 8.1 143.82445379999874 9.547 147.73346330000103 9.681 145.53386829999982 8.241 143.73441510000038 9.408)
Error minima by case: (0.0186 7 0.253 7 0.2837 6 0.3182 6 0.321 7 0.4588 6 0.2137 5 0.2322 8 0.3037 6 0.3214 7 0.256 6 0.1333 7 0.3947 6 0.33 6 0.3231 8 0.1986 6 0.3776 5 0.3723 5 0.1035 6 0.1413 5 0.4045 6 0.4109 7 0.0405 7 0.4788 6 0.087 6)
Average genome size in population (length): 80.319
Average program size in population (points): 81.319
Average percent parens in population: 0.012
Minimum age in population: 50.1693730042316
Maximum age in population: 54.45544785101083
Average age in population: 52.42968960290807
Median age in population: 52.45679471091717
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.808
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.808
Total error diversity:				 0.258
Error (vector) diversity:			 0.294
Behavioral diversity:				 0.294
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 59433641
--- Timings ---
Current time: 1529616002873 milliseconds
Total Time:         128.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.8 seconds, 41.1%
Fitness Testing:     58.8 seconds, 45.8%
Report:              16.6 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Number IO problem report - generation 37
Test total error for best: 8597.106299999996
Test mean error for best: 4.29855
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20.0819216   
Correct output: 33.3348829534  | Program output: 34.0819216    
Correct output: -90.3731037929 | Program output: -90.0819216   
Correct output: -87.4001767285 | Program output: -88.0819216   
Correct output: -8.4029481486  | Program output: -9.0819216    
Correct output: 18.5482005326  | Program output: 18.0819216    
Correct output: 8.7863159396   | Program output: 9.0819216     
Correct output: 24.7677635354  | Program output: 25.0819216    
Correct output: -8.385649611   | Program output: -9.0819216    
Correct output: 42.4033443172  | Program output: 43.0819216    
Correct output: -5.7440283823  | Program output: -6.0819216    
Correct output: 49.9486170067  | Program output: 49.0819216    
Correct output: 8.6872116188   | Program output: 8.0819216     
Correct output: 28.4119683961  | Program output: 29.0819216    
Correct output: -51.6769002079 | Program output: -52.0819216   
Correct output: 27.2805425748  | Program output: 28.0819216    
Correct output: -20.7039689338 | Program output: -20.0819216   
Correct output: -180.7091819668 | Program output: -180.0819216  
Correct output: 122.1928520414 | Program output: 122.0819216   
Correct output: -10.2306918248 | Program output: -10.0819216   
Correct output: -104.493817403 | Program output: -104.0819216  
Correct output: 6.5890602195   | Program output: 7.0819216     
Correct output: -74.0414611649 | Program output: -75.0819216   
Correct output: 145.6031300201 | Program output: 145.0819216   
Correct output: 125.9949201107 | Program output: 125.0819216   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction tag_float_718} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction float_add} {:instruction float_yank} {:instruction float_dup_items} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_sub} {:instruction float_add} {:instruction integer_dup} {:instruction integer_add} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_sub} {:instruction 19.42355631150687} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_tan} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction 8} {:instruction print_float} {:instruction 69.54768671383735} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_div} {:instruction 24} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_min} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_add} {:instruction integer_mult} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction float_min} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc tag_float_718 integer_dup_items integer_yank float_max in1 float_add float_yank float_dup_items float_rot float_frominteger integer_sub float_add integer_dup integer_add integer_inc float_add tag_integer_667 float_yank integer_dec integer_fromfloat float_sub float_rot integer_sub integer_sub 19.42355631150687 in2 integer_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_752 float_tan float_frominteger integer_dup_times float_dup float_pop 8 8 print_float 69.54768671383735 float_dec print_integer float_pop 8 print_float integer_shove float_dec print_integer float_pop float_min integer_div integer_div integer_div 24 integer_stackdepth print_integer integer_min float_pop 8 print_float integer_add integer_mult print_integer integer_min float_min integer_div integer_div integer_fromfloat float_swap integer_inc in1 float_min float_dec integer_pop float_frominteger integer_min)
Errors: [0.9814 9 0.747 9 0.2912 8 0.6817 8 0.679 8 0.4663 8 0.2956 7 0.3142 11 0.6963 7 0.6786 9 0.3379 9 0.8667 7 0.6053 7 0.67 8 0.405 9 0.8014 9 0.622 8 0.6273 6 0.1109 8 0.1488 7 0.4119 7 0.4929 8 1.0405 7 0.5212 7 0.913 7]
Total: 212.4061
Mean: 4.248122
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3930.103981399999
Median total errors in population: 213.40619999999998
Error averages by case: (152.52823619999958 10.327 144.0686183000012 9.715 157.9757785000027 8.41 150.94433670000024 8.517 151.92410860000103 8.785 145.02265609999984 8.893 146.13559009999983 8.784 142.67946679999784 11.294 149.64880600000038 8.761 143.2513452000005 9.7 147.56077700000046 9.079 138.08371119999993 8.847 139.36009159999915 8.08 144.8834252000001 8.93 149.96534579999954 10.047 142.79780749999833 8.988 149.54957770000124 8.272 165.0581825999973 6.782 143.13669159999978 8.984 155.61081569999897 7.527 160.59814850000242 8.139 142.84970849999968 9.402 151.77225800000156 9.568 147.12621120000037 8.224 144.3212868000002 9.196)
Error minima by case: (0.0186 6 0.253 7 0.2843 6 0.3182 6 0.321 7 0.4563 6 0.2239 6 0.2424 9 0.3037 6 0.3214 7 0.2662 7 0.1333 6 0.3947 6 0.33 6 0.3333 8 0.1986 7 0.3779 6 0.3727 5 0.1009 6 0.1419 5 0.405 6 0.4211 7 0.0405 7 0.4788 6 0.087 6)
Average genome size in population (length): 83.073
Average program size in population (points): 84.073
Average percent parens in population: 0.012
Minimum age in population: 51.82752790185623
Maximum age in population: 56.06375747955462
Average age in population: 53.92383892345622
Median age in population: 53.99668809988361
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.843
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.843
Total error diversity:				 0.28
Error (vector) diversity:			 0.312
Behavioral diversity:				 0.312
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 61535291
--- Timings ---
Current time: 1529616006840 milliseconds
Total Time:         132.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.3 seconds, 41.1%
Fitness Testing:     60.7 seconds, 45.9%
Report:              17.1 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Number IO problem report - generation 38
Test total error for best: 8597.106299999996
Test mean error for best: 4.29855
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20.0819216   
Correct output: 33.3348829534  | Program output: 34.0819216    
Correct output: -90.3731037929 | Program output: -90.0819216   
Correct output: -87.4001767285 | Program output: -88.0819216   
Correct output: -8.4029481486  | Program output: -9.0819216    
Correct output: 18.5482005326  | Program output: 18.0819216    
Correct output: 8.7863159396   | Program output: 9.0819216     
Correct output: 24.7677635354  | Program output: 25.0819216    
Correct output: -8.385649611   | Program output: -9.0819216    
Correct output: 42.4033443172  | Program output: 43.0819216    
Correct output: -5.7440283823  | Program output: -6.0819216    
Correct output: 49.9486170067  | Program output: 49.0819216    
Correct output: 8.6872116188   | Program output: 8.0819216     
Correct output: 28.4119683961  | Program output: 29.0819216    
Correct output: -51.6769002079 | Program output: -52.0819216   
Correct output: 27.2805425748  | Program output: 28.0819216    
Correct output: -20.7039689338 | Program output: -20.0819216   
Correct output: -180.7091819668 | Program output: -180.0819216  
Correct output: 122.1928520414 | Program output: 122.0819216   
Correct output: -10.2306918248 | Program output: -10.0819216   
Correct output: -104.493817403 | Program output: -104.0819216  
Correct output: 6.5890602195   | Program output: 7.0819216     
Correct output: -74.0414611649 | Program output: -75.0819216   
Correct output: 145.6031300201 | Program output: 145.0819216   
Correct output: 125.9949201107 | Program output: 125.0819216   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction tag_float_718} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction float_add} {:instruction float_yank} {:instruction float_dup_items} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_sub} {:instruction float_add} {:instruction integer_dup} {:instruction integer_add} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_sub} {:instruction 19.42355631150687} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_tan} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction 8} {:instruction print_float} {:instruction 69.54768671383735} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_div} {:instruction 24} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_min} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_add} {:instruction integer_mult} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction float_min} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc tag_float_718 integer_dup_items integer_yank float_max in1 float_add float_yank float_dup_items float_rot float_frominteger integer_sub float_add integer_dup integer_add integer_inc float_add tag_integer_667 float_yank integer_dec integer_fromfloat float_sub float_rot integer_sub integer_sub 19.42355631150687 in2 integer_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_752 float_tan float_frominteger integer_dup_times float_dup float_pop 8 8 print_float 69.54768671383735 float_dec print_integer float_pop 8 print_float integer_shove float_dec print_integer float_pop float_min integer_div integer_div integer_div 24 integer_stackdepth print_integer integer_min float_pop 8 print_float integer_add integer_mult print_integer integer_min float_min integer_div integer_div integer_fromfloat float_swap integer_inc in1 float_min float_dec integer_pop float_frominteger integer_min)
Errors: [0.9814 9 0.747 9 0.2912 8 0.6817 8 0.679 8 0.4663 8 0.2956 7 0.3142 11 0.6963 7 0.6786 9 0.3379 9 0.8667 7 0.6053 7 0.67 8 0.405 9 0.8014 9 0.622 8 0.6273 6 0.1109 8 0.1488 7 0.4119 7 0.4929 8 1.0405 7 0.5212 7 0.913 7]
Total: 212.4061
Mean: 4.248122
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4491.155877699999
Median total errors in population: 213.40619999999998
Error averages by case: (175.27954409999904 10.391 166.81625620000136 9.781 178.04070960000254 8.481 173.0124076999997 8.684 175.57585520000094 8.857 167.2883329 8.959 168.7515844000005 8.865 161.95339019999784 11.376 173.71712160000115 8.733 164.7769709000011 9.788 172.03781130000104 9.162 161.3035182000007 8.889 162.12038959999893 8.137 167.9695801000006 8.97 172.5952160999995 10.093 160.87529229999825 9.146 173.17738750000132 8.362 184.0706818999975 6.877 166.88171769999977 9.013 179.3423950999988 7.664 180.3497497000022 8.195 166.8108195000003 9.461 174.14714270000135 9.587 170.53086199999964 8.216 168.8801412000002 9.164)
Error minima by case: (0.0186 7 0.253 7 0.2812 6 0.3182 6 0.321 7 0.4563 5 0.2156 5 0.2341 9 0.3037 6 0.3214 7 0.2579 6 0.1333 6 0.3947 5 0.33 5 0.325 8 0.1977 7 0.378 5 0.3727 5 0.1009 6 0.1388 4 0.4019 5 0.4129 7 0.0405 6 0.4788 6 0.087 6)
Average genome size in population (length): 82.87
Average program size in population (points): 83.87
Average percent parens in population: 0.012
Minimum age in population: 52.82752790185623
Maximum age in population: 57.6181110493053
Average age in population: 55.3031118941994
Median age in population: 55.35917501551012
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.869
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.869
Total error diversity:				 0.257
Error (vector) diversity:			 0.306
Behavioral diversity:				 0.306
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 63632016
--- Timings ---
Current time: 1529616010813 milliseconds
Total Time:         136.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.8 seconds, 41.0%
Fitness Testing:     62.7 seconds, 46.0%
Report:              17.6 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Number IO problem report - generation 39
Test total error for best: 8600.106999999995
Test mean error for best: 4.30005
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20.081921    
Correct output: 33.3348829534  | Program output: 34.081921     
Correct output: -90.3731037929 | Program output: -90.081921    
Correct output: -87.4001767285 | Program output: -88.081921    
Correct output: -8.4029481486  | Program output: -9.081921     
Correct output: 18.5482005326  | Program output: 18.081921     
Correct output: 8.7863159396   | Program output: 9.081921      
Correct output: 24.7677635354  | Program output: 25.081921     
Correct output: -8.385649611   | Program output: -9.081921     
Correct output: 42.4033443172  | Program output: 43.081921     
Correct output: -5.7440283823  | Program output: -6.081921     
Correct output: 49.9486170067  | Program output: 49.081921     
Correct output: 8.6872116188   | Program output: 8.081921      
Correct output: 28.4119683961  | Program output: 29.081921     
Correct output: -51.6769002079 | Program output: -52.081921    
Correct output: 27.2805425748  | Program output: 28.081921     
Correct output: -20.7039689338 | Program output: -20.081921    
Correct output: -180.7091819668 | Program output: -180.081921   
Correct output: 122.1928520414 | Program output: 122.081921    
Correct output: -10.2306918248 | Program output: -10.081921    
Correct output: -104.493817403 | Program output: -104.081921   
Correct output: 6.5890602195   | Program output: 7.081921      
Correct output: -74.0414611649 | Program output: -75.081921    
Correct output: 145.6031300201 | Program output: 145.081921    
Correct output: 125.9949201107 | Program output: 125.081921    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction integer_swap} {:instruction float_cos} {:instruction float_max} {:instruction in1} {:instruction float_add} {:instruction integer_mod} {:instruction float_mult} {:instruction float_yankdup} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_sub} {:instruction float_add} {:instruction integer_dup} {:instruction integer_add} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_645} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_sub} {:instruction 19.42355631150687} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_tan} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction 8} {:instruction print_float} {:instruction 69.54768671383735} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_div} {:instruction 24} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_min} {:instruction float_pop} {:instruction 8} {:instruction integer_div} {:instruction integer_shove} {:instruction integer_mult} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction float_min} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc integer_swap float_cos float_max in1 float_add integer_mod float_mult float_yankdup integer_dup_times float_dup_items float_rot float_frominteger integer_sub float_add integer_dup integer_add integer_inc float_add tag_integer_645 float_yank integer_dec integer_fromfloat float_sub float_rot integer_sub integer_sub 19.42355631150687 in2 integer_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_752 float_tan float_frominteger integer_dup_times float_dup float_pop 8 8 print_float 69.54768671383735 float_dec print_integer float_pop 8 print_float integer_shove float_dec print_integer float_pop float_min integer_div integer_div integer_div 24 integer_stackdepth print_integer integer_min float_pop 8 integer_div integer_shove integer_mult print_integer integer_min float_min integer_div integer_div integer_fromfloat float_swap integer_inc in1 float_min float_dec integer_pop float_frominteger integer_min)
Errors: [0.9814 9 0.747 9 0.2912 7 0.6817 8 0.679 8 0.4663 8 0.2956 8 0.3142 11 0.6963 7 0.6786 9 0.3379 8 0.8667 8 0.6053 7 0.67 8 0.405 9 0.8014 9 0.622 8 0.6273 6 0.1109 8 0.1488 7 0.4119 7 0.4929 8 1.0405 8 0.5212 6 0.913 7]
Total: 212.4061
Mean: 4.248122
Genome size: 80
Size: 81
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4332.7995679
Median total errors in population: 213.40619999999998
Error averages by case: (168.90394769999915 10.152 161.6545503000015 9.739 171.256672500003 8.356 168.0089463999995 8.706 169.0290231000012 8.783 161.12393210000013 8.857 157.3944976 8.738 159.77330399999735 11.389 167.31009910000094 8.488 161.0801399000013 9.739 164.2385096000011 9.091 157.29489650000062 8.773 150.76739349999886 8.007 162.22629930000065 8.9 167.06753069999945 9.969 159.33900729999812 9.243 168.3383265000014 8.425 176.72999019999713 6.922 161.9231586999999 8.915 172.6929090999987 7.724 173.14890630000255 8.041 154.269987 9.228 168.67388130000145 9.333 164.70240389999975 7.987 163.49525530000014 8.851)
Error minima by case: (0.9076 7 0.253 8 0.2812 6 0.6079 7 0.6052 7 0.4518 6 0.2218 6 0.2404 9 0.6225 6 0.3214 8 0.2641 7 0.8567 7 0.5953 6 0.33 6 0.3312 7 0.1986 7 0.378 6 0.3727 5 0.1009 6 0.1388 5 0.4019 6 0.4191 6 0.9667 6 0.5112 6 0.903 6)
Average genome size in population (length): 82.462
Average program size in population (points): 83.462
Average percent parens in population: 0.012
Minimum age in population: 53.82752790185623
Maximum age in population: 58.91062753971346
Average age in population: 56.63319435886006
Median age in population: 56.64880432588689
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.85
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.85
Total error diversity:				 0.242
Error (vector) diversity:			 0.29
Behavioral diversity:				 0.29
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 65718716
--- Timings ---
Current time: 1529616014766 milliseconds
Total Time:         140.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.2 seconds, 40.8%
Fitness Testing:     64.7 seconds, 46.2%
Report:              18.0 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Number IO problem report - generation 40
Test total error for best: 8600.106999999995
Test mean error for best: 4.30005
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20.081921    
Correct output: 33.3348829534  | Program output: 34.081921     
Correct output: -90.3731037929 | Program output: -90.081921    
Correct output: -87.4001767285 | Program output: -88.081921    
Correct output: -8.4029481486  | Program output: -9.081921     
Correct output: 18.5482005326  | Program output: 18.081921     
Correct output: 8.7863159396   | Program output: 9.081921      
Correct output: 24.7677635354  | Program output: 25.081921     
Correct output: -8.385649611   | Program output: -9.081921     
Correct output: 42.4033443172  | Program output: 43.081921     
Correct output: -5.7440283823  | Program output: -6.081921     
Correct output: 49.9486170067  | Program output: 49.081921     
Correct output: 8.6872116188   | Program output: 8.081921      
Correct output: 28.4119683961  | Program output: 29.081921     
Correct output: -51.6769002079 | Program output: -52.081921    
Correct output: 27.2805425748  | Program output: 28.081921     
Correct output: -20.7039689338 | Program output: -20.081921    
Correct output: -180.7091819668 | Program output: -180.081921   
Correct output: 122.1928520414 | Program output: 122.081921    
Correct output: -10.2306918248 | Program output: -10.081921    
Correct output: -104.493817403 | Program output: -104.081921   
Correct output: 6.5890602195   | Program output: 7.081921      
Correct output: -74.0414611649 | Program output: -75.081921    
Correct output: 145.6031300201 | Program output: 145.081921    
Correct output: 125.9949201107 | Program output: 125.081921    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction integer_swap} {:instruction float_cos} {:instruction tag_float_718} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction float_add} {:instruction float_yank} {:instruction float_mult} {:instruction float_yankdup} {:instruction integer_dup_times} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_sub} {:instruction 19.42355631150687} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_tan} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction 8} {:instruction print_float} {:instruction 69.54768671383735} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_div} {:instruction 24} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_min} {:instruction float_pop} {:instruction 8} {:instruction integer_div} {:instruction integer_shove} {:instruction integer_mult} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction float_min} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc integer_swap float_cos tag_float_718 integer_dup_items integer_yank float_max in1 float_add float_yank float_mult float_yankdup integer_dup_times float_yank integer_dec integer_fromfloat float_sub float_rot integer_sub integer_sub 19.42355631150687 in2 integer_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_752 float_tan float_frominteger integer_dup_times float_dup float_pop 8 8 print_float 69.54768671383735 float_dec print_integer float_pop 8 print_float integer_shove float_dec print_integer float_pop float_min integer_div integer_div float_min integer_div integer_div integer_div 24 integer_stackdepth print_integer integer_min float_pop 8 integer_div integer_shove integer_mult print_integer integer_min float_min integer_div integer_div integer_fromfloat float_swap integer_inc in1 float_min float_dec integer_pop float_frominteger integer_min)
Errors: [0.9814 9 0.747 9 0.2912 7 0.6817 8 0.679 8 0.4663 8 0.2956 8 0.3142 11 0.6963 7 0.6786 9 0.3379 8 0.8667 8 0.6053 7 0.67 8 0.405 9 0.8014 9 0.622 8 0.6273 6 0.1109 8 0.1488 7 0.4119 7 0.4929 8 1.0405 8 0.5212 6 0.913 7]
Total: 212.4061
Mean: 4.248122
Genome size: 76
Size: 77
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4213.859790999997
Median total errors in population: 213.40619999999998
Error averages by case: (164.68360259999898 9.874 154.64081700000168 9.694 166.253392200003 8.46 162.9275871999985 8.971 164.85493350000138 8.769 159.63676150000006 8.913 155.34096200000016 8.641 152.1412498999974 11.389 162.71146380000113 8.133 154.07872210000107 9.646 160.7551332000013 9.068 152.11638480000033 8.758 154.04233239999886 8.063 154.14212640000048 8.962 162.83035539999952 9.948 152.34679049999818 9.473 159.67371140000137 8.766 172.53468379999694 7.277 156.98799499999973 8.973 164.09002679999855 8.045 167.85667290000262 8.115 153.02757630000002 8.935 164.5545697000015 9.02 160.46703209999959 7.764 158.89090850000022 8.617)
Error minima by case: (0.0186 7 0.253 7 0.2843 7 0.3183 7 0.321 7 0.4594 6 0.2329 6 0.2515 8 0.3037 6 0.3214 7 0.2752 7 0.1333 7 0.3947 6 0.33 5 0.3423 8 0.1986 7 0.378 6 0.3727 5 0.1041 6 0.1419 5 0.405 6 0.4302 7 0.0405 6 0.4788 6 0.087 6)
Average genome size in population (length): 81.837
Average program size in population (points): 82.837
Average percent parens in population: 0.012
Minimum age in population: 55.11890198261244
Maximum age in population: 60.33174635808973
Average age in population: 57.9451974117728
Median age in population: 58.01895321726079
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.823
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.823
Total error diversity:				 0.242
Error (vector) diversity:			 0.289
Behavioral diversity:				 0.289
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 67789366
--- Timings ---
Current time: 1529616018606 milliseconds
Total Time:         144.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.6 seconds, 40.7%
Fitness Testing:     66.7 seconds, 46.3%
Report:              18.7 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Number IO problem report - generation 41
Test total error for best: 8600.106999999995
Test mean error for best: 4.30005
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20.081921    
Correct output: 33.3348829534  | Program output: 34.081921     
Correct output: -90.3731037929 | Program output: -90.081921    
Correct output: -87.4001767285 | Program output: -88.081921    
Correct output: -8.4029481486  | Program output: -9.081921     
Correct output: 18.5482005326  | Program output: 18.081921     
Correct output: 8.7863159396   | Program output: 9.081921      
Correct output: 24.7677635354  | Program output: 25.081921     
Correct output: -8.385649611   | Program output: -9.081921     
Correct output: 42.4033443172  | Program output: 43.081921     
Correct output: -5.7440283823  | Program output: -6.081921     
Correct output: 49.9486170067  | Program output: 49.081921     
Correct output: 8.6872116188   | Program output: 8.081921      
Correct output: 28.4119683961  | Program output: 29.081921     
Correct output: -51.6769002079 | Program output: -52.081921    
Correct output: 27.2805425748  | Program output: 28.081921     
Correct output: -20.7039689338 | Program output: -20.081921    
Correct output: -180.7091819668 | Program output: -180.081921   
Correct output: 122.1928520414 | Program output: 122.081921    
Correct output: -10.2306918248 | Program output: -10.081921    
Correct output: -104.493817403 | Program output: -104.081921   
Correct output: 6.5890602195   | Program output: 7.081921      
Correct output: -74.0414611649 | Program output: -75.081921    
Correct output: 145.6031300201 | Program output: 145.081921    
Correct output: 125.9949201107 | Program output: 125.081921    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction tag_float_718} {:instruction integer_dup_items} {:instruction in1} {:instruction float_add} {:instruction float_yank} {:instruction integer_add} {:instruction integer_inc} {:instruction float_add} {:instruction integer_dup} {:instruction integer_add} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_add} {:instruction integer_dup} {:instruction integer_add} {:instruction integer_dup_items} {:instruction float_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mult} {:instruction 19.42355631150687} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_tan} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction 8} {:instruction print_float} {:instruction 69.54768671383735} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_div} {:instruction 24} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_min} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc tag_float_718 integer_dup_items in1 float_add float_yank integer_add integer_inc float_add integer_dup integer_add integer_inc float_add tag_integer_667 float_yank float_sub float_rot integer_sub integer_sub float_add integer_dup integer_add integer_dup_items float_add tag_integer_667 float_yank integer_dec integer_fromfloat float_sub float_rot integer_sub integer_mult 19.42355631150687 in2 integer_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_752 float_tan float_frominteger integer_dup_times float_dup float_pop 8 8 print_float 69.54768671383735 float_dec print_integer float_pop 8 print_float integer_shove float_dec print_integer float_pop float_min integer_div integer_div integer_div 24 integer_stackdepth print_integer integer_min float_pop 8 print_float integer_shove integer_stackdepth print_integer integer_min float_min integer_div integer_div integer_fromfloat float_swap integer_inc float_rot float_min float_dec integer_pop float_frominteger integer_min)
Errors: [0.9814 9 0.747 9 0.2912 7 0.6817 8 0.679 8 0.4663 8 0.2956 8 0.3142 11 0.6963 7 0.6786 9 0.3379 8 0.8667 8 0.6053 7 0.67 8 0.405 9 0.8014 9 0.622 8 0.6273 6 0.1109 8 0.1488 7 0.4119 7 0.4929 8 1.0405 8 0.5212 6 0.913 7]
Total: 212.4061
Mean: 4.248122
Genome size: 85
Size: 86
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4425.495367699998
Median total errors in population: 212.4061
Error averages by case: (170.53065719999867 9.801 166.65542500000177 9.756 174.1507329000028 8.504 168.21757869999817 9.083 170.6821403000012 8.788 166.8506777000001 8.934 163.67694020000076 8.72 164.66382519999743 11.461 169.0003838000015 8.078 166.14779660000195 9.669 167.42832800000156 9.105 160.32075580000148 8.779 157.04537929999893 8.099 167.19011410000135 9.035 168.8208408999995 9.951 163.87271859999808 9.618 170.49443980000143 8.863 181.66693549999695 7.423 165.97232539999982 8.939 173.78259059999863 8.139 176.62936000000244 8.093 159.9358769000007 8.91 170.45488420000143 8.896 170.5844014999992 7.663 167.94325950000015 8.47)
Error minima by case: (0.0124 7 0.253 7 0.2843 6 0.312 6 0.3148 6 0.4518 5 0.2137 7 0.2322 9 0.2975 6 0.3214 7 0.256 7 0.1333 6 0.3947 5 0.33 6 0.3231 8 0.1986 7 0.378 5 0.3727 5 0.1009 6 0.1388 6 0.405 6 0.4109 7 0.0405 6 0.4788 6 0.087 6)
Average genome size in population (length): 81.946
Average program size in population (points): 82.946
Average percent parens in population: 0.012
Minimum age in population: 56.15499885508325
Maximum age in population: 61.33174635808973
Average age in population: 59.33658437204348
Median age in population: 59.37304000050517
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.829
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.829
Total error diversity:				 0.233
Error (vector) diversity:			 0.285
Behavioral diversity:				 0.285
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 69862816
--- Timings ---
Current time: 1529616022687 milliseconds
Total Time:         148.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.0 seconds, 40.5%
Fitness Testing:     68.8 seconds, 46.5%
Report:              19.1 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Number IO problem report - generation 42
Test total error for best: 8600.106999999995
Test mean error for best: 4.30005
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20.081921    
Correct output: 33.3348829534  | Program output: 34.081921     
Correct output: -90.3731037929 | Program output: -90.081921    
Correct output: -87.4001767285 | Program output: -88.081921    
Correct output: -8.4029481486  | Program output: -9.081921     
Correct output: 18.5482005326  | Program output: 18.081921     
Correct output: 8.7863159396   | Program output: 9.081921      
Correct output: 24.7677635354  | Program output: 25.081921     
Correct output: -8.385649611   | Program output: -9.081921     
Correct output: 42.4033443172  | Program output: 43.081921     
Correct output: -5.7440283823  | Program output: -6.081921     
Correct output: 49.9486170067  | Program output: 49.081921     
Correct output: 8.6872116188   | Program output: 8.081921      
Correct output: 28.4119683961  | Program output: 29.081921     
Correct output: -51.6769002079 | Program output: -52.081921    
Correct output: 27.2805425748  | Program output: 28.081921     
Correct output: -20.7039689338 | Program output: -20.081921    
Correct output: -180.7091819668 | Program output: -180.081921   
Correct output: 122.1928520414 | Program output: 122.081921    
Correct output: -10.2306918248 | Program output: -10.081921    
Correct output: -104.493817403 | Program output: -104.081921   
Correct output: 6.5890602195   | Program output: 7.081921      
Correct output: -74.0414611649 | Program output: -75.081921    
Correct output: 145.6031300201 | Program output: 145.081921    
Correct output: 125.9949201107 | Program output: 125.081921    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction integer_swap} {:instruction float_cos} {:instruction tag_float_718} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction float_add} {:instruction float_yank} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_sub} {:instruction 19.42355631150687} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_tan} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction 8} {:instruction print_float} {:instruction 69.54768671383735} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_div} {:instruction 24} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_min} {:instruction float_pop} {:instruction 8} {:instruction integer_div} {:instruction integer_shove} {:instruction integer_mult} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc integer_swap float_cos tag_float_718 integer_dup_items integer_yank float_max in1 float_add float_yank integer_inc float_add tag_integer_667 float_yank integer_dec integer_fromfloat float_sub float_rot integer_sub integer_sub 19.42355631150687 in2 integer_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_752 float_tan float_frominteger integer_dup_times float_dup float_pop 8 8 print_float 69.54768671383735 float_dec print_integer float_pop 8 print_float integer_shove float_dec print_integer float_pop float_min integer_div integer_div integer_div 24 integer_stackdepth print_integer integer_min float_pop 8 integer_div integer_shove integer_mult print_integer integer_min float_min integer_div integer_div integer_fromfloat float_dec integer_pop float_frominteger integer_min)
Errors: [0.9814 9 0.747 9 0.2912 7 0.6817 8 0.679 8 0.4663 8 0.2956 8 0.3142 11 0.6963 7 0.6786 9 0.3379 8 0.8667 8 0.6053 7 0.67 8 0.405 9 0.8014 9 0.622 8 0.6273 6 0.1109 8 0.1488 7 0.4119 7 0.4929 8 1.0405 8 0.5212 6 0.913 7]
Total: 212.4061
Mean: 4.248122
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4966.737217499997
Median total errors in population: 212.4061
Error averages by case: (190.86645599999835 9.918 188.71778000000154 9.851 202.96504430000283 8.62 190.48535669999777 9.226 191.72678870000132 8.883 184.26873160000002 9.064 189.77007610000146 8.831 184.24121519999747 11.532 188.89169630000177 8.157 187.60470270000224 9.792 188.01797080000196 9.197 175.2866149000014 8.908 179.57880849999876 8.217 190.10086420000167 9.114 189.35597439999958 10.062 182.34430989999828 9.698 193.12987010000123 9.001 209.08952119999697 7.607 180.2669906999997 9.054 199.8927874999985 8.274 205.10869600000248 8.218 188.87444260000152 8.984 191.85099950000122 9.058 185.5453635999989 7.81 183.0691560000002 8.611)
Error minima by case: (0.0186 7 0.2528 7 0.2843 6 0.3183 7 0.321 7 0.4594 6 0.2328 6 0.2513 9 0.3037 6 0.3212 7 0.2751 7 0.1333 7 0.3947 6 0.3299 6 0.3422 8 0.1984 7 0.3779 5 0.3727 5 0.104 6 0.1419 6 0.405 6 0.43 7 0.0405 7 0.4788 5 0.087 6)
Average genome size in population (length): 81.836
Average program size in population (points): 82.836
Average percent parens in population: 0.012
Minimum age in population: 57.77400553176631
Maximum age in population: 63.02662931148325
Average age in population: 60.79207660043983
Median age in population: 60.7816230817275
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.879
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.879
Total error diversity:				 0.247
Error (vector) diversity:			 0.306
Behavioral diversity:				 0.306
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 71933566
--- Timings ---
Current time: 1529616026450 milliseconds
Total Time:         151.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.3 seconds, 40.4%
Fitness Testing:     70.7 seconds, 46.6%
Report:              19.7 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Number IO problem report - generation 43
Test total error for best: 8600.106999999995
Test mean error for best: 4.30005
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20.081921    
Correct output: 33.3348829534  | Program output: 34.081921     
Correct output: -90.3731037929 | Program output: -90.081921    
Correct output: -87.4001767285 | Program output: -88.081921    
Correct output: -8.4029481486  | Program output: -9.081921     
Correct output: 18.5482005326  | Program output: 18.081921     
Correct output: 8.7863159396   | Program output: 9.081921      
Correct output: 24.7677635354  | Program output: 25.081921     
Correct output: -8.385649611   | Program output: -9.081921     
Correct output: 42.4033443172  | Program output: 43.081921     
Correct output: -5.7440283823  | Program output: -6.081921     
Correct output: 49.9486170067  | Program output: 49.081921     
Correct output: 8.6872116188   | Program output: 8.081921      
Correct output: 28.4119683961  | Program output: 29.081921     
Correct output: -51.6769002079 | Program output: -52.081921    
Correct output: 27.2805425748  | Program output: 28.081921     
Correct output: -20.7039689338 | Program output: -20.081921    
Correct output: -180.7091819668 | Program output: -180.081921   
Correct output: 122.1928520414 | Program output: 122.081921    
Correct output: -10.2306918248 | Program output: -10.081921    
Correct output: -104.493817403 | Program output: -104.081921   
Correct output: 6.5890602195   | Program output: 7.081921      
Correct output: -74.0414611649 | Program output: -75.081921    
Correct output: 145.6031300201 | Program output: 145.081921    
Correct output: 125.9949201107 | Program output: 125.081921    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction tag_float_718} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction float_add} {:instruction integer_mod} {:instruction float_mult} {:instruction float_yankdup} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_sub} {:instruction float_add} {:instruction integer_dup} {:instruction integer_add} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_sub} {:instruction 19.42355631150687} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_667} {:instruction float_frominteger} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_tan} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction 8} {:instruction print_float} {:instruction 69.54768671383735} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction print_integer} {:instruction 27.98901660121959} {:instruction float_mod} {:instruction integer_div} {:instruction integer_div} {:instruction integer_div} {:instruction 24} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_min} {:instruction float_pop} {:instruction 8} {:instruction integer_div} {:instruction integer_shove} {:instruction integer_mult} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction in1} {:instruction float_yank} {:instruction integer_pop} {:instruction integer_min})
Best program: (float_inc tag_float_718 integer_dup_items integer_yank float_max in1 float_add integer_mod float_mult float_yankdup integer_dup_times float_dup_items float_rot float_frominteger integer_sub float_add integer_dup integer_add integer_inc float_add tag_integer_667 float_yank integer_dec integer_fromfloat float_sub float_rot integer_sub integer_sub 19.42355631150687 in2 integer_add tag_integer_667 float_frominteger integer_dec integer_fromfloat tagged_752 float_tan float_frominteger integer_dup_times float_dup float_pop 8 8 print_float 69.54768671383735 float_dec print_integer float_pop 8 print_float integer_shove float_dec print_integer 27.98901660121959 float_mod integer_div integer_div integer_div 24 integer_stackdepth print_integer integer_min float_pop 8 integer_div integer_shove integer_mult print_integer integer_min float_min integer_div integer_div integer_fromfloat float_swap in1 float_yank integer_pop integer_min)
Errors: [0.9814 9 0.747 9 0.2912 7 0.6817 8 0.679 8 0.4663 8 0.2956 8 0.3142 11 0.6963 7 0.6786 9 0.3379 8 0.8667 8 0.6053 7 0.67 8 0.405 9 0.8014 9 0.622 8 0.6273 6 0.1109 8 0.1488 7 0.4119 7 0.4929 8 1.0405 8 0.5212 6 0.913 7]
Total: 212.4061
Mean: 4.248122
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4926.705972699998
Median total errors in population: 212.4061
Error averages by case: (190.89135969999782 9.934 185.09431010000165 9.885 197.20225500000302 8.59 188.02555009999693 9.234 192.1647260000015 8.908 185.2769569000002 9.072 185.99402210000218 8.839 181.47797919999724 11.583 190.04311910000226 8.188 183.08166300000312 9.769 187.2486821000028 9.19 177.30461680000255 8.921 181.29012149999872 8.241 186.4256987000027 9.093 189.0427851999996 10.053 181.56733009999812 9.728 189.6611160000012 9.015 203.6477243999969 7.584 184.78655939999982 9.089 195.86236169999844 8.266 199.4340402000026 8.247 182.184401900002 8.99 189.94549660000135 9.078 187.422294699998 7.789 185.74580220000016 8.599)
Error minima by case: (0.8995 8 0.253 7 0.2812 6 0.5998 7 0.5971 7 0.4518 5 0.2137 7 0.2322 9 0.6144 6 0.3214 7 0.256 7 0.1333 6 0.5953 5 0.33 6 0.3231 8 0.1977 7 0.378 5 0.3727 5 0.1009 6 0.1388 5 0.4019 6 0.4109 7 0.9585 6 0.5112 6 0.903 6)
Average genome size in population (length): 81.419
Average program size in population (points): 82.419
Average percent parens in population: 0.012
Minimum age in population: 59.32924126469698
Maximum age in population: 64.0663920862994
Average age in population: 62.11821706822421
Median age in population: 62.13078950269937
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.877
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.877
Total error diversity:				 0.221
Error (vector) diversity:			 0.278
Behavioral diversity:				 0.279
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 73994091
--- Timings ---
Current time: 1529616030369 milliseconds
Total Time:         155.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.8 seconds, 40.3%
Fitness Testing:     72.7 seconds, 46.7%
Report:              20.2 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Number IO problem report - generation 44
Test total error for best: 8600.106999999995
Test mean error for best: 4.30005
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20.081921    
Correct output: 33.3348829534  | Program output: 34.081921     
Correct output: -90.3731037929 | Program output: -90.081921    
Correct output: -87.4001767285 | Program output: -88.081921    
Correct output: -8.4029481486  | Program output: -9.081921     
Correct output: 18.5482005326  | Program output: 18.081921     
Correct output: 8.7863159396   | Program output: 9.081921      
Correct output: 24.7677635354  | Program output: 25.081921     
Correct output: -8.385649611   | Program output: -9.081921     
Correct output: 42.4033443172  | Program output: 43.081921     
Correct output: -5.7440283823  | Program output: -6.081921     
Correct output: 49.9486170067  | Program output: 49.081921     
Correct output: 8.6872116188   | Program output: 8.081921      
Correct output: 28.4119683961  | Program output: 29.081921     
Correct output: -51.6769002079 | Program output: -52.081921    
Correct output: 27.2805425748  | Program output: 28.081921     
Correct output: -20.7039689338 | Program output: -20.081921    
Correct output: -180.7091819668 | Program output: -180.081921   
Correct output: 122.1928520414 | Program output: 122.081921    
Correct output: -10.2306918248 | Program output: -10.081921    
Correct output: -104.493817403 | Program output: -104.081921   
Correct output: 6.5890602195   | Program output: 7.081921      
Correct output: -74.0414611649 | Program output: -75.081921    
Correct output: 145.6031300201 | Program output: 145.081921    
Correct output: 125.9949201107 | Program output: 125.081921    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction tag_float_718} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction float_add} {:instruction integer_mod} {:instruction float_mult} {:instruction float_yankdup} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_sub} {:instruction float_add} {:instruction integer_dup} {:instruction integer_add} {:instruction float_add} {:instruction integer_dup} {:instruction integer_add} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_rot} {:instruction 19.42355631150687} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_tan} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction 8} {:instruction print_float} {:instruction 69.54768671383735} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_div} {:instruction 24} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_min} {:instruction float_sin} {:instruction 8} {:instruction integer_div} {:instruction integer_shove} {:instruction float_add} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction float_yankdup} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc tag_float_718 integer_dup_items integer_yank float_max in1 float_add integer_mod float_mult float_yankdup integer_dup_times float_dup_items float_rot float_frominteger integer_sub float_add integer_dup integer_add float_add integer_dup integer_add integer_inc float_add tag_integer_667 float_yank integer_dec integer_fromfloat float_sub float_rot integer_sub integer_rot 19.42355631150687 in2 integer_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_752 float_tan float_frominteger integer_dup_times float_dup float_pop 8 8 print_float 69.54768671383735 float_dec print_integer float_pop 8 print_float integer_shove float_dec print_integer float_pop float_min integer_div integer_div integer_div 24 integer_stackdepth print_integer integer_min float_sin 8 integer_div integer_shove float_add print_integer integer_min float_min integer_div integer_div integer_fromfloat float_swap integer_inc in1 float_yankdup float_dec integer_pop float_frominteger integer_min)
Errors: [0.9814 9 0.747 9 0.2912 7 0.6817 8 0.679 8 0.4663 8 0.2956 8 0.3142 11 0.6963 7 0.6786 9 0.3379 8 0.8667 8 0.6053 7 0.67 8 0.405 9 0.8014 9 0.622 8 0.6273 6 0.1109 8 0.1488 7 0.4119 7 0.4929 8 1.0405 8 0.5212 6 0.913 7]
Total: 212.4061
Mean: 4.248122
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 5248.973413699998
Median total errors in population: 212.4061
Error averages by case: (202.39748189999813 9.924 199.37493710000163 9.908 208.56999030000293 8.681 201.51361179999742 9.238 202.78431500000153 8.922 199.26818660000006 9.087 200.95739510000175 8.871 195.58199219999733 11.545 200.52851970000197 8.21 198.69539880000278 9.805 198.54990620000234 9.224 192.11298090000238 8.923 194.05700219999883 8.232 200.10946190000215 9.13 200.5099902999996 10.076 194.36100549999824 9.752 202.32415740000127 9.034 215.4590492999969 7.637 196.43776969999976 9.101 207.5199041999987 8.339 211.35298300000258 8.289 198.60158530000183 9.044 202.27461720000147 9.122 200.41079939999833 7.854 198.61337270000016 8.659)
Error minima by case: (0.0186 7 0.253 7 0.2842 5 0.3183 7 0.321 7 0.4593 4 0.2156 6 0.2341 8 0.3037 6 0.3214 7 0.2579 7 0.1333 5 0.3947 4 0.33 5 0.325 8 0.1986 7 0.3779 4 0.3727 5 0.104 6 0.1418 5 0.4049 6 0.4129 7 0.0405 7 0.4788 6 0.087 6)
Average genome size in population (length): 81.356
Average program size in population (points): 82.356
Average percent parens in population: 0.012
Minimum age in population: 61.1969799458202
Maximum age in population: 65.42431780201753
Average age in population: 63.56708740908067
Median age in population: 63.64870070701932
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.888
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.888
Total error diversity:				 0.254
Error (vector) diversity:			 0.313
Behavioral diversity:				 0.313
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 76052841
--- Timings ---
Current time: 1529616034226 milliseconds
Total Time:         159.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.2 seconds, 40.2%
Fitness Testing:     74.6 seconds, 46.7%
Report:              20.7 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Number IO problem report - generation 45
Test total error for best: 8600.106999999995
Test mean error for best: 4.30005
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20.081921    
Correct output: 33.3348829534  | Program output: 34.081921     
Correct output: -90.3731037929 | Program output: -90.081921    
Correct output: -87.4001767285 | Program output: -88.081921    
Correct output: -8.4029481486  | Program output: -9.081921     
Correct output: 18.5482005326  | Program output: 18.081921     
Correct output: 8.7863159396   | Program output: 9.081921      
Correct output: 24.7677635354  | Program output: 25.081921     
Correct output: -8.385649611   | Program output: -9.081921     
Correct output: 42.4033443172  | Program output: 43.081921     
Correct output: -5.7440283823  | Program output: -6.081921     
Correct output: 49.9486170067  | Program output: 49.081921     
Correct output: 8.6872116188   | Program output: 8.081921      
Correct output: 28.4119683961  | Program output: 29.081921     
Correct output: -51.6769002079 | Program output: -52.081921    
Correct output: 27.2805425748  | Program output: 28.081921     
Correct output: -20.7039689338 | Program output: -20.081921    
Correct output: -180.7091819668 | Program output: -180.081921   
Correct output: 122.1928520414 | Program output: 122.081921    
Correct output: -10.2306918248 | Program output: -10.081921    
Correct output: -104.493817403 | Program output: -104.081921   
Correct output: 6.5890602195   | Program output: 7.081921      
Correct output: -74.0414611649 | Program output: -75.081921    
Correct output: 145.6031300201 | Program output: 145.081921    
Correct output: 125.9949201107 | Program output: 125.081921    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction integer_swap} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction in2} {:instruction integer_swap} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_max} {:instruction in1} {:instruction float_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_dup} {:instruction integer_add} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_sub} {:instruction 19.42355631150687} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_tan} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction 8} {:instruction print_float} {:instruction 69.54768671383735} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_div} {:instruction 24} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_min} {:instruction float_pop} {:instruction 8} {:instruction integer_div} {:instruction integer_shove} {:instruction integer_mult} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction float_min} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc integer_swap integer_dup_items integer_yank in2 integer_swap integer_dup_items integer_swap float_max in1 float_add float_yank float_dup_times integer_dup integer_add integer_inc float_add tag_integer_667 float_yank integer_dec integer_fromfloat float_sub float_rot integer_sub integer_sub 19.42355631150687 in2 integer_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_752 float_tan float_frominteger integer_dup_times float_dup float_pop 8 8 print_float 69.54768671383735 float_dec print_integer float_pop 8 print_float integer_shove float_dec print_integer float_pop float_min integer_div integer_div integer_div 24 integer_stackdepth print_integer integer_min float_pop 8 integer_div integer_shove integer_mult print_integer integer_min float_min integer_div integer_div integer_fromfloat float_swap integer_inc in1 float_min float_dec integer_pop float_frominteger integer_min)
Errors: [0.9814 9 0.747 9 0.2912 7 0.6817 8 0.679 8 0.4663 8 0.2956 8 0.3142 11 0.6963 7 0.6786 9 0.3379 8 0.8667 8 0.6053 7 0.67 8 0.405 9 0.8014 9 0.622 8 0.6273 6 0.1109 8 0.1488 7 0.4119 7 0.4929 8 1.0405 8 0.5212 6 0.913 7]
Total: 212.4061
Mean: 4.248122
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4758.4040774999985
Median total errors in population: 212.4061
Error averages by case: (181.6244993999984 9.937 180.49569710000173 9.898 185.16268080000305 8.629 181.22310359999778 9.216 181.9613372000014 8.911 178.90324969999998 9.077 181.5861242000013 8.866 178.61245889999714 11.581 180.16970960000168 8.166 179.86810270000197 9.853 178.5559234000019 9.209 175.9661034000015 8.938 175.50095689999873 8.165 181.1525582000016 9.121 179.54715049999956 10.083 177.79507419999808 9.748 182.32045050000156 8.972 191.4878091999968 7.547 179.54962499999976 9.082 187.18464819999846 8.283 188.14830410000272 8.223 180.70382660000138 9.035 181.05006580000162 9.053 182.52185529999878 7.831 181.2857630000002 8.603)
Error minima by case: (0.0186 7 0.2517 7 0.2812 6 0.3183 7 0.1605 7 0.4563 5 0.2156 6 0.2341 9 0.1432 6 0.3202 7 0.2579 6 0.1333 7 0.3947 5 0.3288 5 0.325 8 0.1974 8 0.378 5 0.3727 5 0.1009 6 0.1388 5 0.4019 6 0.4129 7 0.0405 6 0.4788 6 0.087 5)
Average genome size in population (length): 81.672
Average program size in population (points): 82.672
Average percent parens in population: 0.012
Minimum age in population: 62.39909498012094
Maximum age in population: 66.83960858107889
Average age in population: 64.92729029598914
Median age in population: 64.96921585858814
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.872
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.872
Total error diversity:				 0.239
Error (vector) diversity:			 0.291
Behavioral diversity:				 0.292
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 78119816
--- Timings ---
Current time: 1529616038017 milliseconds
Total Time:         163.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.6 seconds, 40.1%
Fitness Testing:     76.6 seconds, 46.8%
Report:              21.2 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Number IO problem report - generation 46
Test total error for best: 8600.106999999995
Test mean error for best: 4.30005
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20.081921    
Correct output: 33.3348829534  | Program output: 34.081921     
Correct output: -90.3731037929 | Program output: -90.081921    
Correct output: -87.4001767285 | Program output: -88.081921    
Correct output: -8.4029481486  | Program output: -9.081921     
Correct output: 18.5482005326  | Program output: 18.081921     
Correct output: 8.7863159396   | Program output: 9.081921      
Correct output: 24.7677635354  | Program output: 25.081921     
Correct output: -8.385649611   | Program output: -9.081921     
Correct output: 42.4033443172  | Program output: 43.081921     
Correct output: -5.7440283823  | Program output: -6.081921     
Correct output: 49.9486170067  | Program output: 49.081921     
Correct output: 8.6872116188   | Program output: 8.081921      
Correct output: 28.4119683961  | Program output: 29.081921     
Correct output: -51.6769002079 | Program output: -52.081921    
Correct output: 27.2805425748  | Program output: 28.081921     
Correct output: -20.7039689338 | Program output: -20.081921    
Correct output: -180.7091819668 | Program output: -180.081921   
Correct output: 122.1928520414 | Program output: 122.081921    
Correct output: -10.2306918248 | Program output: -10.081921    
Correct output: -104.493817403 | Program output: -104.081921   
Correct output: 6.5890602195   | Program output: 7.081921      
Correct output: -74.0414611649 | Program output: -75.081921    
Correct output: 145.6031300201 | Program output: 145.081921    
Correct output: 125.9949201107 | Program output: 125.081921    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction tag_float_718} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction float_add} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_sub} {:instruction float_add} {:instruction integer_dup} {:instruction float_shove} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_sub} {:instruction 19.42355631150687} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_tan} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction 8} {:instruction print_float} {:instruction 69.54768671383735} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_div} {:instruction 24} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_min} {:instruction float_pop} {:instruction 8} {:instruction integer_div} {:instruction integer_shove} {:instruction integer_mult} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction float_min} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc tag_float_718 integer_dup_items integer_yank float_max in1 float_add integer_dup_times float_dup_items float_rot float_frominteger integer_sub float_add integer_dup float_shove integer_inc float_add tag_integer_667 float_yank integer_dec integer_fromfloat float_sub float_rot integer_sub integer_sub 19.42355631150687 in2 integer_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_752 float_tan float_frominteger integer_dup_times float_dup float_pop 8 8 print_float 69.54768671383735 float_dec print_integer float_pop 8 print_float integer_shove float_dec print_integer float_pop float_min integer_div integer_div integer_div 24 integer_stackdepth print_integer integer_min float_pop 8 integer_div integer_shove integer_mult print_integer integer_min float_min integer_div integer_div integer_fromfloat float_swap integer_inc in1 float_min float_dec integer_pop float_frominteger integer_min)
Errors: [0.9814 9 0.747 9 0.2912 7 0.6817 8 0.679 8 0.4663 8 0.2956 8 0.3142 11 0.6963 7 0.6786 9 0.3379 8 0.8667 8 0.6053 7 0.67 8 0.405 9 0.8014 9 0.622 8 0.6273 6 0.1109 8 0.1488 7 0.4119 7 0.4929 8 1.0405 8 0.5212 6 0.913 7]
Total: 212.4061
Mean: 4.248122
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 5356.802398399997
Median total errors in population: 212.4061
Error averages by case: (210.30619479999763 10.022 200.6930496000017 9.922 213.90257170000328 8.684 206.59803839999688 9.276 209.87236470000167 8.936 202.2220595000001 9.137 202.56601120000207 8.909 197.5029267999971 11.58 207.6400161000026 8.258 199.83388630000283 9.827 205.71744820000285 9.283 195.74798580000234 9.029 198.17730169999865 8.327 201.51342210000251 9.215 206.60435899999953 10.116 195.80572509999809 9.735 208.6879122000013 9.015 220.3708503999967 7.658 200.3108234999997 9.198 213.11426029999834 8.343 216.72398290000277 8.287 200.21829010000218 9.07 208.17422410000145 9.113 204.38307899999805 7.905 202.5436149000001 8.727)
Error minima by case: (0.0186 7 0.253 7 0.2812 6 0.3183 7 0.321 6 0.4563 6 0.2156 7 0.2341 8 0.3037 6 0.3214 7 0.2579 7 0.1333 7 0.3947 6 0.33 6 0.325 8 0.1986 7 0.3779 5 0.3727 5 0.1009 6 0.1388 6 0.4019 6 0.4129 7 0.0405 6 0.4788 6 0.087 6)
Average genome size in population (length): 81.431
Average program size in population (points): 82.431
Average percent parens in population: 0.012
Minimum age in population: 63.83552500487463
Maximum age in population: 68.41724621540158
Average age in population: 66.40047638120039
Median age in population: 66.4600081837631
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.898
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.898
Total error diversity:				 0.25
Error (vector) diversity:			 0.307
Behavioral diversity:				 0.307
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 80180916
--- Timings ---
Current time: 1529616041910 milliseconds
Total Time:         167.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.8 seconds, 39.9%
Fitness Testing:     78.7 seconds, 47.0%
Report:              21.7 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Number IO problem report - generation 47
Test total error for best: 8543.105999999996
Test mean error for best: 4.27155
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20.0819231   
Correct output: 33.3348829534  | Program output: 34.0819231    
Correct output: -90.3731037929 | Program output: -90.0819231   
Correct output: -87.4001767285 | Program output: -88.0819231   
Correct output: -8.4029481486  | Program output: -9.0819231    
Correct output: 18.5482005326  | Program output: 18.0819231    
Correct output: 8.7863159396   | Program output: 9.0819231     
Correct output: 24.7677635354  | Program output: 25.0819231    
Correct output: -8.385649611   | Program output: -9.0819231    
Correct output: 42.4033443172  | Program output: 43.0819231    
Correct output: -5.7440283823  | Program output: -6.0819231    
Correct output: 49.9486170067  | Program output: 49.0819231    
Correct output: 8.6872116188   | Program output: 8.0819231     
Correct output: 28.4119683961  | Program output: 29.0819231    
Correct output: -51.6769002079 | Program output: -52.0819231   
Correct output: 27.2805425748  | Program output: 28.0819231    
Correct output: -20.7039689338 | Program output: -20.0819231   
Correct output: -180.7091819668 | Program output: -180.0819231  
Correct output: 122.1928520414 | Program output: 122.0819231   
Correct output: -10.2306918248 | Program output: -10.0819231   
Correct output: -104.493817403 | Program output: -104.0819231  
Correct output: 6.5890602195   | Program output: 7.0819231     
Correct output: -74.0414611649 | Program output: -75.0819231   
Correct output: 145.6031300201 | Program output: 145.0819231   
Correct output: 125.9949201107 | Program output: 125.0819231   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction tag_float_718} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction float_add} {:instruction float_yank} {:instruction float_dup_items} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_sub} {:instruction float_add} {:instruction integer_dup} {:instruction integer_add} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mult} {:instruction 19.42355631150687} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_mult} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction 8} {:instruction print_float} {:instruction 69.54768671383735} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_div} {:instruction 24} {:instruction integer_dec} {:instruction print_integer} {:instruction integer_min} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction float_min} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc tag_float_718 integer_dup_items integer_yank float_max in1 float_add float_yank float_dup_items float_rot float_frominteger integer_sub float_add integer_dup integer_add integer_inc float_add tag_integer_667 tag_integer_667 float_yank integer_dec integer_fromfloat float_sub float_rot integer_sub integer_mult 19.42355631150687 in2 integer_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_752 float_mult float_frominteger integer_dup_times float_dup float_pop 8 8 print_float 69.54768671383735 float_dec print_integer float_pop 8 print_float integer_shove float_dec print_integer float_pop float_min integer_div integer_div integer_div 24 integer_dec print_integer integer_min float_pop 8 print_float integer_shove integer_stackdepth print_integer integer_min float_min integer_div integer_div integer_fromfloat float_swap integer_inc in1 float_min float_dec integer_pop float_frominteger integer_min)
Errors: [0.9814 9 0.747 8 0.2912 8 0.6817 8 0.679 9 0.4663 8 0.2956 8 0.3142 10 0.6963 7 0.6786 8 0.3379 8 0.8667 8 0.6053 8 0.67 7 0.405 9 0.8014 9 0.622 7 0.6273 6 0.1109 8 0.1488 7 0.4119 7 0.4929 9 1.0405 8 0.5212 6 0.913 7]
Total: 211.4061
Mean: 4.228122
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4838.244761799999
Median total errors in population: 212.4061
Error averages by case: (183.41991029999883 9.864 186.1014063000017 9.849 190.11242940000298 8.551 181.36825869999825 9.171 183.68414960000132 8.846 182.48744889999983 9.009 187.19870630000165 8.832 182.8165621999973 11.506 181.67423480000122 8.141 185.34480920000192 9.777 179.58587530000136 9.117 177.4539023000012 8.873 177.9204728999987 8.152 186.81195810000122 9.079 181.26653219999955 10.02 180.78845459999815 9.672 186.83669990000158 8.938 196.32356119999687 7.514 181.68251899999976 9.021 191.33516149999872 8.253 192.35830160000262 8.172 185.0601789000013 8.968 182.9363029000016 9.07 185.2780601999993 7.752 183.7048655000001 8.547)
Error minima by case: (0.0186 7 0.2529 7 0.2812 6 0.3182 7 0.321 7 0.4563 5 0.2289 7 0.2474 9 0.3037 6 0.3214 7 0.2712 7 0.1333 6 0.3947 5 0.33 6 0.3383 8 0.1986 7 0.378 5 0.3727 5 0.1009 6 0.1388 5 0.4019 6 0.4261 7 0.0405 6 0.4788 6 0.087 6)
Average genome size in population (length): 81.346
Average program size in population (points): 82.346
Average percent parens in population: 0.012
Minimum age in population: 65.43774421524027
Maximum age in population: 70.04775963780205
Average age in population: 67.78024089382646
Median age in population: 67.79691869220296
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.887
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.887
Total error diversity:				 0.229
Error (vector) diversity:			 0.282
Behavioral diversity:				 0.282
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 82239741
--- Timings ---
Current time: 1529616045674 milliseconds
Total Time:         171.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.2 seconds, 39.8%
Fitness Testing:     80.6 seconds, 47.1%
Report:              22.1 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Number IO problem report - generation 48
Test total error for best: 8543.105999999996
Test mean error for best: 4.27155
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20.0819231   
Correct output: 33.3348829534  | Program output: 34.0819231    
Correct output: -90.3731037929 | Program output: -90.0819231   
Correct output: -87.4001767285 | Program output: -88.0819231   
Correct output: -8.4029481486  | Program output: -9.0819231    
Correct output: 18.5482005326  | Program output: 18.0819231    
Correct output: 8.7863159396   | Program output: 9.0819231     
Correct output: 24.7677635354  | Program output: 25.0819231    
Correct output: -8.385649611   | Program output: -9.0819231    
Correct output: 42.4033443172  | Program output: 43.0819231    
Correct output: -5.7440283823  | Program output: -6.0819231    
Correct output: 49.9486170067  | Program output: 49.0819231    
Correct output: 8.6872116188   | Program output: 8.0819231     
Correct output: 28.4119683961  | Program output: 29.0819231    
Correct output: -51.6769002079 | Program output: -52.0819231   
Correct output: 27.2805425748  | Program output: 28.0819231    
Correct output: -20.7039689338 | Program output: -20.0819231   
Correct output: -180.7091819668 | Program output: -180.0819231  
Correct output: 122.1928520414 | Program output: 122.0819231   
Correct output: -10.2306918248 | Program output: -10.0819231   
Correct output: -104.493817403 | Program output: -104.0819231  
Correct output: 6.5890602195   | Program output: 7.0819231     
Correct output: -74.0414611649 | Program output: -75.0819231   
Correct output: 145.6031300201 | Program output: 145.0819231   
Correct output: 125.9949201107 | Program output: 125.0819231   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction tag_float_718} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction float_add} {:instruction float_yank} {:instruction float_dup_items} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_sub} {:instruction float_add} {:instruction integer_dup} {:instruction integer_add} {:instruction integer_inc} {:instruction float_add} {:instruction float_max} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mult} {:instruction 19.42355631150687} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_mult} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction 8} {:instruction print_float} {:instruction 69.54768671383735} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_div} {:instruction 24} {:instruction integer_dec} {:instruction print_integer} {:instruction integer_min} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction float_min} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc tag_float_718 integer_dup_items integer_yank float_max in1 float_add float_yank float_dup_items float_rot float_frominteger integer_sub float_add integer_dup integer_add integer_inc float_add float_max tag_integer_667 float_yank integer_dec integer_fromfloat float_sub float_rot integer_sub integer_mult 19.42355631150687 in2 integer_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_752 float_mult float_frominteger integer_dup_times float_dup float_pop 8 8 print_float 69.54768671383735 float_dec print_integer float_pop 8 print_float integer_shove float_dec print_integer float_pop float_min integer_div integer_div integer_div 24 integer_dec print_integer integer_min float_pop 8 print_float integer_shove integer_stackdepth print_integer integer_min float_min integer_div integer_div integer_fromfloat float_swap integer_inc in1 float_min float_dec integer_pop float_frominteger integer_min)
Errors: [0.9814 9 0.747 8 0.2912 8 0.6817 8 0.679 9 0.4663 8 0.2956 8 0.3142 10 0.6963 7 0.6786 8 0.3379 8 0.8667 8 0.6053 8 0.67 7 0.405 9 0.8014 9 0.622 7 0.6273 6 0.1109 8 0.1488 7 0.4119 7 0.4929 9 1.0405 8 0.5212 6 0.913 7]
Total: 211.4061
Mean: 4.228122
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 5304.971418599998
Median total errors in population: 212.4061
Error averages by case: (202.09136629999833 9.882 204.6412514000017 9.822 213.64363210000346 8.596 198.84387929999733 9.182 202.43017830000161 8.891 197.90418830000002 9.036 205.58954830000215 8.827 203.28450439999682 11.506 200.48336890000184 8.158 203.57875550000313 9.739 198.4721641000024 9.19 191.1033425000022 8.904 192.06310489999842 8.187 206.04179330000244 9.106 199.29199599999953 10.025 203.40207919999804 9.675 209.61241900000135 8.956 219.27195419999657 7.532 195.4137569999998 9.051 214.2834487999982 8.256 216.17542560000297 8.186 203.43048020000225 8.986 200.7184628000015 9.007 200.44921159999828 7.787 197.68110660000005 8.583)
Error minima by case: (0.0186 7 0.2529 7 0.2812 6 0.3182 6 0.321 7 0.4518 6 0.2299 6 0.2484 9 0.3037 6 0.3214 7 0.2722 7 0.1333 7 0.3947 6 0.33 6 0.3393 8 0.1986 8 0.378 6 0.3727 5 0.1009 6 0.1388 6 0.4019 6 0.4271 6 0.0405 6 0.4788 6 0.087 6)
Average genome size in population (length): 81.221
Average program size in population (points): 82.221
Average percent parens in population: 0.012
Minimum age in population: 66.48221726732646
Maximum age in population: 71.14940961622949
Average age in population: 69.18581572834293
Median age in population: 69.2119206303731
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.887
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.887
Total error diversity:				 0.257
Error (vector) diversity:			 0.309
Behavioral diversity:				 0.309
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 84295616
--- Timings ---
Current time: 1529616049722 milliseconds
Total Time:         175.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.7 seconds, 39.8%
Fitness Testing:     82.7 seconds, 47.2%
Report:              22.6 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Number IO problem report - generation 49
Test total error for best: 8543.105999999996
Test mean error for best: 4.27155
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20.0819231   
Correct output: 33.3348829534  | Program output: 34.0819231    
Correct output: -90.3731037929 | Program output: -90.0819231   
Correct output: -87.4001767285 | Program output: -88.0819231   
Correct output: -8.4029481486  | Program output: -9.0819231    
Correct output: 18.5482005326  | Program output: 18.0819231    
Correct output: 8.7863159396   | Program output: 9.0819231     
Correct output: 24.7677635354  | Program output: 25.0819231    
Correct output: -8.385649611   | Program output: -9.0819231    
Correct output: 42.4033443172  | Program output: 43.0819231    
Correct output: -5.7440283823  | Program output: -6.0819231    
Correct output: 49.9486170067  | Program output: 49.0819231    
Correct output: 8.6872116188   | Program output: 8.0819231     
Correct output: 28.4119683961  | Program output: 29.0819231    
Correct output: -51.6769002079 | Program output: -52.0819231   
Correct output: 27.2805425748  | Program output: 28.0819231    
Correct output: -20.7039689338 | Program output: -20.0819231   
Correct output: -180.7091819668 | Program output: -180.0819231  
Correct output: 122.1928520414 | Program output: 122.0819231   
Correct output: -10.2306918248 | Program output: -10.0819231   
Correct output: -104.493817403 | Program output: -104.0819231  
Correct output: 6.5890602195   | Program output: 7.0819231     
Correct output: -74.0414611649 | Program output: -75.0819231   
Correct output: 145.6031300201 | Program output: 145.0819231   
Correct output: 125.9949201107 | Program output: 125.0819231   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction tag_float_718} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction float_add} {:instruction float_yank} {:instruction float_dup_items} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_sub} {:instruction float_add} {:instruction integer_dup} {:instruction integer_add} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mult} {:instruction 19.42355631150687} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_mult} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction 8} {:instruction print_float} {:instruction 69.54768671383735} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_div} {:instruction 24} {:instruction integer_dec} {:instruction print_integer} {:instruction integer_min} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction float_min} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc tag_float_718 integer_dup_items integer_yank float_max in1 float_add float_yank float_dup_items float_rot float_frominteger integer_sub float_add integer_dup integer_add integer_inc float_add tag_integer_667 tag_integer_667 float_yank integer_dec integer_fromfloat float_sub float_rot integer_sub integer_mult 19.42355631150687 in2 integer_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_752 float_mult float_frominteger integer_dup_times float_dup float_pop 8 8 print_float 69.54768671383735 float_dec print_integer float_pop 8 print_float integer_shove float_dec print_integer float_pop float_min integer_div integer_div integer_div 24 integer_dec print_integer integer_min float_pop 8 print_float integer_shove integer_stackdepth print_integer integer_min float_min integer_div integer_div integer_fromfloat float_swap integer_inc in1 float_min float_dec integer_pop float_frominteger integer_min)
Errors: [0.9814 9 0.747 8 0.2912 8 0.6817 8 0.679 9 0.4663 8 0.2956 8 0.3142 10 0.6963 7 0.6786 8 0.3379 8 0.8667 8 0.6053 8 0.67 7 0.405 9 0.8014 9 0.622 7 0.6273 6 0.1109 8 0.1488 7 0.4119 7 0.4929 9 1.0405 8 0.5212 6 0.913 7]
Total: 211.4061
Mean: 4.228122
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 5210.117440799998
Median total errors in population: 212.4061
Error averages by case: (204.98352599999754 9.978 194.27589740000167 9.888 207.28241390000304 8.666 201.9326634999967 9.236 205.48976750000142 8.999 199.92939620000007 9.089 195.63279800000242 8.896 191.1100081999974 11.539 203.4765186000026 8.236 193.50538140000316 9.78 201.73015830000307 9.208 189.8050501000029 8.965 195.00322199999854 8.284 195.04470690000267 9.155 202.28222189999946 10.081 190.70301319999814 9.714 197.06973360000129 8.965 212.98563349999677 7.594 195.1013650999998 9.1 203.4377575999985 8.301 209.05963570000281 8.224 193.59453070000237 9.1 203.5949184000016 9.112 199.10219879999775 7.82 197.4269243000002 8.628)
Error minima by case: (0.0186 7 0.2529 7 0.2843 6 0.3183 7 0.321 7 0.4594 5 0.2289 6 0.2474 8 0.3037 6 0.3214 7 0.2712 7 0.1333 6 0.3947 5 0.33 6 0.3383 8 0.1986 8 0.3779 5 0.3727 5 0.1037 6 0.1419 6 0.4051 6 0.4261 7 0.0405 7 0.4788 6 0.087 6)
Average genome size in population (length): 81.423
Average program size in population (points): 82.423
Average percent parens in population: 0.012
Minimum age in population: 68.11737781690044
Maximum age in population: 72.7987277988676
Average age in population: 70.56430938870157
Median age in population: 70.62342991958462
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.89
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.89
Total error diversity:				 0.248
Error (vector) diversity:			 0.304
Behavioral diversity:				 0.304
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 86356741
--- Timings ---
Current time: 1529616053500 milliseconds
Total Time:         178.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.1 seconds, 39.7%
Fitness Testing:     84.6 seconds, 47.3%
Report:              23.1 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Number IO problem report - generation 50
Test total error for best: 8543.105999999996
Test mean error for best: 4.27155
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20.0819231   
Correct output: 33.3348829534  | Program output: 34.0819231    
Correct output: -90.3731037929 | Program output: -90.0819231   
Correct output: -87.4001767285 | Program output: -88.0819231   
Correct output: -8.4029481486  | Program output: -9.0819231    
Correct output: 18.5482005326  | Program output: 18.0819231    
Correct output: 8.7863159396   | Program output: 9.0819231     
Correct output: 24.7677635354  | Program output: 25.0819231    
Correct output: -8.385649611   | Program output: -9.0819231    
Correct output: 42.4033443172  | Program output: 43.0819231    
Correct output: -5.7440283823  | Program output: -6.0819231    
Correct output: 49.9486170067  | Program output: 49.0819231    
Correct output: 8.6872116188   | Program output: 8.0819231     
Correct output: 28.4119683961  | Program output: 29.0819231    
Correct output: -51.6769002079 | Program output: -52.0819231   
Correct output: 27.2805425748  | Program output: 28.0819231    
Correct output: -20.7039689338 | Program output: -20.0819231   
Correct output: -180.7091819668 | Program output: -180.0819231  
Correct output: 122.1928520414 | Program output: 122.0819231   
Correct output: -10.2306918248 | Program output: -10.0819231   
Correct output: -104.493817403 | Program output: -104.0819231  
Correct output: 6.5890602195   | Program output: 7.0819231     
Correct output: -74.0414611649 | Program output: -75.0819231   
Correct output: 145.6031300201 | Program output: 145.0819231   
Correct output: 125.9949201107 | Program output: 125.0819231   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction tag_float_718} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction float_add} {:instruction float_yank} {:instruction float_dup_items} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_sub} {:instruction float_add} {:instruction integer_dup} {:instruction integer_add} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mult} {:instruction 19.42355631150687} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_mult} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction 8} {:instruction print_float} {:instruction 69.54768671383735} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_div} {:instruction 24} {:instruction integer_dec} {:instruction print_integer} {:instruction integer_min} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction float_min} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc tag_float_718 integer_dup_items integer_yank float_max in1 float_add float_yank float_dup_items float_rot float_frominteger integer_sub float_add integer_dup integer_add integer_inc float_add tag_integer_667 tag_integer_667 float_yank integer_dec integer_fromfloat float_sub float_rot integer_sub integer_mult 19.42355631150687 in2 integer_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_752 float_mult float_frominteger integer_dup_times float_dup float_pop 8 8 print_float 69.54768671383735 float_dec print_integer float_pop 8 print_float integer_shove float_dec print_integer float_pop float_min integer_div integer_div integer_div 24 integer_dec print_integer integer_min float_pop 8 print_float integer_shove integer_stackdepth print_integer integer_min float_min integer_div integer_div integer_fromfloat float_swap integer_inc in1 float_min float_dec integer_pop float_frominteger integer_min)
Errors: [0.9814 9 0.747 8 0.2912 8 0.6817 8 0.679 9 0.4663 8 0.2956 8 0.3142 10 0.6963 7 0.6786 8 0.3379 8 0.8667 8 0.6053 8 0.67 7 0.405 9 0.8014 9 0.622 7 0.6273 6 0.1109 8 0.1488 7 0.4119 7 0.4929 9 1.0405 8 0.5212 6 0.913 7]
Total: 211.4061
Mean: 4.228122
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4743.9092679999985
Median total errors in population: 212.4061
Error averages by case: (180.32158159999838 9.956 181.98644530000144 9.802 189.01090470000267 8.771 179.92089709999772 9.281 181.53592540000116 9.09 175.6426954000001 9.055 183.55565460000162 8.956 178.26817409999762 11.445 179.4139272000018 8.258 180.28520500000243 9.681 176.61237050000207 9.146 168.49404690000168 8.978 170.8489975999988 8.376 182.712442400002 9.058 178.9770924999995 10.143 176.9417720999982 9.728 183.52586660000122 8.879 195.9627864999971 7.688 175.6970766999999 9.092 191.09046759999862 8.294 191.53731200000234 8.316 179.38124460000162 9.206 179.91944190000135 9.225 178.6211217999987 7.816 176.75481790000018 8.651)
Error minima by case: (0.0186 7 0.253 7 0.2812 3 0.3183 7 0.321 7 0.4563 2 0.2327 6 0.2512 9 0.3037 6 0.3214 7 0.275 6 0.1333 3 0.3947 2 0.33 5 0.3421 8 0.1986 7 0.3779 2 0.3727 4 0.1009 4 0.1388 3 0.4019 4 0.4299 7 0.0405 7 0.4788 4 0.087 4)
Average genome size in population (length): 80.514
Average program size in population (points): 81.514
Average percent parens in population: 0.012
Minimum age in population: 69.36403760730627
Maximum age in population: 74.01449278650782
Average age in population: 71.92278346875786
Median age in population: 71.96368047163217
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 34
Genome diversity (% unique Plush genomes):	 0.855
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.855
Total error diversity:				 0.255
Error (vector) diversity:			 0.32
Behavioral diversity:				 0.32
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 88394841
--- Timings ---
Current time: 1529616057737 milliseconds
Total Time:         183.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        72.5 seconds, 39.6%
Fitness Testing:     86.8 seconds, 47.4%
Report:              23.6 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Number IO problem report - generation 51
Test total error for best: 8543.105999999996
Test mean error for best: 4.27155
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20.0819231   
Correct output: 33.3348829534  | Program output: 34.0819231    
Correct output: -90.3731037929 | Program output: -90.0819231   
Correct output: -87.4001767285 | Program output: -88.0819231   
Correct output: -8.4029481486  | Program output: -9.0819231    
Correct output: 18.5482005326  | Program output: 18.0819231    
Correct output: 8.7863159396   | Program output: 9.0819231     
Correct output: 24.7677635354  | Program output: 25.0819231    
Correct output: -8.385649611   | Program output: -9.0819231    
Correct output: 42.4033443172  | Program output: 43.0819231    
Correct output: -5.7440283823  | Program output: -6.0819231    
Correct output: 49.9486170067  | Program output: 49.0819231    
Correct output: 8.6872116188   | Program output: 8.0819231     
Correct output: 28.4119683961  | Program output: 29.0819231    
Correct output: -51.6769002079 | Program output: -52.0819231   
Correct output: 27.2805425748  | Program output: 28.0819231    
Correct output: -20.7039689338 | Program output: -20.0819231   
Correct output: -180.7091819668 | Program output: -180.0819231  
Correct output: 122.1928520414 | Program output: 122.0819231   
Correct output: -10.2306918248 | Program output: -10.0819231   
Correct output: -104.493817403 | Program output: -104.0819231  
Correct output: 6.5890602195   | Program output: 7.0819231     
Correct output: -74.0414611649 | Program output: -75.0819231   
Correct output: 145.6031300201 | Program output: 145.0819231   
Correct output: 125.9949201107 | Program output: 125.0819231   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_float_718} {:instruction integer_max} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction float_add} {:instruction float_yank} {:instruction float_rot} {:instruction float_rot} {:instruction integer_sub} {:instruction float_add} {:instruction integer_dup} {:instruction integer_add} {:instruction integer_dup} {:instruction integer_add} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_sub} {:instruction 19.42355631150687} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_tan} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction 8} {:instruction print_float} {:instruction 69.54768671383735} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_div} {:instruction 24} {:instruction integer_dec} {:instruction print_integer} {:instruction integer_min} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction float_min} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc float_inc float_inc float_inc tag_float_718 integer_max integer_yank float_max in1 float_add float_yank float_rot float_rot integer_sub float_add integer_dup integer_add integer_dup integer_add integer_inc float_add tag_integer_667 float_yank integer_dec integer_fromfloat float_sub float_rot integer_sub integer_sub 19.42355631150687 in2 integer_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_752 float_tan float_frominteger integer_dup_times float_dup float_pop 8 8 print_float 69.54768671383735 float_dec print_integer float_pop 8 print_float integer_shove float_dec print_integer float_pop float_min integer_div integer_div integer_div 24 integer_dec print_integer integer_min float_pop 8 print_float integer_shove integer_stackdepth print_integer integer_min float_min integer_div integer_div integer_fromfloat float_swap integer_inc in1 float_min float_dec integer_pop float_frominteger integer_min)
Errors: [0.9814 9 0.747 8 0.2912 8 0.6817 8 0.679 9 0.4663 8 0.2956 8 0.3142 10 0.6963 7 0.6786 8 0.3379 8 0.8667 8 0.6053 8 0.67 7 0.405 9 0.8014 9 0.622 7 0.6273 6 0.1109 8 0.1488 7 0.4119 7 0.4929 9 1.0405 8 0.5212 6 0.913 7]
Total: 211.4061
Mean: 4.228122
Genome size: 82
Size: 83
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4380.023439999997
Median total errors in population: 212.4061
Error averages by case: (168.26331609999895 9.882 163.41079210000146 9.439 177.8515166000027 8.892 167.1267958999983 9.249 168.42932000000118 9.388 159.13709419999995 8.907 164.332134900001 8.93 160.47622369999766 11.12 166.702212300001 8.183 162.95643380000158 9.404 165.0957726000012 9.015 154.3677772000006 8.952 154.99218299999882 8.487 163.94637330000097 8.691 166.7060607999994 10.119 160.7025338999983 9.723 172.9497495000014 8.543 184.68395389999716 7.64 159.69141839999983 8.919 176.13600079999856 8.155 180.15249650000237 8.249 163.61011090000096 9.424 168.4512616000014 9.229 163.5390498999994 7.558 161.73285810000021 8.482)
Error minima by case: (0.0122 6 0.2467 6 0.2812 7 0.3119 7 0.3146 7 0.4563 6 0.2264 6 0.2449 8 0.2973 6 0.3151 7 0.2687 6 0.1333 7 0.3948 6 0.3237 6 0.3358 8 0.1923 7 0.378 6 0.3727 5 0.1009 6 0.1388 6 0.4019 5 0.4236 7 0.0405 7 0.4788 6 0.0871 6)
Average genome size in population (length): 80.182
Average program size in population (points): 81.182
Average percent parens in population: 0.012
Minimum age in population: 70.94384504166861
Maximum age in population: 75.39336228523094
Average age in population: 73.30350011507326
Median age in population: 73.3548547370028
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 63
Genome diversity (% unique Plush genomes):	 0.82
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.82
Total error diversity:				 0.249
Error (vector) diversity:			 0.303
Behavioral diversity:				 0.303
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 90424516
--- Timings ---
Current time: 1529616061499 milliseconds
Total Time:         186.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        73.8 seconds, 39.5%
Fitness Testing:     88.8 seconds, 47.5%
Report:              24.2 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Number IO problem report - generation 52
Test total error for best: 8591.103099999998
Test mean error for best: 4.29555
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20.0819321   
Correct output: 33.3348829534  | Program output: 34.0819321    
Correct output: -90.3731037929 | Program output: -90.0819321   
Correct output: -87.4001767285 | Program output: -88.0819321   
Correct output: -8.4029481486  | Program output: -9.0819321    
Correct output: 18.5482005326  | Program output: 18.0819321    
Correct output: 8.7863159396   | Program output: 9.0819321     
Correct output: 24.7677635354  | Program output: 25.0819321    
Correct output: -8.385649611   | Program output: -9.0819321    
Correct output: 42.4033443172  | Program output: 43.0819321    
Correct output: -5.7440283823  | Program output: -6.0819321    
Correct output: 49.9486170067  | Program output: 49.0819321    
Correct output: 8.6872116188   | Program output: 8.0819321     
Correct output: 28.4119683961  | Program output: 29.0819321    
Correct output: -51.6769002079 | Program output: -52.0819321   
Correct output: 27.2805425748  | Program output: 28.0819321    
Correct output: -20.7039689338 | Program output: -20.0819321   
Correct output: -180.7091819668 | Program output: -180.0819321  
Correct output: 122.1928520414 | Program output: 122.0819321   
Correct output: -10.2306918248 | Program output: -10.0819321   
Correct output: -104.493817403 | Program output: -104.0819321  
Correct output: 6.5890602195   | Program output: 7.0819321     
Correct output: -74.0414611649 | Program output: -75.0819321   
Correct output: 145.6031300201 | Program output: 145.0819321   
Correct output: 125.9949201107 | Program output: 125.0819321   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction tag_float_718} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction float_add} {:instruction float_yank} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mult} {:instruction 19.42355631150687} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_mult} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction 8} {:instruction print_float} {:instruction 69.54768671383735} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_div} {:instruction 24} {:instruction integer_add} {:instruction print_integer} {:instruction integer_min} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction float_min} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc tag_float_718 integer_dup_items integer_yank float_max in1 float_add float_yank integer_inc float_add tag_integer_667 tag_integer_667 float_yank integer_dec integer_fromfloat float_sub float_rot integer_sub integer_mult 19.42355631150687 in2 integer_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_752 float_mult float_frominteger integer_dup_times float_dup float_pop 8 8 print_float 69.54768671383735 float_dec print_integer float_pop 8 print_float integer_shove float_dec print_integer float_pop float_min integer_div integer_div integer_div 24 integer_add print_integer integer_min float_pop 8 print_float integer_shove integer_stackdepth print_integer integer_min float_min integer_div integer_div integer_fromfloat float_swap integer_inc in1 float_min float_dec integer_pop float_frominteger integer_min)
Errors: [0.9814 8 0.747 9 0.2912 7 0.6818 8 0.679 9 0.4663 7 0.2956 7 0.3142 10 0.6963 7 0.6786 9 0.3379 9 0.8667 8 0.6053 8 0.67 7 0.405 9 0.8014 9 0.622 7 0.6272 6 0.1109 8 0.1488 8 0.4119 7 0.4929 8 1.0405 8 0.5212 6 0.913 8]
Total: 211.40609999999998
Mean: 4.228122
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3937.123152199998
Median total errors in population: 211.4061
Error averages by case: (148.5594223999996 9.892 149.33366820000148 9.149 152.96125400000255 9.051 148.07260879999913 9.264 148.6703553000011 9.685 143.5772717 8.838 149.73810410000024 8.955 146.18038879999764 10.9 146.51388170000033 8.173 147.66047140000086 9.137 144.38141990000048 8.917 141.0587133000002 9.029 137.91589659999903 8.661 150.01108230000025 8.424 147.26251809999962 10.158 146.31091269999834 9.744 152.84558380000126 8.202 159.52558699999724 7.592 145.94377869999983 8.876 158.00880579999858 8.131 154.88424370000217 8.247 147.70714079999996 9.731 148.89295920000134 9.332 149.32943219999987 7.415 147.8206517000003 8.454)
Error minima by case: (0.0186 7 0.2467 6 0.2749 7 0.3183 7 0.321 7 0.45 6 0.2329 7 0.2515 9 0.3037 6 0.3151 7 0.2752 7 0.1333 7 0.3947 6 0.3237 6 0.3423 8 0.1923 8 0.378 6 0.3727 5 0.0946 6 0.1325 5 0.3956 6 0.4302 7 0.0405 7 0.4788 6 0.087 6)
Average genome size in population (length): 79.453
Average program size in population (points): 80.453
Average percent parens in population: 0.012
Minimum age in population: 72.18326006728213
Maximum age in population: 76.95353610618011
Average age in population: 74.77739043396917
Median age in population: 74.81684571080501
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 69
Genome diversity (% unique Plush genomes):	 0.802
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 69
Syntactic diversity (% unique Push programs):	 0.802
Total error diversity:				 0.204
Error (vector) diversity:			 0.231
Behavioral diversity:				 0.231
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 92435716
--- Timings ---
Current time: 1529616065403 milliseconds
Total Time:         190.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        75.2 seconds, 39.4%
Fitness Testing:     90.8 seconds, 47.6%
Report:              24.7 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Number IO problem report - generation 53
Test total error for best: 8591.103099999998
Test mean error for best: 4.29555
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20.0819321   
Correct output: 33.3348829534  | Program output: 34.0819321    
Correct output: -90.3731037929 | Program output: -90.0819321   
Correct output: -87.4001767285 | Program output: -88.0819321   
Correct output: -8.4029481486  | Program output: -9.0819321    
Correct output: 18.5482005326  | Program output: 18.0819321    
Correct output: 8.7863159396   | Program output: 9.0819321     
Correct output: 24.7677635354  | Program output: 25.0819321    
Correct output: -8.385649611   | Program output: -9.0819321    
Correct output: 42.4033443172  | Program output: 43.0819321    
Correct output: -5.7440283823  | Program output: -6.0819321    
Correct output: 49.9486170067  | Program output: 49.0819321    
Correct output: 8.6872116188   | Program output: 8.0819321     
Correct output: 28.4119683961  | Program output: 29.0819321    
Correct output: -51.6769002079 | Program output: -52.0819321   
Correct output: 27.2805425748  | Program output: 28.0819321    
Correct output: -20.7039689338 | Program output: -20.0819321   
Correct output: -180.7091819668 | Program output: -180.0819321  
Correct output: 122.1928520414 | Program output: 122.0819321   
Correct output: -10.2306918248 | Program output: -10.0819321   
Correct output: -104.493817403 | Program output: -104.0819321  
Correct output: 6.5890602195   | Program output: 7.0819321     
Correct output: -74.0414611649 | Program output: -75.0819321   
Correct output: 145.6031300201 | Program output: 145.0819321   
Correct output: 125.9949201107 | Program output: 125.0819321   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction tag_float_718} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction float_add} {:instruction float_yank} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mult} {:instruction 19.42355631150687} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_mult} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction 8} {:instruction print_float} {:instruction 69.54768671383735} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_div} {:instruction 24} {:instruction integer_add} {:instruction print_integer} {:instruction integer_min} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction float_min} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc tag_float_718 integer_dup_items integer_yank float_max in1 float_add float_yank integer_inc float_add tag_integer_667 tag_integer_667 float_yank integer_dec integer_fromfloat float_sub float_rot integer_sub integer_mult 19.42355631150687 in2 integer_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_752 float_mult float_frominteger integer_dup_times float_dup float_pop 8 8 print_float 69.54768671383735 float_dec print_integer float_pop 8 print_float integer_shove float_dec print_integer float_pop float_min integer_div integer_div integer_div 24 integer_add print_integer integer_min float_pop 8 print_float integer_shove integer_stackdepth print_integer integer_min float_min integer_div integer_div integer_fromfloat float_swap integer_inc in1 float_min float_dec integer_pop float_frominteger integer_min)
Errors: [0.9814 8 0.747 9 0.2912 7 0.6818 8 0.679 9 0.4663 7 0.2956 7 0.3142 10 0.6963 7 0.6786 9 0.3379 9 0.8667 8 0.6053 8 0.67 7 0.405 9 0.8014 9 0.622 7 0.6272 6 0.1109 8 0.1488 8 0.4119 7 0.4929 8 1.0405 8 0.5212 6 0.913 8]
Total: 211.40609999999998
Mean: 4.228122
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3712.139726099998
Median total errors in population: 211.4061
Error averages by case: (138.05767740000022 9.76 142.3909310000015 9.064 145.29250080000259 8.984 137.28450759999998 9.16 137.7755851000006 9.659 135.07680879999995 8.791 140.82687079999968 8.936 138.78376739999783 10.785 135.84405829999955 8.075 141.17526020000028 9.026 133.6839353999994 8.854 130.56065939999922 8.99 128.11977999999917 8.711 143.2546320000001 8.288 136.5956884999995 10.097 139.13011009999826 9.728 143.70485160000158 8.113 151.3085224999973 7.526 137.70402849999988 8.775 148.09966879999882 8.058 147.37669280000222 8.172 138.78325369999942 9.72 138.3117341000014 9.208 141.16514320000053 7.28 139.7100581000004 8.363)
Error minima by case: (0.0186 7 0.2467 7 0.2812 7 0.3183 7 0.321 7 0.4563 6 0.2329 7 0.2515 9 0.3037 6 0.3152 8 0.2752 6 0.1333 7 0.3947 6 0.3238 7 0.3423 8 0.1924 8 0.3779 6 0.3727 5 0.1009 6 0.1388 6 0.4019 6 0.4302 7 0.0405 6 0.4788 6 0.087 6)
Average genome size in population (length): 79.116
Average program size in population (points): 80.116
Average percent parens in population: 0.013
Minimum age in population: 73.18326006728213
Maximum age in population: 78.26498683413672
Average age in population: 76.19873737926264
Median age in population: 76.24515515731947
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 39
Genome diversity (% unique Plush genomes):	 0.855
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.855
Total error diversity:				 0.191
Error (vector) diversity:			 0.212
Behavioral diversity:				 0.212
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 94438441
--- Timings ---
Current time: 1529616069436 milliseconds
Total Time:         194.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        76.6 seconds, 39.3%
Fitness Testing:     92.9 seconds, 47.7%
Report:              25.2 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Number IO problem report - generation 54
Test total error for best: 8591.103099999998
Test mean error for best: 4.29555
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20.0819321   
Correct output: 33.3348829534  | Program output: 34.0819321    
Correct output: -90.3731037929 | Program output: -90.0819321   
Correct output: -87.4001767285 | Program output: -88.0819321   
Correct output: -8.4029481486  | Program output: -9.0819321    
Correct output: 18.5482005326  | Program output: 18.0819321    
Correct output: 8.7863159396   | Program output: 9.0819321     
Correct output: 24.7677635354  | Program output: 25.0819321    
Correct output: -8.385649611   | Program output: -9.0819321    
Correct output: 42.4033443172  | Program output: 43.0819321    
Correct output: -5.7440283823  | Program output: -6.0819321    
Correct output: 49.9486170067  | Program output: 49.0819321    
Correct output: 8.6872116188   | Program output: 8.0819321     
Correct output: 28.4119683961  | Program output: 29.0819321    
Correct output: -51.6769002079 | Program output: -52.0819321   
Correct output: 27.2805425748  | Program output: 28.0819321    
Correct output: -20.7039689338 | Program output: -20.0819321   
Correct output: -180.7091819668 | Program output: -180.0819321  
Correct output: 122.1928520414 | Program output: 122.0819321   
Correct output: -10.2306918248 | Program output: -10.0819321   
Correct output: -104.493817403 | Program output: -104.0819321  
Correct output: 6.5890602195   | Program output: 7.0819321     
Correct output: -74.0414611649 | Program output: -75.0819321   
Correct output: 145.6031300201 | Program output: 145.0819321   
Correct output: 125.9949201107 | Program output: 125.0819321   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction tag_float_718} {:instruction integer_dup_items} {:instruction float_inc} {:instruction tag_float_718} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction float_add} {:instruction float_yank} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mult} {:instruction 19.42355631150687} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_mult} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction 8} {:instruction print_float} {:instruction 69.54768671383735} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_div} {:instruction 24} {:instruction integer_add} {:instruction print_integer} {:instruction integer_min} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction float_min} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc tag_float_718 integer_dup_items float_inc tag_float_718 integer_dup_items integer_yank float_max in1 float_add float_yank integer_inc float_add tag_integer_667 tag_integer_667 float_yank integer_dec integer_fromfloat float_sub float_rot integer_sub integer_mult 19.42355631150687 in2 integer_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_752 float_mult float_frominteger integer_dup_times float_dup float_pop 8 8 print_float 69.54768671383735 float_dec print_integer float_pop 8 print_float integer_shove float_dec print_integer float_pop float_min integer_div integer_div integer_div 24 integer_add print_integer integer_min float_pop 8 print_float integer_shove integer_stackdepth print_integer integer_min float_min integer_div integer_div integer_fromfloat float_swap integer_inc in1 float_min float_dec integer_pop float_frominteger integer_min)
Errors: [0.9814 8 0.747 9 0.2912 7 0.6818 8 0.679 9 0.4663 7 0.2956 7 0.3142 10 0.6963 7 0.6786 9 0.3379 9 0.8667 8 0.6053 8 0.67 7 0.405 9 0.8014 9 0.622 7 0.6272 6 0.1109 8 0.1488 8 0.4119 7 0.4929 8 1.0405 8 0.5212 6 0.913 8]
Total: 211.40609999999998
Mean: 4.228122
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3942.6491953999976
Median total errors in population: 211.4061
Error averages by case: (152.54227069999936 9.755 146.66428850000148 8.971 158.06976150000256 9.014 151.72509249999905 9.161 152.67657980000087 9.602 141.43370389999998 8.756 146.76286650000037 8.859 143.62882939999778 10.751 151.01738590000065 8.066 145.61913620000092 8.995 149.44548200000088 8.821 135.9914326999998 8.968 136.48605389999898 8.686 147.50357140000034 8.233 150.86275309999948 10.048 143.40439139999816 9.649 156.9672107000015 8.109 163.74715999999736 7.556 140.96965769999986 8.782 161.07824469999866 8.049 160.12682450000213 8.172 145.03345990000017 9.628 152.5073896000014 9.211 144.14606700000007 7.303 142.71858190000034 8.376)
Error minima by case: (0.9014 7 0.2467 6 0.2812 7 0.6017 7 0.599 7 0.4563 6 0.2156 7 0.2342 9 0.6163 7 0.3151 7 0.2579 6 0.8567 7 0.5953 6 0.3237 6 0.325 8 0.1923 7 0.326 6 0.3208 5 0.1009 6 0.1388 6 0.4019 6 0.4129 8 0.9605 7 0.5112 6 0.903 6)
Average genome size in population (length): 78.862
Average program size in population (points): 79.862
Average percent parens in population: 0.013
Minimum age in population: 74.4546875325533
Maximum age in population: 79.76213813107226
Average age in population: 77.63192948963093
Median age in population: 77.6947266285761
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.87
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.87
Total error diversity:				 0.189
Error (vector) diversity:			 0.218
Behavioral diversity:				 0.218
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 96434991
--- Timings ---
Current time: 1529616073330 milliseconds
Total Time:         198.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        78.0 seconds, 39.2%
Fitness Testing:     94.9 seconds, 47.7%
Report:              25.8 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
;;******************************
;; -*- Number IO problem report - generation 55
Test total error for best: 8591.103099999998
Test mean error for best: 4.29555
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20.0819321   
Correct output: 33.3348829534  | Program output: 34.0819321    
Correct output: -90.3731037929 | Program output: -90.0819321   
Correct output: -87.4001767285 | Program output: -88.0819321   
Correct output: -8.4029481486  | Program output: -9.0819321    
Correct output: 18.5482005326  | Program output: 18.0819321    
Correct output: 8.7863159396   | Program output: 9.0819321     
Correct output: 24.7677635354  | Program output: 25.0819321    
Correct output: -8.385649611   | Program output: -9.0819321    
Correct output: 42.4033443172  | Program output: 43.0819321    
Correct output: -5.7440283823  | Program output: -6.0819321    
Correct output: 49.9486170067  | Program output: 49.0819321    
Correct output: 8.6872116188   | Program output: 8.0819321     
Correct output: 28.4119683961  | Program output: 29.0819321    
Correct output: -51.6769002079 | Program output: -52.0819321   
Correct output: 27.2805425748  | Program output: 28.0819321    
Correct output: -20.7039689338 | Program output: -20.0819321   
Correct output: -180.7091819668 | Program output: -180.0819321  
Correct output: 122.1928520414 | Program output: 122.0819321   
Correct output: -10.2306918248 | Program output: -10.0819321   
Correct output: -104.493817403 | Program output: -104.0819321  
Correct output: 6.5890602195   | Program output: 7.0819321     
Correct output: -74.0414611649 | Program output: -75.0819321   
Correct output: 145.6031300201 | Program output: 145.0819321   
Correct output: 125.9949201107 | Program output: 125.0819321   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction tag_float_718} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction float_add} {:instruction float_yank} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mult} {:instruction 19.42355631150687} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_mult} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction 8} {:instruction print_float} {:instruction 69.54768671383735} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_div} {:instruction 24} {:instruction integer_add} {:instruction print_integer} {:instruction integer_min} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc tag_float_718 integer_dup_items integer_yank float_max in1 float_add float_yank integer_inc float_add tag_integer_667 tag_integer_667 float_yank integer_dec integer_fromfloat float_sub float_rot integer_sub integer_mult 19.42355631150687 in2 integer_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_752 float_mult float_frominteger integer_dup_times float_dup float_pop 8 8 print_float 69.54768671383735 float_dec print_integer float_pop 8 print_float integer_shove float_dec print_integer float_pop float_min integer_div integer_div integer_div 24 integer_add print_integer integer_min float_pop 8 print_float integer_shove integer_stackdepth print_integer integer_min float_min integer_div integer_div integer_fromfloat float_swap integer_inc in1 float_min integer_fromfloat float_swap integer_inc in1 integer_pop float_frominteger integer_min)
Errors: [0.9814 8 0.747 9 0.2912 7 0.6818 8 0.679 9 0.4663 7 0.2956 7 0.3142 10 0.6963 7 0.6786 9 0.3379 9 0.8667 8 0.6053 8 0.67 7 0.405 9 0.8014 9 0.622 7 0.6272 6 0.1109 8 0.1488 8 0.4119 7 0.4929 8 1.0405 8 0.5212 6 0.913 8]
Total: 211.40609999999998
Mean: 4.228122
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4074.847617199998
Median total errors in population: 211.4061
Error averages by case: (158.20817749999932 9.733 150.95357080000144 9.093 160.63463460000264 8.908 156.72717129999901 9.179 158.39407160000098 9.607 153.29892409999988 8.72 147.98996340000042 8.837 149.0878482999976 10.78 156.7349513000006 8.069 150.38871320000104 9.055 155.19093890000107 8.959 146.6608272000006 8.992 145.45931939999886 8.665 151.53386480000046 8.274 156.49014069999944 10.073 149.30454849999822 9.63 155.65726550000147 8.067 166.2281211999976 7.527 151.45966719999979 8.732 159.09800419999877 8.056 162.3453903000023 8.095 146.24742460000024 9.623 158.06928590000146 9.182 154.17325389999974 7.305 152.9455388000002 8.405)
Error minima by case: (0.0185 7 0.2467 6 0.2843 6 0.3182 7 0.3147 6 0.459 5 0.229 6 0.2475 9 0.2974 6 0.3151 7 0.2713 6 0.1333 6 0.3947 5 0.3237 6 0.3384 8 0.1923 8 0.378 5 0.3727 5 0.104 6 0.1419 6 0.405 6 0.4262 7 0.0405 7 0.4788 5 0.087 6)
Average genome size in population (length): 77.7
Average program size in population (points): 78.7
Average percent parens in population: 0.013
Minimum age in population: 76.93067251144437
Maximum age in population: 80.8870001309497
Average age in population: 79.03862312691307
Median age in population: 79.07604763453595
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 33
Genome diversity (% unique Plush genomes):	 0.877
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.877
Total error diversity:				 0.193
Error (vector) diversity:			 0.229
Behavioral diversity:				 0.229
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 98402041
--- Timings ---
Current time: 1529616077214 milliseconds
Total Time:         202.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        79.3 seconds, 39.1%
Fitness Testing:     96.9 seconds, 47.8%
Report:              26.3 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
;;******************************
;; -*- Number IO problem report - generation 56
Test total error for best: 8591.103099999998
Test mean error for best: 4.29555
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20.0819321   
Correct output: 33.3348829534  | Program output: 34.0819321    
Correct output: -90.3731037929 | Program output: -90.0819321   
Correct output: -87.4001767285 | Program output: -88.0819321   
Correct output: -8.4029481486  | Program output: -9.0819321    
Correct output: 18.5482005326  | Program output: 18.0819321    
Correct output: 8.7863159396   | Program output: 9.0819321     
Correct output: 24.7677635354  | Program output: 25.0819321    
Correct output: -8.385649611   | Program output: -9.0819321    
Correct output: 42.4033443172  | Program output: 43.0819321    
Correct output: -5.7440283823  | Program output: -6.0819321    
Correct output: 49.9486170067  | Program output: 49.0819321    
Correct output: 8.6872116188   | Program output: 8.0819321     
Correct output: 28.4119683961  | Program output: 29.0819321    
Correct output: -51.6769002079 | Program output: -52.0819321   
Correct output: 27.2805425748  | Program output: 28.0819321    
Correct output: -20.7039689338 | Program output: -20.0819321   
Correct output: -180.7091819668 | Program output: -180.0819321  
Correct output: 122.1928520414 | Program output: 122.0819321   
Correct output: -10.2306918248 | Program output: -10.0819321   
Correct output: -104.493817403 | Program output: -104.0819321  
Correct output: 6.5890602195   | Program output: 7.0819321     
Correct output: -74.0414611649 | Program output: -75.0819321   
Correct output: 145.6031300201 | Program output: 145.0819321   
Correct output: 125.9949201107 | Program output: 125.0819321   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction tag_float_718} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction float_add} {:instruction float_yank} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mult} {:instruction 19.42355631150687} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_601} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_mult} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction 8} {:instruction print_float} {:instruction 69.54768671383735} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_div} {:instruction 24} {:instruction integer_add} {:instruction print_integer} {:instruction integer_min} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction float_min} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc tag_float_718 integer_dup_items integer_yank float_max in1 float_add float_yank integer_inc float_add tag_integer_667 tag_integer_667 float_yank integer_dec integer_fromfloat float_sub float_rot integer_sub integer_mult 19.42355631150687 in2 integer_add tag_integer_601 float_yank integer_dec integer_fromfloat tagged_752 float_mult float_frominteger integer_dup_times float_dup float_pop 8 8 print_float 69.54768671383735 float_dec print_integer float_pop 8 print_float integer_shove float_dec print_integer float_pop float_min integer_div integer_div integer_div 24 integer_add print_integer integer_min float_pop 8 print_float integer_shove integer_stackdepth print_integer integer_min float_min integer_div integer_div integer_fromfloat float_swap integer_inc in1 float_min float_dec integer_pop float_frominteger integer_min)
Errors: [0.9814 8 0.747 9 0.2912 7 0.6818 8 0.679 9 0.4663 7 0.2956 7 0.3142 10 0.6963 7 0.6786 9 0.3379 9 0.8667 8 0.6053 8 0.67 7 0.405 9 0.8014 9 0.622 7 0.6272 6 0.1109 8 0.1488 8 0.4119 7 0.4929 8 1.0405 8 0.5212 6 0.913 8]
Total: 211.40609999999998
Mean: 4.228122
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4253.073466499998
Median total errors in population: 211.4061
Error averages by case: (159.89904849999945 9.612 162.6296151000013 9.441 167.04454770000262 8.852 159.1553919999995 9.264 161.80559320000114 9.663 159.85016620000002 8.7 160.4371761000007 8.762 158.43626269999754 10.88 159.72834320000055 8.128 160.11616650000116 9.376 155.71672990000104 9.325 154.5018935000008 9.137 154.418215999999 8.855 163.28602010000088 8.428 159.8635548999995 10.174 160.53389599999844 9.727 159.91390380000118 8.278 173.604823499998 7.698 161.20710449999982 8.84 165.61501119999886 8.413 169.69825800000226 8.277 156.20178380000056 9.496 159.8077893000012 9.276 163.2458740999995 7.467 161.50229670000033 8.785)
Error minima by case: (0.0186 6 0.2467 6 0.2812 7 0.3182 7 0.321 7 0.4563 6 0.2237 6 0.2422 9 0.3037 6 0.3151 7 0.266 7 0.1333 7 0.3947 6 0.3237 6 0.3331 8 0.1923 7 0.378 6 0.3728 5 0.1009 6 0.1388 5 0.4019 6 0.4209 7 0.0405 7 0.4788 6 0.087 6)
Average genome size in population (length): 75.958
Average program size in population (points): 76.958
Average percent parens in population: 0.013
Minimum age in population: 78.15983728218069
Maximum age in population: 82.81218500517717
Average age in population: 80.57858527870049
Median age in population: 80.60419015861595
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 80
Genome diversity (% unique Plush genomes):	 0.827
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 80
Syntactic diversity (% unique Push programs):	 0.827
Total error diversity:				 0.217
Error (vector) diversity:			 0.261
Behavioral diversity:				 0.261
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 100325766
--- Timings ---
Current time: 1529616080906 milliseconds
Total Time:         206.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        80.6 seconds, 39.1%
Fitness Testing:     98.8 seconds, 47.9%
Report:              26.7 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
;;******************************
;; -*- Number IO problem report - generation 57
Test total error for best: 8591.103099999998
Test mean error for best: 4.29555
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20.0819321   
Correct output: 33.3348829534  | Program output: 34.0819321    
Correct output: -90.3731037929 | Program output: -90.0819321   
Correct output: -87.4001767285 | Program output: -88.0819321   
Correct output: -8.4029481486  | Program output: -9.0819321    
Correct output: 18.5482005326  | Program output: 18.0819321    
Correct output: 8.7863159396   | Program output: 9.0819321     
Correct output: 24.7677635354  | Program output: 25.0819321    
Correct output: -8.385649611   | Program output: -9.0819321    
Correct output: 42.4033443172  | Program output: 43.0819321    
Correct output: -5.7440283823  | Program output: -6.0819321    
Correct output: 49.9486170067  | Program output: 49.0819321    
Correct output: 8.6872116188   | Program output: 8.0819321     
Correct output: 28.4119683961  | Program output: 29.0819321    
Correct output: -51.6769002079 | Program output: -52.0819321   
Correct output: 27.2805425748  | Program output: 28.0819321    
Correct output: -20.7039689338 | Program output: -20.0819321   
Correct output: -180.7091819668 | Program output: -180.0819321  
Correct output: 122.1928520414 | Program output: 122.0819321   
Correct output: -10.2306918248 | Program output: -10.0819321   
Correct output: -104.493817403 | Program output: -104.0819321  
Correct output: 6.5890602195   | Program output: 7.0819321     
Correct output: -74.0414611649 | Program output: -75.0819321   
Correct output: 145.6031300201 | Program output: 145.0819321   
Correct output: 125.9949201107 | Program output: 125.0819321   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction tag_float_718} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction float_add} {:instruction float_yank} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mult} {:instruction 19.42355631150687} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_mult} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction 8} {:instruction print_float} {:instruction 69.54768671383735} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_div} {:instruction 24} {:instruction integer_add} {:instruction print_integer} {:instruction integer_min} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction float_min} {:instruction float_min} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction float_min} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc tag_float_718 integer_dup_items integer_yank float_max in1 float_add float_yank integer_inc float_add tag_integer_667 tag_integer_667 float_yank integer_dec integer_fromfloat float_sub float_rot integer_sub integer_mult 19.42355631150687 in2 integer_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_752 float_mult float_frominteger integer_dup_times float_dup float_pop 8 8 print_float 69.54768671383735 float_dec print_integer float_pop 8 print_float integer_shove float_dec print_integer float_pop float_min integer_div integer_div integer_div 24 integer_add print_integer integer_min float_pop 8 print_float integer_shove integer_stackdepth print_integer integer_min float_min integer_div integer_div integer_fromfloat float_swap integer_inc in1 float_min float_min float_dec integer_pop float_frominteger float_min float_dec integer_pop float_frominteger integer_min)
Errors: [0.9814 8 0.747 9 0.2912 7 0.6818 8 0.679 9 0.4663 7 0.2956 7 0.3142 10 0.6963 7 0.6786 9 0.3379 9 0.8667 8 0.6053 8 0.67 7 0.405 9 0.8014 9 0.622 7 0.6272 6 0.1109 8 0.1488 8 0.4119 7 0.4929 8 1.0405 8 0.5212 6 0.913 8]
Total: 211.40609999999998
Mean: 4.228122
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4444.184185199997
Median total errors in population: 211.4061
Error averages by case: (171.0932243999995 9.299 168.1177471000017 9.838 175.62738400000316 8.482 168.55589489999986 9.27 171.01070340000143 9.628 165.7119017000001 8.339 167.39228850000066 8.484 164.57161919999717 10.892 169.2631484000007 8.091 166.15537830000142 9.676 166.22963730000112 9.73 159.35421790000095 8.986 160.51464839999863 8.758 168.01828790000096 8.365 169.17629569999937 10.164 165.6668044999982 9.685 172.81135480000134 8.25 181.9274534999985 7.591 166.06444459999983 8.729 177.8194249999982 8.599 178.21031760000284 8.189 163.39146370000066 9.225 169.9137242000014 9.221 167.06049669999967 7.38 166.71132350000028 8.944)
Error minima by case: (0.0123 6 0.253 6 0.2812 6 0.3119 7 0.3147 7 0.4563 6 0.2239 6 0.2424 9 0.2974 6 0.3214 7 0.2662 7 0.1333 7 0.3947 6 0.33 6 0.3333 8 0.1986 7 0.3158 6 0.3106 5 0.1009 5 0.1388 5 0.4019 6 0.4211 7 0.0405 7 0.4788 6 0.087 6)
Average genome size in population (length): 73.505
Average program size in population (points): 74.505
Average percent parens in population: 0.013
Minimum age in population: 79.55791651845747
Maximum age in population: 84.10382351090142
Average age in population: 82.07325912982996
Median age in population: 82.12337278573771
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 100
Genome diversity (% unique Plush genomes):	 0.759
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 100
Syntactic diversity (% unique Push programs):	 0.759
Total error diversity:				 0.207
Error (vector) diversity:			 0.243
Behavioral diversity:				 0.243
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 102188241
--- Timings ---
Current time: 1529616084902 milliseconds
Total Time:         210.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        82.1 seconds, 39.1%
Fitness Testing:    100.8 seconds, 47.9%
Report:              27.3 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
;;******************************
;; -*- Number IO problem report - generation 58
Test total error for best: 8591.103099999998
Test mean error for best: 4.29555
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20.0819321   
Correct output: 33.3348829534  | Program output: 34.0819321    
Correct output: -90.3731037929 | Program output: -90.0819321   
Correct output: -87.4001767285 | Program output: -88.0819321   
Correct output: -8.4029481486  | Program output: -9.0819321    
Correct output: 18.5482005326  | Program output: 18.0819321    
Correct output: 8.7863159396   | Program output: 9.0819321     
Correct output: 24.7677635354  | Program output: 25.0819321    
Correct output: -8.385649611   | Program output: -9.0819321    
Correct output: 42.4033443172  | Program output: 43.0819321    
Correct output: -5.7440283823  | Program output: -6.0819321    
Correct output: 49.9486170067  | Program output: 49.0819321    
Correct output: 8.6872116188   | Program output: 8.0819321     
Correct output: 28.4119683961  | Program output: 29.0819321    
Correct output: -51.6769002079 | Program output: -52.0819321   
Correct output: 27.2805425748  | Program output: 28.0819321    
Correct output: -20.7039689338 | Program output: -20.0819321   
Correct output: -180.7091819668 | Program output: -180.0819321  
Correct output: 122.1928520414 | Program output: 122.0819321   
Correct output: -10.2306918248 | Program output: -10.0819321   
Correct output: -104.493817403 | Program output: -104.0819321  
Correct output: 6.5890602195   | Program output: 7.0819321     
Correct output: -74.0414611649 | Program output: -75.0819321   
Correct output: 145.6031300201 | Program output: 145.0819321   
Correct output: 125.9949201107 | Program output: 125.0819321   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction tag_float_718} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction float_add} {:instruction float_yank} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mult} {:instruction 19.42355631150687} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_mult} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction 8} {:instruction print_float} {:instruction 69.54768671383735} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_div} {:instruction 24} {:instruction integer_add} {:instruction print_integer} {:instruction integer_min} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction float_min} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc tag_float_718 integer_dup_items integer_yank float_max in1 float_add float_yank integer_inc float_add tag_integer_667 tag_integer_667 float_yank integer_dec integer_fromfloat float_sub float_rot integer_sub integer_mult 19.42355631150687 in2 integer_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_752 float_mult float_frominteger integer_dup_times float_dup float_pop 8 8 print_float 69.54768671383735 float_dec print_integer float_pop 8 print_float integer_shove float_dec print_integer float_pop float_min integer_div integer_div integer_div 24 integer_add print_integer integer_min float_pop 8 print_float integer_shove integer_stackdepth print_integer integer_min float_min integer_div integer_div integer_fromfloat float_swap integer_inc in1 float_min float_dec integer_pop float_frominteger integer_min)
Errors: [0.9814 8 0.747 9 0.2912 7 0.6818 8 0.679 9 0.4663 7 0.2956 7 0.3142 10 0.6963 7 0.6786 9 0.3379 9 0.8667 8 0.6053 8 0.67 7 0.405 9 0.8014 9 0.622 7 0.6272 6 0.1109 8 0.1488 8 0.4119 7 0.4929 8 1.0405 8 0.5212 6 0.913 8]
Total: 211.40609999999998
Mean: 4.228122
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4486.866069099998
Median total errors in population: 211.40609999999998
Error averages by case: (171.82615469999882 9.062 169.88851680000147 9.786 179.56064160000273 8.35 172.37446179999947 9.134 171.57195470000093 9.479 167.1703761 8.212 165.2596966000011 8.263 167.19822409999765 10.761 169.88755120000127 7.964 169.64324580000218 9.631 168.2043298000016 9.758 163.29615850000144 8.964 156.89396959999883 8.701 170.2615208000015 8.238 171.30108689999932 10.04 167.11724239999822 9.553 171.26119350000147 8.259 184.75406249999853 7.516 168.76134129999994 8.632 177.23046699999855 8.641 182.2600124000024 8.115 163.42858050000095 8.986 173.0196710000013 9.06 172.34326899999908 7.308 170.9103405000002 9.029)
Error minima by case: (0.9107 7 0.2466 6 0.2847 6 0.611 7 0.6082 7 0.4598 5 0.2249 6 0.2434 9 0.6255 6 0.3151 7 0.2672 7 0.8602 7 0.5988 6 0.3237 6 0.3343 8 0.1923 7 0.3779 6 0.3727 5 0.1044 6 0.1423 5 0.4054 6 0.4221 7 0.9697 7 0.5147 6 0.9065 6)
Average genome size in population (length): 72.524
Average program size in population (points): 73.524
Average percent parens in population: 0.014
Minimum age in population: 80.99663911541622
Maximum age in population: 85.35563528523738
Average age in population: 83.45532053542911
Median age in population: 83.50186803294262
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 74
Genome diversity (% unique Plush genomes):	 0.807
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 74
Syntactic diversity (% unique Push programs):	 0.807
Total error diversity:				 0.202
Error (vector) diversity:			 0.234
Behavioral diversity:				 0.234
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 104026316
--- Timings ---
Current time: 1529616088627 milliseconds
Total Time:         213.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        83.4 seconds, 39.0%
Fitness Testing:    102.7 seconds, 48.0%
Report:              27.7 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
;;******************************
;; -*- Number IO problem report - generation 59
Test total error for best: 8591.103099999998
Test mean error for best: 4.29555
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20.0819321   
Correct output: 33.3348829534  | Program output: 34.0819321    
Correct output: -90.3731037929 | Program output: -90.0819321   
Correct output: -87.4001767285 | Program output: -88.0819321   
Correct output: -8.4029481486  | Program output: -9.0819321    
Correct output: 18.5482005326  | Program output: 18.0819321    
Correct output: 8.7863159396   | Program output: 9.0819321     
Correct output: 24.7677635354  | Program output: 25.0819321    
Correct output: -8.385649611   | Program output: -9.0819321    
Correct output: 42.4033443172  | Program output: 43.0819321    
Correct output: -5.7440283823  | Program output: -6.0819321    
Correct output: 49.9486170067  | Program output: 49.0819321    
Correct output: 8.6872116188   | Program output: 8.0819321     
Correct output: 28.4119683961  | Program output: 29.0819321    
Correct output: -51.6769002079 | Program output: -52.0819321   
Correct output: 27.2805425748  | Program output: 28.0819321    
Correct output: -20.7039689338 | Program output: -20.0819321   
Correct output: -180.7091819668 | Program output: -180.0819321  
Correct output: 122.1928520414 | Program output: 122.0819321   
Correct output: -10.2306918248 | Program output: -10.0819321   
Correct output: -104.493817403 | Program output: -104.0819321  
Correct output: 6.5890602195   | Program output: 7.0819321     
Correct output: -74.0414611649 | Program output: -75.0819321   
Correct output: 145.6031300201 | Program output: 145.0819321   
Correct output: 125.9949201107 | Program output: 125.0819321   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction tag_float_718} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction float_add} {:instruction float_add} {:instruction float_yank} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mult} {:instruction 19.42355631150687} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_mult} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction 8} {:instruction print_float} {:instruction 69.54768671383735} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_div} {:instruction 24} {:instruction integer_add} {:instruction print_integer} {:instruction integer_min} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction float_min} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc tag_float_718 integer_dup_items integer_yank float_max in1 float_add float_add float_yank integer_inc float_add tag_integer_667 tag_integer_667 float_yank integer_dec integer_fromfloat float_sub float_rot integer_sub integer_mult 19.42355631150687 in2 integer_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_752 float_mult float_frominteger integer_dup_times float_dup float_pop 8 8 print_float 69.54768671383735 float_dec print_integer float_pop 8 print_float integer_shove float_dec print_integer float_pop float_min integer_div integer_div integer_div 24 integer_add print_integer integer_min float_pop 8 print_float integer_shove integer_stackdepth print_integer integer_min float_min integer_div integer_div integer_fromfloat float_swap integer_inc in1 float_min float_dec integer_pop float_frominteger integer_min)
Errors: [0.9814 8 0.747 9 0.2912 7 0.6818 8 0.679 9 0.4663 7 0.2956 7 0.3142 10 0.6963 7 0.6786 9 0.3379 9 0.8667 8 0.6053 8 0.67 7 0.405 9 0.8014 9 0.622 7 0.6272 6 0.1109 8 0.1488 8 0.4119 7 0.4929 8 1.0405 8 0.5212 6 0.913 8]
Total: 211.40609999999998
Mean: 4.228122
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4381.515257899998
Median total errors in population: 211.40609999999998
Error averages by case: (169.63756459999908 9.075 163.1752053000018 9.826 172.78917270000332 8.241 169.2761755 9.147 169.6099886000013 9.524 163.09698989999998 8.106 162.51272980000098 8.225 160.59230169999708 10.794 168.21471480000085 7.934 162.776421800002 9.661 166.55392910000148 9.756 160.2657334000013 8.915 158.42899019999857 8.654 163.59165930000134 8.249 168.2781033999993 10.049 160.05082179999792 9.593 168.06167420000162 8.169 177.3622978999983 7.406 164.31523119999986 8.689 172.28873809999837 8.62 174.72294120000296 8.058 161.94004740000094 8.997 169.80900500000158 9.074 167.21768099999943 7.281 165.9561400000002 8.948)
Error minima by case: (0.0186 6 0.253 6 0.2812 5 0.3182 7 0.321 7 0.4563 4 0.2156 6 0.2342 8 0.3037 6 0.3214 7 0.2579 7 0.1333 5 0.3947 4 0.33 6 0.325 8 0.1986 7 0.378 4 0.3728 5 0.1009 5 0.1388 5 0.4019 6 0.4129 7 0.0405 7 0.4788 6 0.087 6)
Average genome size in population (length): 72.529
Average program size in population (points): 73.529
Average percent parens in population: 0.014
Minimum age in population: 81.99663911541622
Maximum age in population: 86.75896644894588
Average age in population: 84.87943066774955
Median age in population: 84.88009032536935
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 60
Genome diversity (% unique Plush genomes):	 0.811
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 60
Syntactic diversity (% unique Push programs):	 0.811
Total error diversity:				 0.19
Error (vector) diversity:			 0.224
Behavioral diversity:				 0.224
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 105864441
--- Timings ---
Current time: 1529616092383 milliseconds
Total Time:         217.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        84.8 seconds, 38.9%
Fitness Testing:    104.5 seconds, 48.0%
Report:              28.3 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
;;******************************
;; -*- Number IO problem report - generation 60
Test total error for best: 8591.103099999998
Test mean error for best: 4.29555
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20.0819321   
Correct output: 33.3348829534  | Program output: 34.0819321    
Correct output: -90.3731037929 | Program output: -90.0819321   
Correct output: -87.4001767285 | Program output: -88.0819321   
Correct output: -8.4029481486  | Program output: -9.0819321    
Correct output: 18.5482005326  | Program output: 18.0819321    
Correct output: 8.7863159396   | Program output: 9.0819321     
Correct output: 24.7677635354  | Program output: 25.0819321    
Correct output: -8.385649611   | Program output: -9.0819321    
Correct output: 42.4033443172  | Program output: 43.0819321    
Correct output: -5.7440283823  | Program output: -6.0819321    
Correct output: 49.9486170067  | Program output: 49.0819321    
Correct output: 8.6872116188   | Program output: 8.0819321     
Correct output: 28.4119683961  | Program output: 29.0819321    
Correct output: -51.6769002079 | Program output: -52.0819321   
Correct output: 27.2805425748  | Program output: 28.0819321    
Correct output: -20.7039689338 | Program output: -20.0819321   
Correct output: -180.7091819668 | Program output: -180.0819321  
Correct output: 122.1928520414 | Program output: 122.0819321   
Correct output: -10.2306918248 | Program output: -10.0819321   
Correct output: -104.493817403 | Program output: -104.0819321  
Correct output: 6.5890602195   | Program output: 7.0819321     
Correct output: -74.0414611649 | Program output: -75.0819321   
Correct output: 145.6031300201 | Program output: 145.0819321   
Correct output: 125.9949201107 | Program output: 125.0819321   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction tag_float_718} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction float_add} {:instruction float_yank} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mult} {:instruction 19.42355631150687} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_mult} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction 8} {:instruction print_float} {:instruction 69.54768671383735} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction integer_div} {:instruction integer_div} {:instruction integer_div} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_div} {:instruction 24} {:instruction integer_add} {:instruction print_integer} {:instruction integer_min} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_min} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction in1} {:instruction float_min} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc tag_float_718 integer_dup_items integer_yank float_max in1 float_add float_yank integer_inc float_add tag_integer_667 tag_integer_667 float_yank integer_dec integer_fromfloat float_sub float_rot integer_sub integer_mult 19.42355631150687 in2 integer_add tag_integer_667 float_yank integer_dec integer_fromfloat tagged_752 float_mult float_frominteger integer_dup_times float_dup float_pop 8 8 print_float 69.54768671383735 float_dec print_integer float_pop 8 print_float integer_shove float_dec print_integer float_pop integer_div integer_div integer_div integer_mult integer_add integer_div 24 integer_add print_integer integer_min float_pop 8 print_float integer_shove integer_stackdepth print_integer integer_min integer_div integer_fromfloat float_swap in1 float_min float_dec integer_pop float_frominteger integer_min)
Errors: [0.9814 8 0.747 9 0.2912 7 0.6818 8 0.679 9 0.4663 7 0.2956 7 0.3142 10 0.6963 7 0.6786 9 0.3379 9 0.8667 8 0.6053 8 0.67 7 0.405 9 0.8014 9 0.622 7 0.6272 6 0.1109 8 0.1488 8 0.4119 7 0.4929 8 1.0405 8 0.5212 6 0.913 8]
Total: 211.40609999999998
Mean: 4.228122
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4209.286918999998
Median total errors in population: 211.40609999999998
Error averages by case: (163.6604576999994 9.004 156.57878210000146 9.743 164.86248260000266 8.194 162.6570601999999 9.056 163.49276020000107 9.437 158.85361139999995 8.08 153.2220562999999 8.16 153.2316454999977 10.736 162.07561410000068 7.888 155.40432340000083 9.598 160.35632530000083 9.706 155.03970860000035 8.836 151.62813689999874 8.599 156.9589538000002 8.122 162.52921229999944 9.936 153.08801179999827 9.527 159.88930890000137 8.097 169.59296489999917 7.329 159.30219789999973 8.546 163.27657019999864 8.536 166.50311610000227 7.973 151.50451650000005 8.911 163.86419530000134 8.972 161.85238339999972 7.197 160.8115236000002 8.868)
Error minima by case: (0.0186 6 0.253 7 0.2847 7 0.3182 7 0.3148 7 0.4598 6 0.2156 6 0.2342 9 0.2975 6 0.3214 7 0.2579 7 0.1333 7 0.3947 6 0.33 6 0.325 8 0.1986 7 0.378 6 0.3728 5 0.1044 5 0.1423 5 0.4054 6 0.4129 7 0.0405 7 0.4788 6 0.087 6)
Average genome size in population (length): 72.408
Average program size in population (points): 73.408
Average percent parens in population: 0.014
Minimum age in population: 83.68146146795364
Maximum age in population: 88.35290327987347
Average age in population: 86.2527835188929
Median age in population: 86.35303925374984
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.854
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.854
Total error diversity:				 0.192
Error (vector) diversity:			 0.222
Behavioral diversity:				 0.223
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 107699641
--- Timings ---
Current time: 1529616096369 milliseconds
Total Time:         221.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        86.2 seconds, 38.9%
Fitness Testing:    106.5 seconds, 48.1%
Report:              28.8 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
;;******************************
;; -*- Number IO problem report - generation 61
Test total error for best: 8591.103099999998
Test mean error for best: 4.29555
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -20.0819321   
Correct output: 33.3348829534  | Program output: 34.0819321    
Correct output: -90.3731037929 | Program output: -90.0819321   
Correct output: -87.4001767285 | Program output: -88.0819321   
Correct output: -8.4029481486  | Program output: -9.0819321    
Correct output: 18.5482005326  | Program output: 18.0819321    
Correct output: 8.7863159396   | Program output: 9.0819321     
Correct output: 24.7677635354  | Program output: 25.0819321    
Correct output: -8.385649611   | Program output: -9.0819321    
Correct output: 42.4033443172  | Program output: 43.0819321    
Correct output: -5.7440283823  | Program output: -6.0819321    
Correct output: 49.9486170067  | Program output: 49.0819321    
Correct output: 8.6872116188   | Program output: 8.0819321     
Correct output: 28.4119683961  | Program output: 29.0819321    
Correct output: -51.6769002079 | Program output: -52.0819321   
Correct output: 27.2805425748  | Program output: 28.0819321    
Correct output: -20.7039689338 | Program output: -20.0819321   
Correct output: -180.7091819668 | Program output: -180.0819321  
Correct output: 122.1928520414 | Program output: 122.0819321   
Correct output: -10.2306918248 | Program output: -10.0819321   
Correct output: -104.493817403 | Program output: -104.0819321  
Correct output: 6.5890602195   | Program output: 7.0819321     
Correct output: -74.0414611649 | Program output: -75.0819321   
Correct output: 145.6031300201 | Program output: 145.0819321   
Correct output: 125.9949201107 | Program output: 125.0819321   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction tag_float_718} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction float_add} {:instruction float_yank} {:instruction integer_inc} {:instruction float_add} {:instruction float_add} {:instruction tag_integer_667} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mult} {:instruction 19.42355631150687} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_568} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_mult} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_pop} {:instruction 8} {:instruction 8} {:instruction print_float} {:instruction 69.54768671383735} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_div} {:instruction 24} {:instruction integer_add} {:instruction print_integer} {:instruction integer_min} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction float_min} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc tag_float_718 integer_dup_items integer_yank float_max in1 float_add float_yank integer_inc float_add float_add tag_integer_667 tag_integer_667 float_yank integer_dec integer_fromfloat float_sub float_rot integer_sub integer_mult 19.42355631150687 in2 integer_add tag_integer_568 float_yank integer_dec integer_fromfloat tagged_752 float_mult float_frominteger integer_dup_times float_dup float_pop 8 8 print_float 69.54768671383735 float_dec print_integer float_pop 8 print_float integer_shove float_dec print_integer float_pop float_min integer_div integer_div integer_div 24 integer_add print_integer integer_min float_pop 8 print_float integer_shove integer_stackdepth print_integer integer_min float_min integer_div float_min float_dec integer_pop float_frominteger integer_min)
Errors: [0.9814 8 0.747 9 0.2912 7 0.6818 8 0.679 9 0.4663 7 0.2956 7 0.3142 10 0.6963 7 0.6786 9 0.3379 9 0.8667 8 0.6053 8 0.67 7 0.405 9 0.8014 9 0.622 7 0.6272 6 0.1109 8 0.1488 8 0.4119 7 0.4929 8 1.0405 8 0.5212 6 0.913 8]
Total: 211.40609999999998
Mean: 4.228122
Genome size: 68
Size: 69
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4511.289223799998
Median total errors in population: 211.40609999999998
Error averages by case: (172.03174349999935 9.05 172.67263750000174 9.786 176.9511351000031 8.336 170.11379219999984 9.116 172.07496290000148 9.497 168.76875180000002 8.208 169.69840330000088 8.191 169.4853023999971 10.785 170.415736600001 7.924 171.7261379000023 9.651 168.82171260000143 9.756 165.96912020000116 8.968 159.3256078999986 8.694 173.14743020000162 8.221 169.61307439999942 10.051 169.20505819999815 9.545 173.0860399000014 8.268 181.8742348999982 7.486 171.21654659999987 8.689 178.48292289999833 8.657 178.89857870000273 8.081 167.02889180000085 8.964 171.98511340000132 9.026 174.3254588999988 7.362 173.0368300000004 9.022)
Error minima by case: (0.0186 6 0.2466 7 0.2749 7 0.3182 7 0.321 7 0.4563 6 0.2156 6 0.2341 9 0.3037 6 0.3151 6 0.2579 7 0.1333 7 0.3947 6 0.3237 6 0.325 8 0.1923 7 0.378 6 0.3728 5 0.1009 5 0.1325 5 0.3956 6 0.4128 7 0.0405 7 0.4788 6 0.087 5)
Average genome size in population (length): 72.473
Average program size in population (points): 73.473
Average percent parens in population: 0.014
Minimum age in population: 84.9064545579152
Maximum age in population: 89.7147363925795
Average age in population: 87.65948204859467
Median age in population: 87.69351541647752
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.866
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.866
Total error diversity:				 0.192
Error (vector) diversity:			 0.221
Behavioral diversity:				 0.222
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 109536441
--- Timings ---
Current time: 1529616100061 milliseconds
Total Time:         225.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        87.6 seconds, 38.8%
Fitness Testing:    108.3 seconds, 48.0%
Report:              29.5 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
;;******************************
;; -*- Number IO problem report - generation 62
Test total error for best: 6000.0
Test mean error for best: 3.00000
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -19.1005183517819241
Correct output: 33.3348829534  | Program output: 33.3348829534819241
Correct output: -90.3731037929 | Program output: -90.3731037929819241
Correct output: -87.4001767285 | Program output: -87.4001767285819241
Correct output: -8.4029481486  | Program output: -8.4029481486819241
Correct output: 18.5482005326  | Program output: 18.5482005326819241
Correct output: 8.7863159396   | Program output: 8.7863159396819241
Correct output: 24.7677635354  | Program output: 24.7677635354819241
Correct output: -8.385649611   | Program output: -8.385649611819241
Correct output: 42.4033443172  | Program output: 42.4033443172819241
Correct output: -5.7440283823  | Program output: -5.7440283823819241
Correct output: 49.9486170067  | Program output: 49.9486170067819241
Correct output: 8.6872116188   | Program output: 8.6872116188819241
Correct output: 28.4119683961  | Program output: 28.4119683961819241
Correct output: -51.6769002079 | Program output: -51.6769002079819241
Correct output: 27.2805425748  | Program output: 27.2805425748819241
Correct output: -20.7039689338 | Program output: -20.7039689338819241
Correct output: -180.7091819668 | Program output: -180.7091819668819241
Correct output: 122.1928520414 | Program output: 122.1928520414819241
Correct output: -10.2306918248 | Program output: -10.2306918248819241
Correct output: -104.493817403 | Program output: -104.493817403819241
Correct output: 6.5890602195   | Program output: 6.5890602195819241
Correct output: -74.0414611649 | Program output: -74.0414611649819241
Correct output: 145.6031300201 | Program output: 145.6031300201819241
Correct output: 125.9949201107 | Program output: 125.9949201107819241
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction tag_float_718} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_sub} {:instruction integer_mult} {:instruction 19.42355631150687} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_766} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_mult} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction 8} {:instruction float_add} {:instruction print_float} {:instruction 67.9949052770575} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_mult} {:instruction 24} {:instruction integer_add} {:instruction print_integer} {:instruction integer_min} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction float_min} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc tag_float_718 integer_dup_items integer_yank float_max in1 integer_stackdepth float_yank integer_inc float_add tag_integer_667 tag_integer_667 float_yank integer_inc float_add tag_integer_667 tag_integer_667 float_yank integer_sub integer_mult 19.42355631150687 in2 integer_add tag_integer_766 float_yank integer_dec integer_fromfloat tagged_752 float_mult float_frominteger integer_dup_times 8 float_add print_float 67.9949052770575 float_dec print_integer float_pop 8 print_float integer_shove float_dec print_integer float_pop float_min integer_div integer_div integer_mult 24 integer_add print_integer integer_min float_pop 8 print_float integer_shove integer_stackdepth print_integer integer_min float_min integer_div integer_div integer_fromfloat float_swap integer_inc in1 float_min float_dec integer_pop float_frominteger integer_min)
Errors: [0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6]
Total: 150.0
Mean: 3.0
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4410.166125399997
Median total errors in population: 211.40609999999998
Error averages by case: (169.2648623999994 9.101 167.4616427000018 9.841 173.11535150000302 8.342 167.43367630000034 9.164 168.59673410000124 9.553 165.97163419999998 8.216 166.7849185000004 8.264 164.7552911999972 10.799 166.8712829000007 7.992 166.34949940000143 9.702 165.28278900000095 9.762 160.37984490000076 8.978 159.3033632999987 8.715 167.10398900000095 8.242 166.57168519999945 10.089 163.077805499998 9.616 170.01629830000158 8.224 179.43264179999852 7.483 164.81401749999978 8.725 174.23760279999837 8.68 175.78686420000264 8.143 164.1176400000004 8.995 168.1631292000016 9.096 166.72375729999985 7.346 166.45080420000028 9.031)
Error minima by case: (0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 5 0.0 5 0.0 5 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6)
Average genome size in population (length): 72.605
Average program size in population (points): 73.605
Average percent parens in population: 0.014
Minimum age in population: 86.36986139594904
Maximum age in population: 91.02580354291564
Average age in population: 89.13927268486951
Median age in population: 89.16548685791756
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.853
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.853
Total error diversity:				 0.191
Error (vector) diversity:			 0.228
Behavioral diversity:				 0.228
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 111376816
--- Timings ---
Current time: 1529616103855 milliseconds
Total Time:         229.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        88.9 seconds, 38.8%
Fitness Testing:    110.3 seconds, 48.1%
Report:              29.9 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
;;******************************
;; -*- Number IO problem report - generation 63
Test total error for best: 6000.0
Test mean error for best: 3.00000
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -19.1005183517819241
Correct output: 33.3348829534  | Program output: 33.3348829534819241
Correct output: -90.3731037929 | Program output: -90.3731037929819241
Correct output: -87.4001767285 | Program output: -87.4001767285819241
Correct output: -8.4029481486  | Program output: -8.4029481486819241
Correct output: 18.5482005326  | Program output: 18.5482005326819241
Correct output: 8.7863159396   | Program output: 8.7863159396819241
Correct output: 24.7677635354  | Program output: 24.7677635354819241
Correct output: -8.385649611   | Program output: -8.385649611819241
Correct output: 42.4033443172  | Program output: 42.4033443172819241
Correct output: -5.7440283823  | Program output: -5.7440283823819241
Correct output: 49.9486170067  | Program output: 49.9486170067819241
Correct output: 8.6872116188   | Program output: 8.6872116188819241
Correct output: 28.4119683961  | Program output: 28.4119683961819241
Correct output: -51.6769002079 | Program output: -51.6769002079819241
Correct output: 27.2805425748  | Program output: 27.2805425748819241
Correct output: -20.7039689338 | Program output: -20.7039689338819241
Correct output: -180.7091819668 | Program output: -180.7091819668819241
Correct output: 122.1928520414 | Program output: 122.1928520414819241
Correct output: -10.2306918248 | Program output: -10.2306918248819241
Correct output: -104.493817403 | Program output: -104.493817403819241
Correct output: 6.5890602195   | Program output: 6.5890602195819241
Correct output: -74.0414611649 | Program output: -74.0414611649819241
Correct output: 145.6031300201 | Program output: 145.6031300201819241
Correct output: 125.9949201107 | Program output: 125.9949201107819241
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction tag_float_718} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_sub} {:instruction integer_mult} {:instruction 19.42355631150687} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_766} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_mult} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction 8} {:instruction float_add} {:instruction print_float} {:instruction 67.9949052770575} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_mult} {:instruction 24} {:instruction integer_add} {:instruction print_integer} {:instruction integer_min} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction float_min} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc tag_float_718 integer_dup_items integer_yank float_max in1 integer_stackdepth float_yank integer_inc float_add tag_integer_667 tag_integer_667 float_yank integer_inc float_add tag_integer_667 tag_integer_667 float_yank integer_sub integer_mult 19.42355631150687 in2 integer_add tag_integer_766 float_yank integer_dec integer_fromfloat tagged_752 float_mult float_frominteger integer_dup_times 8 float_add print_float 67.9949052770575 float_dec print_integer float_pop 8 print_float integer_shove float_dec print_integer float_pop float_min integer_div integer_div integer_mult 24 integer_add print_integer integer_min float_pop 8 print_float integer_shove integer_stackdepth print_integer integer_min float_min integer_div integer_div integer_fromfloat float_swap integer_inc in1 float_min float_dec integer_pop float_frominteger integer_min)
Errors: [0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6]
Total: 150.0
Mean: 3.0
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4744.525327499998
Median total errors in population: 211.40609999999998
Error averages by case: (185.58613429999875 9.134 177.4617308000016 9.781 186.40894260000275 8.37 185.38471289999944 9.18 185.21251510000127 9.471 178.99487520000005 8.197 172.90372800000097 8.316 175.55949879999756 10.819 183.92746940000126 7.992 177.33430170000182 9.611 182.27581660000166 9.752 175.52643970000148 8.973 170.34576759999862 8.682 176.74818280000127 8.298 185.19553499999927 10.085 174.88184899999803 9.561 181.50285650000154 8.261 191.73743959999842 7.554 180.97325089999998 8.651 184.84264129999846 8.59 186.6217216000025 8.144 171.31729700000088 9.02 186.84039240000138 9.148 182.96333169999875 7.369 182.0158970000003 9.004)
Error minima by case: (0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 5 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6 0.0 5 0.0 5 0.0 5 0.0 6 0.0 6 0.0 6 0.0 6 0.0 6)
Average genome size in population (length): 72.431
Average program size in population (points): 73.431
Average percent parens in population: 0.014
Minimum age in population: 88.14068033347407
Maximum age in population: 92.60445152624828
Average age in population: 90.5366652367016
Median age in population: 90.55607220339733
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.852
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.852
Total error diversity:				 0.2
Error (vector) diversity:			 0.231
Behavioral diversity:				 0.231
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 113212216
--- Timings ---
Current time: 1529616107619 milliseconds
Total Time:         233.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        90.3 seconds, 38.8%
Fitness Testing:    112.1 seconds, 48.1%
Report:              30.5 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 64
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 64
;;******************************
;; -*- Number IO problem report - generation 64
Test total error for best: 3000.0
Test mean error for best: 1.50000
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -19.1005183517431
Correct output: 33.3348829534  | Program output: 33.3348829534431
Correct output: -90.3731037929 | Program output: -90.3731037929431
Correct output: -87.4001767285 | Program output: -87.4001767285431
Correct output: -8.4029481486  | Program output: -8.4029481486431
Correct output: 18.5482005326  | Program output: 18.5482005326431
Correct output: 8.7863159396   | Program output: 8.7863159396431
Correct output: 24.7677635354  | Program output: 24.7677635354431
Correct output: -8.385649611   | Program output: -8.385649611431
Correct output: 42.4033443172  | Program output: 42.4033443172431
Correct output: -5.7440283823  | Program output: -5.7440283823431
Correct output: 49.9486170067  | Program output: 49.9486170067431
Correct output: 8.6872116188   | Program output: 8.6872116188431
Correct output: 28.4119683961  | Program output: 28.4119683961431
Correct output: -51.6769002079 | Program output: -51.6769002079431
Correct output: 27.2805425748  | Program output: 27.2805425748431
Correct output: -20.7039689338 | Program output: -20.7039689338431
Correct output: -180.7091819668 | Program output: -180.7091819668431
Correct output: 122.1928520414 | Program output: 122.1928520414431
Correct output: -10.2306918248 | Program output: -10.2306918248431
Correct output: -104.493817403 | Program output: -104.493817403431
Correct output: 6.5890602195   | Program output: 6.5890602195431
Correct output: -74.0414611649 | Program output: -74.0414611649431
Correct output: 145.6031300201 | Program output: 145.6031300201431
Correct output: 125.9949201107 | Program output: 125.9949201107431
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction tag_float_718} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction integer_div} {:instruction in1} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_max} {:instruction integer_mult} {:instruction 19.42355631150687} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_766} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_mult} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction 8} {:instruction float_add} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_mult} {:instruction 24} {:instruction integer_add} {:instruction print_integer} {:instruction integer_min} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction float_min} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc tag_float_718 integer_dup_items integer_yank integer_div in1 integer_stackdepth float_yank integer_inc float_add tag_integer_667 tag_integer_667 float_yank integer_inc float_add tag_integer_667 tag_integer_667 float_yank integer_max integer_mult 19.42355631150687 in2 integer_add tag_integer_766 float_yank integer_dec integer_fromfloat tagged_752 float_mult float_frominteger integer_dup_times 8 float_add print_float integer_shove float_dec integer_mult 24 integer_add print_integer integer_min float_pop 8 print_float integer_shove integer_stackdepth print_integer integer_min float_min integer_div integer_div integer_fromfloat float_swap integer_inc in1 float_min float_dec integer_pop float_frominteger integer_min)
Errors: [0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3]
Total: 75.0
Mean: 1.5
Genome size: 60
Size: 61
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 4062.2185539999973
Median total errors in population: 211.40609999999998
Error averages by case: (158.6183061999992 8.966 150.62965710000142 9.634 161.3670724000026 8.257 154.05446109999983 9.009 158.570143800001 9.382 154.35065450000005 8.107 151.11589240000072 8.18 144.72054349999786 10.61 156.70896300000098 7.882 147.89346050000108 9.49 153.96842040000112 9.57 144.43182450000012 8.87 147.44363389999884 8.605 152.97811430000073 8.124 154.27749869999937 9.893 143.81078189999843 9.44 151.31125340000136 8.131 167.15882019999864 7.435 153.03079889999984 8.573 159.81286319999862 8.51 162.37138770000226 8.016 148.99959830000057 8.881 155.99936160000132 8.926 155.4669368999994 7.248 154.46710560000037 8.922)
Error minima by case: (0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3)
Average genome size in population (length): 72.348
Average program size in population (points): 73.348
Average percent parens in population: 0.014
Minimum age in population: 89.14068033347407
Maximum age in population: 94.00286293571232
Average age in population: 91.9724854492052
Median age in population: 92.04308130156463
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.867
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.867
Total error diversity:				 0.209
Error (vector) diversity:			 0.231
Behavioral diversity:				 0.234
--- Run Statistics ---
Number of program evaluations used so far: 65000
Number of point (instruction) evaluations so far: 115045966
--- Timings ---
Current time: 1529616111525 milliseconds
Total Time:         237.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        91.8 seconds, 38.7%
Fitness Testing:    114.0 seconds, 48.1%
Report:              31.0 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 65
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 65
;;******************************
;; -*- Number IO problem report - generation 65
Test total error for best: 3000.0
Test mean error for best: 1.50000
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -19.1005183517431
Correct output: 33.3348829534  | Program output: 33.3348829534431
Correct output: -90.3731037929 | Program output: -90.3731037929431
Correct output: -87.4001767285 | Program output: -87.4001767285431
Correct output: -8.4029481486  | Program output: -8.4029481486431
Correct output: 18.5482005326  | Program output: 18.5482005326431
Correct output: 8.7863159396   | Program output: 8.7863159396431
Correct output: 24.7677635354  | Program output: 24.7677635354431
Correct output: -8.385649611   | Program output: -8.385649611431
Correct output: 42.4033443172  | Program output: 42.4033443172431
Correct output: -5.7440283823  | Program output: -5.7440283823431
Correct output: 49.9486170067  | Program output: 49.9486170067431
Correct output: 8.6872116188   | Program output: 8.6872116188431
Correct output: 28.4119683961  | Program output: 28.4119683961431
Correct output: -51.6769002079 | Program output: -51.6769002079431
Correct output: 27.2805425748  | Program output: 27.2805425748431
Correct output: -20.7039689338 | Program output: -20.7039689338431
Correct output: -180.7091819668 | Program output: -180.7091819668431
Correct output: 122.1928520414 | Program output: 122.1928520414431
Correct output: -10.2306918248 | Program output: -10.2306918248431
Correct output: -104.493817403 | Program output: -104.493817403431
Correct output: 6.5890602195   | Program output: 6.5890602195431
Correct output: -74.0414611649 | Program output: -74.0414611649431
Correct output: 145.6031300201 | Program output: 145.6031300201431
Correct output: 125.9949201107 | Program output: 125.9949201107431
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction tag_float_718} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction integer_div} {:instruction in1} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_max} {:instruction integer_mult} {:instruction 19.42355631150687} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_766} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_mult} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction 8} {:instruction float_add} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_mult} {:instruction 24} {:instruction integer_add} {:instruction print_integer} {:instruction integer_min} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction float_min} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc tag_float_718 integer_dup_items integer_yank integer_div in1 integer_stackdepth float_yank integer_inc float_add tag_integer_667 tag_integer_667 float_yank integer_inc float_add tag_integer_667 tag_integer_667 float_yank integer_max integer_mult 19.42355631150687 in2 integer_add tag_integer_766 float_yank integer_dec integer_fromfloat tagged_752 float_mult float_frominteger integer_dup_times 8 float_add print_float integer_shove float_dec integer_mult 24 integer_add print_integer integer_min float_pop 8 print_float integer_shove integer_stackdepth print_integer integer_min float_min integer_div integer_div integer_fromfloat float_swap integer_inc in1 float_min float_dec integer_pop float_frominteger integer_min)
Errors: [0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3]
Total: 75.0
Mean: 1.5
Genome size: 60
Size: 61
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 4214.7582558999975
Median total errors in population: 211.40609999999998
Error averages by case: (161.9151732999989 8.961 160.28678630000144 9.596 167.29081500000257 8.236 156.72782500000022 8.995 162.35909450000105 9.274 159.23705020000006 8.127 164.58580410000133 8.268 154.32699039999767 10.374 160.23893320000124 7.954 156.38414450000118 9.409 157.82252420000142 9.472 147.28894540000042 8.766 156.3002147999988 8.568 161.47677860000147 8.258 158.40143069999942 9.804 153.01251699999827 9.267 159.68224910000134 8.123 172.73417789999846 7.505 154.18009619999992 8.507 168.29677779999858 8.489 167.74326630000223 8.055 162.29696800000127 8.887 159.98878150000127 8.972 157.8139226999993 7.375 156.3069892000003 8.818)
Error minima by case: (0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3)
Average genome size in population (length): 72.169
Average program size in population (points): 73.169
Average percent parens in population: 0.014
Minimum age in population: 90.14068033347407
Maximum age in population: 95.44133133833577
Average age in population: 93.50525129907581
Median age in population: 93.55381760355506
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.862
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.862
Total error diversity:				 0.215
Error (vector) diversity:			 0.245
Behavioral diversity:				 0.262
--- Run Statistics ---
Number of program evaluations used so far: 66000
Number of point (instruction) evaluations so far: 116874916
--- Timings ---
Current time: 1529616115279 milliseconds
Total Time:         240.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        93.2 seconds, 38.7%
Fitness Testing:    115.9 seconds, 48.1%
Report:              31.5 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 65
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 66
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 66
;;******************************
;; -*- Number IO problem report - generation 66
Test total error for best: 3000.0
Test mean error for best: 1.50000
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -19.1005183517431
Correct output: 33.3348829534  | Program output: 33.3348829534431
Correct output: -90.3731037929 | Program output: -90.3731037929431
Correct output: -87.4001767285 | Program output: -87.4001767285431
Correct output: -8.4029481486  | Program output: -8.4029481486431
Correct output: 18.5482005326  | Program output: 18.5482005326431
Correct output: 8.7863159396   | Program output: 8.7863159396431
Correct output: 24.7677635354  | Program output: 24.7677635354431
Correct output: -8.385649611   | Program output: -8.385649611431
Correct output: 42.4033443172  | Program output: 42.4033443172431
Correct output: -5.7440283823  | Program output: -5.7440283823431
Correct output: 49.9486170067  | Program output: 49.9486170067431
Correct output: 8.6872116188   | Program output: 8.6872116188431
Correct output: 28.4119683961  | Program output: 28.4119683961431
Correct output: -51.6769002079 | Program output: -51.6769002079431
Correct output: 27.2805425748  | Program output: 27.2805425748431
Correct output: -20.7039689338 | Program output: -20.7039689338431
Correct output: -180.7091819668 | Program output: -180.7091819668431
Correct output: 122.1928520414 | Program output: 122.1928520414431
Correct output: -10.2306918248 | Program output: -10.2306918248431
Correct output: -104.493817403 | Program output: -104.493817403431
Correct output: 6.5890602195   | Program output: 6.5890602195431
Correct output: -74.0414611649 | Program output: -74.0414611649431
Correct output: 145.6031300201 | Program output: 145.6031300201431
Correct output: 125.9949201107 | Program output: 125.9949201107431
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction tag_float_718} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction integer_inc} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction integer_inc} {:instruction float_add} {:instruction float_mult} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_max} {:instruction integer_mult} {:instruction 19.42355631150687} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_766} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_mult} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction 8} {:instruction float_add} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_mult} {:instruction 24} {:instruction integer_add} {:instruction print_integer} {:instruction integer_min} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction float_min} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_sub})
Best program: (float_inc tag_float_718 integer_dup_items integer_yank float_max in1 integer_stackdepth float_yank integer_inc integer_stackdepth float_yank integer_inc float_add float_mult tag_integer_667 float_yank integer_inc float_add tag_integer_667 tag_integer_667 float_yank integer_max integer_mult 19.42355631150687 in2 integer_add tag_integer_766 float_yank integer_dec integer_fromfloat tagged_752 float_mult float_frominteger integer_dup_times 8 float_add print_float integer_shove float_dec integer_mult 24 integer_add print_integer integer_min float_pop 8 print_float integer_shove integer_stackdepth print_integer integer_min float_min integer_div integer_div integer_fromfloat float_swap integer_inc in1 float_min float_dec integer_pop float_frominteger integer_sub)
Errors: [0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3]
Total: 75.0
Mean: 1.5
Genome size: 63
Size: 64
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3495.488017799998
Median total errors in population: 211.40609999999998
Error averages by case: (135.55948220000047 8.247 129.18376650000067 8.654 140.80469480000136 7.706 126.89176150000075 8.263 136.7625953000005 8.283 134.42286049999996 7.63 135.4768036999995 7.956 121.85413199999914 9.039 134.64262609999952 7.615 125.31488489999973 8.438 130.24382339999957 8.484 118.8433799999997 8.05 130.33677079999944 7.851 133.25546999999952 7.895 128.45476169999975 8.735 122.14130769999916 8.316 131.66278610000057 7.578 145.45070349999997 7.29 129.3193078999999 7.755 139.91098819999937 7.729 141.46887540000125 7.566 132.22114699999958 8.22 129.94441780000062 8.257 130.82509750000057 7.188 129.72657330000027 8.024)
Error minima by case: (0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3)
Average genome size in population (length): 71.625
Average program size in population (points): 72.625
Average percent parens in population: 0.014
Minimum age in population: 92.45099839486001
Maximum age in population: 96.80674398079178
Average age in population: 94.93644008834772
Median age in population: 94.96952910107186
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 39
Genome diversity (% unique Plush genomes):	 0.794
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.794
Total error diversity:				 0.233
Error (vector) diversity:			 0.243
Behavioral diversity:				 0.3
--- Run Statistics ---
Number of program evaluations used so far: 67000
Number of point (instruction) evaluations so far: 118689891
--- Timings ---
Current time: 1529616119351 milliseconds
Total Time:         244.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        94.6 seconds, 38.6%
Fitness Testing:    118.1 seconds, 48.3%
Report:              31.9 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 66
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 67
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 67
;;******************************
;; -*- Number IO problem report - generation 67
Test total error for best: 1000.0
Test mean error for best: 0.50000
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -19.10051835171
Correct output: 33.3348829534  | Program output: 33.33488295341
Correct output: -90.3731037929 | Program output: -90.37310379291
Correct output: -87.4001767285 | Program output: -87.40017672851
Correct output: -8.4029481486  | Program output: -8.40294814861
Correct output: 18.5482005326  | Program output: 18.54820053261
Correct output: 8.7863159396   | Program output: 8.78631593961 
Correct output: 24.7677635354  | Program output: 24.76776353541
Correct output: -8.385649611   | Program output: -8.3856496111 
Correct output: 42.4033443172  | Program output: 42.40334431721
Correct output: -5.7440283823  | Program output: -5.74402838231
Correct output: 49.9486170067  | Program output: 49.94861700671
Correct output: 8.6872116188   | Program output: 8.68721161881 
Correct output: 28.4119683961  | Program output: 28.41196839611
Correct output: -51.6769002079 | Program output: -51.67690020791
Correct output: 27.2805425748  | Program output: 27.28054257481
Correct output: -20.7039689338 | Program output: -20.70396893381
Correct output: -180.7091819668 | Program output: -180.70918196681
Correct output: 122.1928520414 | Program output: 122.19285204141
Correct output: -10.2306918248 | Program output: -10.23069182481
Correct output: -104.493817403 | Program output: -104.4938174031
Correct output: 6.5890602195   | Program output: 6.58906021951 
Correct output: -74.0414611649 | Program output: -74.04146116491
Correct output: 145.6031300201 | Program output: 145.60313002011
Correct output: 125.9949201107 | Program output: 125.99492011071
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction tag_float_718} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction integer_inc} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction integer_inc} {:instruction float_add} {:instruction float_mult} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_max} {:instruction integer_mult} {:instruction 19.42355631150687} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_766} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_mult} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction 8} {:instruction float_add} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_mult} {:instruction 24} {:instruction integer_add} {:instruction integer_mult} {:instruction integer_div} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_min} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction integer_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_stackdepth} {:instruction integer_sub})
Best program: (float_inc tag_float_718 integer_dup_items integer_yank float_max in1 integer_stackdepth float_yank integer_inc integer_stackdepth float_yank integer_inc float_add float_mult tag_integer_667 float_yank integer_inc float_add tag_integer_667 tag_integer_667 float_yank integer_max integer_mult 19.42355631150687 in2 integer_add tag_integer_766 float_yank integer_dec integer_fromfloat tagged_752 float_mult float_frominteger integer_dup_times 8 float_add print_float integer_shove float_dec integer_mult 24 integer_add integer_mult integer_div float_pop 8 print_float integer_shove integer_stackdepth print_integer integer_min float_min integer_div integer_div integer_fromfloat float_swap integer_inc in1 integer_dec float_dec integer_pop integer_stackdepth integer_sub)
Errors: [0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1]
Total: 25.0
Mean: 0.5
Genome size: 63
Size: 64
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2913.984378200001
Median total errors in population: 150.0
Error averages by case: (118.89530159999994 6.422 103.28744319999998 6.595 127.92675040000005 6.186 99.50395499999995 6.454 119.64970139999991 6.264 119.7318511 6.159 116.75983239999995 6.536 88.56468999999994 6.488 115.93560630000002 6.231 92.9610142999999 6.341 109.1238716999999 6.431 90.59178770000001 6.231 113.00839959999993 6.195 114.14070360000007 6.412 105.11711140000001 6.573 88.67755749999992 6.181 104.8682134999999 6.115 134.3582735999999 6.114 106.51379000000003 6.074 121.46764939999994 6.103 126.87580449999994 6.154 114.6452678 6.41 106.58581210000007 6.528 109.83598739999998 6.031 107.51300270000002 6.217)
Error minima by case: (0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1)
Average genome size in population (length): 68.601
Average program size in population (points): 69.601
Average percent parens in population: 0.015
Minimum age in population: 93.62820326550077
Maximum age in population: 98.37822205175856
Average age in population: 96.4789827465352
Median age in population: 96.5444629681157
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.776
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.776
Total error diversity:				 0.191
Error (vector) diversity:			 0.201
Behavioral diversity:				 0.32
--- Run Statistics ---
Number of program evaluations used so far: 68000
Number of point (instruction) evaluations so far: 120429766
--- Timings ---
Current time: 1529616123193 milliseconds
Total Time:         248.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        95.9 seconds, 38.6%
Fitness Testing:    120.2 seconds, 48.3%
Report:              32.4 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 67
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 68
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 68
;;******************************
;; -*- Number IO problem report - generation 68
Test total error for best: 1000.0
Test mean error for best: 0.50000
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -19.10051835179
Correct output: 33.3348829534  | Program output: 33.33488295349
Correct output: -90.3731037929 | Program output: -90.37310379299
Correct output: -87.4001767285 | Program output: -87.40017672859
Correct output: -8.4029481486  | Program output: -8.40294814869
Correct output: 18.5482005326  | Program output: 18.54820053269
Correct output: 8.7863159396   | Program output: 8.78631593969 
Correct output: 24.7677635354  | Program output: 24.76776353549
Correct output: -8.385649611   | Program output: -8.3856496119 
Correct output: 42.4033443172  | Program output: 42.40334431729
Correct output: -5.7440283823  | Program output: -5.74402838239
Correct output: 49.9486170067  | Program output: 49.94861700679
Correct output: 8.6872116188   | Program output: 8.68721161889 
Correct output: 28.4119683961  | Program output: 28.41196839619
Correct output: -51.6769002079 | Program output: -51.67690020799
Correct output: 27.2805425748  | Program output: 27.28054257489
Correct output: -20.7039689338 | Program output: -20.70396893389
Correct output: -180.7091819668 | Program output: -180.70918196689
Correct output: 122.1928520414 | Program output: 122.19285204149
Correct output: -10.2306918248 | Program output: -10.23069182489
Correct output: -104.493817403 | Program output: -104.4938174039
Correct output: 6.5890602195   | Program output: 6.58906021959 
Correct output: -74.0414611649 | Program output: -74.04146116499
Correct output: 145.6031300201 | Program output: 145.60313002019
Correct output: 125.9949201107 | Program output: 125.99492011079
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction float_inc} {:instruction tag_float_718} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction float_yank} {:instruction integer_shove} {:instruction float_add} {:instruction tag_integer_667} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_max} {:instruction float_yank} {:instruction integer_sub} {:instruction integer_mult} {:instruction 19.42355631150687} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_766} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_mult} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction 9} {:instruction float_add} {:instruction print_float} {:instruction 67.9949052770575} {:instruction float_dec} {:instruction print_integer} {:instruction float_pop} {:instruction 8} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc float_inc tag_float_718 integer_dup_items integer_yank integer_dup_items integer_yank float_max in1 float_yank integer_shove float_add tag_integer_667 tag_integer_667 float_yank integer_inc float_add tag_integer_667 tag_integer_667 float_yank integer_max float_yank integer_sub integer_mult 19.42355631150687 in2 integer_add tag_integer_766 float_yank integer_dec integer_fromfloat tagged_752 float_mult float_frominteger integer_dup_times 9 float_add print_float 67.9949052770575 float_dec print_integer float_pop 8 print_float integer_shove float_dec integer_stackdepth integer_pop float_frominteger integer_min)
Errors: [0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1]
Total: 25.0
Mean: 0.5
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 1872.8845661000005
Median total errors in population: 75.0
Error averages by case: (77.77072389999996 4.843 59.14567959999997 5.134 84.42422649999997 4.573 56.39150460000002 4.898 78.55758419999997 4.741 78.9931954 4.601 84.33621960000004 5.053 45.9966326 4.931 74.63843020000002 4.724 51.11300919999998 4.77 67.85166369999999 4.931 51.846454499999986 4.708 75.0722937 4.637 73.89861590000005 4.942 63.73474790000001 4.996 43.7793875 4.691 67.09187269999997 4.593 91.27821589999995 4.574 68.773096 4.637 84.58117209999996 4.7 86.04212129999998 4.56 80.21564710000006 4.942 65.40521080000002 4.989 71.99759030000001 4.57 70.47127090000001 4.74)
Error minima by case: (0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1)
Average genome size in population (length): 64.109
Average program size in population (points): 65.109
Average percent parens in population: 0.016
Minimum age in population: 95.24659357016742
Maximum age in population: 99.9361484022607
Average age in population: 97.97433057206547
Median age in population: 98.06260577765688
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 39
Genome diversity (% unique Plush genomes):	 0.737
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.737
Total error diversity:				 0.147
Error (vector) diversity:			 0.159
Behavioral diversity:				 0.257
--- Run Statistics ---
Number of program evaluations used so far: 69000
Number of point (instruction) evaluations so far: 122056841
--- Timings ---
Current time: 1529616126906 milliseconds
Total Time:         252.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        97.2 seconds, 38.5%
Fitness Testing:    122.2 seconds, 48.4%
Report:              32.8 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 68
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 69
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 69
;;******************************
;; -*- Number IO problem report - generation 69
Test total error for best: 0.0
Test mean error for best: 0.00000
Test Case    0 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    1 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    2 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    3 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    4 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    5 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    6 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    7 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    8 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    9 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   10 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   11 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   12 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   13 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   14 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   15 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   16 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   17 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   18 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   19 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   20 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   21 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   22 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   23 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   24 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   25 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   26 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   27 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   28 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   29 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   30 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   31 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   32 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   33 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   34 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   35 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   36 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   37 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   38 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   39 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   40 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   41 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   42 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   43 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   44 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   45 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   46 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   47 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   48 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   49 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   50 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   51 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   52 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   53 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   54 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   55 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   56 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   57 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   58 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   59 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   60 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   61 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   62 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   63 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   64 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   65 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   66 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   67 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   68 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   69 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   70 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   71 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   72 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   73 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   74 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   75 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   76 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   77 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   78 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   79 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   80 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   81 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   82 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   83 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   84 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   85 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   86 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   87 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   88 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   89 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   90 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   91 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   92 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   93 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   94 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   95 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   96 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   97 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   98 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   99 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  100 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  101 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  102 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  103 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  104 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  105 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  106 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  107 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  108 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  109 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  110 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  111 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  112 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  113 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  114 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  115 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  116 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  117 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  118 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  119 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  120 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  121 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  122 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  123 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  124 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  125 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  126 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  127 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  128 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  129 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  130 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  131 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  132 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  133 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  134 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  135 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  136 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  137 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  138 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  139 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  140 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  141 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  142 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  143 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  144 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  145 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  146 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  147 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  148 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  149 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  150 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  151 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  152 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  153 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  154 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  155 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  156 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  157 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  158 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  159 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  160 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  161 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  162 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  163 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  164 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  165 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  166 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  167 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  168 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  169 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  170 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  171 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  172 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  173 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  174 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  175 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  176 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  177 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  178 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  179 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  180 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  181 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  182 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  183 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  184 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  185 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  186 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  187 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  188 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  189 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  190 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  191 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  192 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  193 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  194 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  195 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  196 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  197 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  198 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  199 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  200 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  201 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  202 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  203 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  204 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  205 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  206 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  207 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  208 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  209 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  210 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  211 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  212 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  213 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  214 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  215 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  216 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  217 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  218 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  219 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  220 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  221 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  222 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  223 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  224 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  225 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  226 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  227 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  228 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  229 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  230 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  231 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  232 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  233 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  234 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  235 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  236 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  237 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  238 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  239 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  240 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  241 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  242 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  243 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  244 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  245 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  246 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  247 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  248 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  249 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  250 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  251 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  252 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  253 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  254 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  255 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  256 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  257 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  258 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  259 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  260 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  261 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  262 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  263 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  264 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  265 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  266 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  267 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  268 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  269 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  270 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  271 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  272 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  273 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  274 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  275 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  276 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  277 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  278 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  279 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  280 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  281 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  282 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  283 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  284 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  285 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  286 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  287 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  288 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  289 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  290 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  291 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  292 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  293 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  294 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  295 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  296 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  297 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  298 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  299 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  300 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  301 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  302 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  303 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  304 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  305 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  306 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  307 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  308 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  309 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  310 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  311 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  312 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  313 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  314 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  315 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  316 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  317 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  318 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  319 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  320 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  321 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  322 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  323 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  324 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  325 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  326 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  327 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  328 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  329 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  330 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  331 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  332 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  333 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  334 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  335 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  336 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  337 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  338 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  339 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  340 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  341 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  342 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  343 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  344 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  345 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  346 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  347 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  348 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  349 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  350 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  351 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  352 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  353 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  354 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  355 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  356 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  357 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  358 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  359 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  360 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  361 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  362 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  363 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  364 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  365 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  366 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  367 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  368 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  369 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  370 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  371 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  372 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  373 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  374 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  375 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  376 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  377 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  378 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  379 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  380 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  381 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  382 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  383 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  384 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  385 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  386 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  387 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  388 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  389 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  390 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  391 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  392 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  393 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  394 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  395 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  396 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  397 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  398 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  399 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  400 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  401 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  402 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  403 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  404 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  405 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  406 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  407 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  408 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  409 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  410 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  411 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  412 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  413 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  414 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  415 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  416 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  417 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  418 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  419 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  420 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  421 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  422 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  423 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  424 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  425 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  426 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  427 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  428 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  429 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  430 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  431 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  432 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  433 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  434 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  435 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  436 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  437 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  438 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  439 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  440 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  441 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  442 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  443 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  444 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  445 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  446 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  447 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  448 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  449 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  450 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  451 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  452 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  453 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  454 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  455 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  456 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  457 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  458 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  459 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  460 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  461 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  462 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  463 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  464 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  465 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  466 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  467 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  468 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  469 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  470 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  471 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  472 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  473 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  474 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  475 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  476 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  477 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  478 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  479 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  480 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  481 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  482 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  483 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  484 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  485 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  486 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  487 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  488 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  489 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  490 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  491 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  492 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  493 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  494 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  495 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  496 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  497 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  498 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  499 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  500 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  501 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  502 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  503 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  504 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  505 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  506 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  507 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  508 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  509 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  510 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  511 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  512 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  513 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  514 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  515 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  516 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  517 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  518 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  519 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  520 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  521 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  522 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  523 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  524 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  525 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  526 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  527 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  528 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  529 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  530 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  531 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  532 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  533 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  534 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  535 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  536 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  537 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  538 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  539 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  540 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  541 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  542 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  543 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  544 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  545 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  546 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  547 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  548 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  549 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  550 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  551 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  552 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  553 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  554 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  555 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  556 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  557 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  558 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  559 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  560 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  561 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  562 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  563 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  564 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  565 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  566 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  567 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  568 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  569 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  570 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  571 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  572 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  573 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  574 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  575 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  576 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  577 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  578 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  579 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  580 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  581 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  582 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  583 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  584 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  585 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  586 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  587 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  588 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  589 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  590 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  591 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  592 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  593 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  594 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  595 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  596 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  597 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  598 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  599 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  600 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  601 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  602 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  603 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  604 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  605 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  606 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  607 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  608 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  609 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  610 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  611 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  612 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  613 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  614 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  615 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  616 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  617 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  618 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  619 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  620 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  621 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  622 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  623 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  624 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  625 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  626 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  627 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  628 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  629 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  630 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  631 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  632 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  633 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  634 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  635 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  636 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  637 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  638 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  639 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  640 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  641 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  642 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  643 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  644 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  645 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  646 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  647 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  648 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  649 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  650 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  651 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  652 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  653 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  654 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  655 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  656 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  657 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  658 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  659 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  660 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  661 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  662 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  663 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  664 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  665 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  666 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  667 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  668 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  669 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  670 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  671 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  672 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  673 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  674 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  675 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  676 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  677 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  678 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  679 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  680 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  681 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  682 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  683 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  684 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  685 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  686 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  687 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  688 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  689 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  690 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  691 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  692 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  693 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  694 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  695 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  696 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  697 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  698 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  699 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  700 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  701 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  702 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  703 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  704 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  705 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  706 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  707 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  708 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  709 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  710 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  711 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  712 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  713 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  714 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  715 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  716 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  717 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  718 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  719 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  720 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  721 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  722 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  723 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  724 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  725 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  726 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  727 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  728 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  729 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  730 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  731 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  732 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  733 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  734 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  735 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  736 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  737 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  738 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  739 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  740 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  741 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  742 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  743 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  744 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  745 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  746 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  747 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  748 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  749 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  750 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  751 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  752 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  753 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  754 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  755 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  756 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  757 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  758 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  759 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  760 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  761 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  762 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  763 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  764 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  765 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  766 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  767 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  768 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  769 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  770 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  771 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  772 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  773 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  774 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  775 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  776 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  777 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  778 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  779 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  780 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  781 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  782 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  783 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  784 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  785 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  786 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  787 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  788 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  789 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  790 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  791 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  792 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  793 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  794 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  795 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  796 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  797 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  798 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  799 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  800 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  801 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  802 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  803 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  804 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  805 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  806 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  807 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  808 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  809 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  810 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  811 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  812 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  813 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  814 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  815 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  816 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  817 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  818 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  819 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  820 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  821 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  822 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  823 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  824 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  825 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  826 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  827 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  828 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  829 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  830 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  831 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  832 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  833 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  834 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  835 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  836 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  837 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  838 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  839 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  840 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  841 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  842 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  843 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  844 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  845 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  846 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  847 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  848 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  849 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  850 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  851 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  852 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  853 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  854 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  855 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  856 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  857 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  858 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  859 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  860 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  861 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  862 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  863 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  864 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  865 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  866 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  867 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  868 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  869 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  870 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  871 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  872 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  873 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  874 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  875 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  876 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  877 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  878 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  879 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  880 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  881 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  882 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  883 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  884 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  885 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  886 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  887 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  888 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  889 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  890 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  891 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  892 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  893 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  894 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  895 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  896 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  897 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  898 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  899 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  900 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  901 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  902 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  903 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  904 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  905 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  906 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  907 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  908 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  909 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  910 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  911 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  912 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  913 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  914 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  915 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  916 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  917 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  918 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  919 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  920 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  921 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  922 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  923 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  924 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  925 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  926 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  927 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  928 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  929 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  930 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  931 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  932 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  933 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  934 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  935 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  936 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  937 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  938 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  939 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  940 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  941 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  942 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  943 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  944 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  945 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  946 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  947 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  948 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  949 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  950 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  951 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  952 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  953 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  954 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  955 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  956 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  957 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  958 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  959 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  960 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  961 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  962 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  963 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  964 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  965 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  966 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  967 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  968 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  969 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  970 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  971 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  972 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  973 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  974 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  975 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  976 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  977 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  978 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  979 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  980 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  981 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  982 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  983 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  984 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  985 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  986 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  987 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  988 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  989 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  990 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  991 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  992 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  993 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  994 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  995 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  996 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  997 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  998 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  999 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -19.1005183517
Correct output: 33.3348829534  | Program output: 33.3348829534 
Correct output: -90.3731037929 | Program output: -90.3731037929
Correct output: -87.4001767285 | Program output: -87.4001767285
Correct output: -8.4029481486  | Program output: -8.4029481486 
Correct output: 18.5482005326  | Program output: 18.5482005326 
Correct output: 8.7863159396   | Program output: 8.7863159396  
Correct output: 24.7677635354  | Program output: 24.7677635354 
Correct output: -8.385649611   | Program output: -8.385649611  
Correct output: 42.4033443172  | Program output: 42.4033443172 
Correct output: -5.7440283823  | Program output: -5.7440283823 
Correct output: 49.9486170067  | Program output: 49.9486170067 
Correct output: 8.6872116188   | Program output: 8.6872116188  
Correct output: 28.4119683961  | Program output: 28.4119683961 
Correct output: -51.6769002079 | Program output: -51.6769002079
Correct output: 27.2805425748  | Program output: 27.2805425748 
Correct output: -20.7039689338 | Program output: -20.7039689338
Correct output: -180.7091819668 | Program output: -180.7091819668
Correct output: 122.1928520414 | Program output: 122.1928520414
Correct output: -10.2306918248 | Program output: -10.2306918248
Correct output: -104.493817403 | Program output: -104.493817403
Correct output: 6.5890602195   | Program output: 6.5890602195  
Correct output: -74.0414611649 | Program output: -74.0414611649
Correct output: 145.6031300201 | Program output: 145.6031300201
Correct output: 125.9949201107 | Program output: 125.9949201107
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction tag_float_718} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_max} {:instruction in1} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction integer_inc} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_inc} {:instruction float_add} {:instruction tag_integer_667} {:instruction tag_integer_667} {:instruction float_yank} {:instruction integer_max} {:instruction integer_mult} {:instruction 19.42355631150687} {:instruction in2} {:instruction integer_add} {:instruction tag_integer_766} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tagged_752} {:instruction float_mult} {:instruction float_frominteger} {:instruction float_swap} {:instruction 8} {:instruction float_add} {:instruction print_float} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_mult} {:instruction 24} {:instruction integer_add} {:instruction integer_min} {:instruction float_pop} {:instruction float_min} {:instruction integer_div} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction float_min} {:instruction float_dec} {:instruction integer_pop} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_inc tag_float_718 integer_dup_items integer_yank float_max in1 integer_stackdepth float_yank integer_inc integer_stackdepth float_yank integer_inc float_add tag_integer_667 float_yank integer_inc float_add tag_integer_667 tag_integer_667 float_yank integer_inc float_add tag_integer_667 tag_integer_667 float_yank integer_max integer_mult 19.42355631150687 in2 integer_add tag_integer_766 float_yank integer_dec integer_fromfloat tagged_752 float_mult float_frominteger float_swap 8 float_add print_float integer_shove float_dec integer_mult 24 integer_add integer_min float_pop float_min integer_div integer_div integer_fromfloat float_swap integer_inc in1 float_min float_dec integer_pop float_frominteger integer_min)
Errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
Total: 0.0
Mean: 0.0
Genome size: 60
Size: 61
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2110.9862317
Median total errors in population: 75.0
Error averages by case: (92.27960099999999 4.294 66.20727869999999 4.463 93.57869119999995 3.975 69.92190109999997 4.33 92.85501629999999 4.135 93.04328210000003 3.985 88.55719669999999 4.384 55.2769914 4.29 88.89663990000001 4.095 58.99564839999996 4.167 81.3639066 4.317 60.59565360000002 4.047 89.4047699 4.01 77.2240796 4.278 77.64769870000002 4.435 53.47565260000004 4.084 72.06053189999997 3.971 102.02125359999997 3.973 80.44029589999998 3.998 89.11340909999998 4.037 93.33132839999998 3.961 84.04853780000002 4.256 79.51259650000003 4.431 84.41690900000003 3.957 82.77436170000004 4.07)
Error minima by case: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
Average genome size in population (length): 61.581
Average program size in population (points): 62.581
Average percent parens in population: 0.016
Minimum age in population: 97.40035941085611
Maximum age in population: 101.2666542396981
Average age in population: 99.54055587776448
Median age in population: 99.59046896904819
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.759
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.759
Total error diversity:				 0.168
Error (vector) diversity:			 0.177
Behavioral diversity:				 0.251
--- Run Statistics ---
Number of program evaluations used so far: 70000
Number of point (instruction) evaluations so far: 123621841
--- Timings ---
Current time: 1529616131030 milliseconds
Total Time:         256.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        98.8 seconds, 38.5%
Fitness Testing:    124.1 seconds, 48.4%
Report:              33.3 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 69
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 69
Successful program: (float_inc tag_float_718 integer_dup_items integer_yank float_max in1 integer_stackdepth float_yank integer_inc integer_stackdepth float_yank integer_inc float_add tag_integer_667 float_yank integer_inc float_add tag_integer_667 tag_integer_667 float_yank integer_inc float_add tag_integer_667 tag_integer_667 float_yank integer_max integer_mult 19.42355631150687 in2 integer_add tag_integer_766 float_yank integer_dec integer_fromfloat tagged_752 float_mult float_frominteger float_swap 8 float_add print_float integer_shove float_dec integer_mult 24 integer_add integer_min float_pop float_min integer_div integer_div integer_fromfloat float_swap integer_inc in1 float_min float_dec integer_pop float_frominteger integer_min)
Errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
Total error: 0.0
History: null
Size: 61


Auto-simplifying with starting size: 61
step: 0
program: (float_inc tag_float_718 integer_dup_items integer_yank float_max in1 integer_stackdepth float_yank integer_inc integer_stackdepth float_yank integer_inc float_add tag_integer_667 float_yank integer_inc float_add tag_integer_667 tag_integer_667 float_yank integer_inc float_add tag_integer_667 tag_integer_667 float_yank integer_max integer_mult 19.42355631150687 in2 integer_add tag_integer_766 float_yank integer_dec integer_fromfloat tagged_752 float_mult float_frominteger float_swap 8 float_add print_float integer_shove float_dec integer_mult 24 integer_add integer_min float_pop float_min integer_div integer_div integer_fromfloat float_swap integer_inc in1 float_min float_dec integer_pop float_frominteger integer_min)
errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
total: 0.0
size: 61

step: 500
program: (in1 19.42355631150687 in2 tag_integer_766 integer_fromfloat tagged_752 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 10

step: 1000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 1500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 2000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 2500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 3000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 3500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 4000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 4500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 5000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Number IO problem report - generation 69
Test total error for best: 0.0
Test mean error for best: 0.00000
Test Case    0 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    1 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    2 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    3 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    4 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    5 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    6 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    7 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    8 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    9 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   10 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   11 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   12 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   13 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   14 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   15 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   16 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   17 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   18 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   19 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   20 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   21 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   22 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   23 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   24 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   25 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   26 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   27 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   28 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   29 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   30 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   31 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   32 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   33 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   34 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   35 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   36 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   37 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   38 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   39 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   40 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   41 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   42 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   43 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   44 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   45 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   46 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   47 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   48 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   49 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   50 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   51 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   52 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   53 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   54 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   55 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   56 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   57 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   58 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   59 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   60 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   61 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   62 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   63 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   64 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   65 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   66 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   67 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   68 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   69 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   70 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   71 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   72 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   73 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   74 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   75 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   76 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   77 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   78 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   79 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   80 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   81 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   82 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   83 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   84 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   85 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   86 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   87 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   88 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   89 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   90 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   91 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   92 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   93 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   94 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   95 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   96 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   97 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   98 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   99 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  100 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  101 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  102 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  103 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  104 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  105 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  106 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  107 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  108 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  109 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  110 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  111 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  112 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  113 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  114 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  115 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  116 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  117 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  118 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  119 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  120 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  121 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  122 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  123 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  124 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  125 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  126 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  127 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  128 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  129 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  130 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  131 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  132 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  133 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  134 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  135 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  136 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  137 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  138 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  139 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  140 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  141 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  142 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  143 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  144 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  145 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  146 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  147 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  148 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  149 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  150 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  151 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  152 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  153 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  154 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  155 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  156 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  157 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  158 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  159 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  160 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  161 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  162 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  163 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  164 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  165 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  166 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  167 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  168 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  169 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  170 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  171 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  172 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  173 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  174 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  175 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  176 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  177 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  178 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  179 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  180 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  181 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  182 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  183 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  184 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  185 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  186 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  187 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  188 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  189 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  190 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  191 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  192 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  193 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  194 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  195 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  196 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  197 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  198 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  199 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  200 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  201 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  202 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  203 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  204 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  205 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  206 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  207 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  208 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  209 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  210 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  211 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  212 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  213 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  214 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  215 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  216 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  217 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  218 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  219 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  220 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  221 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  222 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  223 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  224 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  225 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  226 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  227 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  228 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  229 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  230 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  231 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  232 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  233 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  234 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  235 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  236 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  237 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  238 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  239 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  240 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  241 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  242 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  243 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  244 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  245 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  246 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  247 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  248 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  249 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  250 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  251 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  252 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  253 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  254 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  255 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  256 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  257 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  258 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  259 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  260 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  261 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  262 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  263 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  264 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  265 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  266 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  267 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  268 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  269 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  270 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  271 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  272 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  273 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  274 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  275 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  276 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  277 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  278 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  279 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  280 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  281 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  282 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  283 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  284 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  285 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  286 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  287 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  288 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  289 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  290 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  291 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  292 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  293 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  294 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  295 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  296 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  297 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  298 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  299 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  300 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  301 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  302 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  303 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  304 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  305 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  306 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  307 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  308 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  309 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  310 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  311 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  312 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  313 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  314 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  315 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  316 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  317 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  318 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  319 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  320 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  321 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  322 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  323 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  324 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  325 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  326 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  327 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  328 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  329 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  330 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  331 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  332 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  333 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  334 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  335 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  336 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  337 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  338 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  339 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  340 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  341 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  342 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  343 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  344 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  345 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  346 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  347 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  348 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  349 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  350 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  351 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  352 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  353 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  354 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  355 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  356 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  357 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  358 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  359 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  360 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  361 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  362 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  363 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  364 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  365 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  366 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  367 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  368 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  369 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  370 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  371 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  372 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  373 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  374 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  375 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  376 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  377 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  378 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  379 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  380 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  381 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  382 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  383 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  384 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  385 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  386 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  387 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  388 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  389 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  390 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  391 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  392 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  393 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  394 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  395 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  396 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  397 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  398 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  399 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  400 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  401 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  402 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  403 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  404 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  405 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  406 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  407 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  408 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  409 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  410 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  411 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  412 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  413 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  414 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  415 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  416 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  417 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  418 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  419 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  420 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  421 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  422 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  423 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  424 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  425 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  426 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  427 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  428 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  429 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  430 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  431 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  432 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  433 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  434 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  435 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  436 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  437 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  438 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  439 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  440 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  441 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  442 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  443 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  444 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  445 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  446 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  447 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  448 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  449 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  450 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  451 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  452 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  453 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  454 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  455 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  456 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  457 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  458 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  459 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  460 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  461 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  462 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  463 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  464 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  465 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  466 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  467 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  468 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  469 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  470 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  471 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  472 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  473 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  474 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  475 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  476 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  477 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  478 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  479 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  480 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  481 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  482 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  483 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  484 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  485 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  486 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  487 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  488 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  489 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  490 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  491 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  492 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  493 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  494 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  495 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  496 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  497 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  498 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  499 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  500 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  501 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  502 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  503 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  504 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  505 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  506 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  507 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  508 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  509 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  510 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  511 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  512 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  513 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  514 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  515 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  516 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  517 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  518 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  519 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  520 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  521 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  522 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  523 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  524 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  525 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  526 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  527 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  528 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  529 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  530 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  531 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  532 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  533 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  534 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  535 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  536 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  537 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  538 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  539 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  540 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  541 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  542 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  543 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  544 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  545 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  546 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  547 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  548 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  549 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  550 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  551 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  552 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  553 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  554 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  555 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  556 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  557 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  558 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  559 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  560 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  561 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  562 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  563 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  564 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  565 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  566 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  567 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  568 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  569 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  570 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  571 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  572 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  573 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  574 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  575 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  576 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  577 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  578 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  579 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  580 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  581 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  582 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  583 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  584 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  585 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  586 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  587 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  588 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  589 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  590 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  591 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  592 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  593 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  594 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  595 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  596 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  597 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  598 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  599 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  600 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  601 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  602 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  603 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  604 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  605 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  606 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  607 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  608 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  609 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  610 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  611 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  612 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  613 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  614 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  615 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  616 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  617 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  618 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  619 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  620 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  621 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  622 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  623 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  624 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  625 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  626 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  627 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  628 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  629 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  630 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  631 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  632 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  633 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  634 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  635 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  636 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  637 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  638 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  639 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  640 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  641 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  642 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  643 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  644 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  645 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  646 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  647 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  648 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  649 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  650 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  651 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  652 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  653 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  654 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  655 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  656 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  657 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  658 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  659 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  660 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  661 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  662 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  663 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  664 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  665 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  666 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  667 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  668 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  669 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  670 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  671 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  672 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  673 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  674 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  675 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  676 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  677 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  678 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  679 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  680 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  681 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  682 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  683 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  684 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  685 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  686 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  687 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  688 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  689 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  690 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  691 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  692 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  693 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  694 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  695 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  696 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  697 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  698 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  699 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  700 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  701 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  702 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  703 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  704 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  705 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  706 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  707 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  708 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  709 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  710 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  711 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  712 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  713 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  714 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  715 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  716 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  717 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  718 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  719 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  720 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  721 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  722 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  723 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  724 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  725 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  726 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  727 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  728 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  729 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  730 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  731 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  732 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  733 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  734 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  735 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  736 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  737 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  738 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  739 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  740 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  741 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  742 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  743 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  744 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  745 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  746 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  747 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  748 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  749 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  750 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  751 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  752 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  753 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  754 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  755 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  756 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  757 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  758 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  759 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  760 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  761 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  762 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  763 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  764 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  765 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  766 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  767 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  768 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  769 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  770 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  771 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  772 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  773 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  774 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  775 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  776 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  777 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  778 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  779 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  780 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  781 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  782 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  783 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  784 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  785 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  786 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  787 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  788 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  789 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  790 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  791 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  792 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  793 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  794 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  795 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  796 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  797 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  798 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  799 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  800 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  801 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  802 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  803 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  804 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  805 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  806 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  807 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  808 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  809 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  810 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  811 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  812 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  813 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  814 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  815 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  816 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  817 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  818 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  819 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  820 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  821 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  822 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  823 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  824 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  825 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  826 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  827 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  828 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  829 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  830 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  831 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  832 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  833 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  834 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  835 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  836 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  837 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  838 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  839 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  840 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  841 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  842 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  843 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  844 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  845 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  846 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  847 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  848 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  849 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  850 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  851 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  852 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  853 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  854 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  855 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  856 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  857 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  858 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  859 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  860 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  861 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  862 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  863 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  864 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  865 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  866 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  867 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  868 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  869 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  870 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  871 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  872 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  873 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  874 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  875 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  876 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  877 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  878 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  879 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  880 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  881 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  882 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  883 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  884 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  885 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  886 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  887 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  888 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  889 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  890 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  891 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  892 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  893 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  894 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  895 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  896 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  897 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  898 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  899 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  900 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  901 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  902 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  903 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  904 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  905 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  906 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  907 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  908 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  909 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  910 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  911 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  912 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  913 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  914 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  915 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  916 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  917 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  918 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  919 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  920 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  921 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  922 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  923 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  924 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  925 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  926 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  927 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  928 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  929 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  930 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  931 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  932 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  933 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  934 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  935 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  936 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  937 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  938 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  939 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  940 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  941 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  942 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  943 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  944 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  945 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  946 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  947 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  948 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  949 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  950 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  951 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  952 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  953 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  954 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  955 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  956 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  957 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  958 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  959 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  960 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  961 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  962 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  963 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  964 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  965 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  966 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  967 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  968 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  969 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  970 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  971 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  972 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  973 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  974 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  975 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  976 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  977 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  978 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  979 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  980 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  981 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  982 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  983 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  984 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  985 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  986 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  987 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  988 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  989 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  990 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  991 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  992 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  993 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  994 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  995 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  996 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  997 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  998 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  999 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: -19.1005183517 | Program output: -19.1005183517
Correct output: 33.3348829534  | Program output: 33.3348829534 
Correct output: -90.3731037929 | Program output: -90.3731037929
Correct output: -87.4001767285 | Program output: -87.4001767285
Correct output: -8.4029481486  | Program output: -8.4029481486 
Correct output: 18.5482005326  | Program output: 18.5482005326 
Correct output: 8.7863159396   | Program output: 8.7863159396  
Correct output: 24.7677635354  | Program output: 24.7677635354 
Correct output: -8.385649611   | Program output: -8.385649611  
Correct output: 42.4033443172  | Program output: 42.4033443172 
Correct output: -5.7440283823  | Program output: -5.7440283823 
Correct output: 49.9486170067  | Program output: 49.9486170067 
Correct output: 8.6872116188   | Program output: 8.6872116188  
Correct output: 28.4119683961  | Program output: 28.4119683961 
Correct output: -51.6769002079 | Program output: -51.6769002079
Correct output: 27.2805425748  | Program output: 27.2805425748 
Correct output: -20.7039689338 | Program output: -20.7039689338
Correct output: -180.7091819668 | Program output: -180.7091819668
Correct output: 122.1928520414 | Program output: 122.1928520414
Correct output: -10.2306918248 | Program output: -10.2306918248
Correct output: -104.493817403 | Program output: -104.493817403
Correct output: 6.5890602195   | Program output: 6.5890602195  
Correct output: -74.0414611649 | Program output: -74.0414611649
Correct output: 145.6031300201 | Program output: 145.6031300201
Correct output: 125.9949201107 | Program output: 125.9949201107
;;******************************
