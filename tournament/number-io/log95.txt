Command line args: clojush.problems.software.number-io :parent-selection :tournament :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
epigenetic-markers = []
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :tournament
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
report-simplifications = 0
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [[12.056970769908304 -24] -11.943029230091696]
Train Case:   1 | Input/Output: [[-6.089681786444402 -30] -36.0896817864444]
Train Case:   2 | Input/Output: [[-28.530400810070716 -97] -125.53040081007072]
Train Case:   3 | Input/Output: [[-45.726310620929 -99] -144.72631062092898]
Train Case:   4 | Input/Output: [[93.01689398160809 10] 103.01689398160809]
Train Case:   5 | Input/Output: [[-36.12230469322215 20] -16.122304693222148]
Train Case:   6 | Input/Output: [[91.91947662037933 64] 155.91947662037933]
Train Case:   7 | Input/Output: [[70.25670552781585 -7] 63.25670552781585]
Train Case:   8 | Input/Output: [[-68.30624264501176 38] -30.306242645011764]
Train Case:   9 | Input/Output: [[95.36863441013 79] 174.36863441013]
Train Case:  10 | Input/Output: [[38.04150557903557 91] 129.04150557903557]
Train Case:  11 | Input/Output: [[-44.99522279691075 95] 50.00477720308925]
Train Case:  12 | Input/Output: [[12.70627868407874 -82] -69.29372131592126]
Train Case:  13 | Input/Output: [[38.363354991867226 -77] -38.636645008132774]
Train Case:  14 | Input/Output: [[-64.98896392443076 -89] -153.98896392443078]
Train Case:  15 | Input/Output: [[25.47804675489151 -55] -29.52195324510849]
Train Case:  16 | Input/Output: [[77.97201888141848 -16] 61.97201888141848]
Train Case:  17 | Input/Output: [[33.83904137553131 -11] 22.83904137553131]
Train Case:  18 | Input/Output: [[62.80757137194277 -12] 50.80757137194277]
Train Case:  19 | Input/Output: [[60.97547531344139 -38] 22.975475313441393]
Train Case:  20 | Input/Output: [[-10.44920198193617 26] 15.55079801806383]
Train Case:  21 | Input/Output: [[70.79373777084606 -50] 20.793737770846064]
Train Case:  22 | Input/Output: [[-66.52727790128003 77] 10.47272209871997]
Train Case:  23 | Input/Output: [[15.0717334845815 -82] -66.9282665154185]
Train Case:  24 | Input/Output: [[-39.02949095221588 -52] -91.02949095221588]
Test Case:   0 | Input/Output: [[-45.92883222785493 32] -13.928832227854933]
Test Case:   1 | Input/Output: [[43.87284389995986 32] 75.87284389995986]
Test Case:   2 | Input/Output: [[54.51188498755943 -18] 36.51188498755943]
Test Case:   3 | Input/Output: [[25.984040475944866 -15] 10.984040475944866]
Test Case:   4 | Input/Output: [[-19.09928824999443 1] -18.09928824999443]
Test Case:   5 | Input/Output: [[-88.69859959795787 -31] -119.69859959795787]
Test Case:   6 | Input/Output: [[-21.779664386150827 -8] -29.779664386150827]
Test Case:   7 | Input/Output: [[76.3184862798642 78] 154.3184862798642]
Test Case:   8 | Input/Output: [[35.324968926530886 -75] -39.675031073469114]
Test Case:   9 | Input/Output: [[-5.723432213884365 -43] -48.723432213884365]
Test Case:  10 | Input/Output: [[9.15687313840155 48] 57.15687313840155]
Test Case:  11 | Input/Output: [[65.49073159332443 -79] -13.509268406675574]
Test Case:  12 | Input/Output: [[41.923648675389586 -34] 7.923648675389586]
Test Case:  13 | Input/Output: [[6.671170773285624 -28] -21.328829226714376]
Test Case:  14 | Input/Output: [[34.81708777186944 23] 57.81708777186944]
Test Case:  15 | Input/Output: [[50.967470496349165 -93] -42.032529503650835]
Test Case:  16 | Input/Output: [[7.962136848562238 -99] -91.03786315143776]
Test Case:  17 | Input/Output: [[87.90360014701884 62] 149.90360014701884]
Test Case:  18 | Input/Output: [[-24.16360942537139 -60] -84.16360942537139]
Test Case:  19 | Input/Output: [[-51.28864118035945 -55] -106.28864118035945]
Test Case:  20 | Input/Output: [[-29.953826547974643 -78] -107.95382654797464]
Test Case:  21 | Input/Output: [[78.6562627313406 68] 146.6562627313406]
Test Case:  22 | Input/Output: [[-27.406393650268356 16] -11.406393650268356]
Test Case:  23 | Input/Output: [[57.16794882757418 -6] 51.16794882757418]
Test Case:  24 | Input/Output: [[-37.85198247069448 94] 56.14801752930552]
Test Case:  25 | Input/Output: [[-67.69093661918828 50] -17.690936619188278]
Test Case:  26 | Input/Output: [[-63.3324830314528 -63] -126.3324830314528]
Test Case:  27 | Input/Output: [[65.63280890540292 -73] -7.367191094597075]
Test Case:  28 | Input/Output: [[23.94866366369304 23] 46.94866366369304]
Test Case:  29 | Input/Output: [[16.00130810113771 -1] 15.00130810113771]
Test Case:  30 | Input/Output: [[-3.753012139701738 12] 8.246987860298262]
Test Case:  31 | Input/Output: [[62.41477905132933 42] 104.41477905132933]
Test Case:  32 | Input/Output: [[10.293301916082171 -7] 3.2933019160821715]
Test Case:  33 | Input/Output: [[-53.75126172573144 48] -5.751261725731439]
Test Case:  34 | Input/Output: [[-42.891367353393875 -41] -83.89136735339387]
Test Case:  35 | Input/Output: [[41.88641669255372 -35] 6.886416692553723]
Test Case:  36 | Input/Output: [[-8.77854148808423 90] 81.22145851191577]
Test Case:  37 | Input/Output: [[-4.340592722108738 76] 71.65940727789126]
Test Case:  38 | Input/Output: [[-0.39343101402562297 -38] -38.39343101402562]
Test Case:  39 | Input/Output: [[-80.97146991323689 85] 4.028530086763112]
Test Case:  40 | Input/Output: [[-98.72335742403982 89] -9.723357424039818]
Test Case:  41 | Input/Output: [[-1.5092428215338032 -49] -50.5092428215338]
Test Case:  42 | Input/Output: [[55.41059342745987 -59] -3.5894065725401276]
Test Case:  43 | Input/Output: [[-80.02458978930464 30] -50.02458978930464]
Test Case:  44 | Input/Output: [[-86.41286380674586 -11] -97.41286380674586]
Test Case:  45 | Input/Output: [[-83.43339170737833 44] -39.433391707378334]
Test Case:  46 | Input/Output: [[-11.401897957700058 77] 65.59810204229994]
Test Case:  47 | Input/Output: [[14.204414287707266 -48] -33.795585712292734]
Test Case:  48 | Input/Output: [[94.99501758293286 -34] 60.99501758293286]
Test Case:  49 | Input/Output: [[-7.093426257960786 28] 20.906573742039214]
Test Case:  50 | Input/Output: [[66.90127201918699 -89] -22.09872798081301]
Test Case:  51 | Input/Output: [[68.87687445185 26] 94.87687445185]
Test Case:  52 | Input/Output: [[78.02707408041559 31] 109.02707408041559]
Test Case:  53 | Input/Output: [[-95.15484813471258 32] -63.15484813471258]
Test Case:  54 | Input/Output: [[-95.75153442747697 36] -59.75153442747697]
Test Case:  55 | Input/Output: [[56.62578829398518 79] 135.62578829398518]
Test Case:  56 | Input/Output: [[-69.74147740317827 28] -41.741477403178266]
Test Case:  57 | Input/Output: [[-28.662485390896734 87] 58.337514609103266]
Test Case:  58 | Input/Output: [[82.73818368566225 -42] 40.73818368566225]
Test Case:  59 | Input/Output: [[-83.87107792876188 -37] -120.87107792876188]
Test Case:  60 | Input/Output: [[-40.98405493004642 -19] -59.98405493004642]
Test Case:  61 | Input/Output: [[79.014104073456 95] 174.014104073456]
Test Case:  62 | Input/Output: [[-9.254785827419525 72] 62.745214172580475]
Test Case:  63 | Input/Output: [[89.51966420328293 -98] -8.480335796717071]
Test Case:  64 | Input/Output: [[-32.302636325797835 69] 36.697363674202165]
Test Case:  65 | Input/Output: [[-93.75295512264232 -1] -94.75295512264232]
Test Case:  66 | Input/Output: [[81.49121630745461 -70] 11.491216307454607]
Test Case:  67 | Input/Output: [[-79.71338906457359 17] -62.71338906457359]
Test Case:  68 | Input/Output: [[52.51208472816447 -64] -11.487915271835533]
Test Case:  69 | Input/Output: [[-59.765927552096024 45] -14.765927552096024]
Test Case:  70 | Input/Output: [[-80.16880131767003 -81] -161.16880131767005]
Test Case:  71 | Input/Output: [[-92.1946065997776 46] -46.1946065997776]
Test Case:  72 | Input/Output: [[-56.63058351632806 40] -16.63058351632806]
Test Case:  73 | Input/Output: [[-37.3464221562478 -37] -74.3464221562478]
Test Case:  74 | Input/Output: [[-5.139634356615659 47] 41.86036564338434]
Test Case:  75 | Input/Output: [[16.4759171733988 37] 53.4759171733988]
Test Case:  76 | Input/Output: [[93.4252351331493 -50] 43.4252351331493]
Test Case:  77 | Input/Output: [[-17.796792261197552 -100] -117.79679226119755]
Test Case:  78 | Input/Output: [[-12.297103749548882 23] 10.702896250451118]
Test Case:  79 | Input/Output: [[-7.384771358823301 -47] -54.3847713588233]
Test Case:  80 | Input/Output: [[-45.671193403376996 93] 47.328806596623004]
Test Case:  81 | Input/Output: [[-53.186514500429396 0] -53.186514500429396]
Test Case:  82 | Input/Output: [[-8.951461992686433 42] 33.04853800731357]
Test Case:  83 | Input/Output: [[-58.787685231836974 -31] -89.78768523183697]
Test Case:  84 | Input/Output: [[27.400740862849233 -25] 2.400740862849233]
Test Case:  85 | Input/Output: [[-44.035263694156136 93] 48.964736305843864]
Test Case:  86 | Input/Output: [[46.140181094856814 68] 114.14018109485681]
Test Case:  87 | Input/Output: [[45.928340161005224 -61] -15.071659838994776]
Test Case:  88 | Input/Output: [[-13.973693376027342 -52] -65.97369337602734]
Test Case:  89 | Input/Output: [[49.67298773408805 84] 133.67298773408805]
Test Case:  90 | Input/Output: [[-18.911127147202194 5] -13.911127147202194]
Test Case:  91 | Input/Output: [[62.769838983454406 -48] 14.769838983454406]
Test Case:  92 | Input/Output: [[76.20191467227312 61] 137.20191467227312]
Test Case:  93 | Input/Output: [[-91.33596080151838 -18] -109.33596080151838]
Test Case:  94 | Input/Output: [[98.24354858728461 -55] 43.24354858728461]
Test Case:  95 | Input/Output: [[-39.982880982267346 -8] -47.982880982267346]
Test Case:  96 | Input/Output: [[77.86844914704884 46] 123.86844914704884]
Test Case:  97 | Input/Output: [[82.34886902586237 -61] 21.34886902586237]
Test Case:  98 | Input/Output: [[-48.109308840458965 72] 23.890691159541035]
Test Case:  99 | Input/Output: [[-83.5847133742835 -61] -144.5847133742835]
Test Case: 100 | Input/Output: [[-9.363297496378948 83] 73.63670250362105]
Test Case: 101 | Input/Output: [[43.2315451185836 14] 57.2315451185836]
Test Case: 102 | Input/Output: [[89.37378531878534 -46] 43.37378531878534]
Test Case: 103 | Input/Output: [[-49.42864949947578 36] -13.428649499475782]
Test Case: 104 | Input/Output: [[-74.0365015560176 79] 4.963498443982402]
Test Case: 105 | Input/Output: [[-38.94230080437162 96] 57.05769919562838]
Test Case: 106 | Input/Output: [[-14.62214351182773 -42] -56.62214351182773]
Test Case: 107 | Input/Output: [[-66.05704331517683 -19] -85.05704331517683]
Test Case: 108 | Input/Output: [[-1.5928043617910959 17] 15.407195638208904]
Test Case: 109 | Input/Output: [[93.41605415328524 -36] 57.416054153285245]
Test Case: 110 | Input/Output: [[44.79772456548346 -91] -46.20227543451654]
Test Case: 111 | Input/Output: [[-94.15316417666683 88] -6.153164176666834]
Test Case: 112 | Input/Output: [[-99.09572188678668 -68] -167.0957218867867]
Test Case: 113 | Input/Output: [[-25.750324196262127 -95] -120.75032419626213]
Test Case: 114 | Input/Output: [[55.046078418112444 -91] -35.953921581887556]
Test Case: 115 | Input/Output: [[67.30819927340085 47] 114.30819927340085]
Test Case: 116 | Input/Output: [[55.919909335535834 -70] -14.080090664464166]
Test Case: 117 | Input/Output: [[93.06059893889244 34] 127.06059893889244]
Test Case: 118 | Input/Output: [[-79.27041778696626 63] -16.270417786966263]
Test Case: 119 | Input/Output: [[-85.792745991465 -53] -138.79274599146498]
Test Case: 120 | Input/Output: [[-73.7028504677067 -66] -139.7028504677067]
Test Case: 121 | Input/Output: [[-63.71778117707119 -62] -125.71778117707119]
Test Case: 122 | Input/Output: [[-93.59206788767835 -38] -131.59206788767835]
Test Case: 123 | Input/Output: [[90.42277343948126 -35] 55.42277343948126]
Test Case: 124 | Input/Output: [[-34.1675449532715 -74] -108.1675449532715]
Test Case: 125 | Input/Output: [[-45.0250816000854 85] 39.9749183999146]
Test Case: 126 | Input/Output: [[38.028928695387236 -88] -49.971071304612764]
Test Case: 127 | Input/Output: [[30.049658764579135 -50] -19.950341235420865]
Test Case: 128 | Input/Output: [[97.0359239618962 13] 110.0359239618962]
Test Case: 129 | Input/Output: [[-47.712893264251676 7] -40.712893264251676]
Test Case: 130 | Input/Output: [[0.0473615117148114 -7] -6.952638488285189]
Test Case: 131 | Input/Output: [[53.744787180551185 -16] 37.744787180551185]
Test Case: 132 | Input/Output: [[-24.92488335645207 -94] -118.92488335645207]
Test Case: 133 | Input/Output: [[36.99756482177483 -28] 8.99756482177483]
Test Case: 134 | Input/Output: [[81.29869226777902 -57] 24.298692267779018]
Test Case: 135 | Input/Output: [[-24.235264413659777 -14] -38.23526441365978]
Test Case: 136 | Input/Output: [[90.10744178854847 87] 177.10744178854847]
Test Case: 137 | Input/Output: [[-98.79949312056453 -35] -133.79949312056453]
Test Case: 138 | Input/Output: [[71.94878985805153 -25] 46.948789858051526]
Test Case: 139 | Input/Output: [[67.48354377915703 -36] 31.48354377915703]
Test Case: 140 | Input/Output: [[8.120964472088104 50] 58.120964472088104]
Test Case: 141 | Input/Output: [[-81.74926990335493 62] -19.74926990335493]
Test Case: 142 | Input/Output: [[30.860819643869007 -43] -12.139180356130993]
Test Case: 143 | Input/Output: [[-2.823148089582972 43] 40.17685191041703]
Test Case: 144 | Input/Output: [[1.7186486493911133 39] 40.71864864939111]
Test Case: 145 | Input/Output: [[-42.978861734956794 -69] -111.9788617349568]
Test Case: 146 | Input/Output: [[59.780149603599966 42] 101.78014960359997]
Test Case: 147 | Input/Output: [[-2.1481008461182114 58] 55.85189915388179]
Test Case: 148 | Input/Output: [[-17.729341343733182 13] -4.729341343733182]
Test Case: 149 | Input/Output: [[20.61655713633219 79] 99.61655713633219]
Test Case: 150 | Input/Output: [[7.664871367771497 31] 38.6648713677715]
Test Case: 151 | Input/Output: [[-58.21489540352089 -20] -78.2148954035209]
Test Case: 152 | Input/Output: [[-87.31272411875999 5] -82.31272411875999]
Test Case: 153 | Input/Output: [[-83.64728782479173 90] 6.352712175208268]
Test Case: 154 | Input/Output: [[89.35322489405405 78] 167.35322489405405]
Test Case: 155 | Input/Output: [[50.02905946235791 21] 71.0290594623579]
Test Case: 156 | Input/Output: [[-29.630918747037185 55] 25.369081252962815]
Test Case: 157 | Input/Output: [[73.07739340772812 -88] -14.922606592271876]
Test Case: 158 | Input/Output: [[52.51600517961802 31] 83.51600517961802]
Test Case: 159 | Input/Output: [[-64.17256743591908 61] -3.1725674359190776]
Test Case: 160 | Input/Output: [[82.3273838343236 3] 85.3273838343236]
Test Case: 161 | Input/Output: [[-3.5830571697889724 -43] -46.58305716978897]
Test Case: 162 | Input/Output: [[22.99853889431955 -48] -25.00146110568045]
Test Case: 163 | Input/Output: [[92.19936414044327 27] 119.19936414044327]
Test Case: 164 | Input/Output: [[-34.20869062779221 -9] -43.20869062779221]
Test Case: 165 | Input/Output: [[-72.1963528616202 63] -9.196352861620198]
Test Case: 166 | Input/Output: [[97.5919581623545 -68] 29.5919581623545]
Test Case: 167 | Input/Output: [[20.728436938812138 -82] -61.27156306118786]
Test Case: 168 | Input/Output: [[8.802921959591075 -79] -70.19707804040893]
Test Case: 169 | Input/Output: [[59.2021827527457 -92] -32.7978172472543]
Test Case: 170 | Input/Output: [[-6.86913964366218 80] 73.13086035633782]
Test Case: 171 | Input/Output: [[16.211211652016175 60] 76.21121165201617]
Test Case: 172 | Input/Output: [[54.72465288100054 88] 142.72465288100054]
Test Case: 173 | Input/Output: [[84.38253212577709 85] 169.3825321257771]
Test Case: 174 | Input/Output: [[57.72034992851056 -29] 28.720349928510558]
Test Case: 175 | Input/Output: [[8.092302980552702 4] 12.092302980552702]
Test Case: 176 | Input/Output: [[1.42404232179274 -17] -15.57595767820726]
Test Case: 177 | Input/Output: [[-88.20668940933672 -28] -116.20668940933672]
Test Case: 178 | Input/Output: [[60.24799121141069 -7] 53.24799121141069]
Test Case: 179 | Input/Output: [[68.63650286521877 -81] -12.363497134781227]
Test Case: 180 | Input/Output: [[67.95243317363503 -81] -13.047566826364971]
Test Case: 181 | Input/Output: [[18.80406085381989 22] 40.80406085381989]
Test Case: 182 | Input/Output: [[41.02676130867556 -45] -3.9732386913244397]
Test Case: 183 | Input/Output: [[-84.14599683601776 -27] -111.14599683601776]
Test Case: 184 | Input/Output: [[2.2075817030227256 3] 5.207581703022726]
Test Case: 185 | Input/Output: [[75.86384737003033 36] 111.86384737003033]
Test Case: 186 | Input/Output: [[-8.216112803336443 53] 44.78388719666356]
Test Case: 187 | Input/Output: [[99.00903602817053 -41] 58.00903602817053]
Test Case: 188 | Input/Output: [[-83.46812256944773 24] -59.46812256944773]
Test Case: 189 | Input/Output: [[39.17554532040518 -44] -4.824454679594822]
Test Case: 190 | Input/Output: [[80.0459623206151 63] 143.0459623206151]
Test Case: 191 | Input/Output: [[29.80958280586853 -33] -3.19041719413147]
Test Case: 192 | Input/Output: [[-17.504758117397017 50] 32.49524188260298]
Test Case: 193 | Input/Output: [[-0.30455201067383086 -24] -24.30455201067383]
Test Case: 194 | Input/Output: [[77.62808080637939 51] 128.6280808063794]
Test Case: 195 | Input/Output: [[55.270090264179004 -56] -0.7299097358209963]
Test Case: 196 | Input/Output: [[93.09150691129528 -54] 39.09150691129528]
Test Case: 197 | Input/Output: [[10.972515897210599 -1] 9.972515897210599]
Test Case: 198 | Input/Output: [[97.94983188946534 -86] 11.949831889465344]
Test Case: 199 | Input/Output: [[-85.86527267444019 -48] -133.86527267444018]
Test Case: 200 | Input/Output: [[-71.29096529528762 45] -26.29096529528762]
Test Case: 201 | Input/Output: [[-79.38983779494066 -39] -118.38983779494066]
Test Case: 202 | Input/Output: [[-77.07541063264273 73] -4.075410632642729]
Test Case: 203 | Input/Output: [[68.21121305444689 22] 90.21121305444689]
Test Case: 204 | Input/Output: [[-57.61955954639091 -34] -91.61955954639092]
Test Case: 205 | Input/Output: [[0.5091628986780847 -76] -75.49083710132192]
Test Case: 206 | Input/Output: [[37.79606970550026 72] 109.79606970550026]
Test Case: 207 | Input/Output: [[-74.45387739339746 69] -5.4538773933974625]
Test Case: 208 | Input/Output: [[-45.38356041256999 -100] -145.38356041256998]
Test Case: 209 | Input/Output: [[-3.7955071249574672 26] 22.204492875042533]
Test Case: 210 | Input/Output: [[34.44039469140577 66] 100.44039469140577]
Test Case: 211 | Input/Output: [[64.077125412469 55] 119.077125412469]
Test Case: 212 | Input/Output: [[-53.065560227470755 -9] -62.065560227470755]
Test Case: 213 | Input/Output: [[-44.7564518439215 -94] -138.7564518439215]
Test Case: 214 | Input/Output: [[52.536764113824006 -69] -16.463235886175994]
Test Case: 215 | Input/Output: [[54.36333505725352 -11] 43.36333505725352]
Test Case: 216 | Input/Output: [[65.49576872802868 -48] 17.49576872802868]
Test Case: 217 | Input/Output: [[-15.057251413746428 32] 16.942748586253572]
Test Case: 218 | Input/Output: [[-99.88001821984294 -27] -126.88001821984294]
Test Case: 219 | Input/Output: [[30.490454995821864 -87] -56.509545004178136]
Test Case: 220 | Input/Output: [[-99.88329149933615 -91] -190.88329149933617]
Test Case: 221 | Input/Output: [[-64.40503241934886 83] 18.594967580651144]
Test Case: 222 | Input/Output: [[4.061115458355019 49] 53.06111545835502]
Test Case: 223 | Input/Output: [[36.857921093317714 -79] -42.142078906682286]
Test Case: 224 | Input/Output: [[9.202319458343851 -29] -19.79768054165615]
Test Case: 225 | Input/Output: [[-65.94055125072737 -5] -70.94055125072737]
Test Case: 226 | Input/Output: [[-31.222569873450468 -23] -54.22256987345047]
Test Case: 227 | Input/Output: [[-18.080886401537555 98] 79.91911359846245]
Test Case: 228 | Input/Output: [[8.409789066150324 -69] -60.590210933849676]
Test Case: 229 | Input/Output: [[39.567002461994576 -18] 21.567002461994576]
Test Case: 230 | Input/Output: [[-27.262832150770052 -66] -93.26283215077005]
Test Case: 231 | Input/Output: [[18.603182951584074 -70] -51.396817048415926]
Test Case: 232 | Input/Output: [[-20.36216494305971 16] -4.36216494305971]
Test Case: 233 | Input/Output: [[-42.53490982821051 -9] -51.53490982821051]
Test Case: 234 | Input/Output: [[6.793909963695398 22] 28.7939099636954]
Test Case: 235 | Input/Output: [[-13.355460731783552 -99] -112.35546073178355]
Test Case: 236 | Input/Output: [[-92.18414393508635 -35] -127.18414393508635]
Test Case: 237 | Input/Output: [[22.343219479574074 -60] -37.656780520425926]
Test Case: 238 | Input/Output: [[-60.27206178541409 -13] -73.27206178541408]
Test Case: 239 | Input/Output: [[6.109623416195049 41] 47.10962341619505]
Test Case: 240 | Input/Output: [[44.27395748126838 -66] -21.726042518731617]
Test Case: 241 | Input/Output: [[-32.18345519653482 37] 4.816544803465177]
Test Case: 242 | Input/Output: [[92.49358072051476 81] 173.49358072051476]
Test Case: 243 | Input/Output: [[-22.230636705269262 56] 33.76936329473074]
Test Case: 244 | Input/Output: [[-15.826221384660329 5] -10.826221384660329]
Test Case: 245 | Input/Output: [[-49.554583939739686 6] -43.554583939739686]
Test Case: 246 | Input/Output: [[70.0686168314688 -66] 4.068616831468802]
Test Case: 247 | Input/Output: [[84.94229363646488 85] 169.94229363646488]
Test Case: 248 | Input/Output: [[65.0707303718552 -98] -32.929269628144795]
Test Case: 249 | Input/Output: [[14.223462901623122 -86] -71.77653709837688]
Test Case: 250 | Input/Output: [[-67.02494160753285 -31] -98.02494160753285]
Test Case: 251 | Input/Output: [[-91.18221658606262 3] -88.18221658606262]
Test Case: 252 | Input/Output: [[65.49640282747308 -27] 38.49640282747308]
Test Case: 253 | Input/Output: [[-80.45508486103392 35] -45.455084861033924]
Test Case: 254 | Input/Output: [[81.48891937782795 -62] 19.488919377827955]
Test Case: 255 | Input/Output: [[60.61971875989664 -38] 22.619718759896642]
Test Case: 256 | Input/Output: [[92.55834661318863 18] 110.55834661318863]
Test Case: 257 | Input/Output: [[-88.00305303561736 30] -58.003053035617356]
Test Case: 258 | Input/Output: [[-42.48751007748075 80] 37.51248992251925]
Test Case: 259 | Input/Output: [[94.82885323912475 -48] 46.828853239124754]
Test Case: 260 | Input/Output: [[-71.11039973314404 91] 19.889600266855965]
Test Case: 261 | Input/Output: [[2.794736003249753 19] 21.794736003249753]
Test Case: 262 | Input/Output: [[49.827115782979206 -56] -6.172884217020794]
Test Case: 263 | Input/Output: [[78.66020086535386 -44] 34.66020086535386]
Test Case: 264 | Input/Output: [[77.18785589233943 -78] -0.812144107660572]
Test Case: 265 | Input/Output: [[-64.26386930728773 5] -59.263869307287735]
Test Case: 266 | Input/Output: [[44.0706308116323 92] 136.0706308116323]
Test Case: 267 | Input/Output: [[49.566894396260096 -37] 12.566894396260096]
Test Case: 268 | Input/Output: [[-91.82287472686602 17] -74.82287472686602]
Test Case: 269 | Input/Output: [[-9.735098593101824 22] 12.264901406898176]
Test Case: 270 | Input/Output: [[-84.53331111822287 -61] -145.53331111822285]
Test Case: 271 | Input/Output: [[-56.16174557859315 29] -27.16174557859315]
Test Case: 272 | Input/Output: [[30.661935976031458 5] 35.66193597603146]
Test Case: 273 | Input/Output: [[55.32282971363583 -73] -17.677170286364174]
Test Case: 274 | Input/Output: [[-3.533648212683204 -5] -8.533648212683204]
Test Case: 275 | Input/Output: [[-12.756785659874453 -91] -103.75678565987445]
Test Case: 276 | Input/Output: [[-42.768284777619535 81] 38.231715222380465]
Test Case: 277 | Input/Output: [[-34.782970251742924 8] -26.782970251742924]
Test Case: 278 | Input/Output: [[-83.51293217947351 5] -78.51293217947351]
Test Case: 279 | Input/Output: [[94.24575180113496 -66] 28.245751801134958]
Test Case: 280 | Input/Output: [[52.0812352517309 81] 133.0812352517309]
Test Case: 281 | Input/Output: [[-74.24132938527426 -93] -167.24132938527424]
Test Case: 282 | Input/Output: [[-48.32249777698547 -75] -123.32249777698547]
Test Case: 283 | Input/Output: [[-67.02031928315171 66] -1.0203192831517072]
Test Case: 284 | Input/Output: [[80.70745843940367 12] 92.70745843940367]
Test Case: 285 | Input/Output: [[4.803331595091592 86] 90.80333159509159]
Test Case: 286 | Input/Output: [[8.094530724702565 -16] -7.905469275297435]
Test Case: 287 | Input/Output: [[80.90574016461366 18] 98.90574016461366]
Test Case: 288 | Input/Output: [[-48.04339824894433 -52] -100.04339824894433]
Test Case: 289 | Input/Output: [[-8.49489543564981 -69] -77.49489543564981]
Test Case: 290 | Input/Output: [[14.230315278874968 48] 62.23031527887497]
Test Case: 291 | Input/Output: [[-20.966022951866933 43] 22.033977048133067]
Test Case: 292 | Input/Output: [[-73.15594023618928 17] -56.15594023618928]
Test Case: 293 | Input/Output: [[0.05782712427028969 76] 76.05782712427029]
Test Case: 294 | Input/Output: [[3.1906808103455546 -52] -48.809319189654445]
Test Case: 295 | Input/Output: [[-32.367917845696255 -51] -83.36791784569625]
Test Case: 296 | Input/Output: [[-28.143153935958566 -82] -110.14315393595857]
Test Case: 297 | Input/Output: [[79.09775299952892 -4] 75.09775299952892]
Test Case: 298 | Input/Output: [[-77.89923490547186 95] 17.100765094528143]
Test Case: 299 | Input/Output: [[39.651107903438174 -37] 2.6511079034381737]
Test Case: 300 | Input/Output: [[23.240881660063266 87] 110.24088166006327]
Test Case: 301 | Input/Output: [[22.765046806712803 -87] -64.2349531932872]
Test Case: 302 | Input/Output: [[92.15504136698843 -45] 47.15504136698843]
Test Case: 303 | Input/Output: [[-36.294393626380604 -72] -108.29439362638061]
Test Case: 304 | Input/Output: [[-18.89193276761965 91] 72.10806723238035]
Test Case: 305 | Input/Output: [[48.01069480971725 15] 63.01069480971725]
Test Case: 306 | Input/Output: [[71.71091049756393 92] 163.71091049756393]
Test Case: 307 | Input/Output: [[-97.49713152364505 -93] -190.49713152364507]
Test Case: 308 | Input/Output: [[-75.06238889074119 -16] -91.06238889074119]
Test Case: 309 | Input/Output: [[6.005482482665016 -16] -9.994517517334984]
Test Case: 310 | Input/Output: [[69.15203047945866 -83] -13.84796952054134]
Test Case: 311 | Input/Output: [[58.484491049215364 -65] -6.5155089507846355]
Test Case: 312 | Input/Output: [[21.479875237788093 -55] -33.52012476221191]
Test Case: 313 | Input/Output: [[14.78670135991014 90] 104.78670135991014]
Test Case: 314 | Input/Output: [[80.04083403024686 56] 136.04083403024686]
Test Case: 315 | Input/Output: [[-81.28517347141329 -10] -91.28517347141329]
Test Case: 316 | Input/Output: [[-94.77541575591937 -88] -182.77541575591937]
Test Case: 317 | Input/Output: [[-97.76469621720669 57] -40.76469621720669]
Test Case: 318 | Input/Output: [[24.62831994745953 86] 110.62831994745953]
Test Case: 319 | Input/Output: [[-11.739888058596975 -94] -105.73988805859697]
Test Case: 320 | Input/Output: [[-31.364569787060617 -8] -39.36456978706062]
Test Case: 321 | Input/Output: [[71.30582348903093 49] 120.30582348903093]
Test Case: 322 | Input/Output: [[73.02084394465581 -28] 45.02084394465581]
Test Case: 323 | Input/Output: [[-67.7995153902321 95] 27.200484609767898]
Test Case: 324 | Input/Output: [[22.337761271886663 54] 76.33776127188666]
Test Case: 325 | Input/Output: [[2.646534939611527 -49] -46.35346506038847]
Test Case: 326 | Input/Output: [[-43.00968113063106 55] 11.990318869368942]
Test Case: 327 | Input/Output: [[-13.011678418254633 67] 53.98832158174537]
Test Case: 328 | Input/Output: [[35.07244378383879 -41] -5.927556216161207]
Test Case: 329 | Input/Output: [[93.01755433870912 -94] -0.9824456612908818]
Test Case: 330 | Input/Output: [[-5.116754727219302 67] 61.8832452727807]
Test Case: 331 | Input/Output: [[24.939796931754074 -74] -49.060203068245926]
Test Case: 332 | Input/Output: [[-93.2194563834791 -18] -111.2194563834791]
Test Case: 333 | Input/Output: [[62.700010686284514 15] 77.70001068628451]
Test Case: 334 | Input/Output: [[-47.59522075551532 20] -27.59522075551532]
Test Case: 335 | Input/Output: [[-5.750668714709619 1] -4.750668714709619]
Test Case: 336 | Input/Output: [[84.65425616308406 40] 124.65425616308406]
Test Case: 337 | Input/Output: [[91.4181532937003 70] 161.4181532937003]
Test Case: 338 | Input/Output: [[-2.8195631390551767 -74] -76.81956313905518]
Test Case: 339 | Input/Output: [[-76.17888573726918 -37] -113.17888573726918]
Test Case: 340 | Input/Output: [[24.416931939074303 96] 120.4169319390743]
Test Case: 341 | Input/Output: [[89.0988283738362 -71] 18.0988283738362]
Test Case: 342 | Input/Output: [[-41.570884478779746 44] 2.429115521220254]
Test Case: 343 | Input/Output: [[-22.289000619245343 -4] -26.289000619245343]
Test Case: 344 | Input/Output: [[-58.23965661612913 91] 32.76034338387087]
Test Case: 345 | Input/Output: [[-86.15471450920917 -60] -146.15471450920916]
Test Case: 346 | Input/Output: [[-78.92757945553373 -37] -115.92757945553373]
Test Case: 347 | Input/Output: [[53.13421107418256 -8] 45.13421107418256]
Test Case: 348 | Input/Output: [[32.055433080760736 86] 118.05543308076074]
Test Case: 349 | Input/Output: [[-41.74446150265434 40] -1.7444615026543389]
Test Case: 350 | Input/Output: [[-44.231796975085146 9] -35.231796975085146]
Test Case: 351 | Input/Output: [[56.133627781509034 -93] -36.866372218490966]
Test Case: 352 | Input/Output: [[-77.58648451255505 70] -7.586484512555046]
Test Case: 353 | Input/Output: [[-64.72734198610861 -55] -119.72734198610861]
Test Case: 354 | Input/Output: [[-29.263098891254785 -44] -73.26309889125478]
Test Case: 355 | Input/Output: [[89.35258834680374 -81] 8.352588346803742]
Test Case: 356 | Input/Output: [[-4.924367677085925 86] 81.07563232291407]
Test Case: 357 | Input/Output: [[27.75739242406108 31] 58.75739242406108]
Test Case: 358 | Input/Output: [[98.95333835292121 51] 149.9533383529212]
Test Case: 359 | Input/Output: [[-39.858052247049855 -62] -101.85805224704986]
Test Case: 360 | Input/Output: [[-7.5281563851876 63] 55.4718436148124]
Test Case: 361 | Input/Output: [[97.55513609076382 -15] 82.55513609076382]
Test Case: 362 | Input/Output: [[22.637261023967653 -98] -75.36273897603235]
Test Case: 363 | Input/Output: [[56.40689968572059 24] 80.40689968572059]
Test Case: 364 | Input/Output: [[52.37122994075915 95] 147.37122994075915]
Test Case: 365 | Input/Output: [[-18.829327215609595 90] 71.1706727843904]
Test Case: 366 | Input/Output: [[-52.56791022132947 21] -31.56791022132947]
Test Case: 367 | Input/Output: [[-8.683086355689753 91] 82.31691364431025]
Test Case: 368 | Input/Output: [[85.3901508306366 -3] 82.3901508306366]
Test Case: 369 | Input/Output: [[-53.123034231581826 -76] -129.1230342315818]
Test Case: 370 | Input/Output: [[4.993541256769788 35] 39.99354125676979]
Test Case: 371 | Input/Output: [[-84.21335805607053 62] -22.213358056070533]
Test Case: 372 | Input/Output: [[93.96253360712959 -98] -4.037466392870414]
Test Case: 373 | Input/Output: [[-86.86843624997043 19] -67.86843624997043]
Test Case: 374 | Input/Output: [[6.491420391969342 -95] -88.50857960803066]
Test Case: 375 | Input/Output: [[-89.05296702897935 69] -20.052967028979353]
Test Case: 376 | Input/Output: [[66.91478492513258 70] 136.91478492513258]
Test Case: 377 | Input/Output: [[-58.849309438276954 -83] -141.84930943827695]
Test Case: 378 | Input/Output: [[-73.86834953089087 9] -64.86834953089087]
Test Case: 379 | Input/Output: [[49.991399239290075 -74] -24.008600760709925]
Test Case: 380 | Input/Output: [[53.415151626480906 -83] -29.584848373519094]
Test Case: 381 | Input/Output: [[-21.949423450896546 -100] -121.94942345089655]
Test Case: 382 | Input/Output: [[43.44631276487388 -73] -29.55368723512612]
Test Case: 383 | Input/Output: [[-76.03236842992322 -63] -139.03236842992322]
Test Case: 384 | Input/Output: [[78.38795224302822 -27] 51.387952243028224]
Test Case: 385 | Input/Output: [[-27.54903113254916 -28] -55.54903113254916]
Test Case: 386 | Input/Output: [[24.843635374147198 -70] -45.1563646258528]
Test Case: 387 | Input/Output: [[-51.339898874251745 20] -31.339898874251745]
Test Case: 388 | Input/Output: [[-44.13319377486533 -93] -137.13319377486533]
Test Case: 389 | Input/Output: [[28.155007813259232 -9] 19.155007813259232]
Test Case: 390 | Input/Output: [[26.841814062634484 37] 63.841814062634484]
Test Case: 391 | Input/Output: [[30.334752592605014 53] 83.33475259260501]
Test Case: 392 | Input/Output: [[26.294642074018356 -62] -35.705357925981644]
Test Case: 393 | Input/Output: [[-16.966576015825183 5] -11.966576015825183]
Test Case: 394 | Input/Output: [[-14.781133154701891 20] 5.218866845298109]
Test Case: 395 | Input/Output: [[38.165992643626765 63] 101.16599264362677]
Test Case: 396 | Input/Output: [[82.4916208677933 -72] 10.491620867793301]
Test Case: 397 | Input/Output: [[77.05332741828951 44] 121.05332741828951]
Test Case: 398 | Input/Output: [[54.105309387172184 94] 148.10530938717218]
Test Case: 399 | Input/Output: [[13.305285366845013 -89] -75.69471463315499]
Test Case: 400 | Input/Output: [[-71.12082871256331 78] 6.879171287436691]
Test Case: 401 | Input/Output: [[-24.634213619499718 5] -19.634213619499718]
Test Case: 402 | Input/Output: [[35.63883733815305 33] 68.63883733815305]
Test Case: 403 | Input/Output: [[-3.0185021079137613 12] 8.981497892086239]
Test Case: 404 | Input/Output: [[-99.53830631809346 51] -48.53830631809346]
Test Case: 405 | Input/Output: [[-15.200244373339487 32] 16.799755626660513]
Test Case: 406 | Input/Output: [[86.89298478579377 -24] 62.89298478579377]
Test Case: 407 | Input/Output: [[-21.738539911178137 27] 5.261460088821863]
Test Case: 408 | Input/Output: [[0.130827555018314 21] 21.130827555018314]
Test Case: 409 | Input/Output: [[92.52825682115832 -19] 73.52825682115832]
Test Case: 410 | Input/Output: [[34.131233294076935 0] 34.131233294076935]
Test Case: 411 | Input/Output: [[29.542613917405532 -13] 16.542613917405532]
Test Case: 412 | Input/Output: [[-55.854092407819444 57] 1.1459075921805564]
Test Case: 413 | Input/Output: [[62.48617516237164 34] 96.48617516237164]
Test Case: 414 | Input/Output: [[12.336169718227879 -61] -48.66383028177212]
Test Case: 415 | Input/Output: [[-52.749310386676186 -100] -152.7493103866762]
Test Case: 416 | Input/Output: [[-94.4331845355535 -36] -130.4331845355535]
Test Case: 417 | Input/Output: [[-71.65570935436342 -87] -158.6557093543634]
Test Case: 418 | Input/Output: [[48.17250831182767 53] 101.17250831182767]
Test Case: 419 | Input/Output: [[39.62675243635391 -98] -58.37324756364609]
Test Case: 420 | Input/Output: [[-8.209148819370583 -73] -81.20914881937058]
Test Case: 421 | Input/Output: [[-90.42802139969962 11] -79.42802139969962]
Test Case: 422 | Input/Output: [[-49.70415240488424 2] -47.70415240488424]
Test Case: 423 | Input/Output: [[42.69679350332453 20] 62.69679350332453]
Test Case: 424 | Input/Output: [[76.76409965328213 -7] 69.76409965328213]
Test Case: 425 | Input/Output: [[14.639764050620059 36] 50.63976405062006]
Test Case: 426 | Input/Output: [[-29.660416449213912 42] 12.339583550786088]
Test Case: 427 | Input/Output: [[-34.528529941615034 -85] -119.52852994161503]
Test Case: 428 | Input/Output: [[58.36223256896588 -33] 25.36223256896588]
Test Case: 429 | Input/Output: [[-40.983147589452564 -74] -114.98314758945256]
Test Case: 430 | Input/Output: [[31.001799621378552 70] 101.00179962137855]
Test Case: 431 | Input/Output: [[63.139925015859745 -45] 18.139925015859745]
Test Case: 432 | Input/Output: [[-66.6855228628044 60] -6.6855228628044046]
Test Case: 433 | Input/Output: [[-65.44134954434105 -87] -152.44134954434105]
Test Case: 434 | Input/Output: [[-11.637170444780281 46] 34.36282955521972]
Test Case: 435 | Input/Output: [[39.96304948543474 79] 118.96304948543474]
Test Case: 436 | Input/Output: [[38.154238925942025 -2] 36.154238925942025]
Test Case: 437 | Input/Output: [[-42.96666501355815 3] -39.96666501355815]
Test Case: 438 | Input/Output: [[-26.937860014258604 -99] -125.9378600142586]
Test Case: 439 | Input/Output: [[35.03537376327455 38] 73.03537376327455]
Test Case: 440 | Input/Output: [[-19.801822276135113 12] -7.801822276135113]
Test Case: 441 | Input/Output: [[-62.022112590488575 94] 31.977887409511425]
Test Case: 442 | Input/Output: [[93.94550173412827 -23] 70.94550173412827]
Test Case: 443 | Input/Output: [[-30.56763802543918 40] 9.43236197456082]
Test Case: 444 | Input/Output: [[-4.957036882043695 -92] -96.9570368820437]
Test Case: 445 | Input/Output: [[26.963629281194315 -61] -34.036370718805685]
Test Case: 446 | Input/Output: [[-62.48646806669351 63] 0.5135319333064885]
Test Case: 447 | Input/Output: [[-91.12783757694712 -97] -188.12783757694712]
Test Case: 448 | Input/Output: [[-80.2316509757554 78] -2.2316509757554]
Test Case: 449 | Input/Output: [[-31.56750428544734 -68] -99.56750428544734]
Test Case: 450 | Input/Output: [[28.37055341561009 60] 88.37055341561009]
Test Case: 451 | Input/Output: [[-66.39926359482926 0] -66.39926359482926]
Test Case: 452 | Input/Output: [[-51.31081126223287 99] 47.68918873776713]
Test Case: 453 | Input/Output: [[86.98575107740928 50] 136.98575107740928]
Test Case: 454 | Input/Output: [[-8.457093142191411 -44] -52.45709314219141]
Test Case: 455 | Input/Output: [[97.19302870827374 14] 111.19302870827374]
Test Case: 456 | Input/Output: [[-16.802471440313994 29] 12.197528559686006]
Test Case: 457 | Input/Output: [[-47.03017418586495 69] 21.96982581413505]
Test Case: 458 | Input/Output: [[13.094023070485179 76] 89.09402307048518]
Test Case: 459 | Input/Output: [[39.82062129842018 -53] -13.179378701579822]
Test Case: 460 | Input/Output: [[-7.163200502212462 22] 14.836799497787538]
Test Case: 461 | Input/Output: [[11.65431983585465 30] 41.65431983585465]
Test Case: 462 | Input/Output: [[97.96354769172495 -29] 68.96354769172495]
Test Case: 463 | Input/Output: [[1.3035430882081016 15] 16.3035430882081]
Test Case: 464 | Input/Output: [[87.02381954651912 -42] 45.02381954651912]
Test Case: 465 | Input/Output: [[-63.66598012625313 50] -13.665980126253132]
Test Case: 466 | Input/Output: [[63.10081897239834 32] 95.10081897239834]
Test Case: 467 | Input/Output: [[-16.330351947999517 67] 50.66964805200048]
Test Case: 468 | Input/Output: [[25.55984556955903 13] 38.55984556955903]
Test Case: 469 | Input/Output: [[22.238660407725618 -87] -64.76133959227438]
Test Case: 470 | Input/Output: [[-68.6611738312724 65] -3.661173831272393]
Test Case: 471 | Input/Output: [[-2.0589403557832924 56] 53.94105964421671]
Test Case: 472 | Input/Output: [[-32.478790818915044 25] -7.478790818915044]
Test Case: 473 | Input/Output: [[60.241494590911486 54] 114.24149459091149]
Test Case: 474 | Input/Output: [[39.217088100731274 15] 54.217088100731274]
Test Case: 475 | Input/Output: [[-42.97164061370857 74] 31.028359386291427]
Test Case: 476 | Input/Output: [[-64.8122061564504 -69] -133.8122061564504]
Test Case: 477 | Input/Output: [[26.223995145820368 18] 44.22399514582037]
Test Case: 478 | Input/Output: [[87.96057811431032 77] 164.96057811431032]
Test Case: 479 | Input/Output: [[-74.27831725911808 30] -44.27831725911808]
Test Case: 480 | Input/Output: [[36.95907791649918 -7] 29.959077916499183]
Test Case: 481 | Input/Output: [[15.392669687423549 -54] -38.60733031257645]
Test Case: 482 | Input/Output: [[-4.458702134890984 -58] -62.458702134890984]
Test Case: 483 | Input/Output: [[30.91797084764235 -1] 29.91797084764235]
Test Case: 484 | Input/Output: [[-32.37420278623833 -87] -119.37420278623833]
Test Case: 485 | Input/Output: [[69.104880215771 -85] -15.895119784228996]
Test Case: 486 | Input/Output: [[-5.571883819052843 26] 20.428116180947157]
Test Case: 487 | Input/Output: [[-14.043753122238442 18] 3.956246877761558]
Test Case: 488 | Input/Output: [[72.43104437911796 63] 135.43104437911796]
Test Case: 489 | Input/Output: [[72.62300930356753 28] 100.62300930356753]
Test Case: 490 | Input/Output: [[73.56319766743366 -26] 47.563197667433656]
Test Case: 491 | Input/Output: [[-64.5951198603182 65] 0.4048801396817936]
Test Case: 492 | Input/Output: [[-7.47700920911403 -29] -36.47700920911403]
Test Case: 493 | Input/Output: [[19.031281072925708 79] 98.03128107292571]
Test Case: 494 | Input/Output: [[26.31946705486105 69] 95.31946705486105]
Test Case: 495 | Input/Output: [[-9.709592020560052 85] 75.29040797943995]
Test Case: 496 | Input/Output: [[67.46819495699785 89] 156.46819495699785]
Test Case: 497 | Input/Output: [[29.84607932231259 87] 116.84607932231259]
Test Case: 498 | Input/Output: [[-61.036146349268286 -45] -106.03614634926828]
Test Case: 499 | Input/Output: [[-61.85929488370891 82] 20.140705116291088]
Test Case: 500 | Input/Output: [[70.59704665502309 11] 81.59704665502309]
Test Case: 501 | Input/Output: [[6.520091265882485 95] 101.52009126588248]
Test Case: 502 | Input/Output: [[90.89856914845288 -49] 41.89856914845288]
Test Case: 503 | Input/Output: [[36.73870594677231 17] 53.73870594677231]
Test Case: 504 | Input/Output: [[-24.279843982113064 100] 75.72015601788694]
Test Case: 505 | Input/Output: [[40.49253979262076 71] 111.49253979262076]
Test Case: 506 | Input/Output: [[0.10331628519439562 -31] -30.896683714805604]
Test Case: 507 | Input/Output: [[5.929559509367934 -64] -58.070440490632066]
Test Case: 508 | Input/Output: [[62.73217661590746 -64] -1.2678233840925373]
Test Case: 509 | Input/Output: [[-15.641935401542199 -26] -41.6419354015422]
Test Case: 510 | Input/Output: [[-81.40015052198615 40] -41.40015052198615]
Test Case: 511 | Input/Output: [[45.25996835664313 96] 141.25996835664313]
Test Case: 512 | Input/Output: [[-56.19849019478704 89] 32.80150980521296]
Test Case: 513 | Input/Output: [[32.424671342100964 75] 107.42467134210096]
Test Case: 514 | Input/Output: [[94.89545943748229 9] 103.89545943748229]
Test Case: 515 | Input/Output: [[-73.15124989059075 89] 15.848750109409252]
Test Case: 516 | Input/Output: [[90.13790396399955 94] 184.13790396399955]
Test Case: 517 | Input/Output: [[-45.19298389088846 -58] -103.19298389088846]
Test Case: 518 | Input/Output: [[-16.593314484076217 -44] -60.59331448407622]
Test Case: 519 | Input/Output: [[38.027541859778694 -16] 22.027541859778694]
Test Case: 520 | Input/Output: [[-74.10635727653454 66] -8.106357276534538]
Test Case: 521 | Input/Output: [[-88.68196653350222 92] 3.3180334664977806]
Test Case: 522 | Input/Output: [[43.27634130774288 -33] 10.276341307742882]
Test Case: 523 | Input/Output: [[-44.47999237117719 89] 44.52000762882281]
Test Case: 524 | Input/Output: [[41.7688581906647 80] 121.7688581906647]
Test Case: 525 | Input/Output: [[21.99502235510262 87] 108.99502235510262]
Test Case: 526 | Input/Output: [[-23.675104344401916 65] 41.324895655598084]
Test Case: 527 | Input/Output: [[30.194639282691583 16] 46.19463928269158]
Test Case: 528 | Input/Output: [[-80.52413170878955 13] -67.52413170878955]
Test Case: 529 | Input/Output: [[15.478314765638459 74] 89.47831476563846]
Test Case: 530 | Input/Output: [[37.23866133356063 -68] -30.76133866643937]
Test Case: 531 | Input/Output: [[-75.316662073978 90] 14.683337926022006]
Test Case: 532 | Input/Output: [[15.950577069005533 -31] -15.049422930994467]
Test Case: 533 | Input/Output: [[-70.74605733019092 -88] -158.74605733019092]
Test Case: 534 | Input/Output: [[33.65978002404094 89] 122.65978002404094]
Test Case: 535 | Input/Output: [[-87.25751096026278 8] -79.25751096026278]
Test Case: 536 | Input/Output: [[-29.607027721179406 -38] -67.6070277211794]
Test Case: 537 | Input/Output: [[-84.61716535630401 98] 13.382834643695986]
Test Case: 538 | Input/Output: [[49.782533675493795 72] 121.7825336754938]
Test Case: 539 | Input/Output: [[-39.035757368898636 48] 8.964242631101364]
Test Case: 540 | Input/Output: [[-3.2895144867266737 -43] -46.289514486726674]
Test Case: 541 | Input/Output: [[-42.929723408623175 -38] -80.92972340862318]
Test Case: 542 | Input/Output: [[-24.83633931332092 15] -9.83633931332092]
Test Case: 543 | Input/Output: [[50.56283723498785 22] 72.56283723498785]
Test Case: 544 | Input/Output: [[35.211190815526294 -30] 5.211190815526294]
Test Case: 545 | Input/Output: [[85.83510053739093 -86] -0.16489946260907118]
Test Case: 546 | Input/Output: [[-42.654818160550924 -87] -129.65481816055092]
Test Case: 547 | Input/Output: [[11.381026586739537 11] 22.381026586739537]
Test Case: 548 | Input/Output: [[65.68459692079577 -92] -26.31540307920423]
Test Case: 549 | Input/Output: [[-7.761467222301732 27] 19.238532777698268]
Test Case: 550 | Input/Output: [[17.759718243794296 -6] 11.759718243794296]
Test Case: 551 | Input/Output: [[-70.49253203841872 2] -68.49253203841872]
Test Case: 552 | Input/Output: [[52.75773719501396 15] 67.75773719501396]
Test Case: 553 | Input/Output: [[41.7598156424406 16] 57.7598156424406]
Test Case: 554 | Input/Output: [[41.26329125374167 65] 106.26329125374167]
Test Case: 555 | Input/Output: [[-92.6731363575935 -64] -156.6731363575935]
Test Case: 556 | Input/Output: [[34.286021009269774 53] 87.28602100926977]
Test Case: 557 | Input/Output: [[-4.423814952761873 14] 9.576185047238127]
Test Case: 558 | Input/Output: [[38.676246213829785 24] 62.676246213829785]
Test Case: 559 | Input/Output: [[25.733749156074623 4] 29.733749156074623]
Test Case: 560 | Input/Output: [[-58.21312602161313 -30] -88.21312602161314]
Test Case: 561 | Input/Output: [[-78.32052462601082 62] -16.320524626010823]
Test Case: 562 | Input/Output: [[73.25823113609258 -37] 36.258231136092576]
Test Case: 563 | Input/Output: [[11.748598159471229 -37] -25.25140184052877]
Test Case: 564 | Input/Output: [[88.10610431509187 -85] 3.1061043150918692]
Test Case: 565 | Input/Output: [[-38.288366399160246 -47] -85.28836639916025]
Test Case: 566 | Input/Output: [[-88.42712011497474 89] 0.5728798850252588]
Test Case: 567 | Input/Output: [[95.68208277386867 -3] 92.68208277386867]
Test Case: 568 | Input/Output: [[-85.76127887108716 78] -7.761278871087157]
Test Case: 569 | Input/Output: [[-81.28999955976957 -25] -106.28999955976957]
Test Case: 570 | Input/Output: [[-14.21521212213355 -18] -32.21521212213355]
Test Case: 571 | Input/Output: [[3.9572212110092124 -36] -32.04277878899079]
Test Case: 572 | Input/Output: [[20.793082500230796 16] 36.793082500230796]
Test Case: 573 | Input/Output: [[22.63402308647362 79] 101.63402308647362]
Test Case: 574 | Input/Output: [[-79.66577993033957 -74] -153.66577993033957]
Test Case: 575 | Input/Output: [[-55.33870883234322 43] -12.338708832343222]
Test Case: 576 | Input/Output: [[59.94428147039267 37] 96.94428147039267]
Test Case: 577 | Input/Output: [[-27.964246132813813 76] 48.03575386718619]
Test Case: 578 | Input/Output: [[-24.222820102155083 96] 71.77717989784492]
Test Case: 579 | Input/Output: [[-5.617270326211312 -65] -70.61727032621131]
Test Case: 580 | Input/Output: [[-53.51028288081854 -41] -94.51028288081854]
Test Case: 581 | Input/Output: [[-16.465408252935788 22] 5.534591747064212]
Test Case: 582 | Input/Output: [[41.734818737999035 64] 105.73481873799903]
Test Case: 583 | Input/Output: [[-25.35376606204052 -38] -63.35376606204052]
Test Case: 584 | Input/Output: [[26.784072876731457 48] 74.78407287673146]
Test Case: 585 | Input/Output: [[-79.88967114864631 84] 4.110328851353685]
Test Case: 586 | Input/Output: [[81.73559179999947 -11] 70.73559179999947]
Test Case: 587 | Input/Output: [[-92.87592040401222 100] 7.12407959598778]
Test Case: 588 | Input/Output: [[4.3527298348084145 100] 104.35272983480841]
Test Case: 589 | Input/Output: [[-26.10436795908757 9] -17.10436795908757]
Test Case: 590 | Input/Output: [[25.930702255247382 52] 77.93070225524738]
Test Case: 591 | Input/Output: [[-50.047079180110245 -83] -133.04707918011025]
Test Case: 592 | Input/Output: [[-21.144419839012755 -35] -56.144419839012755]
Test Case: 593 | Input/Output: [[32.18549981192197 1] 33.18549981192197]
Test Case: 594 | Input/Output: [[50.03594918499965 -37] 13.035949184999652]
Test Case: 595 | Input/Output: [[59.96763801057563 -91] -31.032361989424373]
Test Case: 596 | Input/Output: [[45.284434425571334 -17] 28.284434425571334]
Test Case: 597 | Input/Output: [[-57.147387561088905 25] -32.147387561088905]
Test Case: 598 | Input/Output: [[-30.12913998208269 -12] -42.12913998208269]
Test Case: 599 | Input/Output: [[-84.98458557751654 53] -31.98458557751654]
Test Case: 600 | Input/Output: [[6.261874688431249 -85] -78.73812531156875]
Test Case: 601 | Input/Output: [[-75.08556770488985 11] -64.08556770488985]
Test Case: 602 | Input/Output: [[28.729473870781334 -44] -15.270526129218666]
Test Case: 603 | Input/Output: [[-37.51585831335611 34] -3.5158583133561123]
Test Case: 604 | Input/Output: [[-31.24660248930428 78] 46.75339751069572]
Test Case: 605 | Input/Output: [[57.37582436854507 -66] -8.624175631454932]
Test Case: 606 | Input/Output: [[-82.71315139597016 -97] -179.71315139597016]
Test Case: 607 | Input/Output: [[54.757662188243756 15] 69.75766218824376]
Test Case: 608 | Input/Output: [[25.212765271815968 52] 77.21276527181597]
Test Case: 609 | Input/Output: [[83.33074861433579 67] 150.3307486143358]
Test Case: 610 | Input/Output: [[-13.796394800721117 -89] -102.79639480072112]
Test Case: 611 | Input/Output: [[-55.1873582154885 -100] -155.1873582154885]
Test Case: 612 | Input/Output: [[42.61235446999589 -100] -57.38764553000411]
Test Case: 613 | Input/Output: [[64.59615286766154 55] 119.59615286766154]
Test Case: 614 | Input/Output: [[9.433948390952622 -89] -79.56605160904738]
Test Case: 615 | Input/Output: [[-18.297570622654447 -25] -43.29757062265445]
Test Case: 616 | Input/Output: [[52.39132387143124 -62] -9.60867612856876]
Test Case: 617 | Input/Output: [[67.19445443211757 82] 149.19445443211757]
Test Case: 618 | Input/Output: [[-91.43709880657389 82] -9.437098806573886]
Test Case: 619 | Input/Output: [[18.856536510688045 99] 117.85653651068804]
Test Case: 620 | Input/Output: [[0.5641263098687119 65] 65.56412630986871]
Test Case: 621 | Input/Output: [[72.4459682665526 -24] 48.4459682665526]
Test Case: 622 | Input/Output: [[-78.72284746987133 -94] -172.72284746987134]
Test Case: 623 | Input/Output: [[-32.21969666114586 -1] -33.21969666114586]
Test Case: 624 | Input/Output: [[-90.66704891688822 86] -4.66704891688822]
Test Case: 625 | Input/Output: [[64.96261890705398 -81] -16.03738109294602]
Test Case: 626 | Input/Output: [[10.949298950774434 -56] -45.050701049225566]
Test Case: 627 | Input/Output: [[-61.07334965218663 11] -50.07334965218663]
Test Case: 628 | Input/Output: [[43.747568287727944 -72] -28.252431712272056]
Test Case: 629 | Input/Output: [[22.48730140204549 52] 74.48730140204549]
Test Case: 630 | Input/Output: [[94.76658194845604 17] 111.76658194845604]
Test Case: 631 | Input/Output: [[79.90125406206448 5] 84.90125406206448]
Test Case: 632 | Input/Output: [[4.941278531695303 -2] 2.9412785316953034]
Test Case: 633 | Input/Output: [[70.79937356809714 60] 130.79937356809714]
Test Case: 634 | Input/Output: [[60.67475973814743 -14] 46.67475973814743]
Test Case: 635 | Input/Output: [[49.70746051975695 5] 54.70746051975695]
Test Case: 636 | Input/Output: [[56.776216546813544 -26] 30.776216546813544]
Test Case: 637 | Input/Output: [[-0.1885650528442966 34] 33.8114349471557]
Test Case: 638 | Input/Output: [[30.7321816747193 -51] -20.2678183252807]
Test Case: 639 | Input/Output: [[73.24410755139817 -5] 68.24410755139817]
Test Case: 640 | Input/Output: [[2.0963716743938505 -83] -80.90362832560615]
Test Case: 641 | Input/Output: [[-72.08676464362922 -74] -146.08676464362924]
Test Case: 642 | Input/Output: [[-33.81677013058757 -3] -36.81677013058757]
Test Case: 643 | Input/Output: [[-8.688199398181268 7] -1.6881993981812684]
Test Case: 644 | Input/Output: [[93.58345264965811 -27] 66.58345264965811]
Test Case: 645 | Input/Output: [[98.06427497815525 -80] 18.064274978155254]
Test Case: 646 | Input/Output: [[85.07332953563662 80] 165.07332953563662]
Test Case: 647 | Input/Output: [[-60.42321903956236 29] -31.423219039562362]
Test Case: 648 | Input/Output: [[-4.671066069382363 19] 14.328933930617637]
Test Case: 649 | Input/Output: [[-71.3175546418446 52] -19.317554641844595]
Test Case: 650 | Input/Output: [[-43.58151130042997 -87] -130.58151130042998]
Test Case: 651 | Input/Output: [[61.5234329254703 -88] -26.476567074529697]
Test Case: 652 | Input/Output: [[-37.022145426659 -41] -78.022145426659]
Test Case: 653 | Input/Output: [[7.388617823879301 -96] -88.6113821761207]
Test Case: 654 | Input/Output: [[18.77658356635719 -91] -72.22341643364281]
Test Case: 655 | Input/Output: [[78.2196327744395 -91] -12.780367225560497]
Test Case: 656 | Input/Output: [[52.17061083479447 -42] 10.170610834794473]
Test Case: 657 | Input/Output: [[-5.59563686017232 51] 45.40436313982768]
Test Case: 658 | Input/Output: [[40.70112134846153 37] 77.70112134846153]
Test Case: 659 | Input/Output: [[-80.93315908006822 -86] -166.9331590800682]
Test Case: 660 | Input/Output: [[-35.82820771953902 -81] -116.82820771953902]
Test Case: 661 | Input/Output: [[-54.39304505618247 -39] -93.39304505618247]
Test Case: 662 | Input/Output: [[-44.02278754393405 32] -12.02278754393405]
Test Case: 663 | Input/Output: [[40.58001701261597 -40] 0.5800170126159685]
Test Case: 664 | Input/Output: [[-11.941429621448279 53] 41.05857037855172]
Test Case: 665 | Input/Output: [[93.73222469202034 -78] 15.732224692020338]
Test Case: 666 | Input/Output: [[8.384524911373688 21] 29.38452491137369]
Test Case: 667 | Input/Output: [[-40.85897619272376 -83] -123.85897619272376]
Test Case: 668 | Input/Output: [[-47.630111114547915 92] 44.369888885452085]
Test Case: 669 | Input/Output: [[-77.46388611410686 -87] -164.46388611410686]
Test Case: 670 | Input/Output: [[18.150237243793057 92] 110.15023724379306]
Test Case: 671 | Input/Output: [[77.86022769892992 -19] 58.86022769892992]
Test Case: 672 | Input/Output: [[-5.839890147742352 -45] -50.83989014774235]
Test Case: 673 | Input/Output: [[7.976898287319315 -19] -11.023101712680685]
Test Case: 674 | Input/Output: [[-62.78354701860489 -50] -112.78354701860489]
Test Case: 675 | Input/Output: [[35.36405914880336 -64] -28.635940851196636]
Test Case: 676 | Input/Output: [[-85.15777062753057 -85] -170.15777062753057]
Test Case: 677 | Input/Output: [[7.93901606644269 65] 72.93901606644269]
Test Case: 678 | Input/Output: [[28.909232751379335 -27] 1.909232751379335]
Test Case: 679 | Input/Output: [[83.12005087520939 -47] 36.12005087520939]
Test Case: 680 | Input/Output: [[-70.9550809476364 -62] -132.95508094763642]
Test Case: 681 | Input/Output: [[76.62235524106433 -89] -12.377644758935674]
Test Case: 682 | Input/Output: [[-73.89447132963673 57] -16.89447132963673]
Test Case: 683 | Input/Output: [[8.185543943838809 -58] -49.81445605616119]
Test Case: 684 | Input/Output: [[-10.430510120235454 87] 76.56948987976455]
Test Case: 685 | Input/Output: [[44.207551038095346 60] 104.20755103809535]
Test Case: 686 | Input/Output: [[41.06825175708599 -46] -4.931748242914011]
Test Case: 687 | Input/Output: [[-62.34066027377645 -13] -75.34066027377645]
Test Case: 688 | Input/Output: [[14.946942167184332 8] 22.946942167184332]
Test Case: 689 | Input/Output: [[-47.84179732550315 8] -39.84179732550315]
Test Case: 690 | Input/Output: [[-57.00940498803602 74] 16.990595011963983]
Test Case: 691 | Input/Output: [[84.00190416153342 -75] 9.001904161533417]
Test Case: 692 | Input/Output: [[-87.71359459288294 100] 12.286405407117059]
Test Case: 693 | Input/Output: [[46.44308975458938 14] 60.44308975458938]
Test Case: 694 | Input/Output: [[6.442472636620693 -67] -60.55752736337931]
Test Case: 695 | Input/Output: [[18.644629823900488 57] 75.64462982390049]
Test Case: 696 | Input/Output: [[32.61860321825799 53] 85.61860321825799]
Test Case: 697 | Input/Output: [[-17.460221258564317 46] 28.539778741435683]
Test Case: 698 | Input/Output: [[-26.532382454469357 -18] -44.53238245446936]
Test Case: 699 | Input/Output: [[-4.341622726737484 31] 26.658377273262516]
Test Case: 700 | Input/Output: [[37.45473496026918 -51] -13.545265039730822]
Test Case: 701 | Input/Output: [[0.4680016692834954 -59] -58.531998330716505]
Test Case: 702 | Input/Output: [[-9.727782772873141 -91] -100.72778277287314]
Test Case: 703 | Input/Output: [[-30.189592243164128 13] -17.189592243164128]
Test Case: 704 | Input/Output: [[66.35700483918555 -30] 36.35700483918555]
Test Case: 705 | Input/Output: [[-8.592051587876568 24] 15.407948412123432]
Test Case: 706 | Input/Output: [[-51.05404514301015 -68] -119.05404514301014]
Test Case: 707 | Input/Output: [[27.78433285171316 52] 79.78433285171316]
Test Case: 708 | Input/Output: [[-37.783778849238644 13] -24.783778849238644]
Test Case: 709 | Input/Output: [[-74.28327107741492 91] 16.716728922585077]
Test Case: 710 | Input/Output: [[43.734998092664284 59] 102.73499809266428]
Test Case: 711 | Input/Output: [[67.83549151177968 65] 132.83549151177968]
Test Case: 712 | Input/Output: [[89.27086659399859 -72] 17.27086659399859]
Test Case: 713 | Input/Output: [[-53.75875683075324 5] -48.75875683075324]
Test Case: 714 | Input/Output: [[29.923324991247426 -64] -34.076675008752574]
Test Case: 715 | Input/Output: [[29.04923564790559 53] 82.04923564790559]
Test Case: 716 | Input/Output: [[-96.61165772413365 -10] -106.61165772413365]
Test Case: 717 | Input/Output: [[-24.136739748376513 -54] -78.13673974837651]
Test Case: 718 | Input/Output: [[45.199050468116326 -37] 8.199050468116326]
Test Case: 719 | Input/Output: [[50.06308158903542 17] 67.06308158903542]
Test Case: 720 | Input/Output: [[-57.68193616345021 50] -7.68193616345021]
Test Case: 721 | Input/Output: [[-54.0603820034858 -43] -97.0603820034858]
Test Case: 722 | Input/Output: [[-96.24240201218772 77] -19.242402012187725]
Test Case: 723 | Input/Output: [[-76.90067056690629 30] -46.900670566906285]
Test Case: 724 | Input/Output: [[-2.7487449817779748 -39] -41.748744981777975]
Test Case: 725 | Input/Output: [[-76.90233961277455 -58] -134.90233961277454]
Test Case: 726 | Input/Output: [[-54.381820685331796 -55] -109.3818206853318]
Test Case: 727 | Input/Output: [[-20.855695586968224 65] 44.144304413031776]
Test Case: 728 | Input/Output: [[-38.33017600456196 -92] -130.33017600456196]
Test Case: 729 | Input/Output: [[-13.489566332468812 89] 75.51043366753119]
Test Case: 730 | Input/Output: [[-23.378078807092223 15] -8.378078807092223]
Test Case: 731 | Input/Output: [[89.25450480527067 8] 97.25450480527067]
Test Case: 732 | Input/Output: [[45.708190838261885 15] 60.708190838261885]
Test Case: 733 | Input/Output: [[4.820890218718915 -82] -77.17910978128108]
Test Case: 734 | Input/Output: [[-36.35645602380604 -52] -88.35645602380603]
Test Case: 735 | Input/Output: [[-84.94671576479737 -3] -87.94671576479737]
Test Case: 736 | Input/Output: [[87.40720284295205 -66] 21.407202842952046]
Test Case: 737 | Input/Output: [[10.003929907591086 54] 64.00392990759109]
Test Case: 738 | Input/Output: [[-62.83162833819382 -48] -110.83162833819382]
Test Case: 739 | Input/Output: [[54.11585719785842 -42] 12.115857197858418]
Test Case: 740 | Input/Output: [[-24.988626192971864 40] 15.011373807028136]
Test Case: 741 | Input/Output: [[25.841087437923264 33] 58.841087437923264]
Test Case: 742 | Input/Output: [[-68.73541358223375 -93] -161.73541358223375]
Test Case: 743 | Input/Output: [[32.96346904894094 76] 108.96346904894094]
Test Case: 744 | Input/Output: [[81.99396091659563 37] 118.99396091659563]
Test Case: 745 | Input/Output: [[38.37798971792199 -99] -60.62201028207801]
Test Case: 746 | Input/Output: [[38.015653095413285 20] 58.015653095413285]
Test Case: 747 | Input/Output: [[33.43137148785729 86] 119.43137148785729]
Test Case: 748 | Input/Output: [[77.27857493297972 33] 110.27857493297972]
Test Case: 749 | Input/Output: [[95.34569141831744 56] 151.34569141831744]
Test Case: 750 | Input/Output: [[-60.2730169908128 -34] -94.2730169908128]
Test Case: 751 | Input/Output: [[-3.1884684619607953 2] -1.1884684619607953]
Test Case: 752 | Input/Output: [[11.2984476565954 58] 69.2984476565954]
Test Case: 753 | Input/Output: [[66.41469786358635 -94] -27.585302136413645]
Test Case: 754 | Input/Output: [[-85.07995806074906 -20] -105.07995806074906]
Test Case: 755 | Input/Output: [[-50.767326086275254 30] -20.767326086275254]
Test Case: 756 | Input/Output: [[4.518213414758549 100] 104.51821341475855]
Test Case: 757 | Input/Output: [[-15.584408816060673 9] -6.584408816060673]
Test Case: 758 | Input/Output: [[22.206086765303496 45] 67.2060867653035]
Test Case: 759 | Input/Output: [[40.93066912915651 74] 114.93066912915651]
Test Case: 760 | Input/Output: [[14.620961940374585 38] 52.620961940374585]
Test Case: 761 | Input/Output: [[-6.837099696417809 -28] -34.83709969641781]
Test Case: 762 | Input/Output: [[87.07706051589966 -28] 59.07706051589966]
Test Case: 763 | Input/Output: [[83.32660310339497 -55] 28.326603103394973]
Test Case: 764 | Input/Output: [[-6.336746586618716 12] 5.663253413381284]
Test Case: 765 | Input/Output: [[-49.01583171088251 85] 35.98416828911749]
Test Case: 766 | Input/Output: [[-42.72048409898461 10] -32.72048409898461]
Test Case: 767 | Input/Output: [[-41.7486421268382 -62] -103.7486421268382]
Test Case: 768 | Input/Output: [[-95.85714046227073 19] -76.85714046227073]
Test Case: 769 | Input/Output: [[77.54648049204812 -48] 29.54648049204812]
Test Case: 770 | Input/Output: [[-65.58942005002793 -37] -102.58942005002793]
Test Case: 771 | Input/Output: [[88.25630343267176 -4] 84.25630343267176]
Test Case: 772 | Input/Output: [[16.516688283815412 -53] -36.48331171618459]
Test Case: 773 | Input/Output: [[24.87620015799463 -84] -59.12379984200537]
Test Case: 774 | Input/Output: [[93.79944671885897 80] 173.79944671885897]
Test Case: 775 | Input/Output: [[-22.139942257984032 1] -21.139942257984032]
Test Case: 776 | Input/Output: [[81.40355783937935 4] 85.40355783937935]
Test Case: 777 | Input/Output: [[74.30990223252476 -39] 35.30990223252476]
Test Case: 778 | Input/Output: [[89.99690930367211 3] 92.99690930367211]
Test Case: 779 | Input/Output: [[-31.27228958401342 -48] -79.27228958401342]
Test Case: 780 | Input/Output: [[1.7465102599614681 15] 16.746510259961468]
Test Case: 781 | Input/Output: [[-51.20469710715827 -95] -146.20469710715827]
Test Case: 782 | Input/Output: [[72.78052083320651 18] 90.78052083320651]
Test Case: 783 | Input/Output: [[55.93955895023538 46] 101.93955895023538]
Test Case: 784 | Input/Output: [[-38.33632503850695 -26] -64.33632503850694]
Test Case: 785 | Input/Output: [[46.089946596996185 37] 83.08994659699619]
Test Case: 786 | Input/Output: [[-24.4515608388445 -50] -74.4515608388445]
Test Case: 787 | Input/Output: [[78.38339437588812 97] 175.38339437588812]
Test Case: 788 | Input/Output: [[-23.784315933929264 41] 17.215684066070736]
Test Case: 789 | Input/Output: [[41.35847036475349 29] 70.35847036475349]
Test Case: 790 | Input/Output: [[56.00536130594895 87] 143.00536130594895]
Test Case: 791 | Input/Output: [[-67.62474350844198 -38] -105.62474350844198]
Test Case: 792 | Input/Output: [[-37.853862529889845 28] -9.853862529889845]
Test Case: 793 | Input/Output: [[-54.26708825538249 -46] -100.26708825538249]
Test Case: 794 | Input/Output: [[83.76508713783426 -71] 12.765087137834257]
Test Case: 795 | Input/Output: [[1.563197754640825 -70] -68.43680224535917]
Test Case: 796 | Input/Output: [[-98.3877753584766 22] -76.3877753584766]
Test Case: 797 | Input/Output: [[43.38483967794008 -98] -54.61516032205992]
Test Case: 798 | Input/Output: [[-82.73230946092906 -77] -159.73230946092906]
Test Case: 799 | Input/Output: [[-47.623339010772845 -36] -83.62333901077284]
Test Case: 800 | Input/Output: [[-21.552524424271894 32] 10.447475575728106]
Test Case: 801 | Input/Output: [[69.59444272390238 81] 150.59444272390238]
Test Case: 802 | Input/Output: [[96.33145497959384 30] 126.33145497959384]
Test Case: 803 | Input/Output: [[-53.34263857161539 16] -37.34263857161539]
Test Case: 804 | Input/Output: [[-49.92240461010895 58] 8.077595389891052]
Test Case: 805 | Input/Output: [[-69.10754876079177 72] 2.8924512392082278]
Test Case: 806 | Input/Output: [[7.178396710718047 37] 44.17839671071805]
Test Case: 807 | Input/Output: [[74.53718824812904 -59] 15.537188248129041]
Test Case: 808 | Input/Output: [[4.912102673039527 7] 11.912102673039527]
Test Case: 809 | Input/Output: [[15.270301268872274 -80] -64.72969873112773]
Test Case: 810 | Input/Output: [[-11.504398921393502 68] 56.4956010786065]
Test Case: 811 | Input/Output: [[-45.14586694610667 -57] -102.14586694610668]
Test Case: 812 | Input/Output: [[90.95969556396372 -46] 44.95969556396372]
Test Case: 813 | Input/Output: [[-13.53302765675896 -5] -18.53302765675896]
Test Case: 814 | Input/Output: [[17.15633525340769 -2] 15.15633525340769]
Test Case: 815 | Input/Output: [[-7.04372055473732 -4] -11.04372055473732]
Test Case: 816 | Input/Output: [[-66.93945432125682 -50] -116.93945432125682]
Test Case: 817 | Input/Output: [[-64.63902712117091 -85] -149.6390271211709]
Test Case: 818 | Input/Output: [[-49.3692470370533 9] -40.3692470370533]
Test Case: 819 | Input/Output: [[-56.4895511629453 22] -34.4895511629453]
Test Case: 820 | Input/Output: [[-41.64226821266108 -39] -80.64226821266108]
Test Case: 821 | Input/Output: [[16.79522196363135 -89] -72.20477803636865]
Test Case: 822 | Input/Output: [[-24.454665359222645 20] -4.454665359222645]
Test Case: 823 | Input/Output: [[37.74679750865229 44] 81.74679750865229]
Test Case: 824 | Input/Output: [[-88.02133381883188 14] -74.02133381883188]
Test Case: 825 | Input/Output: [[-2.639991249308821 9] 6.360008750691179]
Test Case: 826 | Input/Output: [[-39.858481639545595 87] 47.141518360454405]
Test Case: 827 | Input/Output: [[4.119759636550953 23] 27.119759636550953]
Test Case: 828 | Input/Output: [[-39.13254774992443 -29] -68.13254774992443]
Test Case: 829 | Input/Output: [[83.69863538457244 61] 144.69863538457244]
Test Case: 830 | Input/Output: [[-50.68592411442363 -1] -51.68592411442363]
Test Case: 831 | Input/Output: [[-60.00131968930593 62] 1.9986803106940698]
Test Case: 832 | Input/Output: [[36.80168784511696 84] 120.80168784511696]
Test Case: 833 | Input/Output: [[-44.71633958530485 -70] -114.71633958530485]
Test Case: 834 | Input/Output: [[-87.23257152568138 -1] -88.23257152568138]
Test Case: 835 | Input/Output: [[-94.08528664899907 31] -63.08528664899907]
Test Case: 836 | Input/Output: [[55.66430338810048 4] 59.66430338810048]
Test Case: 837 | Input/Output: [[-86.78699895010726 -64] -150.78699895010726]
Test Case: 838 | Input/Output: [[17.336688792363674 -20] -2.663311207636326]
Test Case: 839 | Input/Output: [[1.7014752944968166 -15] -13.298524705503183]
Test Case: 840 | Input/Output: [[-54.76141378599013 -53] -107.76141378599013]
Test Case: 841 | Input/Output: [[-91.5094967242626 66] -25.509496724262604]
Test Case: 842 | Input/Output: [[77.42201923405375 48] 125.42201923405375]
Test Case: 843 | Input/Output: [[-83.8826762650177 26] -57.88267626501769]
Test Case: 844 | Input/Output: [[-69.42687406371701 28] -41.42687406371701]
Test Case: 845 | Input/Output: [[-3.2813328200163028 84] 80.7186671799837]
Test Case: 846 | Input/Output: [[-7.179617557189147 -78] -85.17961755718915]
Test Case: 847 | Input/Output: [[6.845031829514397 -83] -76.1549681704856]
Test Case: 848 | Input/Output: [[20.502022053924577 -69] -48.49797794607542]
Test Case: 849 | Input/Output: [[20.693662811260282 -61] -40.30633718873972]
Test Case: 850 | Input/Output: [[-26.02881782148087 81] 54.97118217851913]
Test Case: 851 | Input/Output: [[42.91740133194554 33] 75.91740133194554]
Test Case: 852 | Input/Output: [[-52.90387739021083 -62] -114.90387739021082]
Test Case: 853 | Input/Output: [[20.207050297678848 90] 110.20705029767885]
Test Case: 854 | Input/Output: [[53.46080780406797 -6] 47.46080780406797]
Test Case: 855 | Input/Output: [[-53.23204945989766 -69] -122.23204945989767]
Test Case: 856 | Input/Output: [[-97.88552114139814 40] -57.885521141398144]
Test Case: 857 | Input/Output: [[-60.58070485437934 65] 4.419295145620659]
Test Case: 858 | Input/Output: [[39.93641744309602 68] 107.93641744309602]
Test Case: 859 | Input/Output: [[63.92394996989813 -86] -22.076050030101868]
Test Case: 860 | Input/Output: [[-75.71235406134406 -79] -154.71235406134406]
Test Case: 861 | Input/Output: [[-87.64270147647085 -75] -162.64270147647085]
Test Case: 862 | Input/Output: [[65.2782361982479 53] 118.2782361982479]
Test Case: 863 | Input/Output: [[-47.47565061594361 79] 31.524349384056393]
Test Case: 864 | Input/Output: [[-38.009738071517994 -48] -86.009738071518]
Test Case: 865 | Input/Output: [[80.97072992351664 -68] 12.970729923516643]
Test Case: 866 | Input/Output: [[72.21056008404253 18] 90.21056008404253]
Test Case: 867 | Input/Output: [[-23.689538356234777 89] 65.31046164376522]
Test Case: 868 | Input/Output: [[-3.8159771522271484 -30] -33.81597715222715]
Test Case: 869 | Input/Output: [[-28.485869911931516 85] 56.514130088068484]
Test Case: 870 | Input/Output: [[-99.17932628841977 52] -47.17932628841977]
Test Case: 871 | Input/Output: [[-94.15689751710217 54] -40.156897517102166]
Test Case: 872 | Input/Output: [[-6.463892252641699 90] 83.5361077473583]
Test Case: 873 | Input/Output: [[-66.15638929735425 25] -41.15638929735425]
Test Case: 874 | Input/Output: [[-75.77539900398855 6] -69.77539900398855]
Test Case: 875 | Input/Output: [[-45.69730900311686 -67] -112.69730900311686]
Test Case: 876 | Input/Output: [[52.850409963782596 97] 149.8504099637826]
Test Case: 877 | Input/Output: [[-50.66299240013525 -14] -64.66299240013525]
Test Case: 878 | Input/Output: [[-32.31287156435003 -35] -67.31287156435003]
Test Case: 879 | Input/Output: [[61.50578155508819 21] 82.50578155508819]
Test Case: 880 | Input/Output: [[45.5376221919212 -28] 17.5376221919212]
Test Case: 881 | Input/Output: [[47.16801645226309 -56] -8.831983547736911]
Test Case: 882 | Input/Output: [[20.68588925099479 0] 20.68588925099479]
Test Case: 883 | Input/Output: [[-71.17792306375507 -36] -107.17792306375507]
Test Case: 884 | Input/Output: [[-14.081650229036242 95] 80.91834977096376]
Test Case: 885 | Input/Output: [[-33.722007003624014 -10] -43.722007003624014]
Test Case: 886 | Input/Output: [[11.672886589649039 -34] -22.32711341035096]
Test Case: 887 | Input/Output: [[-86.51987771658571 44] -42.51987771658571]
Test Case: 888 | Input/Output: [[-21.30828448820867 67] 45.69171551179133]
Test Case: 889 | Input/Output: [[-30.07501034150279 76] 45.92498965849721]
Test Case: 890 | Input/Output: [[-98.85485706580306 85] -13.85485706580306]
Test Case: 891 | Input/Output: [[90.94890838371319 69] 159.9489083837132]
Test Case: 892 | Input/Output: [[-11.17849604588028 91] 79.82150395411972]
Test Case: 893 | Input/Output: [[99.31746098541444 -30] 69.31746098541444]
Test Case: 894 | Input/Output: [[93.07985696263466 -56] 37.079856962634665]
Test Case: 895 | Input/Output: [[95.30394570831328 55] 150.30394570831328]
Test Case: 896 | Input/Output: [[95.0747831050378 26] 121.0747831050378]
Test Case: 897 | Input/Output: [[-45.413339650390164 44] -1.4133396503901636]
Test Case: 898 | Input/Output: [[-18.6279210476157 -48] -66.6279210476157]
Test Case: 899 | Input/Output: [[70.42825526467371 -96] -25.57174473532629]
Test Case: 900 | Input/Output: [[-58.12029914759651 -47] -105.12029914759651]
Test Case: 901 | Input/Output: [[46.13462017163175 81] 127.13462017163175]
Test Case: 902 | Input/Output: [[32.3669629018834 89] 121.3669629018834]
Test Case: 903 | Input/Output: [[-69.52648243194363 -95] -164.52648243194363]
Test Case: 904 | Input/Output: [[-61.04481164998133 -86] -147.04481164998134]
Test Case: 905 | Input/Output: [[1.1609904827816848 -62] -60.839009517218315]
Test Case: 906 | Input/Output: [[80.8712482847497 -100] -19.128751715250303]
Test Case: 907 | Input/Output: [[-84.95779772445184 14] -70.95779772445184]
Test Case: 908 | Input/Output: [[-22.16049889034035 72] 49.83950110965965]
Test Case: 909 | Input/Output: [[62.10005419160717 -36] 26.10005419160717]
Test Case: 910 | Input/Output: [[66.61963787036188 90] 156.61963787036188]
Test Case: 911 | Input/Output: [[-29.61205721566496 56] 26.38794278433504]
Test Case: 912 | Input/Output: [[-58.61796408721873 -17] -75.61796408721872]
Test Case: 913 | Input/Output: [[6.001284400702048 -86] -79.99871559929795]
Test Case: 914 | Input/Output: [[67.11627154583275 53] 120.11627154583275]
Test Case: 915 | Input/Output: [[36.57743302210196 -50] -13.422566977898043]
Test Case: 916 | Input/Output: [[-33.222847196153936 -1] -34.222847196153936]
Test Case: 917 | Input/Output: [[-31.075584289261656 -64] -95.07558428926166]
Test Case: 918 | Input/Output: [[-54.04382321262409 -80] -134.0438232126241]
Test Case: 919 | Input/Output: [[38.303007508982716 -42] -3.6969924910172836]
Test Case: 920 | Input/Output: [[40.30072194682978 92] 132.30072194682978]
Test Case: 921 | Input/Output: [[46.91049290504924 21] 67.91049290504924]
Test Case: 922 | Input/Output: [[-57.06294380280281 -12] -69.0629438028028]
Test Case: 923 | Input/Output: [[62.67723047295547 54] 116.67723047295547]
Test Case: 924 | Input/Output: [[26.012536837469113 -99] -72.98746316253089]
Test Case: 925 | Input/Output: [[-29.934106125023362 44] 14.065893874976638]
Test Case: 926 | Input/Output: [[-93.25661088461278 -62] -155.25661088461277]
Test Case: 927 | Input/Output: [[-19.71911296028746 -10] -29.71911296028746]
Test Case: 928 | Input/Output: [[-94.31881353788474 75] -19.318813537884736]
Test Case: 929 | Input/Output: [[-82.73289945605298 -65] -147.73289945605296]
Test Case: 930 | Input/Output: [[-45.47674380737876 66] 20.52325619262124]
Test Case: 931 | Input/Output: [[78.06092476227488 -19] 59.06092476227488]
Test Case: 932 | Input/Output: [[-77.5083811892235 67] -10.508381189223499]
Test Case: 933 | Input/Output: [[84.04638698905705 67] 151.04638698905705]
Test Case: 934 | Input/Output: [[23.234800252444046 -94] -70.76519974755595]
Test Case: 935 | Input/Output: [[-4.120478619133962 -64] -68.12047861913396]
Test Case: 936 | Input/Output: [[-59.532401909261104 -34] -93.5324019092611]
Test Case: 937 | Input/Output: [[-71.3964413969964 87] 15.603558603003606]
Test Case: 938 | Input/Output: [[-71.92069065794875 40] -31.920690657948754]
Test Case: 939 | Input/Output: [[77.59087120999678 -45] 32.59087120999678]
Test Case: 940 | Input/Output: [[45.31186784679974 92] 137.31186784679974]
Test Case: 941 | Input/Output: [[51.468496879067914 -68] -16.531503120932086]
Test Case: 942 | Input/Output: [[-51.416534422263396 7] -44.416534422263396]
Test Case: 943 | Input/Output: [[88.48820590292462 62] 150.48820590292462]
Test Case: 944 | Input/Output: [[-65.12217166916096 66] 0.8778283308390371]
Test Case: 945 | Input/Output: [[94.23256396303927 34] 128.23256396303927]
Test Case: 946 | Input/Output: [[29.83767440702519 -99] -69.16232559297481]
Test Case: 947 | Input/Output: [[70.18751427158884 8] 78.18751427158884]
Test Case: 948 | Input/Output: [[-36.93245828099643 20] -16.93245828099643]
Test Case: 949 | Input/Output: [[94.44847387847298 -73] 21.44847387847298]
Test Case: 950 | Input/Output: [[-80.74053006612695 -34] -114.74053006612695]
Test Case: 951 | Input/Output: [[9.474469557562458 20] 29.474469557562458]
Test Case: 952 | Input/Output: [[36.94513601631462 0] 36.94513601631462]
Test Case: 953 | Input/Output: [[65.52507378402933 29] 94.52507378402933]
Test Case: 954 | Input/Output: [[16.491189354097813 -72] -55.50881064590219]
Test Case: 955 | Input/Output: [[-66.5213099552044 1] -65.5213099552044]
Test Case: 956 | Input/Output: [[82.58374975859869 46] 128.58374975859869]
Test Case: 957 | Input/Output: [[-30.268851472749006 -56] -86.268851472749]
Test Case: 958 | Input/Output: [[-53.88988583001495 5] -48.88988583001495]
Test Case: 959 | Input/Output: [[10.847658810015972 75] 85.84765881001597]
Test Case: 960 | Input/Output: [[98.11286620841935 86] 184.11286620841935]
Test Case: 961 | Input/Output: [[83.0074558461601 70] 153.0074558461601]
Test Case: 962 | Input/Output: [[22.00305861620589 50] 72.00305861620589]
Test Case: 963 | Input/Output: [[26.484437543381432 -72] -45.51556245661857]
Test Case: 964 | Input/Output: [[71.04258513974099 18] 89.04258513974099]
Test Case: 965 | Input/Output: [[76.66644379272341 14] 90.66644379272341]
Test Case: 966 | Input/Output: [[62.704364092755185 -71] -8.295635907244815]
Test Case: 967 | Input/Output: [[75.07265041474116 93] 168.07265041474116]
Test Case: 968 | Input/Output: [[22.408322295968958 -52] -29.591677704031042]
Test Case: 969 | Input/Output: [[-70.81446426389822 12] -58.814464263898216]
Test Case: 970 | Input/Output: [[99.95269196534463 62] 161.95269196534463]
Test Case: 971 | Input/Output: [[-50.27565651009655 34] -16.275656510096553]
Test Case: 972 | Input/Output: [[-80.3596434600732 51] -29.3596434600732]
Test Case: 973 | Input/Output: [[50.467382982790355 83] 133.46738298279035]
Test Case: 974 | Input/Output: [[58.955751456521 -20] 38.955751456521]
Test Case: 975 | Input/Output: [[69.41284280456355 -65] 4.412842804563553]
Test Case: 976 | Input/Output: [[-3.940318329390408 19] 15.059681670609592]
Test Case: 977 | Input/Output: [[-90.28785763337623 -49] -139.28785763337623]
Test Case: 978 | Input/Output: [[-80.3698522049086 85] 4.630147795091403]
Test Case: 979 | Input/Output: [[56.93870782645317 -67] -10.061292173546832]
Test Case: 980 | Input/Output: [[-55.612023988077475 -22] -77.61202398807748]
Test Case: 981 | Input/Output: [[-41.155224010235635 -10] -51.155224010235635]
Test Case: 982 | Input/Output: [[27.267159103633134 79] 106.26715910363313]
Test Case: 983 | Input/Output: [[45.45811129889441 84] 129.4581112988944]
Test Case: 984 | Input/Output: [[-18.64886287683774 -69] -87.64886287683774]
Test Case: 985 | Input/Output: [[-1.5324080514433405 -16] -17.53240805144334]
Test Case: 986 | Input/Output: [[29.813613449947695 -17] 12.813613449947695]
Test Case: 987 | Input/Output: [[-98.00782798955699 -89] -187.00782798955697]
Test Case: 988 | Input/Output: [[-39.69424325616189 -78] -117.69424325616188]
Test Case: 989 | Input/Output: [[-16.88789685462004 81] 64.11210314537996]
Test Case: 990 | Input/Output: [[-50.62244075085227 82] 31.37755924914773]
Test Case: 991 | Input/Output: [[77.89412419087162 -2] 75.89412419087162]
Test Case: 992 | Input/Output: [[-95.90635095114715 -84] -179.90635095114715]
Test Case: 993 | Input/Output: [[24.604161797561957 95] 119.60416179756196]
Test Case: 994 | Input/Output: [[-13.857444466769948 -78] -91.85744446676995]
Test Case: 995 | Input/Output: [[30.363962120999673 -50] -19.636037879000327]
Test Case: 996 | Input/Output: [[86.04688071981133 -2] 84.04688071981133]
Test Case: 997 | Input/Output: [[-12.032640983801414 -68] -80.03264098380141]
Test Case: 998 | Input/Output: [[-4.154276976216735 -6] -10.154276976216735]
Test Case: 999 | Input/Output: [[76.97317574662497 -92] -15.026824253375025]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove vector_boolean_pushall zip_insert_left_fromcode exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup vector_integer_butlast vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse exec_k vector_integer_yank float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times genome_dup return_code_pop char_swap integer_max return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank zip_shove vector_integer_flush vector_integer_subvec vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean integer_min exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add code_stackdepth exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse integer_swap string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.11.1-1-SNAPSHOTHash of last Git commit = 8a64f874173fae27ed1a77827849de0fade43c2b
GitHub link = https://github.com/lspector/Clojush/commit/8a64f874173fae27ed1a77827849de0fade43c2b
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = []
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :tournament
pop-when-tagging = true
population-size = 1000
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
random-screen = false
random-seed = 51 68 -89 -21 70 32 -84 34 -128 109 123 -124 5 44 -38 62
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Number IO problem report - generation 0
Test total error for best: 55475.0
Test mean error for best: 27.73750
;;------------------------------
Outputs of best individual on training cases:
Correct output: -11.9430292301 | Program output: 12.0569707699 
Correct output: -36.0896817864 | Program output: -6.0896817864 
Correct output: -125.5304008101 | Program output: -28.5304008101
Correct output: -144.7263106209 | Program output: -45.7263106209
Correct output: 103.0168939816 | Program output: 93.0168939816 
Correct output: -16.1223046932 | Program output: -36.1223046932
Correct output: 155.9194766204 | Program output: 91.9194766204 
Correct output: 63.2567055278  | Program output: 70.2567055278 
Correct output: -30.306242645  | Program output: -68.306242645 
Correct output: 174.3686344101 | Program output: 95.3686344101 
Correct output: 129.041505579  | Program output: 38.041505579  
Correct output: 50.0047772031  | Program output: -44.9952227969
Correct output: -69.2937213159 | Program output: 12.7062786841 
Correct output: -38.6366450081 | Program output: 38.3633549919 
Correct output: -153.9889639244 | Program output: -64.9889639244
Correct output: -29.5219532451 | Program output: 25.4780467549 
Correct output: 61.9720188814  | Program output: 77.9720188814 
Correct output: 22.8390413755  | Program output: 33.8390413755 
Correct output: 50.8075713719  | Program output: 62.8075713719 
Correct output: 22.9754753134  | Program output: 60.9754753134 
Correct output: 15.5507980181  | Program output: -10.4492019819
Correct output: 20.7937377708  | Program output: 70.7937377708 
Correct output: 10.4727220987  | Program output: -66.5272779013
Correct output: -66.9282665154 | Program output: 15.0717334846 
Correct output: -91.0294909522 | Program output: -39.0294909522
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup} {:instruction -99.81926597969529} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_div} {:instruction float_mult} {:instruction print_integer} {:instruction integer_max} {:instruction integer_dup_times} {:instruction integer_yankdup} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_sin} {:instruction float_tan} {:instruction integer_swap} {:instruction float_mult} {:instruction float_dec} {:instruction float_shove} {:instruction float_swap} {:instruction float_pop} {:instruction float_cos} {:instruction integer_dup_items} {:instruction float_stackdepth} {:instruction integer_div} {:instruction float_mod} {:instruction integer_mod} {:instruction float_dup} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction float_min} {:instruction in1} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_mod} {:instruction tagged_536} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_div} {:instruction float_shove} {:instruction integer_yank} {:instruction print_float} {:instruction float_dec} {:instruction integer_dec} {:instruction integer_yank} {:instruction integer_min} {:instruction float_shove} {:instruction float_flush} {:instruction float_rot} {:instruction float_dup} {:instruction integer_yank} {:instruction integer_rot} {:instruction float_rot} {:instruction float_mult} {:instruction float_shove} {:instruction integer_div} {:instruction integer_rot} {:instruction float_yank} {:instruction integer_flush} {:instruction integer_mod} {:instruction integer_flush} {:instruction float_pop} {:instruction float_sin} {:instruction integer_flush} {:instruction integer_mult} {:instruction integer_mult} {:instruction integer_dup_items} {:instruction integer_stackdepth})
Best program: (integer_dup -99.81926597969529 float_dup_times float_dup_times float_inc float_div float_mult print_integer integer_max integer_dup_times integer_yankdup float_dup_items integer_dup_times float_sin float_tan integer_swap float_mult float_dec float_shove float_swap float_pop float_cos integer_dup_items float_stackdepth integer_div float_mod integer_mod float_dup integer_sub integer_fromfloat float_min in1 integer_dup_times integer_dup_items float_mod tagged_536 integer_stackdepth integer_yank integer_inc integer_max integer_div float_shove integer_yank print_float float_dec integer_dec integer_yank integer_min float_shove float_flush float_rot float_dup integer_yank integer_rot float_rot float_mult float_shove integer_div integer_rot float_yank integer_flush integer_mod integer_flush float_pop float_sin integer_flush integer_mult integer_mult integer_dup_items integer_stackdepth)
Errors: [24.0 12 30.0 1 97.0 2 99.0 2 10.0 2 20.0 1 64.0 3 7.0 2 38.0 2 79.0 3 91.0 3 95.0 13 82.0 13 77.0 8 89.0 3 55.0 12 16.0 2 11.0 2 12.0 2 38.0 2 26.0 9 50.0 1 77.0 10 82.0 13 52.0 2]
Total: 1446.0
Mean: 28.92
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 17735.274932300003
Median total errors in population: 25342.0
Error averages by case: (682.9445508999995 13.627 691.0535078000014 13.065 716.9377308000018 14.084 722.2052595999975 14.01 691.3433432000012 13.098 681.4331850000007 13.077 708.1071674999989 13.229 693.3548198000029 12.49 684.4752661999992 12.37 713.7839844000015 13.286 701.685149400002 12.379 690.8151270999995 13.148 698.5405541000008 13.799 694.4389047999995 13.614 723.9038175999971 14.05 690.1819157999998 13.677 696.1642199999985 12.488 685.9836159000004 12.485 692.3981261999976 12.392 689.8279171999983 12.598 676.9541095999996 12.907 691.8514456000005 12.471 685.2919661000001 12.802 699.0477533000017 13.82 704.4754943999975 13.11)
Error minima by case: (0.057 8 4.0892 1 27.3744 2 29.3744 2 2.0169 2 0.6716 1 8.0805 3 0.5409 2 0.3062 2 1.6314 3 3.0415 2 0.9952 8 0.6949 8 0.6366 8 19.3744 3 0.478 9 0.7438 2 2.839 2 0.1924 2 2.9755 2 0.4492 8 0.7937 1 0.5273 8 0.5808 6 0.0872 2)
Average genome size in population (length): 52.434
Average program size in population (points): 53.434
Average percent parens in population: 0.039
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 2
Genome diversity (% unique Plush genomes):	 0.997
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.997
Total error diversity:				 0.33
Error (vector) diversity:			 0.355
Behavioral diversity:				 0.373
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 1316275
--- Timings ---
Current time: 1529615998098 milliseconds
Total Time:           3.5 seconds
Initialization:       0.1 seconds,  3.2%
Reproduction:         0.6 seconds, 16.2%
Fitness Testing:      2.8 seconds, 80.6%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Number IO problem report - generation 1
Test total error for best: 55507.0
Test mean error for best: 27.75350
;;------------------------------
Outputs of best individual on training cases:
Correct output: -11.9430292301 | Program output: 11.0569707699 
Correct output: -36.0896817864 | Program output: -7.0896817864 
Correct output: -125.5304008101 | Program output: -29.5304008101
Correct output: -144.7263106209 | Program output: -46.7263106209
Correct output: 103.0168939816 | Program output: 92.0168939816 
Correct output: -16.1223046932 | Program output: -37.1223046932
Correct output: 155.9194766204 | Program output: 90.9194766204 
Correct output: 63.2567055278  | Program output: 69.2567055278 
Correct output: -30.306242645  | Program output: -69.306242645 
Correct output: 174.3686344101 | Program output: 94.3686344101 
Correct output: 129.041505579  | Program output: 37.041505579  
Correct output: 50.0047772031  | Program output: -45.9952227969
Correct output: -69.2937213159 | Program output: 11.7062786841 
Correct output: -38.6366450081 | Program output: 37.3633549919 
Correct output: -153.9889639244 | Program output: -65.9889639244
Correct output: -29.5219532451 | Program output: 24.4780467549 
Correct output: 61.9720188814  | Program output: 76.9720188814 
Correct output: 22.8390413755  | Program output: 32.8390413755 
Correct output: 50.8075713719  | Program output: 61.8075713719 
Correct output: 22.9754753134  | Program output: 59.9754753134 
Correct output: 15.5507980181  | Program output: -11.4492019819
Correct output: 20.7937377708  | Program output: 69.7937377708 
Correct output: 10.4727220987  | Program output: -67.5272779013
Correct output: -66.9282665154 | Program output: 14.0717334846 
Correct output: -91.0294909522 | Program output: -40.0294909522
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_pop} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_yank} {:instruction float_div} {:instruction integer_div} {:instruction float_pop} {:instruction in2} {:instruction integer_swap} {:instruction float_sin} {:instruction tagged_954} {:instruction float_mult} {:instruction float_dec} {:instruction integer_pop} {:instruction float_cos} {:instruction in1} {:instruction print_integer} {:instruction integer_pop} {:instruction 97} {:instruction float_yank} {:instruction integer_sub} {:instruction float_dup} {:instruction integer_max} {:instruction float_tan} {:instruction float_rot} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_min} {:instruction integer_dup_items} {:instruction print_integer} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_swap} {:instruction tag_integer_503} {:instruction integer_flush} {:instruction print_float} {:instruction integer_mod} {:instruction float_pop} {:instruction float_pop})
Best program: (float_dup_times float_pop in1 integer_pop integer_flush float_yank float_div integer_div float_pop in2 integer_swap float_sin tagged_954 float_mult float_dec integer_pop float_cos in1 print_integer integer_pop 97 float_yank integer_sub float_dup integer_max float_tan float_rot float_pop float_min integer_dup_items float_min integer_dup_items print_integer float_inc integer_rot integer_dec float_dec float_dec integer_div float_swap tag_integer_503 integer_flush print_float integer_mod float_pop float_pop)
Errors: [23.0 11 29.0 2 96.0 2 98.0 2 11.0 3 21.0 2 65.0 3 6.0 1 39.0 2 80.0 2 92.0 3 96.0 13 81.0 13 76.0 9 88.0 2 54.0 12 15.0 2 10.0 1 11.0 2 37.0 2 27.0 9 49.0 2 78.0 10 81.0 13 51.0 2]
Total: 1439.0
Mean: 28.78
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 6467.714257299992
Median total errors in population: 1986.1363000000001
Error averages by case: (214.36725890000005 12.561 225.18725990000178 10.744 277.95047249999755 12.037 290.7365655000006 11.895 252.93358869999747 11.018 218.4669471999982 10.917 288.25266539999893 11.316 239.10805009999945 10.699 231.657718699999 10.464 299.68901039999673 11.455 271.85684329999873 10.533 247.21675839999975 12.511 247.36414130000028 12.948 240.93707950000007 12.271 296.0073499000006 11.917 230.00196250000002 12.553 243.5946102000016 10.598 217.75575840000224 10.658 235.51298050000008 10.452 231.28625160000018 10.845 210.6997215999998 11.927 235.39044140000127 10.466 232.87400819999985 11.583 246.0094002 12.832 256.7104130000015 10.947)
Error minima by case: (0.3977 8 4.0892 1 26.5304 2 29.3744 2 2.0169 2 0.6716 1 43.9195 3 2.2567 1 0.1647 2 26.6314 2 16.0415 2 0.0048 8 0.7063 9 1.5422 8 19.3744 2 0.478 9 0.972 2 2.839 1 0.7404 2 2.9755 2 0.4492 8 0.7937 1 0.5273 8 0.5808 9 0.9109 2)
Average genome size in population (length): 58.235
Average program size in population (points): 59.235
Average percent parens in population: 0.023
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.508
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.782
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.782
Total error diversity:				 0.289
Error (vector) diversity:			 0.299
Behavioral diversity:				 0.32
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 2778200
--- Timings ---
Current time: 1529616002024 milliseconds
Total Time:           7.6 seconds
Initialization:       0.1 seconds,  1.5%
Reproduction:         2.4 seconds, 31.5%
Fitness Testing:      4.5 seconds, 58.6%
Report:               0.6 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Number IO problem report - generation 2
Test total error for best: 57583.083600000034
Test mean error for best: 28.79154
;;------------------------------
Outputs of best individual on training cases:
Correct output: -11.9430292301 | Program output: 12.0569707699 
Correct output: -36.0896817864 | Program output: -6.0896817864 
Correct output: -125.5304008101 | Program output: -28.5304008101
Correct output: -144.7263106209 | Program output: -45.7263106209
Correct output: 103.0168939816 | Program output: 93.0168939816 
Correct output: -16.1223046932 | Program output: 20.0          
Correct output: 155.9194766204 | Program output: 91.9194766204 
Correct output: 63.2567055278  | Program output: 70.2567055278 
Correct output: -30.306242645  | Program output: 38.0          
Correct output: 174.3686344101 | Program output: 95.3686344101 
Correct output: 129.041505579  | Program output: 91.0          
Correct output: 50.0047772031  | Program output: 95.0          
Correct output: -69.2937213159 | Program output: 12.7062786841 
Correct output: -38.6366450081 | Program output: 38.3633549919 
Correct output: -153.9889639244 | Program output: -64.9889639244
Correct output: -29.5219532451 | Program output: 25.4780467549 
Correct output: 61.9720188814  | Program output: 77.9720188814 
Correct output: 22.8390413755  | Program output: 33.8390413755 
Correct output: 50.8075713719  | Program output: 62.8075713719 
Correct output: 22.9754753134  | Program output: 60.9754753134 
Correct output: 15.5507980181  | Program output: 26.0          
Correct output: 20.7937377708  | Program output: 70.7937377708 
Correct output: 10.4727220987  | Program output: 77.0          
Correct output: -66.9282665154 | Program output: 15.0717334846 
Correct output: -91.0294909522 | Program output: -39.0294909522
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction in1} {:instruction integer_max} {:instruction integer_mult} {:instruction tag_float_29} {:instruction float_sub} {:instruction integer_dup} {:instruction integer_min} {:instruction float_mult} {:instruction integer_dup} {:instruction float_dup_items} {:instruction float_pop} {:instruction print_float} {:instruction float_mult} {:instruction float_sub} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_rot} {:instruction integer_inc} {:instruction float_yankdup} {:instruction integer_pop} {:instruction in1} {:instruction float_max} {:instruction print_float} {:instruction integer_dup_times} {:instruction print_integer} {:instruction float_tan} {:instruction float_yank} {:instruction integer_sub} {:instruction float_cos} {:instruction float_flush} {:instruction integer_fromfloat} {:instruction float_add} {:instruction float_dup} {:instruction float_flush} {:instruction float_frominteger} {:instruction float_min} {:instruction integer_dup} {:instruction float_max} {:instruction integer_flush} {:instruction float_flush})
Best program: (integer_fromfloat integer_pop in2 float_min in1 integer_max integer_mult tag_float_29 float_sub integer_dup integer_min float_mult integer_dup float_dup_items float_pop print_float float_mult float_sub float_rot float_frominteger float_rot float_frominteger float_rot integer_inc float_yankdup integer_pop in1 float_max print_float integer_dup_times print_integer float_tan float_yank integer_sub float_cos float_flush integer_fromfloat float_add float_dup float_flush float_frominteger float_min integer_dup float_max integer_flush float_flush)
Errors: [24.0 12 30.0 1 97.0 2 99.0 2 10.0 2 36.1223 12 64.0 3 7.0 2 68.3062 10 79.0 3 38.0415 10 44.9952 11 82.0 13 77.0 8 89.0 3 55.0 12 16.0 2 11.0 2 12.0 2 38.0 2 10.4492 11 50.0 1 66.5273 10 82.0 13 52.0 2]
Total: 1389.4417
Mean: 27.788834
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 4892.672380900007
Median total errors in population: 1487.0
Error averages by case: (161.15295660000015 12.543 164.2947035000001 6.374 211.44502339999943 7.739 217.79359850000054 7.565 172.8964228999997 6.968 161.7997408999998 6.608 204.43986309999957 7.571 167.7416250999996 6.853 178.36908980000013 6.84 214.60002489999897 7.578 204.9829825 7.073 205.32909450000065 13.245 196.10669209999978 13.1 198.15134830000034 10.661 217.48230810000035 7.845 182.33992600000056 12.302 175.4031869 6.915 159.7157187000011 6.888 168.82260240000002 6.896 181.51471760000013 6.999 157.29266130000042 11.105 190.9930449000002 6.453 198.71605009999934 11.092 196.5559077 13.074 187.47509110000072 6.971)
Error minima by case: (4.7669 8 4.0897 1 26.5304 2 29.3744 1 6.1589 1 13.0943 1 46.9195 3 4.7433 1 3.8469 2 20.0185 2 16.0415 2 10.0048 8 9.2937 9 7.3744 8 19.3744 2 3.478 10 13.028 2 5.839 1 4.5202 2 3.8468 2 1.4492 9 3.7937 1 2.13 9 6.9283 9 10.0918 2)
Average genome size in population (length): 51.963
Average program size in population (points): 52.963
Average percent parens in population: 0.024
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.9485
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.669
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.669
Total error diversity:				 0.115
Error (vector) diversity:			 0.12
Behavioral diversity:				 0.131
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 4081525
--- Timings ---
Current time: 1529616005629 milliseconds
Total Time:          11.2 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         4.1 seconds, 36.4%
Fitness Testing:      5.9 seconds, 52.9%
Report:               1.1 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Number IO problem report - generation 3
Test total error for best: 57583.083600000034
Test mean error for best: 28.79154
;;------------------------------
Outputs of best individual on training cases:
Correct output: -11.9430292301 | Program output: 12.0569707699 
Correct output: -36.0896817864 | Program output: -6.0896817864 
Correct output: -125.5304008101 | Program output: -28.5304008101
Correct output: -144.7263106209 | Program output: -45.7263106209
Correct output: 103.0168939816 | Program output: 93.0168939816 
Correct output: -16.1223046932 | Program output: 20.0          
Correct output: 155.9194766204 | Program output: 91.9194766204 
Correct output: 63.2567055278  | Program output: 70.2567055278 
Correct output: -30.306242645  | Program output: 38.0          
Correct output: 174.3686344101 | Program output: 95.3686344101 
Correct output: 129.041505579  | Program output: 91.0          
Correct output: 50.0047772031  | Program output: 95.0          
Correct output: -69.2937213159 | Program output: 12.7062786841 
Correct output: -38.6366450081 | Program output: 38.3633549919 
Correct output: -153.9889639244 | Program output: -64.9889639244
Correct output: -29.5219532451 | Program output: 25.4780467549 
Correct output: 61.9720188814  | Program output: 77.9720188814 
Correct output: 22.8390413755  | Program output: 33.8390413755 
Correct output: 50.8075713719  | Program output: 62.8075713719 
Correct output: 22.9754753134  | Program output: 60.9754753134 
Correct output: 15.5507980181  | Program output: 26.0          
Correct output: 20.7937377708  | Program output: 70.7937377708 
Correct output: 10.4727220987  | Program output: 77.0          
Correct output: -66.9282665154 | Program output: 15.0717334846 
Correct output: -91.0294909522 | Program output: -39.0294909522
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction in1} {:instruction integer_max} {:instruction integer_mult} {:instruction tag_float_29} {:instruction float_sub} {:instruction integer_dup} {:instruction integer_min} {:instruction float_mult} {:instruction integer_dup} {:instruction float_dup_items} {:instruction float_pop} {:instruction float_swap} {:instruction float_mult} {:instruction float_sub} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_rot} {:instruction integer_inc} {:instruction float_yankdup} {:instruction integer_pop} {:instruction in1} {:instruction float_max} {:instruction print_float} {:instruction integer_dup_times} {:instruction print_integer} {:instruction float_tan} {:instruction float_yank} {:instruction integer_sub} {:instruction float_cos} {:instruction float_flush} {:instruction integer_fromfloat} {:instruction float_add} {:instruction float_dup} {:instruction float_flush} {:instruction float_frominteger} {:instruction float_min} {:instruction integer_dup} {:instruction float_max} {:instruction integer_flush} {:instruction float_flush})
Best program: (integer_fromfloat integer_pop in2 float_min in1 integer_max integer_mult tag_float_29 float_sub integer_dup integer_min float_mult integer_dup float_dup_items float_pop float_swap float_mult float_sub float_rot float_frominteger float_rot float_frominteger float_rot integer_inc float_yankdup integer_pop in1 float_max print_float integer_dup_times print_integer float_tan float_yank integer_sub float_cos float_flush integer_fromfloat float_add float_dup float_flush float_frominteger float_min integer_dup float_max integer_flush float_flush)
Errors: [24.0 12 30.0 1 97.0 2 99.0 2 10.0 2 36.1223 12 64.0 3 7.0 2 68.3062 10 79.0 3 38.0415 10 44.9952 11 82.0 13 77.0 8 89.0 3 55.0 12 16.0 2 11.0 2 12.0 2 38.0 2 10.4492 11 50.0 1 66.5273 10 82.0 13 52.0 2]
Total: 1389.4417
Mean: 27.788834
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 5078.4121626
Median total errors in population: 1446.0
Error averages by case: (171.2489923 12.446 178.41737279999998 3.314 235.09679260000001 4.225 237.24796749999993 4.225 160.35929409999997 4.065 169.52462629999997 3.364 206.15606929999998 4.838 157.6286546 3.837 184.61647299999998 3.943 218.76731510000002 4.74 227.76433330000003 4.709 231.88181830000005 13.338 219.8886096 13.39 215.55158680000002 9.267 229.30523760000005 4.99 197.14200280000003 12.517 165.60915990000004 3.938 160.73937620000004 3.863 162.1040323 3.934 183.401117 3.971 174.26786090000002 9.937 193.2973952 3.211 216.63242879999999 10.745 219.8880834 13.413 197.54356290000004 4.112)
Error minima by case: (0.057 8 4.0897 1 26.5304 2 43.7263 2 3.2916 1 4.1223 1 49.611 3 4.0 1 5.3062 1 68.0602 2 16.0415 3 32.1637 9 7.7733 10 16.3634 8 62.989 2 3.478 9 13.0 2 8.0 1 9.0 1 19.5696 2 10.4492 9 19.7937 1 10.4727 9 6.9283 9 6.0295 1)
Average genome size in population (length): 44.842
Average program size in population (points): 45.842
Average percent parens in population: 0.029
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.35
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 74
Genome diversity (% unique Plush genomes):	 0.593
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 74
Syntactic diversity (% unique Push programs):	 0.593
Total error diversity:				 0.057
Error (vector) diversity:			 0.06
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 5205375
--- Timings ---
Current time: 1529616008995 milliseconds
Total Time:          14.7 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         5.5 seconds, 37.6%
Fitness Testing:      7.5 seconds, 51.3%
Report:               1.5 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Number IO problem report - generation 4
Test total error for best: 57583.083600000034
Test mean error for best: 28.79154
;;------------------------------
Outputs of best individual on training cases:
Correct output: -11.9430292301 | Program output: 12.0569707699 
Correct output: -36.0896817864 | Program output: -6.0896817864 
Correct output: -125.5304008101 | Program output: -28.5304008101
Correct output: -144.7263106209 | Program output: -45.7263106209
Correct output: 103.0168939816 | Program output: 93.0168939816 
Correct output: -16.1223046932 | Program output: 20.0          
Correct output: 155.9194766204 | Program output: 91.9194766204 
Correct output: 63.2567055278  | Program output: 70.2567055278 
Correct output: -30.306242645  | Program output: 38.0          
Correct output: 174.3686344101 | Program output: 95.3686344101 
Correct output: 129.041505579  | Program output: 91.0          
Correct output: 50.0047772031  | Program output: 95.0          
Correct output: -69.2937213159 | Program output: 12.7062786841 
Correct output: -38.6366450081 | Program output: 38.3633549919 
Correct output: -153.9889639244 | Program output: -64.9889639244
Correct output: -29.5219532451 | Program output: 25.4780467549 
Correct output: 61.9720188814  | Program output: 77.9720188814 
Correct output: 22.8390413755  | Program output: 33.8390413755 
Correct output: 50.8075713719  | Program output: 62.8075713719 
Correct output: 22.9754753134  | Program output: 60.9754753134 
Correct output: 15.5507980181  | Program output: 26.0          
Correct output: 20.7937377708  | Program output: 70.7937377708 
Correct output: 10.4727220987  | Program output: 77.0          
Correct output: -66.9282665154 | Program output: 15.0717334846 
Correct output: -91.0294909522 | Program output: -39.0294909522
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction in1} {:instruction integer_max} {:instruction float_div} {:instruction tag_float_29} {:instruction float_sub} {:instruction integer_dup} {:instruction integer_min} {:instruction float_mult} {:instruction integer_dup} {:instruction float_dup_items} {:instruction float_pop} {:instruction print_float} {:instruction float_mult} {:instruction float_sub} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_rot} {:instruction integer_inc} {:instruction float_yankdup} {:instruction integer_pop} {:instruction in1} {:instruction float_max} {:instruction print_float} {:instruction integer_dup_times} {:instruction print_integer} {:instruction float_tan} {:instruction float_yank} {:instruction integer_sub} {:instruction float_cos} {:instruction float_flush} {:instruction integer_fromfloat} {:instruction float_add} {:instruction float_dup} {:instruction float_flush} {:instruction float_frominteger} {:instruction float_min} {:instruction integer_dup} {:instruction float_max} {:instruction integer_flush} {:instruction float_flush})
Best program: (integer_fromfloat integer_pop in2 float_min in1 integer_max float_div tag_float_29 float_sub integer_dup integer_min float_mult integer_dup float_dup_items float_pop print_float float_mult float_sub float_rot float_frominteger float_rot float_frominteger float_rot integer_inc float_yankdup integer_pop in1 float_max print_float integer_dup_times print_integer float_tan float_yank integer_sub float_cos float_flush integer_fromfloat float_add float_dup float_flush float_frominteger float_min integer_dup float_max integer_flush float_flush)
Errors: [24.0 12 30.0 1 97.0 2 99.0 2 10.0 2 36.1223 12 64.0 3 7.0 2 68.3062 10 79.0 3 38.0415 10 44.9952 11 82.0 13 77.0 8 89.0 3 55.0 12 16.0 2 11.0 2 12.0 2 38.0 2 10.4492 11 50.0 1 66.5273 10 82.0 13 52.0 2]
Total: 1389.4417
Mean: 27.788834
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 4463.4055371
Median total errors in population: 1446.0
Error averages by case: (146.4087048 12.109 151.66107150000002 3.116 209.7833337999999 3.865 211.9720904000001 3.845 137.0967015 3.903 145.0924998 3.38 183.71485199999992 4.506 133.23417149999997 3.419 159.79334409999998 3.7 197.36035719999998 4.265 205.02220219999992 4.565 207.26929910000007 13.2 196.0293072 13.271 191.6723504 9.246 203.67302600000002 4.471 172.88412470000006 12.39 141.6750041 3.667 136.0647594000001 3.433 137.86546379999996 3.679 159.0910542 3.709 148.51817090000006 9.738 169.34894170000004 3.113 192.53186999999986 10.588 196.02961579999996 13.257 171.43622100000005 3.742)
Error minima by case: (10.3845 9 4.0897 1 26.5304 2 43.7263 1 9.0 2 15.9605 1 63.0 3 5.0 1 20.3869 1 78.0 2 38.0415 2 13.0911 10 6.281 9 12.0565 8 62.989 2 21.1712 9 14.0 2 9.0 1 10.0 1 13.9382 2 9.4492 9 16.1199 1 8.9487 9 8.6465 9 15.4548 1)
Average genome size in population (length): 45.186
Average program size in population (points): 46.186
Average percent parens in population: 0.027
Minimum age in population: 4.0
Maximum age in population: 7.5
Average age in population: 5.779875
Median age in population: 5.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 78
Genome diversity (% unique Plush genomes):	 0.644
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 78
Syntactic diversity (% unique Push programs):	 0.644
Total error diversity:				 0.045
Error (vector) diversity:			 0.049
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 6338200
--- Timings ---
Current time: 1529616012464 milliseconds
Total Time:          18.2 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         7.1 seconds, 38.9%
Fitness Testing:      9.1 seconds, 50.1%
Report:               1.9 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Number IO problem report - generation 5
Test total error for best: 57282.337300000036
Test mean error for best: 28.64117
;;------------------------------
Outputs of best individual on training cases:
Correct output: -11.9430292301 | Program output: 12.0569707699 
Correct output: -36.0896817864 | Program output: -6.0896817864 
Correct output: -125.5304008101 | Program output: -28.5304008101
Correct output: -144.7263106209 | Program output: -45.7263106209
Correct output: 103.0168939816 | Program output: 93.0168939816 
Correct output: -16.1223046932 | Program output: 19.0          
Correct output: 155.9194766204 | Program output: 91.9194766204 
Correct output: 63.2567055278  | Program output: 70.2567055278 
Correct output: -30.306242645  | Program output: 37.0          
Correct output: 174.3686344101 | Program output: 95.3686344101 
Correct output: 129.041505579  | Program output: 90.0          
Correct output: 50.0047772031  | Program output: 94.0          
Correct output: -69.2937213159 | Program output: 12.7062786841 
Correct output: -38.6366450081 | Program output: 38.3633549919 
Correct output: -153.9889639244 | Program output: -64.9889639244
Correct output: -29.5219532451 | Program output: 25.4780467549 
Correct output: 61.9720188814  | Program output: 77.9720188814 
Correct output: 22.8390413755  | Program output: 33.8390413755 
Correct output: 50.8075713719  | Program output: 62.8075713719 
Correct output: 22.9754753134  | Program output: 60.9754753134 
Correct output: 15.5507980181  | Program output: 25.0          
Correct output: 20.7937377708  | Program output: 70.7937377708 
Correct output: 10.4727220987  | Program output: 76.0          
Correct output: -66.9282665154 | Program output: 15.0717334846 
Correct output: -91.0294909522 | Program output: -39.0294909522
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction in1} {:instruction integer_max} {:instruction integer_mult} {:instruction tag_float_29} {:instruction float_sub} {:instruction integer_dup} {:instruction integer_min} {:instruction float_mult} {:instruction integer_dup} {:instruction float_dup_items} {:instruction float_pop} {:instruction print_float} {:instruction float_mult} {:instruction float_sub} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_rot} {:instruction integer_inc} {:instruction float_yankdup} {:instruction integer_pop} {:instruction in1} {:instruction float_max} {:instruction print_float} {:instruction integer_dup_times} {:instruction print_integer} {:instruction float_tan} {:instruction float_yank} {:instruction integer_sub} {:instruction float_cos} {:instruction float_flush} {:instruction integer_fromfloat} {:instruction float_add} {:instruction float_dup} {:instruction float_flush} {:instruction float_flush} {:instruction float_min} {:instruction integer_dup} {:instruction float_max} {:instruction integer_flush} {:instruction float_flush})
Best program: (integer_fromfloat integer_pop in2 float_min in1 integer_max integer_mult tag_float_29 float_sub integer_dup integer_min float_mult integer_dup float_dup_items float_pop print_float float_mult float_sub float_rot float_frominteger float_dec float_frominteger float_rot integer_inc float_yankdup integer_pop in1 float_max print_float integer_dup_times print_integer float_tan float_yank integer_sub float_cos float_flush integer_fromfloat float_add float_dup float_flush float_flush float_min integer_dup float_max integer_flush float_flush)
Errors: [24.0 12 30.0 1 97.0 2 99.0 2 10.0 2 35.1223 11 64.0 3 7.0 2 67.3062 10 79.0 3 39.0415 10 43.9952 11 82.0 13 77.0 8 89.0 3 55.0 12 16.0 2 11.0 2 12.0 2 38.0 2 9.4492 10 50.0 1 65.5273 11 82.0 13 52.0 2]
Total: 1384.4417
Mean: 27.688833
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 4800.579365900001
Median total errors in population: 1439.0
Error averages by case: (159.22977470000004 11.77 164.41544660000005 3.781 220.85313529999988 4.374 223.5866614000001 4.276 154.13965919999995 4.368 162.80587869999982 5.345 199.69697029999995 4.717 147.1011485999999 3.559 179.03068249999995 4.886 213.20070809999999 4.261 212.48207429999982 5.637 213.62718240000044 12.751 206.75542140000005 13.091 202.75036169999998 9.587 216.5807605000001 4.69 184.68592090000004 12.274 157.8983641 4.042 150.44036960000017 3.618 153.41338220000003 4.032 172.0068387 4.131 161.12766540000032 9.971 182.42762650000003 3.844 204.14303839999954 10.511 206.7675671 13.101 184.70772730000007 4.088)
Error minima by case: (0.6654 8 4.0897 1 26.5304 2 43.7263 1 7.0169 2 4.8447 1 59.9195 3 5.0 1 19.0286 1 78.0 2 33.0415 2 42.9952 8 12.7063 8 27.359 8 62.989 2 18.2443 8 14.0 2 9.0 1 10.0 1 19.5696 2 8.4492 8 19.7938 1 9.4729 8 15.0717 8 37.0295 1)
Average genome size in population (length): 47.624
Average program size in population (points): 48.624
Average percent parens in population: 0.022
Minimum age in population: 5.0
Maximum age in population: 9.0
Average age in population: 7.1464375
Median age in population: 7.1875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 96
Genome diversity (% unique Plush genomes):	 0.622
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 96
Syntactic diversity (% unique Push programs):	 0.622
Total error diversity:				 0.06
Error (vector) diversity:			 0.061
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 7534250
--- Timings ---
Current time: 1529616015571 milliseconds
Total Time:          21.2 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         8.4 seconds, 39.5%
Fitness Testing:     10.5 seconds, 49.6%
Report:               2.2 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Number IO problem report - generation 6
Test total error for best: 57042.70640000003
Test mean error for best: 28.52135
;;------------------------------
Outputs of best individual on training cases:
Correct output: -11.9430292301 | Program output: 11.0569707699 
Correct output: -36.0896817864 | Program output: -7.0896817864 
Correct output: -125.5304008101 | Program output: -29.5304008101
Correct output: -144.7263106209 | Program output: -46.7263106209
Correct output: 103.0168939816 | Program output: 92.0168939816 
Correct output: -16.1223046932 | Program output: 19.0          
Correct output: 155.9194766204 | Program output: 90.9194766204 
Correct output: 63.2567055278  | Program output: 69.2567055278 
Correct output: -30.306242645  | Program output: 37.0          
Correct output: 174.3686344101 | Program output: 94.3686344101 
Correct output: 129.041505579  | Program output: 90.0          
Correct output: 50.0047772031  | Program output: 94.0          
Correct output: -69.2937213159 | Program output: 11.7062786841 
Correct output: -38.6366450081 | Program output: 37.3633549919 
Correct output: -153.9889639244 | Program output: -65.9889639244
Correct output: -29.5219532451 | Program output: 24.4780467549 
Correct output: 61.9720188814  | Program output: 76.9720188814 
Correct output: 22.8390413755  | Program output: 32.8390413755 
Correct output: 50.8075713719  | Program output: 61.8075713719 
Correct output: 22.9754753134  | Program output: 59.9754753134 
Correct output: 15.5507980181  | Program output: 25.0          
Correct output: 20.7937377708  | Program output: 69.7937377708 
Correct output: 10.4727220987  | Program output: 76.0          
Correct output: -66.9282665154 | Program output: 14.0717334846 
Correct output: -91.0294909522 | Program output: -40.0294909522
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction in1} {:instruction integer_max} {:instruction float_div} {:instruction tag_float_29} {:instruction float_sub} {:instruction float_pop} {:instruction print_float} {:instruction float_mult} {:instruction float_sub} {:instruction float_sub} {:instruction float_frominteger} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_rot} {:instruction integer_inc} {:instruction float_yankdup} {:instruction integer_pop} {:instruction in1} {:instruction float_max} {:instruction 97} {:instruction float_yank} {:instruction integer_sub} {:instruction float_dup} {:instruction integer_max} {:instruction float_tan} {:instruction float_rot} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_min} {:instruction integer_dup_items} {:instruction print_integer} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction tag_integer_503} {:instruction integer_flush} {:instruction print_float})
Best program: (integer_fromfloat integer_pop in2 float_min in1 integer_max float_div tag_float_29 float_sub float_pop print_float float_mult float_sub float_sub float_frominteger float_rot float_frominteger float_rot integer_inc float_yankdup integer_pop in1 float_max 97 float_yank integer_sub float_dup integer_max float_tan float_rot float_pop float_min integer_dup_items float_min integer_dup_items print_integer float_inc integer_rot integer_dec float_dec float_dec integer_flush float_swap tag_integer_503 integer_flush print_float)
Errors: [23.0 11 29.0 2 96.0 2 98.0 2 11.0 3 35.1223 11 65.0 3 6.0 1 67.3062 10 80.0 2 39.0415 10 43.9952 11 81.0 13 76.0 9 88.0 2 54.0 12 15.0 2 10.0 1 11.0 2 37.0 2 9.4492 10 49.0 2 65.5273 11 81.0 13 51.0 2]
Total: 1370.4417
Mean: 27.408834
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 3851.9868243999995
Median total errors in population: 1389.4417
Error averages by case: (119.93451380000002 12.208 124.89025499999984 3.085 184.5252432999999 4.067 187.64096050000006 3.923 114.98185980000004 3.561 132.4904819000011 9.273 164.10018670000002 4.357 108.25000319999991 3.516 157.9991268000008 8.027 177.42795839999997 4.243 154.42861470000108 8.249 158.72790540000167 11.931 169.78439699999998 13.216 167.54828670000006 9.079 180.61381360000004 4.793 148.20396490000013 12.33 118.63523949999983 3.664 111.15881950000022 3.658 114.0544632 3.658 136.34073410000002 3.747 117.22653110000111 10.741 146.85823809999988 3.049 166.83944509999907 10.481 169.97805440000005 13.192 147.5257277000002 3.774)
Error minima by case: (9.3845 8 4.0897 1 26.5304 2 43.7263 1 3.0169 1 5.2783 1 37.9195 3 5.0 1 14.6901 1 41.3686 2 15.9585 2 31.9382 9 12.7063 8 6.3597 8 62.989 2 15.4744 9 14.0 2 9.0 1 10.0 1 19.9755 2 8.4492 9 19.7937 1 9.4727 8 15.0717 10 0.6361 1)
Average genome size in population (length): 48.976
Average program size in population (points): 49.976
Average percent parens in population: 0.021
Minimum age in population: 6.0
Maximum age in population: 10.4375
Average age in population: 8.60003125
Median age in population: 8.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 59
Genome diversity (% unique Plush genomes):	 0.637
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.637
Total error diversity:				 0.07
Error (vector) diversity:			 0.074
Behavioral diversity:				 0.075
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 8766025
--- Timings ---
Current time: 1529616018802 milliseconds
Total Time:          24.5 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         9.8 seconds, 40.0%
Fitness Testing:     12.0 seconds, 49.0%
Report:               2.6 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Number IO problem report - generation 7
Test total error for best: 56730.151700000024
Test mean error for best: 28.36508
;;------------------------------
Outputs of best individual on training cases:
Correct output: -11.9430292301 | Program output: 11.0569707699 
Correct output: -36.0896817864 | Program output: -7.0896817864 
Correct output: -125.5304008101 | Program output: -29.5304008101
Correct output: -144.7263106209 | Program output: -46.7263106209
Correct output: 103.0168939816 | Program output: 92.0168939816 
Correct output: -16.1223046932 | Program output: 18.0          
Correct output: 155.9194766204 | Program output: 90.9194766204 
Correct output: 63.2567055278  | Program output: 69.2567055278 
Correct output: -30.306242645  | Program output: 36.0          
Correct output: 174.3686344101 | Program output: 94.3686344101 
Correct output: 129.041505579  | Program output: 89.0          
Correct output: 50.0047772031  | Program output: 93.0          
Correct output: -69.2937213159 | Program output: 11.7062786841 
Correct output: -38.6366450081 | Program output: 37.3633549919 
Correct output: -153.9889639244 | Program output: -65.9889639244
Correct output: -29.5219532451 | Program output: 24.4780467549 
Correct output: 61.9720188814  | Program output: 76.9720188814 
Correct output: 22.8390413755  | Program output: 32.8390413755 
Correct output: 50.8075713719  | Program output: 61.8075713719 
Correct output: 22.9754753134  | Program output: 59.9754753134 
Correct output: 15.5507980181  | Program output: 24.0          
Correct output: 20.7937377708  | Program output: 69.7937377708 
Correct output: 10.4727220987  | Program output: 75.0          
Correct output: -66.9282665154 | Program output: 14.0717334846 
Correct output: -91.0294909522 | Program output: -40.0294909522
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction in1} {:instruction integer_max} {:instruction integer_mult} {:instruction tag_float_29} {:instruction float_sub} {:instruction integer_dup} {:instruction integer_min} {:instruction float_mult} {:instruction integer_dup} {:instruction float_dup_items} {:instruction float_pop} {:instruction print_float} {:instruction float_mult} {:instruction float_sub} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_mult} {:instruction float_sub} {:instruction float_sub} {:instruction float_frominteger} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_rot} {:instruction integer_inc} {:instruction float_yankdup} {:instruction integer_pop} {:instruction in1} {:instruction float_max} {:instruction 97} {:instruction float_yank} {:instruction integer_sub} {:instruction float_dup} {:instruction integer_max} {:instruction float_tan} {:instruction float_rot} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_min} {:instruction integer_dup_items} {:instruction print_integer} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction tag_integer_503} {:instruction integer_flush} {:instruction print_float})
Best program: (integer_fromfloat integer_pop in2 float_min in1 integer_max integer_mult tag_float_29 float_sub integer_dup integer_min float_mult integer_dup float_dup_items float_pop print_float float_mult float_sub float_rot float_frominteger float_dec float_frominteger float_mult float_sub float_sub float_frominteger float_rot float_frominteger float_rot integer_inc float_yankdup integer_pop in1 float_max 97 float_yank integer_sub float_dup integer_max float_tan float_rot float_pop float_min integer_dup_items float_min integer_dup_items print_integer float_inc integer_rot integer_dec float_dec float_dec integer_flush float_swap tag_integer_503 integer_flush print_float)
Errors: [23.0 11 29.0 2 96.0 2 98.0 2 11.0 3 34.1223 11 65.0 3 6.0 1 66.3062 10 80.0 2 40.0415 10 42.9952 11 81.0 13 76.0 9 88.0 2 54.0 12 15.0 2 10.0 1 11.0 2 37.0 2 8.4492 11 49.0 2 64.5273 11 81.0 13 51.0 2]
Total: 1367.4417
Mean: 27.348833
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2936.5567015000006
Median total errors in population: 1389.4417
Error averages by case: (83.0404011 12.2 89.20056899999999 1.909 152.6170381 2.92 154.89400260000005 2.914 80.421699 2.862 101.9006581000014 11.117 131.10348520000002 3.841 66.67039610000002 2.733 131.39598840000204 9.559 144.88843210000005 3.833 110.19747750000147 9.565 114.65218800000095 11.318 137.2258692 13.169 132.75728510000002 8.457 146.08991330000003 3.857 112.28774630000001 12.203 76.07910310000001 2.751 70.79130799999999 2.774 72.08105350000001 2.764 96.90913280000001 2.784 80.31784420000096 10.882 108.10074309999997 1.839 131.89310680000102 10.343 137.23975270000003 13.14 111.19650819999998 2.871)
Error minima by case: (11.057 11 4.0897 1 26.5304 2 43.7263 2 3.0169 1 13.5948 1 27.9195 3 5.7533 1 29.4655 2 16.3686 2 37.0415 3 2.4287 9 11.7063 10 26.9665 8 62.989 2 24.478 10 6.3228 2 10.0 1 4.8416 2 19.5696 2 8.4492 9 19.8288 1 9.4732 9 14.0717 8 37.0295 2)
Average genome size in population (length): 45.539
Average program size in population (points): 46.539
Average percent parens in population: 0.022
Minimum age in population: 7.0
Maximum age in population: 11.96875
Average age in population: 10.069140625
Median age in population: 10.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 50
Genome diversity (% unique Plush genomes):	 0.648
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.648
Total error diversity:				 0.046
Error (vector) diversity:			 0.046
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 9905575
--- Timings ---
Current time: 1529616022006 milliseconds
Total Time:          27.7 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        11.2 seconds, 40.6%
Fitness Testing:     13.4 seconds, 48.4%
Report:               2.9 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Number IO problem report - generation 8
Test total error for best: 56314.44210000002
Test mean error for best: 28.15722
;;------------------------------
Outputs of best individual on training cases:
Correct output: -11.9430292301 | Program output: 12.0569707699 
Correct output: -36.0896817864 | Program output: -6.0896817864 
Correct output: -125.5304008101 | Program output: -28.5304008101
Correct output: -144.7263106209 | Program output: -45.7263106209
Correct output: 103.0168939816 | Program output: 93.0168939816 
Correct output: -16.1223046932 | Program output: 1.0           
Correct output: 155.9194766204 | Program output: 91.9194766204 
Correct output: 63.2567055278  | Program output: 70.2567055278 
Correct output: -30.306242645  | Program output: 1.0           
Correct output: 174.3686344101 | Program output: 95.3686344101 
Correct output: 129.041505579  | Program output: 38.041505579  
Correct output: 50.0047772031  | Program output: 1.0           
Correct output: -69.2937213159 | Program output: 12.7062786841 
Correct output: -38.6366450081 | Program output: 38.3633549919 
Correct output: -153.9889639244 | Program output: -64.9889639244
Correct output: -29.5219532451 | Program output: 25.4780467549 
Correct output: 61.9720188814  | Program output: 77.9720188814 
Correct output: 22.8390413755  | Program output: 33.8390413755 
Correct output: 50.8075713719  | Program output: 62.8075713719 
Correct output: 22.9754753134  | Program output: 60.9754753134 
Correct output: 15.5507980181  | Program output: 1.0           
Correct output: 20.7937377708  | Program output: 70.7937377708 
Correct output: 10.4727220987  | Program output: 1.0           
Correct output: -66.9282665154 | Program output: 15.0717334846 
Correct output: -91.0294909522 | Program output: -39.0294909522
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_rot} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction in2} {:instruction integer_max} {:instruction integer_dec} {:instruction integer_dup} {:instruction integer_dec} {:instruction float_sub} {:instruction float_div} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_flush} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_rot} {:instruction integer_inc} {:instruction float_yankdup} {:instruction integer_pop} {:instruction in1} {:instruction float_max} {:instruction print_float} {:instruction integer_dup_times} {:instruction print_integer} {:instruction float_tan} {:instruction float_yank} {:instruction integer_sub} {:instruction float_dup_items} {:instruction integer_dec} {:instruction tagged_614} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_add} {:instruction float_tan})
Best program: (integer_div float_mult float_rot integer_yankdup float_yankdup in2 integer_max integer_dec integer_dup integer_dec float_sub float_div integer_mod integer_dup_times float_flush float_rot float_frominteger float_rot integer_inc float_yankdup integer_pop in1 float_max print_float integer_dup_times print_integer float_tan float_yank integer_sub float_dup_items integer_dec tagged_614 integer_pop integer_pop integer_add float_tan)
Errors: [24.0 12 30.0 1 97.0 2 99.0 2 10.0 2 17.1223 11 64.0 3 7.0 2 31.3062 11 79.0 3 91.0 3 49.0048 11 82.0 13 77.0 8 89.0 3 55.0 12 16.0 2 11.0 2 12.0 2 38.0 2 14.5508 10 50.0 1 9.4727 10 82.0 13 52.0 2]
Total: 1329.4568000000002
Mean: 26.589136
Genome size: 36
Size: 37
Percent parens: 0.027
--- Population Statistics ---
Average total errors in population: 2896.2447635000003
Median total errors in population: 1389.4417
Error averages by case: (84.3727382 12.207 90.05087999999999 1.945 153.05902450000002 2.951 155.39607850000002 2.932 74.7003584 2.88 95.1497531000011 10.725 124.92638630000003 3.824 69.06364390000002 2.755 124.109166500002 9.541 138.81626500000002 3.786 104.29429850000147 9.566 107.82704650000103 11.34 137.74322700000002 13.205 133.50371070000003 8.518 146.71430370000002 3.865 113.08246860000003 12.24 78.249801 2.787 72.836747 2.789 74.30045019999999 2.805 98.04877990000001 2.835 73.42477420000078 10.5 109.2406007 1.917 124.91238090000115 10.737 137.7745836 13.185 111.89929660000003 2.913)
Error minima by case: (10.3845 10 4.0897 1 26.5304 2 43.7263 2 0.0 1 0.0 1 0.0 2 2.7433 1 0.0 2 0.0 2 0.0 2 0.0 2 12.7063 9 38.3634 8 62.989 2 25.478 10 4.028 2 10.0 1 11.0 2 19.5696 2 0.0 2 30.0253 1 0.0 2 15.0717 11 8.9723 2)
Average genome size in population (length): 44.771
Average program size in population (points): 45.771
Average percent parens in population: 0.022
Minimum age in population: 9.109375
Maximum age in population: 13.5859375
Average age in population: 11.5633671875
Median age in population: 11.609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 54
Genome diversity (% unique Plush genomes):	 0.638
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 54
Syntactic diversity (% unique Push programs):	 0.638
Total error diversity:				 0.052
Error (vector) diversity:			 0.054
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 11028425
--- Timings ---
Current time: 1529616025195 milliseconds
Total Time:          30.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        12.6 seconds, 40.7%
Fitness Testing:     14.9 seconds, 48.2%
Report:               3.3 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Number IO problem report - generation 9
Test total error for best: 56735.77840000002
Test mean error for best: 28.36789
;;------------------------------
Outputs of best individual on training cases:
Correct output: -11.9430292301 | Program output: 12.0569707699 
Correct output: -36.0896817864 | Program output: -6.0896817864 
Correct output: -125.5304008101 | Program output: -28.5304008101
Correct output: -144.7263106209 | Program output: -45.7263106209
Correct output: 103.0168939816 | Program output: 93.0168939816 
Correct output: -16.1223046932 | Program output: 5.0           
Correct output: 155.9194766204 | Program output: 91.9194766204 
Correct output: 63.2567055278  | Program output: 70.2567055278 
Correct output: -30.306242645  | Program output: 5.0           
Correct output: 174.3686344101 | Program output: 95.3686344101 
Correct output: 129.041505579  | Program output: 38.041505579  
Correct output: 50.0047772031  | Program output: 5.0           
Correct output: -69.2937213159 | Program output: 12.7062786841 
Correct output: -38.6366450081 | Program output: 38.3633549919 
Correct output: -153.9889639244 | Program output: -64.9889639244
Correct output: -29.5219532451 | Program output: 25.4780467549 
Correct output: 61.9720188814  | Program output: 77.9720188814 
Correct output: 22.8390413755  | Program output: 33.8390413755 
Correct output: 50.8075713719  | Program output: 62.8075713719 
Correct output: 22.9754753134  | Program output: 60.9754753134 
Correct output: 15.5507980181  | Program output: 5.0           
Correct output: 20.7937377708  | Program output: 70.7937377708 
Correct output: 10.4727220987  | Program output: 5.0           
Correct output: -66.9282665154 | Program output: 15.0717334846 
Correct output: -91.0294909522 | Program output: -39.0294909522
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction in1} {:instruction integer_max} {:instruction float_div} {:instruction tag_float_29} {:instruction float_sub} {:instruction integer_dup} {:instruction integer_min} {:instruction float_mult} {:instruction float_sub} {:instruction 5} {:instruction integer_min} {:instruction float_mult} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_rot} {:instruction integer_inc} {:instruction float_yankdup} {:instruction integer_pop} {:instruction in1} {:instruction float_max} {:instruction print_float} {:instruction float_dup_items} {:instruction print_integer} {:instruction float_tan} {:instruction float_yank} {:instruction integer_shove} {:instruction float_dup_items} {:instruction integer_dec} {:instruction tagged_614} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_add} {:instruction float_tan})
Best program: (integer_fromfloat integer_pop in2 float_min in1 integer_max float_div tag_float_29 float_sub integer_dup integer_min float_mult float_sub 5 integer_min float_mult float_rot float_frominteger float_rot integer_inc float_yankdup integer_pop in1 float_max print_float float_dup_items print_integer float_tan float_yank integer_shove float_dup_items integer_dec tagged_614 integer_pop integer_pop integer_add float_tan)
Errors: [24.0 12 30.0 1 97.0 2 99.0 2 10.0 2 21.1223 12 64.0 3 7.0 2 35.3062 11 79.0 3 91.0 3 45.0048 10 82.0 13 77.0 8 89.0 3 55.0 12 16.0 2 11.0 2 12.0 2 38.0 2 10.5508 10 50.0 1 5.4727 11 82.0 13 52.0 2]
Total: 1326.4568000000002
Mean: 26.529137
Genome size: 37
Size: 38
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 2785.174432999999
Median total errors in population: 1384.4417
Error averages by case: (79.04308130000001 12.034 85.12426739999997 2.127 148.01566890000004 2.991 150.43664719999998 2.996 70.8339947 3.076 91.50846830000177 10.462 121.83379550000005 3.897 64.08807919999998 2.678 120.41734690000239 9.585 135.79696060000006 3.747 102.35511380000207 9.516 104.88796580000108 11.282 133.23729740000005 13.125 128.653195 8.616 141.83250020000003 3.817 108.20859460000003 12.184 72.73587040000001 2.818 67.026124 2.716 68.6223038 2.849 93.00818440000002 2.866 69.99547400000134 10.232 104.16482799999993 2.065 120.72330650000116 11.022 133.2386999 13.13 106.60666520000001 2.949)
Error minima by case: (9.4554 10 4.0897 1 26.5304 2 43.7263 2 7.0169 2 15.0352 1 26.9195 3 6.0 1 10.6938 2 15.3686 2 33.0415 3 10.9952 8 12.7063 9 37.2531 8 23.011 2 25.478 10 15.0 2 10.0 1 11.0 2 20.5696 2 7.4492 8 19.7937 1 5.4727 9 15.0717 10 11.9705 2)
Average genome size in population (length): 44.605
Average program size in population (points): 45.605
Average percent parens in population: 0.022
Minimum age in population: 10.109375
Maximum age in population: 14.84375
Average age in population: 13.07869921875
Median age in population: 13.1015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 57
Genome diversity (% unique Plush genomes):	 0.622
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 57
Syntactic diversity (% unique Push programs):	 0.622
Total error diversity:				 0.067
Error (vector) diversity:			 0.069
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 12148025
--- Timings ---
Current time: 1529616028246 milliseconds
Total Time:          33.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        13.9 seconds, 41.0%
Fitness Testing:     16.3 seconds, 47.9%
Report:               3.7 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Number IO problem report - generation 10
Test total error for best: 56091.18030000003
Test mean error for best: 28.04559
;;------------------------------
Outputs of best individual on training cases:
Correct output: -11.9430292301 | Program output: 11.0569707699 
Correct output: -36.0896817864 | Program output: -7.0896817864 
Correct output: -125.5304008101 | Program output: -29.5304008101
Correct output: -144.7263106209 | Program output: -46.7263106209
Correct output: 103.0168939816 | Program output: 92.0168939816 
Correct output: -16.1223046932 | Program output: 0.0           
Correct output: 155.9194766204 | Program output: 90.9194766204 
Correct output: 63.2567055278  | Program output: 69.2567055278 
Correct output: -30.306242645  | Program output: 0.0           
Correct output: 174.3686344101 | Program output: 94.3686344101 
Correct output: 129.041505579  | Program output: 37.041505579  
Correct output: 50.0047772031  | Program output: 0.0           
Correct output: -69.2937213159 | Program output: 11.7062786841 
Correct output: -38.6366450081 | Program output: 37.3633549919 
Correct output: -153.9889639244 | Program output: -65.9889639244
Correct output: -29.5219532451 | Program output: 24.4780467549 
Correct output: 61.9720188814  | Program output: 76.9720188814 
Correct output: 22.8390413755  | Program output: 32.8390413755 
Correct output: 50.8075713719  | Program output: 61.8075713719 
Correct output: 22.9754753134  | Program output: 59.9754753134 
Correct output: 15.5507980181  | Program output: 0.0           
Correct output: 20.7937377708  | Program output: 69.7937377708 
Correct output: 10.4727220987  | Program output: 0.0           
Correct output: -66.9282665154 | Program output: 14.0717334846 
Correct output: -91.0294909522 | Program output: -40.0294909522
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_rot} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction in2} {:instruction integer_max} {:instruction integer_dec} {:instruction integer_dup} {:instruction integer_dec} {:instruction float_sub} {:instruction float_div} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_flush} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction float_rot} {:instruction integer_inc} {:instruction float_yankdup} {:instruction integer_pop} {:instruction in1} {:instruction float_max} {:instruction 97} {:instruction float_yank} {:instruction integer_sub} {:instruction float_dup} {:instruction integer_max} {:instruction float_tan} {:instruction float_rot} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_min} {:instruction integer_dup_items} {:instruction print_integer} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction tag_integer_503} {:instruction integer_flush} {:instruction print_float})
Best program: (integer_div float_mult float_rot integer_yankdup float_yankdup in2 integer_max integer_dec integer_dup integer_dec float_sub float_div integer_mod integer_dup_times float_flush float_rot float_frominteger float_frominteger float_rot integer_inc float_yankdup integer_pop in1 float_max 97 float_yank integer_sub float_dup integer_max float_tan float_rot float_pop float_min integer_dup_items float_min integer_dup_items print_integer float_inc integer_rot integer_dec float_dec float_dec integer_flush float_swap tag_integer_503 integer_flush print_float)
Errors: [23.0 11 29.0 2 96.0 2 98.0 2 11.0 3 16.1223 12 65.0 3 6.0 1 30.3062 10 80.0 2 92.0 3 50.0048 10 81.0 13 76.0 9 88.0 2 54.0 12 15.0 2 10.0 1 11.0 2 37.0 2 15.5508 11 49.0 2 10.4727 10 81.0 13 51.0 2]
Total: 1317.4568000000002
Mean: 26.349136
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 3604.5728765999943
Median total errors in population: 1370.4417
Error averages by case: (110.85908630000002 11.759 116.21599469999992 3.035 176.20868859999993 3.616 178.74517430000003 3.569 109.93473340000004 4.029 125.4387548000017 10.772 157.59622549999992 4.466 98.9372933 2.941 150.97385740000144 9.829 171.03520899999998 4.028 141.63354290000186 9.294 139.30108530000146 11.294 161.92496980000004 13.078 157.85491419999997 9.183 170.7429251000001 4.047 138.3300987 12.217 106.96760549999995 3.383 100.58569500000002 2.996 102.78888830000004 3.413 124.76877730000001 3.434 106.12263490000119 10.524 136.00969159999988 3.029 150.8731902999996 11.079 161.92537310000003 13.083 137.2324673000001 3.468)
Error minima by case: (4.2084 10 3.0897 1 25.5304 2 42.7263 1 9.0 2 12.5948 1 27.9195 3 4.0 1 28.4655 1 16.3686 2 37.0415 3 0.9952 8 12.7063 9 25.9665 8 55.1481 2 25.478 10 13.0 2 8.0 1 9.0 1 19.5696 2 6.4492 8 20.7937 1 5.4727 9 15.0717 8 36.0295 1)
Average genome size in population (length): 46.568
Average program size in population (points): 47.568
Average percent parens in population: 0.021
Minimum age in population: 11.97265625
Maximum age in population: 16.595703125
Average age in population: 14.66650390625
Median age in population: 14.712890625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 67
Genome diversity (% unique Plush genomes):	 0.65
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 67
Syntactic diversity (% unique Push programs):	 0.65
Total error diversity:				 0.08
Error (vector) diversity:			 0.082
Behavioral diversity:				 0.083
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 13314025
--- Timings ---
Current time: 1529616031319 milliseconds
Total Time:          37.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        15.3 seconds, 41.2%
Fitness Testing:     17.6 seconds, 47.6%
Report:               4.0 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Number IO problem report - generation 11
Test total error for best: 55521.44770000003
Test mean error for best: 27.76072
;;------------------------------
Outputs of best individual on training cases:
Correct output: -11.9430292301 | Program output: 9.0569707699  
Correct output: -36.0896817864 | Program output: -9.0896817864 
Correct output: -125.5304008101 | Program output: -31.5304008101
Correct output: -144.7263106209 | Program output: -48.7263106209
Correct output: 103.0168939816 | Program output: 90.0168939816 
Correct output: -16.1223046932 | Program output: -2.0          
Correct output: 155.9194766204 | Program output: 88.9194766204 
Correct output: 63.2567055278  | Program output: 67.2567055278 
Correct output: -30.306242645  | Program output: -2.0          
Correct output: 174.3686344101 | Program output: 92.3686344101 
Correct output: 129.041505579  | Program output: 35.041505579  
Correct output: 50.0047772031  | Program output: -2.0          
Correct output: -69.2937213159 | Program output: 9.7062786841  
Correct output: -38.6366450081 | Program output: 35.3633549919 
Correct output: -153.9889639244 | Program output: -67.9889639244
Correct output: -29.5219532451 | Program output: 22.4780467549 
Correct output: 61.9720188814  | Program output: 74.9720188814 
Correct output: 22.8390413755  | Program output: 30.8390413755 
Correct output: 50.8075713719  | Program output: 59.8075713719 
Correct output: 22.9754753134  | Program output: 57.9754753134 
Correct output: 15.5507980181  | Program output: -2.0          
Correct output: 20.7937377708  | Program output: 67.7937377708 
Correct output: 10.4727220987  | Program output: -2.0          
Correct output: -66.9282665154 | Program output: 12.0717334846 
Correct output: -91.0294909522 | Program output: -42.0294909522
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_rot} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction in2} {:instruction integer_max} {:instruction integer_dec} {:instruction integer_dup} {:instruction integer_dec} {:instruction float_sub} {:instruction float_div} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_flush} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction float_rot} {:instruction integer_inc} {:instruction float_yankdup} {:instruction integer_pop} {:instruction in1} {:instruction float_max} {:instruction 97} {:instruction float_yank} {:instruction integer_sub} {:instruction float_dup} {:instruction integer_max} {:instruction float_tan} {:instruction float_rot} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_min} {:instruction integer_dup_items} {:instruction print_integer} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_flush} {:instruction float_swap} {:instruction tag_integer_503} {:instruction integer_flush} {:instruction print_float})
Best program: (integer_div float_mult float_rot integer_yankdup float_yankdup in2 integer_max integer_dec integer_dup integer_dec float_sub float_div integer_mod integer_dup_times float_flush float_rot float_frominteger float_frominteger float_rot integer_inc float_yankdup integer_pop in1 float_max 97 float_yank integer_sub float_dup integer_max float_tan float_rot float_pop float_min integer_dup_items float_min integer_dup_items print_integer float_inc integer_rot integer_dec float_dec float_dec integer_flush float_swap integer_rot integer_dec float_dec float_dec integer_flush integer_flush float_swap tag_integer_503 integer_flush print_float)
Errors: [21.0 13 27.0 2 94.0 3 96.0 2 13.0 2 14.1223 11 67.0 3 4.0 1 28.3062 10 82.0 3 94.0 3 52.0048 11 79.0 12 74.0 9 86.0 3 52.0 12 13.0 2 8.0 2 9.0 1 35.0 2 17.5508 11 47.0 2 12.4727 11 79.0 13 49.0 2]
Total: 1299.4568000000002
Mean: 25.989136
Genome size: 54
Size: 55
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 3650.995595499987
Median total errors in population: 1367.4417
Error averages by case: (113.5458301 11.836 119.27344839999984 3.291 179.44720999999996 3.919 182.4571487 3.84 111.90679210000006 4.025 121.38768310000167 11.063 160.51339229999996 4.535 101.44007689999998 3.069 142.2851100000009 10.03 173.9653161999999 4.157 158.17892400000005 7.452 141.21403610000024 11.055 164.4364730000001 13.047 160.11305229999996 9.191 175.16343040000007 4.387 140.83514100000002 12.215 109.96583839999997 3.476 103.04397750000005 3.162 105.33538800000002 3.471 127.52094620000004 3.553 108.43058850000014 10.735 137.9562801 3.101 134.9327122 10.766 164.35407570000004 13.087 141.13172430000006 3.698)
Error minima by case: (5.3241 9 1.0897 1 23.5304 2 40.7263 1 6.0169 2 13.1223 1 16.0995 3 4.0 1 27.3062 1 19.5487 2 32.0415 3 6.0048 8 11.7063 9 35.6366 8 59.989 2 24.478 10 13.0 2 8.0 1 9.0 1 18.9755 2 5.4492 8 16.7937 1 4.4727 8 14.0717 9 34.0295 1)
Average genome size in population (length): 46.878
Average program size in population (points): 47.878
Average percent parens in population: 0.021
Minimum age in population: 13.078125
Maximum age in population: 17.9833984375
Average age in population: 16.228482421875
Median age in population: 16.26220703125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 63
Genome diversity (% unique Plush genomes):	 0.627
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.627
Total error diversity:				 0.1
Error (vector) diversity:			 0.107
Behavioral diversity:				 0.107
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 14487325
--- Timings ---
Current time: 1529616034482 milliseconds
Total Time:          40.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        16.6 seconds, 41.5%
Fitness Testing:     19.0 seconds, 47.3%
Report:               4.4 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Number IO problem report - generation 12
Test total error for best: 55521.44770000003
Test mean error for best: 27.76072
;;------------------------------
Outputs of best individual on training cases:
Correct output: -11.9430292301 | Program output: 9.0569707699  
Correct output: -36.0896817864 | Program output: -9.0896817864 
Correct output: -125.5304008101 | Program output: -31.5304008101
Correct output: -144.7263106209 | Program output: -48.7263106209
Correct output: 103.0168939816 | Program output: 90.0168939816 
Correct output: -16.1223046932 | Program output: -2.0          
Correct output: 155.9194766204 | Program output: 88.9194766204 
Correct output: 63.2567055278  | Program output: 67.2567055278 
Correct output: -30.306242645  | Program output: -2.0          
Correct output: 174.3686344101 | Program output: 92.3686344101 
Correct output: 129.041505579  | Program output: 35.041505579  
Correct output: 50.0047772031  | Program output: -2.0          
Correct output: -69.2937213159 | Program output: 9.7062786841  
Correct output: -38.6366450081 | Program output: 35.3633549919 
Correct output: -153.9889639244 | Program output: -67.9889639244
Correct output: -29.5219532451 | Program output: 22.4780467549 
Correct output: 61.9720188814  | Program output: 74.9720188814 
Correct output: 22.8390413755  | Program output: 30.8390413755 
Correct output: 50.8075713719  | Program output: 59.8075713719 
Correct output: 22.9754753134  | Program output: 57.9754753134 
Correct output: 15.5507980181  | Program output: -2.0          
Correct output: 20.7937377708  | Program output: 67.7937377708 
Correct output: 10.4727220987  | Program output: -2.0          
Correct output: -66.9282665154 | Program output: 12.0717334846 
Correct output: -91.0294909522 | Program output: -42.0294909522
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_rot} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction in2} {:instruction integer_max} {:instruction integer_dec} {:instruction integer_dup} {:instruction integer_dec} {:instruction float_sub} {:instruction float_div} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_flush} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction float_rot} {:instruction integer_inc} {:instruction float_yankdup} {:instruction integer_pop} {:instruction in1} {:instruction float_max} {:instruction 97} {:instruction float_yank} {:instruction integer_sub} {:instruction float_dup} {:instruction integer_max} {:instruction float_tan} {:instruction float_rot} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_min} {:instruction integer_dup_items} {:instruction print_integer} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_flush} {:instruction float_swap} {:instruction tag_integer_503} {:instruction integer_flush} {:instruction print_float})
Best program: (integer_div float_mult float_rot integer_yankdup float_yankdup in2 integer_max integer_dec integer_dup integer_dec float_sub float_div integer_mod integer_dup_times float_flush float_rot float_frominteger float_frominteger float_rot integer_inc float_yankdup integer_pop in1 float_max 97 float_yank integer_sub float_dup integer_max float_tan float_rot float_pop float_min integer_dup_items float_min integer_dup_items print_integer float_inc integer_rot integer_dec float_dec float_dec integer_flush float_swap integer_rot integer_dec float_dec float_dec integer_flush integer_flush float_swap tag_integer_503 integer_flush print_float)
Errors: [21.0 13 27.0 2 94.0 3 96.0 2 13.0 2 14.1223 11 67.0 3 4.0 1 28.3062 10 82.0 3 94.0 3 52.0048 11 79.0 12 74.0 9 86.0 3 52.0 12 13.0 2 8.0 2 9.0 1 35.0 2 17.5508 11 47.0 2 12.4727 11 79.0 13 49.0 2]
Total: 1299.4568000000002
Mean: 25.989136
Genome size: 54
Size: 55
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2978.369395500015
Median total errors in population: 1329.4568000000002
Error averages by case: (90.36391710000001 12.199 97.0533344999999 2.428 160.09841930000007 3.386 162.92005679999997 3.355 76.49776440000001 2.968 83.03727500000143 10.92 127.14133790000004 3.87 75.85613009999999 2.811 98.26123770000176 10.331 141.24734580000006 3.821 146.85323090000026 4.358 113.32877219999885 10.952 143.91047210000005 13.205 139.5745049 8.613 154.74894040000004 4.261 119.12590670000002 12.249 84.40113790000001 2.873 78.8693833 2.862 80.4158934 2.873 104.07757520000003 2.926 78.94829039999895 10.454 115.26556219999993 2.052 82.80863039999912 10.304 143.93473250000002 13.194 119.10754440000008 3.257)
Error minima by case: (9.3845 8 4.0897 1 26.5304 2 43.7263 2 2.0169 1 3.8777 1 27.9195 3 4.0 1 7.6938 2 16.3686 2 38.0415 3 40.9952 8 12.7063 9 37.0375 8 57.989 2 25.478 10 13.0 2 8.0 1 9.0 1 20.3609 2 6.4492 9 20.7937 1 4.4727 8 15.0717 10 4.9705 1)
Average genome size in population (length): 42.979
Average program size in population (points): 43.979
Average percent parens in population: 0.023
Minimum age in population: 15.07421875
Maximum age in population: 19.76806640625
Average age in population: 17.76434375
Median age in population: 17.7685546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 71
Genome diversity (% unique Plush genomes):	 0.588
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 71
Syntactic diversity (% unique Push programs):	 0.588
Total error diversity:				 0.081
Error (vector) diversity:			 0.085
Behavioral diversity:				 0.086
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 15564150
--- Timings ---
Current time: 1529616037662 milliseconds
Total Time:          43.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.0 seconds, 41.6%
Fitness Testing:     20.4 seconds, 47.1%
Report:               4.8 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Number IO problem report - generation 13
Test total error for best: 55521.44770000003
Test mean error for best: 27.76072
;;------------------------------
Outputs of best individual on training cases:
Correct output: -11.9430292301 | Program output: 9.0569707699  
Correct output: -36.0896817864 | Program output: -9.0896817864 
Correct output: -125.5304008101 | Program output: -31.5304008101
Correct output: -144.7263106209 | Program output: -48.7263106209
Correct output: 103.0168939816 | Program output: 90.0168939816 
Correct output: -16.1223046932 | Program output: -2.0          
Correct output: 155.9194766204 | Program output: 88.9194766204 
Correct output: 63.2567055278  | Program output: 67.2567055278 
Correct output: -30.306242645  | Program output: -2.0          
Correct output: 174.3686344101 | Program output: 92.3686344101 
Correct output: 129.041505579  | Program output: 35.041505579  
Correct output: 50.0047772031  | Program output: -2.0          
Correct output: -69.2937213159 | Program output: 9.7062786841  
Correct output: -38.6366450081 | Program output: 35.3633549919 
Correct output: -153.9889639244 | Program output: -67.9889639244
Correct output: -29.5219532451 | Program output: 22.4780467549 
Correct output: 61.9720188814  | Program output: 74.9720188814 
Correct output: 22.8390413755  | Program output: 30.8390413755 
Correct output: 50.8075713719  | Program output: 59.8075713719 
Correct output: 22.9754753134  | Program output: 57.9754753134 
Correct output: 15.5507980181  | Program output: -2.0          
Correct output: 20.7937377708  | Program output: 67.7937377708 
Correct output: 10.4727220987  | Program output: -2.0          
Correct output: -66.9282665154 | Program output: 12.0717334846 
Correct output: -91.0294909522 | Program output: -42.0294909522
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_rot} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction in2} {:instruction integer_max} {:instruction integer_dec} {:instruction integer_dup} {:instruction integer_dec} {:instruction float_sub} {:instruction float_div} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_flush} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction float_rot} {:instruction integer_inc} {:instruction float_yankdup} {:instruction integer_pop} {:instruction in1} {:instruction float_max} {:instruction 97} {:instruction float_yank} {:instruction integer_sub} {:instruction float_dup} {:instruction integer_max} {:instruction float_tan} {:instruction float_rot} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_min} {:instruction integer_dup_items} {:instruction print_integer} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_flush} {:instruction float_swap} {:instruction tag_integer_503} {:instruction integer_flush} {:instruction print_float})
Best program: (integer_div float_mult float_rot integer_yankdup float_yankdup in2 integer_max integer_dec integer_dup integer_dec float_sub float_div integer_mod integer_dup_times float_flush float_rot float_frominteger float_frominteger float_rot integer_inc float_yankdup integer_pop in1 float_max 97 float_yank integer_sub float_dup integer_max float_tan float_rot float_pop float_min integer_dup_items float_min integer_dup_items print_integer float_inc integer_rot integer_dec float_dec float_dec integer_flush float_swap integer_rot integer_dec float_dec float_dec integer_flush integer_flush float_swap tag_integer_503 integer_flush print_float)
Errors: [21.0 13 27.0 2 94.0 3 96.0 2 13.0 2 14.1223 11 67.0 3 4.0 1 28.3062 10 82.0 3 94.0 3 52.0048 11 79.0 12 74.0 9 86.0 3 52.0 12 13.0 2 8.0 2 9.0 1 35.0 2 17.5508 11 47.0 2 12.4727 11 79.0 13 49.0 2]
Total: 1299.4568000000002
Mean: 25.989136
Genome size: 54
Size: 55
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2989.991712100017
Median total errors in population: 1329.4568000000002
Error averages by case: (90.00313500000001 12.091 95.66385179999992 2.38 158.04672790000004 3.277 160.72140810000002 3.277 79.48525990000002 3.06 87.15120290000134 10.911 130.31863030000002 3.887 75.26924869999999 2.775 100.85371810000117 10.432 144.269337 3.787 153.0189526 3.94 116.32677309999869 10.911 143.0823252 13.152 138.81649480000002 8.623 152.53175360000003 4.119 118.53102330000002 12.206 84.0890919 2.886 78.5936389 2.786 80.13424780000001 2.897 103.61708120000002 2.922 82.53325219999893 10.294 114.71835669999996 2.109 82.19680249999897 10.468 143.10895090000002 13.142 117.38244770000004 3.196)
Error minima by case: (10.3845 10 2.0897 1 24.5304 2 41.7263 1 9.0 1 14.1223 1 63.0 3 4.0 1 1.1461 1 78.0 2 38.0415 2 41.9952 8 12.7063 9 38.2046 8 60.989 2 25.478 10 13.0 2 8.0 1 9.0 1 17.9755 2 7.4492 9 15.7937 1 4.4727 8 15.0717 11 35.0295 1)
Average genome size in population (length): 41.086
Average program size in population (points): 42.086
Average percent parens in population: 0.024
Minimum age in population: 16.890625
Maximum age in population: 21.090576171875
Average age in population: 19.316861328125
Median age in population: 19.3681640625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 45
Genome diversity (% unique Plush genomes):	 0.596
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 45
Syntactic diversity (% unique Push programs):	 0.596
Total error diversity:				 0.074
Error (vector) diversity:			 0.078
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 16597775
--- Timings ---
Current time: 1529616040767 milliseconds
Total Time:          46.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        19.4 seconds, 41.7%
Fitness Testing:     21.7 seconds, 46.8%
Report:               5.2 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Number IO problem report - generation 14
Test total error for best: 55521.44770000003
Test mean error for best: 27.76072
;;------------------------------
Outputs of best individual on training cases:
Correct output: -11.9430292301 | Program output: 9.0569707699  
Correct output: -36.0896817864 | Program output: -9.0896817864 
Correct output: -125.5304008101 | Program output: -31.5304008101
Correct output: -144.7263106209 | Program output: -48.7263106209
Correct output: 103.0168939816 | Program output: 90.0168939816 
Correct output: -16.1223046932 | Program output: -2.0          
Correct output: 155.9194766204 | Program output: 88.9194766204 
Correct output: 63.2567055278  | Program output: 67.2567055278 
Correct output: -30.306242645  | Program output: -2.0          
Correct output: 174.3686344101 | Program output: 92.3686344101 
Correct output: 129.041505579  | Program output: 35.041505579  
Correct output: 50.0047772031  | Program output: -2.0          
Correct output: -69.2937213159 | Program output: 9.7062786841  
Correct output: -38.6366450081 | Program output: 35.3633549919 
Correct output: -153.9889639244 | Program output: -67.9889639244
Correct output: -29.5219532451 | Program output: 22.4780467549 
Correct output: 61.9720188814  | Program output: 74.9720188814 
Correct output: 22.8390413755  | Program output: 30.8390413755 
Correct output: 50.8075713719  | Program output: 59.8075713719 
Correct output: 22.9754753134  | Program output: 57.9754753134 
Correct output: 15.5507980181  | Program output: -2.0          
Correct output: 20.7937377708  | Program output: 67.7937377708 
Correct output: 10.4727220987  | Program output: -2.0          
Correct output: -66.9282665154 | Program output: 12.0717334846 
Correct output: -91.0294909522 | Program output: -42.0294909522
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_rot} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction in2} {:instruction integer_max} {:instruction integer_dec} {:instruction integer_dup} {:instruction integer_dec} {:instruction float_sub} {:instruction float_div} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_flush} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction float_rot} {:instruction integer_inc} {:instruction float_yankdup} {:instruction integer_pop} {:instruction in1} {:instruction float_max} {:instruction 97} {:instruction float_yank} {:instruction integer_sub} {:instruction float_dup} {:instruction integer_max} {:instruction float_tan} {:instruction float_rot} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_min} {:instruction integer_dup_items} {:instruction print_integer} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_flush} {:instruction float_min} {:instruction tag_integer_503} {:instruction integer_flush} {:instruction print_float})
Best program: (integer_div float_mult float_rot integer_yankdup float_yankdup in2 integer_max integer_dec integer_dup integer_dec float_sub float_div integer_mod integer_dup_times float_flush float_rot float_frominteger float_frominteger float_rot integer_inc float_yankdup integer_pop in1 float_max 97 float_yank integer_sub float_dup integer_max float_tan float_rot float_pop float_min integer_dup_items float_min integer_dup_items print_integer float_inc integer_rot integer_dec float_dec float_dec integer_flush float_swap integer_rot integer_dec float_dec float_dec integer_flush integer_flush float_min tag_integer_503 integer_flush print_float)
Errors: [21.0 13 27.0 2 94.0 3 96.0 2 13.0 2 14.1223 11 67.0 3 4.0 1 28.3062 10 82.0 3 94.0 3 52.0048 11 79.0 12 74.0 9 86.0 3 52.0 12 13.0 2 8.0 2 9.0 1 35.0 2 17.5508 11 47.0 2 12.4727 11 79.0 13 49.0 2]
Total: 1299.4568000000002
Mean: 25.989136
Genome size: 54
Size: 55
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 3446.0242437000106
Median total errors in population: 1326.4568000000002
Error averages by case: (107.98592750000002 11.847 113.5920563999999 3.156 174.6031186 3.745 177.44611719999997 3.705 98.18862980000007 3.869 104.86288730000139 11.325 149.84143350000002 4.377 95.7917525 2.916 118.3206383000018 10.205 163.60708179999992 3.955 170.17190980000007 4.432 133.05920999999879 10.652 159.5038855 13.114 155.18787979999996 9.166 169.72947350000004 4.237 135.65658560000006 12.238 103.95614239999995 3.349 97.98886500000003 2.974 100.68617970000003 3.348 121.64512840000003 3.387 99.88623389999898 10.654 132.4075231999999 2.95 100.25440969999906 10.662 159.39721770000006 13.131 135.2659566000001 3.594)
Error minima by case: (7.5625 10 3.0897 1 25.5304 2 42.7263 1 4.0169 2 11.7418 1 30.9195 3 4.0 1 25.9257 2 19.3686 2 23.313 2 31.0048 8 12.7063 9 11.1094 8 61.989 2 1.9947 8 13.0 2 8.0 1 9.0 1 6.0726 2 6.4492 8 20.5314 1 4.4727 8 15.0717 9 36.0295 1)
Average genome size in population (length): 43.334
Average program size in population (points): 44.334
Average percent parens in population: 0.023
Minimum age in population: 18.74658203125
Maximum age in population: 22.3531494140625
Average age in population: 20.72427136230469
Median age in population: 20.73828125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 95
Genome diversity (% unique Plush genomes):	 0.593
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 95
Syntactic diversity (% unique Push programs):	 0.593
Total error diversity:				 0.081
Error (vector) diversity:			 0.085
Behavioral diversity:				 0.085
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 17687875
--- Timings ---
Current time: 1529616043813 milliseconds
Total Time:          49.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        20.7 seconds, 41.9%
Fitness Testing:     23.1 seconds, 46.6%
Report:               5.6 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Number IO problem report - generation 15
Test total error for best: 55054.08300000002
Test mean error for best: 27.52704
;;------------------------------
Outputs of best individual on training cases:
Correct output: -11.9430292301 | Program output: 7.0569707699  
Correct output: -36.0896817864 | Program output: -11.0896817864
Correct output: -125.5304008101 | Program output: -33.5304008101
Correct output: -144.7263106209 | Program output: -50.7263106209
Correct output: 103.0168939816 | Program output: 88.0168939816 
Correct output: -16.1223046932 | Program output: -5.0          
Correct output: 155.9194766204 | Program output: 86.9194766204 
Correct output: 63.2567055278  | Program output: 65.2567055278 
Correct output: -30.306242645  | Program output: -5.0          
Correct output: 174.3686344101 | Program output: 90.3686344101 
Correct output: 129.041505579  | Program output: 33.041505579  
Correct output: 50.0047772031  | Program output: -5.0          
Correct output: -69.2937213159 | Program output: 7.7062786841  
Correct output: -38.6366450081 | Program output: 33.3633549919 
Correct output: -153.9889639244 | Program output: -69.9889639244
Correct output: -29.5219532451 | Program output: 20.4780467549 
Correct output: 61.9720188814  | Program output: 72.9720188814 
Correct output: 22.8390413755  | Program output: 28.8390413755 
Correct output: 50.8075713719  | Program output: 57.8075713719 
Correct output: 22.9754753134  | Program output: 55.9754753134 
Correct output: 15.5507980181  | Program output: -5.0          
Correct output: 20.7937377708  | Program output: 65.7937377708 
Correct output: 10.4727220987  | Program output: -5.0          
Correct output: -66.9282665154 | Program output: 10.0717334846 
Correct output: -91.0294909522 | Program output: -44.0294909522
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_rot} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction in2} {:instruction integer_max} {:instruction integer_dec} {:instruction integer_dup} {:instruction integer_dec} {:instruction float_sub} {:instruction float_div} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_flush} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction float_rot} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_pop} {:instruction in1} {:instruction float_max} {:instruction 97} {:instruction float_yank} {:instruction integer_sub} {:instruction float_dup} {:instruction integer_max} {:instruction float_tan} {:instruction float_rot} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_min} {:instruction integer_dup_items} {:instruction print_integer} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction tag_integer_503} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_swap} {:instruction tag_integer_503} {:instruction integer_flush} {:instruction print_float})
Best program: (integer_div float_mult float_rot integer_yankdup float_yankdup in2 integer_max integer_dec integer_dup integer_dec float_sub float_div integer_mod integer_dup_times float_flush float_rot float_frominteger float_frominteger float_rot float_dec float_yankdup integer_pop in1 float_max 97 float_yank integer_sub float_dup integer_max float_tan float_rot float_pop float_min integer_dup_items float_min integer_dup_items print_integer float_inc integer_rot integer_dec float_dec float_dec integer_flush float_swap tag_integer_503 float_dec float_dec integer_flush float_swap integer_dec float_dec float_dec integer_div float_swap tag_integer_503 integer_flush print_float)
Errors: [19.0 13 25.0 2 92.0 3 94.0 3 15.0 3 11.1223 11 69.0 3 2.0 1 25.3062 10 84.0 3 96.0 3 55.0048 11 77.0 13 72.0 9 84.0 3 50.0 12 11.0 2 6.0 1 7.0 1 33.0 2 20.5508 10 45.0 2 15.4727 11 77.0 13 47.0 2]
Total: 1279.4568000000002
Mean: 25.589136
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3399.9640421000113
Median total errors in population: 1317.4568000000002
Error averages by case: (104.39037080000001 11.577 109.86726059999994 3.397 170.4447194 3.749 173.27697610000004 3.565 99.23863480000006 4.232 103.8127299000014 11.19 152.2938165 4.407 91.41422629999998 2.542 119.26334250000181 9.962 166.69761599999998 3.768 174.03127290000003 4.443 137.65851319999862 10.75 155.96816780000006 12.901 151.6902709 9.451 165.1290543 3.871 132.04955350000003 12.129 99.87007679999998 3.326 93.08558930000004 2.719 96.17812340000003 3.191 118.08580680000003 3.358 102.72944729999874 10.933 127.44883989999994 3.317 103.7419552999989 10.531 155.751419 12.995 130.17025880000003 3.372)
Error minima by case: (4.3241 9 1.0897 1 23.5304 2 40.7263 1 7.0169 2 11.1223 1 63.0 3 2.0 1 25.3062 1 78.0 2 39.0415 2 31.6387 8 11.7063 9 37.2046 8 59.989 2 24.478 9 11.0 2 4.473 1 7.0 1 4.6094 2 2.8153 9 2.4277 1 0.5271 9 14.0717 9 34.0295 1)
Average genome size in population (length): 47.709
Average program size in population (points): 48.709
Average percent parens in population: 0.021
Minimum age in population: 19.818359375
Maximum age in population: 23.94171142578125
Average age in population: 22.08488134765625
Median age in population: 22.1414794921875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 93
Genome diversity (% unique Plush genomes):	 0.618
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 93
Syntactic diversity (% unique Push programs):	 0.618
Total error diversity:				 0.083
Error (vector) diversity:			 0.089
Behavioral diversity:				 0.089
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 18881025
--- Timings ---
Current time: 1529616046967 milliseconds
Total Time:          52.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        22.1 seconds, 42.0%
Fitness Testing:     24.4 seconds, 46.4%
Report:               6.0 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Number IO problem report - generation 16
Test total error for best: 54971.20630000003
Test mean error for best: 27.48560
;;------------------------------
Outputs of best individual on training cases:
Correct output: -11.9430292301 | Program output: 6.0569707699  
Correct output: -36.0896817864 | Program output: -12.0896817864
Correct output: -125.5304008101 | Program output: -34.5304008101
Correct output: -144.7263106209 | Program output: -51.7263106209
Correct output: 103.0168939816 | Program output: 87.0168939816 
Correct output: -16.1223046932 | Program output: -5.0          
Correct output: 155.9194766204 | Program output: 85.9194766204 
Correct output: 63.2567055278  | Program output: 64.2567055278 
Correct output: -30.306242645  | Program output: -5.0          
Correct output: 174.3686344101 | Program output: 89.3686344101 
Correct output: 129.041505579  | Program output: 32.041505579  
Correct output: 50.0047772031  | Program output: -5.0          
Correct output: -69.2937213159 | Program output: 6.7062786841  
Correct output: -38.6366450081 | Program output: 32.3633549919 
Correct output: -153.9889639244 | Program output: -70.9889639244
Correct output: -29.5219532451 | Program output: 19.4780467549 
Correct output: 61.9720188814  | Program output: 71.9720188814 
Correct output: 22.8390413755  | Program output: 27.8390413755 
Correct output: 50.8075713719  | Program output: 56.8075713719 
Correct output: 22.9754753134  | Program output: 54.9754753134 
Correct output: 15.5507980181  | Program output: -5.0          
Correct output: 20.7937377708  | Program output: 64.7937377708 
Correct output: 10.4727220987  | Program output: -5.0          
Correct output: -66.9282665154 | Program output: 9.0717334846  
Correct output: -91.0294909522 | Program output: -45.0294909522
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_rot} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction in2} {:instruction integer_max} {:instruction integer_dec} {:instruction integer_dup} {:instruction integer_dec} {:instruction float_sub} {:instruction float_div} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_flush} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction float_rot} {:instruction integer_pop} {:instruction in1} {:instruction float_max} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_flush} {:instruction float_min} {:instruction tag_integer_503} {:instruction print_integer} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction tag_integer_503} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction tag_integer_503} {:instruction integer_flush} {:instruction print_float})
Best program: (integer_div float_mult float_rot integer_yankdup float_yankdup in2 integer_max integer_dec integer_dup integer_dec float_sub float_div integer_mod integer_dup_times float_flush float_rot float_frominteger float_frominteger float_rot integer_pop in1 float_max float_inc integer_rot integer_dec float_dec float_dec integer_flush float_swap integer_rot integer_dec float_dec float_dec integer_flush integer_flush float_min tag_integer_503 print_integer float_inc integer_rot integer_dec float_dec float_dec integer_flush float_swap tag_integer_503 float_dec float_dec integer_flush float_swap tag_integer_503 integer_flush print_float)
Errors: [18.0 13 24.0 2 91.0 3 93.0 3 16.0 3 11.1223 11 70.0 2 1.0 1 25.3062 10 85.0 3 97.0 2 55.0048 11 76.0 12 71.0 9 83.0 3 49.0 12 10.0 1 5.0 1 6.0 1 32.0 2 20.5508 10 44.0 2 15.4727 11 76.0 13 46.0 2]
Total: 1263.4568000000002
Mean: 25.269136
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 3011.473902600013
Median total errors in population: 1309.4568000000002
Error averages by case: (86.32295849999998 12.114 93.60979609999993 3.289 155.30947589999997 3.985 158.2874744 3.42 87.45945160000007 3.989 86.89932570000138 10.674 139.4810875 4.346 75.8654464 2.475 100.92649940000176 9.817 153.63756079999996 4.043 159.711569 4.309 121.28575389999844 11.041 139.41103930000003 12.596 135.5388278 9.436 150.53564700000007 4.078 115.82951460000007 12.063 84.29435290000002 3.274 77.05004310000001 3.008 79.81990130000001 2.75 102.09656109999999 3.323 87.23735669999878 10.896 112.85111269999993 3.332 87.31109079999905 10.785 140.0856161 12.918 115.53544000000007 3.12)
Error minima by case: (7.3845 9 0.0897 1 22.5304 2 39.7263 1 4.0169 2 9.9373 1 1.9252 2 0.0 0 24.1212 1 10.4509 2 35.0415 2 7.0096 8 12.7063 9 23.9665 8 35.5614 2 25.478 9 4.245 1 1.5846 1 5.0 1 1.4481 2 1.3442 8 3.6299 1 4.4727 8 15.0717 8 18.3094 1)
Average genome size in population (length): 50.643
Average program size in population (points): 51.643
Average percent parens in population: 0.020
Minimum age in population: 21.55462646484375
Maximum age in population: 25.35760498046875
Average age in population: 23.64485916137695
Median age in population: 23.7012939453125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 60
Genome diversity (% unique Plush genomes):	 0.66
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 60
Syntactic diversity (% unique Push programs):	 0.66
Total error diversity:				 0.107
Error (vector) diversity:			 0.115
Behavioral diversity:				 0.115
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 20147125
--- Timings ---
Current time: 1529616050130 milliseconds
Total Time:          55.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        23.4 seconds, 42.0%
Fitness Testing:     25.9 seconds, 46.4%
Report:               6.4 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Number IO problem report - generation 17
Test total error for best: 54617.86230000002
Test mean error for best: 27.30893
;;------------------------------
Outputs of best individual on training cases:
Correct output: -11.9430292301 | Program output: 4.0569707699  
Correct output: -36.0896817864 | Program output: -14.0896817864
Correct output: -125.5304008101 | Program output: -36.5304008101
Correct output: -144.7263106209 | Program output: -53.7263106209
Correct output: 103.0168939816 | Program output: 85.0168939816 
Correct output: -16.1223046932 | Program output: -7.0          
Correct output: 155.9194766204 | Program output: 83.9194766204 
Correct output: 63.2567055278  | Program output: 62.2567055278 
Correct output: -30.306242645  | Program output: -7.0          
Correct output: 174.3686344101 | Program output: 87.3686344101 
Correct output: 129.041505579  | Program output: 30.041505579  
Correct output: 50.0047772031  | Program output: -7.0          
Correct output: -69.2937213159 | Program output: 4.7062786841  
Correct output: -38.6366450081 | Program output: 30.3633549919 
Correct output: -153.9889639244 | Program output: -72.9889639244
Correct output: -29.5219532451 | Program output: 17.4780467549 
Correct output: 61.9720188814  | Program output: 69.9720188814 
Correct output: 22.8390413755  | Program output: 25.8390413755 
Correct output: 50.8075713719  | Program output: 54.8075713719 
Correct output: 22.9754753134  | Program output: 52.9754753134 
Correct output: 15.5507980181  | Program output: -7.0          
Correct output: 20.7937377708  | Program output: 62.7937377708 
Correct output: 10.4727220987  | Program output: -7.0          
Correct output: -66.9282665154 | Program output: 7.0717334846  
Correct output: -91.0294909522 | Program output: -47.0294909522
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_rot} {:instruction float_div} {:instruction float_yankdup} {:instruction in2} {:instruction integer_max} {:instruction integer_dec} {:instruction integer_dup} {:instruction integer_dec} {:instruction float_sub} {:instruction float_div} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_flush} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_rot} {:instruction integer_inc} {:instruction float_yankdup} {:instruction integer_pop} {:instruction in1} {:instruction float_max} {:instruction 97} {:instruction float_yank} {:instruction integer_sub} {:instruction float_dup} {:instruction integer_max} {:instruction float_tan} {:instruction float_rot} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_min} {:instruction integer_dup_items} {:instruction print_integer} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction tag_integer_503} {:instruction integer_flush} {:instruction print_float})
Best program: (integer_div float_mult float_rot float_div float_yankdup in2 integer_max integer_dec integer_dup integer_dec float_sub float_div integer_mod integer_dup_times float_flush float_rot float_frominteger float_rot integer_inc float_yankdup integer_pop in1 float_max 97 float_yank integer_sub float_dup integer_max float_tan float_rot float_pop float_min integer_dup_items float_min integer_dup_items print_integer float_inc integer_rot integer_dec float_dec float_dec integer_flush float_swap integer_rot integer_dec float_dec float_dec integer_flush integer_flush float_swap integer_dec float_dec float_dec integer_flush float_dec float_dec integer_flush float_dec integer_flush float_swap tag_integer_503 integer_flush print_float)
Errors: [16.0 13 22.0 2 89.0 3 91.0 3 18.0 3 9.1223 11 72.0 3 1.0 1 23.3062 10 87.0 2 99.0 3 57.0048 11 74.0 13 69.0 9 81.0 3 47.0 13 8.0 1 3.0 1 4.0 1 30.0 1 22.5508 11 42.0 2 17.4727 11 74.0 13 44.0 2]
Total: 1246.4568000000002
Mean: 24.929136
Genome size: 63
Size: 64
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3009.202873100011
Median total errors in population: 1299.4568000000002
Error averages by case: (85.62953050000002 12.824 92.83894729999996 3.305 154.58868980000008 4.146 157.37825589999997 3.474 89.29348520000003 3.816 86.41292350000117 10.63 139.90633030000006 4.393 76.01661160000002 2.513 99.46839470000135 9.681 154.11706859999998 4.376 159.57876120000012 4.352 122.6546052999985 11.213 139.0186647000001 12.298 134.68393289999992 9.486 149.39971110000008 4.34 114.99830640000002 12.043 84.57669739999999 3.335 77.16868809999997 3.135 79.91709940000003 2.525 101.10738430000006 3.375 88.99592329999898 11.001 111.96367839999986 3.402 88.74129689999906 11.028 139.4561749 12.936 114.39871140000004 3.266)
Error minima by case: (4.3241 9 0.0897 1 22.5304 2 39.7263 1 9.0 2 9.1223 2 33.0 2 0.0 0 23.3062 1 18.0 2 6.0 2 9.5245 8 14.7063 8 23.9665 8 31.011 2 24.324 8 4.1373 1 3.0 1 4.0 1 6.6094 1 1.4492 8 4.4277 1 7.4727 8 17.0717 8 7.2335 1)
Average genome size in population (length): 53.593
Average program size in population (points): 54.593
Average percent parens in population: 0.018
Minimum age in population: 22.85009765625
Maximum age in population: 26.88192749023438
Average age in population: 25.0921410369873
Median age in population: 25.13521575927734
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 64
Genome diversity (% unique Plush genomes):	 0.665
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 64
Syntactic diversity (% unique Push programs):	 0.665
Total error diversity:				 0.095
Error (vector) diversity:			 0.099
Behavioral diversity:				 0.1
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 21486950
--- Timings ---
Current time: 1529616053392 milliseconds
Total Time:          59.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        24.8 seconds, 42.0%
Fitness Testing:     27.3 seconds, 46.3%
Report:               6.7 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Number IO problem report - generation 18
Test total error for best: 54158.248200000024
Test mean error for best: 27.07912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -11.9430292301 | Program output: 1.0569707699  
Correct output: -36.0896817864 | Program output: -17.0896817864
Correct output: -125.5304008101 | Program output: -39.5304008101
Correct output: -144.7263106209 | Program output: -56.7263106209
Correct output: 103.0168939816 | Program output: 82.0168939816 
Correct output: -16.1223046932 | Program output: -9.0          
Correct output: 155.9194766204 | Program output: 80.9194766204 
Correct output: 63.2567055278  | Program output: 59.2567055278 
Correct output: -30.306242645  | Program output: -9.0          
Correct output: 174.3686344101 | Program output: 84.3686344101 
Correct output: 129.041505579  | Program output: 27.041505579  
Correct output: 50.0047772031  | Program output: -9.0          
Correct output: -69.2937213159 | Program output: 1.7062786841  
Correct output: -38.6366450081 | Program output: 27.3633549919 
Correct output: -153.9889639244 | Program output: -75.9889639244
Correct output: -29.5219532451 | Program output: 14.4780467549 
Correct output: 61.9720188814  | Program output: 66.9720188814 
Correct output: 22.8390413755  | Program output: 22.8390413755 
Correct output: 50.8075713719  | Program output: 51.8075713719 
Correct output: 22.9754753134  | Program output: 49.9754753134 
Correct output: 15.5507980181  | Program output: -9.0          
Correct output: 20.7937377708  | Program output: 59.7937377708 
Correct output: 10.4727220987  | Program output: -9.0          
Correct output: -66.9282665154 | Program output: 4.0717334846  
Correct output: -91.0294909522 | Program output: -50.0294909522
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_rot} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction in2} {:instruction integer_max} {:instruction integer_dec} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_dec} {:instruction float_sub} {:instruction float_div} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_flush} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction float_rot} {:instruction integer_inc} {:instruction float_yankdup} {:instruction integer_pop} {:instruction in1} {:instruction float_max} {:instruction 97} {:instruction float_yank} {:instruction integer_sub} {:instruction float_dup} {:instruction integer_max} {:instruction float_tan} {:instruction float_rot} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction tag_integer_449} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction tag_integer_503} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_flush} {:instruction float_swap} {:instruction tag_integer_503} {:instruction integer_flush} {:instruction print_float})
Best program: (integer_div float_mult float_rot integer_yankdup float_yankdup in2 integer_max integer_dec integer_dup integer_dec integer_dec float_sub float_div integer_mod integer_dup_times float_flush float_rot float_frominteger float_frominteger float_rot integer_inc float_yankdup integer_pop in1 float_max 97 float_yank integer_sub float_dup integer_max float_tan float_rot float_pop float_min integer_dup_items float_min integer_dup_items float_dec float_dec integer_flush float_dec integer_flush float_swap tag_integer_449 integer_dec float_dec float_dec integer_flush float_swap tag_integer_503 integer_flush float_dec float_dec integer_rot integer_dec float_dec float_dec integer_flush float_swap integer_rot integer_dec float_dec float_dec integer_flush integer_flush float_swap tag_integer_503 integer_flush print_float)
Errors: [13.0 12 19.0 2 86.0 3 88.0 3 21.0 3 7.1223 11 75.0 3 4.0 2 21.3062 10 90.0 2 102.0 2 59.0048 11 71.0 13 66.0 10 78.0 2 44.0 13 5.0 1 0.0 0 1.0 1 27.0 2 24.5508 11 39.0 2 19.4727 11 71.0 13 41.0 2]
Total: 1217.4568000000002
Mean: 24.349136
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2964.3369670000134
Median total errors in population: 1287.4568000000002
Error averages by case: (83.03870710000002 12.87 89.51656869999997 3.248 151.2313980000001 3.845 154.04649759999992 3.644 90.63135710000007 4.152 87.01367780000125 10.653 141.57072749999998 4.275 72.48044679999997 2.45 99.68588020000135 9.523 155.17015339999995 4.345 161.23051660000013 4.315 124.24814629999867 11.214 135.3553345000001 12.574 130.8756083 9.445 146.09610240000004 4.287 111.07461290000005 12.1 80.91372599999998 3.206 73.32068260000003 2.682 76.1375016 2.493 97.60489540000003 3.312 90.50636489999897 10.89 108.9643984999999 3.37 90.66412029999906 11.018 135.41930929999998 12.943 111.40423320000005 3.282)
Error minima by case: (0.2084 9 0.0897 1 20.5304 2 37.7263 1 8.0169 2 6.9373 2 33.0 2 0.0 0 21.1212 1 18.0 2 6.0 1 7.465 9 9.7208 8 20.9362 8 30.011 2 22.8817 9 4.5023 1 0.0 0 1.0 1 9.3987 1 1.4492 8 7.217 1 6.4727 8 7.3554 9 18.9705 1)
Average genome size in population (length): 55.073
Average program size in population (points): 56.073
Average percent parens in population: 0.018
Minimum age in population: 24.51747131347656
Maximum age in population: 28.58548736572266
Average age in population: 26.53752803039551
Median age in population: 26.5799560546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.66
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.66
Total error diversity:				 0.128
Error (vector) diversity:			 0.132
Behavioral diversity:				 0.133
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 22863800
--- Timings ---
Current time: 1529616056724 milliseconds
Total Time:          62.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.2 seconds, 42.1%
Fitness Testing:     28.8 seconds, 46.2%
Report:               7.2 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Number IO problem report - generation 19
Test total error for best: 53912.138000000006
Test mean error for best: 26.95607
;;------------------------------
Outputs of best individual on training cases:
Correct output: -11.9430292301 | Program output: -0.9430292301 
Correct output: -36.0896817864 | Program output: -19.0896817864
Correct output: -125.5304008101 | Program output: -41.5304008101
Correct output: -144.7263106209 | Program output: -58.7263106209
Correct output: 103.0168939816 | Program output: 80.0168939816 
Correct output: -16.1223046932 | Program output: -11.0         
Correct output: 155.9194766204 | Program output: 78.9194766204 
Correct output: 63.2567055278  | Program output: 57.2567055278 
Correct output: -30.306242645  | Program output: -11.0         
Correct output: 174.3686344101 | Program output: 82.3686344101 
Correct output: 129.041505579  | Program output: 25.041505579  
Correct output: 50.0047772031  | Program output: -11.0         
Correct output: -69.2937213159 | Program output: -0.2937213159 
Correct output: -38.6366450081 | Program output: 25.3633549919 
Correct output: -153.9889639244 | Program output: -77.9889639244
Correct output: -29.5219532451 | Program output: 12.4780467549 
Correct output: 61.9720188814  | Program output: 64.9720188814 
Correct output: 22.8390413755  | Program output: 20.8390413755 
Correct output: 50.8075713719  | Program output: 49.8075713719 
Correct output: 22.9754753134  | Program output: 47.9754753134 
Correct output: 15.5507980181  | Program output: -11.0         
Correct output: 20.7937377708  | Program output: 57.7937377708 
Correct output: 10.4727220987  | Program output: -11.0         
Correct output: -66.9282665154 | Program output: 2.0717334846  
Correct output: -91.0294909522 | Program output: -52.0294909522
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_rot} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction in2} {:instruction integer_max} {:instruction integer_dec} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_dec} {:instruction float_sub} {:instruction float_div} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_flush} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction float_rot} {:instruction integer_inc} {:instruction float_yankdup} {:instruction integer_pop} {:instruction in1} {:instruction float_max} {:instruction 97} {:instruction float_yank} {:instruction integer_sub} {:instruction float_dup} {:instruction integer_max} {:instruction float_tan} {:instruction float_rot} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction tag_integer_449} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction tag_integer_503} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_flush} {:instruction float_swap} {:instruction tag_integer_503} {:instruction integer_flush} {:instruction print_float})
Best program: (integer_div float_mult float_rot integer_yankdup float_yankdup in2 integer_max integer_dec integer_dup integer_dec integer_dec float_sub float_div integer_mod integer_dup_times float_flush float_rot float_frominteger float_frominteger float_rot integer_inc float_yankdup integer_pop in1 float_max 97 float_yank integer_sub float_dup integer_max float_tan float_rot float_pop float_min integer_dup_items float_min integer_dup_items float_dec float_dec float_min integer_dup_items float_dec float_dec integer_flush float_dec integer_flush float_swap tag_integer_449 integer_dec float_dec float_dec integer_flush float_swap tag_integer_503 integer_flush float_dec float_dec integer_rot integer_dec float_dec float_dec integer_flush float_swap integer_rot integer_dec float_dec float_dec integer_flush integer_flush float_swap tag_integer_503 integer_flush print_float)
Errors: [11.0 2 17.0 2 84.0 3 86.0 3 23.0 2 5.1223 10 77.0 3 6.0 2 19.3062 10 92.0 3 104.0 2 61.0048 12 69.0 2 64.0 10 76.0 3 42.0 12 3.0 1 2.0 1 1.0 2 25.0 2 26.5508 11 37.0 2 21.4727 11 69.0 13 39.0 2]
Total: 1186.4568000000002
Mean: 23.729136
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2837.287372200015
Median total errors in population: 1263.4568000000002
Error averages by case: (78.99619360000001 12.869 85.28718230000001 3.178 147.22439000000003 3.934 150.04642039999996 4.016 84.21258630000007 4.21 77.03731120000121 10.606 134.22850470000003 3.91 68.92529260000002 2.253 91.05972630000137 9.677 148.40898929999997 4.165 154.2192032000001 3.988 117.71479239999877 11.169 132.17522510000003 12.512 127.7593204 9.448 142.00647920000006 4.203 107.88833440000002 12.289 77.12702549999997 2.836 69.77281300000001 2.385 72.4574115 2.389 94.44312170000003 3.182 83.94292009999911 10.657 104.97689769999992 3.269 83.89308509999907 11.042 132.1657651 12.933 106.98138110000001 3.217)
Error minima by case: (4.1248 2 0.0897 1 18.5304 2 35.7263 1 6.0169 2 5.1223 1 19.9195 2 0.0 0 19.3062 1 8.3686 2 1.0 1 33.9952 8 15.7063 2 30.4607 8 16.011 2 21.7037 9 3.0 1 0.0 0 1.0 1 4.0 1 0.4492 8 4.0 1 7.4727 9 18.0717 9 4.9705 1)
Average genome size in population (length): 57.544
Average program size in population (points): 58.544
Average percent parens in population: 0.017
Minimum age in population: 25.51747131347656
Maximum age in population: 29.8615837097168
Average age in population: 27.90675304412842
Median age in population: 27.95128631591797
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 52
Genome diversity (% unique Plush genomes):	 0.69
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 52
Syntactic diversity (% unique Push programs):	 0.69
Total error diversity:				 0.116
Error (vector) diversity:			 0.123
Behavioral diversity:				 0.123
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 24302400
--- Timings ---
Current time: 1529616060054 milliseconds
Total Time:          65.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        27.5 seconds, 42.0%
Fitness Testing:     30.3 seconds, 46.2%
Report:               7.6 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Number IO problem report - generation 20
Test total error for best: 53880.9743
Test mean error for best: 26.94049
;;------------------------------
Outputs of best individual on training cases:
Correct output: -11.9430292301 | Program output: -1.9430292301 
Correct output: -36.0896817864 | Program output: -20.0896817864
Correct output: -125.5304008101 | Program output: -42.5304008101
Correct output: -144.7263106209 | Program output: -59.7263106209
Correct output: 103.0168939816 | Program output: 79.0168939816 
Correct output: -16.1223046932 | Program output: -13.0         
Correct output: 155.9194766204 | Program output: 77.9194766204 
Correct output: 63.2567055278  | Program output: 56.2567055278 
Correct output: -30.306242645  | Program output: -13.0         
Correct output: 174.3686344101 | Program output: 81.3686344101 
Correct output: 129.041505579  | Program output: 24.041505579  
Correct output: 50.0047772031  | Program output: -13.0         
Correct output: -69.2937213159 | Program output: -1.2937213159 
Correct output: -38.6366450081 | Program output: 24.3633549919 
Correct output: -153.9889639244 | Program output: -78.9889639244
Correct output: -29.5219532451 | Program output: 11.4780467549 
Correct output: 61.9720188814  | Program output: 63.9720188814 
Correct output: 22.8390413755  | Program output: 19.8390413755 
Correct output: 50.8075713719  | Program output: 48.8075713719 
Correct output: 22.9754753134  | Program output: 46.9754753134 
Correct output: 15.5507980181  | Program output: -13.0         
Correct output: 20.7937377708  | Program output: 56.7937377708 
Correct output: 10.4727220987  | Program output: -13.0         
Correct output: -66.9282665154 | Program output: 1.0717334846  
Correct output: -91.0294909522 | Program output: -53.0294909522
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_rot} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction in2} {:instruction integer_max} {:instruction integer_dec} {:instruction integer_dup} {:instruction integer_dec} {:instruction float_sub} {:instruction float_div} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_flush} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_rot} {:instruction integer_inc} {:instruction float_yankdup} {:instruction integer_pop} {:instruction in1} {:instruction float_max} {:instruction 97} {:instruction float_yank} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction print_integer} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction tag_integer_503} {:instruction integer_flush} {:instruction print_float})
Best program: (integer_div float_mult float_rot integer_yankdup float_yankdup in2 integer_max integer_dec integer_dup integer_dec float_sub float_div integer_mod integer_dup_times float_flush float_rot float_frominteger float_rot integer_inc float_yankdup integer_pop in1 float_max 97 float_yank integer_sub integer_rot integer_dec float_dec float_dec integer_flush float_swap integer_rot integer_dec float_dec integer_dup_items float_min integer_dup_items float_dec float_dec integer_flush float_dec integer_flush float_swap float_dec float_dec integer_flush float_dec integer_flush print_integer float_inc integer_rot integer_dec float_dec float_dec integer_flush float_dec integer_dec float_dec float_dec integer_flush float_dec integer_flush float_swap tag_integer_503 integer_flush print_float)
Errors: [10.0 1 16.0 2 83.0 2 85.0 3 24.0 3 3.1223 10 78.0 3 7.0 2 17.3062 10 93.0 3 105.0 2 63.0048 12 68.0 2 63.0 10 75.0 3 41.0 13 2.0 1 3.0 2 2.0 2 24.0 2 28.5508 11 36.0 2 23.4727 11 68.0 13 38.0 2]
Total: 1183.4568000000002
Mean: 23.669136
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3030.9839546000157
Median total errors in population: 1255.4568000000002
Error averages by case: (86.93243030000001 12.714 92.63182550000003 3.359 153.72580210000007 4.079 156.66320349999995 4.281 94.40437050000008 4.396 82.47878060000124 10.442 144.133367 4.312 78.54431179999996 2.424 95.87373200000124 9.729 158.29742869999995 4.198 163.49875479999997 4.119 125.3889744999988 11.233 138.56489370000008 12.59 134.49656579999998 9.629 149.00303270000006 4.329 114.92713010000006 12.713 84.98652469999996 2.949 77.88376810000001 2.544 80.6332715 2.622 101.73052840000003 3.238 91.52093509999891 10.778 112.5207611999999 3.437 91.89822169999907 11.043 138.55466660000002 12.886 114.23367370000004 3.413)
Error minima by case: (0.3845 1 0.0897 1 15.5304 2 32.7263 1 6.0169 2 1.9373 1 36.9195 2 0.0 0 7.3029 1 25.3686 2 32.0415 1 31.9952 8 3.9898 2 15.6333 8 51.989 2 6.5186 7 2.0 1 0.0 0 0.0 0 10.6094 1 0.4492 8 8.4277 1 8.4727 9 6.3553 9 17.746 1)
Average genome size in population (length): 60.316
Average program size in population (points): 61.316
Average percent parens in population: 0.016
Minimum age in population: 26.82436752319336
Maximum age in population: 31.51201438903809
Average age in population: 29.25878404808044
Median age in population: 29.3190279006958
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.749
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.749
Total error diversity:				 0.131
Error (vector) diversity:			 0.137
Behavioral diversity:				 0.137
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 25810300
--- Timings ---
Current time: 1529616063397 milliseconds
Total Time:          69.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.9 seconds, 41.9%
Fitness Testing:     31.8 seconds, 46.1%
Report:               8.1 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Number IO problem report - generation 21
Test total error for best: 53659.52469999997
Test mean error for best: 26.82976
;;------------------------------
Outputs of best individual on training cases:
Correct output: -11.9430292301 | Program output: -8.9430292301 
Correct output: -36.0896817864 | Program output: -27.0896817864
Correct output: -125.5304008101 | Program output: -49.5304008101
Correct output: -144.7263106209 | Program output: -66.7263106209
Correct output: 103.0168939816 | Program output: 72.0168939816 
Correct output: -16.1223046932 | Program output: -20.0         
Correct output: 155.9194766204 | Program output: 70.9194766204 
Correct output: 63.2567055278  | Program output: 49.2567055278 
Correct output: -30.306242645  | Program output: -20.0         
Correct output: 174.3686344101 | Program output: 74.3686344101 
Correct output: 129.041505579  | Program output: 17.041505579  
Correct output: 50.0047772031  | Program output: -20.0         
Correct output: -69.2937213159 | Program output: -8.2937213159 
Correct output: -38.6366450081 | Program output: 17.3633549919 
Correct output: -153.9889639244 | Program output: -85.9889639244
Correct output: -29.5219532451 | Program output: 4.4780467549  
Correct output: 61.9720188814  | Program output: 56.9720188814 
Correct output: 22.8390413755  | Program output: 12.8390413755 
Correct output: 50.8075713719  | Program output: 41.8075713719 
Correct output: 22.9754753134  | Program output: 39.9754753134 
Correct output: 15.5507980181  | Program output: -20.0         
Correct output: 20.7937377708  | Program output: 49.7937377708 
Correct output: 10.4727220987  | Program output: -20.0         
Correct output: -66.9282665154 | Program output: -5.9282665154 
Correct output: -91.0294909522 | Program output: -60.0294909522
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_rot} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction in2} {:instruction integer_max} {:instruction integer_dec} {:instruction integer_dup} {:instruction integer_dec} {:instruction float_sub} {:instruction float_div} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_flush} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction float_rot} {:instruction integer_pop} {:instruction in1} {:instruction float_max} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_min} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_flush} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_flush} {:instruction float_swap} {:instruction tag_integer_503} {:instruction integer_flush} {:instruction print_float})
Best program: (integer_div float_mult float_rot integer_yankdup float_yankdup in2 integer_max integer_dec integer_dup integer_dec float_sub float_div integer_mod integer_dup_times float_flush float_rot float_frominteger float_frominteger float_rot integer_pop in1 float_max float_inc integer_rot integer_dec float_dec float_dec integer_flush float_swap integer_rot integer_dec float_dec float_dec integer_flush float_swap float_dec float_dec integer_flush float_min integer_dup_items print_integer integer_dec float_dec integer_dup_items float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec integer_flush float_swap integer_rot integer_dec float_dec float_dec integer_flush integer_flush integer_dec float_dec float_dec integer_flush float_dec float_dec integer_rot integer_dec float_dec float_dec integer_flush float_swap integer_rot integer_dec float_dec float_dec integer_flush integer_flush float_swap tag_integer_503 integer_flush print_float)
Errors: [3.0 2 9.0 2 76.0 3 78.0 3 31.0 3 3.8777 11 85.0 3 14.0 2 10.3062 9 100.0 1 112.0 2 70.0048 11 61.0 2 56.0 10 68.0 2 34.0 13 5.0 2 10.0 1 9.0 2 17.0 2 35.5508 11 29.0 2 30.4727 11 61.0 2 31.0 2]
Total: 1153.2122
Mean: 23.064243
Genome size: 81
Size: 82
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2886.6091688000156
Median total errors in population: 1235.4568000000002
Error averages by case: (80.80455630000003 11.99 86.08356110000005 3.216 147.55149029999995 4.246 150.4160123 4.144 89.78377550000005 4.074 76.18520110000118 10.406 139.69209360000005 4.258 73.97655869999996 2.697 90.62205800000099 9.68 153.79962619999995 3.883 158.43991970000016 3.839 121.3948871999988 11.293 132.9807069000001 12.178 128.60174530000003 9.9 142.6194589000001 4.03 108.75097980000007 12.889 77.28852859999999 2.52 71.06867840000007 2.244 73.18713560000002 2.462 95.04963020000001 3.122 87.649178499999 10.911 105.86296729999991 3.17 89.94141909999914 10.95 132.96634310000002 12.792 107.70265710000004 3.296)
Error minima by case: (0.3845 1 0.0897 1 13.5304 2 30.7263 1 9.0 2 1.1223 1 63.0 2 0.0 0 3.6938 1 78.0 1 40.0415 1 4.1584 9 15.7063 2 4.6366 8 49.989 2 4.478 9 0.0 0 0.0 0 0.0 0 8.8285 1 0.4492 9 11.0102 1 7.4727 8 18.0717 2 24.0295 1)
Average genome size in population (length): 64.854
Average program size in population (points): 65.854
Average percent parens in population: 0.015
Minimum age in population: 28.12184906005859
Maximum age in population: 32.7222375869751
Average age in population: 30.63862520122528
Median age in population: 30.66361951828003
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 36
Genome diversity (% unique Plush genomes):	 0.752
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.752
Total error diversity:				 0.138
Error (vector) diversity:			 0.142
Behavioral diversity:				 0.143
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 27431650
--- Timings ---
Current time: 1529616066787 milliseconds
Total Time:          72.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.3 seconds, 41.8%
Fitness Testing:     33.4 seconds, 46.2%
Report:               8.5 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Number IO problem report - generation 22
Test total error for best: 53450.206399999995
Test mean error for best: 26.72510
;;------------------------------
Outputs of best individual on training cases:
Correct output: -11.9430292301 | Program output: -6.9430292301 
Correct output: -36.0896817864 | Program output: -25.0896817864
Correct output: -125.5304008101 | Program output: -47.5304008101
Correct output: -144.7263106209 | Program output: -64.7263106209
Correct output: 103.0168939816 | Program output: 74.0168939816 
Correct output: -16.1223046932 | Program output: -17.0         
Correct output: 155.9194766204 | Program output: 72.9194766204 
Correct output: 63.2567055278  | Program output: 51.2567055278 
Correct output: -30.306242645  | Program output: -17.0         
Correct output: 174.3686344101 | Program output: 76.3686344101 
Correct output: 129.041505579  | Program output: 19.041505579  
Correct output: 50.0047772031  | Program output: -17.0         
Correct output: -69.2937213159 | Program output: -6.2937213159 
Correct output: -38.6366450081 | Program output: 19.3633549919 
Correct output: -153.9889639244 | Program output: -83.9889639244
Correct output: -29.5219532451 | Program output: 6.4780467549  
Correct output: 61.9720188814  | Program output: 58.9720188814 
Correct output: 22.8390413755  | Program output: 14.8390413755 
Correct output: 50.8075713719  | Program output: 43.8075713719 
Correct output: 22.9754753134  | Program output: 41.9754753134 
Correct output: 15.5507980181  | Program output: -17.0         
Correct output: 20.7937377708  | Program output: 51.7937377708 
Correct output: 10.4727220987  | Program output: -17.0         
Correct output: -66.9282665154 | Program output: -3.9282665154 
Correct output: -91.0294909522 | Program output: -58.0294909522
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_rot} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction in2} {:instruction integer_max} {:instruction integer_dec} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_dec} {:instruction float_sub} {:instruction float_div} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_flush} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction float_rot} {:instruction integer_inc} {:instruction float_yankdup} {:instruction integer_pop} {:instruction in1} {:instruction float_max} {:instruction 97} {:instruction float_yank} {:instruction integer_sub} {:instruction float_dup} {:instruction integer_max} {:instruction float_tan} {:instruction float_rot} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction tag_integer_449} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction tag_integer_503} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tag_integer_503} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tag_integer_503} {:instruction integer_flush} {:instruction print_float})
Best program: (integer_div float_mult float_rot integer_yankdup float_yankdup in2 integer_max integer_dec integer_dup integer_dec integer_dec float_sub float_div integer_mod integer_dup_times float_flush float_rot float_frominteger float_frominteger float_rot integer_inc float_yankdup integer_pop in1 float_max 97 float_yank integer_sub float_dup integer_max float_tan float_rot float_pop float_min integer_dup_items float_min integer_dup_items float_dec float_dec float_min integer_dup_items float_dec float_dec float_frominteger float_dec integer_flush float_swap tag_integer_449 integer_dec float_dec float_dec integer_flush float_swap tag_integer_503 integer_flush float_dec float_dec integer_rot float_dec float_dec integer_flush float_swap integer_flush float_dec float_dec integer_rot integer_dec float_dec float_dec tag_integer_503 integer_flush float_dec float_dec integer_rot integer_dec float_dec float_dec tag_integer_503 integer_flush print_float)
Errors: [5.0 2 11.0 2 78.0 3 80.0 2 29.0 3 0.8777 10 83.0 3 12.0 2 13.3062 10 98.0 2 110.0 1 67.0048 11 63.0 1 58.0 10 70.0 2 36.0 13 3.0 2 8.0 2 7.0 2 19.0 2 32.5508 11 31.0 2 27.4727 11 63.0 2 33.0 2]
Total: 1151.2122
Mean: 23.024244
Genome size: 80
Size: 81
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2781.0014025000155
Median total errors in population: 1215.4568000000002
Error averages by case: (73.86385180000002 9.016 80.19851350000005 3.182 142.33306630000004 4.15 145.0886382 4.185 89.58917030000006 3.998 71.73947830000122 10.12 139.63346350000003 4.26 71.6923736 3.093 86.4723045000009 9.643 153.9035418 3.981 157.31496920000018 3.871 120.12090009999875 11.535 127.21944640000002 9.312 122.65035939999999 10.156 137.00603010000006 3.965 102.77535960000002 12.711 71.54926430000002 2.371 66.93834389999999 2.234 69.2415743 2.563 88.84687730000002 3.224 86.58763539999867 10.902 99.74095999999994 3.169 89.46045999999913 10.889 127.0545316 12.552 101.79028910000002 3.108)
Error minima by case: (0.3181 1 0.0897 1 11.5304 2 28.7263 2 11.0 2 0.1223 1 65.0 2 0.0 0 10.3062 1 80.0 1 43.8341 1 6.6218 8 9.7063 1 19.4607 8 47.989 2 16.0911 8 0.0 0 0.0 0 0.0 0 1.3106 1 0.4492 7 3.4923 1 10.2877 8 12.0717 2 12.0295 1)
Average genome size in population (length): 70.247
Average program size in population (points): 71.247
Average percent parens in population: 0.014
Minimum age in population: 29.60239219665527
Maximum age in population: 33.92047500610352
Average age in population: 32.01267669200897
Median age in population: 32.03997230529785
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.765
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.765
Total error diversity:				 0.14
Error (vector) diversity:			 0.143
Behavioral diversity:				 0.144
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 29187825
--- Timings ---
Current time: 1529616070453 milliseconds
Total Time:          75.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        31.6 seconds, 41.6%
Fitness Testing:     35.2 seconds, 46.4%
Report:               9.0 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Number IO problem report - generation 23
Test total error for best: 49521.991
Test mean error for best: 24.76100
;;------------------------------
Outputs of best individual on training cases:
Correct output: -11.9430292301 | Program output: -5.9430292301 
Correct output: -36.0896817864 | Program output: -24.0896817864
Correct output: -125.5304008101 | Program output: -46.5304008101
Correct output: -144.7263106209 | Program output: -63.7263106209
Correct output: 103.0168939816 | Program output: 75.0168939816 
Correct output: -16.1223046932 | Program output: 0.0           
Correct output: 155.9194766204 | Program output: 73.9194766204 
Correct output: 63.2567055278  | Program output: 52.2567055278 
Correct output: -30.306242645  | Program output: 18.0          
Correct output: 174.3686344101 | Program output: 77.3686344101 
Correct output: 129.041505579  | Program output: 71.0          
Correct output: 50.0047772031  | Program output: 75.0          
Correct output: -69.2937213159 | Program output: -5.2937213159 
Correct output: -38.6366450081 | Program output: 20.3633549919 
Correct output: -153.9889639244 | Program output: -82.9889639244
Correct output: -29.5219532451 | Program output: 7.4780467549  
Correct output: 61.9720188814  | Program output: 59.9720188814 
Correct output: 22.8390413755  | Program output: 15.8390413755 
Correct output: 50.8075713719  | Program output: 44.8075713719 
Correct output: 22.9754753134  | Program output: 42.9754753134 
Correct output: 15.5507980181  | Program output: 6.0           
Correct output: 20.7937377708  | Program output: 52.7937377708 
Correct output: 10.4727220987  | Program output: 57.0          
Correct output: -66.9282665154 | Program output: -2.9282665154 
Correct output: -91.0294909522 | Program output: -57.0294909522
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_rot} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction in2} {:instruction integer_max} {:instruction integer_dec} {:instruction integer_dup} {:instruction integer_dec} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_rot} {:instruction integer_inc} {:instruction float_add} {:instruction integer_pop} {:instruction in1} {:instruction float_max} {:instruction 97} {:instruction float_yank} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_min} {:instruction float_swap} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_dup_items} {:instruction float_min} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction print_integer} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction tag_integer_503} {:instruction integer_flush} {:instruction tagged_521} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_flush} {:instruction float_swap} {:instruction tag_integer_503} {:instruction integer_flush} {:instruction print_float})
Best program: (integer_div float_mult float_rot integer_yankdup float_yankdup in2 integer_max integer_dec integer_dup integer_dec float_rot float_frominteger float_rot integer_inc float_add integer_pop in1 float_max 97 float_yank integer_sub integer_rot integer_dec float_dec float_dec integer_flush float_swap integer_rot integer_dec float_dec integer_dup_items float_min float_swap integer_rot integer_dec float_dec float_dec integer_flush integer_dup_items float_min float_mult float_dec float_dec integer_flush float_dec integer_flush float_swap float_dec float_dec integer_flush float_dec integer_flush print_integer integer_min integer_rot integer_dec float_dec float_dec integer_flush float_swap tag_integer_503 integer_flush tagged_521 float_dec integer_rot integer_dec float_dec float_dec integer_flush float_swap integer_rot integer_dec float_dec float_dec integer_flush integer_flush float_swap tag_integer_503 integer_flush print_float)
Errors: [6.0 2 12.0 2 79.0 3 81.0 3 28.0 3 16.1223 12 82.0 3 11.0 2 48.3062 11 97.0 2 58.0415 11 24.9952 11 64.0 2 59.0 10 71.0 3 37.0 13 2.0 2 7.0 2 6.0 2 20.0 1 9.5508 11 32.0 2 46.5273 11 64.0 2 34.0 2]
Total: 1123.5432999999998
Mean: 22.470865
Genome size: 80
Size: 81
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3281.4744808000123
Median total errors in population: 1186.4568000000002
Error averages by case: (93.95874590000001 5.045 99.69373630000005 3.588 159.14039480000002 4.369 162.07044109999995 4.498 112.48011210000007 4.277 90.59725280000119 10.166 161.25473350000001 4.48 96.33327609999998 3.463 106.42940660000163 9.902 175.01477659999995 4.331 175.68080060000005 4.558 139.45487079999901 11.717 145.17206030000008 5.233 141.342337 10.257 154.63653550000006 4.505 121.93134350000005 12.609 93.27985509999999 2.686 90.61194800000007 3.05 91.8545738 3.357 110.00045090000002 3.533 107.31746089999872 10.908 119.84517939999989 3.539 112.11442959999921 11.048 145.21085870000002 10.938 120.45990090000002 3.532)
Error minima by case: (0.057 1 3.0897 1 7.5304 2 24.7263 1 9.0 2 0.0627 1 63.0 2 0.0 0 8.3062 1 78.0 1 41.0415 1 23.9952 9 13.7063 1 20.9152 8 43.989 2 12.0541 9 0.0 0 0.0 0 0.0 0 11.16 1 0.4492 8 8.9782 1 1.3428 9 16.0717 2 18.0295 1)
Average genome size in population (length): 74.417
Average program size in population (points): 75.417
Average percent parens in population: 0.013
Minimum age in population: 30.75811195373535
Maximum age in population: 35.56690120697021
Average age in population: 33.44963057017326
Median age in population: 33.47829973697662
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.803
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.803
Total error diversity:				 0.16
Error (vector) diversity:			 0.168
Behavioral diversity:				 0.168
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 31048250
--- Timings ---
Current time: 1529616074006 milliseconds
Total Time:          79.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        33.0 seconds, 41.4%
Fitness Testing:     36.9 seconds, 46.4%
Report:               9.6 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Number IO problem report - generation 24
Test total error for best: 48382.2834
Test mean error for best: 24.19114
;;------------------------------
Outputs of best individual on training cases:
Correct output: -11.9430292301 | Program output: -10.9430292301
Correct output: -36.0896817864 | Program output: -29.0896817864
Correct output: -125.5304008101 | Program output: -51.5304008101
Correct output: -144.7263106209 | Program output: -68.7263106209
Correct output: 103.0168939816 | Program output: 70.0168939816 
Correct output: -16.1223046932 | Program output: -3.0          
Correct output: 155.9194766204 | Program output: 68.9194766204 
Correct output: 63.2567055278  | Program output: 47.2567055278 
Correct output: -30.306242645  | Program output: 15.0          
Correct output: 174.3686344101 | Program output: 72.3686344101 
Correct output: 129.041505579  | Program output: 68.0          
Correct output: 50.0047772031  | Program output: 72.0          
Correct output: -69.2937213159 | Program output: -10.2937213159
Correct output: -38.6366450081 | Program output: 15.3633549919 
Correct output: -153.9889639244 | Program output: -87.9889639244
Correct output: -29.5219532451 | Program output: 2.4780467549  
Correct output: 61.9720188814  | Program output: 54.9720188814 
Correct output: 22.8390413755  | Program output: 10.8390413755 
Correct output: 50.8075713719  | Program output: 39.8075713719 
Correct output: 22.9754753134  | Program output: 37.9754753134 
Correct output: 15.5507980181  | Program output: 3.0           
Correct output: 20.7937377708  | Program output: 47.7937377708 
Correct output: 10.4727220987  | Program output: 54.0          
Correct output: -66.9282665154 | Program output: -7.9282665154 
Correct output: -91.0294909522 | Program output: -62.0294909522
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction integer_div} {:instruction float_mult} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction in2} {:instruction integer_max} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction float_rot} {:instruction integer_pop} {:instruction in1} {:instruction float_max} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_min} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction tag_integer_449} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction 32} {:instruction float_mult} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_rot} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction tag_integer_449} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction tag_integer_503} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_flush} {:instruction integer_pop} {:instruction tag_integer_503} {:instruction integer_flush} {:instruction print_float})
Best program: (integer_div float_mult integer_div float_mult integer_sub integer_yankdup float_yankdup in2 integer_max float_frominteger float_frominteger float_rot integer_pop in1 float_max float_inc integer_rot integer_dec float_dec float_dec integer_flush float_swap integer_rot integer_dec float_dec float_dec integer_flush float_min float_min integer_dup_items float_min integer_dup_items float_dec float_dec integer_flush float_dec integer_flush float_swap tag_integer_449 integer_dec float_dec float_dec integer_flush float_swap 32 float_mult float_dec integer_flush float_dec integer_rot float_min integer_dup_items float_min integer_dup_items float_dec float_dec integer_flush float_dec integer_flush float_swap tag_integer_449 integer_dec float_dec float_dec integer_flush float_swap tag_integer_503 integer_flush float_dec float_dec integer_rot integer_dec float_dec integer_rot integer_dec float_dec float_dec float_dec integer_flush float_swap integer_rot integer_dec float_dec float_dec integer_flush integer_flush integer_pop tag_integer_503 integer_flush print_float)
Errors: [1.0 1 7.0 2 74.0 3 76.0 3 33.0 2 13.1223 11 87.0 3 16.0 2 45.3062 11 102.0 2 61.0415 11 21.9952 11 59.0 2 54.0 10 66.0 3 32.0 12 7.0 2 12.0 2 11.0 2 15.0 2 12.5508 11 27.0 2 43.5273 11 59.0 2 29.0 2]
Total: 1089.5432999999998
Mean: 21.790867
Genome size: 90
Size: 91
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3101.312049100012
Median total errors in population: 1159.4568
Error averages by case: (85.02012370000003 3.726 90.92985230000009 3.444 152.0151959 4.251 154.16219829999997 4.365 105.88014080000008 4.297 85.80684920000061 10.287 154.7648351 4.231 92.0776639 3.294 101.71756490000145 9.95 169.57182459999987 3.792 165.85728610000012 5.205 132.56286419999932 11.57 137.0660445000001 3.751 133.5471429 10.23 146.4851925000001 4.337 113.58470520000004 12.656 86.18505289999996 2.672 86.59795570000007 3.242 86.60599010000001 3.405 100.12555700000001 3.358 101.74312709999872 10.815 111.68824929999991 3.385 110.42166369999953 11.038 137.69722850000002 6.593 111.82374070000009 3.48)
Error minima by case: (0.0 0 2.0 1 4.5304 2 21.7263 2 10.0 2 0.0362 1 18.0 2 1.0 1 3.3062 1 3.0 1 6.0 1 20.9952 8 11.3388 1 14.4607 8 40.989 2 7.8817 1 0.0 0 0.0 0 0.0 0 2.0245 1 0.5508 8 4.2063 1 1.5273 9 13.7043 1 10.397 1)
Average genome size in population (length): 78.485
Average program size in population (points): 79.485
Average percent parens in population: 0.013
Minimum age in population: 32.28543710708618
Maximum age in population: 37.16380786895752
Average age in population: 35.01967673552036
Median age in population: 35.04671066999435
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.825
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.825
Total error diversity:				 0.16
Error (vector) diversity:			 0.173
Behavioral diversity:				 0.174
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 33010400
--- Timings ---
Current time: 1529616077759 milliseconds
Total Time:          83.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        34.3 seconds, 41.2%
Fitness Testing:     38.8 seconds, 46.6%
Report:              10.0 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Number IO problem report - generation 25
Test total error for best: 47068.82360000001
Test mean error for best: 23.53441
;;------------------------------
Outputs of best individual on training cases:
Correct output: -11.9430292301 | Program output: -15.9430292301
Correct output: -36.0896817864 | Program output: -34.0896817864
Correct output: -125.5304008101 | Program output: -56.5304008101
Correct output: -144.7263106209 | Program output: -73.7263106209
Correct output: 103.0168939816 | Program output: 65.0168939816 
Correct output: -16.1223046932 | Program output: -10.0         
Correct output: 155.9194766204 | Program output: 63.9194766204 
Correct output: 63.2567055278  | Program output: 42.2567055278 
Correct output: -30.306242645  | Program output: 8.0           
Correct output: 174.3686344101 | Program output: 67.3686344101 
Correct output: 129.041505579  | Program output: 61.0          
Correct output: 50.0047772031  | Program output: 65.0          
Correct output: -69.2937213159 | Program output: -15.2937213159
Correct output: -38.6366450081 | Program output: 10.3633549919 
Correct output: -153.9889639244 | Program output: -92.9889639244
Correct output: -29.5219532451 | Program output: -2.5219532451 
Correct output: 61.9720188814  | Program output: 49.9720188814 
Correct output: 22.8390413755  | Program output: 5.8390413755  
Correct output: 50.8075713719  | Program output: 34.8075713719 
Correct output: 22.9754753134  | Program output: 32.9754753134 
Correct output: 15.5507980181  | Program output: -4.0          
Correct output: 20.7937377708  | Program output: 42.7937377708 
Correct output: 10.4727220987  | Program output: 47.0          
Correct output: -66.9282665154 | Program output: -12.9282665154
Correct output: -91.0294909522 | Program output: -67.0294909522
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_rot} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction in2} {:instruction integer_max} {:instruction integer_dec} {:instruction float_add} {:instruction integer_dec} {:instruction float_sub} {:instruction float_sub} {:instruction float_div} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_flush} {:instruction float_rot} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_rot} {:instruction integer_pop} {:instruction in1} {:instruction float_max} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_swap} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_rot} {:instruction integer_dup_items} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction print_integer} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_mult} {:instruction tag_integer_503} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction float_swap} {:instruction tag_integer_503} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tag_integer_503} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tag_integer_503} {:instruction integer_flush} {:instruction print_float})
Best program: (integer_div float_mult float_rot integer_yankdup float_yankdup in2 integer_max integer_dec float_add integer_dec float_sub float_sub float_div integer_mod integer_dup_times float_flush float_rot integer_shove float_frominteger float_rot integer_pop in1 float_max float_inc integer_rot integer_dec float_dec float_dec integer_flush float_swap integer_rot integer_dec float_dec float_dec float_swap integer_rot integer_dec float_dec float_dec integer_max float_rot integer_dup_items float_min integer_dup_items float_dec float_inc integer_rot integer_dec float_dec float_dec float_dec float_dec integer_flush float_dec integer_rot integer_dec float_dec float_dec integer_flush float_swap integer_rot integer_dec float_dec integer_flush float_swap integer_dec float_dec float_dec integer_flush float_dec integer_flush print_integer float_inc integer_rot integer_dec float_dec integer_flush float_swap integer_mult tag_integer_503 integer_flush float_dec float_dec integer_rot integer_dec float_dec float_dec integer_flush float_swap float_swap tag_integer_503 integer_flush float_dec float_dec integer_rot integer_dec float_dec float_dec tag_integer_503 integer_flush float_dec float_dec integer_rot integer_dec float_dec float_dec tag_integer_503 integer_flush print_float)
Errors: [4.0 1 2.0 1 69.0 3 71.0 3 38.0 3 6.1223 10 92.0 3 21.0 2 38.3062 11 107.0 2 68.0415 11 14.9952 11 54.0 2 49.0 10 61.0 3 27.0 1 12.0 2 17.0 2 16.0 2 10.0 1 19.5508 11 22.0 2 36.5273 10 54.0 2 24.0 2]
Total: 1044.5432999999998
Mean: 20.890865
Genome size: 109
Size: 110
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3131.8564659000003
Median total errors in population: 1153.2122
Error averages by case: (86.64588360000002 3.688 91.75370600000005 3.429 152.48154010000005 4.338 155.48211170000002 4.325 109.19065960000007 4.401 87.94445740000026 10.477 158.8189361999999 4.414 95.39873379999999 3.339 106.07797290000163 9.989 172.66033929999986 3.675 159.73298960000028 6.682 126.06849549999987 11.426 138.14775160000005 3.656 133.95973750000005 10.232 147.83077170000007 4.281 113.60087810000005 12.664 89.25287129999997 3.062 89.76897710000007 3.331 91.1657396 3.449 101.73011670000001 3.377 97.83169879999896 10.971 112.27610799999994 3.414 114.7298960999999 10.985 138.3305548 4.602 113.24153890000007 3.527)
Error minima by case: (0.0 0 2.0 1 5.5304 2 22.7263 2 10.0 1 0.1223 1 52.9195 2 0.0 0 3.3062 1 41.3686 1 27.9585 1 14.9952 8 24.7063 1 4.7205 8 41.8965 2 7.4629 1 0.0 0 0.0 0 0.0 0 10.0 1 0.4492 9 17.4244 1 10.4727 9 23.0951 1 3.1883 1)
Average genome size in population (length): 81.168
Average program size in population (points): 82.168
Average percent parens in population: 0.012
Minimum age in population: 33.84076452255249
Maximum age in population: 38.49805116653442
Average age in population: 36.49366527622938
Median age in population: 36.58201637864113
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.842
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.842
Total error diversity:				 0.189
Error (vector) diversity:			 0.206
Behavioral diversity:				 0.207
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 35039650
--- Timings ---
Current time: 1529616081638 milliseconds
Total Time:          87.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        35.7 seconds, 41.0%
Fitness Testing:     40.7 seconds, 46.7%
Report:              10.6 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Number IO problem report - generation 26
Test total error for best: 27154.0
Test mean error for best: 13.57700
;;------------------------------
Outputs of best individual on training cases:
Correct output: -11.9430292301 | Program output: 
-34.9430292301
Correct output: -36.0896817864 | Program output: 
-59.0896817864
Correct output: -125.5304008101 | Program output: 
-148.5304008101
Correct output: -144.7263106209 | Program output: 
-167.7263106209
Correct output: 103.0168939816 | Program output: 
80.0168939816
Correct output: -16.1223046932 | Program output: 
-39.1223046932
Correct output: 155.9194766204 | Program output: 
132.9194766204
Correct output: 63.2567055278  | Program output: 
40.2567055278
Correct output: -30.306242645  | Program output: 
-53.306242645
Correct output: 174.3686344101 | Program output: 
151.3686344101
Correct output: 129.041505579  | Program output: 
106.041505579
Correct output: 50.0047772031  | Program output: 
27.0047772031
Correct output: -69.2937213159 | Program output: 
-92.2937213159
Correct output: -38.6366450081 | Program output: 
-61.6366450081
Correct output: -153.9889639244 | Program output: 
-176.9889639244
Correct output: -29.5219532451 | Program output: 
-52.5219532451
Correct output: 61.9720188814  | Program output: 
38.9720188814
Correct output: 22.8390413755  | Program output: 
-0.1609586245
Correct output: 50.8075713719  | Program output: 
27.8075713719
Correct output: 22.9754753134  | Program output: 
-0.0245246866
Correct output: 15.5507980181  | Program output: 
-7.4492019819
Correct output: 20.7937377708  | Program output: 
-2.2062622292
Correct output: 10.4727220987  | Program output: 
-12.5272779013
Correct output: -66.9282665154 | Program output: 
-89.9282665154
Correct output: -91.0294909522 | Program output: 
-114.0294909522
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_rot} {:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_yankdup} {:instruction in1} {:instruction in2} {:instruction integer_max} {:instruction integer_dec} {:instruction integer_dup} {:instruction integer_dec} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_rot} {:instruction integer_inc} {:instruction float_add} {:instruction print_newline} {:instruction integer_swap} {:instruction float_max} {:instruction 97} {:instruction float_yank} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_max} {:instruction integer_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_min} {:instruction float_mult} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction float_dec} {:instruction float_min} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction print_integer} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_swap} {:instruction float_dec} {:instruction integer_flush} {:instruction float_inc} {:instruction tag_integer_366} {:instruction integer_flush} {:instruction print_float})
Best program: (integer_div float_mult float_rot integer_yankdup float_rot integer_yankdup in1 in2 integer_max integer_dec integer_dup integer_dec float_rot float_frominteger float_rot integer_inc float_add print_newline integer_swap float_max 97 float_yank integer_sub integer_rot integer_dec float_dec float_dec integer_flush float_swap integer_max integer_dec float_dec integer_dup_items float_min float_mult float_dec integer_flush float_swap integer_rot integer_dec float_dec float_dec integer_flush float_swap float_dec float_min float_mult float_dec float_dec integer_flush float_dec integer_flush float_swap float_dec float_dec integer_flush float_dec integer_flush print_integer float_inc integer_rot integer_dec float_dec float_dec integer_flush float_dec integer_dec integer_dec float_dec float_dec integer_flush float_dec integer_dec float_dec float_dec integer_flush float_dec integer_swap float_dec integer_flush float_inc tag_integer_366 integer_flush print_float)
Errors: [23.0 3 23.0 3 23.0 3 23.0 3 23.0 3 23.0 3 23.0 3 23.0 3 23.0 3 23.0 3 23.0 3 23.0 3 23.0 3 23.0 3 23.0 3 23.0 3 23.0 3 23.0 12 23.0 3 23.0 13 23.0 10 23.0 13 23.0 10 23.0 3 23.0 3]
Total: 693.0
Mean: 13.86
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3442.252375600007
Median total errors in population: 1123.5432999999998
Error averages by case: (101.5433636 3.669 106.88985660000002 3.541 167.00859450000004 4.47 169.8382262 4.481 119.40228510000004 4.429 101.76138050000128 10.92 167.9780094 4.525 110.58129539999996 3.468 129.40706470000217 10.48 181.4703383999999 3.704 149.84627020000138 10.045 119.15553090000111 11.187 153.0848874 3.678 148.4689702 10.291 162.10196230000005 4.433 129.28408580000004 12.652 104.43520589999996 3.307 105.20545680000005 3.492 106.2933667 3.563 116.61985100000001 3.464 99.71139629999873 10.937 126.68208299999993 3.518 131.1740598000009 11.023 153.04746659999998 4.233 128.12836830000003 3.623)
Error minima by case: (0.0 0 0.7724 1 0.5304 2 13.2737 1 9.0 2 0.1223 1 12.0805 2 0.2567 1 2.3062 1 23.0 1 10.9585 1 13.9952 3 23.0 1 1.7746 3 15.989 2 4.2085 1 0.0 0 0.0 0 0.0 0 9.0 1 0.4492 9 21.0 1 8.4727 9 23.0 1 11.0295 1)
Average genome size in population (length): 81.519
Average program size in population (points): 82.519
Average percent parens in population: 0.012
Minimum age in population: 34.84076452255249
Maximum age in population: 39.94623506069183
Average age in population: 37.91630100899935
Median age in population: 37.95309481024742
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.821
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.821
Total error diversity:				 0.169
Error (vector) diversity:			 0.19
Behavioral diversity:				 0.19
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 37077625
--- Timings ---
Current time: 1529616085354 milliseconds
Total Time:          90.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        37.1 seconds, 40.8%
Fitness Testing:     42.5 seconds, 46.8%
Report:              11.2 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Number IO problem report - generation 27
Test total error for best: 23125.0
Test mean error for best: 11.56250
;;------------------------------
Outputs of best individual on training cases:
Correct output: -11.9430292301 | Program output: 
-31.9430292301
Correct output: -36.0896817864 | Program output: 
-56.0896817864
Correct output: -125.5304008101 | Program output: 
-145.5304008101
Correct output: -144.7263106209 | Program output: 
-164.7263106209
Correct output: 103.0168939816 | Program output: 
83.0168939816
Correct output: -16.1223046932 | Program output: 
-36.1223046932
Correct output: 155.9194766204 | Program output: 
135.9194766204
Correct output: 63.2567055278  | Program output: 
43.2567055278
Correct output: -30.306242645  | Program output: 
-50.306242645
Correct output: 174.3686344101 | Program output: 
154.3686344101
Correct output: 129.041505579  | Program output: 
109.041505579
Correct output: 50.0047772031  | Program output: 
30.0047772031
Correct output: -69.2937213159 | Program output: 
-89.2937213159
Correct output: -38.6366450081 | Program output: 
-58.6366450081
Correct output: -153.9889639244 | Program output: 
-173.9889639244
Correct output: -29.5219532451 | Program output: 
-49.5219532451
Correct output: 61.9720188814  | Program output: 
41.9720188814
Correct output: 22.8390413755  | Program output: 
2.8390413755 
Correct output: 50.8075713719  | Program output: 
30.8075713719
Correct output: 22.9754753134  | Program output: 
2.9754753134 
Correct output: 15.5507980181  | Program output: 
-4.4492019819
Correct output: 20.7937377708  | Program output: 
0.7937377708 
Correct output: 10.4727220987  | Program output: 
-9.5272779013
Correct output: -66.9282665154 | Program output: 
-86.9282665154
Correct output: -91.0294909522 | Program output: 
-111.0294909522
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_rot} {:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_yankdup} {:instruction in1} {:instruction in2} {:instruction integer_max} {:instruction integer_dec} {:instruction integer_dup} {:instruction integer_dec} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_rot} {:instruction integer_inc} {:instruction float_add} {:instruction print_newline} {:instruction integer_swap} {:instruction float_max} {:instruction 97} {:instruction float_yank} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_max} {:instruction integer_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_min} {:instruction float_mult} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_rot} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction float_dec} {:instruction float_min} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_flush} {:instruction float_swap} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction print_integer} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_swap} {:instruction float_dec} {:instruction integer_flush} {:instruction float_inc} {:instruction tag_integer_366} {:instruction integer_flush} {:instruction print_float})
Best program: (integer_div float_mult float_rot integer_yankdup float_rot integer_yankdup in1 in2 integer_max integer_dec integer_dup integer_dec float_rot float_frominteger float_rot integer_inc float_add print_newline integer_swap float_max 97 float_yank integer_sub integer_rot integer_dec float_dec float_dec integer_flush float_swap integer_max integer_dec float_dec integer_dup_items float_min float_mult float_dec integer_flush float_swap integer_rot integer_dec integer_dup_times float_dec integer_flush float_swap float_dec float_min float_mult float_dec float_dec integer_flush float_inc integer_flush float_swap float_dec float_dec integer_flush float_dec integer_flush print_integer float_inc integer_rot integer_dec float_dec float_dec integer_flush float_dec integer_dec integer_dec float_dec float_dec integer_flush float_dec integer_dec float_dec float_dec integer_flush float_dec integer_swap float_dec integer_flush float_inc tag_integer_366 integer_flush print_float)
Errors: [20.0 2 20.0 2 20.0 2 20.0 2 20.0 2 20.0 2 20.0 2 20.0 2 20.0 2 20.0 2 20.0 2 20.0 2 20.0 2 20.0 2 20.0 2 20.0 2 20.0 2 20.0 1 20.0 2 20.0 1 20.0 10 20.0 1 20.0 10 20.0 2 20.0 3]
Total: 564.0
Mean: 11.28
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2943.693278700009
Median total errors in population: 1099.5432999999998
Error averages by case: (78.35659350000002 3.136 82.89364950000004 3.151 142.59487370000005 4.274 145.813347 4.331 108.20560500000005 4.179 85.91485770000139 10.508 155.5794162 4.343 92.53975569999994 3.388 113.67998730000201 10.333 169.01262899999995 3.532 135.26932220000214 10.28 100.14445400000088 10.985 128.3877231000001 3.454 124.53294990000005 10.091 138.36107780000006 4.242 104.45844650000005 11.337 85.97302739999999 3.339 86.56959310000005 3.378 87.93997080000001 3.357 92.83869820000001 3.521 86.39795079999863 10.849 103.28276079999999 3.466 114.91401360000106 10.989 128.45032730000003 3.66 104.05024859999999 3.409)
Error minima by case: (0.0 0 0.0 0 1.5304 2 18.7263 1 9.0 2 0.0298 1 20.0 1 1.0 1 3.3062 1 20.0 1 20.0 1 9.9952 2 20.0 1 2.2887 2 20.0 2 3.7543 1 0.0 0 0.0 0 0.0 0 5.0 1 0.5508 8 8.6182 1 1.7028 8 20.0 1 12.0295 1)
Average genome size in population (length): 85.22
Average program size in population (points): 86.22
Average percent parens in population: 0.012
Minimum age in population: 35.84076452255249
Maximum age in population: 41.24032248556614
Average age in population: 39.31253855207562
Median age in population: 39.37548799812794
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.85
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.85
Total error diversity:				 0.175
Error (vector) diversity:			 0.198
Behavioral diversity:				 0.199
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 39208125
--- Timings ---
Current time: 1529616089183 milliseconds
Total Time:          94.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        38.4 seconds, 40.5%
Fitness Testing:     44.5 seconds, 47.0%
Report:              11.7 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Number IO problem report - generation 28
Test total error for best: 20844.0
Test mean error for best: 10.42200
;;------------------------------
Outputs of best individual on training cases:
Correct output: -11.9430292301 | Program output: 
-28.9430292301
Correct output: -36.0896817864 | Program output: 
-53.0896817864
Correct output: -125.5304008101 | Program output: 
-142.5304008101
Correct output: -144.7263106209 | Program output: 
-161.7263106209
Correct output: 103.0168939816 | Program output: 
86.0168939816
Correct output: -16.1223046932 | Program output: 
-33.1223046932
Correct output: 155.9194766204 | Program output: 
138.9194766204
Correct output: 63.2567055278  | Program output: 
46.2567055278
Correct output: -30.306242645  | Program output: 
-47.306242645
Correct output: 174.3686344101 | Program output: 
157.3686344101
Correct output: 129.041505579  | Program output: 
112.041505579
Correct output: 50.0047772031  | Program output: 
33.0047772031
Correct output: -69.2937213159 | Program output: 
-86.2937213159
Correct output: -38.6366450081 | Program output: 
-55.6366450081
Correct output: -153.9889639244 | Program output: 
-170.9889639244
Correct output: -29.5219532451 | Program output: 
-46.5219532451
Correct output: 61.9720188814  | Program output: 
44.9720188814
Correct output: 22.8390413755  | Program output: 
5.8390413755 
Correct output: 50.8075713719  | Program output: 
33.8075713719
Correct output: 22.9754753134  | Program output: 
5.9754753134 
Correct output: 15.5507980181  | Program output: 
-1.4492019819
Correct output: 20.7937377708  | Program output: 
3.7937377708 
Correct output: 10.4727220987  | Program output: 
-6.5272779013
Correct output: -66.9282665154 | Program output: 
-83.9282665154
Correct output: -91.0294909522 | Program output: 
-108.0294909522
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_rot} {:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_yankdup} {:instruction in1} {:instruction in2} {:instruction integer_max} {:instruction integer_dec} {:instruction integer_dup} {:instruction integer_dec} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_rot} {:instruction integer_inc} {:instruction float_add} {:instruction print_newline} {:instruction integer_swap} {:instruction float_max} {:instruction 97} {:instruction float_yank} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_max} {:instruction integer_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_shove} {:instruction integer_max} {:instruction float_rot} {:instruction integer_dup_items} {:instruction float_min} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction print_integer} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_swap} {:instruction float_dec} {:instruction integer_flush} {:instruction float_inc} {:instruction tag_integer_366} {:instruction integer_flush} {:instruction print_float})
Best program: (integer_div float_mult float_rot integer_yankdup float_rot integer_yankdup in1 in2 integer_max integer_dec integer_dup integer_dec float_rot float_frominteger float_rot integer_inc float_add print_newline integer_swap float_max 97 float_yank integer_sub integer_rot integer_dec float_dec float_dec integer_flush float_swap integer_max integer_dec float_dec integer_dup_items integer_shove integer_max float_rot integer_dup_items float_min integer_flush float_dec integer_flush float_swap float_dec float_dec integer_flush float_dec integer_flush print_integer float_inc integer_rot integer_dec float_dec float_dec integer_flush float_dec integer_dec integer_dec float_dec float_dec integer_flush float_dec integer_dec float_dec float_dec integer_flush float_dec integer_swap float_dec integer_flush float_inc tag_integer_366 integer_flush print_float)
Errors: [17.0 3 17.0 3 17.0 3 17.0 3 17.0 3 17.0 3 17.0 3 17.0 3 17.0 3 17.0 3 17.0 3 17.0 3 17.0 3 17.0 3 17.0 3 17.0 3 17.0 3 17.0 2 17.0 3 17.0 2 17.0 10 17.0 2 17.0 10 17.0 3 17.0 4]
Total: 512.0
Mean: 10.24
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3383.598847500009
Median total errors in population: 1074.5432999999998
Error averages by case: (99.67923039999998 3.153 101.81020230000006 3.253 154.8578454000001 4.48 157.54832219999994 4.624 129.8854593000001 4.493 104.01063080000124 9.781 171.70794659999999 4.494 116.08413079999994 3.558 130.2028634000022 9.666 183.39821219999985 4.178 153.34743100000114 9.745 117.84688610000131 10.319 141.95682660000008 3.842 138.86644180000005 9.631 151.1630408 4.619 121.39543780000004 7.63 110.09003699999991 3.618 108.81178950000013 4.33 112.2131177 3.672 109.94599310000001 4.309 109.72018909999873 10.863 119.04106479999987 4.543 129.9742895000009 10.869 142.0127333 3.901 120.65172600000005 3.806)
Error minima by case: (0.0 0 0.0 0 0.4696 2 8.7263 2 10.0 2 0.1223 1 17.0 1 1.2567 1 0.6938 1 17.0 1 17.0 1 7.9952 1 17.0 1 12.6323 2 17.0 2 1.7915 1 0.0 0 0.0 0 1.0 1 0.0 0 0.5508 8 3.8706 1 5.7518 8 17.0 1 2.0295 1)
Average genome size in population (length): 91.976
Average program size in population (points): 92.976
Average percent parens in population: 0.011
Minimum age in population: 38.00913684815168
Maximum age in population: 43.08569546788931
Average age in population: 40.88637642361969
Median age in population: 40.93253863602877
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.855
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.855
Total error diversity:				 0.186
Error (vector) diversity:			 0.215
Behavioral diversity:				 0.216
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 41507525
--- Timings ---
Current time: 1529616093075 milliseconds
Total Time:          98.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        39.8 seconds, 40.3%
Fitness Testing:     46.6 seconds, 47.2%
Report:              12.2 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Number IO problem report - generation 29
Test total error for best: 16587.0
Test mean error for best: 8.29350
;;------------------------------
Outputs of best individual on training cases:
Correct output: -11.9430292301 | Program output: 
-24.9430292301
Correct output: -36.0896817864 | Program output: 
-49.0896817864
Correct output: -125.5304008101 | Program output: 
-138.5304008101
Correct output: -144.7263106209 | Program output: 
-157.7263106209
Correct output: 103.0168939816 | Program output: 
90.0168939816
Correct output: -16.1223046932 | Program output: 
-29.1223046932
Correct output: 155.9194766204 | Program output: 
142.9194766204
Correct output: 63.2567055278  | Program output: 
50.2567055278
Correct output: -30.306242645  | Program output: 
-43.306242645
Correct output: 174.3686344101 | Program output: 
161.3686344101
Correct output: 129.041505579  | Program output: 
116.041505579
Correct output: 50.0047772031  | Program output: 
37.0047772031
Correct output: -69.2937213159 | Program output: 
-82.2937213159
Correct output: -38.6366450081 | Program output: 
-51.6366450081
Correct output: -153.9889639244 | Program output: 
-166.9889639244
Correct output: -29.5219532451 | Program output: 
-42.5219532451
Correct output: 61.9720188814  | Program output: 
48.9720188814
Correct output: 22.8390413755  | Program output: 
9.8390413755 
Correct output: 50.8075713719  | Program output: 
37.8075713719
Correct output: 22.9754753134  | Program output: 
9.9754753134 
Correct output: 15.5507980181  | Program output: 
2.5507980181 
Correct output: 20.7937377708  | Program output: 
7.7937377708 
Correct output: 10.4727220987  | Program output: 
-2.5272779013
Correct output: -66.9282665154 | Program output: 
-79.9282665154
Correct output: -91.0294909522 | Program output: 
-104.0294909522
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_rot} {:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_yankdup} {:instruction in1} {:instruction in2} {:instruction integer_max} {:instruction integer_dec} {:instruction integer_dup} {:instruction integer_dec} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_rot} {:instruction integer_inc} {:instruction float_add} {:instruction print_newline} {:instruction integer_swap} {:instruction float_max} {:instruction 97} {:instruction float_yank} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_max} {:instruction integer_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_min} {:instruction float_mult} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_rot} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_flush} {:instruction integer_dec} {:instruction print_float} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_flush} {:instruction float_swap} {:instruction tag_integer_503} {:instruction integer_flush} {:instruction print_float})
Best program: (integer_div float_mult float_rot integer_yankdup float_rot integer_yankdup in1 in2 integer_max integer_dec integer_dup integer_dec float_rot float_frominteger float_rot integer_inc float_add print_newline integer_swap float_max 97 float_yank integer_sub integer_rot integer_dec float_dec float_dec integer_flush float_swap integer_max integer_dec float_dec integer_dup_items float_min float_mult float_dec integer_flush float_swap integer_rot integer_dec integer_dup_times float_dec integer_flush float_swap float_dec integer_flush float_dec integer_flush float_dec float_dec integer_flush float_swap integer_rot integer_dec float_dec float_dec integer_flush integer_flush integer_dec print_float float_dec integer_flush float_dec float_dec integer_rot integer_dec float_dec float_dec integer_flush float_swap float_dec integer_rot integer_dec float_dec float_dec integer_flush float_swap integer_rot integer_dec float_dec float_dec integer_flush integer_flush float_swap tag_integer_503 integer_flush print_float)
Errors: [13.0 3 13.0 3 13.0 3 13.0 3 13.0 3 13.0 3 13.0 3 13.0 3 13.0 3 13.0 3 13.0 3 13.0 3 13.0 3 13.0 3 13.0 3 13.0 3 13.0 3 13.0 2 13.0 3 13.0 2 13.0 2 13.0 2 13.0 10 13.0 3 13.0 4]
Total: 404.0
Mean: 8.08
Genome size: 87
Size: 88
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3127.5010616000072
Median total errors in population: 1035.0432999999998
Error averages by case: (101.30421450000003 3.904 101.29360430000007 3.815 132.83914380000004 4.656 135.01166609999996 4.676 121.63014090000007 4.599 103.59584750000077 7.298 146.98213809999996 4.602 112.18038699999995 3.893 118.72398320000106 7.314 153.97031519999987 4.481 136.35571030000102 7.31 114.1639757000005 7.943 125.75619730000011 4.332 123.78457320000003 7.564 131.6472674 4.66 113.16558090000008 5.497 108.9730928999999 4.073 107.25317970000013 6.207 109.4344933 4.093 107.36339140000001 6.25 107.30518179999926 10.584 112.9990845999999 7.34 119.53102720000054 10.641 125.76520680000004 4.418 112.04365850000006 4.278)
Error minima by case: (0.0 0 0.0 0 0.5304 2 9.7263 2 4.0 2 0.1223 1 3.9195 1 0.5198 1 0.4655 1 3.6314 1 4.0 1 3.9952 1 8.0983 1 11.9441 2 0.011 2 2.6382 1 0.7649 1 2.0 1 1.0 1 1.0 1 3.4492 2 10.0 1 4.0 2 5.7329 1 3.0295 1)
Average genome size in population (length): 93.015
Average program size in population (points): 94.015
Average percent parens in population: 0.011
Minimum age in population: 39.76519183069468
Maximum age in population: 44.56225057318807
Average age in population: 42.51233872500807
Median age in population: 42.57049855217338
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.867
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.867
Total error diversity:				 0.224
Error (vector) diversity:			 0.254
Behavioral diversity:				 0.256
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 43832900
--- Timings ---
Current time: 1529616097181 milliseconds
Total Time:         102.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        41.2 seconds, 40.1%
Fitness Testing:     48.7 seconds, 47.4%
Report:              12.7 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Number IO problem report - generation 30
Test total error for best: 5273.0
Test mean error for best: 2.63650
;;------------------------------
Outputs of best individual on training cases:
Correct output: -11.9430292301 | Program output: 

-13.9430292301
Correct output: -36.0896817864 | Program output: 

-38.0896817864
Correct output: -125.5304008101 | Program output: 

-127.5304008101
Correct output: -144.7263106209 | Program output: 

-146.7263106209
Correct output: 103.0168939816 | Program output: 

101.0168939816
Correct output: -16.1223046932 | Program output: 

-18.1223046932
Correct output: 155.9194766204 | Program output: 

153.9194766204
Correct output: 63.2567055278  | Program output: 

61.2567055278
Correct output: -30.306242645  | Program output: 

-32.306242645
Correct output: 174.3686344101 | Program output: 

172.3686344101
Correct output: 129.041505579  | Program output: 

127.041505579
Correct output: 50.0047772031  | Program output: 

48.0047772031
Correct output: -69.2937213159 | Program output: 

-71.2937213159
Correct output: -38.6366450081 | Program output: 

-40.6366450081
Correct output: -153.9889639244 | Program output: 

-155.9889639244
Correct output: -29.5219532451 | Program output: 

-31.5219532451
Correct output: 61.9720188814  | Program output: 

59.9720188814
Correct output: 22.8390413755  | Program output: 

20.8390413755
Correct output: 50.8075713719  | Program output: 

48.8075713719
Correct output: 22.9754753134  | Program output: 

20.9754753134
Correct output: 15.5507980181  | Program output: 

13.5507980181
Correct output: 20.7937377708  | Program output: 

18.7937377708
Correct output: 10.4727220987  | Program output: 

8.4727220987
Correct output: -66.9282665154 | Program output: 

-68.9282665154
Correct output: -91.0294909522 | Program output: 

-93.0294909522
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_rot} {:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_yankdup} {:instruction in1} {:instruction in2} {:instruction integer_max} {:instruction integer_dec} {:instruction integer_dup} {:instruction integer_dec} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_rot} {:instruction integer_inc} {:instruction float_add} {:instruction print_newline} {:instruction integer_swap} {:instruction float_max} {:instruction print_newline} {:instruction integer_swap} {:instruction print_float} {:instruction 97} {:instruction float_yank} {:instruction integer_swap} {:instruction float_max} {:instruction 97} {:instruction float_yank} {:instruction integer_sub} {:instruction float_add} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_max} {:instruction integer_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_min} {:instruction float_mult} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_pop} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction float_dec} {:instruction float_min} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_rot} {:instruction float_swap} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction print_float} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction print_integer} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_mult} {:instruction tag_integer_503} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_min} {:instruction float_dec})
Best program: (integer_div float_mult float_rot integer_yankdup float_rot integer_yankdup in1 in2 integer_max integer_dec integer_dup integer_dec float_rot float_frominteger float_rot integer_inc float_add print_newline integer_swap float_max print_newline integer_swap print_float 97 float_yank integer_swap float_max 97 float_yank integer_sub float_add integer_dec float_dec float_dec integer_flush float_swap integer_max integer_dec float_dec integer_dup_items float_min float_mult float_dec integer_flush integer_pop integer_rot integer_dec float_dec float_dec integer_flush float_swap float_dec float_min float_mult float_dec float_dec integer_flush float_dec integer_rot float_swap integer_flush float_dec integer_rot integer_dec float_dec print_float integer_flush float_swap integer_rot integer_dec float_dec integer_flush float_swap integer_rot integer_dec float_dec integer_flush float_swap integer_dec float_dec float_dec integer_flush float_dec integer_flush print_integer float_inc integer_rot integer_dec float_dec integer_flush float_swap integer_mult tag_integer_503 integer_flush float_dec float_dec integer_rot float_min float_dec)
Errors: [2.0 3 2.0 3 2.0 3 2.0 3 2.0 3 2.0 3 2.0 3 2.0 3 2.0 3 2.0 3 2.0 3 2.0 4 2.0 4 2.0 4 2.0 3 2.0 4 2.0 4 2.0 3 2.0 4 2.0 3 2.0 3 2.0 4 2.0 3 2.0 3 2.0 3]
Total: 132.0
Mean: 2.64
Genome size: 99
Size: 100
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2903.1172721000007
Median total errors in population: 647.0
Error averages by case: (104.70361150000001 4.308 105.86551210000005 4.322 114.74307440000007 4.528 115.85849519999996 4.526 112.86112250000006 4.345 106.57168030000008 4.525 117.95082320000007 4.344 109.77718439999997 4.099 110.0178582000001 4.433 120.25239770000003 4.304 116.35391520000012 4.381 112.24067800000005 4.854 112.08303730000004 4.376 111.45273330000006 4.842 115.88882840000002 4.534 109.06309590000004 4.925 109.61201029999998 4.211 105.75735120000007 5.465 109.17228710000003 4.227 107.59708739999998 5.686 105.5512966999999 9.964 108.77560259999996 8.436 109.72175160000006 10.271 112.14738430000003 4.455 110.1074533 4.63)
Error minima by case: (0.0 1 0.0 0 0.5304 2 2.0 2 1.0 1 0.0038 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 2 2.0 1 1.522 1 0.0 1 0.0 1 1.0 1 2.0 1 2.0 2 2.0 1 2.0 2 2.0 1 0.8483 1)
Average genome size in population (length): 83.946
Average program size in population (points): 84.946
Average percent parens in population: 0.012
Minimum age in population: 41.9325047954917
Maximum age in population: 45.99535264074802
Average age in population: 44.15576456662826
Median age in population: 44.22101455833763
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.817
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.817
Total error diversity:				 0.171
Error (vector) diversity:			 0.186
Behavioral diversity:				 0.188
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 45931550
--- Timings ---
Current time: 1529616101106 milliseconds
Total Time:         106.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        42.6 seconds, 40.0%
Fitness Testing:     50.7 seconds, 47.5%
Report:              13.2 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Number IO problem report - generation 31
Test total error for best: 4146.0
Test mean error for best: 2.07300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -11.9430292301 | Program output: 

-12.9430292301
Correct output: -36.0896817864 | Program output: 

-37.0896817864
Correct output: -125.5304008101 | Program output: 

-126.5304008101
Correct output: -144.7263106209 | Program output: 

-145.7263106209
Correct output: 103.0168939816 | Program output: 

102.0168939816
Correct output: -16.1223046932 | Program output: 

-17.1223046932
Correct output: 155.9194766204 | Program output: 

154.9194766204
Correct output: 63.2567055278  | Program output: 

62.2567055278
Correct output: -30.306242645  | Program output: 

-31.306242645
Correct output: 174.3686344101 | Program output: 

173.3686344101
Correct output: 129.041505579  | Program output: 

128.041505579
Correct output: 50.0047772031  | Program output: 

49.0047772031
Correct output: -69.2937213159 | Program output: 

-70.2937213159
Correct output: -38.6366450081 | Program output: 

-39.6366450081
Correct output: -153.9889639244 | Program output: 

-154.9889639244
Correct output: -29.5219532451 | Program output: 

-30.5219532451
Correct output: 61.9720188814  | Program output: 

60.9720188814
Correct output: 22.8390413755  | Program output: 

21.8390413755
Correct output: 50.8075713719  | Program output: 

49.8075713719
Correct output: 22.9754753134  | Program output: 

21.9754753134
Correct output: 15.5507980181  | Program output: 

14.5507980181
Correct output: 20.7937377708  | Program output: 

19.7937377708
Correct output: 10.4727220987  | Program output: 

9.4727220987
Correct output: -66.9282665154 | Program output: 

-67.9282665154
Correct output: -91.0294909522 | Program output: 

-92.0294909522
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_rot} {:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_yankdup} {:instruction in1} {:instruction in2} {:instruction integer_max} {:instruction integer_max} {:instruction integer_dup} {:instruction integer_dec} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_rot} {:instruction integer_yankdup} {:instruction float_add} {:instruction print_newline} {:instruction integer_swap} {:instruction float_max} {:instruction print_newline} {:instruction integer_swap} {:instruction print_float} {:instruction 97} {:instruction float_yank} {:instruction integer_swap} {:instruction float_max} {:instruction 97} {:instruction float_yank} {:instruction integer_sub} {:instruction float_add} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_max} {:instruction integer_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_min} {:instruction float_mult} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_pop} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction float_dec} {:instruction float_min} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_rot} {:instruction float_swap} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction print_float} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction print_integer} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_mult})
Best program: (integer_div float_mult float_rot integer_yankdup float_rot integer_yankdup in1 in2 integer_max integer_max integer_dup integer_dec float_rot float_frominteger float_rot integer_yankdup float_add print_newline integer_swap float_max print_newline integer_swap print_float 97 float_yank integer_swap float_max 97 float_yank integer_sub float_add integer_dec float_dec float_dec integer_flush float_swap integer_max integer_dec float_dec integer_dup_items float_min float_mult float_dec integer_flush integer_pop integer_rot integer_dec float_dec float_dec integer_flush float_swap float_dec float_min float_mult float_dec float_dec integer_flush float_dec integer_rot float_swap integer_flush float_dec integer_rot integer_dec float_dec print_float integer_flush float_swap integer_rot integer_dec float_dec integer_flush float_swap integer_rot integer_dec float_dec integer_flush float_swap integer_dec float_dec float_dec integer_flush float_dec integer_flush print_integer float_inc integer_rot integer_dec float_dec integer_flush float_swap integer_mult)
Errors: [1.0 3 1.0 3 1.0 3 1.0 3 1.0 3 1.0 3 1.0 3 1.0 3 1.0 3 1.0 3 1.0 3 1.0 4 1.0 4 1.0 3 1.0 3 1.0 4 1.0 3 1.0 3 1.0 4 1.0 3 1.0 3 1.0 4 1.0 3 1.0 3 1.0 3]
Total: 105.0
Mean: 2.1
Genome size: 92
Size: 93
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2822.6630712
Median total errors in population: 537.0
Error averages by case: (101.54567970000001 4.43 102.01031860000005 4.393 111.68573260000008 4.523 112.74594019999995 4.53 108.22440010000003 4.408 103.3523607000001 4.44 112.87022040000006 4.398 107.23215479999996 4.291 106.93474980000008 4.321 114.20079330000004 4.384 111.9405145000001 4.293 109.36505380000004 4.786 109.40505870000007 4.472 109.40213659999999 4.783 112.86539740000003 4.591 107.01554930000005 4.951 107.54630759999995 4.274 103.54340410000012 3.738 106.8766254 4.328 107.37404989999999 3.769 101.47055729999995 8.986 108.41583469999992 4.492 107.35968030000004 10.22 109.7102585 4.702 108.04629290000004 5.021)
Error minima by case: (0.2696 1 1.0 2 1.0 2 1.0 2 1.0 2 0.0 1 1.0 2 1.0 1 1.0 2 0.3686 1 1.0 1 1.0 2 1.0 1 1.0 2 1.0 2 1.0 2 0.0 0 0.0 0 1.0 1 1.0 1 0.5508 1 1.0 1 1.0 1 1.0 2 1.0 2)
Average genome size in population (length): 79.661
Average program size in population (points): 80.661
Average percent parens in population: 0.013
Minimum age in population: 43.5568335019052
Maximum age in population: 47.62281724531204
Average age in population: 45.68758571668621
Median age in population: 45.67716209357604
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.82
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.82
Total error diversity:				 0.166
Error (vector) diversity:			 0.172
Behavioral diversity:				 0.175
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 47923075
--- Timings ---
Current time: 1529616104958 milliseconds
Total Time:         110.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        43.9 seconds, 39.8%
Fitness Testing:     52.6 seconds, 47.6%
Report:              13.8 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Number IO problem report - generation 32
Test total error for best: 4146.0
Test mean error for best: 2.07300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -11.9430292301 | Program output: 

-12.9430292301
Correct output: -36.0896817864 | Program output: 

-37.0896817864
Correct output: -125.5304008101 | Program output: 

-126.5304008101
Correct output: -144.7263106209 | Program output: 

-145.7263106209
Correct output: 103.0168939816 | Program output: 

102.0168939816
Correct output: -16.1223046932 | Program output: 

-17.1223046932
Correct output: 155.9194766204 | Program output: 

154.9194766204
Correct output: 63.2567055278  | Program output: 

62.2567055278
Correct output: -30.306242645  | Program output: 

-31.306242645
Correct output: 174.3686344101 | Program output: 

173.3686344101
Correct output: 129.041505579  | Program output: 

128.041505579
Correct output: 50.0047772031  | Program output: 

49.0047772031
Correct output: -69.2937213159 | Program output: 

-70.2937213159
Correct output: -38.6366450081 | Program output: 

-39.6366450081
Correct output: -153.9889639244 | Program output: 

-154.9889639244
Correct output: -29.5219532451 | Program output: 

-30.5219532451
Correct output: 61.9720188814  | Program output: 

60.9720188814
Correct output: 22.8390413755  | Program output: 

21.8390413755
Correct output: 50.8075713719  | Program output: 

49.8075713719
Correct output: 22.9754753134  | Program output: 

21.9754753134
Correct output: 15.5507980181  | Program output: 

14.5507980181
Correct output: 20.7937377708  | Program output: 

19.7937377708
Correct output: 10.4727220987  | Program output: 

9.4727220987
Correct output: -66.9282665154 | Program output: 

-67.9282665154
Correct output: -91.0294909522 | Program output: 

-92.0294909522
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_rot} {:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_yankdup} {:instruction in1} {:instruction in2} {:instruction integer_max} {:instruction integer_dec} {:instruction integer_dup} {:instruction integer_dec} {:instruction tag_integer_460} {:instruction float_frominteger} {:instruction float_rot} {:instruction integer_inc} {:instruction float_add} {:instruction print_newline} {:instruction integer_dup_times} {:instruction float_max} {:instruction print_newline} {:instruction integer_swap} {:instruction print_float} {:instruction 97} {:instruction float_yank} {:instruction integer_swap} {:instruction float_max} {:instruction 97} {:instruction float_yank} {:instruction integer_sub} {:instruction float_add} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_max} {:instruction integer_dec} {:instruction float_dec} {:instruction integer_inc} {:instruction float_min} {:instruction float_mult} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction float_dec} {:instruction float_min} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_rot} {:instruction float_swap} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction print_float} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction print_integer} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_mult} {:instruction tag_integer_503} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_min} {:instruction float_dec})
Best program: (integer_div float_mult float_rot integer_yankdup float_rot integer_yankdup in1 in2 integer_max integer_dec integer_dup integer_dec tag_integer_460 float_frominteger float_rot integer_inc float_add print_newline integer_dup_times float_max print_newline integer_swap print_float 97 float_yank integer_swap float_max 97 float_yank integer_sub float_add integer_dec float_dec float_dec integer_flush float_swap integer_max integer_dec float_dec integer_inc float_min float_mult float_dec integer_flush integer_pop integer_dup_times integer_dec float_dec float_dec integer_flush float_swap float_dec float_min float_mult float_dec float_dec integer_flush float_dec integer_rot float_swap integer_flush float_dec integer_rot integer_dec float_dec print_float integer_flush float_swap integer_rot integer_dec float_dec integer_flush float_swap integer_rot integer_dec float_dec integer_flush float_swap integer_dec float_dec float_dec integer_flush float_dec integer_flush print_integer float_inc integer_rot integer_dec float_dec integer_flush float_swap integer_mult tag_integer_503 integer_flush float_dec float_dec integer_rot float_min float_dec)
Errors: [1.0 3 1.0 3 1.0 3 1.0 3 1.0 3 1.0 3 1.0 3 1.0 3 1.0 3 1.0 3 1.0 3 1.0 4 1.0 4 1.0 3 1.0 3 1.0 4 1.0 3 1.0 3 1.0 4 1.0 3 1.0 3 1.0 4 1.0 3 1.0 3 1.0 3]
Total: 105.0
Mean: 2.1
Genome size: 99
Size: 100
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2378.4470564000007
Median total errors in population: 454.0
Error averages by case: (84.61589300000001 4.523 85.64397320000002 4.275 93.87424670000004 4.404 94.92991559999997 4.392 91.38930290000003 4.304 87.57952620000002 4.388 97.04109900000006 4.294 87.0722076 4.167 90.71865480000002 4.258 98.53051320000004 4.289 96.15050520000008 4.229 93.36557840000002 4.708 91.32200169999999 4.612 90.59148460000002 4.672 94.94845500000002 4.43 88.5618102 4.861 87.75000069999999 4.177 84.92574620000002 3.653 86.75224940000001 4.209 88.2933288 3.715 87.14465069999994 5.671 89.1936444 3.661 91.61522530000005 9.543 91.2670829 4.761 89.97096070000002 5.003)
Error minima by case: (1.0 1 1.0 1 1.0 1 1.0 1 1.0 2 0.985 1 1.0 1 0.1849 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 0.0 0 0.0 0 0.0 0 1.0 1 0.4492 1 1.0 1 1.0 1 0.9283 1 1.0 1)
Average genome size in population (length): 78.835
Average program size in population (points): 79.835
Average percent parens in population: 0.013
Minimum age in population: 44.98807034268975
Maximum age in population: 49.1243601469323
Average age in population: 47.21001921451883
Median age in population: 47.275530166924
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.836
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.836
Total error diversity:				 0.163
Error (vector) diversity:			 0.168
Behavioral diversity:				 0.17
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 49893950
--- Timings ---
Current time: 1529616108889 milliseconds
Total Time:         114.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        45.4 seconds, 39.7%
Fitness Testing:     54.5 seconds, 47.7%
Report:              14.3 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Number IO problem report - generation 33
Test total error for best: 1000.0
Test mean error for best: 0.50000
;;------------------------------
Outputs of best individual on training cases:
Correct output: -11.9430292301 | Program output: 
-11.9430292301
Correct output: -36.0896817864 | Program output: 
-36.0896817864
Correct output: -125.5304008101 | Program output: 
-125.5304008101
Correct output: -144.7263106209 | Program output: 
-144.7263106209
Correct output: 103.0168939816 | Program output: 
103.0168939816
Correct output: -16.1223046932 | Program output: 
-16.1223046932
Correct output: 155.9194766204 | Program output: 
155.9194766204
Correct output: 63.2567055278  | Program output: 
63.2567055278
Correct output: -30.306242645  | Program output: 
-30.306242645
Correct output: 174.3686344101 | Program output: 
174.3686344101
Correct output: 129.041505579  | Program output: 
129.041505579
Correct output: 50.0047772031  | Program output: 
50.0047772031
Correct output: -69.2937213159 | Program output: 
-69.2937213159
Correct output: -38.6366450081 | Program output: 
-38.6366450081
Correct output: -153.9889639244 | Program output: 
-153.9889639244
Correct output: -29.5219532451 | Program output: 
-29.5219532451
Correct output: 61.9720188814  | Program output: 
61.9720188814
Correct output: 22.8390413755  | Program output: 
22.8390413755
Correct output: 50.8075713719  | Program output: 
50.8075713719
Correct output: 22.9754753134  | Program output: 
22.9754753134
Correct output: 15.5507980181  | Program output: 
15.5507980181
Correct output: 20.7937377708  | Program output: 
20.7937377708
Correct output: 10.4727220987  | Program output: 
10.4727220987
Correct output: -66.9282665154 | Program output: 
-66.9282665154
Correct output: -91.0294909522 | Program output: 
-91.0294909522
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_rot} {:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_yankdup} {:instruction in1} {:instruction in2} {:instruction integer_max} {:instruction float_frominteger} {:instruction integer_dup} {:instruction integer_dec} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_rot} {:instruction integer_inc} {:instruction float_add} {:instruction float_max} {:instruction print_newline} {:instruction integer_swap} {:instruction print_float} {:instruction 97} {:instruction float_yank} {:instruction integer_swap} {:instruction float_max} {:instruction 97} {:instruction float_yank} {:instruction integer_sub} {:instruction float_add} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_max} {:instruction integer_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_min} {:instruction float_mult} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_pop} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction float_dec} {:instruction float_min} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_rot} {:instruction float_swap} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_swap} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_rot})
Best program: (integer_div float_mult float_rot integer_yankdup float_rot integer_yankdup in1 in2 integer_max float_frominteger integer_dup integer_dec float_rot float_frominteger float_rot integer_inc float_add float_max print_newline integer_swap print_float 97 float_yank integer_swap float_max 97 float_yank integer_sub float_add integer_dec float_dec float_dec integer_flush float_swap integer_max integer_dec float_dec integer_dup_items float_min float_mult float_dec integer_flush integer_pop integer_rot integer_dec float_dec float_dec integer_flush float_swap float_dec float_min float_mult float_dec float_dec integer_flush float_dec integer_rot float_swap integer_flush float_dec integer_rot integer_dec float_dec print_float integer_dup_times float_swap integer_rot integer_dec float_dec integer_flush float_swap integer_rot)
Errors: [0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1]
Total: 25.0
Mean: 0.5
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2058.7659052999998
Median total errors in population: 355.0
Error averages by case: (71.79720200000001 4.379 72.9542389 3.962 82.03450360000004 3.991 82.82568989999996 3.976 80.00731940000006 4.025 76.56240720000007 4.049 84.00794140000004 3.927 74.4829105 3.919 79.47011390000003 3.801 85.14070160000006 3.936 83.54992250000004 3.798 81.25532710000002 4.712 78.1799232 4.774 78.6033062 4.543 82.70118770000002 3.994 76.31999890000002 4.814 75.29123430000001 4.086 71.9795598 3.794 74.3815005 4.121 74.8739905 3.885 73.76151910000002 3.928 75.7668928 3.832 80.31582990000004 6.671 78.2247906 4.596 78.42589380000001 4.339)
Error minima by case: (0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 0 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1)
Average genome size in population (length): 79.247
Average program size in population (points): 80.247
Average percent parens in population: 0.013
Minimum age in population: 46.54943244997412
Maximum age in population: 50.60666908090934
Average age in population: 48.68145046623028
Median age in population: 48.7057448909618
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.849
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.849
Total error diversity:				 0.155
Error (vector) diversity:			 0.157
Behavioral diversity:				 0.161
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 51875125
--- Timings ---
Current time: 1529616112660 milliseconds
Total Time:         118.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        46.7 seconds, 39.5%
Fitness Testing:     56.5 seconds, 47.8%
Report:              14.9 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Number IO problem report - generation 34
Test total error for best: 1000.0
Test mean error for best: 0.50000
;;------------------------------
Outputs of best individual on training cases:
Correct output: -11.9430292301 | Program output: 
-11.9430292301
Correct output: -36.0896817864 | Program output: 
-36.0896817864
Correct output: -125.5304008101 | Program output: 
-125.5304008101
Correct output: -144.7263106209 | Program output: 
-144.7263106209
Correct output: 103.0168939816 | Program output: 
103.0168939816
Correct output: -16.1223046932 | Program output: 
-16.1223046932
Correct output: 155.9194766204 | Program output: 
155.9194766204
Correct output: 63.2567055278  | Program output: 
63.2567055278
Correct output: -30.306242645  | Program output: 
-30.306242645
Correct output: 174.3686344101 | Program output: 
174.3686344101
Correct output: 129.041505579  | Program output: 
129.041505579
Correct output: 50.0047772031  | Program output: 
50.0047772031
Correct output: -69.2937213159 | Program output: 
-69.2937213159
Correct output: -38.6366450081 | Program output: 
-38.6366450081
Correct output: -153.9889639244 | Program output: 
-153.9889639244
Correct output: -29.5219532451 | Program output: 
-29.5219532451
Correct output: 61.9720188814  | Program output: 
61.9720188814
Correct output: 22.8390413755  | Program output: 
22.8390413755
Correct output: 50.8075713719  | Program output: 
50.8075713719
Correct output: 22.9754753134  | Program output: 
22.9754753134
Correct output: 15.5507980181  | Program output: 
15.5507980181
Correct output: 20.7937377708  | Program output: 
20.7937377708
Correct output: 10.4727220987  | Program output: 
10.4727220987
Correct output: -66.9282665154 | Program output: 
-66.9282665154
Correct output: -91.0294909522 | Program output: 
-91.0294909522
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_rot} {:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_yankdup} {:instruction in1} {:instruction in2} {:instruction integer_max} {:instruction float_frominteger} {:instruction integer_dup} {:instruction integer_dec} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_rot} {:instruction integer_inc} {:instruction float_add} {:instruction float_rot} {:instruction integer_inc} {:instruction float_add} {:instruction print_newline} {:instruction integer_swap} {:instruction tagged_550} {:instruction 97} {:instruction float_yank} {:instruction print_float} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_max} {:instruction integer_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_min} {:instruction float_mult} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_rot} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction float_dec} {:instruction float_min} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_inc} {:instruction integer_flush} {:instruction float_swap} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction print_integer} {:instruction float_inc} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_flush} {:instruction integer_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_dec} {:instruction integer_flush} {:instruction float_inc} {:instruction tag_integer_366} {:instruction integer_flush} {:instruction print_float})
Best program: (integer_div float_mult float_rot integer_yankdup float_rot integer_yankdup in1 in2 integer_max float_frominteger integer_dup integer_dec float_rot float_frominteger float_rot integer_inc float_add float_rot integer_inc float_add print_newline integer_swap tagged_550 97 float_yank print_float integer_rot integer_dec float_dec float_dec integer_flush float_swap integer_max integer_dec float_dec integer_dup_items float_min float_mult float_dec integer_flush float_swap integer_rot integer_dec integer_dup_times float_dec integer_flush float_swap float_dec float_min float_mult float_dec float_dec integer_max float_inc integer_flush float_swap float_dec float_dec integer_flush float_dec integer_flush print_integer float_inc integer_rot float_dec float_dec integer_flush integer_flush integer_dec integer_flush float_dec integer_dec integer_flush float_inc tag_integer_366 integer_flush print_float)
Errors: [0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1]
Total: 25.0
Mean: 0.5
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 1349.8517324
Median total errors in population: 132.0
Error averages by case: (45.008005300000015 3.93 45.68161320000001 3.558 53.592209900000014 3.561 54.3834505 3.535 50.9262547 3.561 48.61345700000001 3.679 54.88963110000003 3.509 46.3000929 3.52 50.887003099999994 3.527 55.855337300000016 3.499 54.49528289999999 3.449 52.94756759999998 4.71 50.5702628 4.81 50.27955230000001 4.424 54.30056810000002 3.628 48.3683771 4.766 47.25279810000002 4.042 44.903301500000005 3.547 46.4484444 4.189 47.838231300000004 3.639 47.6194663 3.767 48.8457498 4.221 52.24518260000002 3.94 50.586792800000005 4.157 50.286099799999995 3.559)
Error minima by case: (0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 0 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1)
Average genome size in population (length): 84.838
Average program size in population (points): 85.838
Average percent parens in population: 0.012
Minimum age in population: 47.67275258712471
Maximum age in population: 52.04554942296818
Average age in population: 50.19153444199834
Median age in population: 50.26128739997512
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.845
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.845
Total error diversity:				 0.131
Error (vector) diversity:			 0.133
Behavioral diversity:				 0.146
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 53996150
--- Timings ---
Current time: 1529616116579 milliseconds
Total Time:         122.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        48.1 seconds, 39.4%
Fitness Testing:     58.5 seconds, 47.9%
Report:              15.4 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Number IO problem report - generation 35
Test total error for best: 0.0
Test mean error for best: 0.00000
Test Case    0 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    1 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    2 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    3 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    4 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    5 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    6 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    7 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    8 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    9 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   10 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   11 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   12 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   13 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   14 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   15 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   16 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   17 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   18 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   19 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   20 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   21 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   22 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   23 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   24 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   25 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   26 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   27 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   28 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   29 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   30 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   31 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   32 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   33 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   34 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   35 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   36 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   37 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   38 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   39 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   40 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   41 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   42 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   43 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   44 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   45 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   46 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   47 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   48 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   49 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   50 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   51 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   52 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   53 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   54 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   55 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   56 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   57 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   58 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   59 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   60 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   61 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   62 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   63 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   64 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   65 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   66 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   67 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   68 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   69 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   70 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   71 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   72 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   73 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   74 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   75 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   76 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   77 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   78 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   79 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   80 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   81 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   82 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   83 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   84 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   85 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   86 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   87 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   88 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   89 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   90 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   91 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   92 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   93 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   94 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   95 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   96 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   97 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   98 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   99 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  100 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  101 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  102 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  103 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  104 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  105 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  106 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  107 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  108 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  109 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  110 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  111 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  112 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  113 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  114 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  115 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  116 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  117 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  118 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  119 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  120 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  121 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  122 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  123 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  124 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  125 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  126 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  127 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  128 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  129 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  130 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  131 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  132 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  133 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  134 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  135 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  136 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  137 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  138 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  139 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  140 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  141 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  142 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  143 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  144 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  145 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  146 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  147 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  148 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  149 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  150 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  151 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  152 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  153 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  154 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  155 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  156 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  157 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  158 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  159 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  160 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  161 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  162 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  163 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  164 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  165 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  166 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  167 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  168 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  169 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  170 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  171 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  172 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  173 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  174 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  175 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  176 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  177 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  178 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  179 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  180 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  181 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  182 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  183 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  184 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  185 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  186 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  187 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  188 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  189 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  190 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  191 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  192 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  193 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  194 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  195 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  196 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  197 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  198 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  199 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  200 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  201 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  202 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  203 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  204 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  205 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  206 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  207 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  208 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  209 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  210 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  211 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  212 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  213 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  214 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  215 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  216 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  217 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  218 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  219 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  220 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  221 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  222 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  223 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  224 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  225 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  226 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  227 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  228 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  229 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  230 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  231 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  232 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  233 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  234 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  235 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  236 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  237 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  238 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  239 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  240 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  241 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  242 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  243 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  244 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  245 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  246 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  247 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  248 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  249 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  250 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  251 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  252 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  253 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  254 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  255 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  256 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  257 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  258 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  259 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  260 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  261 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  262 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  263 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  264 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  265 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  266 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  267 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  268 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  269 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  270 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  271 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  272 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  273 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  274 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  275 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  276 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  277 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  278 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  279 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  280 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  281 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  282 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  283 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  284 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  285 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  286 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  287 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  288 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  289 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  290 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  291 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  292 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  293 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  294 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  295 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  296 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  297 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  298 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  299 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  300 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  301 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  302 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  303 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  304 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  305 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  306 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  307 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  308 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  309 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  310 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  311 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  312 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  313 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  314 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  315 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  316 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  317 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  318 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  319 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  320 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  321 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  322 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  323 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  324 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  325 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  326 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  327 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  328 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  329 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  330 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  331 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  332 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  333 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  334 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  335 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  336 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  337 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  338 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  339 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  340 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  341 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  342 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  343 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  344 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  345 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  346 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  347 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  348 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  349 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  350 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  351 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  352 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  353 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  354 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  355 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  356 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  357 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  358 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  359 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  360 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  361 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  362 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  363 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  364 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  365 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  366 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  367 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  368 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  369 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  370 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  371 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  372 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  373 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  374 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  375 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  376 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  377 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  378 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  379 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  380 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  381 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  382 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  383 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  384 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  385 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  386 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  387 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  388 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  389 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  390 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  391 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  392 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  393 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  394 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  395 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  396 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  397 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  398 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  399 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  400 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  401 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  402 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  403 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  404 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  405 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  406 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  407 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  408 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  409 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  410 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  411 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  412 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  413 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  414 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  415 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  416 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  417 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  418 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  419 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  420 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  421 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  422 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  423 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  424 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  425 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  426 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  427 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  428 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  429 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  430 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  431 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  432 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  433 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  434 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  435 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  436 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  437 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  438 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  439 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  440 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  441 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  442 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  443 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  444 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  445 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  446 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  447 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  448 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  449 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  450 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  451 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  452 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  453 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  454 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  455 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  456 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  457 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  458 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  459 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  460 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  461 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  462 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  463 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  464 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  465 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  466 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  467 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  468 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  469 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  470 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  471 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  472 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  473 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  474 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  475 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  476 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  477 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  478 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  479 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  480 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  481 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  482 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  483 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  484 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  485 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  486 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  487 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  488 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  489 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  490 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  491 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  492 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  493 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  494 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  495 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  496 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  497 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  498 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  499 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  500 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  501 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  502 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  503 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  504 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  505 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  506 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  507 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  508 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  509 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  510 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  511 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  512 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  513 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  514 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  515 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  516 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  517 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  518 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  519 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  520 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  521 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  522 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  523 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  524 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  525 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  526 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  527 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  528 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  529 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  530 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  531 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  532 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  533 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  534 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  535 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  536 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  537 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  538 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  539 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  540 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  541 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  542 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  543 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  544 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  545 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  546 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  547 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  548 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  549 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  550 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  551 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  552 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  553 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  554 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  555 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  556 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  557 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  558 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  559 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  560 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  561 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  562 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  563 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  564 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  565 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  566 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  567 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  568 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  569 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  570 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  571 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  572 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  573 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  574 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  575 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  576 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  577 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  578 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  579 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  580 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  581 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  582 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  583 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  584 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  585 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  586 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  587 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  588 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  589 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  590 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  591 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  592 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  593 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  594 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  595 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  596 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  597 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  598 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  599 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  600 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  601 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  602 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  603 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  604 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  605 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  606 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  607 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  608 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  609 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  610 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  611 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  612 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  613 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  614 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  615 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  616 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  617 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  618 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  619 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  620 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  621 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  622 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  623 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  624 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  625 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  626 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  627 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  628 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  629 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  630 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  631 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  632 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  633 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  634 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  635 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  636 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  637 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  638 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  639 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  640 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  641 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  642 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  643 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  644 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  645 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  646 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  647 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  648 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  649 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  650 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  651 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  652 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  653 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  654 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  655 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  656 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  657 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  658 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  659 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  660 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  661 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  662 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  663 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  664 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  665 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  666 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  667 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  668 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  669 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  670 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  671 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  672 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  673 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  674 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  675 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  676 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  677 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  678 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  679 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  680 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  681 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  682 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  683 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  684 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  685 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  686 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  687 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  688 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  689 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  690 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  691 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  692 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  693 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  694 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  695 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  696 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  697 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  698 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  699 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  700 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  701 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  702 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  703 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  704 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  705 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  706 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  707 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  708 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  709 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  710 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  711 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  712 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  713 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  714 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  715 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  716 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  717 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  718 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  719 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  720 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  721 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  722 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  723 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  724 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  725 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  726 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  727 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  728 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  729 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  730 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  731 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  732 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  733 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  734 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  735 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  736 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  737 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  738 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  739 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  740 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  741 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  742 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  743 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  744 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  745 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  746 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  747 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  748 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  749 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  750 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  751 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  752 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  753 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  754 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  755 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  756 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  757 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  758 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  759 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  760 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  761 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  762 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  763 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  764 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  765 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  766 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  767 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  768 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  769 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  770 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  771 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  772 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  773 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  774 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  775 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  776 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  777 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  778 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  779 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  780 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  781 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  782 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  783 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  784 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  785 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  786 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  787 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  788 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  789 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  790 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  791 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  792 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  793 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  794 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  795 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  796 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  797 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  798 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  799 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  800 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  801 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  802 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  803 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  804 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  805 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  806 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  807 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  808 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  809 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  810 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  811 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  812 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  813 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  814 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  815 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  816 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  817 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  818 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  819 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  820 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  821 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  822 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  823 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  824 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  825 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  826 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  827 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  828 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  829 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  830 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  831 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  832 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  833 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  834 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  835 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  836 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  837 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  838 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  839 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  840 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  841 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  842 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  843 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  844 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  845 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  846 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  847 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  848 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  849 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  850 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  851 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  852 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  853 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  854 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  855 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  856 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  857 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  858 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  859 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  860 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  861 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  862 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  863 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  864 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  865 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  866 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  867 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  868 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  869 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  870 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  871 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  872 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  873 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  874 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  875 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  876 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  877 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  878 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  879 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  880 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  881 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  882 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  883 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  884 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  885 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  886 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  887 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  888 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  889 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  890 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  891 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  892 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  893 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  894 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  895 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  896 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  897 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  898 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  899 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  900 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  901 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  902 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  903 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  904 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  905 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  906 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  907 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  908 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  909 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  910 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  911 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  912 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  913 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  914 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  915 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  916 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  917 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  918 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  919 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  920 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  921 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  922 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  923 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  924 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  925 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  926 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  927 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  928 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  929 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  930 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  931 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  932 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  933 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  934 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  935 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  936 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  937 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  938 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  939 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  940 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  941 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  942 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  943 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  944 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  945 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  946 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  947 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  948 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  949 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  950 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  951 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  952 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  953 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  954 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  955 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  956 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  957 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  958 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  959 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  960 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  961 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  962 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  963 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  964 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  965 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  966 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  967 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  968 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  969 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  970 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  971 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  972 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  973 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  974 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  975 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  976 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  977 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  978 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  979 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  980 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  981 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  982 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  983 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  984 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  985 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  986 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  987 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  988 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  989 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  990 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  991 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  992 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  993 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  994 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  995 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  996 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  997 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  998 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  999 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: -11.9430292301 | Program output: -11.9430292301
Correct output: -36.0896817864 | Program output: -36.0896817864
Correct output: -125.5304008101 | Program output: -125.5304008101
Correct output: -144.7263106209 | Program output: -144.7263106209
Correct output: 103.0168939816 | Program output: 103.0168939816
Correct output: -16.1223046932 | Program output: -16.1223046932
Correct output: 155.9194766204 | Program output: 155.9194766204
Correct output: 63.2567055278  | Program output: 63.2567055278 
Correct output: -30.306242645  | Program output: -30.306242645 
Correct output: 174.3686344101 | Program output: 174.3686344101
Correct output: 129.041505579  | Program output: 129.041505579 
Correct output: 50.0047772031  | Program output: 50.0047772031 
Correct output: -69.2937213159 | Program output: -69.2937213159
Correct output: -38.6366450081 | Program output: -38.6366450081
Correct output: -153.9889639244 | Program output: -153.9889639244
Correct output: -29.5219532451 | Program output: -29.5219532451
Correct output: 61.9720188814  | Program output: 61.9720188814 
Correct output: 22.8390413755  | Program output: 22.8390413755 
Correct output: 50.8075713719  | Program output: 50.8075713719 
Correct output: 22.9754753134  | Program output: 22.9754753134 
Correct output: 15.5507980181  | Program output: 15.5507980181 
Correct output: 20.7937377708  | Program output: 20.7937377708 
Correct output: 10.4727220987  | Program output: 10.4727220987 
Correct output: -66.9282665154 | Program output: -66.9282665154
Correct output: -91.0294909522 | Program output: -91.0294909522
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_mult} {:instruction float_rot} {:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_yankdup} {:instruction in1} {:instruction in2} {:instruction integer_max} {:instruction float_frominteger} {:instruction integer_dup} {:instruction integer_dec} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_rot} {:instruction integer_inc} {:instruction float_add} {:instruction integer_dup} {:instruction integer_swap} {:instruction float_max} {:instruction 97} {:instruction float_yank} {:instruction integer_swap} {:instruction print_float} {:instruction 97} {:instruction float_yank} {:instruction integer_swap} {:instruction float_max} {:instruction 97} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_max} {:instruction integer_dec} {:instruction print_float} {:instruction integer_dup_items} {:instruction float_min} {:instruction float_mult} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_rot} {:instruction integer_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction float_dec} {:instruction float_min} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction in2} {:instruction float_swap} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_flush} {:instruction integer_flush} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_rot})
Best program: (integer_div float_mult float_rot integer_yankdup float_rot integer_yankdup in1 in2 integer_max float_frominteger integer_dup integer_dec float_rot float_frominteger float_rot integer_inc float_add integer_dup integer_swap float_max 97 float_yank integer_swap print_float 97 float_yank integer_swap float_max 97 float_dec float_dec integer_flush float_swap integer_max integer_dec print_float integer_dup_items float_min float_mult float_dec integer_flush float_swap integer_rot integer_dec integer_flush float_dec integer_flush float_swap float_dec float_min integer_shove float_dec float_yankdup integer_flush float_dec in2 float_swap integer_flush float_dec integer_rot integer_flush integer_flush integer_dec float_dec float_dec integer_flush float_dec float_dec integer_rot integer_dec float_dec float_dec integer_flush float_swap integer_rot)
Errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
Total: 0.0
Mean: 0.0
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 1363.0124846
Median total errors in population: 105.0
Error averages by case: (47.57787890000001 3.578 48.6168985 3.097 54.34565790000002 3.208 54.957453799999996 3.202 50.555090299999996 3.074 48.72939990000001 3.166 53.47380200000001 3.101 48.12184350000001 3.084 50.568946099999984 3.134 54.210921200000016 3.087 53.019967199999996 3.064 52.6922697 4.132 52.71733450000001 4.335 52.57081999999999 3.697 54.85821910000003 3.272 51.0541344 4.317 49.01181500000001 3.334 47.1696152 3.1 48.3741618 3.748 49.66046140000002 3.185 48.136588300000014 3.334 50.49225809999999 3.804 52.24468740000002 3.497 52.73759150000001 3.688 51.6966689 3.18)
Error minima by case: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
Average genome size in population (length): 84.017
Average program size in population (points): 85.017
Average percent parens in population: 0.012
Minimum age in population: 48.89517367072403
Maximum age in population: 53.52799219143344
Average age in population: 51.57654225620208
Median age in population: 51.6151552523952
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.847
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.847
Total error diversity:				 0.108
Error (vector) diversity:			 0.112
Behavioral diversity:				 0.123
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 56096900
--- Timings ---
Current time: 1529616120482 milliseconds
Total Time:         126.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.5 seconds, 39.3%
Fitness Testing:     60.5 seconds, 48.0%
Report:              15.9 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 35
Successful program: (integer_div float_mult float_rot integer_yankdup float_rot integer_yankdup in1 in2 integer_max float_frominteger integer_dup integer_dec float_rot float_frominteger float_rot integer_inc float_add integer_dup integer_swap float_max 97 float_yank integer_swap print_float 97 float_yank integer_swap float_max 97 float_dec float_dec integer_flush float_swap integer_max integer_dec print_float integer_dup_items float_min float_mult float_dec integer_flush float_swap integer_rot integer_dec integer_flush float_dec integer_flush float_swap float_dec float_min integer_shove float_dec float_yankdup integer_flush float_dec in2 float_swap integer_flush float_dec integer_rot integer_flush integer_flush integer_dec float_dec float_dec integer_flush float_dec float_dec integer_rot integer_dec float_dec float_dec integer_flush float_swap integer_rot)
Errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
Total error: 0.0
History: null
Size: 76


Auto-simplifying with starting size: 76
step: 0
program: (integer_div float_mult float_rot integer_yankdup float_rot integer_yankdup in1 in2 integer_max float_frominteger integer_dup integer_dec float_rot float_frominteger float_rot integer_inc float_add integer_dup integer_swap float_max 97 float_yank integer_swap print_float 97 float_yank integer_swap float_max 97 float_dec float_dec integer_flush float_swap integer_max integer_dec print_float integer_dup_items float_min float_mult float_dec integer_flush float_swap integer_rot integer_dec integer_flush float_dec integer_flush float_swap float_dec float_min integer_shove float_dec float_yankdup integer_flush float_dec in2 float_swap integer_flush float_dec integer_rot integer_flush integer_flush integer_dec float_dec float_dec integer_flush float_dec float_dec integer_rot integer_dec float_dec float_dec integer_flush float_swap integer_rot)
errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
total: 0.0
size: 76

step: 500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 1000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 1500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 2000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 2500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 3000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 3500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 4000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 4500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 5000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Number IO problem report - generation 35
Test total error for best: 0.0
Test mean error for best: 0.00000
Test Case    0 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    1 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    2 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    3 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    4 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    5 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    6 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    7 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    8 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    9 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   10 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   11 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   12 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   13 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   14 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   15 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   16 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   17 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   18 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   19 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   20 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   21 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   22 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   23 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   24 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   25 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   26 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   27 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   28 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   29 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   30 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   31 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   32 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   33 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   34 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   35 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   36 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   37 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   38 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   39 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   40 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   41 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   42 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   43 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   44 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   45 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   46 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   47 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   48 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   49 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   50 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   51 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   52 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   53 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   54 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   55 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   56 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   57 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   58 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   59 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   60 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   61 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   62 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   63 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   64 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   65 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   66 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   67 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   68 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   69 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   70 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   71 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   72 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   73 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   74 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   75 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   76 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   77 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   78 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   79 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   80 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   81 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   82 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   83 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   84 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   85 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   86 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   87 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   88 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   89 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   90 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   91 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   92 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   93 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   94 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   95 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   96 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   97 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   98 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   99 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  100 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  101 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  102 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  103 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  104 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  105 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  106 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  107 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  108 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  109 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  110 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  111 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  112 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  113 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  114 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  115 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  116 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  117 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  118 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  119 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  120 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  121 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  122 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  123 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  124 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  125 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  126 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  127 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  128 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  129 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  130 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  131 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  132 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  133 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  134 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  135 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  136 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  137 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  138 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  139 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  140 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  141 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  142 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  143 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  144 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  145 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  146 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  147 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  148 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  149 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  150 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  151 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  152 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  153 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  154 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  155 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  156 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  157 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  158 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  159 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  160 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  161 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  162 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  163 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  164 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  165 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  166 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  167 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  168 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  169 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  170 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  171 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  172 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  173 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  174 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  175 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  176 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  177 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  178 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  179 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  180 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  181 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  182 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  183 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  184 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  185 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  186 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  187 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  188 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  189 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  190 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  191 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  192 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  193 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  194 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  195 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  196 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  197 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  198 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  199 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  200 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  201 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  202 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  203 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  204 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  205 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  206 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  207 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  208 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  209 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  210 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  211 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  212 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  213 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  214 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  215 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  216 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  217 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  218 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  219 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  220 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  221 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  222 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  223 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  224 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  225 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  226 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  227 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  228 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  229 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  230 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  231 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  232 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  233 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  234 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  235 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  236 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  237 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  238 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  239 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  240 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  241 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  242 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  243 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  244 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  245 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  246 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  247 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  248 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  249 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  250 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  251 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  252 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  253 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  254 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  255 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  256 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  257 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  258 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  259 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  260 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  261 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  262 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  263 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  264 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  265 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  266 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  267 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  268 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  269 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  270 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  271 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  272 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  273 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  274 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  275 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  276 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  277 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  278 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  279 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  280 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  281 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  282 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  283 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  284 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  285 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  286 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  287 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  288 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  289 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  290 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  291 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  292 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  293 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  294 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  295 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  296 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  297 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  298 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  299 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  300 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  301 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  302 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  303 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  304 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  305 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  306 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  307 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  308 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  309 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  310 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  311 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  312 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  313 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  314 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  315 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  316 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  317 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  318 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  319 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  320 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  321 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  322 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  323 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  324 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  325 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  326 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  327 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  328 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  329 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  330 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  331 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  332 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  333 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  334 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  335 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  336 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  337 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  338 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  339 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  340 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  341 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  342 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  343 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  344 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  345 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  346 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  347 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  348 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  349 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  350 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  351 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  352 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  353 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  354 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  355 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  356 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  357 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  358 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  359 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  360 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  361 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  362 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  363 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  364 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  365 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  366 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  367 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  368 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  369 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  370 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  371 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  372 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  373 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  374 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  375 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  376 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  377 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  378 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  379 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  380 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  381 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  382 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  383 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  384 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  385 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  386 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  387 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  388 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  389 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  390 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  391 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  392 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  393 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  394 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  395 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  396 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  397 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  398 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  399 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  400 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  401 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  402 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  403 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  404 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  405 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  406 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  407 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  408 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  409 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  410 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  411 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  412 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  413 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  414 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  415 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  416 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  417 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  418 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  419 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  420 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  421 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  422 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  423 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  424 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  425 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  426 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  427 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  428 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  429 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  430 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  431 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  432 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  433 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  434 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  435 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  436 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  437 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  438 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  439 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  440 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  441 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  442 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  443 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  444 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  445 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  446 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  447 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  448 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  449 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  450 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  451 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  452 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  453 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  454 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  455 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  456 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  457 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  458 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  459 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  460 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  461 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  462 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  463 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  464 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  465 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  466 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  467 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  468 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  469 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  470 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  471 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  472 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  473 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  474 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  475 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  476 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  477 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  478 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  479 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  480 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  481 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  482 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  483 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  484 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  485 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  486 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  487 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  488 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  489 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  490 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  491 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  492 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  493 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  494 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  495 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  496 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  497 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  498 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  499 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  500 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  501 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  502 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  503 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  504 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  505 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  506 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  507 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  508 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  509 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  510 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  511 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  512 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  513 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  514 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  515 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  516 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  517 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  518 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  519 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  520 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  521 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  522 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  523 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  524 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  525 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  526 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  527 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  528 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  529 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  530 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  531 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  532 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  533 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  534 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  535 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  536 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  537 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  538 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  539 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  540 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  541 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  542 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  543 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  544 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  545 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  546 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  547 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  548 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  549 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  550 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  551 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  552 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  553 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  554 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  555 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  556 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  557 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  558 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  559 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  560 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  561 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  562 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  563 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  564 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  565 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  566 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  567 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  568 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  569 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  570 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  571 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  572 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  573 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  574 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  575 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  576 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  577 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  578 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  579 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  580 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  581 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  582 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  583 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  584 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  585 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  586 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  587 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  588 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  589 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  590 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  591 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  592 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  593 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  594 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  595 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  596 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  597 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  598 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  599 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  600 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  601 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  602 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  603 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  604 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  605 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  606 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  607 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  608 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  609 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  610 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  611 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  612 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  613 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  614 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  615 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  616 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  617 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  618 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  619 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  620 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  621 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  622 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  623 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  624 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  625 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  626 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  627 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  628 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  629 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  630 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  631 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  632 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  633 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  634 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  635 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  636 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  637 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  638 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  639 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  640 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  641 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  642 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  643 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  644 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  645 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  646 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  647 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  648 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  649 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  650 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  651 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  652 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  653 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  654 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  655 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  656 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  657 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  658 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  659 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  660 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  661 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  662 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  663 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  664 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  665 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  666 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  667 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  668 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  669 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  670 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  671 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  672 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  673 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  674 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  675 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  676 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  677 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  678 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  679 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  680 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  681 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  682 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  683 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  684 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  685 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  686 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  687 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  688 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  689 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  690 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  691 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  692 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  693 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  694 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  695 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  696 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  697 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  698 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  699 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  700 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  701 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  702 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  703 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  704 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  705 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  706 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  707 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  708 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  709 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  710 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  711 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  712 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  713 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  714 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  715 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  716 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  717 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  718 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  719 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  720 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  721 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  722 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  723 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  724 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  725 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  726 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  727 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  728 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  729 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  730 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  731 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  732 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  733 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  734 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  735 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  736 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  737 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  738 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  739 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  740 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  741 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  742 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  743 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  744 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  745 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  746 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  747 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  748 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  749 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  750 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  751 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  752 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  753 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  754 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  755 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  756 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  757 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  758 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  759 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  760 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  761 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  762 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  763 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  764 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  765 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  766 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  767 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  768 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  769 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  770 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  771 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  772 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  773 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  774 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  775 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  776 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  777 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  778 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  779 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  780 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  781 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  782 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  783 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  784 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  785 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  786 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  787 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  788 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  789 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  790 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  791 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  792 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  793 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  794 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  795 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  796 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  797 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  798 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  799 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  800 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  801 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  802 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  803 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  804 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  805 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  806 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  807 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  808 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  809 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  810 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  811 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  812 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  813 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  814 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  815 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  816 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  817 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  818 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  819 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  820 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  821 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  822 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  823 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  824 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  825 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  826 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  827 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  828 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  829 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  830 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  831 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  832 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  833 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  834 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  835 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  836 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  837 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  838 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  839 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  840 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  841 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  842 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  843 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  844 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  845 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  846 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  847 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  848 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  849 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  850 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  851 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  852 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  853 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  854 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  855 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  856 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  857 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  858 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  859 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  860 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  861 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  862 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  863 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  864 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  865 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  866 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  867 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  868 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  869 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  870 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  871 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  872 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  873 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  874 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  875 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  876 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  877 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  878 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  879 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  880 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  881 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  882 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  883 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  884 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  885 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  886 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  887 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  888 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  889 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  890 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  891 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  892 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  893 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  894 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  895 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  896 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  897 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  898 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  899 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  900 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  901 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  902 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  903 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  904 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  905 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  906 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  907 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  908 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  909 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  910 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  911 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  912 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  913 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  914 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  915 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  916 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  917 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  918 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  919 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  920 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  921 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  922 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  923 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  924 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  925 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  926 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  927 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  928 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  929 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  930 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  931 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  932 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  933 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  934 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  935 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  936 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  937 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  938 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  939 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  940 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  941 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  942 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  943 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  944 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  945 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  946 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  947 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  948 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  949 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  950 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  951 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  952 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  953 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  954 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  955 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  956 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  957 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  958 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  959 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  960 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  961 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  962 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  963 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  964 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  965 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  966 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  967 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  968 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  969 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  970 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  971 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  972 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  973 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  974 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  975 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  976 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  977 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  978 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  979 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  980 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  981 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  982 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  983 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  984 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  985 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  986 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  987 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  988 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  989 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  990 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  991 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  992 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  993 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  994 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  995 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  996 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  997 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  998 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  999 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: -11.9430292301 | Program output: -11.9430292301
Correct output: -36.0896817864 | Program output: -36.0896817864
Correct output: -125.5304008101 | Program output: -125.5304008101
Correct output: -144.7263106209 | Program output: -144.7263106209
Correct output: 103.0168939816 | Program output: 103.0168939816
Correct output: -16.1223046932 | Program output: -16.1223046932
Correct output: 155.9194766204 | Program output: 155.9194766204
Correct output: 63.2567055278  | Program output: 63.2567055278 
Correct output: -30.306242645  | Program output: -30.306242645 
Correct output: 174.3686344101 | Program output: 174.3686344101
Correct output: 129.041505579  | Program output: 129.041505579 
Correct output: 50.0047772031  | Program output: 50.0047772031 
Correct output: -69.2937213159 | Program output: -69.2937213159
Correct output: -38.6366450081 | Program output: -38.6366450081
Correct output: -153.9889639244 | Program output: -153.9889639244
Correct output: -29.5219532451 | Program output: -29.5219532451
Correct output: 61.9720188814  | Program output: 61.9720188814 
Correct output: 22.8390413755  | Program output: 22.8390413755 
Correct output: 50.8075713719  | Program output: 50.8075713719 
Correct output: 22.9754753134  | Program output: 22.9754753134 
Correct output: 15.5507980181  | Program output: 15.5507980181 
Correct output: 20.7937377708  | Program output: 20.7937377708 
Correct output: 10.4727220987  | Program output: 10.4727220987 
Correct output: -66.9282665154 | Program output: -66.9282665154
Correct output: -91.0294909522 | Program output: -91.0294909522
;;******************************
