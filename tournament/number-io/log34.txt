Command line args: clojush.problems.software.number-io :parent-selection :tournament :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
epigenetic-markers = []
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :tournament
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
report-simplifications = 0
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [[-65.34625765986667 96] 30.653742340133334]
Train Case:   1 | Input/Output: [[87.16939553282873 34] 121.16939553282873]
Train Case:   2 | Input/Output: [[-20.147149601751124 -67] -87.14714960175112]
Train Case:   3 | Input/Output: [[39.61654828337561 -66] -26.383451716624393]
Train Case:   4 | Input/Output: [[-65.35297703894712 83] 17.647022961052883]
Train Case:   5 | Input/Output: [[-32.37511381608135 57] 24.624886183918647]
Train Case:   6 | Input/Output: [[97.98938171225751 61] 158.9893817122575]
Train Case:   7 | Input/Output: [[15.83912754203169 12] 27.83912754203169]
Train Case:   8 | Input/Output: [[32.871124501903466 81] 113.87112450190347]
Train Case:   9 | Input/Output: [[56.11563401155405 23] 79.11563401155405]
Train Case:  10 | Input/Output: [[33.936576245052805 32] 65.9365762450528]
Train Case:  11 | Input/Output: [[-46.51381474104419 6] -40.51381474104419]
Train Case:  12 | Input/Output: [[98.10335083076055 81] 179.10335083076055]
Train Case:  13 | Input/Output: [[-88.96255426456858 -63] -151.96255426456858]
Train Case:  14 | Input/Output: [[15.335274960469448 41] 56.33527496046945]
Train Case:  15 | Input/Output: [[-50.25453018322248 -99] -149.25453018322247]
Train Case:  16 | Input/Output: [[50.711105735222986 79] 129.711105735223]
Train Case:  17 | Input/Output: [[-29.83805223238636 28] -1.8380522323863602]
Train Case:  18 | Input/Output: [[95.595852680935 -95] 0.5958526809349962]
Train Case:  19 | Input/Output: [[91.00651097531838 59] 150.00651097531838]
Train Case:  20 | Input/Output: [[76.9453643163996 -98] -21.054635683600395]
Train Case:  21 | Input/Output: [[-55.10948878666741 -57] -112.10948878666741]
Train Case:  22 | Input/Output: [[43.24956068480881 31] 74.24956068480881]
Train Case:  23 | Input/Output: [[0.18895618628467048 -75] -74.81104381371533]
Train Case:  24 | Input/Output: [[-43.79039839150789 -12] -55.79039839150789]
Test Case:   0 | Input/Output: [[76.87199940917247 -18] 58.871999409172474]
Test Case:   1 | Input/Output: [[64.12167744508832 -33] 31.121677445088324]
Test Case:   2 | Input/Output: [[84.95438346929294 -53] 31.954383469292935]
Test Case:   3 | Input/Output: [[-71.1163509321901 83] 11.883649067809898]
Test Case:   4 | Input/Output: [[24.879861051712652 31] 55.87986105171265]
Test Case:   5 | Input/Output: [[45.48558788253996 16] 61.48558788253996]
Test Case:   6 | Input/Output: [[-48.860659807554676 -15] -63.860659807554676]
Test Case:   7 | Input/Output: [[70.86715331296591 28] 98.86715331296591]
Test Case:   8 | Input/Output: [[57.27986751264254 -20] 37.27986751264254]
Test Case:   9 | Input/Output: [[-95.78743670538866 -91] -186.78743670538864]
Test Case:  10 | Input/Output: [[18.331549704597023 6] 24.331549704597023]
Test Case:  11 | Input/Output: [[20.52079363773771 -4] 16.52079363773771]
Test Case:  12 | Input/Output: [[-15.210672044261159 -47] -62.21067204426116]
Test Case:  13 | Input/Output: [[-98.51687261062732 23] -75.51687261062732]
Test Case:  14 | Input/Output: [[2.257054908371117 -42] -39.74294509162888]
Test Case:  15 | Input/Output: [[-69.495108196984 -7] -76.495108196984]
Test Case:  16 | Input/Output: [[1.6621830244414326 -26] -24.337816975558567]
Test Case:  17 | Input/Output: [[-51.84271505673357 -50] -101.84271505673357]
Test Case:  18 | Input/Output: [[-36.74066513873488 -48] -84.74066513873488]
Test Case:  19 | Input/Output: [[-64.04920079251757 -7] -71.04920079251757]
Test Case:  20 | Input/Output: [[87.24735895540005 52] 139.24735895540005]
Test Case:  21 | Input/Output: [[11.853349514079966 -45] -33.146650485920034]
Test Case:  22 | Input/Output: [[23.825949419332744 -24] -0.17405058066725587]
Test Case:  23 | Input/Output: [[-57.3373300401542 -88] -145.3373300401542]
Test Case:  24 | Input/Output: [[52.643658371812165 91] 143.64365837181217]
Test Case:  25 | Input/Output: [[87.92522142419179 -23] 64.92522142419179]
Test Case:  26 | Input/Output: [[63.66495798364116 -56] 7.664957983641159]
Test Case:  27 | Input/Output: [[-21.683328669454554 50] 28.316671330545446]
Test Case:  28 | Input/Output: [[-26.010761722570834 -45] -71.01076172257083]
Test Case:  29 | Input/Output: [[-15.111029230426738 -18] -33.11102923042674]
Test Case:  30 | Input/Output: [[41.94366273504863 -79] -37.05633726495137]
Test Case:  31 | Input/Output: [[-51.278298412057865 -85] -136.27829841205786]
Test Case:  32 | Input/Output: [[-69.8652174883935 -16] -85.8652174883935]
Test Case:  33 | Input/Output: [[48.06427554569194 50] 98.06427554569194]
Test Case:  34 | Input/Output: [[-43.49819172086589 93] 49.50180827913411]
Test Case:  35 | Input/Output: [[30.018164977602737 -75] -44.98183502239726]
Test Case:  36 | Input/Output: [[52.34783322505402 -79] -26.652166774945982]
Test Case:  37 | Input/Output: [[88.54051790856718 -7] 81.54051790856718]
Test Case:  38 | Input/Output: [[54.79008318956326 30] 84.79008318956326]
Test Case:  39 | Input/Output: [[-83.3911573368747 -24] -107.3911573368747]
Test Case:  40 | Input/Output: [[10.874098647842928 -20] -9.125901352157072]
Test Case:  41 | Input/Output: [[18.091805503919176 -12] 6.091805503919176]
Test Case:  42 | Input/Output: [[16.343541044167736 82] 98.34354104416774]
Test Case:  43 | Input/Output: [[27.65192871147164 -85] -57.34807128852836]
Test Case:  44 | Input/Output: [[84.66524900935963 -4] 80.66524900935963]
Test Case:  45 | Input/Output: [[-56.21146037474472 -19] -75.21146037474472]
Test Case:  46 | Input/Output: [[-70.61803761123736 -51] -121.61803761123736]
Test Case:  47 | Input/Output: [[-91.2529625632753 -95] -186.2529625632753]
Test Case:  48 | Input/Output: [[-61.0420700843223 16] -45.0420700843223]
Test Case:  49 | Input/Output: [[-72.86243650343818 -8] -80.86243650343818]
Test Case:  50 | Input/Output: [[-78.33568787475369 51] -27.335687874753688]
Test Case:  51 | Input/Output: [[-98.8457037330332 -88] -186.8457037330332]
Test Case:  52 | Input/Output: [[37.99302048941837 79] 116.99302048941837]
Test Case:  53 | Input/Output: [[75.183324274601 -39] 36.183324274601006]
Test Case:  54 | Input/Output: [[-34.244718925387716 70] 35.755281074612284]
Test Case:  55 | Input/Output: [[-45.05875288447623 -73] -118.05875288447623]
Test Case:  56 | Input/Output: [[-70.8588590557395 96] 25.1411409442605]
Test Case:  57 | Input/Output: [[-4.814067734700345 70] 65.18593226529966]
Test Case:  58 | Input/Output: [[17.365561948174957 38] 55.36556194817496]
Test Case:  59 | Input/Output: [[33.84359282583017 -64] -30.15640717416983]
Test Case:  60 | Input/Output: [[23.337358627015163 -20] 3.3373586270151634]
Test Case:  61 | Input/Output: [[-14.162024073156715 -48] -62.162024073156715]
Test Case:  62 | Input/Output: [[6.209274288586101 78] 84.2092742885861]
Test Case:  63 | Input/Output: [[-15.264130672196032 46] 30.735869327803968]
Test Case:  64 | Input/Output: [[-87.71275777201086 49] -38.71275777201086]
Test Case:  65 | Input/Output: [[-70.27383873174738 -81] -151.2738387317474]
Test Case:  66 | Input/Output: [[-50.80364217300237 -80] -130.80364217300237]
Test Case:  67 | Input/Output: [[-99.59415418557771 43] -56.59415418557771]
Test Case:  68 | Input/Output: [[-77.3469060600511 41] -36.3469060600511]
Test Case:  69 | Input/Output: [[-91.1940134856551 -99] -190.1940134856551]
Test Case:  70 | Input/Output: [[-50.39897177686006 -5] -55.39897177686006]
Test Case:  71 | Input/Output: [[-48.40596777574901 -77] -125.40596777574902]
Test Case:  72 | Input/Output: [[-80.88894628820441 -69] -149.8889462882044]
Test Case:  73 | Input/Output: [[-63.40781450787198 -58] -121.40781450787199]
Test Case:  74 | Input/Output: [[-56.79377409264135 -43] -99.79377409264134]
Test Case:  75 | Input/Output: [[-30.108573090971362 38] 7.891426909028638]
Test Case:  76 | Input/Output: [[81.75718422795103 8] 89.75718422795103]
Test Case:  77 | Input/Output: [[4.91049932379444 -61] -56.08950067620556]
Test Case:  78 | Input/Output: [[-77.06593488641803 -94] -171.06593488641803]
Test Case:  79 | Input/Output: [[-80.09883804732553 -20] -100.09883804732553]
Test Case:  80 | Input/Output: [[-19.988815208870562 -5] -24.988815208870562]
Test Case:  81 | Input/Output: [[-72.07617662938175 54] -18.07617662938175]
Test Case:  82 | Input/Output: [[59.76185930523755 20] 79.76185930523755]
Test Case:  83 | Input/Output: [[-78.73440658059829 -94] -172.7344065805983]
Test Case:  84 | Input/Output: [[-87.08014102785606 15] -72.08014102785606]
Test Case:  85 | Input/Output: [[74.14038838821295 -89] -14.859611611787045]
Test Case:  86 | Input/Output: [[18.527708583081775 3] 21.527708583081775]
Test Case:  87 | Input/Output: [[-59.76152375521877 -77] -136.76152375521878]
Test Case:  88 | Input/Output: [[-86.2638680410698 26] -60.2638680410698]
Test Case:  89 | Input/Output: [[-34.392553435037286 -63] -97.39255343503729]
Test Case:  90 | Input/Output: [[99.07142239221568 35] 134.07142239221568]
Test Case:  91 | Input/Output: [[-46.04684433809425 3] -43.04684433809425]
Test Case:  92 | Input/Output: [[-38.52184917145489 -63] -101.52184917145489]
Test Case:  93 | Input/Output: [[90.71346391358102 100] 190.71346391358102]
Test Case:  94 | Input/Output: [[47.21356874440818 -53] -5.786431255591822]
Test Case:  95 | Input/Output: [[-86.97938114272466 -90] -176.97938114272466]
Test Case:  96 | Input/Output: [[-66.88276380457444 -36] -102.88276380457444]
Test Case:  97 | Input/Output: [[-79.16496642356921 40] -39.16496642356921]
Test Case:  98 | Input/Output: [[-83.018045915215 68] -15.018045915214998]
Test Case:  99 | Input/Output: [[-24.941391003520778 36] 11.058608996479222]
Test Case: 100 | Input/Output: [[92.53901935888467 -15] 77.53901935888467]
Test Case: 101 | Input/Output: [[97.93054837928761 -82] 15.930548379287615]
Test Case: 102 | Input/Output: [[-6.137947536584761 -93] -99.13794753658476]
Test Case: 103 | Input/Output: [[46.36233287649364 21] 67.36233287649364]
Test Case: 104 | Input/Output: [[-81.5876211220415 -14] -95.5876211220415]
Test Case: 105 | Input/Output: [[-22.06598088642224 -33] -55.06598088642224]
Test Case: 106 | Input/Output: [[55.925195487460286 -83] -27.074804512539714]
Test Case: 107 | Input/Output: [[88.68420493910133 22] 110.68420493910133]
Test Case: 108 | Input/Output: [[-35.329348115024885 50] 14.670651884975115]
Test Case: 109 | Input/Output: [[-5.83074544697719 75] 69.16925455302281]
Test Case: 110 | Input/Output: [[87.34698746540778 70] 157.34698746540778]
Test Case: 111 | Input/Output: [[10.350573230930252 16] 26.35057323093025]
Test Case: 112 | Input/Output: [[-28.280201202753233 86] 57.71979879724677]
Test Case: 113 | Input/Output: [[-18.734268688709605 -26] -44.734268688709605]
Test Case: 114 | Input/Output: [[-15.844488391728135 98] 82.15551160827187]
Test Case: 115 | Input/Output: [[-22.404734898357972 -72] -94.40473489835797]
Test Case: 116 | Input/Output: [[-81.11847758798368 -18] -99.11847758798368]
Test Case: 117 | Input/Output: [[4.187911471381071 39] 43.18791147138107]
Test Case: 118 | Input/Output: [[-33.872090659098404 3] -30.872090659098404]
Test Case: 119 | Input/Output: [[19.48690069726635 39] 58.48690069726635]
Test Case: 120 | Input/Output: [[23.365563081630995 -50] -26.634436918369005]
Test Case: 121 | Input/Output: [[-55.75397180032755 76] 20.246028199672452]
Test Case: 122 | Input/Output: [[31.464725476749607 35] 66.4647254767496]
Test Case: 123 | Input/Output: [[-3.162620324721317 56] 52.83737967527868]
Test Case: 124 | Input/Output: [[-66.52783509948316 96] 29.472164900516844]
Test Case: 125 | Input/Output: [[-82.47836565140298 -93] -175.47836565140298]
Test Case: 126 | Input/Output: [[31.316566373504457 4] 35.31656637350446]
Test Case: 127 | Input/Output: [[-45.59129636829442 -12] -57.59129636829442]
Test Case: 128 | Input/Output: [[-49.59683356789222 27] -22.59683356789222]
Test Case: 129 | Input/Output: [[29.07530309667075 15] 44.07530309667075]
Test Case: 130 | Input/Output: [[25.238003058384066 -79] -53.761996941615934]
Test Case: 131 | Input/Output: [[-67.62231371950642 -44] -111.62231371950642]
Test Case: 132 | Input/Output: [[11.679461250684994 -16] -4.320538749315006]
Test Case: 133 | Input/Output: [[-13.533634241872306 60] 46.466365758127694]
Test Case: 134 | Input/Output: [[40.0938046038093 -24] 16.093804603809303]
Test Case: 135 | Input/Output: [[40.505773645063925 77] 117.50577364506393]
Test Case: 136 | Input/Output: [[-14.212720462474067 -36] -50.21272046247407]
Test Case: 137 | Input/Output: [[-29.42588826109187 71] 41.57411173890813]
Test Case: 138 | Input/Output: [[75.25034903682612 -16] 59.25034903682612]
Test Case: 139 | Input/Output: [[-31.585745717793017 80] 48.41425428220698]
Test Case: 140 | Input/Output: [[47.88749364355061 20] 67.88749364355061]
Test Case: 141 | Input/Output: [[75.3043034986506 -38] 37.3043034986506]
Test Case: 142 | Input/Output: [[-15.23409442651409 98] 82.76590557348591]
Test Case: 143 | Input/Output: [[-15.516243411694347 14] -1.5162434116943473]
Test Case: 144 | Input/Output: [[-40.624934782670394 96] 55.375065217329606]
Test Case: 145 | Input/Output: [[-23.240731612291725 -93] -116.24073161229173]
Test Case: 146 | Input/Output: [[-54.27618526764433 34] -20.27618526764433]
Test Case: 147 | Input/Output: [[51.819009900723614 -8] 43.819009900723614]
Test Case: 148 | Input/Output: [[92.2069034854305 59] 151.2069034854305]
Test Case: 149 | Input/Output: [[47.89277935410507 75] 122.89277935410507]
Test Case: 150 | Input/Output: [[19.82344334074604 22] 41.82344334074604]
Test Case: 151 | Input/Output: [[95.53072982679208 5] 100.53072982679208]
Test Case: 152 | Input/Output: [[26.413202933478132 62] 88.41320293347813]
Test Case: 153 | Input/Output: [[61.51986146050771 98] 159.5198614605077]
Test Case: 154 | Input/Output: [[33.622012754751125 98] 131.62201275475113]
Test Case: 155 | Input/Output: [[-28.566011641443538 -89] -117.56601164144354]
Test Case: 156 | Input/Output: [[7.827395255227174 -50] -42.172604744772826]
Test Case: 157 | Input/Output: [[-12.4861974191614 -43] -55.4861974191614]
Test Case: 158 | Input/Output: [[-22.446953080856844 -59] -81.44695308085684]
Test Case: 159 | Input/Output: [[-34.07857003272932 57] 22.921429967270683]
Test Case: 160 | Input/Output: [[70.78378010933383 -18] 52.78378010933383]
Test Case: 161 | Input/Output: [[-70.03609525407623 -21] -91.03609525407623]
Test Case: 162 | Input/Output: [[-92.82812942800764 68] -24.828129428007642]
Test Case: 163 | Input/Output: [[77.7994565211794 78] 155.7994565211794]
Test Case: 164 | Input/Output: [[-49.61451468134754 37] -12.614514681347544]
Test Case: 165 | Input/Output: [[-42.69168512781994 -96] -138.69168512781994]
Test Case: 166 | Input/Output: [[-39.91262250796266 -60] -99.91262250796265]
Test Case: 167 | Input/Output: [[-94.79335303120571 -47] -141.7933530312057]
Test Case: 168 | Input/Output: [[38.71831568504439 -58] -19.281684314955612]
Test Case: 169 | Input/Output: [[11.992783425031888 -28] -16.007216574968112]
Test Case: 170 | Input/Output: [[-4.203026593062248 -61] -65.20302659306225]
Test Case: 171 | Input/Output: [[64.48324640283457 12] 76.48324640283457]
Test Case: 172 | Input/Output: [[17.968194415589238 41] 58.96819441558924]
Test Case: 173 | Input/Output: [[-74.39767582739707 30] -44.397675827397066]
Test Case: 174 | Input/Output: [[-99.24852855581963 -43] -142.24852855581963]
Test Case: 175 | Input/Output: [[7.784152008834468 -86] -78.21584799116553]
Test Case: 176 | Input/Output: [[-45.5417460216682 -26] -71.5417460216682]
Test Case: 177 | Input/Output: [[76.41315505608546 -38] 38.41315505608546]
Test Case: 178 | Input/Output: [[97.65203247597688 9] 106.65203247597688]
Test Case: 179 | Input/Output: [[-21.70339324477517 -99] -120.70339324477517]
Test Case: 180 | Input/Output: [[-16.2005652635344 28] 11.7994347364656]
Test Case: 181 | Input/Output: [[-22.725170871081232 -21] -43.72517087108123]
Test Case: 182 | Input/Output: [[60.45943438327512 96] 156.45943438327512]
Test Case: 183 | Input/Output: [[39.46433770095541 37] 76.46433770095541]
Test Case: 184 | Input/Output: [[86.13755767729472 98] 184.13755767729472]
Test Case: 185 | Input/Output: [[24.968645697927954 96] 120.96864569792795]
Test Case: 186 | Input/Output: [[-82.86246439308943 -15] -97.86246439308943]
Test Case: 187 | Input/Output: [[-85.40940089324047 -37] -122.40940089324047]
Test Case: 188 | Input/Output: [[-9.813043176522541 -81] -90.81304317652254]
Test Case: 189 | Input/Output: [[12.128674313113038 44] 56.12867431311304]
Test Case: 190 | Input/Output: [[51.90870789974201 -39] 12.908707899742012]
Test Case: 191 | Input/Output: [[82.12990204656117 -78] 4.12990204656117]
Test Case: 192 | Input/Output: [[-92.83901094723323 -26] -118.83901094723323]
Test Case: 193 | Input/Output: [[-72.99930424510319 68] -4.99930424510319]
Test Case: 194 | Input/Output: [[97.19583077619473 -55] 42.195830776194725]
Test Case: 195 | Input/Output: [[27.317467321192552 -48] -20.682532678807448]
Test Case: 196 | Input/Output: [[4.890161328211676 70] 74.89016132821168]
Test Case: 197 | Input/Output: [[-76.99566598624727 -27] -103.99566598624727]
Test Case: 198 | Input/Output: [[-11.966016625895776 4] -7.966016625895776]
Test Case: 199 | Input/Output: [[26.752583597524634 -82] -55.247416402475366]
Test Case: 200 | Input/Output: [[36.83254434727786 24] 60.83254434727786]
Test Case: 201 | Input/Output: [[-29.862357757188747 80] 50.13764224281125]
Test Case: 202 | Input/Output: [[-77.57636290352418 -69] -146.57636290352417]
Test Case: 203 | Input/Output: [[-26.822076540028533 51] 24.177923459971467]
Test Case: 204 | Input/Output: [[-7.218713977732193 -96] -103.2187139777322]
Test Case: 205 | Input/Output: [[22.87707296424412 19] 41.87707296424412]
Test Case: 206 | Input/Output: [[56.57328608818102 4] 60.57328608818102]
Test Case: 207 | Input/Output: [[13.105937138951361 72] 85.10593713895136]
Test Case: 208 | Input/Output: [[-70.70387910258265 3] -67.70387910258265]
Test Case: 209 | Input/Output: [[4.59700986104184 -28] -23.40299013895816]
Test Case: 210 | Input/Output: [[-48.43120629888702 -12] -60.43120629888702]
Test Case: 211 | Input/Output: [[-59.46950556808819 90] 30.530494431911812]
Test Case: 212 | Input/Output: [[46.077545007171636 84] 130.07754500717164]
Test Case: 213 | Input/Output: [[11.15019944407976 13] 24.15019944407976]
Test Case: 214 | Input/Output: [[-75.9112226813486 -74] -149.9112226813486]
Test Case: 215 | Input/Output: [[9.084766528032674 11] 20.084766528032674]
Test Case: 216 | Input/Output: [[-6.147071119961112 27] 20.85292888003889]
Test Case: 217 | Input/Output: [[0.3426347361146469 -53] -52.65736526388535]
Test Case: 218 | Input/Output: [[-12.290187836039806 -20] -32.290187836039806]
Test Case: 219 | Input/Output: [[-4.053629995915813 5] 0.9463700040841871]
Test Case: 220 | Input/Output: [[15.174144081498483 13] 28.174144081498483]
Test Case: 221 | Input/Output: [[16.752526498983784 57] 73.75252649898378]
Test Case: 222 | Input/Output: [[-39.0452962415365 -48] -87.0452962415365]
Test Case: 223 | Input/Output: [[27.89778509794911 -97] -69.10221490205089]
Test Case: 224 | Input/Output: [[89.7052682438148 -64] 25.7052682438148]
Test Case: 225 | Input/Output: [[-18.20956967696661 -24] -42.20956967696661]
Test Case: 226 | Input/Output: [[11.977219696504278 -87] -75.02278030349572]
Test Case: 227 | Input/Output: [[-73.19110527733812 35] -38.191105277338124]
Test Case: 228 | Input/Output: [[47.39942729003971 -43] 4.399427290039711]
Test Case: 229 | Input/Output: [[-4.433838814512271 80] 75.56616118548773]
Test Case: 230 | Input/Output: [[7.070998620352825 54] 61.070998620352825]
Test Case: 231 | Input/Output: [[-74.00031803561356 -84] -158.00031803561356]
Test Case: 232 | Input/Output: [[-98.61525231540618 -85] -183.61525231540617]
Test Case: 233 | Input/Output: [[-39.32114406119911 -48] -87.3211440611991]
Test Case: 234 | Input/Output: [[97.34269388018271 -16] 81.34269388018271]
Test Case: 235 | Input/Output: [[87.87963730138759 40] 127.87963730138759]
Test Case: 236 | Input/Output: [[-34.963785477087384 -13] -47.963785477087384]
Test Case: 237 | Input/Output: [[-69.24982922877612 -95] -164.24982922877612]
Test Case: 238 | Input/Output: [[83.05007804767394 -64] 19.050078047673935]
Test Case: 239 | Input/Output: [[42.029989708705614 11] 53.029989708705614]
Test Case: 240 | Input/Output: [[-19.35798347656234 -82] -101.35798347656234]
Test Case: 241 | Input/Output: [[-64.09614938897249 -79] -143.0961493889725]
Test Case: 242 | Input/Output: [[-64.98547297360773 -11] -75.98547297360773]
Test Case: 243 | Input/Output: [[-79.56647231670755 -65] -144.56647231670755]
Test Case: 244 | Input/Output: [[77.0657680812435 42] 119.0657680812435]
Test Case: 245 | Input/Output: [[-55.63806481795168 -40] -95.63806481795169]
Test Case: 246 | Input/Output: [[74.1801882246427 70] 144.1801882246427]
Test Case: 247 | Input/Output: [[43.96693814061959 30] 73.96693814061959]
Test Case: 248 | Input/Output: [[63.9950604341426 -16] 47.9950604341426]
Test Case: 249 | Input/Output: [[-59.07032463955624 32] -27.07032463955624]
Test Case: 250 | Input/Output: [[-8.791048084632848 26] 17.20895191536715]
Test Case: 251 | Input/Output: [[-93.02853739854771 -35] -128.0285373985477]
Test Case: 252 | Input/Output: [[14.181813684652681 75] 89.18181368465268]
Test Case: 253 | Input/Output: [[48.61075059221989 45] 93.61075059221989]
Test Case: 254 | Input/Output: [[-32.05113031992215 -24] -56.05113031992215]
Test Case: 255 | Input/Output: [[93.91438625526683 -44] 49.914386255266834]
Test Case: 256 | Input/Output: [[-44.9493766351825 77] 32.0506233648175]
Test Case: 257 | Input/Output: [[-40.24136451919858 60] 19.758635480801424]
Test Case: 258 | Input/Output: [[12.920424539386872 -7] 5.920424539386872]
Test Case: 259 | Input/Output: [[-2.197072676092702 -37] -39.1970726760927]
Test Case: 260 | Input/Output: [[58.40038619362775 -12] 46.40038619362775]
Test Case: 261 | Input/Output: [[12.347676306089681 -61] -48.65232369391032]
Test Case: 262 | Input/Output: [[-31.77297620775461 -13] -44.77297620775461]
Test Case: 263 | Input/Output: [[-15.915930492264934 42] 26.084069507735066]
Test Case: 264 | Input/Output: [[-2.993980047494958 -98] -100.99398004749496]
Test Case: 265 | Input/Output: [[-21.297052115385156 10] -11.297052115385156]
Test Case: 266 | Input/Output: [[-54.37231308337094 -44] -98.37231308337094]
Test Case: 267 | Input/Output: [[-4.7668009569965335 99] 94.23319904300347]
Test Case: 268 | Input/Output: [[-81.64112290118533 -2] -83.64112290118533]
Test Case: 269 | Input/Output: [[16.233819855384525 19] 35.233819855384525]
Test Case: 270 | Input/Output: [[95.74432278204765 34] 129.74432278204765]
Test Case: 271 | Input/Output: [[65.33171326787118 19] 84.33171326787118]
Test Case: 272 | Input/Output: [[-6.624069630139601 -4] -10.624069630139601]
Test Case: 273 | Input/Output: [[61.89466918844545 22] 83.89466918844545]
Test Case: 274 | Input/Output: [[59.6671917298292 48] 107.6671917298292]
Test Case: 275 | Input/Output: [[-57.78800061658258 -29] -86.78800061658258]
Test Case: 276 | Input/Output: [[-5.752250335592905 38] 32.247749664407095]
Test Case: 277 | Input/Output: [[-91.72263368481859 89] -2.7226336848185895]
Test Case: 278 | Input/Output: [[76.54411626084843 -16] 60.544116260848426]
Test Case: 279 | Input/Output: [[-57.64831524187868 -21] -78.64831524187868]
Test Case: 280 | Input/Output: [[84.55662800663359 -98] -13.443371993366412]
Test Case: 281 | Input/Output: [[-59.88922462498027 88] 28.110775375019728]
Test Case: 282 | Input/Output: [[-35.66709698919182 43] 7.332903010808181]
Test Case: 283 | Input/Output: [[67.37828218090215 70] 137.37828218090215]
Test Case: 284 | Input/Output: [[-25.337968370344683 -36] -61.33796837034468]
Test Case: 285 | Input/Output: [[35.557552384841756 -31] 4.557552384841756]
Test Case: 286 | Input/Output: [[-62.60304834445054 -92] -154.60304834445054]
Test Case: 287 | Input/Output: [[85.44962727863265 55] 140.44962727863265]
Test Case: 288 | Input/Output: [[12.37452572051923 52] 64.37452572051923]
Test Case: 289 | Input/Output: [[93.18299901212194 -43] 50.18299901212194]
Test Case: 290 | Input/Output: [[-50.98091612510738 57] 6.0190838748926225]
Test Case: 291 | Input/Output: [[-19.14361411707705 94] 74.85638588292295]
Test Case: 292 | Input/Output: [[-31.01519985040457 37] 5.984800149595429]
Test Case: 293 | Input/Output: [[54.614372979271906 -56] -1.3856270207280943]
Test Case: 294 | Input/Output: [[-43.73384848960329 -36] -79.73384848960329]
Test Case: 295 | Input/Output: [[-31.35885941684404 -25] -56.35885941684404]
Test Case: 296 | Input/Output: [[87.10279874533308 -2] 85.10279874533308]
Test Case: 297 | Input/Output: [[93.31590120372687 12] 105.31590120372687]
Test Case: 298 | Input/Output: [[87.31966060990547 28] 115.31966060990547]
Test Case: 299 | Input/Output: [[36.3494132917086 12] 48.3494132917086]
Test Case: 300 | Input/Output: [[3.9132974204674724 -16] -12.086702579532528]
Test Case: 301 | Input/Output: [[94.71977440208212 8] 102.71977440208212]
Test Case: 302 | Input/Output: [[-99.69746530665667 27] -72.69746530665667]
Test Case: 303 | Input/Output: [[-17.31532553936279 23] 5.684674460637211]
Test Case: 304 | Input/Output: [[32.96917581646014 -38] -5.030824183539863]
Test Case: 305 | Input/Output: [[23.458319464098977 53] 76.45831946409898]
Test Case: 306 | Input/Output: [[94.40510062508193 7] 101.40510062508193]
Test Case: 307 | Input/Output: [[15.339926116041738 0] 15.339926116041738]
Test Case: 308 | Input/Output: [[49.29498241858818 -38] 11.294982418588177]
Test Case: 309 | Input/Output: [[-93.34517937106817 97] 3.65482062893183]
Test Case: 310 | Input/Output: [[93.64024421171678 -75] 18.640244211716777]
Test Case: 311 | Input/Output: [[-37.99823801900877 -55] -92.99823801900877]
Test Case: 312 | Input/Output: [[49.207371725586654 99] 148.20737172558665]
Test Case: 313 | Input/Output: [[-58.95670579526138 -1] -59.95670579526138]
Test Case: 314 | Input/Output: [[-18.28366949419957 0] -18.28366949419957]
Test Case: 315 | Input/Output: [[-31.275723440588933 -34] -65.27572344058893]
Test Case: 316 | Input/Output: [[63.27924723757974 -14] 49.27924723757974]
Test Case: 317 | Input/Output: [[30.79139090437434 4] 34.79139090437434]
Test Case: 318 | Input/Output: [[-53.22293605325046 -88] -141.22293605325046]
Test Case: 319 | Input/Output: [[36.46039919583916 -56] -19.53960080416084]
Test Case: 320 | Input/Output: [[-33.38351438359646 -53] -86.38351438359646]
Test Case: 321 | Input/Output: [[-79.48609754994678 30] -49.48609754994678]
Test Case: 322 | Input/Output: [[30.193651033387994 -90] -59.806348966612006]
Test Case: 323 | Input/Output: [[-16.938788445473293 -88] -104.93878844547329]
Test Case: 324 | Input/Output: [[13.645105712035544 42] 55.645105712035544]
Test Case: 325 | Input/Output: [[-79.52100305344078 -12] -91.52100305344078]
Test Case: 326 | Input/Output: [[10.453725202902106 -65] -54.546274797097894]
Test Case: 327 | Input/Output: [[22.128657254944102 96] 118.1286572549441]
Test Case: 328 | Input/Output: [[3.445532679513306 -72] -68.5544673204867]
Test Case: 329 | Input/Output: [[-35.40706602482015 88] 52.59293397517985]
Test Case: 330 | Input/Output: [[-59.92255766444825 -82] -141.92255766444825]
Test Case: 331 | Input/Output: [[-89.25226430216568 75] -14.252264302165685]
Test Case: 332 | Input/Output: [[-58.75426897449509 -16] -74.75426897449509]
Test Case: 333 | Input/Output: [[98.08381766634017 36] 134.08381766634017]
Test Case: 334 | Input/Output: [[12.2895916640351 23] 35.2895916640351]
Test Case: 335 | Input/Output: [[-86.89543808370259 -53] -139.89543808370257]
Test Case: 336 | Input/Output: [[-22.63640851170581 -17] -39.63640851170581]
Test Case: 337 | Input/Output: [[47.94901449808995 -74] -26.05098550191005]
Test Case: 338 | Input/Output: [[-11.649022057251003 13] 1.3509779427489974]
Test Case: 339 | Input/Output: [[-12.262121621246024 -86] -98.26212162124602]
Test Case: 340 | Input/Output: [[6.5590374496784705 -4] 2.5590374496784705]
Test Case: 341 | Input/Output: [[-86.25365896141011 -65] -151.2536589614101]
Test Case: 342 | Input/Output: [[-80.37107383691585 -73] -153.37107383691585]
Test Case: 343 | Input/Output: [[67.32810905675504 -13] 54.32810905675504]
Test Case: 344 | Input/Output: [[48.02160852612397 -41] 7.02160852612397]
Test Case: 345 | Input/Output: [[-92.33429439151499 59] -33.33429439151499]
Test Case: 346 | Input/Output: [[-78.05661839335639 -69] -147.0566183933564]
Test Case: 347 | Input/Output: [[-31.94170920691144 -50] -81.94170920691144]
Test Case: 348 | Input/Output: [[-17.8587987975789 -55] -72.8587987975789]
Test Case: 349 | Input/Output: [[-33.31099834795508 57] 23.689001652044922]
Test Case: 350 | Input/Output: [[-49.077738921490656 33] -16.077738921490656]
Test Case: 351 | Input/Output: [[-17.47820200899855 -21] -38.47820200899855]
Test Case: 352 | Input/Output: [[-71.4516630930677 -41] -112.4516630930677]
Test Case: 353 | Input/Output: [[-19.882637736624403 -78] -97.8826377366244]
Test Case: 354 | Input/Output: [[7.481052416421406 60] 67.4810524164214]
Test Case: 355 | Input/Output: [[-70.02022895844553 100] 29.97977104155447]
Test Case: 356 | Input/Output: [[69.42668013420788 77] 146.42668013420788]
Test Case: 357 | Input/Output: [[11.02655345328975 29] 40.02655345328975]
Test Case: 358 | Input/Output: [[-41.87783010275392 82] 40.12216989724608]
Test Case: 359 | Input/Output: [[-24.602180048413274 -75] -99.60218004841327]
Test Case: 360 | Input/Output: [[83.07234888733518 29] 112.07234888733518]
Test Case: 361 | Input/Output: [[58.66676457406939 65] 123.66676457406939]
Test Case: 362 | Input/Output: [[-15.867271844606236 -81] -96.86727184460624]
Test Case: 363 | Input/Output: [[-18.93900891617035 -65] -83.93900891617035]
Test Case: 364 | Input/Output: [[96.20515844066026 50] 146.20515844066026]
Test Case: 365 | Input/Output: [[-97.82898514901521 -14] -111.82898514901521]
Test Case: 366 | Input/Output: [[-96.12281801196674 73] -23.122818011966743]
Test Case: 367 | Input/Output: [[64.8767049409131 97] 161.8767049409131]
Test Case: 368 | Input/Output: [[48.36635575936913 -71] -22.633644240630872]
Test Case: 369 | Input/Output: [[-10.888228702482252 -93] -103.88822870248225]
Test Case: 370 | Input/Output: [[-91.07248660369318 -53] -144.07248660369316]
Test Case: 371 | Input/Output: [[-69.5417212051764 -38] -107.5417212051764]
Test Case: 372 | Input/Output: [[-56.931846827639454 20] -36.931846827639454]
Test Case: 373 | Input/Output: [[-46.35337018371839 39] -7.35337018371839]
Test Case: 374 | Input/Output: [[9.035139503684604 38] 47.035139503684604]
Test Case: 375 | Input/Output: [[-29.754858372783843 -62] -91.75485837278384]
Test Case: 376 | Input/Output: [[68.98311318291266 -42] 26.98311318291266]
Test Case: 377 | Input/Output: [[-93.36160781343692 79] -14.361607813436919]
Test Case: 378 | Input/Output: [[-97.27713998373171 -32] -129.27713998373173]
Test Case: 379 | Input/Output: [[67.51027634929184 44] 111.51027634929184]
Test Case: 380 | Input/Output: [[44.449498898931495 50] 94.4494988989315]
Test Case: 381 | Input/Output: [[56.86111452011758 83] 139.86111452011758]
Test Case: 382 | Input/Output: [[-72.41424463881535 24] -48.41424463881535]
Test Case: 383 | Input/Output: [[52.4640323838596 90] 142.4640323838596]
Test Case: 384 | Input/Output: [[45.97507871857886 76] 121.97507871857886]
Test Case: 385 | Input/Output: [[-53.224993407378165 74] 20.775006592621835]
Test Case: 386 | Input/Output: [[74.29428555654357 -56] 18.29428555654357]
Test Case: 387 | Input/Output: [[-11.26084325167345 -60] -71.26084325167345]
Test Case: 388 | Input/Output: [[-60.266815122013526 -70] -130.26681512201353]
Test Case: 389 | Input/Output: [[-23.74326930727571 6] -17.74326930727571]
Test Case: 390 | Input/Output: [[25.968893102217237 0] 25.968893102217237]
Test Case: 391 | Input/Output: [[-63.311795335990894 -51] -114.3117953359909]
Test Case: 392 | Input/Output: [[-29.144767342353987 -22] -51.14476734235399]
Test Case: 393 | Input/Output: [[-77.8964411052116 -62] -139.89644110521158]
Test Case: 394 | Input/Output: [[-76.46214262842987 59] -17.462142628429874]
Test Case: 395 | Input/Output: [[-42.267652454381 -17] -59.267652454381]
Test Case: 396 | Input/Output: [[18.75893410901439 80] 98.75893410901439]
Test Case: 397 | Input/Output: [[-36.799051206473266 -25] -61.799051206473266]
Test Case: 398 | Input/Output: [[73.58595244621262 39] 112.58595244621262]
Test Case: 399 | Input/Output: [[23.949955342488963 95] 118.94995534248896]
Test Case: 400 | Input/Output: [[10.4609809064047 32] 42.4609809064047]
Test Case: 401 | Input/Output: [[63.078308414393206 -38] 25.078308414393206]
Test Case: 402 | Input/Output: [[48.41395761565511 -97] -48.58604238434489]
Test Case: 403 | Input/Output: [[12.607066004477474 95] 107.60706600447747]
Test Case: 404 | Input/Output: [[31.13552919612991 100] 131.1355291961299]
Test Case: 405 | Input/Output: [[-78.70871196023488 -44] -122.70871196023488]
Test Case: 406 | Input/Output: [[-20.32287690223484 90] 69.67712309776516]
Test Case: 407 | Input/Output: [[49.835401155359506 41] 90.8354011553595]
Test Case: 408 | Input/Output: [[-58.21170007680499 76] 17.788299923195012]
Test Case: 409 | Input/Output: [[57.811432987300435 -76] -18.188567012699565]
Test Case: 410 | Input/Output: [[52.38879522091645 29] 81.38879522091645]
Test Case: 411 | Input/Output: [[38.565351993842455 89] 127.56535199384246]
Test Case: 412 | Input/Output: [[-26.16123279494498 -86] -112.16123279494498]
Test Case: 413 | Input/Output: [[96.37947878864958 91] 187.37947878864958]
Test Case: 414 | Input/Output: [[-37.17557722493097 15] -22.17557722493097]
Test Case: 415 | Input/Output: [[-5.449931964111229 -20] -25.44993196411123]
Test Case: 416 | Input/Output: [[-85.11068367954029 -41] -126.11068367954029]
Test Case: 417 | Input/Output: [[52.67138492488351 66] 118.67138492488351]
Test Case: 418 | Input/Output: [[22.966910279885624 34] 56.966910279885624]
Test Case: 419 | Input/Output: [[51.3063795563956 79] 130.3063795563956]
Test Case: 420 | Input/Output: [[85.4373064249578 66] 151.4373064249578]
Test Case: 421 | Input/Output: [[-10.074237203983174 -56] -66.07423720398317]
Test Case: 422 | Input/Output: [[-25.137664608542124 86] 60.862335391457876]
Test Case: 423 | Input/Output: [[19.588422124253157 46] 65.58842212425316]
Test Case: 424 | Input/Output: [[-74.07131799165248 -98] -172.07131799165248]
Test Case: 425 | Input/Output: [[-52.10686757841167 -17] -69.10686757841168]
Test Case: 426 | Input/Output: [[62.14879721826472 -45] 17.14879721826472]
Test Case: 427 | Input/Output: [[-22.730977357545655 -88] -110.73097735754565]
Test Case: 428 | Input/Output: [[38.539089198147536 -48] -9.460910801852464]
Test Case: 429 | Input/Output: [[23.966326731046465 -38] -14.033673268953535]
Test Case: 430 | Input/Output: [[26.49410690411993 73] 99.49410690411993]
Test Case: 431 | Input/Output: [[-39.6930242574848 52] 12.306975742515199]
Test Case: 432 | Input/Output: [[-56.71221164916025 36] -20.712211649160253]
Test Case: 433 | Input/Output: [[25.222995677145832 -61] -35.77700432285417]
Test Case: 434 | Input/Output: [[12.179435126028977 -78] -65.82056487397102]
Test Case: 435 | Input/Output: [[0.899820083426377 70] 70.89982008342638]
Test Case: 436 | Input/Output: [[16.911116162699187 75] 91.91111616269919]
Test Case: 437 | Input/Output: [[62.56549893719304 -15] 47.56549893719304]
Test Case: 438 | Input/Output: [[-77.71838116395686 72] -5.718381163956863]
Test Case: 439 | Input/Output: [[71.51390047046561 56] 127.51390047046561]
Test Case: 440 | Input/Output: [[-28.476509069580544 -27] -55.476509069580544]
Test Case: 441 | Input/Output: [[21.995651082719903 -83] -61.0043489172801]
Test Case: 442 | Input/Output: [[-30.921623277501496 45] 14.078376722498504]
Test Case: 443 | Input/Output: [[-89.98356351021062 7] -82.98356351021062]
Test Case: 444 | Input/Output: [[69.50070400624276 -3] 66.50070400624276]
Test Case: 445 | Input/Output: [[-37.459516684648506 54] 16.540483315351494]
Test Case: 446 | Input/Output: [[-20.84149837615361 -66] -86.84149837615361]
Test Case: 447 | Input/Output: [[98.45774414572509 70] 168.4577441457251]
Test Case: 448 | Input/Output: [[-70.93086452549105 64] -6.930864525491046]
Test Case: 449 | Input/Output: [[-20.15884458237973 -38] -58.15884458237973]
Test Case: 450 | Input/Output: [[-29.374563165957525 88] 58.625436834042475]
Test Case: 451 | Input/Output: [[79.03915142122219 75] 154.0391514212222]
Test Case: 452 | Input/Output: [[21.85253623813921 -34] -12.147463761860791]
Test Case: 453 | Input/Output: [[89.57638191157008 -99] -9.423618088429919]
Test Case: 454 | Input/Output: [[-35.490437635050114 -25] -60.490437635050114]
Test Case: 455 | Input/Output: [[-80.09483822689707 -93] -173.09483822689708]
Test Case: 456 | Input/Output: [[77.96468789224355 -7] 70.96468789224355]
Test Case: 457 | Input/Output: [[56.76503581232083 -16] 40.76503581232083]
Test Case: 458 | Input/Output: [[81.7213954811271 33] 114.7213954811271]
Test Case: 459 | Input/Output: [[30.44031716932463 80] 110.44031716932463]
Test Case: 460 | Input/Output: [[26.380575024122436 47] 73.38057502412244]
Test Case: 461 | Input/Output: [[93.73840151005226 63] 156.73840151005226]
Test Case: 462 | Input/Output: [[8.61831144734056 -73] -64.38168855265944]
Test Case: 463 | Input/Output: [[-88.66092108405846 5] -83.66092108405846]
Test Case: 464 | Input/Output: [[19.237550775230304 96] 115.2375507752303]
Test Case: 465 | Input/Output: [[55.768314321026935 97] 152.76831432102693]
Test Case: 466 | Input/Output: [[0.4169958480011644 -95] -94.58300415199884]
Test Case: 467 | Input/Output: [[-80.05292231305367 -72] -152.05292231305367]
Test Case: 468 | Input/Output: [[3.5912978492731042 67] 70.5912978492731]
Test Case: 469 | Input/Output: [[-69.06421180012538 88] 18.935788199874622]
Test Case: 470 | Input/Output: [[-98.78813500088259 23] -75.78813500088259]
Test Case: 471 | Input/Output: [[27.90225086128774 -44] -16.09774913871226]
Test Case: 472 | Input/Output: [[82.8426588651464 -10] 72.8426588651464]
Test Case: 473 | Input/Output: [[2.548843417882864 56] 58.548843417882864]
Test Case: 474 | Input/Output: [[-82.22699454033378 -30] -112.22699454033378]
Test Case: 475 | Input/Output: [[-23.663493182184084 -34] -57.663493182184084]
Test Case: 476 | Input/Output: [[79.08016854709572 25] 104.08016854709572]
Test Case: 477 | Input/Output: [[-79.58269819232405 90] 10.417301807675955]
Test Case: 478 | Input/Output: [[-60.8285415833076 -1] -61.8285415833076]
Test Case: 479 | Input/Output: [[84.24861760360949 67] 151.2486176036095]
Test Case: 480 | Input/Output: [[-2.039343938892756 -78] -80.03934393889276]
Test Case: 481 | Input/Output: [[-20.64250532148091 -36] -56.64250532148091]
Test Case: 482 | Input/Output: [[14.505163562884093 60] 74.50516356288409]
Test Case: 483 | Input/Output: [[66.33809327800458 78] 144.33809327800458]
Test Case: 484 | Input/Output: [[32.963756314077926 23] 55.963756314077926]
Test Case: 485 | Input/Output: [[-64.31954080894701 -16] -80.31954080894701]
Test Case: 486 | Input/Output: [[88.56891056045612 -49] 39.56891056045612]
Test Case: 487 | Input/Output: [[43.63896989912476 -48] -4.36103010087524]
Test Case: 488 | Input/Output: [[93.2594253156908 25] 118.2594253156908]
Test Case: 489 | Input/Output: [[-58.77472436375386 96] 37.22527563624614]
Test Case: 490 | Input/Output: [[87.86787116289193 -95] -7.13212883710807]
Test Case: 491 | Input/Output: [[11.172838902019649 -90] -78.82716109798035]
Test Case: 492 | Input/Output: [[49.90580242327084 27] 76.90580242327084]
Test Case: 493 | Input/Output: [[62.60890647466471 -78] -15.391093525335293]
Test Case: 494 | Input/Output: [[18.88223809905243 -36] -17.11776190094757]
Test Case: 495 | Input/Output: [[-80.07825795810952 9] -71.07825795810952]
Test Case: 496 | Input/Output: [[-15.45931248651631 69] 53.54068751348369]
Test Case: 497 | Input/Output: [[-68.05947018633387 6] -62.05947018633387]
Test Case: 498 | Input/Output: [[-28.455430020865208 67] 38.54456997913479]
Test Case: 499 | Input/Output: [[-61.17924775690619 -5] -66.1792477569062]
Test Case: 500 | Input/Output: [[-59.10751236400063 -60] -119.10751236400063]
Test Case: 501 | Input/Output: [[43.9557951688312 -5] 38.9557951688312]
Test Case: 502 | Input/Output: [[27.290447466854346 -38] -10.709552533145654]
Test Case: 503 | Input/Output: [[-84.47379831091865 6] -78.47379831091865]
Test Case: 504 | Input/Output: [[9.703862001250641 -56] -46.29613799874936]
Test Case: 505 | Input/Output: [[66.12093351648133 -8] 58.12093351648133]
Test Case: 506 | Input/Output: [[-98.24943443596712 3] -95.24943443596712]
Test Case: 507 | Input/Output: [[-72.45763479703349 -26] -98.45763479703349]
Test Case: 508 | Input/Output: [[93.88126838618695 -34] 59.881268386186946]
Test Case: 509 | Input/Output: [[27.18229512964585 -95] -67.81770487035415]
Test Case: 510 | Input/Output: [[24.35213462373123 68] 92.35213462373123]
Test Case: 511 | Input/Output: [[34.56207738460125 58] 92.56207738460125]
Test Case: 512 | Input/Output: [[78.91380446472641 -74] 4.913804464726411]
Test Case: 513 | Input/Output: [[-76.65473600246472 -15] -91.65473600246472]
Test Case: 514 | Input/Output: [[22.10647062697693 -14] 8.106470626976929]
Test Case: 515 | Input/Output: [[-18.990659448767715 61] 42.009340551232285]
Test Case: 516 | Input/Output: [[91.48833325381162 76] 167.48833325381162]
Test Case: 517 | Input/Output: [[80.70113498322624 -98] -17.29886501677376]
Test Case: 518 | Input/Output: [[35.13551546921286 76] 111.13551546921286]
Test Case: 519 | Input/Output: [[-85.23937511849995 -68] -153.23937511849994]
Test Case: 520 | Input/Output: [[-14.024598758425768 8] -6.024598758425768]
Test Case: 521 | Input/Output: [[60.74891326319721 10] 70.74891326319721]
Test Case: 522 | Input/Output: [[-19.3492727159867 -49] -68.3492727159867]
Test Case: 523 | Input/Output: [[90.28493620317752 -7] 83.28493620317752]
Test Case: 524 | Input/Output: [[83.82159520021557 46] 129.82159520021557]
Test Case: 525 | Input/Output: [[-80.5117596420827 78] -2.511759642082694]
Test Case: 526 | Input/Output: [[-15.721380983830642 70] 54.27861901616936]
Test Case: 527 | Input/Output: [[68.42684946218466 90] 158.42684946218466]
Test Case: 528 | Input/Output: [[33.68829103231553 40] 73.68829103231553]
Test Case: 529 | Input/Output: [[-24.345118912669435 -14] -38.345118912669435]
Test Case: 530 | Input/Output: [[-25.975468391869 -64] -89.975468391869]
Test Case: 531 | Input/Output: [[79.36189636560172 31] 110.36189636560172]
Test Case: 532 | Input/Output: [[88.73100836675783 18] 106.73100836675783]
Test Case: 533 | Input/Output: [[-99.99777876325882 -30] -129.99777876325882]
Test Case: 534 | Input/Output: [[31.108906422671424 -44] -12.891093577328576]
Test Case: 535 | Input/Output: [[-5.58631719495375 -85] -90.58631719495375]
Test Case: 536 | Input/Output: [[-4.391614128600779 12] 7.608385871399221]
Test Case: 537 | Input/Output: [[76.9246126545809 -22] 54.9246126545809]
Test Case: 538 | Input/Output: [[85.92182855466578 -77] 8.92182855466578]
Test Case: 539 | Input/Output: [[45.25874029868692 68] 113.25874029868692]
Test Case: 540 | Input/Output: [[1.0078855424583821 80] 81.00788554245838]
Test Case: 541 | Input/Output: [[-63.393573890837885 -47] -110.39357389083789]
Test Case: 542 | Input/Output: [[5.011978663558224 77] 82.01197866355822]
Test Case: 543 | Input/Output: [[-65.47959036355033 -27] -92.47959036355033]
Test Case: 544 | Input/Output: [[35.1401594666242 23] 58.1401594666242]
Test Case: 545 | Input/Output: [[91.20461196178624 -53] 38.20461196178624]
Test Case: 546 | Input/Output: [[73.73827569425592 37] 110.73827569425592]
Test Case: 547 | Input/Output: [[-23.840262668395454 -27] -50.840262668395454]
Test Case: 548 | Input/Output: [[41.58022704766279 -20] 21.580227047662788]
Test Case: 549 | Input/Output: [[24.26469655515362 -73] -48.73530344484638]
Test Case: 550 | Input/Output: [[-11.041829397762541 -97] -108.04182939776254]
Test Case: 551 | Input/Output: [[-75.65159231419489 40] -35.651592314194886]
Test Case: 552 | Input/Output: [[63.657004240009 67] 130.657004240009]
Test Case: 553 | Input/Output: [[63.7993831954461 -77] -13.200616804553903]
Test Case: 554 | Input/Output: [[-83.93167557848216 91] 7.068324421517843]
Test Case: 555 | Input/Output: [[-38.70535718657706 59] 20.29464281342294]
Test Case: 556 | Input/Output: [[4.865199485928457 -50] -45.13480051407154]
Test Case: 557 | Input/Output: [[-2.710989944210908 -66] -68.71098994421091]
Test Case: 558 | Input/Output: [[-35.116370523836935 79] 43.883629476163065]
Test Case: 559 | Input/Output: [[-38.21081511727582 -28] -66.21081511727581]
Test Case: 560 | Input/Output: [[76.1155022492986 -43] 33.1155022492986]
Test Case: 561 | Input/Output: [[-28.06886294406381 -25] -53.06886294406381]
Test Case: 562 | Input/Output: [[47.707037630245765 -3] 44.707037630245765]
Test Case: 563 | Input/Output: [[-35.676403640199766 -67] -102.67640364019977]
Test Case: 564 | Input/Output: [[22.094930763277503 -46] -23.905069236722497]
Test Case: 565 | Input/Output: [[65.98627045710788 69] 134.98627045710788]
Test Case: 566 | Input/Output: [[70.91196598775414 -53] 17.911965987754144]
Test Case: 567 | Input/Output: [[58.747749496141324 -90] -31.252250503858676]
Test Case: 568 | Input/Output: [[-59.71700196730036 -17] -76.71700196730036]
Test Case: 569 | Input/Output: [[-63.85712835650721 -48] -111.85712835650722]
Test Case: 570 | Input/Output: [[83.41297958566406 68] 151.41297958566406]
Test Case: 571 | Input/Output: [[-62.04688610502544 99] 36.95311389497456]
Test Case: 572 | Input/Output: [[29.642733487690947 -23] 6.642733487690947]
Test Case: 573 | Input/Output: [[-10.954193847698448 -14] -24.95419384769845]
Test Case: 574 | Input/Output: [[-35.75192112001746 34] -1.7519211200174567]
Test Case: 575 | Input/Output: [[-67.24565530198058 -55] -122.24565530198058]
Test Case: 576 | Input/Output: [[-73.99342244691638 -20] -93.99342244691638]
Test Case: 577 | Input/Output: [[-13.993695961666575 65] 51.006304038333425]
Test Case: 578 | Input/Output: [[-42.91079738613255 -1] -43.91079738613255]
Test Case: 579 | Input/Output: [[35.163593693656395 -95] -59.836406306343605]
Test Case: 580 | Input/Output: [[-70.97397980442759 100] 29.026020195572414]
Test Case: 581 | Input/Output: [[-10.486865154138727 30] 19.513134845861273]
Test Case: 582 | Input/Output: [[-11.826022888852904 90] 78.1739771111471]
Test Case: 583 | Input/Output: [[27.3186889640197 -79] -51.6813110359803]
Test Case: 584 | Input/Output: [[90.64462959440763 -40] 50.64462959440763]
Test Case: 585 | Input/Output: [[76.256900910745 -45] 31.256900910745003]
Test Case: 586 | Input/Output: [[23.020004288400386 93] 116.02000428840039]
Test Case: 587 | Input/Output: [[-87.79105119808858 -97] -184.79105119808858]
Test Case: 588 | Input/Output: [[27.714324854117663 69] 96.71432485411766]
Test Case: 589 | Input/Output: [[-42.75283849624425 -42] -84.75283849624425]
Test Case: 590 | Input/Output: [[33.414474744513115 -87] -53.585525255486885]
Test Case: 591 | Input/Output: [[62.563450151002684 45] 107.56345015100268]
Test Case: 592 | Input/Output: [[-87.28947647527998 15] -72.28947647527998]
Test Case: 593 | Input/Output: [[-22.048499024438485 92] 69.95150097556152]
Test Case: 594 | Input/Output: [[-69.32130914132642 -92] -161.32130914132642]
Test Case: 595 | Input/Output: [[91.28287481086227 57] 148.28287481086227]
Test Case: 596 | Input/Output: [[-23.765218183854216 -90] -113.76521818385422]
Test Case: 597 | Input/Output: [[0.9437919068405023 -100] -99.0562080931595]
Test Case: 598 | Input/Output: [[-17.304153592700715 43] 25.695846407299285]
Test Case: 599 | Input/Output: [[49.27176913051855 -62] -12.72823086948145]
Test Case: 600 | Input/Output: [[-34.23656584421546 -10] -44.23656584421546]
Test Case: 601 | Input/Output: [[81.61533376889435 95] 176.61533376889435]
Test Case: 602 | Input/Output: [[-98.315130505335 26] -72.315130505335]
Test Case: 603 | Input/Output: [[50.56603959679299 -37] 13.56603959679299]
Test Case: 604 | Input/Output: [[56.879816774904924 -97] -40.120183225095076]
Test Case: 605 | Input/Output: [[-27.52052167840388 -70] -97.52052167840388]
Test Case: 606 | Input/Output: [[-99.05046224195935 -42] -141.05046224195934]
Test Case: 607 | Input/Output: [[3.0750747575598325 7] 10.075074757559833]
Test Case: 608 | Input/Output: [[-94.26813422563482 62] -32.268134225634824]
Test Case: 609 | Input/Output: [[-25.986206969139474 71] 45.013793030860526]
Test Case: 610 | Input/Output: [[68.47406949838683 -85] -16.525930501613175]
Test Case: 611 | Input/Output: [[32.63937738243874 -25] 7.639377382438738]
Test Case: 612 | Input/Output: [[-96.14183829343797 -35] -131.14183829343796]
Test Case: 613 | Input/Output: [[48.56853950754726 92] 140.56853950754726]
Test Case: 614 | Input/Output: [[25.554484464706718 80] 105.55448446470672]
Test Case: 615 | Input/Output: [[53.49053191170589 -50] 3.4905319117058866]
Test Case: 616 | Input/Output: [[-25.238052817324785 -75] -100.23805281732479]
Test Case: 617 | Input/Output: [[-79.66489607214169 -90] -169.6648960721417]
Test Case: 618 | Input/Output: [[-86.75193847726264 3] -83.75193847726264]
Test Case: 619 | Input/Output: [[52.86960729529443 -3] 49.86960729529443]
Test Case: 620 | Input/Output: [[49.13423208783149 77] 126.13423208783149]
Test Case: 621 | Input/Output: [[58.19135265563102 42] 100.19135265563102]
Test Case: 622 | Input/Output: [[-81.1368229272396 36] -45.136822927239606]
Test Case: 623 | Input/Output: [[-54.3001480521397 92] 37.6998519478603]
Test Case: 624 | Input/Output: [[75.21468332149345 -3] 72.21468332149345]
Test Case: 625 | Input/Output: [[88.46466332199853 -52] 36.46466332199853]
Test Case: 626 | Input/Output: [[-58.73720748774795 1] -57.73720748774795]
Test Case: 627 | Input/Output: [[-57.91716495527044 -100] -157.91716495527044]
Test Case: 628 | Input/Output: [[28.301722682017868 -60] -31.698277317982132]
Test Case: 629 | Input/Output: [[23.420465813883823 -79] -55.57953418611618]
Test Case: 630 | Input/Output: [[26.755833047853713 59] 85.75583304785371]
Test Case: 631 | Input/Output: [[-42.507751876061995 -23] -65.507751876062]
Test Case: 632 | Input/Output: [[-15.583823749338535 82] 66.41617625066147]
Test Case: 633 | Input/Output: [[-43.90588430457421 36] -7.905884304574208]
Test Case: 634 | Input/Output: [[-92.94503819253661 75] -17.945038192536614]
Test Case: 635 | Input/Output: [[-24.948235653677557 -79] -103.94823565367756]
Test Case: 636 | Input/Output: [[93.46236119065904 -95] -1.5376388093409616]
Test Case: 637 | Input/Output: [[81.91349245096524 -61] 20.913492450965236]
Test Case: 638 | Input/Output: [[-86.73338836683646 -49] -135.73338836683646]
Test Case: 639 | Input/Output: [[88.03635604372846 89] 177.03635604372846]
Test Case: 640 | Input/Output: [[-67.30976241479816 8] -59.30976241479816]
Test Case: 641 | Input/Output: [[-88.36602362737318 88] -0.36602362737318117]
Test Case: 642 | Input/Output: [[-30.853344923921682 20] -10.853344923921682]
Test Case: 643 | Input/Output: [[39.8508824403479 13] 52.8508824403479]
Test Case: 644 | Input/Output: [[97.60266727287933 44] 141.60266727287933]
Test Case: 645 | Input/Output: [[-16.486372793194732 -59] -75.48637279319473]
Test Case: 646 | Input/Output: [[-26.22467617598052 38] 11.77532382401948]
Test Case: 647 | Input/Output: [[-41.522235549855836 -40] -81.52223554985584]
Test Case: 648 | Input/Output: [[8.108304642981778 4] 12.108304642981778]
Test Case: 649 | Input/Output: [[-72.93780946383839 55] -17.93780946383839]
Test Case: 650 | Input/Output: [[88.06953471216772 90] 178.06953471216772]
Test Case: 651 | Input/Output: [[61.506245705704714 -61] 0.506245705704714]
Test Case: 652 | Input/Output: [[20.77838879665714 97] 117.77838879665714]
Test Case: 653 | Input/Output: [[-73.43132041335474 35] -38.43132041335474]
Test Case: 654 | Input/Output: [[-36.84662849583504 77] 40.15337150416496]
Test Case: 655 | Input/Output: [[40.92779148219998 84] 124.92779148219998]
Test Case: 656 | Input/Output: [[64.47421593441845 80] 144.47421593441845]
Test Case: 657 | Input/Output: [[-16.713418779077244 -18] -34.713418779077244]
Test Case: 658 | Input/Output: [[96.51030984333218 -22] 74.51030984333218]
Test Case: 659 | Input/Output: [[-83.44641070611965 -42] -125.44641070611965]
Test Case: 660 | Input/Output: [[20.67967526660965 51] 71.67967526660965]
Test Case: 661 | Input/Output: [[-36.01796372619661 54] 17.982036273803388]
Test Case: 662 | Input/Output: [[-24.710439338382145 98] 73.28956066161786]
Test Case: 663 | Input/Output: [[-10.812433638810035 -53] -63.812433638810035]
Test Case: 664 | Input/Output: [[-63.31067561511736 36] -27.31067561511736]
Test Case: 665 | Input/Output: [[-35.35586208671859 31] -4.355862086718588]
Test Case: 666 | Input/Output: [[-73.11368491362195 13] -60.11368491362195]
Test Case: 667 | Input/Output: [[29.735615972019986 -49] -19.264384027980014]
Test Case: 668 | Input/Output: [[41.60148181748923 -40] 1.6014818174892298]
Test Case: 669 | Input/Output: [[-98.67760346024963 50] -48.67760346024963]
Test Case: 670 | Input/Output: [[-12.308917910610418 18] 5.691082089389582]
Test Case: 671 | Input/Output: [[24.491322215249895 29] 53.491322215249895]
Test Case: 672 | Input/Output: [[6.359550586113798 45] 51.3595505861138]
Test Case: 673 | Input/Output: [[-30.5082641552832 -38] -68.5082641552832]
Test Case: 674 | Input/Output: [[-24.969831092574907 -46] -70.9698310925749]
Test Case: 675 | Input/Output: [[-37.41601049447654 -88] -125.41601049447654]
Test Case: 676 | Input/Output: [[-75.13369657312758 56] -19.13369657312758]
Test Case: 677 | Input/Output: [[-70.03466637379212 100] 29.96533362620788]
Test Case: 678 | Input/Output: [[-20.771737290727145 83] 62.228262709272855]
Test Case: 679 | Input/Output: [[37.71572518952445 26] 63.71572518952445]
Test Case: 680 | Input/Output: [[80.17121438395992 -10] 70.17121438395992]
Test Case: 681 | Input/Output: [[-42.06207818773671 0] -42.06207818773671]
Test Case: 682 | Input/Output: [[-56.2556110100705 83] 26.744388989929497]
Test Case: 683 | Input/Output: [[46.17199136631268 46] 92.17199136631268]
Test Case: 684 | Input/Output: [[90.69329707167552 -27] 63.69329707167552]
Test Case: 685 | Input/Output: [[-23.47325749713707 -73] -96.47325749713707]
Test Case: 686 | Input/Output: [[33.946776906126786 -29] 4.946776906126786]
Test Case: 687 | Input/Output: [[47.87360028912073 -39] 8.87360028912073]
Test Case: 688 | Input/Output: [[95.62297525810308 7] 102.62297525810308]
Test Case: 689 | Input/Output: [[62.89959223661069 86] 148.8995922366107]
Test Case: 690 | Input/Output: [[-71.40967915990174 86] 14.590320840098258]
Test Case: 691 | Input/Output: [[-54.981932923203615 -67] -121.98193292320362]
Test Case: 692 | Input/Output: [[-56.818748083930146 57] 0.18125191606985425]
Test Case: 693 | Input/Output: [[4.93922553656796 12] 16.93922553656796]
Test Case: 694 | Input/Output: [[-26.81675061570772 -4] -30.81675061570772]
Test Case: 695 | Input/Output: [[52.6750267925965 39] 91.6750267925965]
Test Case: 696 | Input/Output: [[17.863397002319402 19] 36.8633970023194]
Test Case: 697 | Input/Output: [[61.53459000056796 -84] -22.46540999943204]
Test Case: 698 | Input/Output: [[76.17592634341784 -14] 62.17592634341784]
Test Case: 699 | Input/Output: [[-66.75210454787978 7] -59.75210454787978]
Test Case: 700 | Input/Output: [[-46.926485594398 17] -29.926485594398002]
Test Case: 701 | Input/Output: [[41.3527663258252 -20] 21.3527663258252]
Test Case: 702 | Input/Output: [[41.83123815100544 -17] 24.831238151005437]
Test Case: 703 | Input/Output: [[62.511748398727775 23] 85.51174839872778]
Test Case: 704 | Input/Output: [[-80.80301978851531 -78] -158.80301978851531]
Test Case: 705 | Input/Output: [[75.72935606994886 69] 144.72935606994886]
Test Case: 706 | Input/Output: [[96.09959441460714 -21] 75.09959441460714]
Test Case: 707 | Input/Output: [[-59.21200983794388 -100] -159.21200983794387]
Test Case: 708 | Input/Output: [[35.56889191942349 -63] -27.431108080576507]
Test Case: 709 | Input/Output: [[-39.179812516942334 44] 4.820187483057666]
Test Case: 710 | Input/Output: [[20.597793613111065 1] 21.597793613111065]
Test Case: 711 | Input/Output: [[45.932729952231455 58] 103.93272995223145]
Test Case: 712 | Input/Output: [[-93.51749669368363 83] -10.517496693683626]
Test Case: 713 | Input/Output: [[-13.735314932138294 61] 47.264685067861706]
Test Case: 714 | Input/Output: [[57.34492456645529 45] 102.34492456645529]
Test Case: 715 | Input/Output: [[-27.002240263559926 -1] -28.002240263559926]
Test Case: 716 | Input/Output: [[15.869691456106167 -23] -7.1303085438938325]
Test Case: 717 | Input/Output: [[-87.03648645327952 -88] -175.0364864532795]
Test Case: 718 | Input/Output: [[75.67683078994665 64] 139.67683078994665]
Test Case: 719 | Input/Output: [[-53.60230622103417 62] 8.39769377896583]
Test Case: 720 | Input/Output: [[50.4743769910356 -24] 26.474376991035598]
Test Case: 721 | Input/Output: [[9.328814893887596 -70] -60.671185106112404]
Test Case: 722 | Input/Output: [[-24.915285872131804 -99] -123.9152858721318]
Test Case: 723 | Input/Output: [[-53.83163031331981 64] 10.168369686680187]
Test Case: 724 | Input/Output: [[-27.958047742241547 -34] -61.95804774224155]
Test Case: 725 | Input/Output: [[-81.26086254335087 -89] -170.26086254335087]
Test Case: 726 | Input/Output: [[59.234310179822955 68] 127.23431017982296]
Test Case: 727 | Input/Output: [[39.66338315813974 -42] -2.3366168418602626]
Test Case: 728 | Input/Output: [[-43.567847188523466 50] 6.432152811476534]
Test Case: 729 | Input/Output: [[66.16502445507538 65] 131.16502445507538]
Test Case: 730 | Input/Output: [[-11.318505676206243 -40] -51.31850567620624]
Test Case: 731 | Input/Output: [[-60.91517145921954 30] -30.915171459219543]
Test Case: 732 | Input/Output: [[-1.4340822856437399 5] 3.56591771435626]
Test Case: 733 | Input/Output: [[79.03247084168925 -66] 13.032470841689246]
Test Case: 734 | Input/Output: [[92.6818576425294 -19] 73.6818576425294]
Test Case: 735 | Input/Output: [[95.88453526517668 -58] 37.88453526517668]
Test Case: 736 | Input/Output: [[-41.291466339915004 11] -30.291466339915004]
Test Case: 737 | Input/Output: [[99.55149599242742 -61] 38.55149599242742]
Test Case: 738 | Input/Output: [[-64.33476839145641 79] 14.665231608543593]
Test Case: 739 | Input/Output: [[-21.69377776900474 45] 23.30622223099526]
Test Case: 740 | Input/Output: [[-11.377646694744143 -87] -98.37764669474414]
Test Case: 741 | Input/Output: [[5.8059407440798765 79] 84.80594074407988]
Test Case: 742 | Input/Output: [[44.083583886578595 66] 110.0835838865786]
Test Case: 743 | Input/Output: [[50.60895994515354 60] 110.60895994515354]
Test Case: 744 | Input/Output: [[-17.55748690486871 -98] -115.55748690486871]
Test Case: 745 | Input/Output: [[52.59953733936115 64] 116.59953733936115]
Test Case: 746 | Input/Output: [[-81.32147602635125 -33] -114.32147602635125]
Test Case: 747 | Input/Output: [[-11.880903805921264 -53] -64.88090380592126]
Test Case: 748 | Input/Output: [[-8.66987720766737 24] 15.33012279233263]
Test Case: 749 | Input/Output: [[-9.616026316386211 84] 74.38397368361379]
Test Case: 750 | Input/Output: [[-21.746938018191102 30] 8.253061981808898]
Test Case: 751 | Input/Output: [[-25.453056224655697 55] 29.546943775344303]
Test Case: 752 | Input/Output: [[64.20536892568538 54] 118.20536892568538]
Test Case: 753 | Input/Output: [[67.61541258570384 6] 73.61541258570384]
Test Case: 754 | Input/Output: [[99.73640192151299 -90] 9.736401921512993]
Test Case: 755 | Input/Output: [[-57.92476392614163 30] -27.92476392614163]
Test Case: 756 | Input/Output: [[-69.35330254082916 71] 1.6466974591708379]
Test Case: 757 | Input/Output: [[-72.66386076916199 -31] -103.66386076916199]
Test Case: 758 | Input/Output: [[-69.5467039720147 40] -29.546703972014697]
Test Case: 759 | Input/Output: [[-15.274088742159876 90] 74.72591125784012]
Test Case: 760 | Input/Output: [[-42.61556700281457 62] 19.384432997185428]
Test Case: 761 | Input/Output: [[-62.79151745463552 -23] -85.79151745463551]
Test Case: 762 | Input/Output: [[64.6755763522255 89] 153.6755763522255]
Test Case: 763 | Input/Output: [[49.20059796782556 -24] 25.20059796782556]
Test Case: 764 | Input/Output: [[-79.52119288071734 99] 19.478807119282664]
Test Case: 765 | Input/Output: [[73.1966823011669 64] 137.1966823011669]
Test Case: 766 | Input/Output: [[93.39790420059458 57] 150.39790420059458]
Test Case: 767 | Input/Output: [[26.07967787608594 -96] -69.92032212391406]
Test Case: 768 | Input/Output: [[87.32882192348757 99] 186.32882192348757]
Test Case: 769 | Input/Output: [[-69.20219032132951 52] -17.20219032132951]
Test Case: 770 | Input/Output: [[70.02239490496987 2] 72.02239490496987]
Test Case: 771 | Input/Output: [[68.1632880834432 -75] -6.836711916556794]
Test Case: 772 | Input/Output: [[8.17896858543756 41] 49.17896858543756]
Test Case: 773 | Input/Output: [[17.485038963373412 -5] 12.485038963373412]
Test Case: 774 | Input/Output: [[64.9628361587977 -30] 34.9628361587977]
Test Case: 775 | Input/Output: [[-76.31480389981111 -6] -82.31480389981111]
Test Case: 776 | Input/Output: [[-50.45166218350121 -56] -106.45166218350121]
Test Case: 777 | Input/Output: [[51.989036956810395 -49] 2.989036956810395]
Test Case: 778 | Input/Output: [[-47.900277382516634 -76] -123.90027738251663]
Test Case: 779 | Input/Output: [[-5.299401969544661 -49] -54.29940196954466]
Test Case: 780 | Input/Output: [[-68.2496077067226 -62] -130.2496077067226]
Test Case: 781 | Input/Output: [[-66.01232940760104 72] 5.987670592398956]
Test Case: 782 | Input/Output: [[-16.439944819439773 -79] -95.43994481943977]
Test Case: 783 | Input/Output: [[-94.8688681363678 91] -3.8688681363677944]
Test Case: 784 | Input/Output: [[72.37059659263551 38] 110.37059659263551]
Test Case: 785 | Input/Output: [[14.296535238976602 37] 51.2965352389766]
Test Case: 786 | Input/Output: [[53.22453649434499 70] 123.22453649434499]
Test Case: 787 | Input/Output: [[-29.494972223891907 -80] -109.4949722238919]
Test Case: 788 | Input/Output: [[-87.01486894588837 95] 7.985131054111633]
Test Case: 789 | Input/Output: [[80.83643994895445 -6] 74.83643994895445]
Test Case: 790 | Input/Output: [[-47.67680476455121 97] 49.32319523544879]
Test Case: 791 | Input/Output: [[-56.88846817352899 69] 12.111531826471008]
Test Case: 792 | Input/Output: [[47.82717022525193 -35] 12.827170225251933]
Test Case: 793 | Input/Output: [[93.69302169209917 7] 100.69302169209917]
Test Case: 794 | Input/Output: [[-17.503502500740908 12] -5.5035025007409075]
Test Case: 795 | Input/Output: [[-52.750324955308535 -58] -110.75032495530854]
Test Case: 796 | Input/Output: [[-18.147800544087914 51] 32.852199455912086]
Test Case: 797 | Input/Output: [[-95.36514735853324 -83] -178.36514735853325]
Test Case: 798 | Input/Output: [[45.70238937142918 83] 128.70238937142918]
Test Case: 799 | Input/Output: [[-19.65410216169205 41] 21.34589783830795]
Test Case: 800 | Input/Output: [[-13.166299012871676 27] 13.833700987128324]
Test Case: 801 | Input/Output: [[-22.48864127139143 -99] -121.48864127139143]
Test Case: 802 | Input/Output: [[18.668629543486006 14] 32.668629543486006]
Test Case: 803 | Input/Output: [[57.74687864979816 -74] -16.253121350201837]
Test Case: 804 | Input/Output: [[35.0918076532063 19] 54.0918076532063]
Test Case: 805 | Input/Output: [[-14.839817738844857 1] -13.839817738844857]
Test Case: 806 | Input/Output: [[97.49534370411146 40] 137.49534370411146]
Test Case: 807 | Input/Output: [[45.58968298178641 -61] -15.41031701821359]
Test Case: 808 | Input/Output: [[-86.34138655780048 -89] -175.3413865578005]
Test Case: 809 | Input/Output: [[-39.296299997279974 34] -5.296299997279974]
Test Case: 810 | Input/Output: [[47.78961932403979 -10] 37.78961932403979]
Test Case: 811 | Input/Output: [[-10.947390556970802 96] 85.0526094430292]
Test Case: 812 | Input/Output: [[-33.755984411215564 -55] -88.75598441121556]
Test Case: 813 | Input/Output: [[-60.543393824226285 73] 12.456606175773715]
Test Case: 814 | Input/Output: [[-94.58340728507959 -59] -153.5834072850796]
Test Case: 815 | Input/Output: [[-10.827748703414628 93] 82.17225129658537]
Test Case: 816 | Input/Output: [[26.97555052079774 -8] 18.97555052079774]
Test Case: 817 | Input/Output: [[-64.04118440169553 74] 9.958815598304469]
Test Case: 818 | Input/Output: [[72.65705216350355 -88] -15.34294783649645]
Test Case: 819 | Input/Output: [[-70.29981711874859 53] -17.299817118748592]
Test Case: 820 | Input/Output: [[-71.78878070591502 -96] -167.78878070591503]
Test Case: 821 | Input/Output: [[23.185685026317103 96] 119.1856850263171]
Test Case: 822 | Input/Output: [[67.85172311574098 90] 157.85172311574098]
Test Case: 823 | Input/Output: [[-93.09471797500646 -17] -110.09471797500646]
Test Case: 824 | Input/Output: [[43.346700124875525 -55] -11.653299875124475]
Test Case: 825 | Input/Output: [[28.71572597155094 61] 89.71572597155094]
Test Case: 826 | Input/Output: [[-5.615410350777481 -12] -17.61541035077748]
Test Case: 827 | Input/Output: [[3.6774625690265452 -2] 1.6774625690265452]
Test Case: 828 | Input/Output: [[-73.58863394793946 -69] -142.58863394793946]
Test Case: 829 | Input/Output: [[-50.53692808077572 -94] -144.53692808077574]
Test Case: 830 | Input/Output: [[79.94472090752171 -23] 56.94472090752171]
Test Case: 831 | Input/Output: [[-23.839844029388146 -12] -35.839844029388146]
Test Case: 832 | Input/Output: [[28.576405357341088 -62] -33.42359464265891]
Test Case: 833 | Input/Output: [[57.72223886535974 -63] -5.277761134640258]
Test Case: 834 | Input/Output: [[-14.804578815611151 -2] -16.80457881561115]
Test Case: 835 | Input/Output: [[38.37730876213925 -92] -53.62269123786075]
Test Case: 836 | Input/Output: [[-21.263767025026056 7] -14.263767025026056]
Test Case: 837 | Input/Output: [[-81.18154681716754 90] 8.818453182832457]
Test Case: 838 | Input/Output: [[41.95348308677745 -37] 4.953483086777453]
Test Case: 839 | Input/Output: [[-14.328321018212776 -57] -71.32832101821278]
Test Case: 840 | Input/Output: [[78.80140539993087 92] 170.80140539993087]
Test Case: 841 | Input/Output: [[94.01108029641648 -4] 90.01108029641648]
Test Case: 842 | Input/Output: [[-65.86343927457932 29] -36.86343927457932]
Test Case: 843 | Input/Output: [[1.8654224184434014 77] 78.8654224184434]
Test Case: 844 | Input/Output: [[85.22849085967732 58] 143.22849085967732]
Test Case: 845 | Input/Output: [[41.66905564350873 29] 70.66905564350873]
Test Case: 846 | Input/Output: [[-27.73007339829192 28] 0.2699266017080788]
Test Case: 847 | Input/Output: [[16.658588239568132 4] 20.658588239568132]
Test Case: 848 | Input/Output: [[-5.658583224182053 -8] -13.658583224182053]
Test Case: 849 | Input/Output: [[-53.33540115080542 0] -53.33540115080542]
Test Case: 850 | Input/Output: [[9.39500140145995 87] 96.39500140145995]
Test Case: 851 | Input/Output: [[-23.368622460055263 -98] -121.36862246005526]
Test Case: 852 | Input/Output: [[-57.071677509512185 2] -55.071677509512185]
Test Case: 853 | Input/Output: [[1.0360257669662474 97] 98.03602576696625]
Test Case: 854 | Input/Output: [[65.61831983626308 -63] 2.6183198362630833]
Test Case: 855 | Input/Output: [[30.77551284883222 68] 98.77551284883222]
Test Case: 856 | Input/Output: [[26.815254846769406 28] 54.815254846769406]
Test Case: 857 | Input/Output: [[-25.74081214007242 72] 46.25918785992758]
Test Case: 858 | Input/Output: [[-56.42658026763912 -96] -152.4265802676391]
Test Case: 859 | Input/Output: [[19.629898061988385 -17] 2.629898061988385]
Test Case: 860 | Input/Output: [[95.43926044541195 58] 153.43926044541195]
Test Case: 861 | Input/Output: [[19.513657215671046 24] 43.513657215671046]
Test Case: 862 | Input/Output: [[81.9722892466499 71] 152.9722892466499]
Test Case: 863 | Input/Output: [[-3.9947410564318204 -64] -67.99474105643182]
Test Case: 864 | Input/Output: [[-1.2805747558485052 -59] -60.280574755848505]
Test Case: 865 | Input/Output: [[-38.346357620585536 72] 33.653642379414464]
Test Case: 866 | Input/Output: [[-50.33717927787522 71] 20.662820722124778]
Test Case: 867 | Input/Output: [[88.80272629662335 -60] 28.802726296623348]
Test Case: 868 | Input/Output: [[-97.04091240468327 -95] -192.04091240468327]
Test Case: 869 | Input/Output: [[23.317287362928724 54] 77.31728736292872]
Test Case: 870 | Input/Output: [[20.595686186474893 16] 36.59568618647489]
Test Case: 871 | Input/Output: [[92.25387152153536 -95] -2.746128478464641]
Test Case: 872 | Input/Output: [[-7.327721228046144 19] 11.672278771953856]
Test Case: 873 | Input/Output: [[87.0881962200636 8] 95.0881962200636]
Test Case: 874 | Input/Output: [[-85.621553019559 25] -60.621553019559]
Test Case: 875 | Input/Output: [[-45.39594311115878 -64] -109.39594311115877]
Test Case: 876 | Input/Output: [[-23.749142181230738 -100] -123.74914218123074]
Test Case: 877 | Input/Output: [[-5.400016968409034 -59] -64.40001696840903]
Test Case: 878 | Input/Output: [[76.31287277643938 19] 95.31287277643938]
Test Case: 879 | Input/Output: [[49.10623139015826 62] 111.10623139015826]
Test Case: 880 | Input/Output: [[-35.20542757888762 -43] -78.20542757888762]
Test Case: 881 | Input/Output: [[-93.58493258536842 84] -9.58493258536842]
Test Case: 882 | Input/Output: [[-9.110385165988305 -98] -107.1103851659883]
Test Case: 883 | Input/Output: [[-4.6385491478777965 -87] -91.6385491478778]
Test Case: 884 | Input/Output: [[31.30215402228879 11] 42.30215402228879]
Test Case: 885 | Input/Output: [[69.52469112072885 -28] 41.524691120728846]
Test Case: 886 | Input/Output: [[35.94909780031077 -24] 11.949097800310767]
Test Case: 887 | Input/Output: [[-49.39682572076849 55] 5.60317427923151]
Test Case: 888 | Input/Output: [[-27.540648344562598 22] -5.540648344562598]
Test Case: 889 | Input/Output: [[38.50865899481829 -37] 1.5086589948182905]
Test Case: 890 | Input/Output: [[-83.661240393615 52] -31.661240393615003]
Test Case: 891 | Input/Output: [[-3.179330384108866 -77] -80.17933038410887]
Test Case: 892 | Input/Output: [[2.028449648477661 -79] -76.97155035152234]
Test Case: 893 | Input/Output: [[-50.200503212191535 13] -37.200503212191535]
Test Case: 894 | Input/Output: [[-77.34962783665705 -2] -79.34962783665705]
Test Case: 895 | Input/Output: [[-67.25618707831825 -36] -103.25618707831825]
Test Case: 896 | Input/Output: [[10.494670606229107 -28] -17.505329393770893]
Test Case: 897 | Input/Output: [[-95.19720715209286 -12] -107.19720715209286]
Test Case: 898 | Input/Output: [[44.8904580160692 23] 67.8904580160692]
Test Case: 899 | Input/Output: [[32.910115253468376 -54] -21.089884746531624]
Test Case: 900 | Input/Output: [[-17.454390097219672 -89] -106.45439009721967]
Test Case: 901 | Input/Output: [[-52.351582001306475 60] 7.648417998693525]
Test Case: 902 | Input/Output: [[47.75265713770182 60] 107.75265713770182]
Test Case: 903 | Input/Output: [[-56.85111949015638 43] -13.851119490156378]
Test Case: 904 | Input/Output: [[-34.94764175656408 27] -7.947641756564082]
Test Case: 905 | Input/Output: [[34.94377892051108 73] 107.94377892051108]
Test Case: 906 | Input/Output: [[-14.19251040754257 -62] -76.19251040754257]
Test Case: 907 | Input/Output: [[-24.67702131878204 -84] -108.67702131878204]
Test Case: 908 | Input/Output: [[-62.92636773223397 67] 4.07363226776603]
Test Case: 909 | Input/Output: [[-38.96407097166961 -99] -137.9640709716696]
Test Case: 910 | Input/Output: [[-70.33688274048325 -54] -124.33688274048325]
Test Case: 911 | Input/Output: [[59.53108696237277 -93] -33.46891303762723]
Test Case: 912 | Input/Output: [[-58.82235654333332 -70] -128.8223565433333]
Test Case: 913 | Input/Output: [[23.85176169271503 76] 99.85176169271503]
Test Case: 914 | Input/Output: [[-72.37553108580308 83] 10.624468914196925]
Test Case: 915 | Input/Output: [[85.33983717465722 10] 95.33983717465722]
Test Case: 916 | Input/Output: [[-3.206538585279972 -40] -43.20653858527997]
Test Case: 917 | Input/Output: [[-7.729438096258264 61] 53.270561903741736]
Test Case: 918 | Input/Output: [[-9.751424979643119 -2] -11.751424979643119]
Test Case: 919 | Input/Output: [[1.1430307262218804 -95] -93.85696927377812]
Test Case: 920 | Input/Output: [[51.62087375050834 79] 130.62087375050834]
Test Case: 921 | Input/Output: [[18.03335481948936 34] 52.03335481948936]
Test Case: 922 | Input/Output: [[80.01511861117456 15] 95.01511861117456]
Test Case: 923 | Input/Output: [[17.00934038566828 -89] -71.99065961433172]
Test Case: 924 | Input/Output: [[95.53028295426549 20] 115.53028295426549]
Test Case: 925 | Input/Output: [[13.699371467534107 -73] -59.30062853246589]
Test Case: 926 | Input/Output: [[-36.3466461860805 -90] -126.3466461860805]
Test Case: 927 | Input/Output: [[-89.13610036623798 43] -46.13610036623798]
Test Case: 928 | Input/Output: [[-22.002678565531838 -7] -29.002678565531838]
Test Case: 929 | Input/Output: [[36.51664042633408 84] 120.51664042633408]
Test Case: 930 | Input/Output: [[46.61608582364616 83] 129.61608582364616]
Test Case: 931 | Input/Output: [[-41.58710339569451 -59] -100.58710339569451]
Test Case: 932 | Input/Output: [[56.621199778953525 -53] 3.6211997789535246]
Test Case: 933 | Input/Output: [[39.35117637751401 85] 124.35117637751401]
Test Case: 934 | Input/Output: [[4.18841416235955 -21] -16.81158583764045]
Test Case: 935 | Input/Output: [[-25.371803846515746 -53] -78.37180384651575]
Test Case: 936 | Input/Output: [[-77.01338109503482 -98] -175.01338109503482]
Test Case: 937 | Input/Output: [[7.675720351646547 -15] -7.324279648353453]
Test Case: 938 | Input/Output: [[12.586003097124987 94] 106.58600309712499]
Test Case: 939 | Input/Output: [[46.12467936221353 98] 144.12467936221353]
Test Case: 940 | Input/Output: [[-35.56125333537213 -76] -111.56125333537213]
Test Case: 941 | Input/Output: [[16.33673613991229 -91] -74.66326386008771]
Test Case: 942 | Input/Output: [[-91.67539157585372 28] -63.67539157585372]
Test Case: 943 | Input/Output: [[-53.23708320054084 -96] -149.23708320054084]
Test Case: 944 | Input/Output: [[5.761557567677627 -90] -84.23844243232237]
Test Case: 945 | Input/Output: [[-24.50882635977878 46] 21.49117364022122]
Test Case: 946 | Input/Output: [[93.52609023801756 17] 110.52609023801756]
Test Case: 947 | Input/Output: [[67.15058234515541 -74] -6.849417654844586]
Test Case: 948 | Input/Output: [[-87.94153130026152 96] 8.058468699738484]
Test Case: 949 | Input/Output: [[38.15326020201803 -48] -9.846739797981968]
Test Case: 950 | Input/Output: [[-81.95918095747403 -65] -146.95918095747402]
Test Case: 951 | Input/Output: [[94.7893493918051 18] 112.7893493918051]
Test Case: 952 | Input/Output: [[20.34790984780483 31] 51.34790984780483]
Test Case: 953 | Input/Output: [[-86.72039661706337 92] 5.279603382936628]
Test Case: 954 | Input/Output: [[9.391813371745855 -73] -63.608186628254145]
Test Case: 955 | Input/Output: [[-53.01815689236011 52] -1.0181568923601105]
Test Case: 956 | Input/Output: [[32.44031415259116 -70] -37.55968584740884]
Test Case: 957 | Input/Output: [[20.46451933715386 44] 64.46451933715386]
Test Case: 958 | Input/Output: [[3.2851013164014518 45] 48.28510131640145]
Test Case: 959 | Input/Output: [[76.8000915748826 8] 84.8000915748826]
Test Case: 960 | Input/Output: [[14.09655682917797 -50] -35.90344317082203]
Test Case: 961 | Input/Output: [[-95.83967486363578 -77] -172.83967486363576]
Test Case: 962 | Input/Output: [[-46.03258378111883 -86] -132.03258378111883]
Test Case: 963 | Input/Output: [[95.27116877351057 82] 177.27116877351057]
Test Case: 964 | Input/Output: [[-95.35914041557857 74] -21.359140415578565]
Test Case: 965 | Input/Output: [[99.68779629527594 -55] 44.687796295275945]
Test Case: 966 | Input/Output: [[52.047269514662986 -11] 41.047269514662986]
Test Case: 967 | Input/Output: [[-84.4221150537434 -12] -96.4221150537434]
Test Case: 968 | Input/Output: [[-2.0546321039932423 -27] -29.054632103993242]
Test Case: 969 | Input/Output: [[-12.901107373828012 0] -12.901107373828012]
Test Case: 970 | Input/Output: [[-59.07051435391439 -27] -86.07051435391439]
Test Case: 971 | Input/Output: [[32.43461116411396 -36] -3.56538883588604]
Test Case: 972 | Input/Output: [[-43.420127159185085 83] 39.579872840814915]
Test Case: 973 | Input/Output: [[16.649308793442657 90] 106.64930879344266]
Test Case: 974 | Input/Output: [[83.24673079023677 -20] 63.24673079023677]
Test Case: 975 | Input/Output: [[7.138819909257137 9] 16.138819909257137]
Test Case: 976 | Input/Output: [[48.43059988063666 50] 98.43059988063666]
Test Case: 977 | Input/Output: [[82.12581667549225 0] 82.12581667549225]
Test Case: 978 | Input/Output: [[-30.599336402823667 29] -1.599336402823667]
Test Case: 979 | Input/Output: [[-52.19297053113685 -85] -137.19297053113684]
Test Case: 980 | Input/Output: [[35.549993953632736 7] 42.549993953632736]
Test Case: 981 | Input/Output: [[-5.175747872492934 20] 14.824252127507066]
Test Case: 982 | Input/Output: [[0.8449487707607091 -68] -67.15505122923929]
Test Case: 983 | Input/Output: [[12.797697897520194 -51] -38.202302102479806]
Test Case: 984 | Input/Output: [[33.41961032056403 -70] -36.58038967943597]
Test Case: 985 | Input/Output: [[-36.574394792542165 95] 58.425605207457835]
Test Case: 986 | Input/Output: [[-39.12392955722073 -44] -83.12392955722072]
Test Case: 987 | Input/Output: [[-73.80457347940174 -7] -80.80457347940174]
Test Case: 988 | Input/Output: [[-40.94538851848857 35] -5.945388518488571]
Test Case: 989 | Input/Output: [[8.878317599661557 72] 80.87831759966156]
Test Case: 990 | Input/Output: [[-4.703486558628512 -42] -46.70348655862851]
Test Case: 991 | Input/Output: [[59.405531517268685 1] 60.405531517268685]
Test Case: 992 | Input/Output: [[-6.980678259817765 99] 92.01932174018224]
Test Case: 993 | Input/Output: [[-33.784155496084495 -30] -63.784155496084495]
Test Case: 994 | Input/Output: [[-98.65905762411187 -45] -143.65905762411188]
Test Case: 995 | Input/Output: [[-67.2210458060303 68] 0.778954193969696]
Test Case: 996 | Input/Output: [[-19.9754122042944 -78] -97.9754122042944]
Test Case: 997 | Input/Output: [[1.0036029417866246 2] 3.0036029417866246]
Test Case: 998 | Input/Output: [[-25.142142144163103 68] 42.8578578558369]
Test Case: 999 | Input/Output: [[-76.2066497620725 95] 18.7933502379275]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove vector_boolean_pushall zip_insert_left_fromcode exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup vector_integer_butlast vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse exec_k vector_integer_yank float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times genome_dup return_code_pop char_swap integer_max return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank zip_shove vector_integer_flush vector_integer_subvec vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean integer_min exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add code_stackdepth exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse integer_swap string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.11.1-1-SNAPSHOTHash of last Git commit = 8a64f874173fae27ed1a77827849de0fade43c2b
GitHub link = https://github.com/lspector/Clojush/commit/8a64f874173fae27ed1a77827849de0fade43c2b
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = []
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :tournament
pop-when-tagging = true
population-size = 1000
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
random-screen = false
random-seed = 46 83 102 103 -58 103 -3 -86 -73 -83 93 48 15 -104 -3 -38
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Number IO problem report - generation 0
Test total error for best: 55440.0
Test mean error for best: 27.72000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 30.6537423401  | Program output: -64.3462576599
Correct output: 121.1693955328 | Program output: 88.1693955328 
Correct output: -87.1471496018 | Program output: -19.1471496018
Correct output: -26.3834517166 | Program output: 40.6165482834 
Correct output: 17.6470229611  | Program output: -64.3529770389
Correct output: 24.6248861839  | Program output: -31.3751138161
Correct output: 158.9893817123 | Program output: 98.9893817123 
Correct output: 27.839127542   | Program output: 16.839127542  
Correct output: 113.8711245019 | Program output: 33.8711245019 
Correct output: 79.1156340116  | Program output: 57.1156340116 
Correct output: 65.9365762451  | Program output: 34.9365762451 
Correct output: -40.513814741  | Program output: -45.513814741 
Correct output: 179.1033508308 | Program output: 99.1033508308 
Correct output: -151.9625542646 | Program output: -87.9625542646
Correct output: 56.3352749605  | Program output: 16.3352749605 
Correct output: -149.2545301832 | Program output: -49.2545301832
Correct output: 129.7111057352 | Program output: 51.7111057352 
Correct output: -1.8380522324  | Program output: -28.8380522324
Correct output: 0.5958526809   | Program output: 96.5958526809 
Correct output: 150.0065109753 | Program output: 92.0065109753 
Correct output: -21.0546356836 | Program output: 77.9453643164 
Correct output: -112.1094887867 | Program output: -54.1094887867
Correct output: 74.2495606848  | Program output: 44.2495606848 
Correct output: -74.8110438137 | Program output: 1.1889561863  
Correct output: -55.7903983915 | Program output: -42.7903983915
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction print_float} {:instruction float_flush} {:instruction float_shove} {:instruction float_mult} {:instruction float_mult})
Best program: (integer_min integer_rot integer_swap integer_div float_dup_times in1 -15 integer_mult float_inc integer_rot print_float float_flush float_shove float_mult float_mult)
Errors: [95.0 13 33.0 3 68.0 2 67.0 13 82.0 12 56.0 13 60.0 2 11.0 2 80.0 2 22.0 2 31.0 2 5.0 1 80.0 2 64.0 3 40.0 1 100.0 1 78.0 3 27.0 2 96.0 2 58.0 3 99.0 10 58.0 3 30.0 1 76.0 11 13.0 2]
Total: 1540.0
Mean: 30.8
Genome size: 15
Size: 16
Percent parens: 0.063
--- Population Statistics ---
Average total errors in population: 18007.236810600003
Median total errors in population: 25340.0
Error averages by case: (702.6338131000008 12.994 709.7963177000023 13.145 715.9004223999978 12.946 705.7338046999998 13.766 698.1786849999995 13.135 694.2597110000004 13.207 721.1444203999993 13.164 689.3483265999989 11.46 707.2567665999985 12.963 699.7042459000015 12.302 697.0934086000015 12.319 694.6136517999993 12.124 727.1699844000025 13.029 732.7239288999999 13.967 694.7255922999998 12.306 730.6238239000014 13.801 711.2671033999989 13.058 690.737357700001 12.205 704.9081909999989 11.429 717.1299187000019 12.93 706.9344002000001 13.559 721.8726357000018 13.906 699.0546474999983 12.264 707.2777171999992 13.543 704.6349359000017 12.991)
Error minima by case: (0.719 8 0.8306 3 1.1471 2 1.3052 7 0.353 9 0.0356 7 9.9894 2 3.2499 2 14.3656 2 1.6843 2 0.0634 2 0.4217 1 10.1034 2 27.6811 3 0.6125 1 24.9731 1 1.7824 2 0.6084 2 0.0015 2 3.0065 2 1.5747 8 12.1719 3 0.9722 1 0.1251 2 0.2096 2)
Average genome size in population (length): 51.755
Average program size in population (points): 52.755
Average percent parens in population: 0.043
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 2
Genome diversity (% unique Plush genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.321
Error (vector) diversity:			 0.349
Behavioral diversity:				 0.367
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 1298850
--- Timings ---
Current time: 1529614947749 milliseconds
Total Time:           3.5 seconds
Initialization:       0.1 seconds,  3.2%
Reproduction:         0.6 seconds, 16.3%
Fitness Testing:      2.8 seconds, 80.5%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Number IO problem report - generation 1
Test total error for best: 55440.0
Test mean error for best: 27.72000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 30.6537423401  | Program output: -64.3462576599
Correct output: 121.1693955328 | Program output: 88.1693955328 
Correct output: -87.1471496018 | Program output: -19.1471496018
Correct output: -26.3834517166 | Program output: 40.6165482834 
Correct output: 17.6470229611  | Program output: -64.3529770389
Correct output: 24.6248861839  | Program output: -31.3751138161
Correct output: 158.9893817123 | Program output: 98.9893817123 
Correct output: 27.839127542   | Program output: 16.839127542  
Correct output: 113.8711245019 | Program output: 33.8711245019 
Correct output: 79.1156340116  | Program output: 57.1156340116 
Correct output: 65.9365762451  | Program output: 34.9365762451 
Correct output: -40.513814741  | Program output: -45.513814741 
Correct output: 179.1033508308 | Program output: 99.1033508308 
Correct output: -151.9625542646 | Program output: -87.9625542646
Correct output: 56.3352749605  | Program output: 16.3352749605 
Correct output: -149.2545301832 | Program output: -49.2545301832
Correct output: 129.7111057352 | Program output: 51.7111057352 
Correct output: -1.8380522324  | Program output: -28.8380522324
Correct output: 0.5958526809   | Program output: 96.5958526809 
Correct output: 150.0065109753 | Program output: 92.0065109753 
Correct output: -21.0546356836 | Program output: 77.9453643164 
Correct output: -112.1094887867 | Program output: -54.1094887867
Correct output: 74.2495606848  | Program output: 44.2495606848 
Correct output: -74.8110438137 | Program output: 1.1889561863  
Correct output: -55.7903983915 | Program output: -42.7903983915
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction print_float} {:instruction float_flush} {:instruction float_shove} {:instruction float_mult} {:instruction float_mult})
Best program: (integer_min integer_rot integer_swap integer_div float_dup_times in1 -15 integer_mult float_inc integer_rot print_float float_flush float_shove float_mult float_mult)
Errors: [95.0 13 33.0 3 68.0 2 67.0 13 82.0 12 56.0 13 60.0 2 11.0 2 80.0 2 22.0 2 31.0 2 5.0 1 80.0 2 64.0 3 40.0 1 100.0 1 78.0 3 27.0 2 96.0 2 58.0 3 99.0 10 58.0 3 30.0 1 76.0 11 13.0 2]
Total: 1540.0
Mean: 30.8
Genome size: 15
Size: 16
Percent parens: 0.063
--- Population Statistics ---
Average total errors in population: 6292.5670304
Median total errors in population: 2228.9925
Error averages by case: (236.17458160000015 12.248 246.3323366000021 10.507 254.51436820000038 10.066 231.96378710000005 12.849 228.77287330000007 12.659 216.7196496000001 12.746 270.760907699999 10.528 196.4588795000009 8.99 248.43137779999805 10.074 222.14023149999878 9.686 216.6436571999979 9.658 208.94477529999818 9.435 284.3920008999999 10.327 288.44025550000083 11.128 213.11483390000157 9.698 291.9108997000007 10.839 256.72094219999707 10.321 203.08066789999864 9.611 240.4204550999992 8.97 265.05070839999854 10.08 245.09949359999985 12.167 267.36819609999884 11.044 220.79417840000116 9.667 241.91725829999953 12.079 230.80871499999938 10.214)
Error minima by case: (0.719 8 0.8306 3 1.1471 2 2.2214 8 0.353 8 0.0356 8 9.9894 2 3.2499 2 14.3656 2 1.6843 2 0.0634 2 2.4807 1 10.1034 2 27.6811 3 0.6125 1 24.9731 1 1.7824 2 0.6084 2 0.0015 2 3.0065 2 1.5747 9 12.1719 3 3.1818 1 0.189 2 1.2438 2)
Average genome size in population (length): 60.553
Average program size in population (points): 61.553
Average percent parens in population: 0.022
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.484
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.769
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.769
Total error diversity:				 0.285
Error (vector) diversity:			 0.307
Behavioral diversity:				 0.326
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 2817591
--- Timings ---
Current time: 1529614952974 milliseconds
Total Time:           9.0 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         3.8 seconds, 42.1%
Fitness Testing:      4.5 seconds, 50.4%
Report:               0.6 seconds,  6.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Number IO problem report - generation 2
Test total error for best: 55440.0
Test mean error for best: 27.72000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 30.6537423401  | Program output: -64.3462576599
Correct output: 121.1693955328 | Program output: 88.1693955328 
Correct output: -87.1471496018 | Program output: -19.1471496018
Correct output: -26.3834517166 | Program output: 40.6165482834 
Correct output: 17.6470229611  | Program output: -64.3529770389
Correct output: 24.6248861839  | Program output: -31.3751138161
Correct output: 158.9893817123 | Program output: 98.9893817123 
Correct output: 27.839127542   | Program output: 16.839127542  
Correct output: 113.8711245019 | Program output: 33.8711245019 
Correct output: 79.1156340116  | Program output: 57.1156340116 
Correct output: 65.9365762451  | Program output: 34.9365762451 
Correct output: -40.513814741  | Program output: -45.513814741 
Correct output: 179.1033508308 | Program output: 99.1033508308 
Correct output: -151.9625542646 | Program output: -87.9625542646
Correct output: 56.3352749605  | Program output: 16.3352749605 
Correct output: -149.2545301832 | Program output: -49.2545301832
Correct output: 129.7111057352 | Program output: 51.7111057352 
Correct output: -1.8380522324  | Program output: -28.8380522324
Correct output: 0.5958526809   | Program output: 96.5958526809 
Correct output: 150.0065109753 | Program output: 92.0065109753 
Correct output: -21.0546356836 | Program output: 77.9453643164 
Correct output: -112.1094887867 | Program output: -54.1094887867
Correct output: 74.2495606848  | Program output: 44.2495606848 
Correct output: -74.8110438137 | Program output: 1.1889561863  
Correct output: -55.7903983915 | Program output: -42.7903983915
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_div} {:instruction integer_flush} {:instruction integer_shove} {:instruction float_pop} {:instruction float_add} {:instruction integer_max} {:instruction integer_sub} {:instruction float_div} {:instruction float_tan} {:instruction integer_sub} {:instruction -54} {:instruction 72} {:instruction 4.5174446754870985} {:instruction float_mod} {:instruction float_rot} {:instruction integer_max} {:instruction tag_float_269} {:instruction integer_min} {:instruction float_tan} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_swap} {:instruction tag_integer_737} {:instruction integer_dup} {:instruction integer_pop} {:instruction print_float} {:instruction float_tan} {:instruction tag_float_496} {:instruction float_sin} {:instruction integer_min} {:instruction -73.55312638423791} {:instruction float_inc} {:instruction float_flush} {:instruction 24} {:instruction float_yankdup} {:instruction float_max} {:instruction float_flush} {:instruction integer_pop} {:instruction float_stackdepth} {:instruction integer_dup_times} {:instruction -31.748163428909365} {:instruction float_max} {:instruction float_rot} {:instruction float_flush} {:instruction integer_flush} {:instruction float_dup} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction integer_dup_items} {:instruction float_tan} {:instruction float_sin} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_rot} {:instruction integer_flush} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction print_float} {:instruction integer_yank} {:instruction integer_inc})
Best program: (float_div integer_flush integer_shove float_pop float_add integer_max integer_sub float_div float_tan integer_sub -54 72 4.5174446754870985 float_mod float_rot integer_max tag_float_269 integer_min float_tan float_inc float_yankdup float_swap tag_integer_737 integer_dup integer_pop print_float float_tan tag_float_496 float_sin integer_min -73.55312638423791 float_inc float_flush 24 float_yankdup float_max float_flush integer_pop float_stackdepth integer_dup_times -31.748163428909365 float_max float_rot float_flush integer_flush float_dup integer_flush integer_stackdepth integer_dup_items float_tan float_sin float_dup_items integer_dup_items integer_dup_times print_float float_swap float_yankdup float_max integer_rot integer_flush integer_dup float_mod integer_shove integer_dup_items in1 float_inc float_mod print_float integer_yank integer_inc)
Errors: [95.0 13 33.0 3 68.0 2 67.0 13 82.0 12 56.0 13 60.0 2 11.0 2 80.0 2 22.0 2 31.0 2 5.0 1 80.0 2 64.0 3 40.0 1 100.0 1 78.0 3 27.0 2 96.0 2 58.0 3 99.0 10 58.0 3 30.0 1 76.0 11 13.0 2]
Total: 1540.0
Mean: 30.8
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4835.943464700003
Median total errors in population: 1566.0
Error averages by case: (214.79430680000027 12.716 172.44496900000033 5.975 192.13774680000014 5.411 191.01401270000017 13.249 205.14988790000024 13.279 182.6524402000003 13.416 194.24033789999993 5.911 146.2067207 4.911 200.1720966999997 5.612 159.86014020000005 5.303 163.57378559999978 5.173 147.89126529999987 4.624 209.27432709999994 5.774 198.72253719999983 6.411 167.78595940000045 5.151 220.23277540000043 6.153 201.13606169999943 5.878 161.01859149999953 5.304 217.5767216999994 4.958 191.75633439999973 5.759 218.1769472999998 11.226 190.47747029999996 6.4 164.0887862 5.072 190.94766810000016 11.144 154.34757459999986 5.454)
Error minima by case: (4.3463 9 29.1694 3 19.1471 2 9.3122 9 6.9422 9 0.0356 9 49.0607 2 3.2499 2 16.0576 2 7.1869 2 6.9366 2 2.4862 1 49.1746 2 61.0 3 2.6647 1 49.2545 1 1.7824 2 0.5181 2 0.1076 2 42.0778 2 17.7598 9 54.1095 3 5.6792 1 0.189 2 10.0 2)
Average genome size in population (length): 53.721
Average program size in population (points): 54.721
Average percent parens in population: 0.024
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.9675
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 43
Genome diversity (% unique Plush genomes):	 0.64
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.64
Total error diversity:				 0.11
Error (vector) diversity:			 0.121
Behavioral diversity:				 0.129
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 4164941
--- Timings ---
Current time: 1529614956753 milliseconds
Total Time:          12.4 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         5.3 seconds, 42.6%
Fitness Testing:      6.2 seconds, 49.8%
Report:               0.8 seconds,  6.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Number IO problem report - generation 3
Test total error for best: 55440.0
Test mean error for best: 27.72000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 30.6537423401  | Program output: -64.3462576599
Correct output: 121.1693955328 | Program output: 88.1693955328 
Correct output: -87.1471496018 | Program output: -19.1471496018
Correct output: -26.3834517166 | Program output: 40.6165482834 
Correct output: 17.6470229611  | Program output: -64.3529770389
Correct output: 24.6248861839  | Program output: -31.3751138161
Correct output: 158.9893817123 | Program output: 98.9893817123 
Correct output: 27.839127542   | Program output: 16.839127542  
Correct output: 113.8711245019 | Program output: 33.8711245019 
Correct output: 79.1156340116  | Program output: 57.1156340116 
Correct output: 65.9365762451  | Program output: 34.9365762451 
Correct output: -40.513814741  | Program output: -45.513814741 
Correct output: 179.1033508308 | Program output: 99.1033508308 
Correct output: -151.9625542646 | Program output: -87.9625542646
Correct output: 56.3352749605  | Program output: 16.3352749605 
Correct output: -149.2545301832 | Program output: -49.2545301832
Correct output: 129.7111057352 | Program output: 51.7111057352 
Correct output: -1.8380522324  | Program output: -28.8380522324
Correct output: 0.5958526809   | Program output: 96.5958526809 
Correct output: 150.0065109753 | Program output: 92.0065109753 
Correct output: -21.0546356836 | Program output: 77.9453643164 
Correct output: -112.1094887867 | Program output: -54.1094887867
Correct output: 74.2495606848  | Program output: 44.2495606848 
Correct output: -74.8110438137 | Program output: 1.1889561863  
Correct output: -55.7903983915 | Program output: -42.7903983915
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction print_float} {:instruction float_flush} {:instruction float_shove} {:instruction float_mult} {:instruction float_mult})
Best program: (integer_min integer_rot integer_swap integer_div float_dup_times in1 -15 integer_mult float_inc integer_rot print_float float_flush float_shove float_mult float_mult)
Errors: [95.0 13 33.0 3 68.0 2 67.0 13 82.0 12 56.0 13 60.0 2 11.0 2 80.0 2 22.0 2 31.0 2 5.0 1 80.0 2 64.0 3 40.0 1 100.0 1 78.0 3 27.0 2 96.0 2 58.0 3 99.0 10 58.0 3 30.0 1 76.0 11 13.0 2]
Total: 1540.0
Mean: 30.8
Genome size: 15
Size: 16
Percent parens: 0.063
--- Population Statistics ---
Average total errors in population: 4184.5824193
Median total errors in population: 1554.0
Error averages by case: (198.2362637 12.666 139.59697789999998 4.206 172.6344164 3.537 166.9303247 13.254 186.70528189999996 12.932 163.52734590000003 13.242 163.6002992 3.912 119.24513119999999 3.297 180.46329619999997 3.709 129.4838272 3.441 137.15186060000002 3.407 118.5648901 2.532 181.28205710000003 3.737 169.74985210000003 4.506 144.884332 3.097 201.24209589999998 3.872 178.92002720000002 4.033 137.8159873 3.477 193.0536557 3.345 161.7442069 4.024 195.61132289999998 10.566 164.1193089 4.513 136.3954741 3.097 177.50846500000003 9.996 124.18571920000001 3.532)
Error minima by case: (24.131 10 33.0 2 65.0 2 11.3835 10 11.1243 11 18.1021 9 38.0 1 11.0 2 18.0 1 22.0 2 31.0 2 5.0 1 18.0 1 61.0 3 40.0 1 97.0 1 20.0 1 2.838 2 0.0124 2 40.0 1 6.0546 10 55.0 3 30.0 1 59.811 2 10.0 2)
Average genome size in population (length): 43.54
Average program size in population (points): 44.54
Average percent parens in population: 0.030
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.37075
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 111
Genome diversity (% unique Plush genomes):	 0.566
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 111
Syntactic diversity (% unique Push programs):	 0.566
Total error diversity:				 0.039
Error (vector) diversity:			 0.044
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 5253841
--- Timings ---
Current time: 1529614960193 milliseconds
Total Time:          16.2 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         6.9 seconds, 42.9%
Fitness Testing:      7.7 seconds, 47.3%
Report:               1.5 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Number IO problem report - generation 4
Test total error for best: 55459.0
Test mean error for best: 27.72950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 30.6537423401  | Program output: -63.3462576599
Correct output: 121.1693955328 | Program output: 89.1693955328 
Correct output: -87.1471496018 | Program output: -18.1471496018
Correct output: -26.3834517166 | Program output: 41.6165482834 
Correct output: 17.6470229611  | Program output: -63.3529770389
Correct output: 24.6248861839  | Program output: -30.3751138161
Correct output: 158.9893817123 | Program output: 99.9893817123 
Correct output: 27.839127542   | Program output: 17.839127542  
Correct output: 113.8711245019 | Program output: 34.8711245019 
Correct output: 79.1156340116  | Program output: 58.1156340116 
Correct output: 65.9365762451  | Program output: 35.9365762451 
Correct output: -40.513814741  | Program output: -44.513814741 
Correct output: 179.1033508308 | Program output: 100.1033508308
Correct output: -151.9625542646 | Program output: -86.9625542646
Correct output: 56.3352749605  | Program output: 17.3352749605 
Correct output: -149.2545301832 | Program output: -48.2545301832
Correct output: 129.7111057352 | Program output: 52.7111057352 
Correct output: -1.8380522324  | Program output: -27.8380522324
Correct output: 0.5958526809   | Program output: 97.5958526809 
Correct output: 150.0065109753 | Program output: 93.0065109753 
Correct output: -21.0546356836 | Program output: 78.9453643164 
Correct output: -112.1094887867 | Program output: -53.1094887867
Correct output: 74.2495606848  | Program output: 45.2495606848 
Correct output: -74.8110438137 | Program output: 2.1889561863  
Correct output: -55.7903983915 | Program output: -41.7903983915
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction -15} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction print_float} {:instruction float_flush} {:instruction float_shove} {:instruction float_mult} {:instruction float_mult})
Best program: (integer_min integer_rot integer_swap integer_div float_dup_times in1 -15 integer_mult float_inc integer_rot -15 integer_mult integer_mult float_inc integer_rot print_float float_flush float_shove float_mult float_mult)
Errors: [94.0 13 32.0 3 69.0 2 68.0 13 81.0 13 55.0 13 59.0 3 10.0 1 79.0 3 21.0 2 30.0 1 4.0 1 79.0 2 65.0 3 39.0 2 101.0 2 77.0 2 26.0 2 97.0 2 57.0 3 100.0 10 59.0 3 29.0 2 77.0 11 14.0 2]
Total: 1536.0
Mean: 30.72
Genome size: 20
Size: 21
Percent parens: 0.048
--- Population Statistics ---
Average total errors in population: 4039.8826581
Median total errors in population: 1540.0
Error averages by case: (190.01847299999997 12.927 135.183468 4.104 165.5946238 3.33 164.45919059999997 13.186 178.3834205 12.441 155.3117652 13.134 159.38092790000002 3.416 115.27947719999999 3.094 177.08557320000003 3.216 125.2453067 3.21 133.2337695 3.186 110.06656360000001 2.332 177.2812699 3.227 162.42772090000003 4.3 141.2329656 2.495 194.4176003 2.919 175.3490931 3.907 129.4187492 3.254 190.27344440000002 3.123 157.5699793 3.904 192.9872041 10.474 156.8590407 4.31 132.3667085 2.51 168.938975 9.676 116.5143479 3.328)
Error minima by case: (22.131 10 32.0 3 65.0 2 13.3835 12 9.1243 11 16.1021 9 59.0 2 10.0 1 79.0 2 21.0 2 30.0 1 4.0 1 79.0 2 61.0 3 39.0 1 97.0 1 77.0 2 2.5165 1 4.9216 2 57.0 2 8.0546 10 55.0 3 29.0 1 61.811 2 10.0 1)
Average genome size in population (length): 30.152
Average program size in population (points): 31.152
Average percent parens in population: 0.047
Minimum age in population: 4.0
Maximum age in population: 7.375
Average age in population: 5.84775
Median age in population: 5.875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 385
Genome diversity (% unique Plush genomes):	 0.438
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 385
Syntactic diversity (% unique Push programs):	 0.438
Total error diversity:				 0.025
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 6007641
--- Timings ---
Current time: 1529614963383 milliseconds
Total Time:          19.4 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         8.4 seconds, 43.4%
Fitness Testing:      9.1 seconds, 46.8%
Report:               1.8 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Number IO problem report - generation 5
Test total error for best: 55459.0
Test mean error for best: 27.72950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 30.6537423401  | Program output: -63.3462576599
Correct output: 121.1693955328 | Program output: 89.1693955328 
Correct output: -87.1471496018 | Program output: -18.1471496018
Correct output: -26.3834517166 | Program output: 41.6165482834 
Correct output: 17.6470229611  | Program output: -63.3529770389
Correct output: 24.6248861839  | Program output: -30.3751138161
Correct output: 158.9893817123 | Program output: 99.9893817123 
Correct output: 27.839127542   | Program output: 17.839127542  
Correct output: 113.8711245019 | Program output: 34.8711245019 
Correct output: 79.1156340116  | Program output: 58.1156340116 
Correct output: 65.9365762451  | Program output: 35.9365762451 
Correct output: -40.513814741  | Program output: -44.513814741 
Correct output: 179.1033508308 | Program output: 100.1033508308
Correct output: -151.9625542646 | Program output: -86.9625542646
Correct output: 56.3352749605  | Program output: 17.3352749605 
Correct output: -149.2545301832 | Program output: -48.2545301832
Correct output: 129.7111057352 | Program output: 52.7111057352 
Correct output: -1.8380522324  | Program output: -27.8380522324
Correct output: 0.5958526809   | Program output: 97.5958526809 
Correct output: 150.0065109753 | Program output: 93.0065109753 
Correct output: -21.0546356836 | Program output: 78.9453643164 
Correct output: -112.1094887867 | Program output: -53.1094887867
Correct output: 74.2495606848  | Program output: 45.2495606848 
Correct output: -74.8110438137 | Program output: 2.1889561863  
Correct output: -55.7903983915 | Program output: -41.7903983915
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction print_float} {:instruction float_flush} {:instruction float_shove} {:instruction float_mult} {:instruction float_mult})
Best program: (integer_min integer_rot integer_swap integer_div float_dup_times in1 -15 integer_mult float_inc integer_rot float_inc integer_rot print_float float_flush float_shove float_mult float_mult)
Errors: [94.0 13 32.0 3 69.0 2 68.0 13 81.0 13 55.0 13 59.0 3 10.0 1 79.0 3 21.0 2 30.0 1 4.0 1 79.0 2 65.0 3 39.0 2 101.0 2 77.0 2 26.0 2 97.0 2 57.0 3 100.0 10 59.0 3 29.0 2 77.0 11 14.0 2]
Total: 1536.0
Mean: 30.72
Genome size: 17
Size: 18
Percent parens: 0.056
--- Population Statistics ---
Average total errors in population: 2802.5788312
Median total errors in population: 1540.0
Error averages by case: (142.7583058 13.02 84.5037246 3.585 117.46242720000001 2.65 116.33883999999999 13.069 130.4472904 12.115 105.9266018 13.032 110.1033311 2.666 63.453998799999994 2.525 128.8384905 2.66 73.9927114 2.598 82.4484258 2.578 57.83918500000001 1.652 129.04358100000002 2.65 113.8830143 3.644 90.91551519999999 1.67 147.861303 1.779 127.00670720000001 3.568 78.62963640000001 2.608 143.64112050000003 2.546 108.1885026 3.58 146.57594640000002 10.233 108.110391 3.648 81.5308 1.676 124.05770760000001 11.166 65.4532736 2.65)
Error minima by case: (25.1363 10 32.0 3 66.0 2 23.6151 8 12.1296 11 19.1074 9 59.0 2 10.0 1 79.0 2 21.0 2 30.0 1 4.0 1 79.0 2 62.0 3 39.0 1 98.0 1 77.0 2 2.838 2 0.3794 2 57.0 2 22.0544 10 56.0 3 29.0 1 74.0 2 11.0 2)
Average genome size in population (length): 17.007
Average program size in population (points): 18.007
Average percent parens in population: 0.060
Minimum age in population: 5.0
Maximum age in population: 9.0
Average age in population: 7.3645
Median age in population: 7.4375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 498
Genome diversity (% unique Plush genomes):	 0.294
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 498
Syntactic diversity (% unique Push programs):	 0.294
Total error diversity:				 0.013
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.013
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 6432841
--- Timings ---
Current time: 1529614965991 milliseconds
Total Time:          22.0 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         9.7 seconds, 44.1%
Fitness Testing:     10.2 seconds, 46.2%
Report:               2.0 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Number IO problem report - generation 6
Test total error for best: 55544.0
Test mean error for best: 27.77200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 30.6537423401  | Program output: -62.3462576599
Correct output: 121.1693955328 | Program output: 90.1693955328 
Correct output: -87.1471496018 | Program output: -17.1471496018
Correct output: -26.3834517166 | Program output: 42.6165482834 
Correct output: 17.6470229611  | Program output: -62.3529770389
Correct output: 24.6248861839  | Program output: -29.3751138161
Correct output: 158.9893817123 | Program output: 100.9893817123
Correct output: 27.839127542   | Program output: 18.839127542  
Correct output: 113.8711245019 | Program output: 35.8711245019 
Correct output: 79.1156340116  | Program output: 59.1156340116 
Correct output: 65.9365762451  | Program output: 36.9365762451 
Correct output: -40.513814741  | Program output: -43.513814741 
Correct output: 179.1033508308 | Program output: 101.1033508308
Correct output: -151.9625542646 | Program output: -85.9625542646
Correct output: 56.3352749605  | Program output: 18.3352749605 
Correct output: -149.2545301832 | Program output: -47.2545301832
Correct output: 129.7111057352 | Program output: 53.7111057352 
Correct output: -1.8380522324  | Program output: -26.8380522324
Correct output: 0.5958526809   | Program output: 98.5958526809 
Correct output: 150.0065109753 | Program output: 94.0065109753 
Correct output: -21.0546356836 | Program output: 79.9453643164 
Correct output: -112.1094887867 | Program output: -52.1094887867
Correct output: 74.2495606848  | Program output: 46.2495606848 
Correct output: -74.8110438137 | Program output: 3.1889561863  
Correct output: -55.7903983915 | Program output: -40.7903983915
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction print_float} {:instruction float_flush} {:instruction float_shove})
Best program: (integer_min integer_rot integer_swap integer_div float_dup_times in1 -15 integer_mult float_inc float_inc integer_rot float_inc integer_rot print_float float_flush float_shove)
Errors: [93.0 13 31.0 3 70.0 1 69.0 12 80.0 13 54.0 12 58.0 2 9.0 2 78.0 3 20.0 1 29.0 2 3.0 1 78.0 2 66.0 2 38.0 2 102.0 2 76.0 3 25.0 2 98.0 2 56.0 3 101.0 10 60.0 2 28.0 2 78.0 11 15.0 2]
Total: 1525.0
Mean: 30.5
Genome size: 16
Size: 17
Percent parens: 0.059
--- Population Statistics ---
Average total errors in population: 3089.67642
Median total errors in population: 1540.0
Error averages by case: (153.48687589999997 13.029 96.10914369999999 3.737 128.7543591 2.812 127.58228659999999 13.094 141.3342447 12.233 117.1362372 13.046 121.43170330000001 2.918 75.25132099999999 2.58 139.8362703 2.911 85.6992053 2.745 94.024726 2.647 69.7200766 1.815 140.1049644 2.824 125.2900521 3.806 102.36521180000001 1.918 158.7976649 2.06 138.029426 3.638 90.0737602 2.763 154.4738401 2.686 119.4976253 3.733 157.3525825 10.297 119.5456231 3.81 93.12835310000001 1.926 136.15696259999996 11.225 77.4279042 2.813)
Error minima by case: (23.131 10 31.0 3 67.0 1 27.1555 11 10.1243 10 17.1021 9 58.0 2 9.0 1 78.0 2 20.0 1 29.0 1 3.0 1 78.0 2 63.0 2 38.0 1 99.0 1 76.0 2 2.2059 2 0.3794 2 56.0 3 21.3786 10 57.0 2 28.0 1 74.9989 11 12.0 2)
Average genome size in population (length): 17.257
Average program size in population (points): 18.257
Average percent parens in population: 0.059
Minimum age in population: 6.5625
Maximum age in population: 10.46875
Average age in population: 8.925375
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 401
Genome diversity (% unique Plush genomes):	 0.349
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 401
Syntactic diversity (% unique Push programs):	 0.349
Total error diversity:				 0.014
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.014
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 6864266
--- Timings ---
Current time: 1529614968811 milliseconds
Total Time:          24.8 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        11.2 seconds, 45.0%
Fitness Testing:     11.3 seconds, 45.4%
Report:               2.3 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Number IO problem report - generation 7
Test total error for best: 55544.0
Test mean error for best: 27.77200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 30.6537423401  | Program output: -62.3462576599
Correct output: 121.1693955328 | Program output: 90.1693955328 
Correct output: -87.1471496018 | Program output: -17.1471496018
Correct output: -26.3834517166 | Program output: 42.6165482834 
Correct output: 17.6470229611  | Program output: -62.3529770389
Correct output: 24.6248861839  | Program output: -29.3751138161
Correct output: 158.9893817123 | Program output: 100.9893817123
Correct output: 27.839127542   | Program output: 18.839127542  
Correct output: 113.8711245019 | Program output: 35.8711245019 
Correct output: 79.1156340116  | Program output: 59.1156340116 
Correct output: 65.9365762451  | Program output: 36.9365762451 
Correct output: -40.513814741  | Program output: -43.513814741 
Correct output: 179.1033508308 | Program output: 101.1033508308
Correct output: -151.9625542646 | Program output: -85.9625542646
Correct output: 56.3352749605  | Program output: 18.3352749605 
Correct output: -149.2545301832 | Program output: -47.2545301832
Correct output: 129.7111057352 | Program output: 53.7111057352 
Correct output: -1.8380522324  | Program output: -26.8380522324
Correct output: 0.5958526809   | Program output: 98.5958526809 
Correct output: 150.0065109753 | Program output: 94.0065109753 
Correct output: -21.0546356836 | Program output: 79.9453643164 
Correct output: -112.1094887867 | Program output: -52.1094887867
Correct output: 74.2495606848  | Program output: 46.2495606848 
Correct output: -74.8110438137 | Program output: 3.1889561863  
Correct output: -55.7903983915 | Program output: -40.7903983915
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction integer_mult} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction print_float} {:instruction float_flush} {:instruction float_shove} {:instruction float_mult} {:instruction float_mult})
Best program: (integer_min integer_rot integer_swap integer_div float_dup_times in1 -15 integer_mult integer_swap integer_div float_dup_times in1 -15 integer_mult float_inc integer_rot float_inc integer_rot integer_mult float_inc integer_rot print_float float_flush float_shove float_mult float_mult)
Errors: [93.0 13 31.0 3 70.0 1 69.0 12 80.0 13 54.0 12 58.0 2 9.0 2 78.0 3 20.0 1 29.0 2 3.0 1 78.0 2 66.0 2 38.0 2 102.0 2 76.0 3 25.0 2 98.0 2 56.0 3 101.0 10 60.0 2 28.0 2 78.0 11 15.0 2]
Total: 1525.0
Mean: 30.5
Genome size: 26
Size: 27
Percent parens: 0.037
--- Population Statistics ---
Average total errors in population: 2566.9189025999995
Median total errors in population: 1540.0
Error averages by case: (133.396908 13.009 74.49193919999999 3.497 108.80398800000002 2.533 107.627413 13.039 120.9818945 12.544 96.21785019999999 13.006 100.2985792 3.008 53.3392788 2.007 119.2683428 3.012 63.92483179999999 2.489 72.4754736 2.053 47.6404548 1.551 119.39880720000001 2.556 105.2512498 3.525 81.03327100000001 2.024 139.5484176 2.118 117.39402260000001 3.048 68.54664600000001 2.51 135.241646 2.464 98.37461339999999 3.496 138.1127552 10.19 99.3738376 3.531 71.5390996 2.025 115.4560215 11.135 56.2635612 2.548)
Error minima by case: (23.131 10 31.0 3 51.0239 1 9.7398 10 10.1243 10 17.1021 9 58.0 2 9.0 1 78.0 2 20.0 1 29.0 1 3.0 1 46.8966 2 62.0 2 38.0 1 98.0 1 76.0 2 9.3608 2 6.9269 2 56.0 2 6.0546 10 56.0 2 28.0 1 38.6878 2 11.0 2)
Average genome size in population (length): 17.298
Average program size in population (points): 18.298
Average percent parens in population: 0.057
Minimum age in population: 8.5
Maximum age in population: 12.25
Average age in population: 10.5146875
Median age in population: 10.5234375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 194
Genome diversity (% unique Plush genomes):	 0.335
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 194
Syntactic diversity (% unique Push programs):	 0.335
Total error diversity:				 0.015
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 7296716
--- Timings ---
Current time: 1529614971903 milliseconds
Total Time:          27.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        12.8 seconds, 45.8%
Fitness Testing:     12.4 seconds, 44.6%
Report:               2.6 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Number IO problem report - generation 8
Test total error for best: 55638.0
Test mean error for best: 27.81900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 30.6537423401  | Program output: -60.3462576599
Correct output: 121.1693955328 | Program output: 92.1693955328 
Correct output: -87.1471496018 | Program output: -15.1471496018
Correct output: -26.3834517166 | Program output: 44.6165482834 
Correct output: 17.6470229611  | Program output: -60.3529770389
Correct output: 24.6248861839  | Program output: -27.3751138161
Correct output: 158.9893817123 | Program output: 102.9893817123
Correct output: 27.839127542   | Program output: 20.839127542  
Correct output: 113.8711245019 | Program output: 37.8711245019 
Correct output: 79.1156340116  | Program output: 61.1156340116 
Correct output: 65.9365762451  | Program output: 38.9365762451 
Correct output: -40.513814741  | Program output: -41.513814741 
Correct output: 179.1033508308 | Program output: 103.1033508308
Correct output: -151.9625542646 | Program output: -83.9625542646
Correct output: 56.3352749605  | Program output: 20.3352749605 
Correct output: -149.2545301832 | Program output: -45.2545301832
Correct output: 129.7111057352 | Program output: 55.7111057352 
Correct output: -1.8380522324  | Program output: -24.8380522324
Correct output: 0.5958526809   | Program output: 100.5958526809
Correct output: 150.0065109753 | Program output: 96.0065109753 
Correct output: -21.0546356836 | Program output: 81.9453643164 
Correct output: -112.1094887867 | Program output: -50.1094887867
Correct output: 74.2495606848  | Program output: 48.2495606848 
Correct output: -74.8110438137 | Program output: 5.1889561863  
Correct output: -55.7903983915 | Program output: -38.7903983915
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction print_float} {:instruction float_flush} {:instruction float_shove} {:instruction float_mult} {:instruction float_mult})
Best program: (integer_min integer_rot integer_swap integer_div float_dup_times in1 -15 integer_mult float_inc integer_rot float_inc integer_rot -15 integer_mult float_inc integer_rot float_inc integer_rot integer_mult float_inc integer_rot print_float float_flush float_shove float_mult float_mult)
Errors: [91.0 12 29.0 2 72.0 2 71.0 13 78.0 13 52.0 12 56.0 2 7.0 1 76.0 3 18.0 2 27.0 2 1.0 1 76.0 2 68.0 3 36.0 2 104.0 2 74.0 3 23.0 2 100.0 2 54.0 3 103.0 9 62.0 3 26.0 2 80.0 11 17.0 2]
Total: 1512.0
Mean: 30.24
Genome size: 26
Size: 27
Percent parens: 0.037
--- Population Statistics ---
Average total errors in population: 2633.3205528000003
Median total errors in population: 1536.0
Error averages by case: (135.3193942 12.985 76.8947733 3.531 111.9943042 2.49 110.7371717 12.939 122.9221802 12.955 98.23947030000001 12.881 102.7791567 3.398 55.5507859 1.686 121.467426 3.505 66.2447099 2.436 74.72555770000001 1.738 49.878935999999996 1.593 121.8048599 2.592 108.523359 3.487 83.217777 2.51 142.6765259 2.605 119.62850919999998 2.729 70.61222839999999 2.541 138.1284438 2.489 100.76674829999999 3.533 141.0782879 10.184 102.62445929999998 3.479 73.81302780000001 2.506 119.5297634 11.132 59.647696800000006 2.591)
Error minima by case: (29.5974 11 29.0 2 67.0 1 26.1555 12 16.5974 9 22.6257 10 56.0 2 7.0 1 76.0 2 18.0 1 27.0 1 1.0 1 76.0 2 63.0 2 36.0 1 99.0 1 74.0 2 1.2059 2 0.2972 2 54.0 2 20.3786 9 57.0 2 26.0 1 75.0 10 12.0 2)
Average genome size in population (length): 18.274
Average program size in population (points): 19.274
Average percent parens in population: 0.053
Minimum age in population: 9.65625
Maximum age in population: 14.1640625
Average age in population: 12.075625
Median age in population: 12.140625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 172
Genome diversity (% unique Plush genomes):	 0.318
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 172
Syntactic diversity (% unique Push programs):	 0.318
Total error diversity:				 0.012
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.012
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 7753566
--- Timings ---
Current time: 1529614974783 milliseconds
Total Time:          30.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.2 seconds, 46.1%
Fitness Testing:     13.6 seconds, 44.0%
Report:               2.9 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Number IO problem report - generation 9
Test total error for best: 55638.0
Test mean error for best: 27.81900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 30.6537423401  | Program output: -60.3462576599
Correct output: 121.1693955328 | Program output: 92.1693955328 
Correct output: -87.1471496018 | Program output: -15.1471496018
Correct output: -26.3834517166 | Program output: 44.6165482834 
Correct output: 17.6470229611  | Program output: -60.3529770389
Correct output: 24.6248861839  | Program output: -27.3751138161
Correct output: 158.9893817123 | Program output: 102.9893817123
Correct output: 27.839127542   | Program output: 20.839127542  
Correct output: 113.8711245019 | Program output: 37.8711245019 
Correct output: 79.1156340116  | Program output: 61.1156340116 
Correct output: 65.9365762451  | Program output: 38.9365762451 
Correct output: -40.513814741  | Program output: -41.513814741 
Correct output: 179.1033508308 | Program output: 103.1033508308
Correct output: -151.9625542646 | Program output: -83.9625542646
Correct output: 56.3352749605  | Program output: 20.3352749605 
Correct output: -149.2545301832 | Program output: -45.2545301832
Correct output: 129.7111057352 | Program output: 55.7111057352 
Correct output: -1.8380522324  | Program output: -24.8380522324
Correct output: 0.5958526809   | Program output: 100.5958526809
Correct output: 150.0065109753 | Program output: 96.0065109753 
Correct output: -21.0546356836 | Program output: 81.9453643164 
Correct output: -112.1094887867 | Program output: -50.1094887867
Correct output: 74.2495606848  | Program output: 48.2495606848 
Correct output: -74.8110438137 | Program output: 5.1889561863  
Correct output: -55.7903983915 | Program output: -38.7903983915
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction print_float} {:instruction float_flush} {:instruction float_shove} {:instruction float_mult} {:instruction float_mult})
Best program: (integer_min integer_rot integer_swap integer_div float_dup_times in1 -15 integer_mult float_inc integer_rot float_inc integer_rot -15 integer_mult float_inc integer_rot float_inc integer_rot integer_mult float_inc integer_rot print_float float_flush float_shove float_mult float_mult)
Errors: [91.0 12 29.0 2 72.0 2 71.0 13 78.0 13 52.0 12 56.0 2 7.0 1 76.0 3 18.0 2 27.0 2 1.0 1 76.0 2 68.0 3 36.0 2 104.0 2 74.0 3 23.0 2 100.0 2 54.0 3 103.0 9 62.0 3 26.0 2 80.0 11 17.0 2]
Total: 1512.0
Mean: 30.24
Genome size: 26
Size: 27
Percent parens: 0.037
--- Population Statistics ---
Average total errors in population: 2865.2629088000003
Median total errors in population: 1525.0
Error averages by case: (143.97588509999997 12.999 85.9059749 3.596 121.7569292 2.203 120.634954 12.564 131.70387549999998 13.002 107.25991010000001 12.475 111.4259339 3.097 64.92394060000001 2.182 130.1010178 3.622 75.4279224 2.154 83.8585454 2.25 59.3215909 1.704 130.3060836 2.707 118.18968900000002 3.205 92.298634 2.634 152.05997159999998 2.75 128.2743137 3.244 80.0420031 2.647 147.8511826 2.585 109.5175533 3.604 150.7763389 10.231 112.4338781 3.171 82.9420347 2.634 129.2529021 11.145 69.9128443 2.704)
Error minima by case: (27.9289 9 29.0 2 67.0 1 25.6151 9 14.9324 10 23.5841 9 56.0 2 7.0 1 76.0 2 18.0 1 27.0 1 1.0 1 76.0 2 63.0 2 36.0 1 99.0 1 74.0 2 2.1878 2 0.2461 2 54.0 2 21.4043 9 57.0 2 26.0 1 75.0 10 12.0 2)
Average genome size in population (length): 18.866
Average program size in population (points): 19.866
Average percent parens in population: 0.052
Minimum age in population: 11.390625
Maximum age in population: 15.4921875
Average age in population: 13.64150390625
Median age in population: 13.681640625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 179
Genome diversity (% unique Plush genomes):	 0.327
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 179
Syntactic diversity (% unique Push programs):	 0.327
Total error diversity:				 0.013
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.014
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 8225216
--- Timings ---
Current time: 1529614977465 milliseconds
Total Time:          33.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        15.5 seconds, 46.4%
Fitness Testing:     14.6 seconds, 43.7%
Report:               3.2 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Number IO problem report - generation 10
Test total error for best: 55742.0
Test mean error for best: 27.87100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 30.6537423401  | Program output: -59.3462576599
Correct output: 121.1693955328 | Program output: 93.1693955328 
Correct output: -87.1471496018 | Program output: -14.1471496018
Correct output: -26.3834517166 | Program output: 45.6165482834 
Correct output: 17.6470229611  | Program output: -59.3529770389
Correct output: 24.6248861839  | Program output: -26.3751138161
Correct output: 158.9893817123 | Program output: 103.9893817123
Correct output: 27.839127542   | Program output: 21.839127542  
Correct output: 113.8711245019 | Program output: 38.8711245019 
Correct output: 79.1156340116  | Program output: 62.1156340116 
Correct output: 65.9365762451  | Program output: 39.9365762451 
Correct output: -40.513814741  | Program output: -40.513814741 
Correct output: 179.1033508308 | Program output: 104.1033508308
Correct output: -151.9625542646 | Program output: -82.9625542646
Correct output: 56.3352749605  | Program output: 21.3352749605 
Correct output: -149.2545301832 | Program output: -44.2545301832
Correct output: 129.7111057352 | Program output: 56.7111057352 
Correct output: -1.8380522324  | Program output: -23.8380522324
Correct output: 0.5958526809   | Program output: 101.5958526809
Correct output: 150.0065109753 | Program output: 97.0065109753 
Correct output: -21.0546356836 | Program output: 82.9453643164 
Correct output: -112.1094887867 | Program output: -49.1094887867
Correct output: 74.2495606848  | Program output: 49.2495606848 
Correct output: -74.8110438137 | Program output: 6.1889561863  
Correct output: -55.7903983915 | Program output: -37.7903983915
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mult} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction print_float} {:instruction float_flush} {:instruction float_shove})
Best program: (float_mult integer_rot integer_swap integer_div float_dup_times in1 -15 integer_mult float_inc float_inc integer_rot float_inc -15 integer_mult float_inc float_inc integer_rot float_inc integer_rot print_float float_flush float_shove)
Errors: [90.0 13 28.0 3 73.0 2 72.0 13 77.0 13 51.0 12 55.0 2 6.0 1 75.0 3 17.0 2 26.0 2 0.0 0 75.0 2 69.0 3 35.0 2 105.0 2 73.0 3 22.0 2 101.0 2 53.0 3 104.0 9 63.0 3 25.0 2 81.0 11 18.0 2]
Total: 1506.0
Mean: 30.12
Genome size: 22
Size: 23
Percent parens: 0.043
--- Population Statistics ---
Average total errors in population: 2860.1161620000003
Median total errors in population: 1525.0
Error averages by case: (143.404294 12.957 85.4864837 3.405 122.2865334 2.012 121.22303039999998 12.376 131.1322615 12.994 106.7204104 12.094 111.01761430000002 2.719 64.43257940000001 2.518 129.63558319999999 3.618 74.97797440000001 1.959 83.3842567 2.617 58.763777600000004 1.694 129.8981605 2.7 118.78591769999998 3.008 91.8060692 2.63 152.61593690000004 2.741 127.81950550000002 3.61 79.39032279999999 2.64 148.45629820000002 2.585 109.1010186 3.443 151.2924319 10.188 112.9883372 2.823 82.47875940000002 2.63 128.8575107 10.986 70.5210944 2.693)
Error minima by case: (19.5384 8 28.0 2 1.9396 1 13.3835 11 6.5316 11 13.5095 9 55.0 2 6.0 1 75.0 2 17.0 1 26.0 1 0.0 0 75.0 2 63.0 2 35.0 1 64.047 1 73.0 2 5.838 2 3.3794 2 53.0 2 8.0546 9 26.902 2 25.0 1 10.3965 10 12.0 2)
Average genome size in population (length): 19.657
Average program size in population (points): 20.657
Average percent parens in population: 0.051
Minimum age in population: 13.203125
Maximum age in population: 16.955078125
Average age in population: 15.19190625
Median age in population: 15.2294921875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 224
Genome diversity (% unique Plush genomes):	 0.322
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 224
Syntactic diversity (% unique Push programs):	 0.322
Total error diversity:				 0.018
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 8716641
--- Timings ---
Current time: 1529614980411 milliseconds
Total Time:          36.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        17.0 seconds, 46.8%
Fitness Testing:     15.8 seconds, 43.3%
Report:               3.5 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Number IO problem report - generation 11
Test total error for best: 56000.0
Test mean error for best: 28.00000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 30.6537423401  | Program output: -56.3462576599
Correct output: 121.1693955328 | Program output: 96.1693955328 
Correct output: -87.1471496018 | Program output: -11.1471496018
Correct output: -26.3834517166 | Program output: 48.6165482834 
Correct output: 17.6470229611  | Program output: -56.3529770389
Correct output: 24.6248861839  | Program output: -23.3751138161
Correct output: 158.9893817123 | Program output: 106.9893817123
Correct output: 27.839127542   | Program output: 24.839127542  
Correct output: 113.8711245019 | Program output: 41.8711245019 
Correct output: 79.1156340116  | Program output: 65.1156340116 
Correct output: 65.9365762451  | Program output: 42.9365762451 
Correct output: -40.513814741  | Program output: -37.513814741 
Correct output: 179.1033508308 | Program output: 107.1033508308
Correct output: -151.9625542646 | Program output: -79.9625542646
Correct output: 56.3352749605  | Program output: 24.3352749605 
Correct output: -149.2545301832 | Program output: -41.2545301832
Correct output: 129.7111057352 | Program output: 59.7111057352 
Correct output: -1.8380522324  | Program output: -20.8380522324
Correct output: 0.5958526809   | Program output: 104.5958526809
Correct output: 150.0065109753 | Program output: 100.0065109753
Correct output: -21.0546356836 | Program output: 85.9453643164 
Correct output: -112.1094887867 | Program output: -46.1094887867
Correct output: 74.2495606848  | Program output: 52.2495606848 
Correct output: -74.8110438137 | Program output: 9.1889561863  
Correct output: -55.7903983915 | Program output: -34.7903983915
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction print_float} {:instruction float_flush} {:instruction float_shove})
Best program: (integer_min integer_rot integer_swap integer_div float_dup_times in1 -15 integer_mult float_inc integer_rot float_inc integer_rot -15 integer_mult float_inc integer_rot float_inc integer_rot float_inc integer_rot float_inc float_inc float_inc integer_rot float_inc integer_rot print_float float_flush float_shove)
Errors: [87.0 12 25.0 3 76.0 2 75.0 13 74.0 13 48.0 12 52.0 2 3.0 1 72.0 2 14.0 2 23.0 2 3.0 2 72.0 2 72.0 3 32.0 2 108.0 2 70.0 2 19.0 2 104.0 2 50.0 1 107.0 10 66.0 3 22.0 2 84.0 11 21.0 2]
Total: 1489.0
Mean: 29.78
Genome size: 29
Size: 30
Percent parens: 0.033
--- Population Statistics ---
Average total errors in population: 3054.7100815
Median total errors in population: 1519.0
Error averages by case: (149.57962500000002 12.781 93.0473986 3.037 130.98289590000002 2.685 129.4302553 12.879 137.4659754 12.975 113.47279559999998 12.052 118.41512110000001 2.86 71.9219956 2.491 136.40296529999998 3.767 82.7037214 2.628 90.6925875 2.785 66.5659749 1.847 137.0689213 2.85 128.0670254 3.683 98.9778929 2.778 161.2958299 2.909 134.7081314 3.769 86.53813359999998 2.782 155.98386160000004 2.712 116.4444474 3.236 158.9438803 10.048 122.04700319999999 3.148 89.8419785 2.778 137.3097699 10.653 79.82489450000001 2.844)
Error minima by case: (17.2202 10 25.0 2 13.5055 1 12.3835 10 4.2134 9 11.1913 8 52.0 2 3.0 1 21.027 2 13.7285 1 23.0 1 0.0 0 47.8966 2 64.0 2 32.0 1 75.6129 1 36.867 2 2.5995 1 0.0021 2 50.0 1 7.0546 9 38.4678 2 18.5946 1 1.1694 10 13.0 1)
Average genome size in population (length): 21.89
Average program size in population (points): 22.89
Average percent parens in population: 0.045
Minimum age in population: 14.203125
Maximum age in population: 18.5888671875
Average age in population: 16.7209140625
Median age in population: 16.77734375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 95
Genome diversity (% unique Plush genomes):	 0.365
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 95
Syntactic diversity (% unique Push programs):	 0.365
Total error diversity:				 0.026
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 9263891
--- Timings ---
Current time: 1529614983343 milliseconds
Total Time:          39.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.5 seconds, 47.1%
Fitness Testing:     16.9 seconds, 42.8%
Report:               3.8 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Number IO problem report - generation 12
Test total error for best: 56098.0
Test mean error for best: 28.04900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 30.6537423401  | Program output: -55.3462576599
Correct output: 121.1693955328 | Program output: 97.1693955328 
Correct output: -87.1471496018 | Program output: -10.1471496018
Correct output: -26.3834517166 | Program output: 49.6165482834 
Correct output: 17.6470229611  | Program output: -55.3529770389
Correct output: 24.6248861839  | Program output: -22.3751138161
Correct output: 158.9893817123 | Program output: 107.9893817123
Correct output: 27.839127542   | Program output: 25.839127542  
Correct output: 113.8711245019 | Program output: 42.8711245019 
Correct output: 79.1156340116  | Program output: 66.1156340116 
Correct output: 65.9365762451  | Program output: 43.9365762451 
Correct output: -40.513814741  | Program output: -36.513814741 
Correct output: 179.1033508308 | Program output: 108.1033508308
Correct output: -151.9625542646 | Program output: -78.9625542646
Correct output: 56.3352749605  | Program output: 25.3352749605 
Correct output: -149.2545301832 | Program output: -40.2545301832
Correct output: 129.7111057352 | Program output: 60.7111057352 
Correct output: -1.8380522324  | Program output: -19.8380522324
Correct output: 0.5958526809   | Program output: 105.5958526809
Correct output: 150.0065109753 | Program output: 101.0065109753
Correct output: -21.0546356836 | Program output: 86.9453643164 
Correct output: -112.1094887867 | Program output: -45.1094887867
Correct output: 74.2495606848  | Program output: 53.2495606848 
Correct output: -74.8110438137 | Program output: 10.1889561863 
Correct output: -55.7903983915 | Program output: -33.7903983915
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction print_float} {:instruction float_flush} {:instruction float_shove} {:instruction float_mult} {:instruction float_mult})
Best program: (integer_min integer_rot integer_swap integer_div float_dup_times in1 -15 integer_mult float_inc integer_rot float_inc integer_mult float_inc integer_rot float_inc integer_rot integer_mult float_inc float_inc integer_rot float_inc integer_mult float_inc float_inc integer_rot -15 integer_mult float_inc integer_rot print_float float_flush float_shove float_mult float_mult)
Errors: [86.0 13 24.0 3 77.0 2 76.0 13 73.0 13 47.0 12 51.0 2 2.0 1 71.0 3 13.0 2 22.0 2 4.0 2 71.0 2 73.0 3 31.0 2 109.0 2 69.0 3 18.0 1 105.0 2 49.0 2 108.0 10 67.0 3 21.0 2 85.0 11 22.0 2]
Total: 1487.0
Mean: 29.74
Genome size: 34
Size: 35
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 3038.6768242000007
Median total errors in population: 1512.0
Error averages by case: (149.00825 12.396 91.7014728 2.972 130.586884 2.798 130.4224659 13.005 136.8922405 12.971 112.58160400000001 12.045 116.96427810000002 2.822 69.4279149 1.96 135.38286440000002 3.727 81.30304999999998 2.736 89.62205490000001 2.75 65.58476800000001 1.777 135.6446644 2.82 128.3868223 3.77 96.40745000000001 2.746 161.8510319 2.872 133.5854374 3.731 85.32539240000001 2.726 157.32235379999997 2.686 115.0685163 3.536 160.15085620000002 9.588 122.5672929 3.604 88.7237501 2.745 137.23918030000002 10.963 80.3802287 2.8)
Error minima by case: (3.6651 10 24.0 2 68.0 1 9.5694 8 13.4606 10 9.6939 10 51.0 2 2.0 1 71.0 2 13.0 1 22.0 1 0.0 0 61.8966 2 64.0 2 22.0164 1 100.0 1 69.0 2 6.831 1 4.625 2 49.0 1 4.2406 9 58.0 2 21.0 1 57.997 9 13.0 1)
Average genome size in population (length): 23.948
Average program size in population (points): 24.948
Average percent parens in population: 0.041
Minimum age in population: 15.83203125
Maximum age in population: 20.15771484375
Average age in population: 18.4181435546875
Median age in population: 18.427734375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 177
Genome diversity (% unique Plush genomes):	 0.395
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 177
Syntactic diversity (% unique Push programs):	 0.395
Total error diversity:				 0.019
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 9862591
--- Timings ---
Current time: 1529614986290 milliseconds
Total Time:          42.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.0 seconds, 47.3%
Fitness Testing:     18.0 seconds, 42.6%
Report:               4.1 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Number IO problem report - generation 13
Test total error for best: 56603.0
Test mean error for best: 28.30150
;;------------------------------
Outputs of best individual on training cases:
Correct output: 30.6537423401  | Program output: -52.3462576599
Correct output: 121.1693955328 | Program output: 100.1693955328
Correct output: -87.1471496018 | Program output: -7.1471496018 
Correct output: -26.3834517166 | Program output: 52.6165482834 
Correct output: 17.6470229611  | Program output: -52.3529770389
Correct output: 24.6248861839  | Program output: -19.3751138161
Correct output: 158.9893817123 | Program output: 110.9893817123
Correct output: 27.839127542   | Program output: 28.839127542  
Correct output: 113.8711245019 | Program output: 45.8711245019 
Correct output: 79.1156340116  | Program output: 69.1156340116 
Correct output: 65.9365762451  | Program output: 46.9365762451 
Correct output: -40.513814741  | Program output: -33.513814741 
Correct output: 179.1033508308 | Program output: 111.1033508308
Correct output: -151.9625542646 | Program output: -75.9625542646
Correct output: 56.3352749605  | Program output: 28.3352749605 
Correct output: -149.2545301832 | Program output: -37.2545301832
Correct output: 129.7111057352 | Program output: 63.7111057352 
Correct output: -1.8380522324  | Program output: -16.8380522324
Correct output: 0.5958526809   | Program output: 108.5958526809
Correct output: 150.0065109753 | Program output: 104.0065109753
Correct output: -21.0546356836 | Program output: 89.9453643164 
Correct output: -112.1094887867 | Program output: -42.1094887867
Correct output: 74.2495606848  | Program output: 56.2495606848 
Correct output: -74.8110438137 | Program output: 13.1889561863 
Correct output: -55.7903983915 | Program output: -30.7903983915
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction print_float} {:instruction float_flush} {:instruction float_shove})
Best program: (integer_min integer_rot integer_swap integer_div float_dup_times in1 -15 integer_mult float_inc integer_rot float_inc integer_mult float_inc integer_rot float_inc integer_rot integer_mult float_inc float_inc float_inc float_inc float_inc integer_rot float_inc integer_rot integer_mult float_inc float_inc integer_rot float_inc integer_rot print_float float_flush float_shove)
Errors: [83.0 13 21.0 2 80.0 1 79.0 12 70.0 13 44.0 13 48.0 2 1.0 1 68.0 3 10.0 1 19.0 2 7.0 2 68.0 2 76.0 2 28.0 2 112.0 3 66.0 3 15.0 1 108.0 2 46.0 2 111.0 10 70.0 2 18.0 2 88.0 11 25.0 2]
Total: 1470.0
Mean: 29.4
Genome size: 34
Size: 35
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 2891.4700125000004
Median total errors in population: 1506.0
Error averages by case: (142.38174790000002 12.633 84.875681 3.34 126.9098582 2.724 125.61006770000002 12.898 130.1381054 12.91 105.82454259999999 11.98 110.4082563 2.737 63.7228314 1.696 128.8242606 3.619 74.32696589999999 2.666 82.6710746 2.665 59.07953380000001 1.672 129.2217086 2.733 123.5549541 3.58 91.0371305 2.667 157.2362634 2.789 127.03903930000001 3.611 78.57531829999999 2.589 152.5994804 2.611 108.4466487 3.559 155.5294832 9.591 117.69958790000001 3.71 81.78610709999998 2.672 133.40692249999998 11.017 75.2444431 2.651)
Error minima by case: (25.6522 9 21.0 2 68.0 1 24.0075 9 12.6458 10 18.5841 9 48.0 2 1.0 1 68.0 2 10.0 1 19.0 1 0.0 0 68.0 2 64.0 2 28.0 1 100.0 1 66.0 2 0.5379 1 0.4254 2 46.0 1 18.6787 9 58.0 2 18.0 1 72.4351 10 13.0 1)
Average genome size in population (length): 26.187
Average program size in population (points): 27.187
Average percent parens in population: 0.038
Minimum age in population: 17.662109375
Maximum age in population: 21.75732421875
Average age in population: 20.00814624023438
Median age in population: 20.0478515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 67
Genome diversity (% unique Plush genomes):	 0.455
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 67
Syntactic diversity (% unique Push programs):	 0.455
Total error diversity:				 0.02
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 10517266
--- Timings ---
Current time: 1529614989336 milliseconds
Total Time:          45.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        21.5 seconds, 47.5%
Fitness Testing:     19.2 seconds, 42.3%
Report:               4.5 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Number IO problem report - generation 14
Test total error for best: 56740.0
Test mean error for best: 28.37000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 30.6537423401  | Program output: -51.3462576599
Correct output: 121.1693955328 | Program output: 101.1693955328
Correct output: -87.1471496018 | Program output: -6.1471496018 
Correct output: -26.3834517166 | Program output: 53.6165482834 
Correct output: 17.6470229611  | Program output: -51.3529770389
Correct output: 24.6248861839  | Program output: -18.3751138161
Correct output: 158.9893817123 | Program output: 111.9893817123
Correct output: 27.839127542   | Program output: 29.839127542  
Correct output: 113.8711245019 | Program output: 46.8711245019 
Correct output: 79.1156340116  | Program output: 70.1156340116 
Correct output: 65.9365762451  | Program output: 47.9365762451 
Correct output: -40.513814741  | Program output: -32.513814741 
Correct output: 179.1033508308 | Program output: 112.1033508308
Correct output: -151.9625542646 | Program output: -74.9625542646
Correct output: 56.3352749605  | Program output: 29.3352749605 
Correct output: -149.2545301832 | Program output: -36.2545301832
Correct output: 129.7111057352 | Program output: 64.7111057352 
Correct output: -1.8380522324  | Program output: -15.8380522324
Correct output: 0.5958526809   | Program output: 109.5958526809
Correct output: 150.0065109753 | Program output: 105.0065109753
Correct output: -21.0546356836 | Program output: 90.9453643164 
Correct output: -112.1094887867 | Program output: -41.1094887867
Correct output: 74.2495606848  | Program output: 57.2495606848 
Correct output: -74.8110438137 | Program output: 14.1889561863 
Correct output: -55.7903983915 | Program output: -29.7903983915
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction float_swap} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction print_float} {:instruction float_flush} {:instruction float_shove})
Best program: (integer_min integer_rot integer_swap integer_div float_dup_times in1 -15 integer_mult float_inc integer_rot float_inc integer_rot -15 integer_mult float_inc float_swap integer_mult float_inc float_inc integer_rot float_inc integer_rot float_inc integer_rot -15 integer_mult float_inc integer_rot float_inc integer_rot integer_mult float_inc integer_mult float_inc float_inc float_inc integer_rot float_inc integer_rot print_float float_flush float_shove)
Errors: [82.0 13 20.0 1 81.0 2 80.0 13 69.0 13 43.0 13 47.0 2 2.0 1 67.0 3 9.0 1 18.0 2 8.0 2 67.0 2 77.0 3 27.0 2 113.0 3 65.0 3 14.0 1 109.0 2 45.0 2 112.0 10 71.0 2 17.0 2 89.0 10 26.0 2]
Total: 1468.0
Mean: 29.36
Genome size: 42
Size: 43
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 2939.6493201000003
Median total errors in population: 1495.0
Error averages by case: (142.43480430000002 12.759 85.97670610000002 3.7 130.59477130000002 2.788 128.91944969999997 12.775 130.24401070000002 12.711 106.20923530000002 11.77 111.4598988 2.792 64.5417916 1.732 129.4320207 3.511 75.4029943 2.73 83.4838744 2.719 62.37946 2.442 130.8316059 2.802 127.7327997 3.518 91.74319 2.718 161.0705425 2.853 127.74797860000002 3.498 79.29681600000002 2.405 155.50542919999998 2.665 109.4755992 3.266 158.55047779999995 10.091 121.65884860000001 3.777 82.65059349999999 2.719 136.9405115 10.913 79.2089104 2.503)
Error minima by case: (14.9452 8 20.0 1 40.562 1 12.3835 9 2.7987 10 17.5841 10 47.0 1 0.0 0 67.0 2 9.0 1 18.0 1 0.0 0 48.8966 1 65.0 2 27.0 1 101.0 2 65.0 2 1.4324 1 1.199 2 45.0 1 7.0546 9 59.0 2 17.0 1 28.2259 10 9.2053 1)
Average genome size in population (length): 30.324
Average program size in population (points): 31.324
Average percent parens in population: 0.033
Minimum age in population: 19.15185546875
Maximum age in population: 23.3232421875
Average age in population: 21.51060131835938
Median age in population: 21.58892822265625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 40
Genome diversity (% unique Plush genomes):	 0.469
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.469
Total error diversity:				 0.034
Error (vector) diversity:			 0.035
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 11275366
--- Timings ---
Current time: 1529614992301 milliseconds
Total Time:          48.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        22.9 seconds, 47.6%
Fitness Testing:     20.4 seconds, 42.2%
Report:               4.8 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Number IO problem report - generation 15
Test total error for best: 57084.0
Test mean error for best: 28.54200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 30.6537423401  | Program output: -49.3462576599
Correct output: 121.1693955328 | Program output: 103.1693955328
Correct output: -87.1471496018 | Program output: -4.1471496018 
Correct output: -26.3834517166 | Program output: 55.6165482834 
Correct output: 17.6470229611  | Program output: -49.3529770389
Correct output: 24.6248861839  | Program output: -16.3751138161
Correct output: 158.9893817123 | Program output: 113.9893817123
Correct output: 27.839127542   | Program output: 31.839127542  
Correct output: 113.8711245019 | Program output: 48.8711245019 
Correct output: 79.1156340116  | Program output: 72.1156340116 
Correct output: 65.9365762451  | Program output: 49.9365762451 
Correct output: -40.513814741  | Program output: -30.513814741 
Correct output: 179.1033508308 | Program output: 114.1033508308
Correct output: -151.9625542646 | Program output: -72.9625542646
Correct output: 56.3352749605  | Program output: 31.3352749605 
Correct output: -149.2545301832 | Program output: -34.2545301832
Correct output: 129.7111057352 | Program output: 66.7111057352 
Correct output: -1.8380522324  | Program output: -13.8380522324
Correct output: 0.5958526809   | Program output: 111.5958526809
Correct output: 150.0065109753 | Program output: 107.0065109753
Correct output: -21.0546356836 | Program output: 92.9453643164 
Correct output: -112.1094887867 | Program output: -39.1094887867
Correct output: 74.2495606848  | Program output: 59.2495606848 
Correct output: -74.8110438137 | Program output: 16.1889561863 
Correct output: -55.7903983915 | Program output: -27.7903983915
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction print_float} {:instruction float_flush} {:instruction float_shove} {:instruction in1} {:instruction float_mult})
Best program: (integer_min integer_rot integer_swap integer_div float_dup_times in1 -15 integer_mult float_inc integer_rot float_inc integer_rot -15 integer_mult float_inc float_inc integer_rot integer_mult integer_mult float_inc float_inc -15 integer_mult float_inc integer_rot integer_mult integer_mult float_inc float_inc integer_rot float_inc integer_rot -15 integer_mult float_inc integer_rot float_inc integer_rot float_inc integer_rot float_inc integer_mult float_inc integer_rot float_inc integer_rot print_float float_flush float_shove in1 float_mult)
Errors: [80.0 13 18.0 2 83.0 2 82.0 13 67.0 13 41.0 12 45.0 2 4.0 2 65.0 3 7.0 1 16.0 2 10.0 1 65.0 2 79.0 3 25.0 2 115.0 2 63.0 3 12.0 1 111.0 3 43.0 2 114.0 9 73.0 3 15.0 2 91.0 11 28.0 2]
Total: 1463.0
Mean: 29.26
Genome size: 51
Size: 52
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 3075.5615914000005
Median total errors in population: 1489.0
Error averages by case: (146.3705062 12.505 90.25760539999999 3.762 137.9132884 2.855 136.1410142 12.976 134.33930569999995 12.831 110.4556782 11.955 115.51870570000001 2.867 69.24898219999999 1.846 133.28666439999998 3.323 79.61643980000001 2.794 87.73297079999999 2.819 70.21954710000001 2.829 134.11688379999998 2.874 135.17360929999998 3.83 95.92898819999999 2.796 168.22588910000002 3.049 131.63107349999999 3.352 83.7932406 2.431 162.44723840000003 2.767 113.5645759 2.652 165.5065951 10.252 129.0613078 3.856 86.89643170000002 2.785 143.26875409999997 11.149 86.92129580000001 2.77)
Error minima by case: (9.6563 8 18.0 1 56.8529 1 25.9105 11 3.3504 9 3.6275 6 45.0 1 0.0 0 22.7315 2 0.1738 1 1.2407 1 0.0 0 27.1034 1 15.9626 2 8.3606 1 58.7455 1 18.2889 2 1.6856 1 0.5192 2 42.0065 1 20.8508 7 11.8905 2 5.0399 1 75.7555 8 13.0 1)
Average genome size in population (length): 33.221
Average program size in population (points): 34.221
Average percent parens in population: 0.030
Minimum age in population: 20.1785888671875
Maximum age in population: 24.7572021484375
Average age in population: 23.02083898925781
Median age in population: 23.0487060546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 85
Genome diversity (% unique Plush genomes):	 0.519
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 85
Syntactic diversity (% unique Push programs):	 0.519
Total error diversity:				 0.039
Error (vector) diversity:			 0.04
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 12105891
--- Timings ---
Current time: 1529614995432 milliseconds
Total Time:          51.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        24.5 seconds, 47.6%
Fitness Testing:     21.6 seconds, 42.1%
Report:               5.2 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Number IO problem report - generation 16
Test total error for best: 57680.0
Test mean error for best: 28.84000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 30.6537423401  | Program output: -46.3462576599
Correct output: 121.1693955328 | Program output: 106.1693955328
Correct output: -87.1471496018 | Program output: -1.1471496018 
Correct output: -26.3834517166 | Program output: 58.6165482834 
Correct output: 17.6470229611  | Program output: -46.3529770389
Correct output: 24.6248861839  | Program output: -13.3751138161
Correct output: 158.9893817123 | Program output: 116.9893817123
Correct output: 27.839127542   | Program output: 34.839127542  
Correct output: 113.8711245019 | Program output: 51.8711245019 
Correct output: 79.1156340116  | Program output: 75.1156340116 
Correct output: 65.9365762451  | Program output: 52.9365762451 
Correct output: -40.513814741  | Program output: -27.513814741 
Correct output: 179.1033508308 | Program output: 117.1033508308
Correct output: -151.9625542646 | Program output: -69.9625542646
Correct output: 56.3352749605  | Program output: 34.3352749605 
Correct output: -149.2545301832 | Program output: -31.2545301832
Correct output: 129.7111057352 | Program output: 69.7111057352 
Correct output: -1.8380522324  | Program output: -10.8380522324
Correct output: 0.5958526809   | Program output: 114.5958526809
Correct output: 150.0065109753 | Program output: 110.0065109753
Correct output: -21.0546356836 | Program output: 95.9453643164 
Correct output: -112.1094887867 | Program output: -36.1094887867
Correct output: 74.2495606848  | Program output: 62.2495606848 
Correct output: -74.8110438137 | Program output: 19.1889561863 
Correct output: -55.7903983915 | Program output: -24.7903983915
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction -15} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction print_float} {:instruction float_flush} {:instruction float_shove} {:instruction float_mult} {:instruction float_mult})
Best program: (integer_min integer_rot integer_swap integer_div float_dup_times in1 -15 integer_mult float_inc integer_rot float_inc integer_rot -15 integer_mult float_inc float_inc float_inc integer_rot float_inc integer_rot integer_mult float_inc float_inc integer_rot float_inc integer_mult float_inc float_inc integer_rot -15 integer_mult float_inc integer_rot float_inc integer_mult float_inc float_inc integer_rot -15 integer_rot float_inc integer_mult float_inc float_inc integer_rot -15 integer_mult float_inc integer_rot print_float float_flush float_shove float_mult float_mult)
Errors: [77.0 12 15.0 2 86.0 2 85.0 13 64.0 13 38.0 13 42.0 2 7.0 2 62.0 2 4.0 1 13.0 2 13.0 2 62.0 2 82.0 3 22.0 2 118.0 3 60.0 2 9.0 1 114.0 3 40.0 1 117.0 10 76.0 3 12.0 2 94.0 11 31.0 2]
Total: 1454.0
Mean: 29.08
Genome size: 54
Size: 55
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 3102.4712271
Median total errors in population: 1477.0
Error averages by case: (145.4909144 12.804 90.4753082 3.563 140.54201020000002 2.732 138.4121648 12.86 133.4162224 12.958 109.81306359999995 12.301 115.76921050000003 2.82 69.72013030000001 1.859 133.1825923 3.584 79.72419120000002 2.646 87.70705940000002 2.8 73.1251682 2.88 134.32346960000004 2.81 138.16178499999998 3.804 95.75066430000001 2.727 170.94946430000005 3.388 131.64255010000002 3.656 83.36651680000003 2.127 164.55467640000003 2.851 113.75809250000003 2.877 167.62517660000003 10.254 131.8870354 3.741 86.940801 2.735 147.523951 11.121 89.7590086 2.952)
Error minima by case: (13.4583 9 12.0 1 0.5111 1 12.3835 9 0.4515 10 7.4294 9 39.0 1 0.0 0 59.0 2 1.0 1 10.0 1 0.0 0 50.8966 1 24.7962 2 19.0 1 60.7962 1 57.0 2 4.1619 1 3.469 2 37.0 1 7.0546 9 18.7962 2 9.0 1 11.825 8 7.6206 1)
Average genome size in population (length): 36.434
Average program size in population (points): 37.434
Average percent parens in population: 0.027
Minimum age in population: 21.75146484375
Maximum age in population: 26.39483642578125
Average age in population: 24.5205950012207
Median age in population: 24.56620788574219
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 45
Genome diversity (% unique Plush genomes):	 0.561
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 45
Syntactic diversity (% unique Push programs):	 0.561
Total error diversity:				 0.049
Error (vector) diversity:			 0.052
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 13016741
--- Timings ---
Current time: 1529614998686 milliseconds
Total Time:          54.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.0 seconds, 47.7%
Fitness Testing:     22.9 seconds, 42.0%
Report:               5.6 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Number IO problem report - generation 17
Test total error for best: 58941.0
Test mean error for best: 29.47050
;;------------------------------
Outputs of best individual on training cases:
Correct output: 30.6537423401  | Program output: -41.3462576599
Correct output: 121.1693955328 | Program output: 111.1693955328
Correct output: -87.1471496018 | Program output: 3.8528503982  
Correct output: -26.3834517166 | Program output: 63.6165482834 
Correct output: 17.6470229611  | Program output: -41.3529770389
Correct output: 24.6248861839  | Program output: -8.3751138161 
Correct output: 158.9893817123 | Program output: 121.9893817123
Correct output: 27.839127542   | Program output: 39.839127542  
Correct output: 113.8711245019 | Program output: 56.8711245019 
Correct output: 79.1156340116  | Program output: 80.1156340116 
Correct output: 65.9365762451  | Program output: 57.9365762451 
Correct output: -40.513814741  | Program output: -22.513814741 
Correct output: 179.1033508308 | Program output: 122.1033508308
Correct output: -151.9625542646 | Program output: -64.9625542646
Correct output: 56.3352749605  | Program output: 39.3352749605 
Correct output: -149.2545301832 | Program output: -26.2545301832
Correct output: 129.7111057352 | Program output: 74.7111057352 
Correct output: -1.8380522324  | Program output: -5.8380522324 
Correct output: 0.5958526809   | Program output: 119.5958526809
Correct output: 150.0065109753 | Program output: 115.0065109753
Correct output: -21.0546356836 | Program output: 100.9453643164
Correct output: -112.1094887867 | Program output: -31.1094887867
Correct output: 74.2495606848  | Program output: 67.2495606848 
Correct output: -74.8110438137 | Program output: 24.1889561863 
Correct output: -55.7903983915 | Program output: -19.7903983915
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction integer_mult} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction -15} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction print_float} {:instruction float_flush} {:instruction float_shove} {:instruction float_mult} {:instruction float_mult})
Best program: (integer_min integer_rot integer_swap integer_div float_dup_times in1 -15 integer_mult integer_swap integer_div float_dup_times in1 -15 integer_mult float_inc integer_rot float_inc integer_rot -15 integer_mult float_inc float_inc float_inc integer_rot float_inc integer_rot integer_mult float_inc float_inc integer_rot float_inc integer_mult float_inc float_inc integer_mult float_inc float_inc integer_rot float_inc integer_mult float_inc float_inc integer_rot -15 integer_mult float_inc integer_rot float_inc integer_mult float_inc float_inc integer_rot -15 integer_rot float_inc integer_mult float_inc float_inc integer_rot -15 integer_mult float_inc integer_rot print_float float_flush float_shove float_mult float_mult)
Errors: [72.0 13 10.0 1 91.0 13 90.0 13 59.0 13 33.0 12 37.0 2 12.0 2 57.0 3 1.0 2 8.0 2 18.0 2 57.0 2 87.0 3 17.0 2 123.0 3 55.0 3 4.0 1 119.0 3 35.0 2 122.0 10 81.0 2 7.0 2 99.0 10 36.0 2]
Total: 1453.0
Mean: 29.06
Genome size: 68
Size: 69
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3266.9375400999998
Median total errors in population: 1470.0
Error averages by case: (150.506582 12.837 94.65343899999999 2.936 149.8385753 2.738 148.3229344 12.723 138.50753499999996 12.966 114.77757239999997 12.737 119.73430550000002 2.92 77.11334189999998 2.065 137.58535429999998 3.806 84.1723699 2.144 92.2693471 2.811 82.59703999999998 2.837 138.2355116 2.924 146.82825960000002 3.647 100.40804340000003 2.839 179.7416098 3.825 135.9147247 3.784 88.28347549999998 1.989 174.6124324 2.948 117.81452809999999 2.969 177.54904469999997 10.126 140.948601 3.466 91.43933050000001 2.841 157.0404876 11.0 99.20209440000001 2.963)
Error minima by case: (13.9816 8 10.0 1 69.0 1 14.3835 9 5.4606 8 11.0507 8 37.0 1 0.0 0 57.0 2 1.0 1 8.0 1 1.0 1 57.0 1 65.0 2 11.6999 1 101.0 2 55.0 2 4.0 1 2.1876 2 35.0 1 9.0546 9 59.0 2 7.0 1 62.811 8 14.0 1)
Average genome size in population (length): 40.373
Average program size in population (points): 41.373
Average percent parens in population: 0.025
Minimum age in population: 23.28900146484375
Maximum age in population: 27.89949035644531
Average age in population: 25.95792486572266
Median age in population: 26.01413726806641
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 66
Genome diversity (% unique Plush genomes):	 0.554
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 66
Syntactic diversity (% unique Push programs):	 0.554
Total error diversity:				 0.033
Error (vector) diversity:			 0.036
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 14026066
--- Timings ---
Current time: 1529615002049 milliseconds
Total Time:          57.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        27.5 seconds, 47.5%
Fitness Testing:     24.4 seconds, 42.1%
Report:               5.9 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Number IO problem report - generation 18
Test total error for best: 60001.0
Test mean error for best: 30.00050
;;------------------------------
Outputs of best individual on training cases:
Correct output: 30.6537423401  | Program output: -37.3462576599
Correct output: 121.1693955328 | Program output: 115.1693955328
Correct output: -87.1471496018 | Program output: 7.8528503982  
Correct output: -26.3834517166 | Program output: 67.6165482834 
Correct output: 17.6470229611  | Program output: -37.3529770389
Correct output: 24.6248861839  | Program output: -4.3751138161 
Correct output: 158.9893817123 | Program output: 125.9893817123
Correct output: 27.839127542   | Program output: 43.839127542  
Correct output: 113.8711245019 | Program output: 60.8711245019 
Correct output: 79.1156340116  | Program output: 84.1156340116 
Correct output: 65.9365762451  | Program output: 61.9365762451 
Correct output: -40.513814741  | Program output: -18.513814741 
Correct output: 179.1033508308 | Program output: 126.1033508308
Correct output: -151.9625542646 | Program output: -60.9625542646
Correct output: 56.3352749605  | Program output: 43.3352749605 
Correct output: -149.2545301832 | Program output: -22.2545301832
Correct output: 129.7111057352 | Program output: 78.7111057352 
Correct output: -1.8380522324  | Program output: -1.8380522324 
Correct output: 0.5958526809   | Program output: 123.5958526809
Correct output: 150.0065109753 | Program output: 119.0065109753
Correct output: -21.0546356836 | Program output: 104.9453643164
Correct output: -112.1094887867 | Program output: -27.1094887867
Correct output: 74.2495606848  | Program output: 71.2495606848 
Correct output: -74.8110438137 | Program output: 28.1889561863 
Correct output: -55.7903983915 | Program output: -15.7903983915
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction print_float} {:instruction float_flush} {:instruction float_shove} {:instruction in1} {:instruction float_mult})
Best program: (integer_min integer_rot integer_swap integer_div float_dup_times in1 -15 integer_mult float_inc integer_rot float_inc integer_mult float_inc integer_rot float_inc integer_rot integer_mult float_inc float_inc float_inc float_inc float_inc integer_rot float_inc integer_rot integer_mult float_inc float_inc float_inc integer_rot float_inc integer_rot float_inc integer_rot float_inc float_inc float_inc integer_rot float_inc integer_rot float_inc integer_mult float_inc integer_rot float_inc integer_mult float_inc integer_rot float_inc integer_rot float_inc integer_rot float_inc integer_mult float_inc integer_rot float_inc integer_rot print_float float_flush float_shove in1 float_mult)
Errors: [68.0 12 6.0 2 95.0 12 94.0 13 55.0 12 29.0 11 33.0 2 16.0 2 53.0 3 5.0 2 4.0 1 22.0 2 53.0 2 91.0 3 13.0 2 127.0 3 51.0 3 0.0 0 123.0 3 31.0 2 126.0 10 85.0 3 3.0 1 103.0 11 40.0 1]
Total: 1444.0
Mean: 28.88
Genome size: 63
Size: 64
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3442.9786805
Median total errors in population: 1463.0
Error averages by case: (154.90457500000002 12.677 99.5443222 2.978 159.6301583 3.82 158.1417105 12.959 143.0485512 12.918 119.49856809999999 12.649 124.345222 3.022 86.5352127 2.672 141.96355540000002 3.821 89.3300529 2.13 97.1286848 2.948 92.14086250000001 2.782 142.62631379999996 3.027 156.73191619999997 3.977 105.20265749999999 2.935 189.30287049999998 3.803 140.2930134 3.841 93.22512529999997 2.092 184.1723866 3.415 122.4426955 2.969 187.08537540000003 9.932 150.8444783 3.901 96.3185929 2.932 166.7407315 11.054 109.504048 3.023)
Error minima by case: (6.8449 9 6.0 1 17.8799 1 27.3835 9 2.2211 9 6.9181 9 33.0 1 0.0 0 28.1289 2 0.0 0 0.4316 1 0.0 0 37.1034 1 5.9626 2 5.6647 1 68.7455 1 8.2889 2 0.0 0 0.4041 2 31.0 1 22.0546 9 21.8905 2 3.0 1 5.5438 9 11.7904 1)
Average genome size in population (length): 46.913
Average program size in population (points): 47.913
Average percent parens in population: 0.021
Minimum age in population: 25.51513671875
Maximum age in population: 29.4761962890625
Average age in population: 27.56156224822998
Median age in population: 27.56994247436523
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.622
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.622
Total error diversity:				 0.043
Error (vector) diversity:			 0.047
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 15198891
--- Timings ---
Current time: 1529615005374 milliseconds
Total Time:          61.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.9 seconds, 47.2%
Fitness Testing:     25.8 seconds, 42.2%
Report:               6.4 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Number IO problem report - generation 19
Test total error for best: 60001.0
Test mean error for best: 30.00050
;;------------------------------
Outputs of best individual on training cases:
Correct output: 30.6537423401  | Program output: -37.3462576599
Correct output: 121.1693955328 | Program output: 115.1693955328
Correct output: -87.1471496018 | Program output: 7.8528503982  
Correct output: -26.3834517166 | Program output: 67.6165482834 
Correct output: 17.6470229611  | Program output: -37.3529770389
Correct output: 24.6248861839  | Program output: -4.3751138161 
Correct output: 158.9893817123 | Program output: 125.9893817123
Correct output: 27.839127542   | Program output: 43.839127542  
Correct output: 113.8711245019 | Program output: 60.8711245019 
Correct output: 79.1156340116  | Program output: 84.1156340116 
Correct output: 65.9365762451  | Program output: 61.9365762451 
Correct output: -40.513814741  | Program output: -18.513814741 
Correct output: 179.1033508308 | Program output: 126.1033508308
Correct output: -151.9625542646 | Program output: -60.9625542646
Correct output: 56.3352749605  | Program output: 43.3352749605 
Correct output: -149.2545301832 | Program output: -22.2545301832
Correct output: 129.7111057352 | Program output: 78.7111057352 
Correct output: -1.8380522324  | Program output: -1.8380522324 
Correct output: 0.5958526809   | Program output: 123.5958526809
Correct output: 150.0065109753 | Program output: 119.0065109753
Correct output: -21.0546356836 | Program output: 104.9453643164
Correct output: -112.1094887867 | Program output: -27.1094887867
Correct output: 74.2495606848  | Program output: 71.2495606848 
Correct output: -74.8110438137 | Program output: 28.1889561863 
Correct output: -55.7903983915 | Program output: -15.7903983915
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction print_float} {:instruction float_flush} {:instruction float_shove})
Best program: (integer_min integer_rot integer_swap integer_div float_dup_times in1 -15 integer_mult float_inc integer_rot float_inc integer_rot -15 integer_mult float_inc float_inc integer_rot integer_mult integer_mult float_inc float_inc integer_rot float_inc integer_rot float_inc float_inc float_inc float_inc integer_rot float_inc float_inc float_inc integer_rot float_inc integer_rot integer_rot float_inc integer_mult float_inc integer_rot float_inc integer_rot float_inc integer_rot float_inc integer_mult float_inc integer_rot float_inc integer_rot float_inc integer_rot -15 integer_mult float_inc integer_rot float_inc integer_rot float_inc integer_rot float_inc integer_mult float_inc integer_rot print_float float_flush float_shove)
Errors: [68.0 12 6.0 2 95.0 12 94.0 13 55.0 12 29.0 11 33.0 2 16.0 2 53.0 3 5.0 2 4.0 1 22.0 2 53.0 2 91.0 3 13.0 2 127.0 3 51.0 3 0.0 0 123.0 3 31.0 2 126.0 10 85.0 3 3.0 1 103.0 11 40.0 1]
Total: 1444.0
Mean: 28.88
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3198.0137322999994
Median total errors in population: 1457.0
Error averages by case: (142.10332889999995 12.588 87.83482839999999 2.995 151.88999240000007 5.78 150.44356119999998 12.898 130.12437000000003 12.818 106.72124640000001 12.592 113.07091580000004 2.977 79.61059780000001 2.825 130.1539554 3.575 77.5449306 2.109 84.88299350000003 2.885 85.69390280000002 2.887 131.5919913 2.966 150.66998009999998 3.912 92.86361520000003 2.887 183.0785458 3.864 128.6898641 3.613 80.5029712 2.101 176.11421270000002 3.739 111.05930340000002 2.756 179.27063199999995 10.175 144.27919409999998 3.925 84.12991219999999 2.856 159.6591232 11.089 102.28876380000001 2.929)
Error minima by case: (9.4634 7 1.0 1 11.3352 1 18.355 10 0.5974 8 2.0507 2 28.0 1 0.0 0 23.8524 2 0.0 0 0.0 0 0.0 0 48.0 1 64.0 2 8.0 1 73.4426 1 39.6924 2 0.0 0 0.1489 2 26.0 1 13.0261 9 36.2975 2 0.0 0 1.0009 6 13.0 1)
Average genome size in population (length): 54.011
Average program size in population (points): 55.011
Average percent parens in population: 0.018
Minimum age in population: 26.51513671875
Maximum age in population: 30.9732666015625
Average age in population: 29.02650148773193
Median age in population: 29.0616569519043
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 48
Genome diversity (% unique Plush genomes):	 0.671
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.671
Total error diversity:				 0.056
Error (vector) diversity:			 0.064
Behavioral diversity:				 0.064
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 16549166
--- Timings ---
Current time: 1529615008957 milliseconds
Total Time:          64.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.3 seconds, 46.8%
Fitness Testing:     27.5 seconds, 42.5%
Report:               6.8 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Number IO problem report - generation 20
Test total error for best: 60001.0
Test mean error for best: 30.00050
;;------------------------------
Outputs of best individual on training cases:
Correct output: 30.6537423401  | Program output: -37.3462576599
Correct output: 121.1693955328 | Program output: 115.1693955328
Correct output: -87.1471496018 | Program output: 7.8528503982  
Correct output: -26.3834517166 | Program output: 67.6165482834 
Correct output: 17.6470229611  | Program output: -37.3529770389
Correct output: 24.6248861839  | Program output: -4.3751138161 
Correct output: 158.9893817123 | Program output: 125.9893817123
Correct output: 27.839127542   | Program output: 43.839127542  
Correct output: 113.8711245019 | Program output: 60.8711245019 
Correct output: 79.1156340116  | Program output: 84.1156340116 
Correct output: 65.9365762451  | Program output: 61.9365762451 
Correct output: -40.513814741  | Program output: -18.513814741 
Correct output: 179.1033508308 | Program output: 126.1033508308
Correct output: -151.9625542646 | Program output: -60.9625542646
Correct output: 56.3352749605  | Program output: 43.3352749605 
Correct output: -149.2545301832 | Program output: -22.2545301832
Correct output: 129.7111057352 | Program output: 78.7111057352 
Correct output: -1.8380522324  | Program output: -1.8380522324 
Correct output: 0.5958526809   | Program output: 123.5958526809
Correct output: 150.0065109753 | Program output: 119.0065109753
Correct output: -21.0546356836 | Program output: 104.9453643164
Correct output: -112.1094887867 | Program output: -27.1094887867
Correct output: 74.2495606848  | Program output: 71.2495606848 
Correct output: -74.8110438137 | Program output: 28.1889561863 
Correct output: -55.7903983915 | Program output: -15.7903983915
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -16} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction -15} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction print_float} {:instruction float_flush} {:instruction float_shove})
Best program: (integer_min integer_rot integer_swap integer_div float_dup_times in1 -16 integer_mult float_inc integer_rot float_inc float_inc float_inc integer_rot float_inc integer_rot -15 integer_mult float_inc integer_rot float_inc integer_mult float_inc integer_rot float_inc integer_rot float_inc integer_rot float_inc integer_rot integer_mult float_inc float_inc integer_rot float_inc integer_mult float_inc integer_mult float_inc float_inc integer_rot -15 integer_mult float_inc integer_mult float_inc float_inc integer_rot -15 integer_mult float_inc integer_rot float_inc integer_mult float_inc float_inc integer_rot -15 integer_rot float_inc integer_mult float_inc float_inc integer_rot -15 integer_mult float_inc integer_rot print_float float_flush float_shove)
Errors: [68.0 12 6.0 2 95.0 12 94.0 13 55.0 12 29.0 11 33.0 2 16.0 2 53.0 3 5.0 2 4.0 1 22.0 2 53.0 2 91.0 3 13.0 2 127.0 3 51.0 3 0.0 0 123.0 3 31.0 2 126.0 10 85.0 3 3.0 1 103.0 11 40.0 1]
Total: 1444.0
Mean: 28.88
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3900.2474377000003
Median total errors in population: 1454.0
Error averages by case: (166.15563809999998 12.498 115.0277371 3.364 180.06203259999998 9.35 179.33055259999998 12.834 154.70780530000002 12.841 131.54842419999994 12.257 139.46723650000004 3.457 111.37888240000002 3.191 155.41018959999997 4.057 106.1617915 2.619 111.77133990000002 3.202 117.6070905 3.33 158.5774123 3.443 181.210271 4.209 119.25423470000003 3.316 212.05692540000004 4.371 154.0827017 4.036 106.74843670000001 2.641 203.55928159999996 4.068 137.4511683 3.219 206.7611019 10.345 174.4921573 4.165 111.13022989999996 3.228 188.19707859999994 11.182 133.498718 3.376)
Error minima by case: (1.0548 7 1.0 1 32.1071 1 11.3835 10 0.3542 9 4.726 1 22.0 1 1.0 1 15.6412 2 0.0 0 1.0 1 1.0 1 42.0 1 31.0757 2 2.0 1 67.0757 1 31.4811 2 0.0 0 0.3979 2 20.0 1 6.0546 9 25.0757 2 0.0 0 19.771 8 0.7504 1)
Average genome size in population (length): 59.033
Average program size in population (points): 60.033
Average percent parens in population: 0.017
Minimum age in population: 28.3753547668457
Maximum age in population: 32.35124015808105
Average age in population: 30.42233170127869
Median age in population: 30.47527122497559
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.702
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.702
Total error diversity:				 0.076
Error (vector) diversity:			 0.084
Behavioral diversity:				 0.084
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 18024991
--- Timings ---
Current time: 1529615012855 milliseconds
Total Time:          68.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.8 seconds, 46.3%
Fitness Testing:     29.4 seconds, 42.8%
Report:               7.4 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Number IO problem report - generation 21
Test total error for best: 60001.0
Test mean error for best: 30.00050
;;------------------------------
Outputs of best individual on training cases:
Correct output: 30.6537423401  | Program output: -37.3462576599
Correct output: 121.1693955328 | Program output: 115.1693955328
Correct output: -87.1471496018 | Program output: 7.8528503982  
Correct output: -26.3834517166 | Program output: 67.6165482834 
Correct output: 17.6470229611  | Program output: -37.3529770389
Correct output: 24.6248861839  | Program output: -4.3751138161 
Correct output: 158.9893817123 | Program output: 125.9893817123
Correct output: 27.839127542   | Program output: 43.839127542  
Correct output: 113.8711245019 | Program output: 60.8711245019 
Correct output: 79.1156340116  | Program output: 84.1156340116 
Correct output: 65.9365762451  | Program output: 61.9365762451 
Correct output: -40.513814741  | Program output: -18.513814741 
Correct output: 179.1033508308 | Program output: 126.1033508308
Correct output: -151.9625542646 | Program output: -60.9625542646
Correct output: 56.3352749605  | Program output: 43.3352749605 
Correct output: -149.2545301832 | Program output: -22.2545301832
Correct output: 129.7111057352 | Program output: 78.7111057352 
Correct output: -1.8380522324  | Program output: -1.8380522324 
Correct output: 0.5958526809   | Program output: 123.5958526809
Correct output: 150.0065109753 | Program output: 119.0065109753
Correct output: -21.0546356836 | Program output: 104.9453643164
Correct output: -112.1094887867 | Program output: -27.1094887867
Correct output: 74.2495606848  | Program output: 71.2495606848 
Correct output: -74.8110438137 | Program output: 28.1889561863 
Correct output: -55.7903983915 | Program output: -15.7903983915
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction -15} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction print_float} {:instruction float_flush} {:instruction float_shove})
Best program: (integer_min integer_rot integer_swap integer_div float_dup_times in1 float_inc integer_rot float_inc integer_rot integer_mult float_inc float_inc float_inc -15 integer_mult float_inc integer_rot float_inc integer_mult float_inc integer_rot float_inc integer_rot float_inc integer_rot float_inc integer_rot integer_mult float_inc float_inc integer_rot float_inc integer_mult float_inc integer_mult float_inc float_inc integer_rot -15 integer_mult float_inc integer_mult float_inc float_inc integer_rot -15 integer_mult float_inc integer_rot float_inc integer_mult float_inc float_inc integer_rot -15 integer_rot float_inc integer_mult float_inc float_inc integer_rot -15 integer_mult float_inc integer_rot print_float float_flush float_shove)
Errors: [68.0 12 6.0 2 95.0 12 94.0 13 55.0 12 29.0 11 33.0 2 16.0 2 53.0 3 5.0 2 4.0 1 22.0 2 53.0 2 91.0 3 13.0 2 127.0 3 51.0 3 0.0 0 123.0 3 31.0 2 126.0 10 85.0 3 3.0 1 103.0 11 40.0 1]
Total: 1444.0
Mean: 28.88
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4116.353336
Median total errors in population: 1452.0
Error averages by case: (171.60144679999996 12.357 122.02081880000004 3.577 188.56876140000003 12.064 190.06343669999995 12.768 160.2831088 12.688 137.38207749999995 11.714 146.18531140000007 3.642 123.04393729999998 3.344 161.5250533 4.403 116.34444730000003 3.144 118.39332510000003 3.084 129.55220020000004 3.446 165.2502035 3.627 192.3461799 4.279 125.39445790000002 3.478 222.76589760000005 4.456 160.36612509999998 4.385 113.34735520000002 2.906 213.60020050000003 4.169 144.18955750000006 3.603 216.9692668 10.358 185.7377593 4.387 117.84094329999999 3.1 198.86750630000003 11.163 145.1889585 3.383)
Error minima by case: (3.0548 9 0.0 0 29.1988 1 24.3835 2 0.2834 8 0.6333 1 18.0 1 0.0 0 25.1289 2 0.0 0 0.0 0 0.0 0 38.0 1 2.9626 1 0.0 0 71.7455 1 5.2889 2 0.0 0 0.3305 2 16.0 1 19.0546 2 24.8905 1 0.0 0 72.811 3 8.7904 1)
Average genome size in population (length): 63.007
Average program size in population (points): 64.007
Average percent parens in population: 0.016
Minimum age in population: 29.58562469482422
Maximum age in population: 33.86611270904541
Average age in population: 31.87780223464966
Median age in population: 31.86478185653687
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 51
Genome diversity (% unique Plush genomes):	 0.745
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 51
Syntactic diversity (% unique Push programs):	 0.745
Total error diversity:				 0.083
Error (vector) diversity:			 0.096
Behavioral diversity:				 0.097
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 19600166
--- Timings ---
Current time: 1529615016456 milliseconds
Total Time:          72.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.2 seconds, 45.9%
Fitness Testing:     31.1 seconds, 43.0%
Report:               7.9 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Number IO problem report - generation 22
Test total error for best: 60001.0
Test mean error for best: 30.00050
;;------------------------------
Outputs of best individual on training cases:
Correct output: 30.6537423401  | Program output: -37.3462576599
Correct output: 121.1693955328 | Program output: 115.1693955328
Correct output: -87.1471496018 | Program output: 7.8528503982  
Correct output: -26.3834517166 | Program output: 67.6165482834 
Correct output: 17.6470229611  | Program output: -37.3529770389
Correct output: 24.6248861839  | Program output: -4.3751138161 
Correct output: 158.9893817123 | Program output: 125.9893817123
Correct output: 27.839127542   | Program output: 43.839127542  
Correct output: 113.8711245019 | Program output: 60.8711245019 
Correct output: 79.1156340116  | Program output: 84.1156340116 
Correct output: 65.9365762451  | Program output: 61.9365762451 
Correct output: -40.513814741  | Program output: -18.513814741 
Correct output: 179.1033508308 | Program output: 126.1033508308
Correct output: -151.9625542646 | Program output: -60.9625542646
Correct output: 56.3352749605  | Program output: 43.3352749605 
Correct output: -149.2545301832 | Program output: -22.2545301832
Correct output: 129.7111057352 | Program output: 78.7111057352 
Correct output: -1.8380522324  | Program output: -1.8380522324 
Correct output: 0.5958526809   | Program output: 123.5958526809
Correct output: 150.0065109753 | Program output: 119.0065109753
Correct output: -21.0546356836 | Program output: 104.9453643164
Correct output: -112.1094887867 | Program output: -27.1094887867
Correct output: 74.2495606848  | Program output: 71.2495606848 
Correct output: -74.8110438137 | Program output: 28.1889561863 
Correct output: -55.7903983915 | Program output: -15.7903983915
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_rot} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction print_float} {:instruction float_flush} {:instruction float_shove})
Best program: (integer_min integer_rot integer_min integer_rot integer_swap integer_div float_dup_times in1 -15 integer_mult float_inc integer_rot float_inc integer_rot -15 integer_mult float_inc float_inc integer_rot integer_mult integer_mult float_inc float_inc integer_rot float_inc integer_rot float_inc float_inc float_inc float_inc integer_rot float_inc float_inc float_inc integer_rot float_inc integer_rot integer_rot float_inc integer_mult float_inc integer_rot float_inc integer_rot float_inc integer_rot float_inc integer_mult float_inc integer_rot float_inc integer_rot float_inc integer_rot -15 integer_mult float_inc integer_rot float_inc integer_rot float_inc integer_rot float_inc integer_mult float_inc integer_rot print_float float_flush float_shove)
Errors: [68.0 12 6.0 2 95.0 12 94.0 13 55.0 12 29.0 11 33.0 2 16.0 2 53.0 3 5.0 2 4.0 1 22.0 2 53.0 2 91.0 3 13.0 2 127.0 3 51.0 3 0.0 0 123.0 3 31.0 2 126.0 10 85.0 3 3.0 1 103.0 11 40.0 1]
Total: 1444.0
Mean: 28.88
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4029.603213300001
Median total errors in population: 1445.0
Error averages by case: (167.6317681 12.204 117.02249529999999 3.594 188.39766530000006 11.678 188.0505799 12.865 156.26762390000002 12.47 133.14364249999997 11.32 141.36203009999997 3.607 120.39008169999998 3.331 157.173617 4.357 114.1059187 3.409 113.73389129999998 2.805 126.80196550000001 3.438 159.21329409999996 3.613 190.2283127 4.323 120.5279673 3.429 220.8228614 4.423 155.9410862 4.375 108.8590399 2.927 211.77505030000003 4.216 139.35352089999998 3.568 215.01160260000003 10.386 183.571366 4.484 113.20727139999998 2.786 196.63546069999995 11.181 142.46810049999996 3.118)
Error minima by case: (2.5122 3 0.0 0 29.7711 1 10.3835 2 0.5573 3 0.0189 1 17.0 1 0.0 0 6.5129 2 0.0 0 0.0 0 1.0 1 37.0 1 63.0 1 0.0 0 96.7966 1 22.3528 2 0.0 0 0.1967 2 15.0 1 5.0546 2 57.0 1 0.0 0 22.3531 3 3.3325 1)
Average genome size in population (length): 61.414
Average program size in population (points): 62.414
Average percent parens in population: 0.016
Minimum age in population: 30.64859008789062
Maximum age in population: 35.3188943862915
Average age in population: 33.29032815408707
Median age in population: 33.30037975311279
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 94
Genome diversity (% unique Plush genomes):	 0.71
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 94
Syntactic diversity (% unique Push programs):	 0.71
Total error diversity:				 0.086
Error (vector) diversity:			 0.097
Behavioral diversity:				 0.097
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 21135541
--- Timings ---
Current time: 1529615020085 milliseconds
Total Time:          75.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        34.7 seconds, 45.7%
Fitness Testing:     32.7 seconds, 43.1%
Report:               8.4 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Number IO problem report - generation 23
Test total error for best: 60001.0
Test mean error for best: 30.00050
;;------------------------------
Outputs of best individual on training cases:
Correct output: 30.6537423401  | Program output: -37.3462576599
Correct output: 121.1693955328 | Program output: 115.1693955328
Correct output: -87.1471496018 | Program output: 7.8528503982  
Correct output: -26.3834517166 | Program output: 67.6165482834 
Correct output: 17.6470229611  | Program output: -37.3529770389
Correct output: 24.6248861839  | Program output: -4.3751138161 
Correct output: 158.9893817123 | Program output: 125.9893817123
Correct output: 27.839127542   | Program output: 43.839127542  
Correct output: 113.8711245019 | Program output: 60.8711245019 
Correct output: 79.1156340116  | Program output: 84.1156340116 
Correct output: 65.9365762451  | Program output: 61.9365762451 
Correct output: -40.513814741  | Program output: -18.513814741 
Correct output: 179.1033508308 | Program output: 126.1033508308
Correct output: -151.9625542646 | Program output: -60.9625542646
Correct output: 56.3352749605  | Program output: 43.3352749605 
Correct output: -149.2545301832 | Program output: -22.2545301832
Correct output: 129.7111057352 | Program output: 78.7111057352 
Correct output: -1.8380522324  | Program output: -1.8380522324 
Correct output: 0.5958526809   | Program output: 123.5958526809
Correct output: 150.0065109753 | Program output: 119.0065109753
Correct output: -21.0546356836 | Program output: 104.9453643164
Correct output: -112.1094887867 | Program output: -27.1094887867
Correct output: 74.2495606848  | Program output: 71.2495606848 
Correct output: -74.8110438137 | Program output: 28.1889561863 
Correct output: -55.7903983915 | Program output: -15.7903983915
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_frominteger} {:instruction integer_mult} {:instruction float_inc} {:instruction float_sub} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction print_float} {:instruction float_flush} {:instruction float_shove} {:instruction in1} {:instruction float_mult})
Best program: (integer_min integer_rot integer_swap integer_div float_dup_times in1 -15 integer_mult float_inc integer_rot float_inc integer_rot float_frominteger integer_mult float_inc float_sub integer_rot integer_mult integer_mult float_inc float_inc -15 integer_mult float_inc integer_rot integer_mult integer_mult float_inc float_inc integer_rot float_inc integer_rot -15 integer_mult float_inc integer_rot float_inc integer_rot float_inc integer_rot float_inc integer_mult float_inc integer_rot float_inc integer_rot print_float float_flush float_shove in1 float_mult)
Errors: [68.0 12 6.0 2 95.0 12 94.0 13 55.0 12 29.0 11 33.0 2 16.0 2 53.0 3 5.0 2 4.0 1 22.0 2 53.0 2 91.0 3 13.0 2 127.0 3 51.0 3 0.0 0 123.0 3 31.0 2 126.0 10 85.0 3 3.0 1 103.0 11 40.0 1]
Total: 1444.0
Mean: 28.88
Genome size: 51
Size: 52
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 3995.3609985000016
Median total errors in population: 1444.0
Error averages by case: (166.1785094 12.207 116.2517903 3.521 187.26005600000002 11.853 186.46649299999999 12.939 154.60984949999994 12.384 131.18811319999998 11.161 140.43321689999996 3.568 119.60269339999998 3.32 155.6662546 4.364 113.42866710000003 3.378 112.3520682 2.718 125.66559790000001 3.374 158.2972798 3.561 188.6528964 4.331 118.9058522 3.41 219.02841540000003 4.389 154.75365209999998 4.376 106.63051970000001 2.699 211.161026 4.184 138.40820100000002 3.534 214.15239510000004 10.396 181.98203209999994 4.432 111.9988181 2.702 193.97163449999996 11.211 141.3809666 2.922)
Error minima by case: (12.2936 9 0.0 0 20.1471 1 9.8929 2 0.7193 9 4.7502 1 16.0 1 1.0 1 32.8711 2 0.0 0 0.0 0 1.0 1 36.0 1 67.0 1 0.0 0 50.2545 1 34.0 2 0.0 0 0.6761 2 14.0 1 6.0546 2 52.0209 1 0.0 0 0.189 3 4.2982 1)
Average genome size in population (length): 60.354
Average program size in population (points): 61.354
Average percent parens in population: 0.017
Minimum age in population: 32.20404815673828
Maximum age in population: 36.6671736240387
Average age in population: 34.72021312499046
Median age in population: 34.76546931266785
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 109
Genome diversity (% unique Plush genomes):	 0.681
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 109
Syntactic diversity (% unique Push programs):	 0.681
Total error diversity:				 0.083
Error (vector) diversity:			 0.093
Behavioral diversity:				 0.094
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 22644391
--- Timings ---
Current time: 1529615023824 milliseconds
Total Time:          79.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        36.1 seconds, 45.4%
Fitness Testing:     34.5 seconds, 43.4%
Report:               8.8 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Number IO problem report - generation 24
Test total error for best: 60001.0
Test mean error for best: 30.00050
;;------------------------------
Outputs of best individual on training cases:
Correct output: 30.6537423401  | Program output: -37.3462576599
Correct output: 121.1693955328 | Program output: 115.1693955328
Correct output: -87.1471496018 | Program output: 7.8528503982  
Correct output: -26.3834517166 | Program output: 67.6165482834 
Correct output: 17.6470229611  | Program output: -37.3529770389
Correct output: 24.6248861839  | Program output: -4.3751138161 
Correct output: 158.9893817123 | Program output: 125.9893817123
Correct output: 27.839127542   | Program output: 43.839127542  
Correct output: 113.8711245019 | Program output: 60.8711245019 
Correct output: 79.1156340116  | Program output: 84.1156340116 
Correct output: 65.9365762451  | Program output: 61.9365762451 
Correct output: -40.513814741  | Program output: -18.513814741 
Correct output: 179.1033508308 | Program output: 126.1033508308
Correct output: -151.9625542646 | Program output: -60.9625542646
Correct output: 56.3352749605  | Program output: 43.3352749605 
Correct output: -149.2545301832 | Program output: -22.2545301832
Correct output: 129.7111057352 | Program output: 78.7111057352 
Correct output: -1.8380522324  | Program output: -1.8380522324 
Correct output: 0.5958526809   | Program output: 123.5958526809
Correct output: 150.0065109753 | Program output: 119.0065109753
Correct output: -21.0546356836 | Program output: 104.9453643164
Correct output: -112.1094887867 | Program output: -27.1094887867
Correct output: 74.2495606848  | Program output: 71.2495606848 
Correct output: -74.8110438137 | Program output: 28.1889561863 
Correct output: -55.7903983915 | Program output: -15.7903983915
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_frominteger} {:instruction integer_mult} {:instruction float_inc} {:instruction float_sub} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction -15} {:instruction integer_rot} {:instruction print_float} {:instruction float_flush} {:instruction float_shove} {:instruction in1} {:instruction float_mult})
Best program: (integer_min integer_rot integer_swap integer_div float_dup_times in1 -15 integer_mult float_inc integer_rot float_inc integer_rot float_frominteger integer_mult float_inc float_sub integer_rot integer_mult integer_mult float_inc float_inc -15 integer_mult float_inc integer_rot integer_mult integer_mult float_inc float_inc integer_rot float_inc integer_rot -15 integer_mult float_inc integer_rot float_inc integer_rot -15 integer_mult float_inc integer_rot float_inc integer_mult float_inc float_inc integer_rot -15 integer_rot print_float float_flush float_shove in1 float_mult)
Errors: [68.0 12 6.0 2 95.0 12 94.0 13 55.0 12 29.0 11 33.0 2 16.0 2 53.0 3 5.0 2 4.0 1 22.0 2 53.0 2 91.0 3 13.0 2 127.0 3 51.0 3 0.0 0 123.0 3 31.0 2 126.0 10 85.0 3 3.0 1 103.0 11 40.0 1]
Total: 1444.0
Mean: 28.88
Genome size: 54
Size: 55
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 3596.658669700001
Median total errors in population: 1444.0
Error averages by case: (149.46863449999995 12.113 99.63609809999998 3.436 173.7216554000001 11.786 170.94889849999996 12.903 137.75228949999993 12.304 115.20944659999998 11.213 124.40197420000004 3.457 102.64945589999996 3.197 139.85708110000004 4.261 96.54957680000003 3.273 95.76232760000003 2.599 109.3349929 3.315 142.56576030000008 3.439 174.00520919999997 4.269 102.22387850000003 3.303 204.95753580000007 4.329 138.76641089999998 4.256 90.36284540000003 2.525 195.23305340000007 4.071 122.30446090000007 3.422 198.50667950000002 10.358 166.91409260000003 4.375 95.30447900000001 2.583 179.9022389 11.141 125.53659419999997 2.855)
Error minima by case: (1.9289 2 0.0 0 0.6141 1 6.2603 3 0.647 1 1.2379 1 15.0 1 0.0 0 20.9229 2 0.0 0 0.0 0 1.0 1 35.0 1 65.4295 1 0.0 0 62.7215 1 33.0 2 0.0 0 0.4041 1 13.0 1 0.9314 3 25.5765 1 0.0 0 11.722 2 8.9501 1)
Average genome size in population (length): 59.478
Average program size in population (points): 60.478
Average percent parens in population: 0.017
Minimum age in population: 33.8453311920166
Maximum age in population: 38.24824547767639
Average age in population: 36.13157742071152
Median age in population: 36.17909878492355
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 103
Genome diversity (% unique Plush genomes):	 0.708
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 103
Syntactic diversity (% unique Push programs):	 0.708
Total error diversity:				 0.077
Error (vector) diversity:			 0.087
Behavioral diversity:				 0.087
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 24131341
--- Timings ---
Current time: 1529615027253 milliseconds
Total Time:          83.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        37.5 seconds, 45.1%
Fitness Testing:     36.2 seconds, 43.5%
Report:               9.3 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Number IO problem report - generation 25
Test total error for best: 60001.0
Test mean error for best: 30.00050
;;------------------------------
Outputs of best individual on training cases:
Correct output: 30.6537423401  | Program output: -37.3462576599
Correct output: 121.1693955328 | Program output: 115.1693955328
Correct output: -87.1471496018 | Program output: 7.8528503982  
Correct output: -26.3834517166 | Program output: 67.6165482834 
Correct output: 17.6470229611  | Program output: -37.3529770389
Correct output: 24.6248861839  | Program output: -4.3751138161 
Correct output: 158.9893817123 | Program output: 125.9893817123
Correct output: 27.839127542   | Program output: 43.839127542  
Correct output: 113.8711245019 | Program output: 60.8711245019 
Correct output: 79.1156340116  | Program output: 84.1156340116 
Correct output: 65.9365762451  | Program output: 61.9365762451 
Correct output: -40.513814741  | Program output: -18.513814741 
Correct output: 179.1033508308 | Program output: 126.1033508308
Correct output: -151.9625542646 | Program output: -60.9625542646
Correct output: 56.3352749605  | Program output: 43.3352749605 
Correct output: -149.2545301832 | Program output: -22.2545301832
Correct output: 129.7111057352 | Program output: 78.7111057352 
Correct output: -1.8380522324  | Program output: -1.8380522324 
Correct output: 0.5958526809   | Program output: 123.5958526809
Correct output: 150.0065109753 | Program output: 119.0065109753
Correct output: -21.0546356836 | Program output: 104.9453643164
Correct output: -112.1094887867 | Program output: -27.1094887867
Correct output: 74.2495606848  | Program output: 71.2495606848 
Correct output: -74.8110438137 | Program output: 28.1889561863 
Correct output: -55.7903983915 | Program output: -15.7903983915
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_frominteger} {:instruction integer_mult} {:instruction float_inc} {:instruction float_sub} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction print_float} {:instruction float_flush} {:instruction float_shove} {:instruction in1} {:instruction float_mult})
Best program: (integer_min integer_rot integer_swap integer_div float_dup_times in1 -15 integer_mult float_inc integer_rot float_inc integer_rot float_frominteger integer_mult float_inc float_sub integer_rot integer_mult integer_mult float_inc float_inc -15 integer_mult float_inc integer_rot integer_mult integer_mult float_inc float_inc integer_rot float_inc integer_rot -15 integer_mult float_inc integer_rot float_inc integer_rot float_inc integer_rot float_inc integer_mult float_inc integer_rot float_inc integer_rot print_float float_flush float_shove in1 float_mult)
Errors: [68.0 12 6.0 2 95.0 12 94.0 13 55.0 12 29.0 11 33.0 2 16.0 2 53.0 3 5.0 2 4.0 1 22.0 2 53.0 2 91.0 3 13.0 2 127.0 3 51.0 3 0.0 0 123.0 3 31.0 2 126.0 10 85.0 3 3.0 1 103.0 11 40.0 1]
Total: 1444.0
Mean: 28.88
Genome size: 51
Size: 52
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 3872.564079400001
Median total errors in population: 1444.0
Error averages by case: (161.29859299999993 12.219 110.5845688 3.466 182.0074991 11.745 182.27546199999998 12.929 149.69362980000002 12.399 127.20849279999999 11.198 134.87775130000003 3.515 114.68004089999995 3.231 150.69974229999997 4.304 107.92920850000006 3.329 107.17154890000002 2.677 120.57819820000003 3.338 152.7923946 3.511 183.35307200000003 4.291 114.24559820000002 3.341 214.50249080000006 4.326 149.4384586 4.292 102.80050480000003 2.647 206.6024402 4.134 132.79094090000004 3.474 209.7423999 10.387 177.10309669999992 4.361 106.67708389999997 2.676 191.0113628999999 11.2 136.5785003 2.931)
Error minima by case: (3.2406 8 0.0 0 56.8529 1 3.3116 2 0.2807 8 1.2379 1 13.0 1 0.0 0 33.0 2 0.0 0 0.0 0 0.0 0 27.1034 1 11.3036 1 0.0 0 58.7455 1 18.2889 2 0.0 0 0.6695 2 11.0 1 8.0546 2 11.8905 1 0.0 0 45.116 2 13.0 1)
Average genome size in population (length): 59.076
Average program size in population (points): 60.076
Average percent parens in population: 0.017
Minimum age in population: 34.8453311920166
Maximum age in population: 39.55500209331512
Average age in population: 37.53087394672632
Median age in population: 37.58552113175392
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 86
Genome diversity (% unique Plush genomes):	 0.748
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 86
Syntactic diversity (% unique Push programs):	 0.748
Total error diversity:				 0.08
Error (vector) diversity:			 0.092
Behavioral diversity:				 0.093
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 25608241
--- Timings ---
Current time: 1529615030769 milliseconds
Total Time:          86.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        39.0 seconds, 45.0%
Fitness Testing:     37.8 seconds, 43.7%
Report:               9.7 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Number IO problem report - generation 26
Test total error for best: 60001.0
Test mean error for best: 30.00050
;;------------------------------
Outputs of best individual on training cases:
Correct output: 30.6537423401  | Program output: -37.3462576599
Correct output: 121.1693955328 | Program output: 115.1693955328
Correct output: -87.1471496018 | Program output: 7.8528503982  
Correct output: -26.3834517166 | Program output: 67.6165482834 
Correct output: 17.6470229611  | Program output: -37.3529770389
Correct output: 24.6248861839  | Program output: -4.3751138161 
Correct output: 158.9893817123 | Program output: 125.9893817123
Correct output: 27.839127542   | Program output: 43.839127542  
Correct output: 113.8711245019 | Program output: 60.8711245019 
Correct output: 79.1156340116  | Program output: 84.1156340116 
Correct output: 65.9365762451  | Program output: 61.9365762451 
Correct output: -40.513814741  | Program output: -18.513814741 
Correct output: 179.1033508308 | Program output: 126.1033508308
Correct output: -151.9625542646 | Program output: -60.9625542646
Correct output: 56.3352749605  | Program output: 43.3352749605 
Correct output: -149.2545301832 | Program output: -22.2545301832
Correct output: 129.7111057352 | Program output: 78.7111057352 
Correct output: -1.8380522324  | Program output: -1.8380522324 
Correct output: 0.5958526809   | Program output: 123.5958526809
Correct output: 150.0065109753 | Program output: 119.0065109753
Correct output: -21.0546356836 | Program output: 104.9453643164
Correct output: -112.1094887867 | Program output: -27.1094887867
Correct output: 74.2495606848  | Program output: 71.2495606848 
Correct output: -74.8110438137 | Program output: 28.1889561863 
Correct output: -55.7903983915 | Program output: -15.7903983915
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_frominteger} {:instruction integer_mult} {:instruction float_inc} {:instruction float_sub} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction -15} {:instruction integer_rot} {:instruction print_float} {:instruction float_flush} {:instruction float_shove})
Best program: (integer_min integer_rot integer_swap integer_div float_dup_times in1 -15 integer_mult float_inc integer_rot float_inc integer_rot float_frominteger integer_mult float_inc float_sub integer_rot integer_mult integer_mult float_inc float_inc -15 integer_mult float_inc integer_rot integer_mult integer_mult float_inc float_inc integer_rot float_inc integer_rot float_inc integer_rot float_inc integer_rot -15 integer_mult float_inc integer_rot float_inc integer_mult float_inc float_inc integer_rot -15 integer_rot print_float float_flush float_shove)
Errors: [68.0 12 6.0 2 95.0 12 94.0 13 55.0 12 29.0 11 33.0 2 16.0 2 53.0 3 5.0 2 4.0 1 22.0 2 53.0 2 91.0 3 13.0 2 127.0 3 51.0 3 0.0 0 123.0 3 31.0 2 126.0 10 85.0 3 3.0 1 103.0 11 40.0 1]
Total: 1444.0
Mean: 28.88
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 3913.3125953000017
Median total errors in population: 1444.0
Error averages by case: (162.04612789999996 12.217 114.04736179999998 3.654 181.76893390000006 11.727 182.06523539999998 12.923 150.51497020000002 12.369 127.24894819999996 11.148 138.52264259999998 3.684 115.96684609999998 3.41 152.8186730999999 4.47 110.58551040000006 3.514 109.43301700000002 2.862 121.90132370000003 3.502 156.4669971 3.674 186.02899379999997 4.452 115.88391570000006 3.511 216.0033442000001 4.495 152.18800059999992 4.485 103.1279992 2.755 205.82922069999995 4.302 136.35277849999994 3.663 209.18710600000003 10.418 178.8881523999999 4.518 109.21060149999997 2.831 190.82075729999994 11.217 137.564138 3.04)
Error minima by case: (1.9289 8 0.0 0 10.5155 1 11.0865 2 0.8163 8 0.4159 1 10.0 1 0.2928 1 10.7465 2 0.0 0 0.0 0 0.0 0 30.0 1 65.0 1 0.0 0 72.6229 1 26.5865 2 0.0 0 0.7583 2 8.0 1 14.9349 2 35.4778 1 0.0 0 0.6645 3 0.8145 1)
Average genome size in population (length): 59.12
Average program size in population (points): 60.12
Average percent parens in population: 0.017
Minimum age in population: 36.87885278463364
Maximum age in population: 41.04852569103241
Average age in population: 38.96383936774731
Median age in population: 39.03136464953423
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 70
Genome diversity (% unique Plush genomes):	 0.768
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 70
Syntactic diversity (% unique Push programs):	 0.768
Total error diversity:				 0.098
Error (vector) diversity:			 0.109
Behavioral diversity:				 0.11
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 27086241
--- Timings ---
Current time: 1529615034208 milliseconds
Total Time:          90.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        40.4 seconds, 44.8%
Fitness Testing:     39.5 seconds, 43.8%
Report:              10.1 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Number IO problem report - generation 27
Test total error for best: 60001.0
Test mean error for best: 30.00050
;;------------------------------
Outputs of best individual on training cases:
Correct output: 30.6537423401  | Program output: -37.3462576599
Correct output: 121.1693955328 | Program output: 115.1693955328
Correct output: -87.1471496018 | Program output: 7.8528503982  
Correct output: -26.3834517166 | Program output: 67.6165482834 
Correct output: 17.6470229611  | Program output: -37.3529770389
Correct output: 24.6248861839  | Program output: -4.3751138161 
Correct output: 158.9893817123 | Program output: 125.9893817123
Correct output: 27.839127542   | Program output: 43.839127542  
Correct output: 113.8711245019 | Program output: 60.8711245019 
Correct output: 79.1156340116  | Program output: 84.1156340116 
Correct output: 65.9365762451  | Program output: 61.9365762451 
Correct output: -40.513814741  | Program output: -18.513814741 
Correct output: 179.1033508308 | Program output: 126.1033508308
Correct output: -151.9625542646 | Program output: -60.9625542646
Correct output: 56.3352749605  | Program output: 43.3352749605 
Correct output: -149.2545301832 | Program output: -22.2545301832
Correct output: 129.7111057352 | Program output: 78.7111057352 
Correct output: -1.8380522324  | Program output: -1.8380522324 
Correct output: 0.5958526809   | Program output: 123.5958526809
Correct output: 150.0065109753 | Program output: 119.0065109753
Correct output: -21.0546356836 | Program output: 104.9453643164
Correct output: -112.1094887867 | Program output: -27.1094887867
Correct output: 74.2495606848  | Program output: 71.2495606848 
Correct output: -74.8110438137 | Program output: 28.1889561863 
Correct output: -55.7903983915 | Program output: -15.7903983915
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_dup_times} {:instruction in1} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction print_float} {:instruction float_flush} {:instruction float_shove})
Best program: (integer_min integer_rot integer_swap integer_swap float_dup_times in1 integer_mult float_inc integer_rot float_inc integer_mult float_inc integer_rot float_inc integer_rot integer_mult float_inc float_inc float_inc float_inc float_inc integer_rot float_inc integer_rot integer_mult float_inc float_inc float_inc integer_rot float_inc integer_rot float_inc integer_rot float_inc float_inc float_inc integer_rot float_inc integer_rot float_inc integer_mult float_inc integer_rot float_inc integer_mult float_inc integer_rot float_inc integer_rot float_inc float_inc integer_mult float_inc integer_rot float_inc integer_rot print_float float_flush float_shove)
Errors: [68.0 12 6.0 2 95.0 12 94.0 13 55.0 12 29.0 11 33.0 2 16.0 2 53.0 3 5.0 2 4.0 1 22.0 2 53.0 2 91.0 3 13.0 2 127.0 3 51.0 3 0.0 0 123.0 3 31.0 2 126.0 10 85.0 3 3.0 1 103.0 11 40.0 1]
Total: 1444.0
Mean: 28.88
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3562.630735200001
Median total errors in population: 1444.0
Error averages by case: (149.30938909999995 12.205 98.26053259999999 3.403 170.89446320000002 11.643 169.81287239999997 12.927 137.69282449999997 12.369 113.44490259999998 11.277 122.85293590000003 3.425 100.82011289999998 3.174 138.04365900000002 4.25 95.44189650000001 3.273 93.99199730000002 2.582 108.12253330000001 3.273 141.06474400000002 3.444 172.8040258 4.22 100.43650330000004 3.296 203.71836130000003 4.269 137.35053569999994 4.263 88.66501180000002 2.367 194.97721869999995 4.068 120.8139067 3.412 198.33316459999998 10.358 165.87782609999996 4.317 93.70973049999999 2.564 177.67119389999996 11.176 124.20339349999998 2.762)
Error minima by case: (2.5974 8 0.0 0 60.8529 1 16.3835 2 0.3801 7 0.4757 1 15.1304 1 0.0 0 28.6778 2 1.0 1 0.0 0 0.0 0 31.1034 1 11.9626 1 1.0 1 62.7455 1 14.2889 2 0.0 0 0.0737 2 13.1304 1 11.0546 2 15.8905 1 0.0 0 44.1657 2 9.0 1)
Average genome size in population (length): 58.287
Average program size in population (points): 59.287
Average percent parens in population: 0.017
Minimum age in population: 37.87885278463364
Maximum age in population: 42.39263744652271
Average age in population: 40.36043750433624
Median age in population: 40.38919833302498
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 57
Genome diversity (% unique Plush genomes):	 0.755
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 57
Syntactic diversity (% unique Push programs):	 0.755
Total error diversity:				 0.083
Error (vector) diversity:			 0.094
Behavioral diversity:				 0.095
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 28543416
--- Timings ---
Current time: 1529615037799 milliseconds
Total Time:          93.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        42.0 seconds, 44.8%
Fitness Testing:     41.1 seconds, 43.9%
Report:              10.5 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Number IO problem report - generation 28
Test total error for best: 60001.0
Test mean error for best: 30.00050
;;------------------------------
Outputs of best individual on training cases:
Correct output: 30.6537423401  | Program output: -37.3462576599
Correct output: 121.1693955328 | Program output: 115.1693955328
Correct output: -87.1471496018 | Program output: 7.8528503982  
Correct output: -26.3834517166 | Program output: 67.6165482834 
Correct output: 17.6470229611  | Program output: -37.3529770389
Correct output: 24.6248861839  | Program output: -4.3751138161 
Correct output: 158.9893817123 | Program output: 125.9893817123
Correct output: 27.839127542   | Program output: 43.839127542  
Correct output: 113.8711245019 | Program output: 60.8711245019 
Correct output: 79.1156340116  | Program output: 84.1156340116 
Correct output: 65.9365762451  | Program output: 61.9365762451 
Correct output: -40.513814741  | Program output: -18.513814741 
Correct output: 179.1033508308 | Program output: 126.1033508308
Correct output: -151.9625542646 | Program output: -60.9625542646
Correct output: 56.3352749605  | Program output: 43.3352749605 
Correct output: -149.2545301832 | Program output: -22.2545301832
Correct output: 129.7111057352 | Program output: 78.7111057352 
Correct output: -1.8380522324  | Program output: -1.8380522324 
Correct output: 0.5958526809   | Program output: 123.5958526809
Correct output: 150.0065109753 | Program output: 119.0065109753
Correct output: -21.0546356836 | Program output: 104.9453643164
Correct output: -112.1094887867 | Program output: -27.1094887867
Correct output: 74.2495606848  | Program output: 71.2495606848 
Correct output: -74.8110438137 | Program output: 28.1889561863 
Correct output: -55.7903983915 | Program output: -15.7903983915
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_frominteger} {:instruction integer_mult} {:instruction float_inc} {:instruction float_sub} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_sub} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction print_float} {:instruction float_flush} {:instruction float_shove} {:instruction integer_inc})
Best program: (integer_min integer_rot integer_swap integer_div float_dup_times in1 -15 integer_mult float_inc integer_rot float_inc integer_rot float_frominteger integer_mult float_inc float_sub integer_rot integer_mult integer_mult float_inc float_inc -15 integer_mult float_inc integer_rot integer_mult integer_mult float_inc float_inc integer_rot float_inc integer_sub -15 integer_mult float_inc integer_rot float_inc integer_rot float_inc integer_rot float_inc integer_mult float_inc integer_rot float_inc integer_rot print_float float_flush float_shove integer_inc)
Errors: [68.0 12 6.0 2 95.0 12 94.0 13 55.0 12 29.0 11 33.0 2 16.0 2 53.0 3 5.0 2 4.0 1 22.0 2 53.0 2 91.0 3 13.0 2 127.0 3 51.0 3 0.0 0 123.0 3 31.0 2 126.0 10 85.0 3 3.0 1 103.0 11 40.0 1]
Total: 1444.0
Mean: 28.88
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 3615.5332449000016
Median total errors in population: 1444.0
Error averages by case: (150.87247379999994 12.182 100.25425889999998 3.374 172.25800540000003 11.822 172.17358049999999 12.961 139.12942829999997 12.401 116.47606350000002 11.241 124.8702778 3.414 104.23821469999999 3.162 140.4463443 4.183 97.3706352 3.251 96.46336040000003 2.555 110.05647300000001 3.234 143.08011830000007 3.388 173.7823063 4.193 103.52346669999999 3.234 205.04205239999993 4.224 139.2688998 4.189 91.6072932 2.529 196.85151559999994 4.036 122.78861790000005 3.361 200.01297960000005 10.361 167.20728280000006 4.273 95.95273980000005 2.544 181.60141450000003 11.201 126.10844219999996 2.784)
Error minima by case: (0.6537 2 0.0 0 68.0 1 17.3835 3 1.6365 1 1.5564 1 15.0 1 0.0 0 5.1289 2 0.0 0 0.0 0 3.0 1 35.0 1 0.0374 1 0.0 0 74.7455 1 1.2889 2 0.0 0 0.4041 2 13.0 1 11.8971 3 27.8905 1 0.0 0 54.6221 3 4.7904 1)
Average genome size in population (length): 57.899
Average program size in population (points): 58.899
Average percent parens in population: 0.017
Minimum age in population: 39.25215882062912
Maximum age in population: 43.81308889389038
Average age in population: 41.77636513055861
Median age in population: 41.81042683497071
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 53
Genome diversity (% unique Plush genomes):	 0.79
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 53
Syntactic diversity (% unique Push programs):	 0.79
Total error diversity:				 0.078
Error (vector) diversity:			 0.089
Behavioral diversity:				 0.09
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 29990891
--- Timings ---
Current time: 1529615041446 milliseconds
Total Time:          97.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        43.5 seconds, 44.7%
Fitness Testing:     42.7 seconds, 43.9%
Report:              10.9 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Number IO problem report - generation 29
Test total error for best: 60001.0
Test mean error for best: 30.00050
;;------------------------------
Outputs of best individual on training cases:
Correct output: 30.6537423401  | Program output: -37.3462576599
Correct output: 121.1693955328 | Program output: 115.1693955328
Correct output: -87.1471496018 | Program output: 7.8528503982  
Correct output: -26.3834517166 | Program output: 67.6165482834 
Correct output: 17.6470229611  | Program output: -37.3529770389
Correct output: 24.6248861839  | Program output: -4.3751138161 
Correct output: 158.9893817123 | Program output: 125.9893817123
Correct output: 27.839127542   | Program output: 43.839127542  
Correct output: 113.8711245019 | Program output: 60.8711245019 
Correct output: 79.1156340116  | Program output: 84.1156340116 
Correct output: 65.9365762451  | Program output: 61.9365762451 
Correct output: -40.513814741  | Program output: -18.513814741 
Correct output: 179.1033508308 | Program output: 126.1033508308
Correct output: -151.9625542646 | Program output: -60.9625542646
Correct output: 56.3352749605  | Program output: 43.3352749605 
Correct output: -149.2545301832 | Program output: -22.2545301832
Correct output: 129.7111057352 | Program output: 78.7111057352 
Correct output: -1.8380522324  | Program output: -1.8380522324 
Correct output: 0.5958526809   | Program output: 123.5958526809
Correct output: 150.0065109753 | Program output: 119.0065109753
Correct output: -21.0546356836 | Program output: 104.9453643164
Correct output: -112.1094887867 | Program output: -27.1094887867
Correct output: 74.2495606848  | Program output: 71.2495606848 
Correct output: -74.8110438137 | Program output: 28.1889561863 
Correct output: -55.7903983915 | Program output: -15.7903983915
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_frominteger} {:instruction integer_mult} {:instruction float_inc} {:instruction float_sub} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_dup_items} {:instruction float_inc} {:instruction integer_rot} {:instruction print_float} {:instruction float_flush} {:instruction float_shove} {:instruction in1} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc})
Best program: (integer_min integer_rot integer_swap integer_div float_dup_times in1 -15 integer_mult float_inc integer_rot float_inc integer_rot float_frominteger integer_mult float_inc float_sub integer_rot integer_mult integer_mult float_inc float_inc -15 integer_mult float_inc integer_rot integer_mult integer_mult float_inc float_inc integer_rot float_inc integer_rot -15 integer_mult float_inc integer_rot float_inc integer_rot float_inc integer_rot float_inc integer_mult float_inc integer_dup_items float_inc integer_rot print_float float_flush float_shove in1 float_inc integer_rot float_inc integer_mult float_inc integer_rot float_inc)
Errors: [68.0 12 6.0 2 95.0 12 94.0 13 55.0 12 29.0 11 33.0 2 16.0 2 53.0 3 5.0 2 4.0 1 22.0 2 53.0 2 91.0 3 13.0 2 127.0 3 51.0 3 0.0 0 123.0 3 31.0 2 126.0 10 85.0 3 3.0 1 103.0 11 40.0 1]
Total: 1444.0
Mean: 28.88
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3377.963585000002
Median total errors in population: 1444.0
Error averages by case: (140.95152559999997 12.121 91.16572 3.385 164.42276500000006 11.768 161.61756049999997 12.883 129.125441 12.319 106.06913069999997 11.088 116.04530190000004 3.428 93.84236989999998 3.2 130.98919330000007 4.219 88.5413671 3.3 86.60095040000004 2.563 100.65984479999999 3.274 134.34803100000005 3.41 165.75372840000003 4.195 93.36048370000002 3.292 196.43593690000003 4.241 130.1985203 4.231 81.6321936 2.634 185.8929962 4.067 113.90902080000001 3.373 189.48649450000002 10.307 158.4378749 4.279 86.29704870000003 2.559 171.26712189999998 11.165 116.79096390000001 2.821)
Error minima by case: (4.4634 8 0.0 0 3.0 1 2.0 1 0.5394 8 1.5841 1 12.0 1 1.0 1 1.1289 2 0.0 0 0.0 0 0.0 0 32.0 1 1.0 1 0.0 0 35.0 1 1.2889 2 0.0 0 0.1086 2 10.0 1 6.0546 2 7.0 1 0.0 0 11.0 2 4.7904 1)
Average genome size in population (length): 57.674
Average program size in population (points): 58.674
Average percent parens in population: 0.017
Minimum age in population: 40.78497678041458
Maximum age in population: 45.14380522817373
Average age in population: 43.20433767903224
Median age in population: 43.22909907251596
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 50
Genome diversity (% unique Plush genomes):	 0.781
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.781
Total error diversity:				 0.106
Error (vector) diversity:			 0.115
Behavioral diversity:				 0.115
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 31432741
--- Timings ---
Current time: 1529615045280 milliseconds
Total Time:         101.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        45.0 seconds, 44.5%
Fitness Testing:     44.5 seconds, 44.1%
Report:              11.4 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Number IO problem report - generation 30
Test total error for best: 58785.20110000001
Test mean error for best: 29.39260
;;------------------------------
Outputs of best individual on training cases:
Correct output: 30.6537423401  | Program output: -37.3462576599
Correct output: 121.1693955328 | Program output: 115.1693955328
Correct output: -87.1471496018 | Program output: -2.0621121998 
Correct output: -26.3834517166 | Program output: 5.632684959   
Correct output: 17.6470229611  | Program output: -37.3529770389
Correct output: 24.6248861839  | Program output: -4.3751138161 
Correct output: 158.9893817123 | Program output: 125.9893817123
Correct output: 27.839127542   | Program output: 43.839127542  
Correct output: 113.8711245019 | Program output: 60.8711245019 
Correct output: 79.1156340116  | Program output: 84.1156340116 
Correct output: 65.9365762451  | Program output: 61.9365762451 
Correct output: -40.513814741  | Program output: -18.513814741 
Correct output: 179.1033508308 | Program output: 126.1033508308
Correct output: -151.9625542646 | Program output: 6.348682677   
Correct output: 56.3352749605  | Program output: 43.3352749605 
Correct output: -149.2545301832 | Program output: 6.8438964035  
Correct output: 129.7111057352 | Program output: 78.7111057352 
Correct output: -1.8380522324  | Program output: -1.8380522324 
Correct output: 0.5958526809   | Program output: 5.8060640446  
Correct output: 150.0065109753 | Program output: 119.0065109753
Correct output: -21.0546356836 | Program output: 5.7698742692  
Correct output: -112.1094887867 | Program output: 6.7162991648  
Correct output: 74.2495606848  | Program output: 71.2495606848 
Correct output: -74.8110438137 | Program output: 5.0081485421  
Correct output: -55.7903983915 | Program output: -15.7903983915
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_float} {:instruction integer_rot} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction in2} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_rot} {:instruction float_frominteger} {:instruction integer_mult} {:instruction float_inc} {:instruction float_sub} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction print_float} {:instruction float_flush} {:instruction float_shove} {:instruction in1} {:instruction float_dup_items})
Best program: (print_float integer_rot integer_dup_items integer_min integer_min integer_rot integer_swap integer_div float_dup_times in1 -15 in2 integer_rot integer_swap integer_div float_dup_times in1 -15 integer_mult float_inc integer_dup float_inc integer_rot float_frominteger integer_mult float_inc float_sub integer_rot integer_mult integer_mult float_inc float_inc -15 integer_mult float_inc integer_mult float_inc float_inc integer_rot float_inc integer_rot -15 integer_mult float_inc float_div float_inc integer_rot float_inc integer_rot float_inc integer_mult float_inc integer_rot float_inc integer_rot print_float float_flush float_shove in1 float_dup_items)
Errors: [68.0 12 6.0 2 85.085 10 32.0161 12 55.0 12 29.0 11 33.0 2 16.0 2 53.0 3 5.0 2 4.0 1 22.0 2 53.0 2 158.3112 12 13.0 2 156.0984 12 51.0 3 0.0 0 5.2102 11 31.0 2 26.8245 13 118.8258 13 3.0 1 79.8192 11 40.0 1]
Total: 1298.1904
Mean: 25.963808
Genome size: 60
Size: 61
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3518.6456233000017
Median total errors in population: 1444.0
Error averages by case: (146.61693429999988 12.133 97.09601119999996 3.485 168.77562310000005 11.743 167.24512209999992 12.902 134.86793679999997 12.337 111.60444449999996 11.304 122.44877650000006 3.491 98.76287739999995 3.239 137.62002570000007 4.279 93.76675090000005 3.343 92.75996630000003 2.66 105.35228510000005 3.358 140.88044850000009 3.477 171.16125009999993 4.329 99.17169150000005 3.349 201.99607590000008 4.368 136.64132850000001 4.288 86.36698299999996 2.619 191.31685750000003 4.108 120.2044404000001 3.438 194.69413010000008 10.361 163.78658110000003 4.408 92.33312389999995 2.626 176.00199339999998 11.16 121.44096549999995 2.928)
Error minima by case: (2.9289 2 0.0 0 2.3877 1 1.6165 1 2.647 1 0.2667 1 15.0 1 0.0 0 35.0 2 0.0 0 0.0 0 1.0 1 35.0 1 2.0 2 0.0 0 38.0 1 33.0 2 0.0 0 0.0737 2 13.0 1 1.9315 3 1.0 1 0.0 0 14.0 2 11.0 1)
Average genome size in population (length): 56.883
Average program size in population (points): 57.883
Average percent parens in population: 0.018
Minimum age in population: 42.06533110141754
Maximum age in population: 46.46226955577731
Average age in population: 44.6263209263254
Median age in population: 44.63765356875956
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 43
Genome diversity (% unique Plush genomes):	 0.78
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.78
Total error diversity:				 0.093
Error (vector) diversity:			 0.103
Behavioral diversity:				 0.103
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 32854816
--- Timings ---
Current time: 1529615048735 milliseconds
Total Time:         104.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        46.4 seconds, 44.4%
Fitness Testing:     46.1 seconds, 44.1%
Report:              11.9 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Number IO problem report - generation 31
Test total error for best: 58785.20110000001
Test mean error for best: 29.39260
;;------------------------------
Outputs of best individual on training cases:
Correct output: 30.6537423401  | Program output: -37.3462576599
Correct output: 121.1693955328 | Program output: 115.1693955328
Correct output: -87.1471496018 | Program output: -2.0621121998 
Correct output: -26.3834517166 | Program output: 5.632684959   
Correct output: 17.6470229611  | Program output: -37.3529770389
Correct output: 24.6248861839  | Program output: -4.3751138161 
Correct output: 158.9893817123 | Program output: 125.9893817123
Correct output: 27.839127542   | Program output: 43.839127542  
Correct output: 113.8711245019 | Program output: 60.8711245019 
Correct output: 79.1156340116  | Program output: 84.1156340116 
Correct output: 65.9365762451  | Program output: 61.9365762451 
Correct output: -40.513814741  | Program output: -18.513814741 
Correct output: 179.1033508308 | Program output: 126.1033508308
Correct output: -151.9625542646 | Program output: 6.348682677   
Correct output: 56.3352749605  | Program output: 43.3352749605 
Correct output: -149.2545301832 | Program output: 6.8438964035  
Correct output: 129.7111057352 | Program output: 78.7111057352 
Correct output: -1.8380522324  | Program output: -1.8380522324 
Correct output: 0.5958526809   | Program output: 5.8060640446  
Correct output: 150.0065109753 | Program output: 119.0065109753
Correct output: -21.0546356836 | Program output: 5.7698742692  
Correct output: -112.1094887867 | Program output: 6.7162991648  
Correct output: 74.2495606848  | Program output: 71.2495606848 
Correct output: -74.8110438137 | Program output: 5.0081485421  
Correct output: -55.7903983915 | Program output: -15.7903983915
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_float} {:instruction integer_rot} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction in2} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_rot} {:instruction float_frominteger} {:instruction integer_mult} {:instruction float_inc} {:instruction float_sub} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction print_float} {:instruction float_flush} {:instruction float_shove} {:instruction in1} {:instruction float_dup_items})
Best program: (print_float integer_rot integer_dup_items integer_min integer_min integer_rot integer_swap integer_div float_dup_times in1 -15 in2 integer_rot integer_swap integer_div float_dup_times in1 -15 integer_mult float_inc integer_dup float_inc integer_rot float_frominteger integer_mult float_inc float_sub integer_rot integer_mult integer_mult float_inc float_inc -15 integer_mult float_inc integer_mult float_inc float_inc integer_rot float_inc integer_rot -15 integer_mult float_inc float_div float_inc integer_rot float_inc integer_rot float_inc integer_mult float_inc integer_rot float_inc integer_rot print_float float_flush float_shove in1 float_dup_items)
Errors: [68.0 12 6.0 2 85.085 10 32.0161 12 55.0 12 29.0 11 33.0 2 16.0 2 53.0 3 5.0 2 4.0 1 22.0 2 53.0 2 158.3112 12 13.0 2 156.0984 12 51.0 3 0.0 0 5.2102 11 31.0 2 26.8245 13 118.8258 13 3.0 1 79.8192 11 40.0 1]
Total: 1298.1904
Mean: 25.963808
Genome size: 60
Size: 61
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3312.1899591000024
Median total errors in population: 1444.0
Error averages by case: (138.73397839999998 12.128 88.60150839999997 3.323 159.848499 11.732 159.4510164 12.913 126.92368749999996 12.309 102.3677491 11.257 113.8314702 3.37 91.94852629999997 3.134 129.22037140000003 4.162 85.40797950000001 3.208 84.36438210000001 2.495 97.14517920000003 3.207 132.25550980000006 3.345 163.6395436 4.211 91.6531238 3.232 193.90947720000003 4.255 128.1942341 4.156 77.3026956 2.391 183.34000739999993 4.055 111.63286450000001 3.311 186.8179743 10.321 156.05266400000002 4.298 83.95669949999998 2.489 169.24652700000004 11.139 113.22029079999999 2.683)
Error minima by case: (2.895 2 0.0 0 1.385 1 2.385 3 1.1218 2 0.1365 1 9.6558 1 0.0 0 29.6558 2 0.0 0 0.0 0 1.0 1 29.6558 1 5.385 1 0.0 0 30.615 1 27.6558 2 0.0 0 0.2668 2 7.6558 1 6.0546 3 11.385 1 0.0 0 5.2741 3 16.0 1)
Average genome size in population (length): 56.381
Average program size in population (points): 57.381
Average percent parens in population: 0.018
Minimum age in population: 43.40078655444086
Maximum age in population: 47.93804703466594
Average age in population: 46.06969358893298
Median age in population: 46.11266067810357
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 40
Genome diversity (% unique Plush genomes):	 0.75
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.75
Total error diversity:				 0.098
Error (vector) diversity:			 0.107
Behavioral diversity:				 0.107
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 34264341
--- Timings ---
Current time: 1529615052284 milliseconds
Total Time:         108.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        47.8 seconds, 44.3%
Fitness Testing:     47.7 seconds, 44.2%
Report:              12.4 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Number IO problem report - generation 32
Test total error for best: 58785.20110000001
Test mean error for best: 29.39260
;;------------------------------
Outputs of best individual on training cases:
Correct output: 30.6537423401  | Program output: -37.3462576599
Correct output: 121.1693955328 | Program output: 115.1693955328
Correct output: -87.1471496018 | Program output: -2.0621121998 
Correct output: -26.3834517166 | Program output: 5.632684959   
Correct output: 17.6470229611  | Program output: -37.3529770389
Correct output: 24.6248861839  | Program output: -4.3751138161 
Correct output: 158.9893817123 | Program output: 125.9893817123
Correct output: 27.839127542   | Program output: 43.839127542  
Correct output: 113.8711245019 | Program output: 60.8711245019 
Correct output: 79.1156340116  | Program output: 84.1156340116 
Correct output: 65.9365762451  | Program output: 61.9365762451 
Correct output: -40.513814741  | Program output: -18.513814741 
Correct output: 179.1033508308 | Program output: 126.1033508308
Correct output: -151.9625542646 | Program output: 6.348682677   
Correct output: 56.3352749605  | Program output: 43.3352749605 
Correct output: -149.2545301832 | Program output: 6.8438964035  
Correct output: 129.7111057352 | Program output: 78.7111057352 
Correct output: -1.8380522324  | Program output: -1.8380522324 
Correct output: 0.5958526809   | Program output: 5.8060640446  
Correct output: 150.0065109753 | Program output: 119.0065109753
Correct output: -21.0546356836 | Program output: 5.7698742692  
Correct output: -112.1094887867 | Program output: 6.7162991648  
Correct output: 74.2495606848  | Program output: 71.2495606848 
Correct output: -74.8110438137 | Program output: 5.0081485421  
Correct output: -55.7903983915 | Program output: -15.7903983915
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_float} {:instruction integer_rot} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction in2} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_rot} {:instruction float_frominteger} {:instruction integer_mult} {:instruction float_inc} {:instruction float_sub} {:instruction integer_rot} {:instruction integer_min} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction print_float} {:instruction float_flush} {:instruction float_shove} {:instruction in1} {:instruction float_dup_items})
Best program: (print_float integer_rot integer_dup_items integer_min integer_min integer_rot integer_swap integer_div float_dup_times in1 -15 in2 integer_rot integer_swap integer_div float_dup_times in1 -15 integer_mult float_inc integer_dup float_inc integer_rot float_frominteger integer_mult float_inc float_sub integer_rot integer_min integer_mult float_inc float_inc -15 integer_mult float_inc integer_mult float_inc float_inc integer_rot float_inc integer_rot -15 integer_mult float_inc float_div float_inc integer_rot float_inc integer_rot float_inc integer_mult float_inc integer_rot float_inc integer_rot print_float float_flush float_shove in1 float_dup_items)
Errors: [68.0 12 6.0 2 85.085 10 32.0161 12 55.0 12 29.0 11 33.0 2 16.0 2 53.0 3 5.0 2 4.0 1 22.0 2 53.0 2 158.3112 12 13.0 2 156.0984 12 51.0 3 0.0 0 5.2102 11 31.0 2 26.8245 13 118.8258 13 3.0 1 79.8192 11 40.0 1]
Total: 1298.1904
Mean: 25.963808
Genome size: 60
Size: 61
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3006.079022200002
Median total errors in population: 1444.0
Error averages by case: (127.06503719999996 12.142 75.39011239999998 3.223 150.90462500000004 11.707 147.2651850999999 12.864 115.00976169999996 12.334 90.96890539999997 11.276 101.04976770000009 3.256 78.40231109999995 3.032 116.60655840000007 4.059 72.2696074 3.126 71.10643720000003 2.384 84.86134280000002 3.02 119.7957193000001 3.236 152.7206941999999 4.173 78.11160840000002 3.107 183.4166211000001 4.203 115.53129830000002 4.047 65.0685211 2.102 170.99480329999994 4.098 98.80544820000006 3.21 174.62411580000003 10.308 144.99248680000008 4.254 70.60861520000005 2.357 157.09296339999986 11.111 102.28347569999995 2.504)
Error minima by case: (5.2189 8 0.0 0 49.3959 1 11.3678 3 3.6365 9 0.5757 1 17.0 1 0.0 0 21.1289 2 0.0 0 0.0 0 0.0 0 37.0 1 1.0374 1 1.0 1 75.7455 1 1.2889 2 0.0 0 0.0737 2 15.0 1 12.0546 3 28.8905 1 0.0 0 37.0598 3 4.7904 1)
Average genome size in population (length): 56.326
Average program size in population (points): 57.326
Average percent parens in population: 0.018
Minimum age in population: 44.85080319643021
Maximum age in population: 49.41495828423649
Average age in population: 47.48770381282317
Median age in population: 47.51543623884209
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 33
Genome diversity (% unique Plush genomes):	 0.757
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.757
Total error diversity:				 0.091
Error (vector) diversity:			 0.098
Behavioral diversity:				 0.099
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 35672491
--- Timings ---
Current time: 1529615056034 milliseconds
Total Time:         111.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.4 seconds, 44.2%
Fitness Testing:     49.4 seconds, 44.2%
Report:              12.9 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Number IO problem report - generation 33
Test total error for best: 52018.22790000003
Test mean error for best: 26.00911
;;------------------------------
Outputs of best individual on training cases:
Correct output: 30.6537423401  | Program output: -39.3462576599
Correct output: 121.1693955328 | Program output: 113.1693955328
Correct output: -87.1471496018 | Program output: -24.0         
Correct output: -26.3834517166 | Program output: -24.0         
Correct output: 17.6470229611  | Program output: -39.3529770389
Correct output: 24.6248861839  | Program output: -6.3751138161 
Correct output: 158.9893817123 | Program output: 123.9893817123
Correct output: 27.839127542   | Program output: 41.839127542  
Correct output: 113.8711245019 | Program output: 58.8711245019 
Correct output: 79.1156340116  | Program output: 82.1156340116 
Correct output: 65.9365762451  | Program output: 59.9365762451 
Correct output: -40.513814741  | Program output: -20.513814741 
Correct output: 179.1033508308 | Program output: 124.1033508308
Correct output: -151.9625542646 | Program output: -24.0         
Correct output: 56.3352749605  | Program output: 41.3352749605 
Correct output: -149.2545301832 | Program output: -24.0         
Correct output: 129.7111057352 | Program output: 76.7111057352 
Correct output: -1.8380522324  | Program output: -3.8380522324 
Correct output: 0.5958526809   | Program output: -24.0         
Correct output: 150.0065109753 | Program output: 117.0065109753
Correct output: -21.0546356836 | Program output: -24.0         
Correct output: -112.1094887867 | Program output: -24.0         
Correct output: 74.2495606848  | Program output: 69.2495606848 
Correct output: -74.8110438137 | Program output: -24.0         
Correct output: -55.7903983915 | Program output: -17.7903983915
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_float} {:instruction integer_rot} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction in2} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction float_frominteger} {:instruction integer_mult} {:instruction float_inc} {:instruction float_sub} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction integer_rot} {:instruction print_float} {:instruction float_flush} {:instruction float_inc})
Best program: (print_float integer_rot integer_dup_items integer_min integer_min integer_rot integer_swap integer_div float_dup_times in1 -15 in2 integer_rot integer_swap integer_div float_dup_times in1 -15 float_frominteger integer_mult float_inc float_sub integer_rot integer_mult integer_mult float_inc float_inc -15 integer_mult float_inc integer_rot integer_mult integer_mult float_inc float_inc integer_rot float_inc integer_rot -15 integer_mult float_inc integer_rot float_inc integer_rot float_inc integer_rot float_inc integer_mult float_inc float_sub float_inc integer_rot print_float float_flush float_inc)
Errors: [70.0 12 8.0 2 63.1471 11 2.3835 11 57.0 13 31.0 12 35.0 2 14.0 2 55.0 3 3.0 2 6.0 2 20.0 1 55.0 2 127.9626 12 15.0 2 125.2545 11 53.0 3 2.0 1 24.5959 10 33.0 2 2.9454 10 88.1095 12 5.0 2 50.811 10 38.0 2]
Total: 1137.2095
Mean: 22.74419
Genome size: 55
Size: 56
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 3743.967819800001
Median total errors in population: 1444.0
Error averages by case: (155.58954930000002 12.093 106.5040895 3.644 178.6843506999999 11.677 171.5334809 12.812 144.08730129999998 12.315 121.87791999999997 11.344 131.58396260000012 3.657 108.76210259999996 3.364 146.35964070000006 4.472 102.74883470000002 3.494 102.16129760000004 2.788 115.069945 3.49 149.6551983000001 3.647 184.58038519999988 5.109 109.33572670000002 3.521 212.42706889999982 5.203 145.4218697 4.458 97.01565990000002 2.646 191.2041135 4.807 129.39591150000007 3.618 195.9008244999999 10.546 174.88266939999986 5.263 101.6743344 2.807 184.53445919999996 11.206 131.9681237 3.028)
Error minima by case: (1.3365 3 0.0 0 58.8529 1 2.3835 2 3.6458 2 1.0778 1 9.0 1 0.0 0 0.1289 2 0.0 0 0.0 0 1.0 1 16.3365 1 0.9626 1 0.5385 1 60.7455 1 0.2889 2 0.0 0 0.5959 1 7.0 1 2.9454 1 13.8905 1 0.0 0 50.811 2 3.7904 1)
Average genome size in population (length): 56.536
Average program size in population (points): 57.536
Average percent parens in population: 0.018
Minimum age in population: 46.47858532890677
Maximum age in population: 51.05831235297956
Average age in population: 48.97223502222821
Median age in population: 49.03184698754922
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 29
Genome diversity (% unique Plush genomes):	 0.767
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.767
Total error diversity:				 0.121
Error (vector) diversity:			 0.13
Behavioral diversity:				 0.131
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 37085891
--- Timings ---
Current time: 1529615059611 milliseconds
Total Time:         115.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.8 seconds, 44.0%
Fitness Testing:     51.2 seconds, 44.3%
Report:              13.4 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Number IO problem report - generation 34
Test total error for best: 50981.977300000035
Test mean error for best: 25.49099
;;------------------------------
Outputs of best individual on training cases:
Correct output: 30.6537423401  | Program output: -36.3462576599
Correct output: 121.1693955328 | Program output: 116.1693955328
Correct output: -87.1471496018 | Program output: -27.0         
Correct output: -26.3834517166 | Program output: -27.0         
Correct output: 17.6470229611  | Program output: -36.3529770389
Correct output: 24.6248861839  | Program output: -3.3751138161 
Correct output: 158.9893817123 | Program output: 126.9893817123
Correct output: 27.839127542   | Program output: 44.839127542  
Correct output: 113.8711245019 | Program output: 61.8711245019 
Correct output: 79.1156340116  | Program output: 85.1156340116 
Correct output: 65.9365762451  | Program output: 62.9365762451 
Correct output: -40.513814741  | Program output: -17.513814741 
Correct output: 179.1033508308 | Program output: 127.1033508308
Correct output: -151.9625542646 | Program output: -27.0         
Correct output: 56.3352749605  | Program output: 44.3352749605 
Correct output: -149.2545301832 | Program output: -27.0         
Correct output: 129.7111057352 | Program output: 79.7111057352 
Correct output: -1.8380522324  | Program output: -0.8380522324 
Correct output: 0.5958526809   | Program output: -27.0         
Correct output: 150.0065109753 | Program output: 120.0065109753
Correct output: -21.0546356836 | Program output: -27.0         
Correct output: -112.1094887867 | Program output: -27.0         
Correct output: 74.2495606848  | Program output: 72.2495606848 
Correct output: -74.8110438137 | Program output: -27.0         
Correct output: -55.7903983915 | Program output: -14.7903983915
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_float} {:instruction integer_rot} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction in2} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_sub} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction integer_rot} {:instruction print_float} {:instruction float_flush} {:instruction float_inc})
Best program: (print_float integer_rot integer_dup_items integer_min integer_min integer_rot integer_swap integer_div float_dup_times in1 -15 in2 integer_rot integer_swap integer_div float_dup_times in1 -15 integer_mult float_inc integer_dup float_inc integer_rot float_frominteger float_sub integer_rot integer_mult integer_mult float_inc float_inc -15 integer_mult float_inc integer_rot integer_mult integer_mult float_inc float_inc integer_rot float_inc integer_rot -15 integer_mult float_inc integer_rot float_inc integer_rot float_inc integer_rot float_inc integer_mult float_inc float_sub float_inc integer_rot print_float float_flush float_inc)
Errors: [67.0 12 5.0 2 60.1471 10 0.6165 11 54.0 13 28.0 12 32.0 2 17.0 2 52.0 2 6.0 2 3.0 1 23.0 2 52.0 2 124.9626 13 12.0 2 122.2545 12 50.0 2 1.0 1 27.5959 10 30.0 1 5.9454 10 85.1095 12 2.0 1 47.811 11 41.0 2]
Total: 1099.4424999999999
Mean: 21.98885
Genome size: 58
Size: 59
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3432.1795761000017
Median total errors in population: 1444.0
Error averages by case: (144.95319389999995 12.045 97.53526069999997 3.629 161.82387019999993 11.072 143.62211799999952 12.557 133.10967229999997 12.313 110.79749499999996 11.235 124.49652240000007 3.628 95.71181129999995 3.366 138.58394890000005 4.452 92.07202290000004 3.461 91.70791910000001 2.825 101.6426631 3.516 143.39289570000008 3.61 187.7753384999996 7.04 98.86062960000008 3.521 206.14631359999967 7.078 138.0101767 4.412 84.66171489999999 2.836 152.05670870000017 6.379 122.03497420000005 3.601 160.38607329999985 10.993 168.8133304000002 7.187 91.47131769999999 2.83 165.75476139999972 11.211 118.88484359999997 3.077)
Error minima by case: (2.9289 2 0.0 0 57.1097 1 0.6165 3 0.0236 2 0.9492 1 14.0 1 0.0 0 34.0 2 0.0 0 0.0 0 1.0 1 34.0 1 63.0 1 2.0 1 41.9187 1 32.0 2 0.0 0 0.224 2 12.0 1 0.9454 3 48.895 2 0.0 0 44.7735 2 11.0 1)
Average genome size in population (length): 57.654
Average program size in population (points): 58.654
Average percent parens in population: 0.017
Minimum age in population: 47.56913223071024
Maximum age in population: 52.48300311854109
Average age in population: 50.45915170668915
Median age in population: 50.47582810086897
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 80
Genome diversity (% unique Plush genomes):	 0.745
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 80
Syntactic diversity (% unique Push programs):	 0.745
Total error diversity:				 0.181
Error (vector) diversity:			 0.192
Behavioral diversity:				 0.192
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 38527241
--- Timings ---
Current time: 1529615063137 milliseconds
Total Time:         119.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.3 seconds, 43.9%
Fitness Testing:     52.8 seconds, 44.4%
Report:              13.8 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Number IO problem report - generation 35
Test total error for best: 46632.60820000002
Test mean error for best: 23.31630
;;------------------------------
Outputs of best individual on training cases:
Correct output: 30.6537423401  | Program output: -39.3462576599
Correct output: 121.1693955328 | Program output: 113.1693955328
Correct output: -87.1471496018 | Program output: -18.1471496018
Correct output: -26.3834517166 | Program output: 3.632684959   
Correct output: 17.6470229611  | Program output: -39.3529770389
Correct output: 24.6248861839  | Program output: -6.3751138161 
Correct output: 158.9893817123 | Program output: 123.9893817123
Correct output: 27.839127542   | Program output: 41.839127542  
Correct output: 113.8711245019 | Program output: 58.8711245019 
Correct output: 79.1156340116  | Program output: 82.1156340116 
Correct output: 65.9365762451  | Program output: 59.9365762451 
Correct output: -40.513814741  | Program output: -20.513814741 
Correct output: 179.1033508308 | Program output: 124.1033508308
Correct output: -151.9625542646 | Program output: -86.9625542646
Correct output: 56.3352749605  | Program output: 41.3352749605 
Correct output: -149.2545301832 | Program output: -48.2545301832
Correct output: 129.7111057352 | Program output: 76.7111057352 
Correct output: -1.8380522324  | Program output: -3.8380522324 
Correct output: 0.5958526809   | Program output: 3.8060640446  
Correct output: 150.0065109753 | Program output: 117.0065109753
Correct output: -21.0546356836 | Program output: 3.7698742692  
Correct output: -112.1094887867 | Program output: -53.1094887867
Correct output: 74.2495606848  | Program output: 69.2495606848 
Correct output: -74.8110438137 | Program output: 2.1889561863  
Correct output: -55.7903983915 | Program output: -17.7903983915
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_float} {:instruction integer_rot} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_min} {:instruction integer_rot} {:instruction tag_float_720} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction in2} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_rot} {:instruction float_frominteger} {:instruction integer_mult} {:instruction float_inc} {:instruction float_sub} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction float_div} {:instruction integer_rot} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_yank} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction print_float} {:instruction float_flush} {:instruction float_shove} {:instruction in1} {:instruction float_dup_items})
Best program: (print_float integer_rot integer_dup_items integer_min integer_min integer_rot tag_float_720 integer_div float_dup_times in1 -15 in2 integer_rot integer_swap integer_div float_dup_times in1 -15 integer_mult float_inc integer_dup float_inc integer_rot float_frominteger integer_mult float_inc float_sub integer_rot integer_mult integer_mult float_inc float_inc -15 integer_mult float_inc integer_mult float_inc float_inc integer_rot float_inc integer_rot -15 integer_mult float_inc float_div integer_rot float_inc float_min float_inc integer_mult float_yank integer_rot float_inc integer_rot print_float float_flush float_shove in1 float_dup_items)
Errors: [70.0 12 8.0 2 69.0 2 30.0161 12 57.0 13 31.0 12 35.0 2 14.0 2 55.0 3 3.0 2 6.0 2 20.0 1 55.0 2 65.0 3 15.0 2 101.0 2 53.0 3 2.0 1 3.2102 11 33.0 2 24.8245 13 59.0 3 5.0 2 77.0 11 38.0 2]
Total: 1051.0508
Mean: 21.021015
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2782.0147042999974
Median total errors in population: 1299.3545000000001
Error averages by case: (120.52525450000003 11.99 78.11689480000003 3.723 131.5145136000011 9.947 92.20603599999964 12.016 108.25068939999998 12.349 86.96662330000007 11.195 104.68969380000001 3.734 73.55688139999995 3.476 116.65055190000004 4.556 71.76716579999999 3.593 70.71727450000002 2.979 81.28964090000001 3.54 123.55708170000008 3.726 181.04079359999903 10.017 76.17185780000007 3.635 187.4504350999995 9.955 116.63421419999999 4.481 62.41307929999996 3.217 83.57502360000046 8.802 101.95337849999999 3.682 96.30232110000063 11.579 152.36807800000054 10.294 70.8785075 3.031 127.35293209999986 11.104 96.18478189999995 3.26)
Error minima by case: (2.9289 2 0.0 0 45.3044 1 0.3835 2 0.0236 2 0.9492 1 10.0 1 0.0 0 21.1289 2 0.0 0 0.0 0 1.3289 1 30.0 1 35.9803 1 0.0 0 60.5904 1 1.2889 1 0.0 0 0.0589 2 8.0 1 0.0546 1 21.5251 2 0.0 0 32.9683 2 4.7904 1)
Average genome size in population (length): 59.726
Average program size in population (points): 60.726
Average percent parens in population: 0.017
Minimum age in population: 49.6268277335912
Maximum age in population: 54.18503008701373
Average age in population: 52.0772451839915
Median age in population: 52.13519473347696
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 109
Genome diversity (% unique Plush genomes):	 0.68
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 109
Syntactic diversity (% unique Push programs):	 0.68
Total error diversity:				 0.289
Error (vector) diversity:			 0.296
Behavioral diversity:				 0.297
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 40020391
--- Timings ---
Current time: 1529615066907 milliseconds
Total Time:         122.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.8 seconds, 43.9%
Fitness Testing:     54.5 seconds, 44.4%
Report:              14.2 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Number IO problem report - generation 36
Test total error for best: 47358.650400000006
Test mean error for best: 23.67933
;;------------------------------
Outputs of best individual on training cases:
Correct output: 30.6537423401  | Program output: -37.3462576599
Correct output: 121.1693955328 | Program output: 115.1693955328
Correct output: -87.1471496018 | Program output: -18.1471496018
Correct output: -26.3834517166 | Program output: 3.6131022058  
Correct output: 17.6470229611  | Program output: -37.3529770389
Correct output: 24.6248861839  | Program output: -4.3751138161 
Correct output: 158.9893817123 | Program output: 125.9893817123
Correct output: 27.839127542   | Program output: 43.839127542  
Correct output: 113.8711245019 | Program output: 60.8711245019 
Correct output: 79.1156340116  | Program output: 84.1156340116 
Correct output: 65.9365762451  | Program output: 61.9365762451 
Correct output: -40.513814741  | Program output: -18.513814741 
Correct output: 179.1033508308 | Program output: 126.1033508308
Correct output: -151.9625542646 | Program output: -86.9625542646
Correct output: 56.3352749605  | Program output: 43.3352749605 
Correct output: -149.2545301832 | Program output: -48.2545301832
Correct output: 129.7111057352 | Program output: 78.7111057352 
Correct output: -1.8380522324  | Program output: -1.8380522324 
Correct output: 0.5958526809   | Program output: 3.7926960219  
Correct output: 150.0065109753 | Program output: 119.0065109753
Correct output: -21.0546356836 | Program output: 3.7547706051  
Correct output: -112.1094887867 | Program output: -53.1094887867
Correct output: 74.2495606848  | Program output: 71.2495606848 
Correct output: -74.8110438137 | Program output: 2.1889561863  
Correct output: -55.7903983915 | Program output: -15.7903983915
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_float} {:instruction integer_rot} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction in2} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_rot} {:instruction float_frominteger} {:instruction integer_mult} {:instruction float_inc} {:instruction float_sub} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_div} {:instruction integer_rot} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_yank} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction print_float} {:instruction float_flush} {:instruction float_shove} {:instruction in1} {:instruction float_dup_items})
Best program: (print_float integer_rot integer_dup_items integer_min integer_min integer_rot integer_swap integer_div float_dup_times in1 -15 in2 integer_swap integer_div float_dup_times in1 -15 integer_mult float_inc integer_dup float_inc integer_dup float_inc integer_rot float_frominteger integer_mult float_inc float_sub integer_rot integer_mult integer_mult float_inc float_inc integer_dup_items integer_mult float_inc integer_mult float_inc float_inc integer_rot float_inc integer_rot -15 integer_mult float_inc integer_shove float_inc float_div integer_rot float_inc float_min float_inc integer_mult float_yank integer_rot float_inc integer_rot print_float float_flush float_shove in1 float_dup_items)
Errors: [68.0 12 6.0 2 69.0 2 29.9966 12 55.0 12 29.0 11 33.0 2 16.0 2 53.0 3 5.0 2 4.0 1 22.0 2 53.0 2 65.0 3 13.0 2 101.0 2 51.0 3 0.0 0 3.1968 9 31.0 2 24.8094 10 59.0 3 3.0 1 77.0 11 40.0 1]
Total: 1023.0028
Mean: 20.460056
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3047.6102520999975
Median total errors in population: 1286.411
Error averages by case: (138.73346929999994 12.03 88.89154220000002 3.42 137.35493710000068 8.774 100.94289649999972 11.823 126.69873779999996 12.558 103.07192580000002 10.93 117.70232100000007 3.475 83.96255179999996 3.228 132.26928590000006 4.355 81.582723 3.324 82.8119484 2.92 89.15621920000001 3.289 137.45935700000007 3.473 175.9878343999992 9.163 90.22744000000003 3.418 186.76391210000037 8.831 131.83268360000005 4.316 75.53144689999999 3.741 107.74632230000032 7.959 114.96927110000007 3.433 109.90369690000031 10.897 149.8095432000006 9.168 82.62428830000002 2.956 133.45787260000014 10.881 106.49602569999999 3.26)
Error minima by case: (2.3075 2 0.0 0 6.1235 1 0.3835 2 3.5966 1 0.2498 1 3.0 1 0.0 0 17.0 2 0.0 0 0.0 0 1.0 1 17.0 1 0.4504 1 0.0 0 3.8174 1 15.0 1 0.0 0 0.2102 2 5.0 1 0.0546 1 4.0 2 0.0 0 3.189 1 11.0 1)
Average genome size in population (length): 59.51
Average program size in population (points): 60.51
Average percent parens in population: 0.017
Minimum age in population: 51.41614245029632
Maximum age in population: 55.60858315511723
Average age in population: 53.59499478749518
Median age in population: 53.63072240551992
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 49
Genome diversity (% unique Plush genomes):	 0.684
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 49
Syntactic diversity (% unique Push programs):	 0.684
Total error diversity:				 0.336
Error (vector) diversity:			 0.353
Behavioral diversity:				 0.354
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 41508141
--- Timings ---
Current time: 1529615070693 milliseconds
Total Time:         126.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.3 seconds, 43.7%
Fitness Testing:     56.3 seconds, 44.5%
Report:              14.8 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Number IO problem report - generation 37
Test total error for best: 47358.650400000006
Test mean error for best: 23.67933
;;------------------------------
Outputs of best individual on training cases:
Correct output: 30.6537423401  | Program output: -37.3462576599
Correct output: 121.1693955328 | Program output: 115.1693955328
Correct output: -87.1471496018 | Program output: -18.1471496018
Correct output: -26.3834517166 | Program output: 3.6131022058  
Correct output: 17.6470229611  | Program output: -37.3529770389
Correct output: 24.6248861839  | Program output: -4.3751138161 
Correct output: 158.9893817123 | Program output: 125.9893817123
Correct output: 27.839127542   | Program output: 43.839127542  
Correct output: 113.8711245019 | Program output: 60.8711245019 
Correct output: 79.1156340116  | Program output: 84.1156340116 
Correct output: 65.9365762451  | Program output: 61.9365762451 
Correct output: -40.513814741  | Program output: -18.513814741 
Correct output: 179.1033508308 | Program output: 126.1033508308
Correct output: -151.9625542646 | Program output: -86.9625542646
Correct output: 56.3352749605  | Program output: 43.3352749605 
Correct output: -149.2545301832 | Program output: -48.2545301832
Correct output: 129.7111057352 | Program output: 78.7111057352 
Correct output: -1.8380522324  | Program output: -1.8380522324 
Correct output: 0.5958526809   | Program output: 3.7926960219  
Correct output: 150.0065109753 | Program output: 119.0065109753
Correct output: -21.0546356836 | Program output: 3.7547706051  
Correct output: -112.1094887867 | Program output: -53.1094887867
Correct output: 74.2495606848  | Program output: 71.2495606848 
Correct output: -74.8110438137 | Program output: 2.1889561863  
Correct output: -55.7903983915 | Program output: -15.7903983915
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_float} {:instruction integer_rot} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction in2} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_rot} {:instruction float_frominteger} {:instruction integer_mult} {:instruction float_inc} {:instruction float_sub} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_div} {:instruction integer_rot} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_yank} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction print_float} {:instruction float_flush} {:instruction float_shove} {:instruction in1} {:instruction float_dup_items})
Best program: (print_float integer_rot integer_dup_items integer_min integer_min integer_rot integer_swap integer_div float_dup_times in1 -15 in2 integer_swap integer_div float_dup_times in1 -15 integer_mult float_inc integer_dup float_inc integer_dup float_inc integer_rot float_frominteger integer_mult float_inc float_sub integer_rot integer_mult integer_mult float_inc float_inc integer_dup_items integer_mult float_inc integer_mult float_inc float_inc integer_rot float_inc integer_rot -15 integer_mult float_inc integer_shove float_inc float_div integer_rot float_inc float_min float_inc integer_mult float_yank integer_rot float_inc integer_rot print_float float_flush float_shove in1 float_dup_items)
Errors: [68.0 12 6.0 2 69.0 2 29.9966 12 55.0 12 29.0 11 33.0 2 16.0 2 53.0 3 5.0 2 4.0 1 22.0 2 53.0 2 65.0 3 13.0 2 101.0 2 51.0 3 0.0 0 3.1968 9 31.0 2 24.8094 10 59.0 3 3.0 1 77.0 11 40.0 1]
Total: 1023.0028
Mean: 20.460056
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2610.535164999994
Median total errors in population: 1174.10475
Error averages by case: (123.32599499999993 12.036 68.87784209999995 3.304 122.41721910000095 9.636 79.9166917000003 11.402 111.18854979999992 12.648 86.41545959999998 11.507 99.43833750000007 3.364 62.90322639999995 3.075 115.2474728 4.048 60.53375159999994 3.164 63.118550800000044 2.954 66.79643430000002 2.93 119.47207290000014 3.3 169.83905339999936 10.193 71.60764459999997 3.19 176.71940700000096 9.537 114.51977170000002 4.049 55.61918539999998 2.82 96.5049084000002 8.837 96.80560770000011 3.232 86.35612219999977 10.31 138.17152170000136 9.775 62.71577900000006 2.91 114.7253735000009 10.584 85.28818679999992 3.206)
Error minima by case: (4.1458 3 0.0 0 3.5939 1 0.3835 1 0.4034 3 0.6249 1 2.5123 1 0.0 0 0.5436 2 0.0 0 0.0 0 0.0 0 0.5436 1 2.9626 2 0.0 0 48.2545 1 2.5436 1 0.0 0 0.1021 2 0.5123 1 0.0546 2 24.8905 2 0.0 0 11.189 2 1.0 1)
Average genome size in population (length): 56.772
Average program size in population (points): 57.772
Average percent parens in population: 0.017
Minimum age in population: 52.66323057439877
Maximum age in population: 57.02470150607405
Average age in population: 55.13408589765962
Median age in population: 55.18955414986704
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 113
Genome diversity (% unique Plush genomes):	 0.647
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 113
Syntactic diversity (% unique Push programs):	 0.647
Total error diversity:				 0.294
Error (vector) diversity:			 0.301
Behavioral diversity:				 0.302
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 42927441
--- Timings ---
Current time: 1529615074009 milliseconds
Total Time:         129.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.6 seconds, 43.6%
Fitness Testing:     57.9 seconds, 44.6%
Report:              15.2 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Number IO problem report - generation 38
Test total error for best: 40686.35280000001
Test mean error for best: 20.34318
;;------------------------------
Outputs of best individual on training cases:
Correct output: 30.6537423401  | Program output: -32.3462576599
Correct output: 121.1693955328 | Program output: 120.1693955328
Correct output: -87.1471496018 | Program output: -47.1471496018
Correct output: -26.3834517166 | Program output: 12.6165482834 
Correct output: 17.6470229611  | Program output: -32.3529770389
Correct output: 24.6248861839  | Program output: 0.6248861839  
Correct output: 158.9893817123 | Program output: 130.9893817123
Correct output: 27.839127542   | Program output: 48.839127542  
Correct output: 113.8711245019 | Program output: 65.8711245019 
Correct output: 79.1156340116  | Program output: 89.1156340116 
Correct output: 65.9365762451  | Program output: 66.9365762451 
Correct output: -40.513814741  | Program output: -13.513814741 
Correct output: 179.1033508308 | Program output: 131.1033508308
Correct output: -151.9625542646 | Program output: -115.9625542646
Correct output: 56.3352749605  | Program output: 48.3352749605 
Correct output: -149.2545301832 | Program output: -77.2545301832
Correct output: 129.7111057352 | Program output: 83.7111057352 
Correct output: -1.8380522324  | Program output: 3.1619477676  
Correct output: 0.5958526809   | Program output: 68.5958526809 
Correct output: 150.0065109753 | Program output: 124.0065109753
Correct output: -21.0546356836 | Program output: 49.9453643164 
Correct output: -112.1094887867 | Program output: -82.1094887867
Correct output: 74.2495606848  | Program output: 76.2495606848 
Correct output: -74.8110438137 | Program output: -26.8110438137
Correct output: -55.7903983915 | Program output: -10.7903983915
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_float} {:instruction integer_rot} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction in2} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_sub} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_sub} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_rot} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction integer_rot} {:instruction print_float} {:instruction float_flush} {:instruction float_inc})
Best program: (print_float integer_rot integer_dup_items integer_min integer_min integer_rot integer_swap integer_div float_dup_times in1 -15 in2 integer_rot integer_swap integer_div float_dup_times in1 -15 integer_mult float_inc float_inc float_sub integer_dup float_inc integer_rot float_frominteger float_sub integer_rot integer_mult integer_mult float_inc float_inc -15 integer_mult float_inc integer_rot integer_mult integer_mult float_inc float_inc integer_mult float_inc float_inc integer_rot float_inc integer_rot -15 integer_mult float_inc integer_rot integer_rot -15 integer_mult float_inc integer_rot float_inc integer_rot float_inc integer_rot float_inc integer_mult float_inc float_sub float_inc integer_rot print_float float_flush float_inc)
Errors: [63.0 12 1.0 1 40.0 1 39.0 12 50.0 13 24.0 2 28.0 2 21.0 2 48.0 3 10.0 1 1.0 1 27.0 2 48.0 2 36.0 2 8.0 2 72.0 3 46.0 3 5.0 12 68.0 2 26.0 2 71.0 10 30.0 2 2.0 1 48.0 2 45.0 2]
Total: 954.0
Mean: 19.08
Genome size: 68
Size: 69
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2865.757067599999
Median total errors in population: 1124.2095
Error averages by case: (133.0256512999999 11.997 79.23841429999995 3.292 129.97889920000074 9.719 89.65207449999994 11.316 121.19569829999998 12.584 94.94427659999997 11.311 107.79675060000008 3.373 77.42283249999994 3.088 123.42420040000006 3.984 74.18481089999999 3.241 74.19560270000002 2.714 82.86733720000001 3.078 127.27616970000012 3.348 178.1372991999994 10.252 81.62088760000003 3.238 185.67574160000163 9.658 122.81787209999997 3.992 66.71558139999998 3.518 107.1642123000002 9.16 105.34130200000006 3.162 96.75606429999905 10.363 148.05418070000093 10.024 73.89361410000004 2.679 121.80108840000084 10.624 99.65150569999997 3.21)
Error minima by case: (4.6537 1 0.0 0 0.1471 1 0.3835 2 1.2362 1 0.2498 1 10.0 1 0.0 0 9.3122 2 0.0 0 0.0 0 0.0 0 22.7392 1 0.9626 1 0.0 1 32.2545 1 9.6675 1 0.0 0 0.5959 1 8.0 1 0.0546 3 2.8037 1 0.0 0 12.189 1 1.0 1)
Average genome size in population (length): 58.495
Average program size in population (points): 59.495
Average percent parens in population: 0.017
Minimum age in population: 53.66323057439877
Maximum age in population: 58.48418433295592
Average age in population: 56.52321605016592
Median age in population: 56.55899997734377
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 73
Genome diversity (% unique Plush genomes):	 0.672
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 73
Syntactic diversity (% unique Push programs):	 0.672
Total error diversity:				 0.272
Error (vector) diversity:			 0.282
Behavioral diversity:				 0.283
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 44389816
--- Timings ---
Current time: 1529615077705 milliseconds
Total Time:         133.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.1 seconds, 43.6%
Fitness Testing:     59.5 seconds, 44.6%
Report:              15.7 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Number IO problem report - generation 39
Test total error for best: 33827.78860000001
Test mean error for best: 16.91389
;;------------------------------
Outputs of best individual on training cases:
Correct output: 30.6537423401  | Program output: -22.3462576599
Correct output: 121.1693955328 | Program output: 130.1693955328
Correct output: -87.1471496018 | Program output: -61.1471496018
Correct output: -26.3834517166 | Program output: -1.3834517166 
Correct output: 17.6470229611  | Program output: -22.3529770389
Correct output: 24.6248861839  | Program output: 10.6248861839 
Correct output: 158.9893817123 | Program output: 140.9893817123
Correct output: 27.839127542   | Program output: 58.839127542  
Correct output: 113.8711245019 | Program output: 75.8711245019 
Correct output: 79.1156340116  | Program output: 99.1156340116 
Correct output: 65.9365762451  | Program output: 76.9365762451 
Correct output: -40.513814741  | Program output: -3.513814741  
Correct output: 179.1033508308 | Program output: 141.1033508308
Correct output: -151.9625542646 | Program output: -129.9625542646
Correct output: 56.3352749605  | Program output: 58.3352749605 
Correct output: -149.2545301832 | Program output: -91.2545301832
Correct output: 129.7111057352 | Program output: 93.7111057352 
Correct output: -1.8380522324  | Program output: 13.1619477676 
Correct output: 0.5958526809   | Program output: 54.5958526809 
Correct output: 150.0065109753 | Program output: 134.0065109753
Correct output: -21.0546356836 | Program output: 35.9453643164 
Correct output: -112.1094887867 | Program output: -96.1094887867
Correct output: 74.2495606848  | Program output: 86.2495606848 
Correct output: -74.8110438137 | Program output: -40.8110438137
Correct output: -55.7903983915 | Program output: -0.7903983915 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_float} {:instruction integer_rot} {:instruction integer_dup_items} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction in2} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_sub} {:instruction float_frominteger} {:instruction integer_mult} {:instruction float_inc} {:instruction float_sub} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction -15} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction float_dec} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction float_add} {:instruction print_float} {:instruction float_flush} {:instruction float_inc})
Best program: (print_float integer_rot integer_dup_items integer_rot integer_swap integer_div float_dup_times in1 -15 in2 integer_rot integer_swap integer_div float_dup_times in1 -15 integer_mult float_inc integer_dup float_inc integer_rot float_frominteger float_sub float_frominteger integer_mult float_inc float_sub integer_rot integer_mult integer_mult float_inc integer_rot integer_rot integer_mult integer_mult float_inc float_inc -15 integer_sub float_inc integer_rot integer_mult integer_mult float_inc float_inc integer_rot float_inc integer_rot -15 integer_mult float_inc integer_rot float_inc float_dec float_inc integer_rot float_inc integer_mult float_inc float_sub float_inc float_add print_float float_flush float_inc)
Errors: [53.0 13 9.0 2 26.0 2 25.0 2 40.0 13 14.0 2 18.0 2 31.0 2 38.0 3 20.0 1 11.0 2 37.0 2 38.0 2 22.0 2 2.0 1 58.0 3 36.0 3 15.0 12 54.0 2 16.0 2 57.0 10 16.0 3 12.0 2 34.0 2 55.0 2]
Total: 829.0
Mean: 16.58
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3064.402348000001
Median total errors in population: 1099.4424999999999
Error averages by case: (141.53709779999994 12.057 90.6615745 3.462 136.19995570000057 7.769 99.4161256 11.609 129.58753179999997 12.61 105.8106048 10.621 119.09577730000004 3.55 88.8855244 3.262 134.0664702 4.193 86.36813609999999 3.435 85.21245960000003 2.838 94.03569130000001 3.362 138.7733122000001 3.527 166.05010649999963 8.227 92.42188240000006 3.436 181.49499710000046 7.559 133.51847980000002 4.201 79.52288059999995 4.92 108.23599390000035 9.077 116.33810730000005 3.362 106.95522219999911 10.602 142.88419760000085 8.023 85.08134510000001 2.81 131.24906740000063 10.67 112.33380679999996 3.484)
Error minima by case: (4.6522 2 0.0 0 3.1471 1 0.3835 1 0.2284 2 0.2498 1 3.5828 1 0.0 0 16.4172 2 0.0 0 0.0 0 0.0 0 16.4172 1 22.0 1 0.0 1 0.7455 1 14.4172 1 0.0 0 0.001 2 5.5828 1 0.0546 3 3.8905 2 0.0 0 0.189 1 0.0 0)
Average genome size in population (length): 61.137
Average program size in population (points): 62.137
Average percent parens in population: 0.016
Minimum age in population: 54.66323057439877
Maximum age in population: 59.95586691955396
Average age in population: 57.99120765150954
Median age in population: 58.0074147207979
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 50
Genome diversity (% unique Plush genomes):	 0.713
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.713
Total error diversity:				 0.346
Error (vector) diversity:			 0.354
Behavioral diversity:				 0.355
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 45918241
--- Timings ---
Current time: 1529615081335 milliseconds
Total Time:         137.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.6 seconds, 43.4%
Fitness Testing:     61.2 seconds, 44.6%
Report:              16.3 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Number IO problem report - generation 40
Test total error for best: 33827.78860000001
Test mean error for best: 16.91389
;;------------------------------
Outputs of best individual on training cases:
Correct output: 30.6537423401  | Program output: -22.3462576599
Correct output: 121.1693955328 | Program output: 130.1693955328
Correct output: -87.1471496018 | Program output: -61.1471496018
Correct output: -26.3834517166 | Program output: -1.3834517166 
Correct output: 17.6470229611  | Program output: -22.3529770389
Correct output: 24.6248861839  | Program output: 10.6248861839 
Correct output: 158.9893817123 | Program output: 140.9893817123
Correct output: 27.839127542   | Program output: 58.839127542  
Correct output: 113.8711245019 | Program output: 75.8711245019 
Correct output: 79.1156340116  | Program output: 99.1156340116 
Correct output: 65.9365762451  | Program output: 76.9365762451 
Correct output: -40.513814741  | Program output: -3.513814741  
Correct output: 179.1033508308 | Program output: 141.1033508308
Correct output: -151.9625542646 | Program output: -129.9625542646
Correct output: 56.3352749605  | Program output: 58.3352749605 
Correct output: -149.2545301832 | Program output: -91.2545301832
Correct output: 129.7111057352 | Program output: 93.7111057352 
Correct output: -1.8380522324  | Program output: 13.1619477676 
Correct output: 0.5958526809   | Program output: 54.5958526809 
Correct output: 150.0065109753 | Program output: 134.0065109753
Correct output: -21.0546356836 | Program output: 35.9453643164 
Correct output: -112.1094887867 | Program output: -96.1094887867
Correct output: 74.2495606848  | Program output: 86.2495606848 
Correct output: -74.8110438137 | Program output: -40.8110438137
Correct output: -55.7903983915 | Program output: -0.7903983915 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_float} {:instruction integer_rot} {:instruction integer_dup_items} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction in2} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_sub} {:instruction float_frominteger} {:instruction integer_mult} {:instruction float_inc} {:instruction float_sub} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction -15} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction float_dec} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction float_add} {:instruction print_float} {:instruction float_flush} {:instruction float_inc})
Best program: (print_float integer_rot integer_dup_items integer_rot integer_swap integer_div float_dup_times in1 -15 in2 integer_rot integer_swap integer_div float_dup_times in1 -15 integer_mult float_inc integer_dup float_inc integer_rot float_frominteger float_sub float_frominteger integer_mult float_inc float_sub integer_rot integer_mult integer_mult float_inc integer_rot integer_rot integer_mult integer_mult float_inc float_inc -15 integer_sub float_inc integer_rot integer_mult integer_mult float_inc float_inc integer_rot float_inc integer_rot -15 integer_mult float_inc integer_rot float_inc float_dec float_inc integer_rot float_inc integer_mult float_inc float_sub float_inc float_add print_float float_flush float_inc)
Errors: [53.0 13 9.0 2 26.0 2 25.0 2 40.0 13 14.0 2 18.0 2 31.0 2 38.0 3 20.0 1 11.0 2 37.0 2 38.0 2 22.0 2 2.0 1 58.0 3 36.0 3 15.0 12 54.0 2 16.0 2 57.0 10 16.0 3 12.0 2 34.0 2 55.0 2]
Total: 829.0
Mean: 16.58
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2927.8879846999994
Median total errors in population: 1043.66105
Error averages by case: (137.8882576 12.007 90.05979849999996 3.5 129.88655370000004 5.199 98.46694069999977 11.896 126.12806359999999 12.429 101.07822879999998 10.283 118.44863750000006 3.558 86.55025809999998 3.305 131.85725310000004 4.339 84.67951540000001 3.407 83.2036479 2.886 91.30085360000001 3.433 138.25798950000006 3.537 135.36684469999986 5.075 89.46512420000002 3.417 165.02211180000012 4.474 131.90789379999995 4.339 75.44295210000003 4.913 95.69141560000064 8.472 115.65925050000004 3.548 105.53943089999972 10.725 126.45163900000024 5.24 83.44600799999999 2.864 131.30750250000023 10.334 108.22981359999999 3.372)
Error minima by case: (0.3463 2 0.0 0 3.1471 1 0.3835 2 1.1634 2 1.3751 1 11.0 1 0.0 0 31.0 2 0.0 0 0.0 0 0.0 0 31.0 1 15.9626 1 1.0 1 37.2545 1 29.0 1 0.0 0 0.4041 1 9.0 1 0.0546 3 0.2202 1 0.0 0 23.189 1 3.0 1)
Average genome size in population (length): 62.445
Average program size in population (points): 63.445
Average percent parens in population: 0.016
Minimum age in population: 56.85403081297409
Maximum age in population: 61.60252746355764
Average age in population: 59.52844512304094
Median age in population: 59.55787382511426
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 74
Genome diversity (% unique Plush genomes):	 0.735
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 74
Syntactic diversity (% unique Push programs):	 0.735
Total error diversity:				 0.391
Error (vector) diversity:			 0.4
Behavioral diversity:				 0.401
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 47479366
--- Timings ---
Current time: 1529615084975 milliseconds
Total Time:         140.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.9 seconds, 43.3%
Fitness Testing:     63.0 seconds, 44.8%
Report:              16.7 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Number IO problem report - generation 41
Test total error for best: 14551.0
Test mean error for best: 7.27550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 30.6537423401  | Program output: 12.6537423401 
Correct output: 121.1693955328 | Program output: 105.1693955328
Correct output: -87.1471496018 | Program output: -92.1471496018
Correct output: -26.3834517166 | Program output: -32.3834517166
Correct output: 17.6470229611  | Program output: -2.3529770389 
Correct output: 24.6248861839  | Program output: 0.6248861839  
Correct output: 158.9893817123 | Program output: 145.9893817123
Correct output: 27.839127542   | Program output: 3.839127542   
Correct output: 113.8711245019 | Program output: 95.8711245019 
Correct output: 79.1156340116  | Program output: 59.1156340116 
Correct output: 65.9365762451  | Program output: 51.9365762451 
Correct output: -40.513814741  | Program output: -58.513814741 
Correct output: 179.1033508308 | Program output: 161.1033508308
Correct output: -151.9625542646 | Program output: -160.9625542646
Correct output: 56.3352749605  | Program output: 33.3352749605 
Correct output: -149.2545301832 | Program output: -152.2545301832
Correct output: 129.7111057352 | Program output: 113.7111057352
Correct output: -1.8380522324  | Program output: -26.8380522324
Correct output: 0.5958526809   | Program output: -6.4041473191 
Correct output: 150.0065109753 | Program output: 124.0065109753
Correct output: -21.0546356836 | Program output: -25.0546356836
Correct output: -112.1094887867 | Program output: -112.1094887867
Correct output: 74.2495606848  | Program output: 61.2495606848 
Correct output: -74.8110438137 | Program output: -86.8110438137
Correct output: -55.7903983915 | Program output: -55.7903983915
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_float} {:instruction integer_rot} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction in2} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction in1} {:instruction in1} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_sub} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_sub} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_rot} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction integer_rot} {:instruction print_float} {:instruction float_flush} {:instruction float_inc})
Best program: (print_float integer_rot integer_dup_items integer_min integer_min integer_rot integer_swap integer_div float_dup_times in1 -15 in2 integer_rot integer_swap integer_div in1 in1 -15 integer_mult float_inc float_inc float_sub integer_dup float_inc integer_rot float_frominteger float_sub integer_rot integer_mult integer_mult float_inc float_inc -15 integer_mult float_inc integer_rot integer_mult integer_mult float_inc float_inc integer_mult float_inc float_inc integer_rot float_inc integer_rot -15 integer_mult float_inc integer_rot integer_rot -15 integer_mult float_inc integer_rot float_inc integer_rot float_inc integer_rot float_inc integer_mult float_inc float_sub float_inc integer_rot print_float float_flush float_inc)
Errors: [18.0 2 16.0 2 5.0 2 6.0 2 20.0 12 24.0 2 13.0 2 24.0 2 18.0 3 20.0 1 14.0 2 18.0 2 18.0 2 9.0 2 23.0 2 3.0 2 16.0 2 25.0 2 7.0 12 26.0 2 4.0 1 0.0 0 13.0 2 12.0 2 0.0 0]
Total: 417.0
Mean: 8.34
Genome size: 68
Size: 69
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2488.0816786000023
Median total errors in population: 1023.0028
Error averages by case: (117.59944899999985 12.017 70.35647349999998 3.155 114.0828392 4.752 87.82777589999976 11.727 105.24790309999989 12.479 81.5336919 9.119 97.33306020000003 3.33 69.76342909999995 3.067 110.63502580000005 4.145 67.19253369999994 3.093 63.22548500000001 2.603 77.06967289999999 3.377 117.03511890000011 3.317 117.45626829999993 4.484 67.916055 3.121 148.56397450000003 4.292 110.58806760000004 4.169 57.88149809999996 6.606 87.45859310000033 7.776 94.52633740000006 3.314 97.34797849999991 10.648 110.6263353000001 4.84 64.30149960000007 2.582 117.2228068000002 9.508 94.39180619999998 3.377)
Error minima by case: (1.6537 2 0.0 0 5.0 1 0.3835 2 1.647 1 0.7502 1 11.0 1 0.0 0 18.0 2 0.0 0 0.0 0 0.0 0 18.0 1 2.0374 1 0.0 0 3.0 1 16.0 2 0.0 0 0.5039 1 9.0 1 0.0546 1 0.0 0 0.0 0 8.189 1 0.0 0)
Average genome size in population (length): 64.478
Average program size in population (points): 65.478
Average percent parens in population: 0.015
Minimum age in population: 58.57138634661897
Maximum age in population: 62.99170958091145
Average age in population: 60.98238345275684
Median age in population: 61.05642199175873
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 33
Genome diversity (% unique Plush genomes):	 0.74
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.74
Total error diversity:				 0.393
Error (vector) diversity:			 0.406
Behavioral diversity:				 0.406
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 49091316
--- Timings ---
Current time: 1529615089058 milliseconds
Total Time:         144.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.4 seconds, 43.1%
Fitness Testing:     65.0 seconds, 44.9%
Report:              17.2 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Number IO problem report - generation 42
Test total error for best: 16553.0
Test mean error for best: 8.27650
;;------------------------------
Outputs of best individual on training cases:
Correct output: 30.6537423401  | Program output: 38.6537423401 
Correct output: 121.1693955328 | Program output: 131.1693955328
Correct output: -87.1471496018 | Program output: -66.1471496018
Correct output: -26.3834517166 | Program output: -6.3834517166 
Correct output: 17.6470229611  | Program output: 23.6470229611 
Correct output: 24.6248861839  | Program output: 26.6248861839 
Correct output: 158.9893817123 | Program output: 171.9893817123
Correct output: 27.839127542   | Program output: 29.839127542  
Correct output: 113.8711245019 | Program output: 121.8711245019
Correct output: 79.1156340116  | Program output: 85.1156340116 
Correct output: 65.9365762451  | Program output: 77.9365762451 
Correct output: -40.513814741  | Program output: -32.513814741 
Correct output: 179.1033508308 | Program output: 187.1033508308
Correct output: -151.9625542646 | Program output: -134.9625542646
Correct output: 56.3352749605  | Program output: 59.3352749605 
Correct output: -149.2545301832 | Program output: -126.2545301832
Correct output: 129.7111057352 | Program output: 139.7111057352
Correct output: -1.8380522324  | Program output: -0.8380522324 
Correct output: 0.5958526809   | Program output: 19.5958526809 
Correct output: 150.0065109753 | Program output: 150.0065109753
Correct output: -21.0546356836 | Program output: 0.9453643164  
Correct output: -112.1094887867 | Program output: -86.1094887867
Correct output: 74.2495606848  | Program output: 87.2495606848 
Correct output: -74.8110438137 | Program output: -60.8110438137
Correct output: -55.7903983915 | Program output: -29.7903983915
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_float} {:instruction integer_rot} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction in2} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction in1} {:instruction in1} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_sub} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_sub} {:instruction float_inc} {:instruction float_sub} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_mult} {:instruction float_inc} {:instruction float_sub} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_pop} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction integer_rot} {:instruction print_float} {:instruction float_flush} {:instruction float_inc})
Best program: (print_float integer_rot integer_dup_items integer_min integer_min integer_rot integer_swap integer_div float_dup_times in1 -15 in2 integer_rot integer_swap integer_div in1 in1 -15 integer_mult float_inc float_inc float_sub integer_dup float_inc integer_rot float_frominteger float_sub float_inc float_sub integer_rot integer_mult integer_mult float_inc float_inc integer_dup_items integer_mult float_inc float_sub integer_rot integer_mult integer_mult float_inc float_inc integer_dup_items integer_mult float_inc integer_mult float_inc float_inc integer_rot float_inc integer_rot integer_pop float_inc integer_rot float_inc integer_rot float_inc integer_mult float_inc float_sub float_inc integer_rot print_float float_flush float_inc)
Errors: [8.0 1 10.0 1 21.0 2 20.0 1 6.0 2 2.0 1 13.0 2 2.0 1 8.0 2 6.0 2 12.0 2 8.0 2 8.0 2 17.0 2 3.0 1 23.0 2 10.0 1 1.0 1 19.0 2 0.0 0 22.0 10 26.0 3 13.0 2 14.0 2 26.0 2]
Total: 347.0
Mean: 6.94
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2585.7383390000005
Median total errors in population: 999.4906000000001
Error averages by case: (118.19608859999992 12.032 74.64209349999996 3.194 107.06219200000004 5.075 95.03929289999995 11.412 106.1428472999999 12.624 83.95570719999999 7.343 98.3848297000001 3.569 78.11521589999997 3.252 111.7489025000001 4.314 74.69140619999999 3.221 69.58608080000002 2.85 84.21951320000004 3.455 117.25614200000015 3.547 118.79929599999986 4.747 72.77527289999999 3.241 146.08193050000006 4.963 111.32986740000004 4.282 66.36269910000001 9.032 109.9701735000001 6.22 95.86024870000007 3.48 113.19290110000013 10.428 110.37399120000022 4.995 70.41442640000002 2.85 109.5410255000002 7.164 101.07619489999998 3.63)
Error minima by case: (0.5974 1 0.0 0 1.1471 1 0.3835 1 0.4606 1 1.7208 1 0.4162 1 0.0 0 4.8711 2 0.0 0 0.0 0 0.0 0 8.0 1 1.9626 1 0.0 0 2.0 1 9.2889 1 0.0 0 0.4041 1 0.0 0 0.0546 1 0.0 0 0.0 0 5.811 1 0.0 0)
Average genome size in population (length): 66.004
Average program size in population (points): 67.004
Average percent parens in population: 0.015
Minimum age in population: 59.57138634661897
Maximum age in population: 64.42258645845277
Average age in population: 62.38166532113367
Median age in population: 62.42860312335142
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.747
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.747
Total error diversity:				 0.434
Error (vector) diversity:			 0.444
Behavioral diversity:				 0.444
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 50741416
--- Timings ---
Current time: 1529615092873 milliseconds
Total Time:         148.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.9 seconds, 42.9%
Fitness Testing:     66.9 seconds, 45.0%
Report:              17.8 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Number IO problem report - generation 43
Test total error for best: 12759.0
Test mean error for best: 6.37950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 30.6537423401  | Program output: 34.6537423401 
Correct output: 121.1693955328 | Program output: 127.1693955328
Correct output: -87.1471496018 | Program output: -70.1471496018
Correct output: -26.3834517166 | Program output: -10.3834517166
Correct output: 17.6470229611  | Program output: 19.6470229611 
Correct output: 24.6248861839  | Program output: 22.6248861839 
Correct output: 158.9893817123 | Program output: 167.9893817123
Correct output: 27.839127542   | Program output: 25.839127542  
Correct output: 113.8711245019 | Program output: 117.8711245019
Correct output: 79.1156340116  | Program output: 81.1156340116 
Correct output: 65.9365762451  | Program output: 73.9365762451 
Correct output: -40.513814741  | Program output: -36.513814741 
Correct output: 179.1033508308 | Program output: 183.1033508308
Correct output: -151.9625542646 | Program output: -138.9625542646
Correct output: 56.3352749605  | Program output: 55.3352749605 
Correct output: -149.2545301832 | Program output: -130.2545301832
Correct output: 129.7111057352 | Program output: 135.7111057352
Correct output: -1.8380522324  | Program output: -4.8380522324 
Correct output: 0.5958526809   | Program output: 15.5958526809 
Correct output: 150.0065109753 | Program output: 146.0065109753
Correct output: -21.0546356836 | Program output: -3.0546356836 
Correct output: -112.1094887867 | Program output: -90.1094887867
Correct output: 74.2495606848  | Program output: 83.2495606848 
Correct output: -74.8110438137 | Program output: -64.8110438137
Correct output: -55.7903983915 | Program output: -33.7903983915
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_float} {:instruction integer_rot} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction in2} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction in1} {:instruction in1} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_sub} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_rot} {:instruction float_frominteger} {:instruction tagged_95} {:instruction float_inc} {:instruction float_sub} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_mult} {:instruction float_inc} {:instruction float_sub} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_pop} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction integer_rot} {:instruction print_float} {:instruction float_flush} {:instruction float_inc})
Best program: (print_float integer_rot integer_dup_items integer_min integer_min integer_rot integer_swap integer_div float_dup_times in1 -15 in2 integer_rot integer_swap integer_div in1 in1 -15 integer_mult float_inc float_inc float_sub integer_dup float_inc integer_rot float_frominteger tagged_95 float_inc float_sub integer_rot integer_mult integer_mult float_inc float_inc integer_dup_items integer_mult float_inc float_sub integer_rot integer_mult integer_mult float_inc float_inc integer_dup_items integer_mult float_inc integer_mult float_inc float_inc integer_rot float_inc integer_rot integer_pop float_inc integer_rot float_inc integer_rot float_inc integer_mult float_inc float_sub float_inc integer_rot print_float float_flush float_inc)
Errors: [4.0 1 6.0 1 17.0 2 16.0 2 2.0 1 2.0 1 9.0 2 2.0 1 4.0 1 2.0 2 8.0 2 4.0 2 4.0 2 13.0 2 1.0 1 19.0 2 6.0 2 3.0 1 15.0 2 4.0 2 18.0 2 22.0 3 9.0 2 10.0 1 22.0 2]
Total: 264.0
Mean: 5.28
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3048.562353199999
Median total errors in population: 954.1093000000001
Error averages by case: (137.5353544999999 11.972 96.15296759999994 3.18 121.18567780000004 4.848 115.52640769999991 9.978 126.13592349999993 12.583 102.37047549999993 5.349 117.02561950000015 3.662 97.57255989999992 3.375 130.53011040000007 4.375 96.87843940000006 3.232 91.83172570000005 3.158 103.49865320000004 3.599 135.5312392000002 3.613 128.72634249999984 4.746 90.93006460000008 3.163 154.26880230000003 5.265 130.30751350000003 4.312 88.55607049999995 10.42 139.1882705 5.622 114.62659320000009 3.509 137.49319420000018 10.217 119.10409980000026 5.04 93.13583969999996 3.093 122.70549650000021 6.061 119.31291199999993 4.06)
Error minima by case: (0.5075 1 0.0 0 1.1471 1 0.3835 1 2.0 1 0.3751 1 9.0 1 0.0 0 4.0 1 0.0 0 0.0 0 0.0 1 4.0 1 0.0374 1 0.0 0 1.0 1 0.2889 1 0.0 0 0.4041 1 0.0 0 0.0546 1 0.0 0 0.0 0 2.0 1 0.0 0)
Average genome size in population (length): 66.547
Average program size in population (points): 67.547
Average percent parens in population: 0.015
Minimum age in population: 61.3258117922378
Maximum age in population: 65.75132305047896
Average age in population: 63.81560212516798
Median age in population: 63.89332125493627
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 39
Genome diversity (% unique Plush genomes):	 0.725
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.725
Total error diversity:				 0.37
Error (vector) diversity:			 0.38
Behavioral diversity:				 0.38
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 52405091
--- Timings ---
Current time: 1529615096686 milliseconds
Total Time:         152.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.4 seconds, 42.9%
Fitness Testing:     68.7 seconds, 45.0%
Report:              18.3 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Number IO problem report - generation 44
Test total error for best: 9508.0
Test mean error for best: 4.75400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 30.6537423401  | Program output: 28.6537423401 
Correct output: 121.1693955328 | Program output: 121.1693955328
Correct output: -87.1471496018 | Program output: -76.1471496018
Correct output: -26.3834517166 | Program output: -16.3834517166
Correct output: 17.6470229611  | Program output: 13.6470229611 
Correct output: 24.6248861839  | Program output: 16.6248861839 
Correct output: 158.9893817123 | Program output: 161.9893817123
Correct output: 27.839127542   | Program output: 19.839127542  
Correct output: 113.8711245019 | Program output: 111.8711245019
Correct output: 79.1156340116  | Program output: 75.1156340116 
Correct output: 65.9365762451  | Program output: 67.9365762451 
Correct output: -40.513814741  | Program output: -42.513814741 
Correct output: 179.1033508308 | Program output: 177.1033508308
Correct output: -151.9625542646 | Program output: -144.9625542646
Correct output: 56.3352749605  | Program output: 49.3352749605 
Correct output: -149.2545301832 | Program output: -136.2545301832
Correct output: 129.7111057352 | Program output: 129.7111057352
Correct output: -1.8380522324  | Program output: -10.8380522324
Correct output: 0.5958526809   | Program output: 9.5958526809  
Correct output: 150.0065109753 | Program output: 140.0065109753
Correct output: -21.0546356836 | Program output: -9.0546356836 
Correct output: -112.1094887867 | Program output: -96.1094887867
Correct output: 74.2495606848  | Program output: 77.2495606848 
Correct output: -74.8110438137 | Program output: -70.8110438137
Correct output: -55.7903983915 | Program output: -39.7903983915
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_float} {:instruction integer_rot} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction in2} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction in1} {:instruction in1} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_sub} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_sub} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_mult} {:instruction float_inc} {:instruction float_sub} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction -15} {:instruction integer_mult} {:instruction integer_inc} {:instruction integer_mult} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction integer_rot} {:instruction print_float} {:instruction float_flush} {:instruction float_inc})
Best program: (print_float integer_rot integer_dup_items integer_min integer_min integer_rot integer_swap integer_div float_dup_times in1 -15 in2 integer_rot integer_swap integer_div in1 in1 -15 integer_mult float_inc float_inc float_sub integer_dup float_inc integer_rot float_frominteger float_sub integer_rot integer_mult integer_mult float_inc float_inc -15 integer_mult float_inc integer_rot integer_mult float_inc float_sub integer_rot integer_mult integer_mult float_inc float_inc -15 integer_mult integer_inc integer_mult integer_rot float_inc integer_rot float_inc integer_rot float_inc integer_mult float_inc float_sub float_inc integer_rot print_float float_flush float_inc)
Errors: [2.0 2 0.0 0 11.0 2 10.0 1 4.0 1 8.0 2 3.0 2 8.0 2 2.0 1 4.0 1 2.0 1 2.0 1 2.0 1 7.0 2 7.0 2 13.0 2 0.0 0 9.0 1 9.0 1 10.0 1 12.0 2 16.0 3 3.0 1 4.0 1 16.0 2]
Total: 199.0
Mean: 3.98
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3184.5897277999984
Median total errors in population: 840.3849
Error averages by case: (143.82011389999988 11.216 108.00998609999996 3.599 119.28995970000003 4.738 116.41995179999996 7.126 133.32325769999997 11.974 113.0315177999999 4.968 124.87342710000016 3.936 107.53220939999991 3.51 137.16591020000007 4.653 107.9966896000001 3.465 104.21390300000002 3.687 111.55726290000003 3.841 141.95137280000014 3.906 123.2684588999999 4.497 102.42887600000012 3.345 146.7499209 5.045 136.8277118 4.509 101.67252940000004 9.679 139.7726389999998 5.368 122.65485880000011 3.76 139.84838860000008 9.55 114.42553750000016 4.882 105.0558667999999 3.624 122.51325760000006 5.248 125.24812049999991 4.812)
Error minima by case: (1.6537 1 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 2.0 1 0.0 0 0.8698 1 0.0 0 0.0 0 0.4862 1 2.0 1 0.9626 1 0.0 0 0.0 0 0.0 0 0.0 0 0.3261 1 0.0 0 0.0 0 0.0 0 0.0 0 2.0 1 0.0 0)
Average genome size in population (length): 65.82
Average program size in population (points): 66.82
Average percent parens in population: 0.015
Minimum age in population: 62.3258117922378
Maximum age in population: 67.04012054358157
Average age in population: 65.29681334743051
Median age in population: 65.30621664393283
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 54
Genome diversity (% unique Plush genomes):	 0.714
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 54
Syntactic diversity (% unique Push programs):	 0.714
Total error diversity:				 0.35
Error (vector) diversity:			 0.359
Behavioral diversity:				 0.36
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 54050591
--- Timings ---
Current time: 1529615100347 milliseconds
Total Time:         156.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.9 seconds, 42.8%
Fitness Testing:     70.5 seconds, 45.1%
Report:              18.8 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Number IO problem report - generation 45
Test total error for best: 9508.0
Test mean error for best: 4.75400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 30.6537423401  | Program output: 28.6537423401 
Correct output: 121.1693955328 | Program output: 121.1693955328
Correct output: -87.1471496018 | Program output: -76.1471496018
Correct output: -26.3834517166 | Program output: -16.3834517166
Correct output: 17.6470229611  | Program output: 13.6470229611 
Correct output: 24.6248861839  | Program output: 16.6248861839 
Correct output: 158.9893817123 | Program output: 161.9893817123
Correct output: 27.839127542   | Program output: 19.839127542  
Correct output: 113.8711245019 | Program output: 111.8711245019
Correct output: 79.1156340116  | Program output: 75.1156340116 
Correct output: 65.9365762451  | Program output: 67.9365762451 
Correct output: -40.513814741  | Program output: -42.513814741 
Correct output: 179.1033508308 | Program output: 177.1033508308
Correct output: -151.9625542646 | Program output: -144.9625542646
Correct output: 56.3352749605  | Program output: 49.3352749605 
Correct output: -149.2545301832 | Program output: -136.2545301832
Correct output: 129.7111057352 | Program output: 129.7111057352
Correct output: -1.8380522324  | Program output: -10.8380522324
Correct output: 0.5958526809   | Program output: 9.5958526809  
Correct output: 150.0065109753 | Program output: 140.0065109753
Correct output: -21.0546356836 | Program output: -9.0546356836 
Correct output: -112.1094887867 | Program output: -96.1094887867
Correct output: 74.2495606848  | Program output: 77.2495606848 
Correct output: -74.8110438137 | Program output: -70.8110438137
Correct output: -55.7903983915 | Program output: -39.7903983915
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_float} {:instruction integer_rot} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction in2} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction in1} {:instruction in1} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_sub} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_sub} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_inc} {:instruction float_sub} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction -15} {:instruction integer_mult} {:instruction integer_inc} {:instruction integer_mult} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction integer_rot} {:instruction print_float} {:instruction float_flush} {:instruction float_inc})
Best program: (print_float integer_rot integer_dup_items integer_min integer_min integer_rot integer_swap integer_div float_dup_times in1 -15 in2 integer_rot integer_swap integer_div in1 in1 -15 integer_mult float_inc float_inc float_sub integer_dup float_inc integer_rot float_frominteger float_sub integer_rot integer_mult integer_mult float_inc float_inc integer_dup_items integer_mult float_inc integer_rot integer_yank float_inc float_sub integer_rot integer_mult integer_mult float_inc float_inc -15 integer_mult integer_inc integer_mult integer_rot float_inc integer_rot float_inc integer_rot float_inc integer_mult float_inc float_sub float_inc integer_rot print_float float_flush float_inc)
Errors: [2.0 2 0.0 0 11.0 2 10.0 1 4.0 1 8.0 2 3.0 2 8.0 2 2.0 1 4.0 1 2.0 1 2.0 1 2.0 1 7.0 2 7.0 2 13.0 2 0.0 0 9.0 1 9.0 1 10.0 1 12.0 2 16.0 3 3.0 1 4.0 1 16.0 2]
Total: 199.0
Mean: 3.98
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2572.6418658000002
Median total errors in population: 826.0340000000001
Error averages by case: (107.9257097 8.046 87.30907189999996 3.471 102.55656710000002 4.458 101.21582600000002 5.614 100.86573469999999 9.738 86.8088108 4.597 100.6045016 3.657 81.25017239999994 3.241 107.276194 4.28 83.82336079999999 3.36 82.85319070000007 3.545 85.06845280000003 3.743 112.51092100000011 3.629 106.96293119999994 4.008 81.21230530000001 3.345 124.13404499999993 4.491 107.61256590000002 4.112 78.44037820000001 7.256 117.20325740000001 5.953 98.50870940000011 3.477 118.2650647 7.444 100.1850648000001 4.469 83.63427910000001 3.457 103.95517310000004 4.716 93.64657819999994 4.706)
Error minima by case: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 1.0 1 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0374 1 0.0 0 0.0 0 0.0 0 0.0 0 0.4041 1 0.0 0 0.0 0 0.0 0 0.0 0 0.189 1 0.0 0)
Average genome size in population (length): 67.078
Average program size in population (points): 68.078
Average percent parens in population: 0.015
Minimum age in population: 64.46951054005899
Maximum age in population: 68.6380215949439
Average age in population: 66.92045313897398
Median age in population: 66.97452506868433
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.755
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.755
Total error diversity:				 0.351
Error (vector) diversity:			 0.365
Behavioral diversity:				 0.365
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 55727541
--- Timings ---
Current time: 1529615103938 milliseconds
Total Time:         159.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.2 seconds, 42.7%
Fitness Testing:     72.3 seconds, 45.2%
Report:              19.2 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Number IO problem report - generation 46
Test total error for best: 3433.0
Test mean error for best: 1.71650
;;------------------------------
Outputs of best individual on training cases:
Correct output: 30.6537423401  | Program output: 28.6537423401 
Correct output: 121.1693955328 | Program output: 119.1693955328
Correct output: -87.1471496018 | Program output: -89.1471496018
Correct output: -26.3834517166 | Program output: -28.3834517166
Correct output: 17.6470229611  | Program output: 15.6470229611 
Correct output: 24.6248861839  | Program output: 22.6248861839 
Correct output: 158.9893817123 | Program output: 156.9893817123
Correct output: 27.839127542   | Program output: 25.839127542  
Correct output: 113.8711245019 | Program output: 111.8711245019
Correct output: 79.1156340116  | Program output: 77.1156340116 
Correct output: 65.9365762451  | Program output: 63.9365762451 
Correct output: -40.513814741  | Program output: -42.513814741 
Correct output: 179.1033508308 | Program output: 177.1033508308
Correct output: -151.9625542646 | Program output: -153.9625542646
Correct output: 56.3352749605  | Program output: 54.3352749605 
Correct output: -149.2545301832 | Program output: -151.2545301832
Correct output: 129.7111057352 | Program output: 127.7111057352
Correct output: -1.8380522324  | Program output: -3.8380522324 
Correct output: 0.5958526809   | Program output: -1.4041473191 
Correct output: 150.0065109753 | Program output: 148.0065109753
Correct output: -21.0546356836 | Program output: -23.0546356836
Correct output: -112.1094887867 | Program output: -114.1094887867
Correct output: 74.2495606848  | Program output: 72.2495606848 
Correct output: -74.8110438137 | Program output: -76.8110438137
Correct output: -55.7903983915 | Program output: -57.7903983915
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_float} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction in2} {:instruction in2} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction in1} {:instruction in1} {:instruction -15} {:instruction integer_div} {:instruction in1} {:instruction in1} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_sub} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_sub} {:instruction float_inc} {:instruction float_sub} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_mult} {:instruction float_inc} {:instruction float_sub} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_mult} {:instruction integer_rot} {:instruction -15} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_pop} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction integer_rot} {:instruction print_float} {:instruction float_flush} {:instruction float_inc})
Best program: (print_float float_pop integer_dup_items integer_min integer_min integer_rot integer_swap integer_div float_dup_times in1 -15 in2 in2 integer_rot integer_swap integer_div in1 in1 -15 integer_div in1 in1 -15 integer_mult float_inc float_inc float_sub integer_dup float_inc integer_rot float_frominteger float_sub float_inc float_sub integer_rot integer_mult integer_mult float_inc integer_mult float_inc float_inc integer_dup_items integer_mult float_inc float_sub integer_rot integer_mult integer_mult float_inc float_inc integer_dup_items integer_mult integer_rot -15 integer_rot float_inc integer_rot integer_pop float_inc integer_rot float_inc integer_rot float_inc integer_mult float_inc float_sub float_inc integer_rot print_float float_flush float_inc)
Errors: [2.0 2 2.0 2 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 2 2.0 1 2.0 1 2.0 12 2.0 2 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1]
Total: 90.0
Mean: 1.8
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2485.362170499999
Median total errors in population: 340.0
Error averages by case: (101.96958779999999 4.406 88.80136579999991 3.342 106.81404100000009 3.888 101.4048642 4.777 98.19821069999995 5.301 89.02484900000002 4.383 105.21519130000006 3.633 64.94820389999995 2.829 105.49469420000001 3.711 76.5121765 3.335 84.19103950000004 3.49 67.87400670000005 3.319 111.03050050000017 3.525 110.93542359999994 3.817 84.0507504 3.252 120.37550759999993 3.941 107.03522920000003 3.845 73.44283019999999 4.57 107.51856939999999 5.019 100.10256220000014 3.437 109.8360274000001 5.053 105.73229500000011 4.407 84.8756917 3.413 105.52946030000008 4.262 76.01309239999995 3.481)
Error minima by case: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 1.0 1 0.0 0)
Average genome size in population (length): 65.215
Average program size in population (points): 66.215
Average percent parens in population: 0.015
Minimum age in population: 66.80718600025892
Maximum age in population: 70.35250016993399
Average age in population: 68.53025194512591
Median age in population: 68.53994333470307
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.748
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.748
Total error diversity:				 0.275
Error (vector) diversity:			 0.29
Behavioral diversity:				 0.29
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 57357916
--- Timings ---
Current time: 1529615107997 milliseconds
Total Time:         163.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.7 seconds, 42.6%
Fitness Testing:     74.2 seconds, 45.3%
Report:              19.6 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Number IO problem report - generation 47
Test total error for best: 3433.0
Test mean error for best: 1.71650
;;------------------------------
Outputs of best individual on training cases:
Correct output: 30.6537423401  | Program output: 28.6537423401 
Correct output: 121.1693955328 | Program output: 119.1693955328
Correct output: -87.1471496018 | Program output: -89.1471496018
Correct output: -26.3834517166 | Program output: -28.3834517166
Correct output: 17.6470229611  | Program output: 15.6470229611 
Correct output: 24.6248861839  | Program output: 22.6248861839 
Correct output: 158.9893817123 | Program output: 156.9893817123
Correct output: 27.839127542   | Program output: 25.839127542  
Correct output: 113.8711245019 | Program output: 111.8711245019
Correct output: 79.1156340116  | Program output: 77.1156340116 
Correct output: 65.9365762451  | Program output: 63.9365762451 
Correct output: -40.513814741  | Program output: -42.513814741 
Correct output: 179.1033508308 | Program output: 177.1033508308
Correct output: -151.9625542646 | Program output: -153.9625542646
Correct output: 56.3352749605  | Program output: 54.3352749605 
Correct output: -149.2545301832 | Program output: -151.2545301832
Correct output: 129.7111057352 | Program output: 127.7111057352
Correct output: -1.8380522324  | Program output: -3.8380522324 
Correct output: 0.5958526809   | Program output: -1.4041473191 
Correct output: 150.0065109753 | Program output: 148.0065109753
Correct output: -21.0546356836 | Program output: -23.0546356836
Correct output: -112.1094887867 | Program output: -114.1094887867
Correct output: 74.2495606848  | Program output: 72.2495606848 
Correct output: -74.8110438137 | Program output: -76.8110438137
Correct output: -55.7903983915 | Program output: -57.7903983915
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_float} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction in2} {:instruction in2} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction in1} {:instruction in1} {:instruction -15} {:instruction integer_div} {:instruction in1} {:instruction in1} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_sub} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_sub} {:instruction float_inc} {:instruction float_sub} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_mult} {:instruction float_inc} {:instruction float_sub} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_mult} {:instruction integer_rot} {:instruction -15} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_pop} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction integer_rot} {:instruction print_float} {:instruction float_flush} {:instruction float_inc})
Best program: (print_float float_pop integer_dup_items integer_min integer_min integer_rot integer_swap integer_div float_dup_times in1 -15 in2 in2 integer_rot integer_swap integer_div in1 in1 -15 integer_div in1 in1 -15 integer_mult float_inc float_inc float_sub integer_dup float_inc integer_rot float_frominteger float_sub float_inc float_sub integer_rot integer_mult integer_mult float_inc integer_mult float_inc float_inc integer_dup_items integer_mult float_inc float_sub integer_rot integer_mult integer_mult float_inc float_inc integer_dup_items integer_mult integer_rot -15 integer_rot float_inc integer_rot integer_pop float_inc integer_rot float_inc integer_rot float_inc integer_mult float_inc float_sub float_inc integer_rot print_float float_flush float_inc)
Errors: [2.0 2 2.0 2 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 2 2.0 1 2.0 1 2.0 12 2.0 2 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1]
Total: 90.0
Mean: 1.8
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2491.3147611999984
Median total errors in population: 264.0
Error averages by case: (99.5655285 4.212 90.78495449999993 3.322 104.7470536000001 3.993 100.4329958 4.859 96.40346379999995 4.192 90.43124000000002 4.477 104.34704830000001 3.791 72.3826300999999 2.987 102.69092959999995 3.513 81.72935029999995 3.23 86.01423740000004 3.546 72.69449880000005 3.205 108.80115270000009 3.493 106.76487379999996 3.886 85.49857530000003 3.338 116.65532859999999 4.043 104.54346450000003 3.918 79.31962649999997 4.012 105.2762056 4.3 102.06926140000016 3.729 107.98437110000009 4.481 105.65255820000003 4.45 87.03657840000008 3.43 99.19255150000006 4.192 84.09228289999992 3.605)
Error minima by case: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 1.0 1 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 1.0 1 0.0 0 0.0 0 0.0 0)
Average genome size in population (length): 62.627
Average program size in population (points): 63.627
Average percent parens in population: 0.016
Minimum age in population: 67.91265724792822
Maximum age in population: 71.89043188514283
Average age in population: 70.09665959850324
Median age in population: 70.13160984477271
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 33
Genome diversity (% unique Plush genomes):	 0.724
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.724
Total error diversity:				 0.268
Error (vector) diversity:			 0.279
Behavioral diversity:				 0.279
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 58923616
--- Timings ---
Current time: 1529615111608 milliseconds
Total Time:         167.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.1 seconds, 42.5%
Fitness Testing:     75.9 seconds, 45.4%
Report:              20.3 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Number IO problem report - generation 48
Test total error for best: 119.0
Test mean error for best: 0.05950
Test Case    0 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    1 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    2 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    3 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    4 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    5 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    6 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    7 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    8 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    9 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   10 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   11 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   12 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   13 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   14 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   15 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   16 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   17 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   18 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   19 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   20 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   21 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   22 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   23 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   24 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   25 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   26 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   27 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   28 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   29 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   30 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   31 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   32 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   33 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   34 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   35 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   36 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   37 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   38 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   39 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   40 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   41 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   42 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   43 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   44 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   45 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   46 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   47 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   48 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   49 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   50 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   51 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   52 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   53 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   54 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   55 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   56 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   57 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   58 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   59 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   60 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   61 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   62 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   63 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   64 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   65 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   66 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   67 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   68 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   69 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   70 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   71 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   72 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   73 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   74 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   75 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   76 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   77 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   78 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   79 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   80 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   81 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   82 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   83 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   84 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   85 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   86 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   87 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   88 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   89 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   90 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   91 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   92 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   93 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   94 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   95 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   96 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   97 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   98 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   99 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  100 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  101 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  102 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  103 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  104 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  105 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  106 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  107 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  108 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  109 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  110 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  111 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  112 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  113 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  114 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  115 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  116 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  117 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  118 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  119 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  120 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  121 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  122 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  123 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  124 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  125 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  126 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  127 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  128 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  129 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  130 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  131 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  132 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  133 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  134 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  135 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  136 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  137 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  138 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  139 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  140 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  141 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  142 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  143 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  144 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  145 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  146 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  147 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  148 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  149 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  150 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  151 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  152 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  153 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  154 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  155 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  156 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  157 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  158 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  159 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  160 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  161 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  162 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  163 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  164 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  165 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  166 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  167 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  168 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  169 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  170 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  171 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  172 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  173 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  174 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  175 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  176 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  177 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  178 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  179 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  180 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  181 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  182 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  183 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  184 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  185 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  186 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  187 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  188 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  189 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  190 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  191 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  192 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  193 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  194 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  195 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  196 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  197 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  198 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  199 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  200 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  201 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  202 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  203 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  204 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  205 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  206 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  207 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  208 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  209 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  210 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  211 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  212 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  213 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  214 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  215 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  216 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  217 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  218 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  219 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  220 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  221 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  222 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  223 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  224 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  225 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  226 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  227 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  228 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  229 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  230 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  231 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  232 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  233 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  234 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  235 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  236 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  237 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  238 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  239 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  240 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  241 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  242 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  243 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  244 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  245 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  246 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  247 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  248 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  249 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  250 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  251 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  252 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  253 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  254 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  255 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  256 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  257 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  258 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  259 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  260 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  261 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  262 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  263 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  264 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  265 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  266 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  267 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  268 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  269 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  270 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  271 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  272 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  273 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  274 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  275 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  276 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  277 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  278 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  279 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  280 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  281 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  282 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  283 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  284 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  285 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  286 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  287 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  288 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  289 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  290 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  291 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  292 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  293 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  294 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  295 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  296 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  297 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  298 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  299 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  300 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  301 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  302 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  303 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  304 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  305 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  306 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  307 | Numeric Error:   15.00000000000000 | Levenshtein Distance: 2
Test Case  308 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  309 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  310 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  311 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  312 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  313 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  314 | Numeric Error:   15.00000000000000 | Levenshtein Distance: 2
Test Case  315 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  316 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  317 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  318 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  319 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  320 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  321 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  322 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  323 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  324 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  325 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  326 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  327 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  328 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  329 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  330 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  331 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  332 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  333 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  334 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  335 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  336 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  337 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  338 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  339 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  340 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  341 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  342 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  343 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  344 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  345 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  346 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  347 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  348 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  349 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  350 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  351 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  352 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  353 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  354 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  355 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  356 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  357 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  358 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  359 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  360 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  361 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  362 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  363 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  364 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  365 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  366 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  367 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  368 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  369 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  370 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  371 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  372 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  373 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  374 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  375 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  376 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  377 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  378 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  379 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  380 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  381 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  382 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  383 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  384 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  385 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  386 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  387 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  388 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  389 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  390 | Numeric Error:   15.00000000000000 | Levenshtein Distance: 2
Test Case  391 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  392 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  393 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  394 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  395 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  396 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  397 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  398 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  399 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  400 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  401 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  402 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  403 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  404 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  405 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  406 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  407 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  408 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  409 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  410 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  411 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  412 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  413 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  414 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  415 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  416 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  417 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  418 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  419 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  420 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  421 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  422 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  423 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  424 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  425 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  426 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  427 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  428 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  429 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  430 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  431 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  432 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  433 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  434 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  435 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  436 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  437 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  438 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  439 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  440 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  441 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  442 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  443 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  444 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  445 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  446 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  447 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  448 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  449 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  450 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  451 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  452 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  453 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  454 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  455 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  456 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  457 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  458 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  459 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  460 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  461 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  462 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  463 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  464 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  465 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  466 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  467 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  468 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  469 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  470 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  471 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  472 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  473 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  474 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  475 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  476 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  477 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  478 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  479 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  480 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  481 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  482 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  483 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  484 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  485 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  486 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  487 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  488 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  489 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  490 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  491 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  492 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  493 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  494 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  495 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  496 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  497 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  498 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  499 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  500 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  501 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  502 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  503 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  504 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  505 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  506 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  507 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  508 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  509 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  510 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  511 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  512 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  513 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  514 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  515 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  516 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  517 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  518 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  519 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  520 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  521 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  522 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  523 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  524 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  525 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  526 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  527 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  528 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  529 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  530 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  531 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  532 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  533 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  534 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  535 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  536 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  537 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  538 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  539 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  540 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  541 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  542 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  543 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  544 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  545 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  546 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  547 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  548 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  549 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  550 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  551 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  552 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  553 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  554 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  555 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  556 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  557 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  558 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  559 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  560 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  561 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  562 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  563 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  564 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  565 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  566 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  567 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  568 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  569 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  570 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  571 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  572 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  573 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  574 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  575 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  576 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  577 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  578 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  579 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  580 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  581 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  582 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  583 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  584 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  585 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  586 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  587 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  588 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  589 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  590 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  591 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  592 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  593 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  594 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  595 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  596 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  597 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  598 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  599 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  600 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  601 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  602 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  603 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  604 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  605 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  606 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  607 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  608 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  609 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  610 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  611 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  612 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  613 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  614 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  615 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  616 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  617 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  618 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  619 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  620 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  621 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  622 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  623 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  624 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  625 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  626 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  627 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  628 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  629 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  630 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  631 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  632 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  633 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  634 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  635 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  636 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  637 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  638 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  639 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  640 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  641 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  642 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  643 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  644 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  645 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  646 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  647 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  648 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  649 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  650 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  651 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  652 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  653 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  654 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  655 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  656 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  657 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  658 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  659 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  660 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  661 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  662 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  663 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  664 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  665 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  666 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  667 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  668 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  669 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  670 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  671 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  672 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  673 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  674 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  675 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  676 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  677 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  678 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  679 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  680 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  681 | Numeric Error:   15.00000000000000 | Levenshtein Distance: 2
Test Case  682 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  683 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  684 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  685 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  686 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  687 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  688 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  689 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  690 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  691 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  692 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  693 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  694 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  695 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  696 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  697 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  698 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  699 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  700 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  701 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  702 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  703 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  704 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  705 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  706 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  707 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  708 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  709 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  710 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  711 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  712 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  713 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  714 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  715 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  716 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  717 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  718 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  719 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  720 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  721 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  722 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  723 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  724 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  725 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  726 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  727 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  728 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  729 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  730 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  731 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  732 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  733 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  734 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  735 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  736 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  737 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  738 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  739 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  740 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  741 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  742 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  743 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  744 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  745 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  746 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  747 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  748 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  749 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  750 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  751 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  752 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  753 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  754 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  755 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  756 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  757 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  758 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  759 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  760 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  761 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  762 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  763 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  764 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  765 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  766 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  767 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  768 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  769 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  770 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  771 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  772 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  773 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  774 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  775 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  776 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  777 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  778 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  779 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  780 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  781 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  782 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  783 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  784 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  785 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  786 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  787 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  788 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  789 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  790 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  791 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  792 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  793 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  794 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  795 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  796 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  797 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  798 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  799 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  800 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  801 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  802 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  803 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  804 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  805 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  806 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  807 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  808 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  809 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  810 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  811 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  812 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  813 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  814 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  815 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  816 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  817 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  818 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  819 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  820 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  821 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  822 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  823 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  824 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  825 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  826 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  827 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  828 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  829 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  830 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  831 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  832 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  833 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  834 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  835 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  836 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  837 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  838 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  839 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  840 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  841 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  842 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  843 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  844 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  845 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  846 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  847 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  848 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  849 | Numeric Error:   15.00000000000000 | Levenshtein Distance: 2
Test Case  850 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  851 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  852 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  853 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  854 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  855 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  856 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  857 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  858 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  859 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  860 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  861 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  862 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  863 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  864 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  865 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  866 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  867 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  868 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  869 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  870 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  871 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  872 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  873 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  874 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  875 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  876 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  877 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  878 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  879 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  880 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  881 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  882 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  883 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  884 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  885 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  886 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  887 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  888 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  889 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  890 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  891 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  892 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  893 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  894 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  895 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  896 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  897 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  898 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  899 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  900 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  901 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  902 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  903 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  904 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  905 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  906 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  907 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  908 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  909 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  910 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  911 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  912 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  913 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  914 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  915 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  916 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  917 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  918 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  919 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  920 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  921 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  922 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  923 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  924 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  925 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  926 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  927 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  928 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  929 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  930 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  931 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  932 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  933 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  934 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  935 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  936 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  937 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  938 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  939 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  940 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  941 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  942 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  943 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  944 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  945 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  946 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  947 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  948 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  949 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  950 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  951 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  952 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  953 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  954 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  955 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  956 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  957 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  958 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  959 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  960 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  961 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  962 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  963 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  964 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  965 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  966 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  967 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  968 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  969 | Numeric Error:   15.00000000000000 | Levenshtein Distance: 2
Test Case  970 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  971 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  972 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  973 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  974 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  975 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  976 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  977 | Numeric Error:   15.00000000000000 | Levenshtein Distance: 2
Test Case  978 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  979 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  980 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  981 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  982 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  983 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  984 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  985 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  986 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  987 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  988 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  989 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  990 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  991 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  992 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  993 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  994 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  995 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  996 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  997 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  998 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  999 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 30.6537423401  | Program output: 30.6537423401 
Correct output: 121.1693955328 | Program output: 121.1693955328
Correct output: -87.1471496018 | Program output: -87.1471496018
Correct output: -26.3834517166 | Program output: -26.3834517166
Correct output: 17.6470229611  | Program output: 17.6470229611 
Correct output: 24.6248861839  | Program output: 24.6248861839 
Correct output: 158.9893817123 | Program output: 158.9893817123
Correct output: 27.839127542   | Program output: 27.839127542  
Correct output: 113.8711245019 | Program output: 113.8711245019
Correct output: 79.1156340116  | Program output: 79.1156340116 
Correct output: 65.9365762451  | Program output: 65.9365762451 
Correct output: -40.513814741  | Program output: -40.513814741 
Correct output: 179.1033508308 | Program output: 179.1033508308
Correct output: -151.9625542646 | Program output: -151.9625542646
Correct output: 56.3352749605  | Program output: 56.3352749605 
Correct output: -149.2545301832 | Program output: -149.2545301832
Correct output: 129.7111057352 | Program output: 129.7111057352
Correct output: -1.8380522324  | Program output: -1.8380522324 
Correct output: 0.5958526809   | Program output: 0.5958526809  
Correct output: 150.0065109753 | Program output: 150.0065109753
Correct output: -21.0546356836 | Program output: -21.0546356836
Correct output: -112.1094887867 | Program output: -112.1094887867
Correct output: 74.2495606848  | Program output: 74.2495606848 
Correct output: -74.8110438137 | Program output: -74.8110438137
Correct output: -55.7903983915 | Program output: -55.7903983915
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_float} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_min} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction in1} {:instruction -15} {:instruction in2} {:instruction in2} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_div} {:instruction in1} {:instruction in1} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_sub} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_sub} {:instruction float_inc} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_mult} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction integer_rot} {:instruction -15} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction float_dec} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction float_add} {:instruction print_float} {:instruction float_flush} {:instruction float_inc})
Best program: (print_float float_pop integer_dup_items integer_min integer_min integer_rot integer_swap integer_div float_dup_times in1 -15 in2 in2 integer_rot integer_swap integer_div in1 in1 -15 integer_mult float_inc float_inc float_sub integer_dup float_inc integer_rot float_frominteger float_sub float_inc integer_add integer_rot integer_mult integer_mult float_inc integer_mult integer_mult float_inc float_inc -15 integer_mult float_inc float_inc integer_dup_items integer_mult float_inc float_sub float_inc integer_rot -15 integer_mult float_inc integer_rot float_inc float_dec float_inc integer_rot float_inc integer_mult float_inc float_sub float_inc float_add print_float float_flush float_inc)
Errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
Total: 0.0
Mean: 0.0
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2290.1283254999985
Median total errors in population: 205.0
Error averages by case: (93.61694480000004 4.565 82.16120669999994 3.206 95.6126956 4.11 91.68755720000004 4.773 91.00221059999998 4.327 83.98201790000002 4.786 95.24703620000001 3.569 65.02661689999991 3.024 95.10087069999996 3.618 74.30562549999995 2.988 76.05012220000008 3.22 65.23002500000005 2.836 101.37497050000016 3.1 98.5050436999999 3.722 78.24201729999999 3.626 108.6285750999999 4.071 96.05703370000002 3.687 71.40202809999997 4.117 97.47228069999998 5.005 95.04033050000018 3.489 100.4099586000001 4.385 95.14860600000002 4.352 77.49915280000009 3.131 92.30705410000004 4.09 73.77134509999998 3.45)
Error minima by case: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
Average genome size in population (length): 60.159
Average program size in population (points): 61.159
Average percent parens in population: 0.016
Minimum age in population: 69.43899183411372
Maximum age in population: 73.43010787569995
Average age in population: 71.54610606645684
Median age in population: 71.58185449512759
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 49
Genome diversity (% unique Plush genomes):	 0.712
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 49
Syntactic diversity (% unique Push programs):	 0.712
Total error diversity:				 0.282
Error (vector) diversity:			 0.297
Behavioral diversity:				 0.297
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 60427591
--- Timings ---
Current time: 1529615115501 milliseconds
Total Time:         171.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        72.5 seconds, 42.3%
Fitness Testing:     77.8 seconds, 45.5%
Report:              20.8 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 48
Successful program: (print_float float_pop integer_dup_items integer_min integer_min integer_rot integer_swap integer_div float_dup_times in1 -15 in2 in2 integer_rot integer_swap integer_div in1 in1 -15 integer_mult float_inc float_inc float_sub integer_dup float_inc integer_rot float_frominteger float_sub float_inc integer_add integer_rot integer_mult integer_mult float_inc integer_mult integer_mult float_inc float_inc -15 integer_mult float_inc float_inc integer_dup_items integer_mult float_inc float_sub float_inc integer_rot -15 integer_mult float_inc integer_rot float_inc float_dec float_inc integer_rot float_inc integer_mult float_inc float_sub float_inc float_add print_float float_flush float_inc)
Errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
Total error: 0.0
History: null
Size: 66


Auto-simplifying with starting size: 66
step: 0
program: (print_float float_pop integer_dup_items integer_min integer_min integer_rot integer_swap integer_div float_dup_times in1 -15 in2 in2 integer_rot integer_swap integer_div in1 in1 -15 integer_mult float_inc float_inc float_sub integer_dup float_inc integer_rot float_frominteger float_sub float_inc integer_add integer_rot integer_mult integer_mult float_inc integer_mult integer_mult float_inc float_inc -15 integer_mult float_inc float_inc integer_dup_items integer_mult float_inc float_sub float_inc integer_rot -15 integer_mult float_inc integer_rot float_inc float_dec float_inc integer_rot float_inc integer_mult float_inc float_sub float_inc float_add print_float float_flush float_inc)
errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
total: 0.0
size: 66

step: 500
program: (in1 in2 in1 in1 float_sub float_frominteger float_sub float_sub print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 10

step: 1000
program: (in1 in2 in1 in1 float_sub float_frominteger float_sub float_sub print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 10

step: 1500
program: (in1 in2 in1 in1 float_sub float_frominteger float_sub float_sub print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 10

step: 2000
program: (in1 in2 in1 in1 float_sub float_frominteger float_sub float_sub print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 10

step: 2500
program: (in1 in2 in1 in1 float_sub float_frominteger float_sub float_sub print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 10

step: 3000
program: (in1 in2 in1 in1 float_sub float_frominteger float_sub float_sub print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 10

step: 3500
program: (in1 in2 in1 in1 float_sub float_frominteger float_sub float_sub print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 10

step: 4000
program: (in1 in2 in1 in1 float_sub float_frominteger float_sub float_sub print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 10

step: 4500
program: (in1 in2 in1 in1 float_sub float_frominteger float_sub float_sub print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 10

step: 5000
program: (in1 in2 in1 in1 float_sub float_frominteger float_sub float_sub print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 10

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Number IO problem report - generation 48
Test total error for best: 0.0
Test mean error for best: 0.00000
Test Case    0 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    1 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    2 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    3 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    4 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    5 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    6 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    7 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    8 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    9 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   10 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   11 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   12 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   13 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   14 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   15 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   16 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   17 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   18 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   19 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   20 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   21 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   22 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   23 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   24 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   25 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   26 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   27 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   28 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   29 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   30 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   31 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   32 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   33 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   34 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   35 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   36 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   37 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   38 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   39 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   40 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   41 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   42 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   43 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   44 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   45 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   46 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   47 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   48 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   49 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   50 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   51 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   52 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   53 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   54 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   55 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   56 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   57 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   58 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   59 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   60 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   61 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   62 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   63 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   64 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   65 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   66 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   67 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   68 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   69 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   70 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   71 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   72 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   73 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   74 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   75 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   76 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   77 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   78 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   79 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   80 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   81 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   82 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   83 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   84 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   85 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   86 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   87 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   88 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   89 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   90 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   91 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   92 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   93 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   94 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   95 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   96 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   97 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   98 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   99 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  100 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  101 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  102 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  103 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  104 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  105 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  106 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  107 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  108 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  109 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  110 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  111 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  112 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  113 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  114 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  115 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  116 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  117 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  118 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  119 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  120 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  121 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  122 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  123 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  124 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  125 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  126 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  127 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  128 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  129 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  130 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  131 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  132 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  133 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  134 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  135 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  136 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  137 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  138 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  139 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  140 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  141 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  142 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  143 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  144 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  145 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  146 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  147 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  148 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  149 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  150 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  151 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  152 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  153 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  154 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  155 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  156 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  157 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  158 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  159 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  160 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  161 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  162 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  163 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  164 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  165 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  166 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  167 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  168 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  169 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  170 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  171 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  172 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  173 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  174 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  175 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  176 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  177 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  178 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  179 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  180 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  181 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  182 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  183 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  184 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  185 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  186 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  187 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  188 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  189 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  190 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  191 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  192 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  193 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  194 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  195 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  196 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  197 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  198 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  199 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  200 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  201 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  202 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  203 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  204 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  205 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  206 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  207 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  208 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  209 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  210 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  211 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  212 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  213 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  214 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  215 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  216 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  217 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  218 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  219 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  220 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  221 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  222 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  223 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  224 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  225 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  226 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  227 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  228 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  229 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  230 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  231 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  232 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  233 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  234 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  235 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  236 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  237 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  238 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  239 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  240 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  241 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  242 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  243 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  244 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  245 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  246 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  247 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  248 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  249 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  250 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  251 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  252 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  253 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  254 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  255 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  256 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  257 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  258 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  259 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  260 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  261 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  262 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  263 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  264 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  265 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  266 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  267 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  268 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  269 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  270 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  271 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  272 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  273 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  274 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  275 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  276 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  277 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  278 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  279 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  280 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  281 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  282 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  283 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  284 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  285 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  286 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  287 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  288 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  289 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  290 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  291 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  292 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  293 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  294 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  295 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  296 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  297 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  298 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  299 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  300 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  301 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  302 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  303 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  304 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  305 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  306 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  307 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  308 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  309 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  310 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  311 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  312 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  313 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  314 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  315 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  316 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  317 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  318 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  319 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  320 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  321 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  322 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  323 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  324 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  325 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  326 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  327 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  328 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  329 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  330 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  331 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  332 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  333 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  334 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  335 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  336 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  337 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  338 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  339 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  340 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  341 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  342 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  343 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  344 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  345 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  346 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  347 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  348 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  349 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  350 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  351 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  352 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  353 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  354 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  355 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  356 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  357 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  358 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  359 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  360 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  361 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  362 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  363 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  364 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  365 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  366 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  367 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  368 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  369 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  370 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  371 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  372 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  373 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  374 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  375 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  376 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  377 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  378 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  379 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  380 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  381 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  382 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  383 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  384 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  385 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  386 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  387 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  388 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  389 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  390 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  391 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  392 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  393 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  394 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  395 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  396 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  397 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  398 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  399 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  400 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  401 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  402 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  403 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  404 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  405 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  406 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  407 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  408 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  409 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  410 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  411 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  412 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  413 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  414 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  415 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  416 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  417 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  418 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  419 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  420 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  421 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  422 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  423 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  424 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  425 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  426 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  427 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  428 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  429 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  430 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  431 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  432 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  433 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  434 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  435 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  436 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  437 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  438 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  439 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  440 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  441 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  442 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  443 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  444 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  445 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  446 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  447 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  448 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  449 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  450 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  451 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  452 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  453 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  454 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  455 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  456 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  457 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  458 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  459 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  460 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  461 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  462 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  463 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  464 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  465 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  466 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  467 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  468 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  469 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  470 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  471 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  472 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  473 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  474 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  475 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  476 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  477 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  478 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  479 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  480 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  481 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  482 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  483 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  484 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  485 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  486 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  487 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  488 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  489 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  490 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  491 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  492 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  493 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  494 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  495 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  496 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  497 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  498 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  499 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  500 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  501 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  502 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  503 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  504 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  505 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  506 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  507 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  508 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  509 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  510 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  511 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  512 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  513 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  514 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  515 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  516 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  517 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  518 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  519 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  520 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  521 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  522 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  523 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  524 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  525 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  526 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  527 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  528 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  529 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  530 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  531 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  532 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  533 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  534 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  535 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  536 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  537 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  538 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  539 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  540 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  541 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  542 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  543 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  544 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  545 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  546 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  547 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  548 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  549 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  550 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  551 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  552 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  553 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  554 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  555 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  556 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  557 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  558 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  559 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  560 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  561 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  562 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  563 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  564 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  565 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  566 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  567 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  568 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  569 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  570 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  571 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  572 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  573 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  574 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  575 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  576 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  577 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  578 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  579 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  580 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  581 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  582 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  583 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  584 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  585 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  586 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  587 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  588 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  589 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  590 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  591 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  592 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  593 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  594 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  595 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  596 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  597 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  598 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  599 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  600 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  601 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  602 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  603 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  604 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  605 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  606 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  607 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  608 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  609 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  610 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  611 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  612 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  613 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  614 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  615 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  616 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  617 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  618 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  619 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  620 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  621 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  622 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  623 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  624 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  625 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  626 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  627 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  628 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  629 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  630 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  631 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  632 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  633 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  634 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  635 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  636 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  637 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  638 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  639 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  640 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  641 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  642 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  643 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  644 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  645 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  646 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  647 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  648 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  649 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  650 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  651 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  652 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  653 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  654 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  655 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  656 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  657 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  658 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  659 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  660 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  661 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  662 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  663 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  664 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  665 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  666 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  667 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  668 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  669 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  670 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  671 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  672 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  673 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  674 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  675 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  676 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  677 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  678 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  679 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  680 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  681 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  682 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  683 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  684 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  685 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  686 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  687 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  688 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  689 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  690 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  691 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  692 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  693 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  694 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  695 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  696 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  697 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  698 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  699 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  700 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  701 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  702 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  703 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  704 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  705 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  706 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  707 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  708 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  709 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  710 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  711 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  712 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  713 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  714 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  715 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  716 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  717 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  718 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  719 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  720 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  721 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  722 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  723 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  724 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  725 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  726 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  727 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  728 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  729 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  730 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  731 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  732 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  733 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  734 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  735 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  736 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  737 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  738 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  739 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  740 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  741 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  742 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  743 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  744 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  745 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  746 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  747 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  748 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  749 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  750 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  751 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  752 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  753 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  754 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  755 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  756 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  757 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  758 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  759 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  760 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  761 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  762 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  763 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  764 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  765 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  766 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  767 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  768 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  769 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  770 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  771 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  772 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  773 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  774 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  775 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  776 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  777 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  778 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  779 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  780 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  781 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  782 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  783 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  784 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  785 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  786 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  787 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  788 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  789 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  790 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  791 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  792 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  793 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  794 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  795 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  796 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  797 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  798 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  799 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  800 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  801 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  802 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  803 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  804 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  805 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  806 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  807 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  808 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  809 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  810 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  811 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  812 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  813 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  814 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  815 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  816 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  817 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  818 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  819 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  820 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  821 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  822 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  823 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  824 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  825 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  826 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  827 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  828 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  829 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  830 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  831 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  832 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  833 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  834 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  835 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  836 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  837 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  838 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  839 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  840 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  841 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  842 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  843 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  844 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  845 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  846 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  847 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  848 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  849 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  850 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  851 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  852 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  853 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  854 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  855 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  856 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  857 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  858 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  859 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  860 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  861 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  862 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  863 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  864 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  865 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  866 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  867 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  868 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  869 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  870 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  871 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  872 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  873 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  874 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  875 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  876 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  877 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  878 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  879 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  880 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  881 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  882 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  883 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  884 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  885 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  886 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  887 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  888 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  889 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  890 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  891 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  892 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  893 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  894 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  895 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  896 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  897 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  898 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  899 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  900 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  901 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  902 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  903 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  904 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  905 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  906 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  907 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  908 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  909 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  910 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  911 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  912 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  913 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  914 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  915 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  916 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  917 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  918 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  919 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  920 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  921 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  922 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  923 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  924 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  925 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  926 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  927 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  928 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  929 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  930 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  931 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  932 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  933 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  934 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  935 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  936 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  937 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  938 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  939 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  940 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  941 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  942 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  943 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  944 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  945 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  946 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  947 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  948 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  949 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  950 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  951 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  952 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  953 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  954 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  955 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  956 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  957 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  958 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  959 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  960 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  961 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  962 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  963 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  964 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  965 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  966 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  967 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  968 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  969 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  970 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  971 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  972 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  973 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  974 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  975 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  976 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  977 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  978 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  979 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  980 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  981 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  982 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  983 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  984 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  985 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  986 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  987 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  988 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  989 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  990 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  991 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  992 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  993 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  994 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  995 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  996 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  997 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  998 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  999 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 30.6537423401  | Program output: 30.6537423401 
Correct output: 121.1693955328 | Program output: 121.1693955328
Correct output: -87.1471496018 | Program output: -87.1471496018
Correct output: -26.3834517166 | Program output: -26.3834517166
Correct output: 17.6470229611  | Program output: 17.6470229611 
Correct output: 24.6248861839  | Program output: 24.6248861839 
Correct output: 158.9893817123 | Program output: 158.9893817123
Correct output: 27.839127542   | Program output: 27.839127542  
Correct output: 113.8711245019 | Program output: 113.8711245019
Correct output: 79.1156340116  | Program output: 79.1156340116 
Correct output: 65.9365762451  | Program output: 65.9365762451 
Correct output: -40.513814741  | Program output: -40.513814741 
Correct output: 179.1033508308 | Program output: 179.1033508308
Correct output: -151.9625542646 | Program output: -151.9625542646
Correct output: 56.3352749605  | Program output: 56.3352749605 
Correct output: -149.2545301832 | Program output: -149.2545301832
Correct output: 129.7111057352 | Program output: 129.7111057352
Correct output: -1.8380522324  | Program output: -1.8380522324 
Correct output: 0.5958526809   | Program output: 0.5958526809  
Correct output: 150.0065109753 | Program output: 150.0065109753
Correct output: -21.0546356836 | Program output: -21.0546356836
Correct output: -112.1094887867 | Program output: -112.1094887867
Correct output: 74.2495606848  | Program output: 74.2495606848 
Correct output: -74.8110438137 | Program output: -74.8110438137
Correct output: -55.7903983915 | Program output: -55.7903983915
;;******************************
