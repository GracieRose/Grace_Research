Command line args: clojush.problems.software.number-io :parent-selection :tournament :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
epigenetic-markers = []
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :tournament
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
report-simplifications = 0
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [[74.2889250003866 -20] 54.2889250003866]
Train Case:   1 | Input/Output: [[-39.907758418454044 55] 15.092241581545956]
Train Case:   2 | Input/Output: [[0.17974415546504474 -31] -30.820255844534955]
Train Case:   3 | Input/Output: [[97.25129655008953 -27] 70.25129655008953]
Train Case:   4 | Input/Output: [[73.66667710014246 77] 150.66667710014246]
Train Case:   5 | Input/Output: [[-97.01898028092437 -51] -148.01898028092438]
Train Case:   6 | Input/Output: [[95.98852886326443 -4] 91.98852886326443]
Train Case:   7 | Input/Output: [[3.343075140624535 53] 56.343075140624535]
Train Case:   8 | Input/Output: [[-46.20268597929478 -9] -55.20268597929478]
Train Case:   9 | Input/Output: [[62.09981147991576 -94] -31.900188520084242]
Train Case:  10 | Input/Output: [[67.8415782878329 3] 70.8415782878329]
Train Case:  11 | Input/Output: [[4.9229120653759395 -75] -70.07708793462406]
Train Case:  12 | Input/Output: [[-33.74264287986715 96] 62.25735712013285]
Train Case:  13 | Input/Output: [[-0.08807961950346055 -11] -11.08807961950346]
Train Case:  14 | Input/Output: [[-85.07308116824244 -13] -98.07308116824244]
Train Case:  15 | Input/Output: [[43.95455454099823 2] 45.95455454099823]
Train Case:  16 | Input/Output: [[92.25191454925817 -83] 9.251914549258174]
Train Case:  17 | Input/Output: [[23.917962443636924 -86] -62.082037556363076]
Train Case:  18 | Input/Output: [[-90.58919759309777 5] -85.58919759309777]
Train Case:  19 | Input/Output: [[-55.21978554516296 82] 26.780214454837044]
Train Case:  20 | Input/Output: [[52.20694972845283 -51] 1.2069497284528268]
Train Case:  21 | Input/Output: [[28.615186981124054 42] 70.61518698112405]
Train Case:  22 | Input/Output: [[10.208365961904292 17] 27.208365961904292]
Train Case:  23 | Input/Output: [[72.78109907799924 31] 103.78109907799924]
Train Case:  24 | Input/Output: [[82.41935197355886 -16] 66.41935197355886]
Test Case:   0 | Input/Output: [[41.192629240999196 -99] -57.807370759000804]
Test Case:   1 | Input/Output: [[28.497707955098804 -86] -57.502292044901196]
Test Case:   2 | Input/Output: [[14.34812003598769 13] 27.34812003598769]
Test Case:   3 | Input/Output: [[-1.8603920203345439 29] 27.139607979665456]
Test Case:   4 | Input/Output: [[-20.3220258986466 -65] -85.3220258986466]
Test Case:   5 | Input/Output: [[-99.32413061908167 99] -0.3241306190816715]
Test Case:   6 | Input/Output: [[-51.936890239237776 -50] -101.93689023923778]
Test Case:   7 | Input/Output: [[-93.08500313132795 47] -46.08500313132795]
Test Case:   8 | Input/Output: [[87.20901749929368 82] 169.20901749929368]
Test Case:   9 | Input/Output: [[-71.54688839071659 -27] -98.54688839071659]
Test Case:  10 | Input/Output: [[56.36900528761487 25] 81.36900528761487]
Test Case:  11 | Input/Output: [[98.6483876525246 85] 183.6483876525246]
Test Case:  12 | Input/Output: [[-50.794176727214555 48] -2.7941767272145555]
Test Case:  13 | Input/Output: [[-60.19697054944481 79] 18.803029450555186]
Test Case:  14 | Input/Output: [[-19.821591662045776 43] 23.178408337954224]
Test Case:  15 | Input/Output: [[-75.56995009040165 -43] -118.56995009040165]
Test Case:  16 | Input/Output: [[-64.55363836290336 38] -26.553638362903357]
Test Case:  17 | Input/Output: [[-5.07855971513753 8] 2.92144028486247]
Test Case:  18 | Input/Output: [[-41.687468103938976 75] 33.312531896061024]
Test Case:  19 | Input/Output: [[20.842701607878382 -44] -23.157298392121618]
Test Case:  20 | Input/Output: [[35.00210048935341 92] 127.00210048935341]
Test Case:  21 | Input/Output: [[-82.29406338407688 30] -52.29406338407688]
Test Case:  22 | Input/Output: [[-8.967205865312962 34] 25.032794134687038]
Test Case:  23 | Input/Output: [[67.92494647047721 38] 105.92494647047721]
Test Case:  24 | Input/Output: [[-88.12588561124655 -93] -181.12588561124653]
Test Case:  25 | Input/Output: [[9.685460241196694 97] 106.6854602411967]
Test Case:  26 | Input/Output: [[12.564786868233995 12] 24.564786868233995]
Test Case:  27 | Input/Output: [[62.38687357003076 -50] 12.386873570030758]
Test Case:  28 | Input/Output: [[-65.82154263992459 39] -26.821542639924587]
Test Case:  29 | Input/Output: [[93.73668600178985 -81] 12.736686001789849]
Test Case:  30 | Input/Output: [[26.239987283896 -65] -38.760012716104]
Test Case:  31 | Input/Output: [[27.706322426478906 55] 82.7063224264789]
Test Case:  32 | Input/Output: [[-96.38330701397607 28] -68.38330701397607]
Test Case:  33 | Input/Output: [[-41.464192718104734 63] 21.535807281895266]
Test Case:  34 | Input/Output: [[-38.17630269766967 14] -24.17630269766967]
Test Case:  35 | Input/Output: [[-0.6169760541844198 -65] -65.61697605418442]
Test Case:  36 | Input/Output: [[-88.58697298844265 -95] -183.58697298844265]
Test Case:  37 | Input/Output: [[-81.6970651212956 2] -79.6970651212956]
Test Case:  38 | Input/Output: [[-87.87591636504067 -14] -101.87591636504067]
Test Case:  39 | Input/Output: [[-77.56506553944229 -61] -138.5650655394423]
Test Case:  40 | Input/Output: [[-0.9209354137157675 -78] -78.92093541371577]
Test Case:  41 | Input/Output: [[-33.05732709119499 44] 10.942672908805008]
Test Case:  42 | Input/Output: [[-57.71661912627455 -7] -64.71661912627455]
Test Case:  43 | Input/Output: [[85.0600529367974 -66] 19.060052936797405]
Test Case:  44 | Input/Output: [[-72.34455748200403 71] -1.344557482004035]
Test Case:  45 | Input/Output: [[-86.06539351862361 -80] -166.0653935186236]
Test Case:  46 | Input/Output: [[56.96881201310947 -45] 11.96881201310947]
Test Case:  47 | Input/Output: [[81.20122964582364 -30] 51.201229645823645]
Test Case:  48 | Input/Output: [[87.35272741107292 -60] 27.35272741107292]
Test Case:  49 | Input/Output: [[-8.93645303860609 -41] -49.93645303860609]
Test Case:  50 | Input/Output: [[47.22672632618074 39] 86.22672632618074]
Test Case:  51 | Input/Output: [[-11.812363652562283 81] 69.18763634743772]
Test Case:  52 | Input/Output: [[23.361765750565922 19] 42.36176575056592]
Test Case:  53 | Input/Output: [[46.9949003264953 39] 85.9949003264953]
Test Case:  54 | Input/Output: [[-0.5181574777080016 24] 23.481842522292]
Test Case:  55 | Input/Output: [[-84.26524338078897 49] -35.265243380788974]
Test Case:  56 | Input/Output: [[-55.104207233664894 74] 18.895792766335106]
Test Case:  57 | Input/Output: [[37.80338139033296 27] 64.80338139033296]
Test Case:  58 | Input/Output: [[24.679508248867705 -96] -71.3204917511323]
Test Case:  59 | Input/Output: [[87.55648810612462 78] 165.55648810612462]
Test Case:  60 | Input/Output: [[92.24821511918111 92] 184.2482151191811]
Test Case:  61 | Input/Output: [[-76.92337966828262 -28] -104.92337966828262]
Test Case:  62 | Input/Output: [[47.88917589560978 84] 131.88917589560978]
Test Case:  63 | Input/Output: [[-39.73197342086958 -27] -66.73197342086958]
Test Case:  64 | Input/Output: [[-76.65149012762575 -65] -141.65149012762575]
Test Case:  65 | Input/Output: [[-16.126795522590626 45] 28.873204477409374]
Test Case:  66 | Input/Output: [[-42.647450950637534 98] 55.352549049362466]
Test Case:  67 | Input/Output: [[81.81634422215936 68] 149.81634422215936]
Test Case:  68 | Input/Output: [[-91.01636559737298 -47] -138.01636559737298]
Test Case:  69 | Input/Output: [[-92.16002232262781 36] -56.16002232262781]
Test Case:  70 | Input/Output: [[-23.435598456171405 -42] -65.4355984561714]
Test Case:  71 | Input/Output: [[47.61404691870243 -37] 10.614046918702428]
Test Case:  72 | Input/Output: [[-10.482650329753284 17] 6.517349670246716]
Test Case:  73 | Input/Output: [[-38.266655490961575 4] -34.266655490961575]
Test Case:  74 | Input/Output: [[-98.89663770407604 -43] -141.89663770407606]
Test Case:  75 | Input/Output: [[-12.215714312911103 -31] -43.2157143129111]
Test Case:  76 | Input/Output: [[-85.34615119554884 96] 10.653848804451158]
Test Case:  77 | Input/Output: [[-56.59138951594018 -12] -68.59138951594018]
Test Case:  78 | Input/Output: [[13.442758559374795 100] 113.4427585593748]
Test Case:  79 | Input/Output: [[-45.494848521600105 89] 43.505151478399895]
Test Case:  80 | Input/Output: [[97.98240073178354 38] 135.98240073178354]
Test Case:  81 | Input/Output: [[-39.49465885112657 -91] -130.4946588511266]
Test Case:  82 | Input/Output: [[72.4720254864528 -29] 43.47202548645279]
Test Case:  83 | Input/Output: [[-48.77488213597601 -80] -128.77488213597601]
Test Case:  84 | Input/Output: [[2.5660897451052165 58] 60.56608974510522]
Test Case:  85 | Input/Output: [[-8.325071874892245 73] 64.67492812510775]
Test Case:  86 | Input/Output: [[25.12687366321829 -51] -25.87312633678171]
Test Case:  87 | Input/Output: [[34.1936453019631 57] 91.1936453019631]
Test Case:  88 | Input/Output: [[-10.936694741668916 51] 40.063305258331084]
Test Case:  89 | Input/Output: [[10.042983977368962 50] 60.04298397736896]
Test Case:  90 | Input/Output: [[83.50523223329742 81] 164.50523223329742]
Test Case:  91 | Input/Output: [[-86.59481639851398 -75] -161.59481639851398]
Test Case:  92 | Input/Output: [[-13.118578938731048 36] 22.881421061268952]
Test Case:  93 | Input/Output: [[-41.97543902298053 -70] -111.97543902298054]
Test Case:  94 | Input/Output: [[6.612068408537382 36] 42.61206840853738]
Test Case:  95 | Input/Output: [[13.134449547186946 47] 60.13444954718695]
Test Case:  96 | Input/Output: [[-54.335226024207195 -84] -138.3352260242072]
Test Case:  97 | Input/Output: [[-74.32140860265989 44] -30.321408602659886]
Test Case:  98 | Input/Output: [[84.47077138146801 13] 97.47077138146801]
Test Case:  99 | Input/Output: [[-36.084218595006945 -67] -103.08421859500694]
Test Case: 100 | Input/Output: [[-66.7209885814272 -21] -87.7209885814272]
Test Case: 101 | Input/Output: [[60.1754832261058 48] 108.1754832261058]
Test Case: 102 | Input/Output: [[42.42190289200025 -38] 4.421902892000247]
Test Case: 103 | Input/Output: [[31.85581854808629 66] 97.85581854808629]
Test Case: 104 | Input/Output: [[17.825251633561805 36] 53.825251633561805]
Test Case: 105 | Input/Output: [[97.21409067373739 -47] 50.21409067373739]
Test Case: 106 | Input/Output: [[86.38092900091246 81] 167.38092900091246]
Test Case: 107 | Input/Output: [[81.02564007730203 -40] 41.02564007730203]
Test Case: 108 | Input/Output: [[-89.41186940232615 62] -27.411869402326147]
Test Case: 109 | Input/Output: [[28.470918765840736 24] 52.470918765840736]
Test Case: 110 | Input/Output: [[9.010770302054823 14] 23.010770302054823]
Test Case: 111 | Input/Output: [[66.07502836820552 65] 131.07502836820552]
Test Case: 112 | Input/Output: [[-3.1389556844758033 7] 3.8610443155241967]
Test Case: 113 | Input/Output: [[79.58975055315682 97] 176.58975055315682]
Test Case: 114 | Input/Output: [[-4.014818144191196 -57] -61.014818144191196]
Test Case: 115 | Input/Output: [[-80.86380884873469 57] -23.863808848734692]
Test Case: 116 | Input/Output: [[-82.06671394996039 93] 10.933286050039612]
Test Case: 117 | Input/Output: [[63.55378817447101 78] 141.553788174471]
Test Case: 118 | Input/Output: [[-11.221707453544894 76] 64.7782925464551]
Test Case: 119 | Input/Output: [[59.20830884380436 40] 99.20830884380436]
Test Case: 120 | Input/Output: [[29.102803844409834 -75] -45.897196155590166]
Test Case: 121 | Input/Output: [[23.775360324181193 -17] 6.775360324181193]
Test Case: 122 | Input/Output: [[74.5459509840409 74] 148.5459509840409]
Test Case: 123 | Input/Output: [[-3.115492984389107 -16] -19.115492984389107]
Test Case: 124 | Input/Output: [[6.147195285365598 -74] -67.8528047146344]
Test Case: 125 | Input/Output: [[97.81333387917451 18] 115.81333387917451]
Test Case: 126 | Input/Output: [[29.674887805757265 8] 37.674887805757265]
Test Case: 127 | Input/Output: [[-36.65521280569006 88] 51.34478719430994]
Test Case: 128 | Input/Output: [[81.71467994774738 -19] 62.714679947747385]
Test Case: 129 | Input/Output: [[-15.266216987859679 90] 74.73378301214032]
Test Case: 130 | Input/Output: [[-89.18482896699349 -73] -162.1848289669935]
Test Case: 131 | Input/Output: [[-53.28653077392467 86] 32.71346922607533]
Test Case: 132 | Input/Output: [[93.45916692787881 91] 184.4591669278788]
Test Case: 133 | Input/Output: [[-36.870201650377844 95] 58.129798349622156]
Test Case: 134 | Input/Output: [[-80.77089291547999 -21] -101.77089291547999]
Test Case: 135 | Input/Output: [[-30.64951551632265 62] 31.35048448367735]
Test Case: 136 | Input/Output: [[-97.65630368112615 -11] -108.65630368112615]
Test Case: 137 | Input/Output: [[-70.04494025578181 -31] -101.04494025578181]
Test Case: 138 | Input/Output: [[-76.51649223280796 -86] -162.51649223280796]
Test Case: 139 | Input/Output: [[81.61068821654717 -83] -1.3893117834528255]
Test Case: 140 | Input/Output: [[73.6407485772553 66] 139.6407485772553]
Test Case: 141 | Input/Output: [[43.255262987614316 -55] -11.744737012385684]
Test Case: 142 | Input/Output: [[27.522960122682022 -45] -17.477039877317978]
Test Case: 143 | Input/Output: [[78.72034695142077 -17] 61.720346951420765]
Test Case: 144 | Input/Output: [[53.667285052819324 77] 130.66728505281932]
Test Case: 145 | Input/Output: [[-12.660474161553694 55] 42.339525838446306]
Test Case: 146 | Input/Output: [[-97.75634085954117 -56] -153.75634085954118]
Test Case: 147 | Input/Output: [[-29.687015974419694 -47] -76.6870159744197]
Test Case: 148 | Input/Output: [[-4.081301667545233 -38] -42.08130166754523]
Test Case: 149 | Input/Output: [[-26.908760156488356 38] 11.091239843511644]
Test Case: 150 | Input/Output: [[14.832222788458054 19] 33.832222788458054]
Test Case: 151 | Input/Output: [[99.02237662270653 45] 144.02237662270653]
Test Case: 152 | Input/Output: [[58.27289448848012 -77] -18.72710551151988]
Test Case: 153 | Input/Output: [[85.83156420215516 98] 183.83156420215516]
Test Case: 154 | Input/Output: [[12.710560641499157 -46] -33.28943935850084]
Test Case: 155 | Input/Output: [[-51.66035601417409 11] -40.66035601417409]
Test Case: 156 | Input/Output: [[37.16572207299521 85] 122.16572207299521]
Test Case: 157 | Input/Output: [[12.122865663223934 -51] -38.87713433677607]
Test Case: 158 | Input/Output: [[-73.74236662687046 46] -27.742366626870464]
Test Case: 159 | Input/Output: [[12.940977103133932 -20] -7.059022896866068]
Test Case: 160 | Input/Output: [[53.05437127216618 96] 149.05437127216618]
Test Case: 161 | Input/Output: [[-9.222170615810526 -25] -34.222170615810526]
Test Case: 162 | Input/Output: [[-86.75578281911017 80] -6.755782819110166]
Test Case: 163 | Input/Output: [[-23.307034585795037 -81] -104.30703458579504]
Test Case: 164 | Input/Output: [[-82.87766657609366 0] -82.87766657609366]
Test Case: 165 | Input/Output: [[-69.88374653759277 88] 18.11625346240723]
Test Case: 166 | Input/Output: [[-17.71240339930678 32] 14.28759660069322]
Test Case: 167 | Input/Output: [[77.65462565212786 -2] 75.65462565212786]
Test Case: 168 | Input/Output: [[-9.043031621935313 39] 29.956968378064687]
Test Case: 169 | Input/Output: [[23.077954241515258 96] 119.07795424151526]
Test Case: 170 | Input/Output: [[56.01247863512026 49] 105.01247863512026]
Test Case: 171 | Input/Output: [[60.93607712744836 33] 93.93607712744836]
Test Case: 172 | Input/Output: [[-35.08028851720751 49] 13.919711482792493]
Test Case: 173 | Input/Output: [[-47.79840535356623 49] 1.2015946464337688]
Test Case: 174 | Input/Output: [[-49.395018090615395 36] -13.395018090615395]
Test Case: 175 | Input/Output: [[-94.404335561187 -80] -174.404335561187]
Test Case: 176 | Input/Output: [[-34.708493527081586 -64] -98.70849352708159]
Test Case: 177 | Input/Output: [[-5.400927488235666 33] 27.599072511764334]
Test Case: 178 | Input/Output: [[35.849521004044135 -85] -49.150478995955865]
Test Case: 179 | Input/Output: [[44.60110802977769 21] 65.60110802977769]
Test Case: 180 | Input/Output: [[-74.61753334736585 -47] -121.61753334736585]
Test Case: 181 | Input/Output: [[-96.99366313684199 -1] -97.99366313684199]
Test Case: 182 | Input/Output: [[-74.7583115341209 46] -28.758311534120907]
Test Case: 183 | Input/Output: [[1.3664901171080714 -3] -1.6335098828919286]
Test Case: 184 | Input/Output: [[-37.23576665935455 -34] -71.23576665935455]
Test Case: 185 | Input/Output: [[-32.91130902851292 -4] -36.91130902851292]
Test Case: 186 | Input/Output: [[38.369496054107486 -27] 11.369496054107486]
Test Case: 187 | Input/Output: [[18.264061676707882 55] 73.26406167670788]
Test Case: 188 | Input/Output: [[60.370369920907734 -85] -24.629630079092266]
Test Case: 189 | Input/Output: [[84.04551890608437 -92] -7.954481093915632]
Test Case: 190 | Input/Output: [[-66.0085527994448 -67] -133.0085527994448]
Test Case: 191 | Input/Output: [[62.31087000476461 -22] 40.31087000476461]
Test Case: 192 | Input/Output: [[14.192562422266846 57] 71.19256242226685]
Test Case: 193 | Input/Output: [[-26.10904670859975 -10] -36.10904670859975]
Test Case: 194 | Input/Output: [[29.150539296872097 90] 119.1505392968721]
Test Case: 195 | Input/Output: [[-2.9635171909265523 -69] -71.96351719092655]
Test Case: 196 | Input/Output: [[-57.12582974099292 36] -21.12582974099292]
Test Case: 197 | Input/Output: [[-72.87813579081872 -37] -109.87813579081872]
Test Case: 198 | Input/Output: [[-84.66373951909287 98] 13.336260480907129]
Test Case: 199 | Input/Output: [[-1.2447630941628773 75] 73.75523690583712]
Test Case: 200 | Input/Output: [[8.966741774041424 -50] -41.033258225958576]
Test Case: 201 | Input/Output: [[-73.05422367157416 -70] -143.05422367157416]
Test Case: 202 | Input/Output: [[-94.84712479103408 57] -37.84712479103408]
Test Case: 203 | Input/Output: [[-3.708162318862179 22] 18.29183768113782]
Test Case: 204 | Input/Output: [[-98.47205790381363 -32] -130.47205790381363]
Test Case: 205 | Input/Output: [[-25.662510495619188 -1] -26.662510495619188]
Test Case: 206 | Input/Output: [[43.36402190950878 -82] -38.63597809049122]
Test Case: 207 | Input/Output: [[43.546893720598575 -27] 16.546893720598575]
Test Case: 208 | Input/Output: [[36.150990868899555 -70] -33.849009131100445]
Test Case: 209 | Input/Output: [[-26.417202581105713 -64] -90.41720258110571]
Test Case: 210 | Input/Output: [[62.8607368669345 -6] 56.8607368669345]
Test Case: 211 | Input/Output: [[10.236485399272823 -66] -55.76351460072718]
Test Case: 212 | Input/Output: [[27.505659944101367 -89] -61.49434005589863]
Test Case: 213 | Input/Output: [[64.73923725768 24] 88.73923725768]
Test Case: 214 | Input/Output: [[-53.333234892055195 67] 13.666765107944805]
Test Case: 215 | Input/Output: [[55.43566868717332 -94] -38.56433131282668]
Test Case: 216 | Input/Output: [[51.65136612421978 17] 68.65136612421978]
Test Case: 217 | Input/Output: [[-36.64977511003096 -66] -102.64977511003096]
Test Case: 218 | Input/Output: [[-58.10414852293086 91] 32.89585147706914]
Test Case: 219 | Input/Output: [[-78.04127933336173 -44] -122.04127933336173]
Test Case: 220 | Input/Output: [[48.29986419141005 28] 76.29986419141005]
Test Case: 221 | Input/Output: [[81.75124747097507 68] 149.75124747097507]
Test Case: 222 | Input/Output: [[-99.37232989661065 100] 0.6276701033893488]
Test Case: 223 | Input/Output: [[-69.41746897560094 -48] -117.41746897560094]
Test Case: 224 | Input/Output: [[21.200686245267747 59] 80.20068624526775]
Test Case: 225 | Input/Output: [[59.31128661831647 35] 94.31128661831647]
Test Case: 226 | Input/Output: [[-73.7619035480878 -7] -80.7619035480878]
Test Case: 227 | Input/Output: [[85.10202202142872 -95] -9.897977978571276]
Test Case: 228 | Input/Output: [[-70.46872304499058 -79] -149.46872304499058]
Test Case: 229 | Input/Output: [[1.9092715120566481 20] 21.909271512056648]
Test Case: 230 | Input/Output: [[3.792451814835786 -43] -39.207548185164214]
Test Case: 231 | Input/Output: [[-95.96624748888081 -15] -110.96624748888081]
Test Case: 232 | Input/Output: [[-1.6596981993632482 82] 80.34030180063675]
Test Case: 233 | Input/Output: [[25.360340045169465 35] 60.360340045169465]
Test Case: 234 | Input/Output: [[49.528239874346184 -59] -9.471760125653816]
Test Case: 235 | Input/Output: [[-83.16215150330922 8] -75.16215150330922]
Test Case: 236 | Input/Output: [[-32.27238020716176 -3] -35.27238020716176]
Test Case: 237 | Input/Output: [[7.063866889921087 -24] -16.936133110078913]
Test Case: 238 | Input/Output: [[-5.41069324928165 -23] -28.41069324928165]
Test Case: 239 | Input/Output: [[84.18556188572475 34] 118.18556188572475]
Test Case: 240 | Input/Output: [[48.49849960740488 -23] 25.49849960740488]
Test Case: 241 | Input/Output: [[21.31387742044106 73] 94.31387742044106]
Test Case: 242 | Input/Output: [[-47.154118254603695 76] 28.845881745396305]
Test Case: 243 | Input/Output: [[-83.69886623453276 -13] -96.69886623453276]
Test Case: 244 | Input/Output: [[23.07307542895191 -4] 19.07307542895191]
Test Case: 245 | Input/Output: [[61.109111628663584 63] 124.10911162866358]
Test Case: 246 | Input/Output: [[-42.292196843311714 2] -40.292196843311714]
Test Case: 247 | Input/Output: [[60.26917000853328 -85] -24.73082999146672]
Test Case: 248 | Input/Output: [[65.92762494582499 -91] -25.072375054175012]
Test Case: 249 | Input/Output: [[-18.18480826547706 -44] -62.18480826547706]
Test Case: 250 | Input/Output: [[-42.70761747486025 17] -25.70761747486025]
Test Case: 251 | Input/Output: [[69.48503882766448 3] 72.48503882766448]
Test Case: 252 | Input/Output: [[-67.93395721663207 -99] -166.93395721663205]
Test Case: 253 | Input/Output: [[80.94363868507045 -77] 3.9436386850704537]
Test Case: 254 | Input/Output: [[-66.99524859690509 -75] -141.99524859690507]
Test Case: 255 | Input/Output: [[91.82932961302458 -16] 75.82932961302458]
Test Case: 256 | Input/Output: [[-43.079665867104765 73] 29.920334132895235]
Test Case: 257 | Input/Output: [[-60.240677478074204 -70] -130.2406774780742]
Test Case: 258 | Input/Output: [[-3.011901180409282 -79] -82.01190118040928]
Test Case: 259 | Input/Output: [[84.17726883413891 -100] -15.822731165861086]
Test Case: 260 | Input/Output: [[-70.97894489408358 -31] -101.97894489408358]
Test Case: 261 | Input/Output: [[46.807914545839566 -73] -26.192085454160434]
Test Case: 262 | Input/Output: [[23.98323535369768 -58] -34.01676464630232]
Test Case: 263 | Input/Output: [[93.19586012591111 14] 107.19586012591111]
Test Case: 264 | Input/Output: [[-66.21921888095721 27] -39.219218880957214]
Test Case: 265 | Input/Output: [[-61.672177686414976 -44] -105.67217768641498]
Test Case: 266 | Input/Output: [[-54.80550893061886 54] -0.8055089306188634]
Test Case: 267 | Input/Output: [[74.22462143069995 75] 149.22462143069995]
Test Case: 268 | Input/Output: [[0.5328766722534368 19] 19.532876672253437]
Test Case: 269 | Input/Output: [[58.07510341067842 39] 97.07510341067842]
Test Case: 270 | Input/Output: [[-75.04121411590802 -97] -172.04121411590802]
Test Case: 271 | Input/Output: [[66.11364387663349 -24] 42.11364387663349]
Test Case: 272 | Input/Output: [[77.27253109547487 -78] -0.727468904525125]
Test Case: 273 | Input/Output: [[45.14020937736433 33] 78.14020937736433]
Test Case: 274 | Input/Output: [[40.30382556176946 -89] -48.69617443823054]
Test Case: 275 | Input/Output: [[97.55995121622644 7] 104.55995121622644]
Test Case: 276 | Input/Output: [[-44.84160032575697 19] -25.84160032575697]
Test Case: 277 | Input/Output: [[85.11405735080865 -10] 75.11405735080865]
Test Case: 278 | Input/Output: [[62.64993859449467 -25] 37.64993859449467]
Test Case: 279 | Input/Output: [[-61.51228985351573 -11] -72.51228985351574]
Test Case: 280 | Input/Output: [[50.518167915476056 74] 124.51816791547606]
Test Case: 281 | Input/Output: [[53.56976375573859 -80] -26.43023624426141]
Test Case: 282 | Input/Output: [[-87.6649052305267 20] -67.6649052305267]
Test Case: 283 | Input/Output: [[19.556089654035574 -33] -13.443910345964426]
Test Case: 284 | Input/Output: [[66.21843005643356 -87] -20.78156994356644]
Test Case: 285 | Input/Output: [[-73.75441366987909 67] -6.754413669879085]
Test Case: 286 | Input/Output: [[-50.852022910177986 -65] -115.852022910178]
Test Case: 287 | Input/Output: [[32.192794576995766 88] 120.19279457699577]
Test Case: 288 | Input/Output: [[-22.83531319848578 -52] -74.83531319848578]
Test Case: 289 | Input/Output: [[-66.45361498288204 17] -49.453614982882044]
Test Case: 290 | Input/Output: [[78.38259900941938 -99] -20.61740099058062]
Test Case: 291 | Input/Output: [[85.3956716730388 -47] 38.395671673038805]
Test Case: 292 | Input/Output: [[-4.391486149116133 -50] -54.39148614911613]
Test Case: 293 | Input/Output: [[36.25018626949742 3] 39.25018626949742]
Test Case: 294 | Input/Output: [[89.21127541450363 16] 105.21127541450363]
Test Case: 295 | Input/Output: [[-0.6078774788555137 1] 0.3921225211444863]
Test Case: 296 | Input/Output: [[43.69991764792027 74] 117.69991764792027]
Test Case: 297 | Input/Output: [[39.76879971019309 60] 99.7687997101931]
Test Case: 298 | Input/Output: [[42.131353669566295 91] 133.1313536695663]
Test Case: 299 | Input/Output: [[-3.965249082286732 85] 81.03475091771327]
Test Case: 300 | Input/Output: [[-9.868902365859398 -19] -28.868902365859398]
Test Case: 301 | Input/Output: [[-16.176978550683145 75] 58.823021449316855]
Test Case: 302 | Input/Output: [[-95.01809798459642 65] -30.018097984596423]
Test Case: 303 | Input/Output: [[-35.1706515616234 -71] -106.1706515616234]
Test Case: 304 | Input/Output: [[-57.125925897080386 -41] -98.12592589708038]
Test Case: 305 | Input/Output: [[-49.27057790591209 57] 7.729422094087909]
Test Case: 306 | Input/Output: [[-31.942847922884198 41] 9.057152077115802]
Test Case: 307 | Input/Output: [[12.436046779289327 -65] -52.56395322071067]
Test Case: 308 | Input/Output: [[-97.15867766779125 95] -2.1586776677912525]
Test Case: 309 | Input/Output: [[65.09745036616064 14] 79.09745036616064]
Test Case: 310 | Input/Output: [[98.58687850839351 52] 150.5868785083935]
Test Case: 311 | Input/Output: [[-7.205327235126589 -41] -48.20532723512659]
Test Case: 312 | Input/Output: [[22.624405576934706 -23] -0.37559442306529434]
Test Case: 313 | Input/Output: [[-61.983759849773264 19] -42.983759849773264]
Test Case: 314 | Input/Output: [[-87.63954131563885 33] -54.63954131563885]
Test Case: 315 | Input/Output: [[40.52671092098501 -44] -3.4732890790149895]
Test Case: 316 | Input/Output: [[-51.595299429770435 -91] -142.59529942977042]
Test Case: 317 | Input/Output: [[-72.22086858211665 -25] -97.22086858211665]
Test Case: 318 | Input/Output: [[-26.806413045688913 -78] -104.80641304568891]
Test Case: 319 | Input/Output: [[-82.3788822403458 -64] -146.3788822403458]
Test Case: 320 | Input/Output: [[-56.90669197313818 -59] -115.90669197313818]
Test Case: 321 | Input/Output: [[41.3505133749716 -92] -50.6494866250284]
Test Case: 322 | Input/Output: [[-8.22951617109294 56] 47.77048382890706]
Test Case: 323 | Input/Output: [[-98.17024031024606 53] -45.17024031024606]
Test Case: 324 | Input/Output: [[-25.430274885957658 -31] -56.43027488595766]
Test Case: 325 | Input/Output: [[63.325805813956805 55] 118.3258058139568]
Test Case: 326 | Input/Output: [[16.391672352505736 -15] 1.3916723525057364]
Test Case: 327 | Input/Output: [[72.3786042182985 -6] 66.3786042182985]
Test Case: 328 | Input/Output: [[41.98077749631736 98] 139.98077749631736]
Test Case: 329 | Input/Output: [[-65.56228794900498 26] -39.56228794900498]
Test Case: 330 | Input/Output: [[-11.77298147143398 90] 78.22701852856602]
Test Case: 331 | Input/Output: [[-87.67381028932628 -23] -110.67381028932628]
Test Case: 332 | Input/Output: [[16.353524317909446 13] 29.353524317909446]
Test Case: 333 | Input/Output: [[85.86002031360533 78] 163.86002031360533]
Test Case: 334 | Input/Output: [[46.26582527113416 -24] 22.26582527113416]
Test Case: 335 | Input/Output: [[26.1988877234687 -12] 14.198887723468701]
Test Case: 336 | Input/Output: [[-87.61734574551967 98] 10.382654254480329]
Test Case: 337 | Input/Output: [[78.27880273731003 36] 114.27880273731003]
Test Case: 338 | Input/Output: [[55.7542299573216 60] 115.7542299573216]
Test Case: 339 | Input/Output: [[55.66216323380246 -51] 4.66216323380246]
Test Case: 340 | Input/Output: [[-88.95552325720008 -49] -137.95552325720007]
Test Case: 341 | Input/Output: [[-29.675214301019622 76] 46.32478569898038]
Test Case: 342 | Input/Output: [[-30.85212291599578 25] -5.852122915995778]
Test Case: 343 | Input/Output: [[-27.530229800159574 9] -18.530229800159574]
Test Case: 344 | Input/Output: [[-37.26938007812037 20] -17.26938007812037]
Test Case: 345 | Input/Output: [[-49.97581360410748 -44] -93.97581360410749]
Test Case: 346 | Input/Output: [[47.42607874166964 6] 53.42607874166964]
Test Case: 347 | Input/Output: [[54.580052881046186 34] 88.58005288104619]
Test Case: 348 | Input/Output: [[17.11905874351467 -80] -62.88094125648533]
Test Case: 349 | Input/Output: [[-56.947407432279086 4] -52.947407432279086]
Test Case: 350 | Input/Output: [[-54.81651823912315 9] -45.81651823912315]
Test Case: 351 | Input/Output: [[-95.60727359886347 -55] -150.60727359886346]
Test Case: 352 | Input/Output: [[-24.242902787087047 37] 12.757097212912953]
Test Case: 353 | Input/Output: [[-66.96363103743374 30] -36.96363103743374]
Test Case: 354 | Input/Output: [[79.41143402113042 -43] 36.41143402113042]
Test Case: 355 | Input/Output: [[-92.90779443994457 -100] -192.90779443994455]
Test Case: 356 | Input/Output: [[-15.544118186727786 -17] -32.544118186727786]
Test Case: 357 | Input/Output: [[-68.11938410557161 68] -0.11938410557161205]
Test Case: 358 | Input/Output: [[-38.16142976335038 -20] -58.16142976335038]
Test Case: 359 | Input/Output: [[-61.290155649155565 -50] -111.29015564915557]
Test Case: 360 | Input/Output: [[-30.354689340362867 -9] -39.35468934036287]
Test Case: 361 | Input/Output: [[53.271404011873614 -95] -41.728595988126386]
Test Case: 362 | Input/Output: [[-80.42713620872863 -93] -173.42713620872863]
Test Case: 363 | Input/Output: [[42.169585526632346 51] 93.16958552663235]
Test Case: 364 | Input/Output: [[-82.54486826252467 -16] -98.54486826252467]
Test Case: 365 | Input/Output: [[90.74934355043058 64] 154.74934355043058]
Test Case: 366 | Input/Output: [[81.56840772409083 -8] 73.56840772409083]
Test Case: 367 | Input/Output: [[47.19617099496827 -76] -28.80382900503173]
Test Case: 368 | Input/Output: [[-23.232074745469205 -67] -90.2320747454692]
Test Case: 369 | Input/Output: [[60.045930607435366 37] 97.04593060743537]
Test Case: 370 | Input/Output: [[58.989565114833965 -96] -37.010434885166035]
Test Case: 371 | Input/Output: [[37.284050957891736 75] 112.28405095789174]
Test Case: 372 | Input/Output: [[-2.778202679368917 -71] -73.77820267936892]
Test Case: 373 | Input/Output: [[47.422021559423484 -41] 6.422021559423484]
Test Case: 374 | Input/Output: [[2.83353811389064 -86] -83.16646188610936]
Test Case: 375 | Input/Output: [[56.50823414166038 -88] -31.49176585833962]
Test Case: 376 | Input/Output: [[74.51626750672665 12] 86.51626750672665]
Test Case: 377 | Input/Output: [[88.4346714304931 -41] 47.4346714304931]
Test Case: 378 | Input/Output: [[53.19479552012959 53] 106.19479552012959]
Test Case: 379 | Input/Output: [[95.88547149325927 -36] 59.885471493259274]
Test Case: 380 | Input/Output: [[-5.398033214567803 -18] -23.398033214567803]
Test Case: 381 | Input/Output: [[-92.96320131536042 -39] -131.96320131536044]
Test Case: 382 | Input/Output: [[-56.030368961071986 -42] -98.03036896107199]
Test Case: 383 | Input/Output: [[11.923545859618429 19] 30.92354585961843]
Test Case: 384 | Input/Output: [[57.24968760813667 -64] -6.750312391863332]
Test Case: 385 | Input/Output: [[65.12719516917275 -98] -32.87280483082725]
Test Case: 386 | Input/Output: [[-67.36467153927643 -7] -74.36467153927643]
Test Case: 387 | Input/Output: [[-94.73285983311213 -80] -174.73285983311212]
Test Case: 388 | Input/Output: [[-49.11193253103556 -11] -60.11193253103556]
Test Case: 389 | Input/Output: [[99.33182118026224 -76] 23.33182118026224]
Test Case: 390 | Input/Output: [[-87.89720677898116 -48] -135.89720677898117]
Test Case: 391 | Input/Output: [[87.33981311587786 -20] 67.33981311587786]
Test Case: 392 | Input/Output: [[11.058259524390834 22] 33.058259524390834]
Test Case: 393 | Input/Output: [[21.651261630615977 -32] -10.348738369384023]
Test Case: 394 | Input/Output: [[65.05535686622034 -29] 36.055356866220336]
Test Case: 395 | Input/Output: [[64.7004660450497 -97] -32.299533954950306]
Test Case: 396 | Input/Output: [[70.53830254384758 3] 73.53830254384758]
Test Case: 397 | Input/Output: [[97.5739818533483 48] 145.5739818533483]
Test Case: 398 | Input/Output: [[99.76891143798454 88] 187.76891143798454]
Test Case: 399 | Input/Output: [[16.858707828657927 -21] -4.141292171342073]
Test Case: 400 | Input/Output: [[-68.67422319217317 51] -17.674223192173173]
Test Case: 401 | Input/Output: [[3.875826977115125 28] 31.875826977115125]
Test Case: 402 | Input/Output: [[-83.45018876983059 30] -53.45018876983059]
Test Case: 403 | Input/Output: [[-57.406582727656954 46] -11.406582727656954]
Test Case: 404 | Input/Output: [[17.713371293173367 -51] -33.28662870682663]
Test Case: 405 | Input/Output: [[-59.84289531543483 16] -43.84289531543483]
Test Case: 406 | Input/Output: [[-12.321768657843307 -45] -57.32176865784331]
Test Case: 407 | Input/Output: [[-23.795454880124083 71] 47.20454511987592]
Test Case: 408 | Input/Output: [[55.23396580945186 -34] 21.23396580945186]
Test Case: 409 | Input/Output: [[-71.13835295611615 29] -42.13835295611615]
Test Case: 410 | Input/Output: [[95.2184985325419 64] 159.2184985325419]
Test Case: 411 | Input/Output: [[76.52992350592359 -73] 3.529923505923591]
Test Case: 412 | Input/Output: [[-6.038001028096133 -87] -93.03800102809613]
Test Case: 413 | Input/Output: [[93.51566889889506 18] 111.51566889889506]
Test Case: 414 | Input/Output: [[37.482095466626845 76] 113.48209546662684]
Test Case: 415 | Input/Output: [[-26.931424086506667 -11] -37.93142408650667]
Test Case: 416 | Input/Output: [[88.11784371435621 -2] 86.11784371435621]
Test Case: 417 | Input/Output: [[-37.59670950697498 82] 44.40329049302502]
Test Case: 418 | Input/Output: [[64.96193695665514 50] 114.96193695665514]
Test Case: 419 | Input/Output: [[-65.25165906471776 -47] -112.25165906471776]
Test Case: 420 | Input/Output: [[36.7621878144584 -24] 12.7621878144584]
Test Case: 421 | Input/Output: [[55.09535160239213 -21] 34.09535160239213]
Test Case: 422 | Input/Output: [[-8.117934693904587 -10] -18.117934693904587]
Test Case: 423 | Input/Output: [[-82.74008318359358 -99] -181.74008318359358]
Test Case: 424 | Input/Output: [[-84.05199578905425 -82] -166.05199578905425]
Test Case: 425 | Input/Output: [[-65.49079265599082 50] -15.490792655990816]
Test Case: 426 | Input/Output: [[-70.35631318585014 72] 1.6436868141498593]
Test Case: 427 | Input/Output: [[-77.2800686792565 -26] -103.2800686792565]
Test Case: 428 | Input/Output: [[23.185414532550766 6] 29.185414532550766]
Test Case: 429 | Input/Output: [[16.105004260604133 -40] -23.894995739395867]
Test Case: 430 | Input/Output: [[-6.535300715195007 -77] -83.535300715195]
Test Case: 431 | Input/Output: [[85.98194476132375 86] 171.98194476132375]
Test Case: 432 | Input/Output: [[-32.58719404539201 13] -19.58719404539201]
Test Case: 433 | Input/Output: [[72.44774837452277 -22] 50.447748374522774]
Test Case: 434 | Input/Output: [[-11.815898065353664 56] 44.184101934646336]
Test Case: 435 | Input/Output: [[-11.681755333708594 24] 12.318244666291406]
Test Case: 436 | Input/Output: [[7.774601186844123 -90] -82.22539881315588]
Test Case: 437 | Input/Output: [[22.546002528254633 -90] -67.45399747174537]
Test Case: 438 | Input/Output: [[62.02067167411076 75] 137.02067167411076]
Test Case: 439 | Input/Output: [[19.50554218945095 -24] -4.494457810549051]
Test Case: 440 | Input/Output: [[67.55506935272314 -38] 29.555069352723137]
Test Case: 441 | Input/Output: [[21.797495136410717 97] 118.79749513641072]
Test Case: 442 | Input/Output: [[-33.4403797051843 86] 52.5596202948157]
Test Case: 443 | Input/Output: [[76.86496174468564 100] 176.86496174468564]
Test Case: 444 | Input/Output: [[67.80019053403734 -1] 66.80019053403734]
Test Case: 445 | Input/Output: [[-4.927044872401638 64] 59.07295512759836]
Test Case: 446 | Input/Output: [[-25.331753337709557 42] 16.668246662290443]
Test Case: 447 | Input/Output: [[-33.261472513161934 -23] -56.261472513161934]
Test Case: 448 | Input/Output: [[-45.58813126223764 -54] -99.58813126223764]
Test Case: 449 | Input/Output: [[66.90304060340262 -40] 26.903040603402616]
Test Case: 450 | Input/Output: [[-52.67148402272579 80] 27.328515977274208]
Test Case: 451 | Input/Output: [[-45.151336366921704 96] 50.848663633078296]
Test Case: 452 | Input/Output: [[-14.09107149200976 82] 67.90892850799024]
Test Case: 453 | Input/Output: [[-95.30240038327733 34] -61.30240038327733]
Test Case: 454 | Input/Output: [[-73.31962169763526 0] -73.31962169763526]
Test Case: 455 | Input/Output: [[-42.385305583606446 44] 1.6146944163935544]
Test Case: 456 | Input/Output: [[84.23534737017783 -18] 66.23534737017783]
Test Case: 457 | Input/Output: [[-55.87822964064557 100] 44.12177035935443]
Test Case: 458 | Input/Output: [[-47.310009557647035 55] 7.689990442352965]
Test Case: 459 | Input/Output: [[-97.76544898950401 -70] -167.76544898950402]
Test Case: 460 | Input/Output: [[-37.62886661403455 41] 3.37113338596545]
Test Case: 461 | Input/Output: [[35.358294452980715 27] 62.358294452980715]
Test Case: 462 | Input/Output: [[-30.75606120968837 -68] -98.75606120968837]
Test Case: 463 | Input/Output: [[-90.87000210095277 -53] -143.87000210095277]
Test Case: 464 | Input/Output: [[25.304949649415036 -97] -71.69505035058496]
Test Case: 465 | Input/Output: [[11.994870589885622 -83] -71.00512941011438]
Test Case: 466 | Input/Output: [[-61.02883936739023 22] -39.02883936739023]
Test Case: 467 | Input/Output: [[43.32429617673924 83] 126.32429617673924]
Test Case: 468 | Input/Output: [[73.85560876547171 -88] -14.144391234528285]
Test Case: 469 | Input/Output: [[94.00630769370034 96] 190.00630769370034]
Test Case: 470 | Input/Output: [[68.05675331191554 34] 102.05675331191554]
Test Case: 471 | Input/Output: [[57.24285494894383 -15] 42.24285494894383]
Test Case: 472 | Input/Output: [[36.57657982904118 26] 62.57657982904118]
Test Case: 473 | Input/Output: [[43.982114180418705 -23] 20.982114180418705]
Test Case: 474 | Input/Output: [[18.576122138300178 -79] -60.42387786169982]
Test Case: 475 | Input/Output: [[-27.455462858883777 -97] -124.45546285888378]
Test Case: 476 | Input/Output: [[-36.06097980668488 6] -30.060979806684877]
Test Case: 477 | Input/Output: [[39.08977859030159 53] 92.08977859030159]
Test Case: 478 | Input/Output: [[46.341791865944344 71] 117.34179186594434]
Test Case: 479 | Input/Output: [[66.02872501636813 50] 116.02872501636813]
Test Case: 480 | Input/Output: [[92.83138247564807 17] 109.83138247564807]
Test Case: 481 | Input/Output: [[58.78138017814808 60] 118.78138017814808]
Test Case: 482 | Input/Output: [[41.65312339624148 7] 48.65312339624148]
Test Case: 483 | Input/Output: [[61.28989355103366 99] 160.28989355103366]
Test Case: 484 | Input/Output: [[93.38258529436243 -70] 23.38258529436243]
Test Case: 485 | Input/Output: [[93.3872393949556 -80] 13.3872393949556]
Test Case: 486 | Input/Output: [[75.36328799803832 24] 99.36328799803832]
Test Case: 487 | Input/Output: [[-4.9911441347650225 43] 38.00885586523498]
Test Case: 488 | Input/Output: [[-74.09348227951739 48] -26.09348227951739]
Test Case: 489 | Input/Output: [[-70.34489526561228 -88] -158.34489526561228]
Test Case: 490 | Input/Output: [[52.47586831668505 39] 91.47586831668505]
Test Case: 491 | Input/Output: [[46.94229299531568 -98] -51.05770700468432]
Test Case: 492 | Input/Output: [[-65.62127350889311 91] 25.37872649110689]
Test Case: 493 | Input/Output: [[-13.401202654043473 -29] -42.40120265404347]
Test Case: 494 | Input/Output: [[-50.17345199673204 -77] -127.17345199673204]
Test Case: 495 | Input/Output: [[12.859755746240282 99] 111.85975574624028]
Test Case: 496 | Input/Output: [[13.757156816863827 -3] 10.757156816863827]
Test Case: 497 | Input/Output: [[-12.818874195823042 11] -1.8188741958230423]
Test Case: 498 | Input/Output: [[-17.175079177281916 -27] -44.175079177281916]
Test Case: 499 | Input/Output: [[86.49507115496769 -49] 37.49507115496769]
Test Case: 500 | Input/Output: [[27.96484587926919 11] 38.96484587926919]
Test Case: 501 | Input/Output: [[2.1905907901356443 17] 19.190590790135644]
Test Case: 502 | Input/Output: [[-99.9031025489504 -17] -116.9031025489504]
Test Case: 503 | Input/Output: [[25.021130327846606 68] 93.0211303278466]
Test Case: 504 | Input/Output: [[57.66540549079292 -39] 18.66540549079292]
Test Case: 505 | Input/Output: [[32.0741928166195 -75] -42.9258071833805]
Test Case: 506 | Input/Output: [[5.988423807974769 60] 65.98842380797477]
Test Case: 507 | Input/Output: [[-60.9004239286985 30] -30.9004239286985]
Test Case: 508 | Input/Output: [[-3.321330148377484 26] 22.678669851622516]
Test Case: 509 | Input/Output: [[-80.98872698154511 -97] -177.9887269815451]
Test Case: 510 | Input/Output: [[-26.600568899796656 34] 7.399431100203344]
Test Case: 511 | Input/Output: [[-19.07587543130515 -37] -56.07587543130515]
Test Case: 512 | Input/Output: [[59.08444091196324 14] 73.08444091196324]
Test Case: 513 | Input/Output: [[-74.77188833718107 47] -27.771888337181068]
Test Case: 514 | Input/Output: [[63.39044299783066 -81] -17.60955700216934]
Test Case: 515 | Input/Output: [[-46.55050728526027 27] -19.550507285260267]
Test Case: 516 | Input/Output: [[30.591774760094125 74] 104.59177476009413]
Test Case: 517 | Input/Output: [[-8.700872708586786 -78] -86.70087270858679]
Test Case: 518 | Input/Output: [[-66.41407159263477 4] -62.41407159263477]
Test Case: 519 | Input/Output: [[-88.85348083092974 -8] -96.85348083092974]
Test Case: 520 | Input/Output: [[-10.4324173641739 -47] -57.4324173641739]
Test Case: 521 | Input/Output: [[-30.8141320589302 -58] -88.8141320589302]
Test Case: 522 | Input/Output: [[-45.98267387202834 77] 31.017326127971657]
Test Case: 523 | Input/Output: [[83.58224858444413 39] 122.58224858444413]
Test Case: 524 | Input/Output: [[70.74143386988021 -68] 2.741433869880211]
Test Case: 525 | Input/Output: [[70.6562883106198 -9] 61.6562883106198]
Test Case: 526 | Input/Output: [[-39.92554413118008 96] 56.07445586881992]
Test Case: 527 | Input/Output: [[99.46912338008744 -58] 41.46912338008744]
Test Case: 528 | Input/Output: [[40.0987485155419 -52] -11.9012514844581]
Test Case: 529 | Input/Output: [[95.06591483343735 19] 114.06591483343735]
Test Case: 530 | Input/Output: [[-63.70093968518427 -79] -142.70093968518427]
Test Case: 531 | Input/Output: [[-83.69408453409473 31] -52.69408453409473]
Test Case: 532 | Input/Output: [[40.77919774579371 95] 135.7791977457937]
Test Case: 533 | Input/Output: [[-36.327891267271184 -29] -65.32789126727118]
Test Case: 534 | Input/Output: [[-28.884944995501556 -66] -94.88494499550156]
Test Case: 535 | Input/Output: [[97.47706361846431 37] 134.4770636184643]
Test Case: 536 | Input/Output: [[-26.479848621958467 -4] -30.479848621958467]
Test Case: 537 | Input/Output: [[-3.6184111206656127 -27] -30.618411120665613]
Test Case: 538 | Input/Output: [[69.67302283226977 4] 73.67302283226977]
Test Case: 539 | Input/Output: [[3.2769649297390515 46] 49.27696492973905]
Test Case: 540 | Input/Output: [[-93.62829479953618 -30] -123.62829479953618]
Test Case: 541 | Input/Output: [[60.26913681205855 5] 65.26913681205855]
Test Case: 542 | Input/Output: [[-82.9397896899215 6] -76.9397896899215]
Test Case: 543 | Input/Output: [[-98.07918042514562 59] -39.07918042514562]
Test Case: 544 | Input/Output: [[-17.09184243933717 -61] -78.09184243933717]
Test Case: 545 | Input/Output: [[-86.93467916889344 -83] -169.93467916889344]
Test Case: 546 | Input/Output: [[-46.95981306575159 -44] -90.95981306575159]
Test Case: 547 | Input/Output: [[-77.75778161305112 -100] -177.75778161305112]
Test Case: 548 | Input/Output: [[82.71982935386978 56] 138.71982935386978]
Test Case: 549 | Input/Output: [[-5.657472451271303 -63] -68.6574724512713]
Test Case: 550 | Input/Output: [[-81.18000017538789 71] -10.180000175387889]
Test Case: 551 | Input/Output: [[-70.07705306585623 -7] -77.07705306585623]
Test Case: 552 | Input/Output: [[-14.041225279452263 -2] -16.041225279452263]
Test Case: 553 | Input/Output: [[-41.22068843563127 4] -37.22068843563127]
Test Case: 554 | Input/Output: [[56.22004730274571 -17] 39.22004730274571]
Test Case: 555 | Input/Output: [[-94.179194825422 -28] -122.179194825422]
Test Case: 556 | Input/Output: [[35.95552378095391 67] 102.95552378095391]
Test Case: 557 | Input/Output: [[20.341204967946155 -30] -9.658795032053845]
Test Case: 558 | Input/Output: [[79.05412248482219 71] 150.0541224848222]
Test Case: 559 | Input/Output: [[80.75712658178739 -72] 8.75712658178739]
Test Case: 560 | Input/Output: [[-40.69024399092993 80] 39.30975600907007]
Test Case: 561 | Input/Output: [[84.7312179967939 34] 118.7312179967939]
Test Case: 562 | Input/Output: [[78.19578002940148 -82] -3.804219970598524]
Test Case: 563 | Input/Output: [[-67.86288539292332 -4] -71.86288539292332]
Test Case: 564 | Input/Output: [[68.5844602872586 -17] 51.584460287258594]
Test Case: 565 | Input/Output: [[-59.76220417939177 -52] -111.76220417939177]
Test Case: 566 | Input/Output: [[-40.60185600031525 -27] -67.60185600031525]
Test Case: 567 | Input/Output: [[-5.640183711775549 -67] -72.64018371177555]
Test Case: 568 | Input/Output: [[86.41691748042354 77] 163.41691748042354]
Test Case: 569 | Input/Output: [[47.23426029028403 -71] -23.765739709715973]
Test Case: 570 | Input/Output: [[64.75658140241046 19] 83.75658140241046]
Test Case: 571 | Input/Output: [[-51.819774435340136 9] -42.819774435340136]
Test Case: 572 | Input/Output: [[71.19412508561749 50] 121.19412508561749]
Test Case: 573 | Input/Output: [[11.335577181096852 -35] -23.664422818903148]
Test Case: 574 | Input/Output: [[-21.90904291188818 -60] -81.90904291188818]
Test Case: 575 | Input/Output: [[31.6269143038746 -25] 6.6269143038745995]
Test Case: 576 | Input/Output: [[61.334346527121625 53] 114.33434652712162]
Test Case: 577 | Input/Output: [[84.42590014408867 98] 182.42590014408867]
Test Case: 578 | Input/Output: [[30.806062298024074 -50] -19.193937701975926]
Test Case: 579 | Input/Output: [[-7.123636578574292 12] 4.876363421425708]
Test Case: 580 | Input/Output: [[-84.20699554923938 -34] -118.20699554923938]
Test Case: 581 | Input/Output: [[-11.327948665475134 -38] -49.327948665475134]
Test Case: 582 | Input/Output: [[77.28450145448724 60] 137.28450145448724]
Test Case: 583 | Input/Output: [[-61.359986722217165 -83] -144.35998672221717]
Test Case: 584 | Input/Output: [[-49.66612332651679 4] -45.66612332651679]
Test Case: 585 | Input/Output: [[-64.02563938946075 62] -2.02563938946075]
Test Case: 586 | Input/Output: [[-5.47548809803628 65] 59.52451190196372]
Test Case: 587 | Input/Output: [[79.23239141886887 -69] 10.232391418868872]
Test Case: 588 | Input/Output: [[-78.22750823663311 -47] -125.22750823663311]
Test Case: 589 | Input/Output: [[45.48162704371387 28] 73.48162704371387]
Test Case: 590 | Input/Output: [[-85.00592911826656 -5] -90.00592911826656]
Test Case: 591 | Input/Output: [[0.24833380169262398 51] 51.248333801692624]
Test Case: 592 | Input/Output: [[17.871221307192428 69] 86.87122130719243]
Test Case: 593 | Input/Output: [[-98.50394553485624 50] -48.50394553485624]
Test Case: 594 | Input/Output: [[-5.8746531646629165 18] 12.125346835337083]
Test Case: 595 | Input/Output: [[11.498823549703374 16] 27.498823549703374]
Test Case: 596 | Input/Output: [[-47.64503064872516 31] -16.64503064872516]
Test Case: 597 | Input/Output: [[60.116122667227046 48] 108.11612266722705]
Test Case: 598 | Input/Output: [[83.95858068796394 -1] 82.95858068796394]
Test Case: 599 | Input/Output: [[-36.82426666243397 -14] -50.82426666243397]
Test Case: 600 | Input/Output: [[85.91165268909705 35] 120.91165268909705]
Test Case: 601 | Input/Output: [[-42.96701197534032 42] -0.9670119753403199]
Test Case: 602 | Input/Output: [[-0.8281263172141564 -27] -27.828126317214156]
Test Case: 603 | Input/Output: [[34.32894728076124 -50] -15.671052719238759]
Test Case: 604 | Input/Output: [[-41.53838705038342 -38] -79.53838705038342]
Test Case: 605 | Input/Output: [[-24.209850650143693 76] 51.79014934985631]
Test Case: 606 | Input/Output: [[98.39875310135636 -39] 59.39875310135636]
Test Case: 607 | Input/Output: [[53.15448445774754 12] 65.15448445774754]
Test Case: 608 | Input/Output: [[-87.7864906561039 19] -68.7864906561039]
Test Case: 609 | Input/Output: [[18.084729294713853 -61] -42.91527070528615]
Test Case: 610 | Input/Output: [[23.65163633326239 -1] 22.65163633326239]
Test Case: 611 | Input/Output: [[53.53728081156663 -75] -21.46271918843337]
Test Case: 612 | Input/Output: [[70.99879262865218 -99] -28.001207371347817]
Test Case: 613 | Input/Output: [[46.93806863889682 74] 120.93806863889682]
Test Case: 614 | Input/Output: [[-70.63707265959032 49] -21.637072659590316]
Test Case: 615 | Input/Output: [[-62.638297460122175 82] 19.361702539877825]
Test Case: 616 | Input/Output: [[6.455309059593077 -25] -18.544690940406923]
Test Case: 617 | Input/Output: [[64.65525389251309 -95] -30.344746107486912]
Test Case: 618 | Input/Output: [[52.89503390368054 88] 140.89503390368054]
Test Case: 619 | Input/Output: [[-7.962067782317561 75] 67.03793221768244]
Test Case: 620 | Input/Output: [[86.2641694126948 80] 166.2641694126948]
Test Case: 621 | Input/Output: [[-11.361863889540729 4] -7.361863889540729]
Test Case: 622 | Input/Output: [[-95.1503446870001 -71] -166.15034468700009]
Test Case: 623 | Input/Output: [[-15.143187250233296 26] 10.856812749766704]
Test Case: 624 | Input/Output: [[-96.78557927350491 -35] -131.7855792735049]
Test Case: 625 | Input/Output: [[78.28923689142252 -69] 9.289236891422519]
Test Case: 626 | Input/Output: [[-97.57480064448305 -29] -126.57480064448305]
Test Case: 627 | Input/Output: [[11.917983573923891 51] 62.91798357392389]
Test Case: 628 | Input/Output: [[4.104084992747488 68] 72.10408499274749]
Test Case: 629 | Input/Output: [[-94.5354529565415 -90] -184.53545295654152]
Test Case: 630 | Input/Output: [[-90.00008647710003 29] -61.00008647710003]
Test Case: 631 | Input/Output: [[25.217496589239687 48] 73.21749658923969]
Test Case: 632 | Input/Output: [[-27.739785878388304 55] 27.260214121611696]
Test Case: 633 | Input/Output: [[40.2202711728477 -68] -27.779728827152297]
Test Case: 634 | Input/Output: [[24.767936615482 50] 74.767936615482]
Test Case: 635 | Input/Output: [[-53.88989302270981 81] 27.110106977290187]
Test Case: 636 | Input/Output: [[71.07752566616335 -12] 59.07752566616335]
Test Case: 637 | Input/Output: [[-20.978248107878827 -74] -94.97824810787883]
Test Case: 638 | Input/Output: [[-1.8501285635045974 91] 89.1498714364954]
Test Case: 639 | Input/Output: [[34.404776817854014 -24] 10.404776817854014]
Test Case: 640 | Input/Output: [[17.36379431017943 69] 86.36379431017943]
Test Case: 641 | Input/Output: [[40.3304811825883 31] 71.3304811825883]
Test Case: 642 | Input/Output: [[48.73916915865735 -59] -10.260830841342653]
Test Case: 643 | Input/Output: [[48.54098952222773 21] 69.54098952222773]
Test Case: 644 | Input/Output: [[-8.126449365169776 -3] -11.126449365169776]
Test Case: 645 | Input/Output: [[61.008905545608485 42] 103.00890554560848]
Test Case: 646 | Input/Output: [[-52.5734365964071 -76] -128.5734365964071]
Test Case: 647 | Input/Output: [[-79.83602325587603 67] -12.836023255876029]
Test Case: 648 | Input/Output: [[60.55186589240583 67] 127.55186589240583]
Test Case: 649 | Input/Output: [[-62.296512984006604 -56] -118.2965129840066]
Test Case: 650 | Input/Output: [[-57.26074990967995 -34] -91.26074990967996]
Test Case: 651 | Input/Output: [[44.850211238451124 69] 113.85021123845112]
Test Case: 652 | Input/Output: [[21.96727712361337 -81] -59.03272287638663]
Test Case: 653 | Input/Output: [[88.27030959277283 25] 113.27030959277283]
Test Case: 654 | Input/Output: [[-49.141542381196125 -2] -51.141542381196125]
Test Case: 655 | Input/Output: [[80.4372307268745 -81] -0.5627692731254967]
Test Case: 656 | Input/Output: [[-84.79008253421263 -8] -92.79008253421263]
Test Case: 657 | Input/Output: [[75.39056982050707 49] 124.39056982050707]
Test Case: 658 | Input/Output: [[-79.57896915976612 -54] -133.57896915976613]
Test Case: 659 | Input/Output: [[-58.2929474676352 -34] -92.2929474676352]
Test Case: 660 | Input/Output: [[99.60363981290078 77] 176.60363981290078]
Test Case: 661 | Input/Output: [[50.82253229902366 -6] 44.82253229902366]
Test Case: 662 | Input/Output: [[79.14026452703973 -68] 11.140264527039733]
Test Case: 663 | Input/Output: [[19.72879052242702 73] 92.72879052242702]
Test Case: 664 | Input/Output: [[98.04058509278016 18] 116.04058509278016]
Test Case: 665 | Input/Output: [[-93.85591543575028 34] -59.855915435750276]
Test Case: 666 | Input/Output: [[-83.02203046362604 -7] -90.02203046362604]
Test Case: 667 | Input/Output: [[-99.59420679649273 82] -17.594206796492728]
Test Case: 668 | Input/Output: [[-48.83720206487292 38] -10.837202064872919]
Test Case: 669 | Input/Output: [[-99.67900572065898 -36] -135.67900572065898]
Test Case: 670 | Input/Output: [[-25.570063213820916 -28] -53.570063213820916]
Test Case: 671 | Input/Output: [[-49.556654965873626 -38] -87.55665496587363]
Test Case: 672 | Input/Output: [[33.895255285000104 35] 68.8952552850001]
Test Case: 673 | Input/Output: [[79.08477039247194 34] 113.08477039247194]
Test Case: 674 | Input/Output: [[12.139729719062203 94] 106.1397297190622]
Test Case: 675 | Input/Output: [[-74.09987789624464 83] 8.900122103755365]
Test Case: 676 | Input/Output: [[89.35421482582674 78] 167.35421482582674]
Test Case: 677 | Input/Output: [[-9.169599930624457 -24] -33.16959993062446]
Test Case: 678 | Input/Output: [[-21.04257602095825 74] 52.95742397904175]
Test Case: 679 | Input/Output: [[-9.359012086890672 80] 70.64098791310933]
Test Case: 680 | Input/Output: [[-72.06770301170444 12] -60.06770301170444]
Test Case: 681 | Input/Output: [[-43.06958774567919 -98] -141.0695877456792]
Test Case: 682 | Input/Output: [[63.2811523160382 -3] 60.2811523160382]
Test Case: 683 | Input/Output: [[-15.75176871941693 -69] -84.75176871941693]
Test Case: 684 | Input/Output: [[62.75859713879214 -78] -15.24140286120786]
Test Case: 685 | Input/Output: [[-32.74730305327344 -50] -82.74730305327344]
Test Case: 686 | Input/Output: [[89.75346184012076 56] 145.75346184012076]
Test Case: 687 | Input/Output: [[-35.60345663209148 -71] -106.60345663209148]
Test Case: 688 | Input/Output: [[54.110660675774795 -45] 9.110660675774795]
Test Case: 689 | Input/Output: [[71.79114784144119 98] 169.7911478414412]
Test Case: 690 | Input/Output: [[-3.6708520819510966 6] 2.3291479180489034]
Test Case: 691 | Input/Output: [[-86.14742515288253 29] -57.14742515288253]
Test Case: 692 | Input/Output: [[-63.66514215927506 3] -60.66514215927506]
Test Case: 693 | Input/Output: [[82.92616530819643 54] 136.92616530819643]
Test Case: 694 | Input/Output: [[-42.838229272976406 -18] -60.838229272976406]
Test Case: 695 | Input/Output: [[-14.261251551238672 1] -13.261251551238672]
Test Case: 696 | Input/Output: [[-55.62508662555745 15] -40.62508662555745]
Test Case: 697 | Input/Output: [[-27.932445038724055 -10] -37.932445038724055]
Test Case: 698 | Input/Output: [[-61.226385167513286 -86] -147.22638516751329]
Test Case: 699 | Input/Output: [[41.95260323821188 -83] -41.04739676178812]
Test Case: 700 | Input/Output: [[98.0052416279085 -27] 71.0052416279085]
Test Case: 701 | Input/Output: [[-63.5326342282561 -64] -127.5326342282561]
Test Case: 702 | Input/Output: [[14.663900636717656 0] 14.663900636717656]
Test Case: 703 | Input/Output: [[-18.260134976326725 -25] -43.260134976326725]
Test Case: 704 | Input/Output: [[-96.6343727482684 78] -18.634372748268405]
Test Case: 705 | Input/Output: [[7.347233698030408 -73] -65.65276630196959]
Test Case: 706 | Input/Output: [[20.977304818712767 15] 35.97730481871277]
Test Case: 707 | Input/Output: [[49.320469610028084 -16] 33.320469610028084]
Test Case: 708 | Input/Output: [[2.767084600540585 20] 22.767084600540585]
Test Case: 709 | Input/Output: [[10.321705079801518 11] 21.321705079801518]
Test Case: 710 | Input/Output: [[19.811219558241206 35] 54.811219558241206]
Test Case: 711 | Input/Output: [[82.50438459558015 10] 92.50438459558015]
Test Case: 712 | Input/Output: [[-88.31658738910275 47] -41.31658738910275]
Test Case: 713 | Input/Output: [[73.54210815391761 -89] -15.45789184608239]
Test Case: 714 | Input/Output: [[77.06642890093792 45] 122.06642890093792]
Test Case: 715 | Input/Output: [[-65.6662245924561 -22] -87.6662245924561]
Test Case: 716 | Input/Output: [[26.057812264024875 40] 66.05781226402488]
Test Case: 717 | Input/Output: [[26.576471618789554 83] 109.57647161878955]
Test Case: 718 | Input/Output: [[-38.23684755605192 -99] -137.2368475560519]
Test Case: 719 | Input/Output: [[15.846625873227566 6] 21.846625873227566]
Test Case: 720 | Input/Output: [[91.89099470596699 -3] 88.89099470596699]
Test Case: 721 | Input/Output: [[85.15325425218049 86] 171.1532542521805]
Test Case: 722 | Input/Output: [[-84.93278567865887 -38] -122.93278567865887]
Test Case: 723 | Input/Output: [[-97.93953385156313 62] -35.93953385156313]
Test Case: 724 | Input/Output: [[22.0609203090673 -60] -37.9390796909327]
Test Case: 725 | Input/Output: [[95.86337625389166 -11] 84.86337625389166]
Test Case: 726 | Input/Output: [[31.546864901055244 36] 67.54686490105524]
Test Case: 727 | Input/Output: [[-36.268711105496344 -13] -49.268711105496344]
Test Case: 728 | Input/Output: [[-41.2639446330479 -89] -130.2639446330479]
Test Case: 729 | Input/Output: [[94.41523395482508 -14] 80.41523395482508]
Test Case: 730 | Input/Output: [[78.46569628964969 -58] 20.465696289649685]
Test Case: 731 | Input/Output: [[-50.26186552246552 74] 23.73813447753448]
Test Case: 732 | Input/Output: [[-22.629409485300528 83] 60.37059051469947]
Test Case: 733 | Input/Output: [[-46.877026858791915 -48] -94.87702685879191]
Test Case: 734 | Input/Output: [[74.02617864684697 -59] 15.026178646846972]
Test Case: 735 | Input/Output: [[-92.32523356565407 96] 3.6747664343459263]
Test Case: 736 | Input/Output: [[-68.78820700422551 -35] -103.78820700422551]
Test Case: 737 | Input/Output: [[60.53069381317053 75] 135.53069381317053]
Test Case: 738 | Input/Output: [[-12.272347049602132 71] 58.72765295039787]
Test Case: 739 | Input/Output: [[-65.3328824432534 -80] -145.3328824432534]
Test Case: 740 | Input/Output: [[6.24015998561984 16] 22.24015998561984]
Test Case: 741 | Input/Output: [[26.478474484644025 -4] 22.478474484644025]
Test Case: 742 | Input/Output: [[75.35988795910711 -45] 30.359887959107112]
Test Case: 743 | Input/Output: [[19.428181070693995 -83] -63.571818929306005]
Test Case: 744 | Input/Output: [[94.2430268774205 28] 122.2430268774205]
Test Case: 745 | Input/Output: [[98.23740993658114 -48] 50.237409936581145]
Test Case: 746 | Input/Output: [[-33.11627409406121 63] 29.88372590593879]
Test Case: 747 | Input/Output: [[56.501365253292846 -30] 26.501365253292846]
Test Case: 748 | Input/Output: [[-79.99030157562134 -9] -88.99030157562134]
Test Case: 749 | Input/Output: [[32.88805440427177 91] 123.88805440427177]
Test Case: 750 | Input/Output: [[-67.68214591202826 -73] -140.68214591202826]
Test Case: 751 | Input/Output: [[-13.555749460567569 58] 44.44425053943243]
Test Case: 752 | Input/Output: [[17.492602343308846 -9] 8.492602343308846]
Test Case: 753 | Input/Output: [[84.72690644628622 7] 91.72690644628622]
Test Case: 754 | Input/Output: [[29.509163174025616 16] 45.509163174025616]
Test Case: 755 | Input/Output: [[-72.22525652046099 -2] -74.22525652046099]
Test Case: 756 | Input/Output: [[23.47211699893718 60] 83.47211699893718]
Test Case: 757 | Input/Output: [[-18.704740315908026 45] 26.295259684091974]
Test Case: 758 | Input/Output: [[97.73187144722431 56] 153.7318714472243]
Test Case: 759 | Input/Output: [[-86.40011517539325 31] -55.40011517539325]
Test Case: 760 | Input/Output: [[7.460620264982751 48] 55.46062026498275]
Test Case: 761 | Input/Output: [[42.24924810946206 4] 46.24924810946206]
Test Case: 762 | Input/Output: [[-52.65136357040356 -98] -150.65136357040356]
Test Case: 763 | Input/Output: [[67.06524106684813 81] 148.06524106684813]
Test Case: 764 | Input/Output: [[87.78644724229366 16] 103.78644724229366]
Test Case: 765 | Input/Output: [[37.73067164425737 20] 57.73067164425737]
Test Case: 766 | Input/Output: [[-34.536178474276994 26] -8.536178474276994]
Test Case: 767 | Input/Output: [[-85.97445317527202 96] 10.025546824727982]
Test Case: 768 | Input/Output: [[84.77796816060484 54] 138.77796816060484]
Test Case: 769 | Input/Output: [[-24.96766570219384 -66] -90.96766570219384]
Test Case: 770 | Input/Output: [[28.195690494072863 -67] -38.80430950592714]
Test Case: 771 | Input/Output: [[-10.44928996907069 15] 4.550710030929309]
Test Case: 772 | Input/Output: [[-32.92642960704232 42] 9.073570392957677]
Test Case: 773 | Input/Output: [[-76.85283867062921 -20] -96.85283867062921]
Test Case: 774 | Input/Output: [[6.647443762724507 -99] -92.3525562372755]
Test Case: 775 | Input/Output: [[-35.80747894765206 -73] -108.80747894765206]
Test Case: 776 | Input/Output: [[-76.48227097694186 93] 16.517729023058138]
Test Case: 777 | Input/Output: [[-45.37155450184463 -9] -54.37155450184463]
Test Case: 778 | Input/Output: [[51.10884242652952 48] 99.10884242652952]
Test Case: 779 | Input/Output: [[-70.11907535788188 -49] -119.11907535788188]
Test Case: 780 | Input/Output: [[29.749160732663853 100] 129.74916073266385]
Test Case: 781 | Input/Output: [[-44.33797600848002 -50] -94.33797600848001]
Test Case: 782 | Input/Output: [[-7.288262060358647 -32] -39.28826206035865]
Test Case: 783 | Input/Output: [[10.823415641723756 70] 80.82341564172376]
Test Case: 784 | Input/Output: [[58.664682205953284 -8] 50.664682205953284]
Test Case: 785 | Input/Output: [[-47.50856478082037 -99] -146.50856478082036]
Test Case: 786 | Input/Output: [[40.022686594717584 14] 54.022686594717584]
Test Case: 787 | Input/Output: [[-71.0531369447516 81] 9.9468630552484]
Test Case: 788 | Input/Output: [[-6.762286194373161 -30] -36.76228619437316]
Test Case: 789 | Input/Output: [[75.71367030746873 -66] 9.713670307468732]
Test Case: 790 | Input/Output: [[98.47722908644471 -77] 21.47722908644471]
Test Case: 791 | Input/Output: [[22.540280820665643 -31] -8.459719179334357]
Test Case: 792 | Input/Output: [[3.8102322676621725 -26] -22.189767732337828]
Test Case: 793 | Input/Output: [[-45.9857501129735 -60] -105.9857501129735]
Test Case: 794 | Input/Output: [[59.63604356777819 25] 84.63604356777819]
Test Case: 795 | Input/Output: [[-30.47769755446356 -45] -75.47769755446356]
Test Case: 796 | Input/Output: [[88.08471123884806 74] 162.08471123884806]
Test Case: 797 | Input/Output: [[-79.4276802595617 -17] -96.4276802595617]
Test Case: 798 | Input/Output: [[-35.66058218894868 -94] -129.6605821889487]
Test Case: 799 | Input/Output: [[49.52966762876355 -35] 14.529667628763548]
Test Case: 800 | Input/Output: [[-98.70368362380772 -56] -154.7036836238077]
Test Case: 801 | Input/Output: [[-47.68041346101508 -60] -107.68041346101508]
Test Case: 802 | Input/Output: [[-94.1360268784414 6] -88.1360268784414]
Test Case: 803 | Input/Output: [[12.99074753562283 -44] -31.00925246437717]
Test Case: 804 | Input/Output: [[-34.80228747126529 -51] -85.80228747126529]
Test Case: 805 | Input/Output: [[33.70624325200106 -87] -53.29375674799894]
Test Case: 806 | Input/Output: [[15.90197389804895 -79] -63.09802610195105]
Test Case: 807 | Input/Output: [[18.145926208207868 10] 28.145926208207868]
Test Case: 808 | Input/Output: [[-16.18638402750186 -56] -72.18638402750186]
Test Case: 809 | Input/Output: [[82.70719767722682 -17] 65.70719767722682]
Test Case: 810 | Input/Output: [[-88.39946452265266 86] -2.3994645226526643]
Test Case: 811 | Input/Output: [[56.85421148761816 73] 129.85421148761816]
Test Case: 812 | Input/Output: [[-40.14373677707705 10] -30.143736777077052]
Test Case: 813 | Input/Output: [[-5.658484953687719 -54] -59.65848495368772]
Test Case: 814 | Input/Output: [[-95.5710456853694 -4] -99.5710456853694]
Test Case: 815 | Input/Output: [[61.59866201217892 -22] 39.59866201217892]
Test Case: 816 | Input/Output: [[77.75268355453869 48] 125.75268355453869]
Test Case: 817 | Input/Output: [[47.02664157173396 -53] -5.973358428266039]
Test Case: 818 | Input/Output: [[72.43055463722533 -63] 9.430554637225327]
Test Case: 819 | Input/Output: [[3.789553443361271 57] 60.78955344336127]
Test Case: 820 | Input/Output: [[34.39330616325563 -39] -4.60669383674437]
Test Case: 821 | Input/Output: [[-90.63722292946188 79] -11.637222929461885]
Test Case: 822 | Input/Output: [[-95.5500355063293 72] -23.550035506329294]
Test Case: 823 | Input/Output: [[-81.15197944095021 -2] -83.15197944095021]
Test Case: 824 | Input/Output: [[91.89018118727401 12] 103.89018118727401]
Test Case: 825 | Input/Output: [[-64.7563666015883 -14] -78.7563666015883]
Test Case: 826 | Input/Output: [[-28.987130049079184 -99] -127.98713004907918]
Test Case: 827 | Input/Output: [[36.150759431636004 -82] -45.849240568363996]
Test Case: 828 | Input/Output: [[5.077831687173415 -4] 1.0778316871734148]
Test Case: 829 | Input/Output: [[85.64235210624051 -95] -9.357647893759491]
Test Case: 830 | Input/Output: [[94.51745070537072 -81] 13.51745070537072]
Test Case: 831 | Input/Output: [[31.82582288448316 -55] -23.17417711551684]
Test Case: 832 | Input/Output: [[-59.28448417922836 4] -55.28448417922836]
Test Case: 833 | Input/Output: [[8.027381476937961 -46] -37.97261852306204]
Test Case: 834 | Input/Output: [[-19.14517915208502 -89] -108.14517915208502]
Test Case: 835 | Input/Output: [[-80.98761507695107 -98] -178.98761507695107]
Test Case: 836 | Input/Output: [[-41.3570458589605 -38] -79.3570458589605]
Test Case: 837 | Input/Output: [[26.392498202534085 -24] 2.3924982025340853]
Test Case: 838 | Input/Output: [[69.97667944438507 -87] -17.02332055561493]
Test Case: 839 | Input/Output: [[-30.27551274050208 64] 33.72448725949792]
Test Case: 840 | Input/Output: [[-87.5198358521697 60] -27.519835852169706]
Test Case: 841 | Input/Output: [[82.87077317444715 -77] 5.870773174447152]
Test Case: 842 | Input/Output: [[43.53377840730238 -37] 6.533778407302378]
Test Case: 843 | Input/Output: [[-8.953965256166427 -65] -73.95396525616643]
Test Case: 844 | Input/Output: [[-7.565613339258007 -21] -28.565613339258007]
Test Case: 845 | Input/Output: [[-11.121483063806465 -61] -72.12148306380647]
Test Case: 846 | Input/Output: [[-36.07174388096273 -14] -50.07174388096273]
Test Case: 847 | Input/Output: [[39.444690466489305 18] 57.444690466489305]
Test Case: 848 | Input/Output: [[-85.07535906463188 -67] -152.07535906463187]
Test Case: 849 | Input/Output: [[30.1514766675146 12] 42.1514766675146]
Test Case: 850 | Input/Output: [[-10.209475542754532 75] 64.79052445724547]
Test Case: 851 | Input/Output: [[40.33489851839485 97] 137.33489851839485]
Test Case: 852 | Input/Output: [[6.267045949266333 83] 89.26704594926633]
Test Case: 853 | Input/Output: [[79.74376252010381 48] 127.74376252010381]
Test Case: 854 | Input/Output: [[19.351785763926287 68] 87.35178576392629]
Test Case: 855 | Input/Output: [[-38.84044619160252 62] 23.159553808397483]
Test Case: 856 | Input/Output: [[-44.95109116814162 -66] -110.95109116814163]
Test Case: 857 | Input/Output: [[82.27839885255423 -59] 23.278398852554233]
Test Case: 858 | Input/Output: [[-92.9095021550788 -28] -120.9095021550788]
Test Case: 859 | Input/Output: [[51.799346423086945 -100] -48.200653576913055]
Test Case: 860 | Input/Output: [[5.595685311853572 -32] -26.404314688146428]
Test Case: 861 | Input/Output: [[-45.243946620862154 74] 28.756053379137846]
Test Case: 862 | Input/Output: [[-29.647387198126424 20] -9.647387198126424]
Test Case: 863 | Input/Output: [[-33.62451915253659 43] 9.375480847463407]
Test Case: 864 | Input/Output: [[61.896771603779996 -14] 47.896771603779996]
Test Case: 865 | Input/Output: [[-33.3147007695561 -79] -112.3147007695561]
Test Case: 866 | Input/Output: [[-23.80008062573134 -94] -117.80008062573134]
Test Case: 867 | Input/Output: [[-75.46652902640463 1] -74.46652902640463]
Test Case: 868 | Input/Output: [[-79.01278387048932 63] -16.012783870489315]
Test Case: 869 | Input/Output: [[45.97709073568842 -66] -20.02290926431158]
Test Case: 870 | Input/Output: [[24.89680018978129 -83] -58.10319981021871]
Test Case: 871 | Input/Output: [[-57.62449550237185 -43] -100.62449550237184]
Test Case: 872 | Input/Output: [[39.08606168883682 28] 67.08606168883682]
Test Case: 873 | Input/Output: [[-30.930738052187692 -91] -121.93073805218769]
Test Case: 874 | Input/Output: [[-45.08474410676513 -60] -105.08474410676513]
Test Case: 875 | Input/Output: [[2.5577727149960197 47] 49.55777271499602]
Test Case: 876 | Input/Output: [[-8.272441906744632 -69] -77.27244190674463]
Test Case: 877 | Input/Output: [[-12.996997955860849 17] 4.003002044139151]
Test Case: 878 | Input/Output: [[25.017632628381946 89] 114.01763262838195]
Test Case: 879 | Input/Output: [[41.849111902033286 82] 123.84911190203329]
Test Case: 880 | Input/Output: [[72.05738573100493 -71] 1.0573857310049277]
Test Case: 881 | Input/Output: [[2.0523511878278953 76] 78.0523511878279]
Test Case: 882 | Input/Output: [[63.66312725434537 74] 137.66312725434537]
Test Case: 883 | Input/Output: [[6.593437101394528 26] 32.59343710139453]
Test Case: 884 | Input/Output: [[33.36987850270529 72] 105.36987850270529]
Test Case: 885 | Input/Output: [[-29.3023247484862 60] 30.6976752515138]
Test Case: 886 | Input/Output: [[30.428881145521302 53] 83.4288811455213]
Test Case: 887 | Input/Output: [[20.992107098272797 4] 24.992107098272797]
Test Case: 888 | Input/Output: [[-86.19493252335002 30] -56.19493252335002]
Test Case: 889 | Input/Output: [[-58.168251985042964 96] 37.831748014957036]
Test Case: 890 | Input/Output: [[-85.58295968418574 35] -50.58295968418574]
Test Case: 891 | Input/Output: [[-13.161149619838298 19] 5.838850380161702]
Test Case: 892 | Input/Output: [[46.890357688867766 -35] 11.890357688867766]
Test Case: 893 | Input/Output: [[98.38692206940911 75] 173.3869220694091]
Test Case: 894 | Input/Output: [[-72.15962517058577 -21] -93.15962517058577]
Test Case: 895 | Input/Output: [[67.95330496399512 41] 108.95330496399512]
Test Case: 896 | Input/Output: [[48.785664583937944 -67] -18.214335416062056]
Test Case: 897 | Input/Output: [[-20.663905811580705 -33] -53.663905811580705]
Test Case: 898 | Input/Output: [[-99.15730836769883 7] -92.15730836769883]
Test Case: 899 | Input/Output: [[88.05427014541053 96] 184.05427014541053]
Test Case: 900 | Input/Output: [[17.786156200990717 -41] -23.213843799009283]
Test Case: 901 | Input/Output: [[-20.02686124522141 -18] -38.02686124522141]
Test Case: 902 | Input/Output: [[36.88873924626773 99] 135.88873924626773]
Test Case: 903 | Input/Output: [[-53.78642870916601 -26] -79.78642870916602]
Test Case: 904 | Input/Output: [[64.74466156441324 33] 97.74466156441324]
Test Case: 905 | Input/Output: [[59.519352510147 -84] -24.480647489853]
Test Case: 906 | Input/Output: [[9.81963218139417 65] 74.81963218139417]
Test Case: 907 | Input/Output: [[-68.2795745446996 -98] -166.27957454469959]
Test Case: 908 | Input/Output: [[28.867302065063882 -94] -65.13269793493612]
Test Case: 909 | Input/Output: [[41.39661019608832 -11] 30.396610196088318]
Test Case: 910 | Input/Output: [[64.73038962014601 54] 118.73038962014601]
Test Case: 911 | Input/Output: [[48.07069211043614 -5] 43.07069211043614]
Test Case: 912 | Input/Output: [[81.32452033767211 -24] 57.32452033767211]
Test Case: 913 | Input/Output: [[47.064383585484734 -59] -11.935616414515266]
Test Case: 914 | Input/Output: [[10.324577040802566 -85] -74.67542295919743]
Test Case: 915 | Input/Output: [[69.64436929806294 -14] 55.64436929806294]
Test Case: 916 | Input/Output: [[-2.99495438798634 -28] -30.99495438798634]
Test Case: 917 | Input/Output: [[55.351543861753015 -43] 12.351543861753015]
Test Case: 918 | Input/Output: [[94.73819734869568 55] 149.73819734869568]
Test Case: 919 | Input/Output: [[25.15070103690877 -65] -39.84929896309123]
Test Case: 920 | Input/Output: [[6.477987561569165 34] 40.477987561569165]
Test Case: 921 | Input/Output: [[-46.62356460134196 51] 4.376435398658039]
Test Case: 922 | Input/Output: [[-13.970573340876939 -90] -103.97057334087694]
Test Case: 923 | Input/Output: [[34.68870307975763 -9] 25.68870307975763]
Test Case: 924 | Input/Output: [[62.93551044976499 -44] 18.93551044976499]
Test Case: 925 | Input/Output: [[-39.516943542901714 40] 0.4830564570982858]
Test Case: 926 | Input/Output: [[-86.72535385662272 -42] -128.72535385662272]
Test Case: 927 | Input/Output: [[81.29031092969973 -2] 79.29031092969973]
Test Case: 928 | Input/Output: [[-40.00398217911669 87] 46.99601782088331]
Test Case: 929 | Input/Output: [[-79.56487693494066 -98] -177.56487693494066]
Test Case: 930 | Input/Output: [[59.93492288628374 -37] 22.934922886283744]
Test Case: 931 | Input/Output: [[77.94506598674457 12] 89.94506598674457]
Test Case: 932 | Input/Output: [[-30.118351011507144 26] -4.118351011507144]
Test Case: 933 | Input/Output: [[90.14645378264879 -59] 31.14645378264879]
Test Case: 934 | Input/Output: [[-18.742936389518434 63] 44.257063610481566]
Test Case: 935 | Input/Output: [[58.90722146430596 -57] 1.9072214643059624]
Test Case: 936 | Input/Output: [[-7.561256429152195 23] 15.438743570847805]
Test Case: 937 | Input/Output: [[-40.57413439663249 -20] -60.57413439663249]
Test Case: 938 | Input/Output: [[-15.217969849123222 17] 1.7820301508767784]
Test Case: 939 | Input/Output: [[32.33069726672528 7] 39.33069726672528]
Test Case: 940 | Input/Output: [[34.04157927051173 62] 96.04157927051173]
Test Case: 941 | Input/Output: [[19.18992633733336 6] 25.18992633733336]
Test Case: 942 | Input/Output: [[96.26514790894169 -94] 2.2651479089416853]
Test Case: 943 | Input/Output: [[-98.8318482140961 -69] -167.8318482140961]
Test Case: 944 | Input/Output: [[-41.024218843294015 -64] -105.02421884329402]
Test Case: 945 | Input/Output: [[-96.89981351558161 -59] -155.89981351558163]
Test Case: 946 | Input/Output: [[84.56470081207499 -94] -9.435299187925011]
Test Case: 947 | Input/Output: [[-57.427180385359165 2] -55.427180385359165]
Test Case: 948 | Input/Output: [[-77.62106814548302 86] 8.378931854516978]
Test Case: 949 | Input/Output: [[29.883204183763098 -30] -0.11679581623690183]
Test Case: 950 | Input/Output: [[62.75867676322159 97] 159.7586767632216]
Test Case: 951 | Input/Output: [[98.76995114983629 12] 110.76995114983629]
Test Case: 952 | Input/Output: [[-53.99485940765092 -97] -150.99485940765092]
Test Case: 953 | Input/Output: [[-75.11745061982148 54] -21.117450619821483]
Test Case: 954 | Input/Output: [[65.56182113020887 81] 146.56182113020887]
Test Case: 955 | Input/Output: [[26.819887136557924 -94] -67.18011286344208]
Test Case: 956 | Input/Output: [[-70.80425583363655 9] -61.804255833636546]
Test Case: 957 | Input/Output: [[-56.40238747708348 70] 13.59761252291652]
Test Case: 958 | Input/Output: [[-32.66944753900421 15] -17.66944753900421]
Test Case: 959 | Input/Output: [[52.256480997395045 -89] -36.743519002604955]
Test Case: 960 | Input/Output: [[-17.6407901998747 -26] -43.6407901998747]
Test Case: 961 | Input/Output: [[40.76186374662694 75] 115.76186374662694]
Test Case: 962 | Input/Output: [[-28.83979595116996 -77] -105.83979595116996]
Test Case: 963 | Input/Output: [[44.57001500517387 -27] 17.57001500517387]
Test Case: 964 | Input/Output: [[22.272848569535327 -46] -23.727151430464673]
Test Case: 965 | Input/Output: [[4.435078994755145 4] 8.435078994755145]
Test Case: 966 | Input/Output: [[-6.402358058914672 -92] -98.40235805891467]
Test Case: 967 | Input/Output: [[7.229261873856373 -75] -67.77073812614363]
Test Case: 968 | Input/Output: [[23.49758388112795 -37] -13.502416118872048]
Test Case: 969 | Input/Output: [[35.25086945889876 -53] -17.749130541101238]
Test Case: 970 | Input/Output: [[89.98366443440503 -49] 40.98366443440503]
Test Case: 971 | Input/Output: [[54.559068281400044 -18] 36.559068281400044]
Test Case: 972 | Input/Output: [[36.534297389952 -19] 17.534297389952002]
Test Case: 973 | Input/Output: [[-39.74519651981705 -93] -132.74519651981706]
Test Case: 974 | Input/Output: [[-49.34925623396707 74] 24.65074376603293]
Test Case: 975 | Input/Output: [[-28.51299953794559 -38] -66.51299953794559]
Test Case: 976 | Input/Output: [[62.74495055914596 -5] 57.74495055914596]
Test Case: 977 | Input/Output: [[0.7086742650060245 -40] -39.291325734993976]
Test Case: 978 | Input/Output: [[3.7303410057721607 -75] -71.26965899422784]
Test Case: 979 | Input/Output: [[12.49237471612031 -89] -76.50762528387969]
Test Case: 980 | Input/Output: [[23.9081012111358 82] 105.9081012111358]
Test Case: 981 | Input/Output: [[-32.06080645827673 -69] -101.06080645827673]
Test Case: 982 | Input/Output: [[-30.28416689593905 -48] -78.28416689593905]
Test Case: 983 | Input/Output: [[-69.8847883066058 -89] -158.8847883066058]
Test Case: 984 | Input/Output: [[44.72078461995585 76] 120.72078461995585]
Test Case: 985 | Input/Output: [[10.16728207897188 81] 91.16728207897188]
Test Case: 986 | Input/Output: [[23.598818019983142 20] 43.59881801998314]
Test Case: 987 | Input/Output: [[-56.82128884598529 -80] -136.8212888459853]
Test Case: 988 | Input/Output: [[-99.48426703581758 -76] -175.4842670358176]
Test Case: 989 | Input/Output: [[-66.44881177662188 24] -42.44881177662188]
Test Case: 990 | Input/Output: [[17.46298844016438 33] 50.46298844016438]
Test Case: 991 | Input/Output: [[-16.281581784327187 32] 15.718418215672813]
Test Case: 992 | Input/Output: [[-50.03707756589395 -83] -133.03707756589395]
Test Case: 993 | Input/Output: [[-88.19170921442053 89] 0.808290785579473]
Test Case: 994 | Input/Output: [[88.19313280539464 25] 113.19313280539464]
Test Case: 995 | Input/Output: [[-16.087785855549882 27] 10.912214144450118]
Test Case: 996 | Input/Output: [[-85.75321459935577 -55] -140.75321459935577]
Test Case: 997 | Input/Output: [[-91.76820908246495 -9] -100.76820908246495]
Test Case: 998 | Input/Output: [[-91.19801869071038 80] -11.198018690710384]
Test Case: 999 | Input/Output: [[64.46772537144022 59] 123.46772537144022]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove vector_boolean_pushall zip_insert_left_fromcode exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup vector_integer_butlast vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse exec_k vector_integer_yank float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times genome_dup return_code_pop char_swap integer_max return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank zip_shove vector_integer_flush vector_integer_subvec vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean integer_min exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add code_stackdepth exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse integer_swap string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.11.1-1-SNAPSHOTHash of last Git commit = 8a64f874173fae27ed1a77827849de0fade43c2b
GitHub link = https://github.com/lspector/Clojush/commit/8a64f874173fae27ed1a77827849de0fade43c2b
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = []
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :tournament
pop-when-tagging = true
population-size = 1000
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
random-screen = false
random-seed = -9 -87 -22 -62 -6 19 4 -1 32 62 -76 23 5 40 -119 91
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Number IO problem report - generation 0
Test total error for best: 54310.0
Test mean error for best: 27.15500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 73.2889250004 
Correct output: 15.0922415815  | Program output: -40.9077584185
Correct output: -30.8202558445 | Program output: -0.8202558445 
Correct output: 70.2512965501  | Program output: 96.2512965501 
Correct output: 150.6666771001 | Program output: 72.6666771001 
Correct output: -148.0189802809 | Program output: -98.0189802809
Correct output: 91.9885288633  | Program output: 94.9885288633 
Correct output: 56.3430751406  | Program output: 2.3430751406  
Correct output: -55.2026859793 | Program output: -47.2026859793
Correct output: -31.9001885201 | Program output: 61.0998114799 
Correct output: 70.8415782878  | Program output: 66.8415782878 
Correct output: -70.0770879346 | Program output: 3.9229120654  
Correct output: 62.2573571201  | Program output: -34.7426428799
Correct output: -11.0880796195 | Program output: -1.0880796195 
Correct output: -98.0730811682 | Program output: -86.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 91.2519145493 
Correct output: -62.0820375564 | Program output: 22.9179624436 
Correct output: -85.5891975931 | Program output: -91.5891975931
Correct output: 26.7802144548  | Program output: -56.2197855452
Correct output: 1.2069497285   | Program output: 51.2069497285 
Correct output: 70.6151869811  | Program output: 27.6151869811 
Correct output: 27.2083659619  | Program output: 9.2083659619  
Correct output: 103.781099078  | Program output: 71.781099078  
Correct output: 66.4193519736  | Program output: 81.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction -83.72930746962447} {:instruction float_swap} {:instruction integer_swap} {:instruction float_frominteger} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mult} {:instruction integer_div} {:instruction print_float} {:instruction integer_max} {:instruction -9.568963984273623} {:instruction integer_div} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction in1} {:instruction integer_flush} {:instruction float_flush} {:instruction float_dup_items} {:instruction integer_mult})
Best program: (-83.72930746962447 float_swap integer_swap float_frominteger in1 float_dup_items float_dec float_yankdup integer_mult integer_div print_float integer_max -9.568963984273623 integer_div -56.50848481366526 integer_div in1 integer_flush float_flush float_dup_items integer_mult)
Errors: [19.0 2 56.0 10 30.0 1 26.0 2 78.0 3 50.0 2 3.0 1 54.0 2 8.0 2 93.0 11 4.0 2 74.0 13 97.0 13 10.0 1 12.0 2 3.0 1 82.0 1 85.0 12 6.0 2 83.0 11 50.0 1 43.0 2 18.0 2 32.0 3 15.0 2]
Total: 1135.0
Mean: 22.7
Genome size: 21
Size: 22
Percent parens: 0.045
--- Population Statistics ---
Average total errors in population: 17515.2102672
Median total errors in population: 25333.0
Error averages by case: (686.5047400000007 12.348 682.9847593000002 12.909 677.4864158000015 13.571 690.3168071000003 12.305 708.276522499998 13.169 717.8401666999965 13.914 690.454082199998 12.427 679.8089472000012 12.273 690.6612085000023 13.083 688.2512629999995 13.728 674.9567097000006 12.346 690.2313187999996 13.74 693.2442755000004 13.174 680.2629015000001 12.97 703.4518625 13.062 669.342429200001 11.692 684.4212863999994 11.651 691.5354613000004 13.73 691.8635300000007 13.153 686.5941739000001 12.999 677.9855093999992 11.619 685.0946902 12.414 673.2005332000007 12.312 694.7537828000022 12.315 686.4038905000018 12.379)
Error minima by case: (0.7111 1 0.0272 9 0.0142 1 1.7487 2 3.3333 3 27.9336 2 0.4646 1 0.1335 2 0.2027 2 0.0998 8 1.1584 2 2.4295 7 0.2574 8 0.0881 1 0.0731 2 0.0454 1 0.2519 1 0.082 8 4.0 2 0.0836 8 0.1118 1 1.3848 2 0.5117 2 3.7811 2 0.666 2)
Average genome size in population (length): 50.646
Average program size in population (points): 51.646
Average percent parens in population: 0.040
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 1
Genome diversity (% unique Plush genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.332
Error (vector) diversity:			 0.362
Behavioral diversity:				 0.379
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 1270197
--- Timings ---
Current time: 1529615054143 milliseconds
Total Time:           3.4 seconds
Initialization:       0.1 seconds,  3.5%
Reproduction:         0.6 seconds, 16.3%
Fitness Testing:      2.7 seconds, 80.1%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Number IO problem report - generation 1
Test total error for best: 54310.0
Test mean error for best: 27.15500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 73.2889250004 
Correct output: 15.0922415815  | Program output: -40.9077584185
Correct output: -30.8202558445 | Program output: -0.8202558445 
Correct output: 70.2512965501  | Program output: 96.2512965501 
Correct output: 150.6666771001 | Program output: 72.6666771001 
Correct output: -148.0189802809 | Program output: -98.0189802809
Correct output: 91.9885288633  | Program output: 94.9885288633 
Correct output: 56.3430751406  | Program output: 2.3430751406  
Correct output: -55.2026859793 | Program output: -47.2026859793
Correct output: -31.9001885201 | Program output: 61.0998114799 
Correct output: 70.8415782878  | Program output: 66.8415782878 
Correct output: -70.0770879346 | Program output: 3.9229120654  
Correct output: 62.2573571201  | Program output: -34.7426428799
Correct output: -11.0880796195 | Program output: -1.0880796195 
Correct output: -98.0730811682 | Program output: -86.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 91.2519145493 
Correct output: -62.0820375564 | Program output: 22.9179624436 
Correct output: -85.5891975931 | Program output: -91.5891975931
Correct output: 26.7802144548  | Program output: -56.2197855452
Correct output: 1.2069497285   | Program output: 51.2069497285 
Correct output: 70.6151869811  | Program output: 27.6151869811 
Correct output: 27.2083659619  | Program output: 9.2083659619  
Correct output: 103.781099078  | Program output: 71.781099078  
Correct output: 66.4193519736  | Program output: 81.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction -83.72930746962447} {:instruction float_swap} {:instruction integer_swap} {:instruction float_frominteger} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mult} {:instruction integer_div} {:instruction print_float} {:instruction integer_max} {:instruction -7.728190425315793} {:instruction integer_div} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction in1} {:instruction integer_flush} {:instruction float_flush} {:instruction float_dup_items} {:instruction integer_mult})
Best program: (-83.72930746962447 float_swap integer_swap float_frominteger in1 float_dup_items float_dec float_yankdup integer_mult integer_div print_float integer_max -7.728190425315793 integer_div -56.50848481366526 integer_div in1 integer_flush float_flush float_dup_items integer_mult)
Errors: [19.0 2 56.0 10 30.0 1 26.0 2 78.0 3 50.0 2 3.0 1 54.0 2 8.0 2 93.0 11 4.0 2 74.0 13 97.0 13 10.0 1 12.0 2 3.0 1 82.0 1 85.0 12 6.0 2 83.0 11 50.0 1 43.0 2 18.0 2 32.0 3 15.0 2]
Total: 1135.0
Mean: 22.7
Genome size: 21
Size: 22
Percent parens: 0.045
--- Population Statistics ---
Average total errors in population: 5842.318076599989
Median total errors in population: 1779.6597000000004
Error averages by case: (215.59239810000219 9.88 208.73822459999982 11.594 200.90971339999993 12.151 227.84928020000106 9.937 268.7383555000006 10.728 275.9847666999992 11.343 228.4077337000019 10.058 211.47528069999922 9.876 215.01219899999876 10.501 229.3449701 12.528 211.2388148000024 10.185 229.71930529999977 12.667 232.04820879999997 12.445 191.73306379999863 10.278 243.4773723000014 10.473 195.3860490999993 9.637 221.98935680000056 9.352 232.7413188999999 12.595 234.3774516999979 10.772 222.48627740000018 11.942 205.3479563999993 9.599 218.79732310000006 10.159 192.53383250000104 9.947 238.35972939999812 9.991 221.40009430000228 9.991)
Error minima by case: (0.7111 1 0.5636 9 0.1031 1 1.2513 2 4.3333 3 11.981 2 0.4646 1 0.1335 2 0.4667 2 0.0998 8 1.1584 2 3.9229 7 0.2574 8 0.0241 1 0.0731 2 0.0454 1 0.2519 1 0.918 8 0.8599 2 0.0836 9 1.0E-4 1 1.3848 2 0.5117 2 3.7811 2 0.666 2)
Average genome size in population (length): 54.896
Average program size in population (points): 55.896
Average percent parens in population: 0.024
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.523
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.745
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.745
Total error diversity:				 0.274
Error (vector) diversity:			 0.285
Behavioral diversity:				 0.301
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 2646877
--- Timings ---
Current time: 1529615059411 milliseconds
Total Time:           8.9 seconds
Initialization:       0.1 seconds,  1.4%
Reproduction:         4.0 seconds, 44.9%
Fitness Testing:      4.2 seconds, 48.0%
Report:               0.5 seconds,  5.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Number IO problem report - generation 2
Test total error for best: 54310.0
Test mean error for best: 27.15500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 73.2889250004 
Correct output: 15.0922415815  | Program output: -40.9077584185
Correct output: -30.8202558445 | Program output: -0.8202558445 
Correct output: 70.2512965501  | Program output: 96.2512965501 
Correct output: 150.6666771001 | Program output: 72.6666771001 
Correct output: -148.0189802809 | Program output: -98.0189802809
Correct output: 91.9885288633  | Program output: 94.9885288633 
Correct output: 56.3430751406  | Program output: 2.3430751406  
Correct output: -55.2026859793 | Program output: -47.2026859793
Correct output: -31.9001885201 | Program output: 61.0998114799 
Correct output: 70.8415782878  | Program output: 66.8415782878 
Correct output: -70.0770879346 | Program output: 3.9229120654  
Correct output: 62.2573571201  | Program output: -34.7426428799
Correct output: -11.0880796195 | Program output: -1.0880796195 
Correct output: -98.0730811682 | Program output: -86.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 91.2519145493 
Correct output: -62.0820375564 | Program output: 22.9179624436 
Correct output: -85.5891975931 | Program output: -91.5891975931
Correct output: 26.7802144548  | Program output: -56.2197855452
Correct output: 1.2069497285   | Program output: 51.2069497285 
Correct output: 70.6151869811  | Program output: 27.6151869811 
Correct output: 27.2083659619  | Program output: 9.2083659619  
Correct output: 103.781099078  | Program output: 71.781099078  
Correct output: 66.4193519736  | Program output: 81.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction integer_mult} {:instruction integer_flush} {:instruction integer_add} {:instruction integer_div} {:instruction float_tan} {:instruction float_mult} {:instruction in1} {:instruction integer_mult} {:instruction in1} {:instruction float_yank} {:instruction float_yankdup} {:instruction integer_dup_times} {:instruction print_integer} {:instruction integer_yankdup} {:instruction integer_dec} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction float_div} {:instruction tag_integer_949} {:instruction tagged_247} {:instruction float_dup} {:instruction float_shove} {:instruction integer_flush} {:instruction float_frominteger} {:instruction float_yank} {:instruction integer_dup} {:instruction float_yank} {:instruction integer_sub} {:instruction 29.133679736171842} {:instruction float_sub} {:instruction integer_add} {:instruction float_rot} {:instruction float_sub} {:instruction float_min} {:instruction 14} {:instruction float_yankdup} {:instruction float_swap} {:instruction tag_integer_202} {:instruction float_sin} {:instruction float_frominteger} {:instruction integer_dup} {:instruction float_pop} {:instruction float_swap} {:instruction float_sub} {:instruction -5} {:instruction float_dup_times} {:instruction integer_max} {:instruction float_div} {:instruction float_flush} {:instruction float_cos} {:instruction float_tan} {:instruction integer_dec} {:instruction integer_shove} {:instruction integer_pop} {:instruction tagged_586} {:instruction in1} {:instruction float_stackdepth} {:instruction float_mult} {:instruction float_swap} {:instruction float_div} {:instruction float_dec} {:instruction print_float} {:instruction integer_max} {:instruction in1} {:instruction float_yankdup} {:instruction -55.97595707003662} {:instruction float_max} {:instruction float_flush})
Best program: (float_inc integer_mult integer_flush integer_add integer_div float_tan float_mult in1 integer_mult in1 float_yank float_yankdup integer_dup_times print_integer integer_yankdup integer_dec float_stackdepth float_frominteger float_div tag_integer_949 tagged_247 float_dup float_shove integer_flush float_frominteger float_yank integer_dup float_yank integer_sub 29.133679736171842 float_sub integer_add float_rot float_sub float_min 14 float_yankdup float_swap tag_integer_202 float_sin float_frominteger integer_dup float_pop float_swap float_sub -5 float_dup_times integer_max float_div float_flush float_cos float_tan integer_dec integer_shove integer_pop tagged_586 in1 float_stackdepth float_mult float_swap float_div float_dec print_float integer_max in1 float_yankdup -55.97595707003662 float_max float_flush)
Errors: [19.0 2 56.0 10 30.0 1 26.0 2 78.0 3 50.0 2 3.0 1 54.0 2 8.0 2 93.0 11 4.0 2 74.0 13 97.0 13 10.0 1 12.0 2 3.0 1 82.0 1 85.0 12 6.0 2 83.0 11 50.0 1 43.0 2 18.0 2 32.0 3 15.0 2]
Total: 1135.0
Mean: 22.7
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4175.931212799997
Median total errors in population: 1169.0
Error averages by case: (147.84334060000015 4.732 165.36320699999962 11.088 145.38690759999983 11.317 156.51134630000038 5.401 191.15278250000026 6.261 177.6327999 6.446 140.29945980000053 4.874 158.88430339999974 5.272 137.05120969999965 5.547 198.64671469999973 12.476 129.50677789999997 5.632 179.47691420000035 13.158 194.4741087999998 13.177 131.20053199999967 5.488 146.7726539999998 5.544 124.4644396999997 4.696 193.2335710000003 4.56 189.59762260000034 13.068 138.7053424000001 5.71 186.43130059999984 12.249 165.39888849999977 5.32 156.11709720000007 5.666 134.6533650000004 5.487 156.00333959999935 5.943 146.63018780000007 5.381)
Error minima by case: (11.3389 1 3.417 9 0.1797 1 4.6234 2 72.6667 3 49.0 2 2.0 1 2.3431 2 7.0 1 11.8159 8 2.0 2 3.9229 7 1.3215 8 0.0881 1 11.0 2 1.0 1 0.7481 1 18.366 8 4.0 2 0.0836 9 0.1725 1 4.0707 2 0.5117 2 29.0952 3 0.7915 2)
Average genome size in population (length): 41.597
Average program size in population (points): 42.597
Average percent parens in population: 0.033
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.0205
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 34
Genome diversity (% unique Plush genomes):	 0.595
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.595
Total error diversity:				 0.115
Error (vector) diversity:			 0.119
Behavioral diversity:				 0.126
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 3688877
--- Timings ---
Current time: 1529615062983 milliseconds
Total Time:          12.2 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         5.6 seconds, 45.6%
Fitness Testing:      5.7 seconds, 46.6%
Report:               0.8 seconds,  6.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Number IO problem report - generation 3
Test total error for best: 54310.0
Test mean error for best: 27.15500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 73.2889250004 
Correct output: 15.0922415815  | Program output: -40.9077584185
Correct output: -30.8202558445 | Program output: -0.8202558445 
Correct output: 70.2512965501  | Program output: 96.2512965501 
Correct output: 150.6666771001 | Program output: 72.6666771001 
Correct output: -148.0189802809 | Program output: -98.0189802809
Correct output: 91.9885288633  | Program output: 94.9885288633 
Correct output: 56.3430751406  | Program output: 2.3430751406  
Correct output: -55.2026859793 | Program output: -47.2026859793
Correct output: -31.9001885201 | Program output: 61.0998114799 
Correct output: 70.8415782878  | Program output: 66.8415782878 
Correct output: -70.0770879346 | Program output: 3.9229120654  
Correct output: 62.2573571201  | Program output: -34.7426428799
Correct output: -11.0880796195 | Program output: -1.0880796195 
Correct output: -98.0730811682 | Program output: -86.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 91.2519145493 
Correct output: -62.0820375564 | Program output: 22.9179624436 
Correct output: -85.5891975931 | Program output: -91.5891975931
Correct output: 26.7802144548  | Program output: -56.2197855452
Correct output: 1.2069497285   | Program output: 51.2069497285 
Correct output: 70.6151869811  | Program output: 27.6151869811 
Correct output: 27.2083659619  | Program output: 9.2083659619  
Correct output: 103.781099078  | Program output: 71.781099078  
Correct output: 66.4193519736  | Program output: 81.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction integer_mult} {:instruction float_cos} {:instruction integer_add} {:instruction integer_div} {:instruction float_tan} {:instruction float_mult} {:instruction in1} {:instruction integer_mult} {:instruction in1} {:instruction float_yank} {:instruction float_yankdup} {:instruction integer_dup_times} {:instruction print_integer} {:instruction integer_yankdup} {:instruction integer_dec} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction float_div} {:instruction tag_integer_949} {:instruction tagged_247} {:instruction float_dup} {:instruction float_shove} {:instruction integer_flush} {:instruction float_frominteger} {:instruction float_yank} {:instruction integer_dup} {:instruction float_yank} {:instruction integer_sub} {:instruction 29.133679736171842} {:instruction float_sub} {:instruction integer_add} {:instruction float_rot} {:instruction float_sub} {:instruction float_min} {:instruction 14} {:instruction float_yankdup} {:instruction float_swap} {:instruction tag_integer_202} {:instruction float_sin} {:instruction float_frominteger} {:instruction integer_dup} {:instruction float_pop} {:instruction float_swap} {:instruction float_sub} {:instruction -5} {:instruction float_dup_times} {:instruction integer_max} {:instruction float_div} {:instruction float_flush} {:instruction float_cos} {:instruction float_tan} {:instruction integer_dec} {:instruction integer_shove} {:instruction integer_pop} {:instruction tagged_586} {:instruction in1} {:instruction float_stackdepth} {:instruction float_mult} {:instruction float_swap} {:instruction float_div} {:instruction float_dec} {:instruction print_float} {:instruction integer_max} {:instruction in1} {:instruction float_yankdup} {:instruction -55.97595707003662} {:instruction float_max} {:instruction float_flush})
Best program: (float_inc integer_mult float_cos integer_add integer_div float_tan float_mult in1 integer_mult in1 float_yank float_yankdup integer_dup_times print_integer integer_yankdup integer_dec float_stackdepth float_frominteger float_div tag_integer_949 tagged_247 float_dup float_shove integer_flush float_frominteger float_yank integer_dup float_yank integer_sub 29.133679736171842 float_sub integer_add float_rot float_sub float_min 14 float_yankdup float_swap tag_integer_202 float_sin float_frominteger integer_dup float_pop float_swap float_sub -5 float_dup_times integer_max float_div float_flush float_cos float_tan integer_dec integer_shove integer_pop tagged_586 in1 float_stackdepth float_mult float_swap float_div float_dec print_float integer_max in1 float_yankdup -55.97595707003662 float_max float_flush)
Errors: [19.0 2 56.0 10 30.0 1 26.0 2 78.0 3 50.0 2 3.0 1 54.0 2 8.0 2 93.0 11 4.0 2 74.0 13 97.0 13 10.0 1 12.0 2 3.0 1 82.0 1 85.0 12 6.0 2 83.0 11 50.0 1 43.0 2 18.0 2 32.0 3 15.0 2]
Total: 1135.0
Mean: 22.7
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3600.4744167
Median total errors in population: 1153.0
Error averages by case: (119.11961429999998 2.494 151.58287360000003 10.528 126.0173897 9.391 125.4894638 3.197 172.73112540000002 4.173 146.87791559999997 4.056 104.5103898 2.303 148.44999790000003 3.135 108.98550669999999 3.298 185.2468578 12.182 104.63482499999999 3.227 166.8724624 13.268 188.42861680000001 13.248 108.8174222 3.039 112.6882131 3.31 103.5402769 2.218 175.3770659 2.249 177.6134455 13.075 106.89755170000001 3.298 176.6759695 12.145 146.71528640000002 2.949 139.90813310000001 3.25 116.73829450000001 3.195 130.470583 4.06 115.5961361 3.201)
Error minima by case: (18.0 1 15.0922 10 0.1797 1 25.0 2 76.0 3 49.0 2 2.0 1 3.3431 2 7.0 1 52.8291 11 2.0 2 14.6522 10 62.2574 11 0.0881 1 11.0 2 1.0 1 8.2519 1 22.6473 10 0.8599 1 24.7802 10 2.2069 1 28.6152 2 10.2084 2 30.0 2 14.0 2)
Average genome size in population (length): 34.28
Average program size in population (points): 35.28
Average percent parens in population: 0.038
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.48025
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 85
Genome diversity (% unique Plush genomes):	 0.523
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 85
Syntactic diversity (% unique Push programs):	 0.523
Total error diversity:				 0.032
Error (vector) diversity:			 0.036
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 4546252
--- Timings ---
Current time: 1529615066556 milliseconds
Total Time:          15.9 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         7.3 seconds, 45.8%
Fitness Testing:      7.1 seconds, 44.9%
Report:               1.4 seconds,  8.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Number IO problem report - generation 4
Test total error for best: 54310.0
Test mean error for best: 27.15500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 73.2889250004 
Correct output: 15.0922415815  | Program output: -40.9077584185
Correct output: -30.8202558445 | Program output: -0.8202558445 
Correct output: 70.2512965501  | Program output: 96.2512965501 
Correct output: 150.6666771001 | Program output: 72.6666771001 
Correct output: -148.0189802809 | Program output: -98.0189802809
Correct output: 91.9885288633  | Program output: 94.9885288633 
Correct output: 56.3430751406  | Program output: 2.3430751406  
Correct output: -55.2026859793 | Program output: -47.2026859793
Correct output: -31.9001885201 | Program output: 61.0998114799 
Correct output: 70.8415782878  | Program output: 66.8415782878 
Correct output: -70.0770879346 | Program output: 3.9229120654  
Correct output: 62.2573571201  | Program output: -34.7426428799
Correct output: -11.0880796195 | Program output: -1.0880796195 
Correct output: -98.0730811682 | Program output: -86.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 91.2519145493 
Correct output: -62.0820375564 | Program output: 22.9179624436 
Correct output: -85.5891975931 | Program output: -91.5891975931
Correct output: 26.7802144548  | Program output: -56.2197855452
Correct output: 1.2069497285   | Program output: 51.2069497285 
Correct output: 70.6151869811  | Program output: 27.6151869811 
Correct output: 27.2083659619  | Program output: 9.2083659619  
Correct output: 103.781099078  | Program output: 71.781099078  
Correct output: 66.4193519736  | Program output: 81.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction integer_min} {:instruction in1} {:instruction float_sub} {:instruction 76} {:instruction float_sub} {:instruction float_pop} {:instruction in1} {:instruction integer_max} {:instruction float_sin} {:instruction integer_dec} {:instruction float_flush} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction float_shove} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_pop} {:instruction float_dup_items} {:instruction integer_div} {:instruction in2} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_tan} {:instruction integer_pop} {:instruction float_sub} {:instruction integer_mod} {:instruction float_div} {:instruction float_sub} {:instruction -5} {:instruction float_dup_times} {:instruction integer_max} {:instruction float_div} {:instruction float_flush} {:instruction float_cos} {:instruction float_tan} {:instruction integer_dec} {:instruction integer_shove} {:instruction integer_pop} {:instruction tagged_586} {:instruction in1} {:instruction float_stackdepth} {:instruction float_mult} {:instruction float_swap} {:instruction float_div} {:instruction float_dec} {:instruction print_float} {:instruction integer_max} {:instruction in1} {:instruction float_yankdup} {:instruction -55.97595707003662} {:instruction float_shove} {:instruction integer_yankdup} {:instruction tag_float_467} {:instruction float_rot} {:instruction integer_stackdepth})
Best program: (integer_mod integer_dup integer_fromfloat integer_min in1 float_sub 76 float_sub float_pop in1 integer_max float_sin integer_dec float_flush integer_shove integer_dup_times float_shove integer_dup_times float_inc float_pop float_dup_items integer_div in2 integer_shove integer_dec float_dup_items float_tan integer_pop float_sub integer_mod float_div float_sub -5 float_dup_times integer_max float_div float_flush float_cos float_tan integer_dec integer_shove integer_pop tagged_586 in1 float_stackdepth float_mult float_swap float_div float_dec print_float integer_max in1 float_yankdup -55.97595707003662 float_shove integer_yankdup tag_float_467 float_rot integer_stackdepth)
Errors: [19.0 2 56.0 10 30.0 1 26.0 2 78.0 3 50.0 2 3.0 1 54.0 2 8.0 2 93.0 11 4.0 2 74.0 13 97.0 13 10.0 1 12.0 2 3.0 1 82.0 1 85.0 12 6.0 2 83.0 11 50.0 1 43.0 2 18.0 2 32.0 3 15.0 2]
Total: 1135.0
Mean: 22.7
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3986.6236724999994
Median total errors in population: 1135.0
Error averages by case: (135.50980260000003 3.298 166.4273089 10.572 141.94864130000002 4.703 141.90077509999998 3.498 187.76636410000003 4.432 162.55595689999998 3.864 122.2003237 2.634 163.5560813 3.403 124.96339769999997 3.607 198.8314646 11.738 122.17211940000001 3.517 180.37150379999997 13.253 202.48282220000002 13.198 124.59390739999999 2.852 128.76596580000003 3.598 120.83115250000002 2.502 189.74898249999998 2.53 191.198181 12.59 122.9906144 3.569 190.0750302 11.665 161.5680962 2.75 155.77484580000004 3.526 132.626879 3.449 147.11952789999998 4.29 132.11592819999998 3.49)
Error minima by case: (9.2889 1 13.7431 9 2.7904 1 21.6256 2 77.0 3 49.0 2 2.0 1 53.0 2 7.0 2 27.0897 9 3.0 2 13.6522 9 49.1398 7 9.0 1 11.0 2 2.0 1 7.0428 1 21.6473 9 0.8599 2 22.7275 10 1.2069 1 38.5659 2 17.0 2 31.0 2 14.0 2)
Average genome size in population (length): 33.524
Average program size in population (points): 34.524
Average percent parens in population: 0.037
Minimum age in population: 4.0
Maximum age in population: 7.5
Average age in population: 5.888
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 270
Genome diversity (% unique Plush genomes):	 0.477
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 270
Syntactic diversity (% unique Push programs):	 0.477
Total error diversity:				 0.027
Error (vector) diversity:			 0.03
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 5384627
--- Timings ---
Current time: 1529615070102 milliseconds
Total Time:          19.3 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         8.9 seconds, 46.0%
Fitness Testing:      8.5 seconds, 44.0%
Report:               1.8 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Number IO problem report - generation 5
Test total error for best: 54310.0
Test mean error for best: 27.15500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 73.2889250004 
Correct output: 15.0922415815  | Program output: -40.9077584185
Correct output: -30.8202558445 | Program output: -0.8202558445 
Correct output: 70.2512965501  | Program output: 96.2512965501 
Correct output: 150.6666771001 | Program output: 72.6666771001 
Correct output: -148.0189802809 | Program output: -98.0189802809
Correct output: 91.9885288633  | Program output: 94.9885288633 
Correct output: 56.3430751406  | Program output: 2.3430751406  
Correct output: -55.2026859793 | Program output: -47.2026859793
Correct output: -31.9001885201 | Program output: 61.0998114799 
Correct output: 70.8415782878  | Program output: 66.8415782878 
Correct output: -70.0770879346 | Program output: 3.9229120654  
Correct output: 62.2573571201  | Program output: -34.7426428799
Correct output: -11.0880796195 | Program output: -1.0880796195 
Correct output: -98.0730811682 | Program output: -86.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 91.2519145493 
Correct output: -62.0820375564 | Program output: 22.9179624436 
Correct output: -85.5891975931 | Program output: -91.5891975931
Correct output: 26.7802144548  | Program output: -56.2197855452
Correct output: 1.2069497285   | Program output: 51.2069497285 
Correct output: 70.6151869811  | Program output: 27.6151869811 
Correct output: 27.2083659619  | Program output: 9.2083659619  
Correct output: 103.781099078  | Program output: 71.781099078  
Correct output: 66.4193519736  | Program output: 81.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction -83.72930746962447} {:instruction float_swap} {:instruction integer_swap} {:instruction float_frominteger} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mult} {:instruction integer_div} {:instruction print_float} {:instruction integer_max} {:instruction -9.568963984273623} {:instruction integer_div} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction in1} {:instruction integer_flush} {:instruction float_flush} {:instruction float_dup_items} {:instruction integer_mult})
Best program: (-83.72930746962447 float_swap integer_swap float_frominteger in1 float_dup_items float_dec float_yankdup integer_mult integer_div print_float integer_max -9.568963984273623 integer_div -56.50848481366526 integer_div in1 integer_flush float_flush float_dup_items integer_mult)
Errors: [19.0 2 56.0 10 30.0 1 26.0 2 78.0 3 50.0 2 3.0 1 54.0 2 8.0 2 93.0 11 4.0 2 74.0 13 97.0 13 10.0 1 12.0 2 3.0 1 82.0 1 85.0 12 6.0 2 83.0 11 50.0 1 43.0 2 18.0 2 32.0 3 15.0 2]
Total: 1135.0
Mean: 22.7
Genome size: 21
Size: 22
Percent parens: 0.045
--- Population Statistics ---
Average total errors in population: 3741.4346280999994
Median total errors in population: 1135.0
Error averages by case: (126.02730360000004 3.409 156.5788642 10.517 131.31477350000003 2.663 132.70854999999992 3.434 179.39805459999997 4.382 151.86027199999995 3.564 112.9346983 2.544 154.10558220000004 3.362 113.96927379999998 3.492 189.16430780000007 11.48 113.26420290000003 3.436 169.5580075 13.172 193.26245200000002 13.138 114.06158549999998 2.558 118.07657590000002 3.477 111.90794090000004 2.431 180.4340913 2.44 181.45216970000004 12.323 112.98108709999998 3.449 180.36395429999993 11.367 152.040757 2.463 147.24648250000004 3.438 123.03984409999994 3.377 139.3111968 4.257 122.81360060000003 3.386)
Error minima by case: (18.0 1 12.8647 9 21.2513 1 25.0 2 37.9044 3 37.5434 2 2.0 1 46.1669 2 7.0 2 22.3312 8 3.0 2 13.6522 9 14.925 9 1.5191 1 11.0 2 2.0 1 9.1051 1 21.6473 10 0.2782 2 9.4055 9 0.1665 1 42.0 2 17.0 2 31.0 2 14.0 2)
Average genome size in population (length): 31.2
Average program size in population (points): 32.2
Average percent parens in population: 0.038
Minimum age in population: 5.0
Maximum age in population: 9.0
Average age in population: 7.2791875
Median age in population: 7.375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 309
Genome diversity (% unique Plush genomes):	 0.457
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 309
Syntactic diversity (% unique Push programs):	 0.457
Total error diversity:				 0.025
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 6164827
--- Timings ---
Current time: 1529615073453 milliseconds
Total Time:          22.8 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        10.4 seconds, 45.5%
Fitness Testing:     10.0 seconds, 43.8%
Report:               2.3 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Number IO problem report - generation 6
Test total error for best: 54310.0
Test mean error for best: 27.15500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 73.2889250004 
Correct output: 15.0922415815  | Program output: -40.9077584185
Correct output: -30.8202558445 | Program output: -0.8202558445 
Correct output: 70.2512965501  | Program output: 96.2512965501 
Correct output: 150.6666771001 | Program output: 72.6666771001 
Correct output: -148.0189802809 | Program output: -98.0189802809
Correct output: 91.9885288633  | Program output: 94.9885288633 
Correct output: 56.3430751406  | Program output: 2.3430751406  
Correct output: -55.2026859793 | Program output: -47.2026859793
Correct output: -31.9001885201 | Program output: 61.0998114799 
Correct output: 70.8415782878  | Program output: 66.8415782878 
Correct output: -70.0770879346 | Program output: 3.9229120654  
Correct output: 62.2573571201  | Program output: -34.7426428799
Correct output: -11.0880796195 | Program output: -1.0880796195 
Correct output: -98.0730811682 | Program output: -86.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 91.2519145493 
Correct output: -62.0820375564 | Program output: 22.9179624436 
Correct output: -85.5891975931 | Program output: -91.5891975931
Correct output: 26.7802144548  | Program output: -56.2197855452
Correct output: 1.2069497285   | Program output: 51.2069497285 
Correct output: 70.6151869811  | Program output: 27.6151869811 
Correct output: 27.2083659619  | Program output: 9.2083659619  
Correct output: 103.781099078  | Program output: 71.781099078  
Correct output: 66.4193519736  | Program output: 81.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction integer_mult} {:instruction integer_flush} {:instruction integer_add} {:instruction integer_div} {:instruction float_tan} {:instruction float_mult} {:instruction in1} {:instruction integer_mult} {:instruction in1} {:instruction float_yank} {:instruction float_yankdup} {:instruction integer_dup_times} {:instruction print_integer} {:instruction integer_yankdup} {:instruction integer_dec} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction float_div} {:instruction tag_integer_949} {:instruction tagged_247} {:instruction float_dup} {:instruction float_frominteger} {:instruction float_yank} {:instruction integer_dup} {:instruction float_yank} {:instruction integer_sub} {:instruction 29.133679736171842} {:instruction float_sub} {:instruction integer_add} {:instruction float_rot} {:instruction float_sub} {:instruction float_min} {:instruction 14} {:instruction float_yankdup} {:instruction float_swap} {:instruction tag_integer_202} {:instruction float_sin} {:instruction float_frominteger} {:instruction integer_dup} {:instruction float_pop} {:instruction float_swap} {:instruction float_sub} {:instruction -5} {:instruction float_dup_times} {:instruction integer_max} {:instruction float_div} {:instruction float_flush} {:instruction float_cos} {:instruction float_tan} {:instruction integer_dec} {:instruction integer_shove} {:instruction integer_pop} {:instruction tagged_586} {:instruction in1} {:instruction float_stackdepth} {:instruction float_mult} {:instruction float_swap} {:instruction float_div} {:instruction float_dec} {:instruction print_float} {:instruction integer_max} {:instruction in1} {:instruction float_yankdup} {:instruction -55.97595707003662} {:instruction float_max} {:instruction float_flush})
Best program: (float_inc integer_mult integer_flush integer_add integer_div float_tan float_mult in1 integer_mult in1 float_yank float_yankdup integer_dup_times print_integer integer_yankdup integer_dec float_stackdepth float_frominteger float_div tag_integer_949 tagged_247 float_dup float_frominteger float_yank integer_dup float_yank integer_sub 29.133679736171842 float_sub integer_add float_rot float_sub float_min 14 float_yankdup float_swap tag_integer_202 float_sin float_frominteger integer_dup float_pop float_swap float_sub -5 float_dup_times integer_max float_div float_flush float_cos float_tan integer_dec integer_shove integer_pop tagged_586 in1 float_stackdepth float_mult float_swap float_div float_dec print_float integer_max in1 float_yankdup -55.97595707003662 float_max float_flush)
Errors: [19.0 2 56.0 10 30.0 1 26.0 2 78.0 3 50.0 2 3.0 1 54.0 2 8.0 2 93.0 11 4.0 2 74.0 13 97.0 13 10.0 1 12.0 2 3.0 1 82.0 1 85.0 12 6.0 2 83.0 11 50.0 1 43.0 2 18.0 2 32.0 3 15.0 2]
Total: 1135.0
Mean: 22.7
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3615.2004174999997
Median total errors in population: 1135.0
Error averages by case: (120.66075830000001 3.327 152.3050968 10.498 126.9032961 2.581 127.18650920000003 3.343 174.31645200000003 4.295 147.56660859999997 3.484 107.381999 2.44 148.9553209 3.274 109.70187739999999 3.41 184.68448230000004 11.461 107.77659060000002 3.347 165.23147629999997 13.167 188.99000540000003 13.136 109.89388559999998 2.48 113.22567000000001 3.401 106.44379700000002 2.337 175.2593563 2.357 176.53586880000003 12.316 107.7259224 3.375 176.53203469999994 11.357 147.0270443 2.373 141.20543650000002 3.347 117.44490779999998 3.295 132.99615539999996 4.177 117.3608658 3.311)
Error minima by case: (8.5596 1 13.0455 8 29.0 1 25.0 2 77.0 3 49.0 2 2.0 1 40.053 2 7.0 2 29.5519 9 3.0 2 13.6522 8 59.8474 9 7.522 1 8.1564 2 2.0 1 1.7293 1 21.6473 9 0.8599 2 25.2909 9 0.1665 1 42.0 2 17.0 2 31.0 2 12.69 2)
Average genome size in population (length): 29.924
Average program size in population (points): 30.924
Average percent parens in population: 0.039
Minimum age in population: 6.0
Maximum age in population: 10.5
Average age in population: 8.74821875
Median age in population: 8.78125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 259
Genome diversity (% unique Plush genomes):	 0.522
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 259
Syntactic diversity (% unique Push programs):	 0.522
Total error diversity:				 0.023
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 6913127
--- Timings ---
Current time: 1529615076666 milliseconds
Total Time:          26.0 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        11.9 seconds, 45.7%
Fitness Testing:     11.3 seconds, 43.5%
Report:               2.7 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Number IO problem report - generation 7
Test total error for best: 54310.0
Test mean error for best: 27.15500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 73.2889250004 
Correct output: 15.0922415815  | Program output: -40.9077584185
Correct output: -30.8202558445 | Program output: -0.8202558445 
Correct output: 70.2512965501  | Program output: 96.2512965501 
Correct output: 150.6666771001 | Program output: 72.6666771001 
Correct output: -148.0189802809 | Program output: -98.0189802809
Correct output: 91.9885288633  | Program output: 94.9885288633 
Correct output: 56.3430751406  | Program output: 2.3430751406  
Correct output: -55.2026859793 | Program output: -47.2026859793
Correct output: -31.9001885201 | Program output: 61.0998114799 
Correct output: 70.8415782878  | Program output: 66.8415782878 
Correct output: -70.0770879346 | Program output: 3.9229120654  
Correct output: 62.2573571201  | Program output: -34.7426428799
Correct output: -11.0880796195 | Program output: -1.0880796195 
Correct output: -98.0730811682 | Program output: -86.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 91.2519145493 
Correct output: -62.0820375564 | Program output: 22.9179624436 
Correct output: -85.5891975931 | Program output: -91.5891975931
Correct output: 26.7802144548  | Program output: -56.2197855452
Correct output: 1.2069497285   | Program output: 51.2069497285 
Correct output: 70.6151869811  | Program output: 27.6151869811 
Correct output: 27.2083659619  | Program output: 9.2083659619  
Correct output: 103.781099078  | Program output: 71.781099078  
Correct output: 66.4193519736  | Program output: 81.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction -83.72930746962447} {:instruction float_swap} {:instruction integer_swap} {:instruction float_frominteger} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mult} {:instruction integer_div} {:instruction print_float} {:instruction integer_max} {:instruction -9.568963984273623} {:instruction integer_div} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction in1} {:instruction integer_flush} {:instruction float_flush} {:instruction float_dup_items} {:instruction integer_mult})
Best program: (-83.72930746962447 float_swap integer_swap float_frominteger in1 float_dup_items float_dec float_yankdup integer_mult integer_div print_float integer_max -9.568963984273623 integer_div -56.50848481366526 integer_div in1 integer_flush float_flush float_dup_items integer_mult)
Errors: [19.0 2 56.0 10 30.0 1 26.0 2 78.0 3 50.0 2 3.0 1 54.0 2 8.0 2 93.0 11 4.0 2 74.0 13 97.0 13 10.0 1 12.0 2 3.0 1 82.0 1 85.0 12 6.0 2 83.0 11 50.0 1 43.0 2 18.0 2 32.0 3 15.0 2]
Total: 1135.0
Mean: 22.7
Genome size: 21
Size: 22
Percent parens: 0.045
--- Population Statistics ---
Average total errors in population: 3113.5560282
Median total errors in population: 1135.0
Error averages by case: (99.60489910000001 3.038 132.59376900000004 10.376 108.75520750000001 2.246 106.19514399999997 3.06 154.31374079999998 4.022 127.55397449999998 3.174 85.6905947 2.137 131.3404064 3.004 88.75843009999998 3.111 165.80716560000005 11.354 86.2468173 3.059 148.4959087 13.138 170.35649089999998 13.098 90.717828 2.161 92.46405150000001 3.105 85.0372308 2.059 156.05020599999997 2.062 158.47608870000002 12.241 86.8502005 3.09 157.1981584 11.266 127.0231923 2.08 121.58610260000002 3.057 98.34650179999997 3.019 112.0354079 3.927 96.14351110000001 3.031)
Error minima by case: (9.5596 1 7.6498 10 11.6267 1 25.0 2 77.0 3 49.0 2 2.0 1 33.601 2 7.0 2 12.7066 8 3.0 2 13.6522 9 39.5153 10 3.6443 1 11.0 2 2.0 1 1.7293 1 21.6473 9 0.8599 2 4.0381 9 2.5692 1 42.0 2 4.4663 2 31.0 2 13.69 2)
Average genome size in population (length): 28.182
Average program size in population (points): 29.182
Average percent parens in population: 0.040
Minimum age in population: 7.625
Maximum age in population: 12.109375
Average age in population: 10.208296875
Median age in population: 10.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 244
Genome diversity (% unique Plush genomes):	 0.509
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 244
Syntactic diversity (% unique Push programs):	 0.509
Total error diversity:				 0.024
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 7617752
--- Timings ---
Current time: 1529615079711 milliseconds
Total Time:          29.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.4 seconds, 45.9%
Fitness Testing:     12.5 seconds, 43.0%
Report:               3.1 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Number IO problem report - generation 8
Test total error for best: 54310.0
Test mean error for best: 27.15500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 73.2889250004 
Correct output: 15.0922415815  | Program output: -40.9077584185
Correct output: -30.8202558445 | Program output: -0.8202558445 
Correct output: 70.2512965501  | Program output: 96.2512965501 
Correct output: 150.6666771001 | Program output: 72.6666771001 
Correct output: -148.0189802809 | Program output: -98.0189802809
Correct output: 91.9885288633  | Program output: 94.9885288633 
Correct output: 56.3430751406  | Program output: 2.3430751406  
Correct output: -55.2026859793 | Program output: -47.2026859793
Correct output: -31.9001885201 | Program output: 61.0998114799 
Correct output: 70.8415782878  | Program output: 66.8415782878 
Correct output: -70.0770879346 | Program output: 3.9229120654  
Correct output: 62.2573571201  | Program output: -34.7426428799
Correct output: -11.0880796195 | Program output: -1.0880796195 
Correct output: -98.0730811682 | Program output: -86.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 91.2519145493 
Correct output: -62.0820375564 | Program output: 22.9179624436 
Correct output: -85.5891975931 | Program output: -91.5891975931
Correct output: 26.7802144548  | Program output: -56.2197855452
Correct output: 1.2069497285   | Program output: 51.2069497285 
Correct output: 70.6151869811  | Program output: 27.6151869811 
Correct output: 27.2083659619  | Program output: 9.2083659619  
Correct output: 103.781099078  | Program output: 71.781099078  
Correct output: 66.4193519736  | Program output: 81.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction -83.72930746962447} {:instruction float_swap} {:instruction integer_swap} {:instruction float_frominteger} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mult} {:instruction integer_div} {:instruction print_float} {:instruction integer_max} {:instruction -9.568963984273623} {:instruction integer_div} {:instruction -56.78963372785051} {:instruction integer_div} {:instruction in1} {:instruction integer_mult})
Best program: (-83.72930746962447 float_swap integer_swap float_frominteger in1 float_dup_items float_dec float_yankdup integer_mult integer_div print_float integer_max -9.568963984273623 integer_div -56.78963372785051 integer_div in1 integer_mult)
Errors: [19.0 2 56.0 10 30.0 1 26.0 2 78.0 3 50.0 2 3.0 1 54.0 2 8.0 2 93.0 11 4.0 2 74.0 13 97.0 13 10.0 1 12.0 2 3.0 1 82.0 1 85.0 12 6.0 2 83.0 11 50.0 1 43.0 2 18.0 2 32.0 3 15.0 2]
Total: 1135.0
Mean: 22.7
Genome size: 18
Size: 19
Percent parens: 0.053
--- Population Statistics ---
Average total errors in population: 3121.8301606
Median total errors in population: 1135.0
Error averages by case: (100.90148850000004 3.119 133.01972430000004 10.425 106.13313630000002 2.372 107.58036859999996 3.153 155.88679949999997 4.101 127.74123379999995 3.251 87.37784309999998 2.23 130.11848820000006 3.077 88.87432499999998 3.181 165.65949530000003 11.387 87.75336480000003 3.153 145.86850159999997 13.122 170.84317760000005 13.111 88.47617579999998 2.242 92.52790650000003 3.185 86.27098330000004 2.158 156.57786519999996 2.158 157.9579648 12.25 86.86955849999998 3.154 157.4693764 11.297 127.57154370000002 2.182 122.67534540000008 3.157 98.82846969999997 3.102 113.5983679 3.993 97.58465680000003 3.104)
Error minima by case: (16.9892 1 1.2653 10 14.7704 1 25.0 2 71.8328 3 49.0 2 2.0 1 53.0 2 7.0 2 7.8282 9 3.0 2 13.6522 9 50.7209 10 9.0 1 11.0 2 2.0 1 9.6643 1 21.6473 8 0.8599 2 7.2644 10 0.6183 1 42.0 2 17.0 2 31.0 2 14.0 2)
Average genome size in population (length): 26.774
Average program size in population (points): 27.774
Average percent parens in population: 0.041
Minimum age in population: 9.0
Maximum age in population: 13.5859375
Average age in population: 11.7425625
Median age in population: 11.828125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 174
Genome diversity (% unique Plush genomes):	 0.551
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 174
Syntactic diversity (% unique Push programs):	 0.551
Total error diversity:				 0.023
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 8287252
--- Timings ---
Current time: 1529615082905 milliseconds
Total Time:          32.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.9 seconds, 46.0%
Fitness Testing:     13.9 seconds, 43.1%
Report:               3.4 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Number IO problem report - generation 9
Test total error for best: 54310.0
Test mean error for best: 27.15500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 73.2889250004 
Correct output: 15.0922415815  | Program output: -40.9077584185
Correct output: -30.8202558445 | Program output: -0.8202558445 
Correct output: 70.2512965501  | Program output: 96.2512965501 
Correct output: 150.6666771001 | Program output: 72.6666771001 
Correct output: -148.0189802809 | Program output: -98.0189802809
Correct output: 91.9885288633  | Program output: 94.9885288633 
Correct output: 56.3430751406  | Program output: 2.3430751406  
Correct output: -55.2026859793 | Program output: -47.2026859793
Correct output: -31.9001885201 | Program output: 61.0998114799 
Correct output: 70.8415782878  | Program output: 66.8415782878 
Correct output: -70.0770879346 | Program output: 3.9229120654  
Correct output: 62.2573571201  | Program output: -34.7426428799
Correct output: -11.0880796195 | Program output: -1.0880796195 
Correct output: -98.0730811682 | Program output: -86.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 91.2519145493 
Correct output: -62.0820375564 | Program output: 22.9179624436 
Correct output: -85.5891975931 | Program output: -91.5891975931
Correct output: 26.7802144548  | Program output: -56.2197855452
Correct output: 1.2069497285   | Program output: 51.2069497285 
Correct output: 70.6151869811  | Program output: 27.6151869811 
Correct output: 27.2083659619  | Program output: 9.2083659619  
Correct output: 103.781099078  | Program output: 71.781099078  
Correct output: 66.4193519736  | Program output: 81.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction float_max} {:instruction integer_inc} {:instruction -83.72930746962447} {:instruction float_swap} {:instruction integer_swap} {:instruction float_frominteger} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mult} {:instruction integer_div} {:instruction print_float} {:instruction integer_max} {:instruction -9.568963984273623} {:instruction integer_div} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction in1} {:instruction integer_flush} {:instruction float_flush} {:instruction float_dup_items} {:instruction integer_mult})
Best program: (integer_fromfloat integer_fromfloat float_max integer_inc -83.72930746962447 float_swap integer_swap float_frominteger in1 float_dup_items float_dec float_yankdup integer_mult integer_div print_float integer_max -9.568963984273623 integer_div -56.50848481366526 integer_div in1 integer_flush float_flush float_dup_items integer_mult)
Errors: [19.0 2 56.0 10 30.0 1 26.0 2 78.0 3 50.0 2 3.0 1 54.0 2 8.0 2 93.0 11 4.0 2 74.0 13 97.0 13 10.0 1 12.0 2 3.0 1 82.0 1 85.0 12 6.0 2 83.0 11 50.0 1 43.0 2 18.0 2 32.0 3 15.0 2]
Total: 1135.0
Mean: 22.7
Genome size: 25
Size: 26
Percent parens: 0.038
--- Population Statistics ---
Average total errors in population: 2719.042900800001
Median total errors in population: 1135.0
Error averages by case: (83.74757539999999 2.957 116.89248340000003 10.375 93.32340450000004 2.132 90.47230440000001 2.965 139.78485469999995 3.927 111.71581679999996 3.046 69.9872984 2.032 115.94160950000001 2.926 72.31591929999996 2.999 149.97330640000004 11.335 70.4331727 2.97 132.3250229 13.092 155.32139479999995 13.112 76.33257149999997 2.04 76.03557700000002 2.988 69.07245740000002 1.973 140.26814579999993 1.97 142.44029869999994 12.207 70.31883590000004 2.966 141.8288197 11.263 110.96128250000001 2.002 106.10258460000004 2.989 82.41319420000002 2.937 96.71163370000001 3.849 80.3423366 2.929)
Error minima by case: (8.5596 1 12.0922 9 21.2513 1 15.2913 1 65.1241 2 6.0 2 2.0 1 29.1995 2 7.0 2 9.2707 9 3.0 1 9.7293 2 23.2852 10 1.5191 1 11.0 2 2.0 1 1.7293 1 1.2707 2 0.1401 2 23.7802 9 0.1665 1 14.9274 2 17.0 2 18.2385 2 12.69 2)
Average genome size in population (length): 25.737
Average program size in population (points): 26.737
Average percent parens in population: 0.042
Minimum age in population: 10.1875
Maximum age in population: 15.04296875
Average age in population: 13.1943203125
Median age in population: 13.265625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 152
Genome diversity (% unique Plush genomes):	 0.577
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 152
Syntactic diversity (% unique Push programs):	 0.577
Total error diversity:				 0.02
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 8930727
--- Timings ---
Current time: 1529615086152 milliseconds
Total Time:          35.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        16.4 seconds, 46.0%
Fitness Testing:     15.3 seconds, 43.1%
Report:               3.8 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Number IO problem report - generation 10
Test total error for best: 54310.0
Test mean error for best: 27.15500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 73.2889250004 
Correct output: 15.0922415815  | Program output: -40.9077584185
Correct output: -30.8202558445 | Program output: -0.8202558445 
Correct output: 70.2512965501  | Program output: 96.2512965501 
Correct output: 150.6666771001 | Program output: 72.6666771001 
Correct output: -148.0189802809 | Program output: -98.0189802809
Correct output: 91.9885288633  | Program output: 94.9885288633 
Correct output: 56.3430751406  | Program output: 2.3430751406  
Correct output: -55.2026859793 | Program output: -47.2026859793
Correct output: -31.9001885201 | Program output: 61.0998114799 
Correct output: 70.8415782878  | Program output: 66.8415782878 
Correct output: -70.0770879346 | Program output: 3.9229120654  
Correct output: 62.2573571201  | Program output: -34.7426428799
Correct output: -11.0880796195 | Program output: -1.0880796195 
Correct output: -98.0730811682 | Program output: -86.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 91.2519145493 
Correct output: -62.0820375564 | Program output: 22.9179624436 
Correct output: -85.5891975931 | Program output: -91.5891975931
Correct output: 26.7802144548  | Program output: -56.2197855452
Correct output: 1.2069497285   | Program output: 51.2069497285 
Correct output: 70.6151869811  | Program output: 27.6151869811 
Correct output: 27.2083659619  | Program output: 9.2083659619  
Correct output: 103.781099078  | Program output: 71.781099078  
Correct output: 66.4193519736  | Program output: 81.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction -83.72930746962447} {:instruction float_swap} {:instruction integer_swap} {:instruction float_frominteger} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mult} {:instruction integer_div} {:instruction print_float} {:instruction integer_max} {:instruction -9.568963984273623} {:instruction integer_div} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction in1} {:instruction integer_flush} {:instruction float_flush} {:instruction float_dup_items} {:instruction integer_mult})
Best program: (-83.72930746962447 float_swap integer_swap float_frominteger in1 float_dup_items float_dec float_yankdup integer_mult integer_div print_float integer_max -9.568963984273623 integer_div -56.50848481366526 integer_div in1 integer_flush float_flush float_dup_items integer_mult)
Errors: [19.0 2 56.0 10 30.0 1 26.0 2 78.0 3 50.0 2 3.0 1 54.0 2 8.0 2 93.0 11 4.0 2 74.0 13 97.0 13 10.0 1 12.0 2 3.0 1 82.0 1 85.0 12 6.0 2 83.0 11 50.0 1 43.0 2 18.0 2 32.0 3 15.0 2]
Total: 1135.0
Mean: 22.7
Genome size: 21
Size: 22
Percent parens: 0.045
--- Population Statistics ---
Average total errors in population: 2597.1285006000007
Median total errors in population: 1135.0
Error averages by case: (79.21257189999999 2.924 112.01830050000001 10.35 87.16744820000001 2.203 86.235239 2.958 135.72167559999997 3.902 107.51924099999997 3.03 65.68311209999999 2.015 110.3468743 2.881 67.49548799999998 2.978 145.34359110000003 11.314 65.92746709999997 2.955 126.74322769999998 13.067 150.6669048 13.077 69.54965609999998 2.004 71.40788060000001 2.968 64.41071350000003 1.955 135.67573089999996 1.955 137.3820003 12.19 65.52511840000003 2.939 137.01184289999995 11.236 106.24736830000003 1.986 101.33242380000002 2.952 76.7198283 2.9 92.48536499999999 3.817 75.84043120000001 2.903)
Error minima by case: (8.5596 1 10.9455 9 29.0 1 12.6996 2 67.7158 3 49.0 2 2.0 1 26.6078 2 7.0 2 30.441 9 3.0 2 13.6522 7 20.6935 10 9.0 1 11.0 2 2.0 1 1.7293 1 21.6473 10 0.8599 2 25.2639 9 0.1665 1 12.3357 2 17.0 2 20.8302 2 7.8148 2)
Average genome size in population (length): 24.993
Average program size in population (points): 25.993
Average percent parens in population: 0.043
Minimum age in population: 11.1875
Maximum age in population: 16.802734375
Average age in population: 14.662564453125
Median age in population: 14.7587890625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 133
Genome diversity (% unique Plush genomes):	 0.608
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 133
Syntactic diversity (% unique Push programs):	 0.608
Total error diversity:				 0.026
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 9555552
--- Timings ---
Current time: 1529615089028 milliseconds
Total Time:          38.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        17.8 seconds, 46.1%
Fitness Testing:     16.6 seconds, 43.1%
Report:               4.0 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Number IO problem report - generation 11
Test total error for best: 54310.0
Test mean error for best: 27.15500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 73.2889250004 
Correct output: 15.0922415815  | Program output: -40.9077584185
Correct output: -30.8202558445 | Program output: -0.8202558445 
Correct output: 70.2512965501  | Program output: 96.2512965501 
Correct output: 150.6666771001 | Program output: 72.6666771001 
Correct output: -148.0189802809 | Program output: -98.0189802809
Correct output: 91.9885288633  | Program output: 94.9885288633 
Correct output: 56.3430751406  | Program output: 2.3430751406  
Correct output: -55.2026859793 | Program output: -47.2026859793
Correct output: -31.9001885201 | Program output: 61.0998114799 
Correct output: 70.8415782878  | Program output: 66.8415782878 
Correct output: -70.0770879346 | Program output: 3.9229120654  
Correct output: 62.2573571201  | Program output: -34.7426428799
Correct output: -11.0880796195 | Program output: -1.0880796195 
Correct output: -98.0730811682 | Program output: -86.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 91.2519145493 
Correct output: -62.0820375564 | Program output: 22.9179624436 
Correct output: -85.5891975931 | Program output: -91.5891975931
Correct output: 26.7802144548  | Program output: -56.2197855452
Correct output: 1.2069497285   | Program output: 51.2069497285 
Correct output: 70.6151869811  | Program output: 27.6151869811 
Correct output: 27.2083659619  | Program output: 9.2083659619  
Correct output: 103.781099078  | Program output: 71.781099078  
Correct output: 66.4193519736  | Program output: 81.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction -83.72930746962447} {:instruction float_swap} {:instruction integer_swap} {:instruction float_frominteger} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mult} {:instruction integer_div} {:instruction print_float} {:instruction integer_max} {:instruction -9.568963984273623} {:instruction integer_div} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction in1} {:instruction integer_flush} {:instruction float_flush} {:instruction float_dup_items} {:instruction integer_flush} {:instruction integer_rot} {:instruction integer_add} {:instruction integer_inc} {:instruction float_tan})
Best program: (-83.72930746962447 float_swap integer_swap float_frominteger in1 float_dup_items float_dec float_yankdup integer_mult integer_div print_float integer_max -9.568963984273623 integer_div -56.50848481366526 integer_div in1 integer_flush float_flush float_dup_items integer_flush integer_rot integer_add integer_inc float_tan)
Errors: [19.0 2 56.0 10 30.0 1 26.0 2 78.0 3 50.0 2 3.0 1 54.0 2 8.0 2 93.0 11 4.0 2 74.0 13 97.0 13 10.0 1 12.0 2 3.0 1 82.0 1 85.0 12 6.0 2 83.0 11 50.0 1 43.0 2 18.0 2 32.0 3 15.0 2]
Total: 1135.0
Mean: 22.7
Genome size: 25
Size: 26
Percent parens: 0.038
--- Population Statistics ---
Average total errors in population: 2682.1687942000003
Median total errors in population: 1135.0
Error averages by case: (82.20466420000001 2.851 115.81245800000002 10.344 91.3909087 2.0 88.8596885 2.864 138.04747339999997 3.828 110.31540039999997 2.941 68.47109889999999 1.928 114.4201331 2.808 70.85821879999999 2.902 149.56704890000003 11.319 68.7213958 2.864 131.74274529999994 13.129 154.25423419999996 13.109 73.04907859999999 1.936 74.62191060000002 2.888 67.24784160000002 1.864 139.87411709999995 1.87 141.919701 12.221 68.95585290000001 2.87 141.0319887 11.253 110.22262710000001 1.887 104.44063000000001 2.87 80.82864340000002 2.831 94.78337959999999 3.751 78.5635554 2.836)
Error minima by case: (3.7532 1 12.1606 10 28.9319 1 19.7155 2 77.0 3 49.0 2 2.0 1 5.8073 2 6.6254 2 24.9028 11 3.0 2 12.3767 8 11.7216 9 9.0 1 11.0 2 2.0 1 10.6115 1 3.2373 10 0.8599 2 12.1732 11 3.0953 1 20.0794 2 17.0 2 31.0 2 7.5266 2)
Average genome size in population (length): 23.629
Average program size in population (points): 24.629
Average percent parens in population: 0.044
Minimum age in population: 13.1484375
Maximum age in population: 18.271484375
Average age in population: 16.16994921875
Median age in population: 16.240234375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 104
Genome diversity (% unique Plush genomes):	 0.594
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 104
Syntactic diversity (% unique Push programs):	 0.594
Total error diversity:				 0.019
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 10146377
--- Timings ---
Current time: 1529615092095 milliseconds
Total Time:          41.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        19.3 seconds, 46.4%
Fitness Testing:     17.9 seconds, 43.0%
Report:               4.3 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Number IO problem report - generation 12
Test total error for best: 54310.0
Test mean error for best: 27.15500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 73.2889250004 
Correct output: 15.0922415815  | Program output: -40.9077584185
Correct output: -30.8202558445 | Program output: -0.8202558445 
Correct output: 70.2512965501  | Program output: 96.2512965501 
Correct output: 150.6666771001 | Program output: 72.6666771001 
Correct output: -148.0189802809 | Program output: -98.0189802809
Correct output: 91.9885288633  | Program output: 94.9885288633 
Correct output: 56.3430751406  | Program output: 2.3430751406  
Correct output: -55.2026859793 | Program output: -47.2026859793
Correct output: -31.9001885201 | Program output: 61.0998114799 
Correct output: 70.8415782878  | Program output: 66.8415782878 
Correct output: -70.0770879346 | Program output: 3.9229120654  
Correct output: 62.2573571201  | Program output: -34.7426428799
Correct output: -11.0880796195 | Program output: -1.0880796195 
Correct output: -98.0730811682 | Program output: -86.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 91.2519145493 
Correct output: -62.0820375564 | Program output: 22.9179624436 
Correct output: -85.5891975931 | Program output: -91.5891975931
Correct output: 26.7802144548  | Program output: -56.2197855452
Correct output: 1.2069497285   | Program output: 51.2069497285 
Correct output: 70.6151869811  | Program output: 27.6151869811 
Correct output: 27.2083659619  | Program output: 9.2083659619  
Correct output: 103.781099078  | Program output: 71.781099078  
Correct output: 66.4193519736  | Program output: 81.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction -83.72930746962447} {:instruction float_swap} {:instruction integer_swap} {:instruction float_frominteger} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mult} {:instruction integer_div} {:instruction print_float} {:instruction integer_max} {:instruction -9.568963984273623} {:instruction integer_div} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction in1} {:instruction integer_flush} {:instruction float_flush} {:instruction float_dup_items} {:instruction integer_mult})
Best program: (-83.72930746962447 float_swap integer_swap float_frominteger in1 float_dup_items float_dec float_yankdup integer_mult integer_div print_float integer_max -9.568963984273623 integer_div -56.50848481366526 integer_div in1 integer_flush float_flush float_dup_items integer_mult)
Errors: [19.0 2 56.0 10 30.0 1 26.0 2 78.0 3 50.0 2 3.0 1 54.0 2 8.0 2 93.0 11 4.0 2 74.0 13 97.0 13 10.0 1 12.0 2 3.0 1 82.0 1 85.0 12 6.0 2 83.0 11 50.0 1 43.0 2 18.0 2 32.0 3 15.0 2]
Total: 1135.0
Mean: 22.7
Genome size: 21
Size: 22
Percent parens: 0.045
--- Population Statistics ---
Average total errors in population: 2352.7773867000005
Median total errors in population: 1135.0
Error averages by case: (69.5033892 2.821 102.71313670000004 10.339 76.37995339999996 2.035 76.39238040000001 2.841 126.463118 3.792 97.5026153 2.866 55.606572299999975 1.884 100.59589970000002 2.772 57.245466300000004 2.836 136.38691340000005 11.296 55.97133839999999 2.834 116.93672939999998 13.074 141.85871799999995 13.105 58.62503459999998 1.868 61.07708980000001 2.818 54.41180050000003 1.855 126.82953789999995 1.827 128.5671443 12.188 55.20674770000002 2.791 127.99591909999998 11.248 96.94430170000004 1.877 92.07080420000001 2.836 67.60425280000001 2.799 82.7117017 3.704 66.0828219 2.788)
Error minima by case: (18.0 1 13.7431 8 14.7704 1 25.0 2 77.0 3 49.0 2 2.0 1 53.0 2 4.3805 2 27.683 9 3.0 2 10.4939 8 60.7759 9 9.0 1 11.0 2 2.0 1 7.0428 1 2.4988 10 0.8599 2 22.7275 10 0.6183 1 42.0 2 17.0 2 31.0 2 14.0 2)
Average genome size in population (length): 23.187
Average program size in population (points): 24.187
Average percent parens in population: 0.043
Minimum age in population: 14.4453125
Maximum age in population: 19.52197265625
Average age in population: 17.64912109375
Median age in population: 17.697021484375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 61
Genome diversity (% unique Plush genomes):	 0.625
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 61
Syntactic diversity (% unique Push programs):	 0.625
Total error diversity:				 0.025
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 10726102
--- Timings ---
Current time: 1529615095292 milliseconds
Total Time:          44.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.8 seconds, 46.6%
Fitness Testing:     19.2 seconds, 42.9%
Report:               4.6 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Number IO problem report - generation 13
Test total error for best: 54310.0
Test mean error for best: 27.15500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 73.2889250004 
Correct output: 15.0922415815  | Program output: -40.9077584185
Correct output: -30.8202558445 | Program output: -0.8202558445 
Correct output: 70.2512965501  | Program output: 96.2512965501 
Correct output: 150.6666771001 | Program output: 72.6666771001 
Correct output: -148.0189802809 | Program output: -98.0189802809
Correct output: 91.9885288633  | Program output: 94.9885288633 
Correct output: 56.3430751406  | Program output: 2.3430751406  
Correct output: -55.2026859793 | Program output: -47.2026859793
Correct output: -31.9001885201 | Program output: 61.0998114799 
Correct output: 70.8415782878  | Program output: 66.8415782878 
Correct output: -70.0770879346 | Program output: 3.9229120654  
Correct output: 62.2573571201  | Program output: -34.7426428799
Correct output: -11.0880796195 | Program output: -1.0880796195 
Correct output: -98.0730811682 | Program output: -86.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 91.2519145493 
Correct output: -62.0820375564 | Program output: 22.9179624436 
Correct output: -85.5891975931 | Program output: -91.5891975931
Correct output: 26.7802144548  | Program output: -56.2197855452
Correct output: 1.2069497285   | Program output: 51.2069497285 
Correct output: 70.6151869811  | Program output: 27.6151869811 
Correct output: 27.2083659619  | Program output: 9.2083659619  
Correct output: 103.781099078  | Program output: 71.781099078  
Correct output: 66.4193519736  | Program output: 81.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction -83.72930746962447} {:instruction float_swap} {:instruction float_frominteger} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mult} {:instruction integer_div} {:instruction print_float} {:instruction integer_max} {:instruction -9.568963984273623} {:instruction integer_div} {:instruction integer_mult})
Best program: (-83.72930746962447 float_swap float_frominteger in1 float_dup_items float_dec float_yankdup integer_mult integer_div print_float integer_max -9.568963984273623 integer_div integer_mult)
Errors: [19.0 2 56.0 10 30.0 1 26.0 2 78.0 3 50.0 2 3.0 1 54.0 2 8.0 2 93.0 11 4.0 2 74.0 13 97.0 13 10.0 1 12.0 2 3.0 1 82.0 1 85.0 12 6.0 2 83.0 11 50.0 1 43.0 2 18.0 2 32.0 3 15.0 2]
Total: 1135.0
Mean: 22.7
Genome size: 14
Size: 15
Percent parens: 0.067
--- Population Statistics ---
Average total errors in population: 2287.612698400001
Median total errors in population: 1135.0
Error averages by case: (66.67112979999997 2.771 100.11853130000003 10.322 75.0995287 2.042 73.57003310000003 2.797 123.82649729999994 3.749 94.42802309999996 2.831 52.70125569999998 1.842 99.25161640000003 2.734 54.28788219999997 2.792 133.70415010000002 11.298 53.09863319999998 2.806 115.39068519999996 13.08 139.38102419999998 13.1 56.81330039999999 1.828 57.97205990000002 2.773 51.57378440000003 1.803 124.17907599999995 1.793 125.75381889999996 12.186 52.118726200000026 2.75 125.5055226 11.232 94.22899300000002 1.84 89.36349260000003 2.798 65.06997780000002 2.747 79.9287308 3.673 63.24322549999998 2.746)
Error minima by case: (18.0 1 14.7431 10 29.0 1 25.0 2 77.0 3 33.7293 2 2.0 1 53.0 2 7.0 2 9.2707 9 3.0 2 9.7293 10 62.1966 10 9.0 1 11.0 2 2.0 1 1.7293 1 1.2707 8 0.372 2 23.7275 9 0.1665 1 42.0 2 17.0 2 31.0 2 14.0 2)
Average genome size in population (length): 22.802
Average program size in population (points): 23.802
Average percent parens in population: 0.044
Minimum age in population: 16.326171875
Maximum age in population: 21.055908203125
Average age in population: 19.17027978515625
Median age in population: 19.2816162109375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 47
Genome diversity (% unique Plush genomes):	 0.616
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.616
Total error diversity:				 0.026
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 11296152
--- Timings ---
Current time: 1529615098343 milliseconds
Total Time:          47.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.3 seconds, 46.7%
Fitness Testing:     20.4 seconds, 42.7%
Report:               5.0 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Number IO problem report - generation 14
Test total error for best: 54347.0
Test mean error for best: 27.17350
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 71.2889250004 
Correct output: 15.0922415815  | Program output: -42.9077584185
Correct output: -30.8202558445 | Program output: -2.8202558445 
Correct output: 70.2512965501  | Program output: 94.2512965501 
Correct output: 150.6666771001 | Program output: 70.6666771001 
Correct output: -148.0189802809 | Program output: -100.0189802809
Correct output: 91.9885288633  | Program output: 92.9885288633 
Correct output: 56.3430751406  | Program output: 0.3430751406  
Correct output: -55.2026859793 | Program output: -49.2026859793
Correct output: -31.9001885201 | Program output: 59.0998114799 
Correct output: 70.8415782878  | Program output: 64.8415782878 
Correct output: -70.0770879346 | Program output: 1.9229120654  
Correct output: 62.2573571201  | Program output: -36.7426428799
Correct output: -11.0880796195 | Program output: -3.0880796195 
Correct output: -98.0730811682 | Program output: -88.0730811682
Correct output: 45.954554541   | Program output: 40.954554541  
Correct output: 9.2519145493   | Program output: 89.2519145493 
Correct output: -62.0820375564 | Program output: 20.9179624436 
Correct output: -85.5891975931 | Program output: -93.5891975931
Correct output: 26.7802144548  | Program output: -58.2197855452
Correct output: 1.2069497285   | Program output: 49.2069497285 
Correct output: 70.6151869811  | Program output: 25.6151869811 
Correct output: 27.2083659619  | Program output: 7.2083659619  
Correct output: 103.781099078  | Program output: 69.781099078  
Correct output: 66.4193519736  | Program output: 79.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction integer_flush} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_div} {:instruction print_float} {:instruction integer_max} {:instruction -9.568963984273623} {:instruction integer_div} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction in1} {:instruction integer_flush} {:instruction float_flush} {:instruction float_dup_items} {:instruction integer_mult})
Best program: (float_dec integer_flush float_rot float_dec in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup integer_shove integer_div print_float integer_max -9.568963984273623 integer_div -56.50848481366526 integer_div in1 integer_flush float_flush float_dup_items integer_mult)
Errors: [17.0 2 58.0 10 28.0 2 24.0 2 80.0 2 48.0 2 1.0 1 56.0 2 6.0 2 91.0 12 6.0 2 72.0 13 99.0 13 8.0 2 10.0 1 5.0 1 80.0 1 83.0 13 8.0 2 85.0 11 48.0 2 45.0 2 20.0 1 34.0 3 13.0 2]
Total: 1131.0
Mean: 22.62
Genome size: 24
Size: 25
Percent parens: 0.040
--- Population Statistics ---
Average total errors in population: 2303.171023400001
Median total errors in population: 1135.0
Error averages by case: (67.254643 2.751 101.03231819999998 10.311 75.0786344 1.935 74.1384029 2.776 124.32710739999996 3.741 95.2216914 2.8 53.18116839999999 1.827 99.24552899999999 2.725 55.23174169999999 2.771 134.65745070000003 11.269 53.76188149999999 2.793 115.69386519999998 13.075 140.20002779999996 13.092 56.71772949999997 1.793 58.871283800000015 2.761 52.33027190000001 1.79 124.99840689999999 1.776 126.78772479999998 12.164 53.03851110000001 2.749 126.4518947 11.22 95.06262870000002 1.804 90.07811820000002 2.789 65.66530930000002 2.74 80.51807299999999 3.668 63.7756099 2.731)
Error minima by case: (10.5596 1 15.6877 10 0.1797 1 24.0 2 73.6667 2 48.0 1 1.0 1 3.3431 2 6.0 2 7.0 1 3.0 2 4.9229 2 33.7426 10 0.0881 1 10.0 1 2.0 1 0.7293 1 15.0 2 0.8599 2 25.8338 10 0.6183 1 28.6152 2 10.2084 1 31.0 3 13.0 2)
Average genome size in population (length): 22.798
Average program size in population (points): 23.798
Average percent parens in population: 0.044
Minimum age in population: 17.71923828125
Maximum age in population: 22.654296875
Average age in population: 20.66176403808594
Median age in population: 20.6998291015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 40
Genome diversity (% unique Plush genomes):	 0.614
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.614
Total error diversity:				 0.027
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 11866102
--- Timings ---
Current time: 1529615101428 milliseconds
Total Time:          50.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        23.8 seconds, 46.9%
Fitness Testing:     21.7 seconds, 42.6%
Report:               5.3 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Number IO problem report - generation 15
Test total error for best: 54347.0
Test mean error for best: 27.17350
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 71.2889250004 
Correct output: 15.0922415815  | Program output: -42.9077584185
Correct output: -30.8202558445 | Program output: -2.8202558445 
Correct output: 70.2512965501  | Program output: 94.2512965501 
Correct output: 150.6666771001 | Program output: 70.6666771001 
Correct output: -148.0189802809 | Program output: -100.0189802809
Correct output: 91.9885288633  | Program output: 92.9885288633 
Correct output: 56.3430751406  | Program output: 0.3430751406  
Correct output: -55.2026859793 | Program output: -49.2026859793
Correct output: -31.9001885201 | Program output: 59.0998114799 
Correct output: 70.8415782878  | Program output: 64.8415782878 
Correct output: -70.0770879346 | Program output: 1.9229120654  
Correct output: 62.2573571201  | Program output: -36.7426428799
Correct output: -11.0880796195 | Program output: -3.0880796195 
Correct output: -98.0730811682 | Program output: -88.0730811682
Correct output: 45.954554541   | Program output: 40.954554541  
Correct output: 9.2519145493   | Program output: 89.2519145493 
Correct output: -62.0820375564 | Program output: 20.9179624436 
Correct output: -85.5891975931 | Program output: -93.5891975931
Correct output: 26.7802144548  | Program output: -58.2197855452
Correct output: 1.2069497285   | Program output: 49.2069497285 
Correct output: 70.6151869811  | Program output: 25.6151869811 
Correct output: 27.2083659619  | Program output: 7.2083659619  
Correct output: 103.781099078  | Program output: 69.781099078  
Correct output: 66.4193519736  | Program output: 79.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mult} {:instruction integer_flush} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_div} {:instruction print_float} {:instruction integer_max} {:instruction -9.568963984273623} {:instruction integer_div} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction in1} {:instruction integer_flush} {:instruction float_flush} {:instruction float_dup_items} {:instruction integer_mult})
Best program: (float_mult integer_flush float_rot float_dec in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup integer_shove integer_div print_float integer_max -9.568963984273623 integer_div -56.50848481366526 integer_div in1 integer_flush float_flush float_dup_items integer_mult)
Errors: [17.0 2 58.0 10 28.0 2 24.0 2 80.0 2 48.0 2 1.0 1 56.0 2 6.0 2 91.0 12 6.0 2 72.0 13 99.0 13 8.0 2 10.0 1 5.0 1 80.0 1 83.0 13 8.0 2 85.0 11 48.0 2 45.0 2 20.0 1 34.0 3 13.0 2]
Total: 1131.0
Mean: 22.62
Genome size: 24
Size: 25
Percent parens: 0.040
--- Population Statistics ---
Average total errors in population: 2284.4986598000014
Median total errors in population: 1135.0
Error averages by case: (66.39742549999998 2.748 100.25812900000004 10.363 75.0650911 1.955 73.23860750000001 2.772 123.63156089999994 3.727 94.11825789999997 2.793 52.23565549999998 1.814 99.25719130000002 2.71 54.16902089999998 2.779 133.78065810000004 11.319 52.76160089999998 2.776 115.44266729999995 13.108 139.50144659999998 13.142 56.74027109999998 1.791 57.70455890000001 2.749 51.32800410000002 1.772 124.21271669999996 1.766 125.82521149999995 12.213 51.90398650000002 2.739 125.69102840000001 11.267 94.22413250000001 1.81 89.29417380000005 2.79 65.05837400000001 2.727 79.72799069999999 3.669 62.908899099999985 2.723)
Error minima by case: (17.0 1 16.8956 10 28.0 1 24.0 2 77.0 2 33.7293 2 1.0 1 53.0 2 6.0 2 9.2707 9 3.0 2 9.7293 9 63.985 11 8.0 1 10.0 1 2.0 1 1.7293 1 1.2707 8 0.8599 2 26.8093 11 1.2749 1 42.0 2 17.0 1 31.0 2 13.0 2)
Average genome size in population (length): 22.544
Average program size in population (points): 23.544
Average percent parens in population: 0.044
Minimum age in population: 18.71923828125
Maximum age in population: 24.0716552734375
Average age in population: 22.14699877929688
Median age in population: 22.21575927734375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 37
Genome diversity (% unique Plush genomes):	 0.631
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 37
Syntactic diversity (% unique Push programs):	 0.631
Total error diversity:				 0.02
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 12429702
--- Timings ---
Current time: 1529615104524 milliseconds
Total Time:          54.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        25.4 seconds, 47.0%
Fitness Testing:     22.9 seconds, 42.5%
Report:               5.6 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Number IO problem report - generation 16
Test total error for best: 54347.0
Test mean error for best: 27.17350
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 71.2889250004 
Correct output: 15.0922415815  | Program output: -42.9077584185
Correct output: -30.8202558445 | Program output: -2.8202558445 
Correct output: 70.2512965501  | Program output: 94.2512965501 
Correct output: 150.6666771001 | Program output: 70.6666771001 
Correct output: -148.0189802809 | Program output: -100.0189802809
Correct output: 91.9885288633  | Program output: 92.9885288633 
Correct output: 56.3430751406  | Program output: 0.3430751406  
Correct output: -55.2026859793 | Program output: -49.2026859793
Correct output: -31.9001885201 | Program output: 59.0998114799 
Correct output: 70.8415782878  | Program output: 64.8415782878 
Correct output: -70.0770879346 | Program output: 1.9229120654  
Correct output: 62.2573571201  | Program output: -36.7426428799
Correct output: -11.0880796195 | Program output: -3.0880796195 
Correct output: -98.0730811682 | Program output: -88.0730811682
Correct output: 45.954554541   | Program output: 40.954554541  
Correct output: 9.2519145493   | Program output: 89.2519145493 
Correct output: -62.0820375564 | Program output: 20.9179624436 
Correct output: -85.5891975931 | Program output: -93.5891975931
Correct output: 26.7802144548  | Program output: -58.2197855452
Correct output: 1.2069497285   | Program output: 49.2069497285 
Correct output: 70.6151869811  | Program output: 25.6151869811 
Correct output: 27.2083659619  | Program output: 7.2083659619  
Correct output: 103.781099078  | Program output: 69.781099078  
Correct output: 66.4193519736  | Program output: 79.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_div} {:instruction print_float} {:instruction integer_max} {:instruction -9.568963984273623} {:instruction integer_div} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction in1} {:instruction integer_flush} {:instruction float_flush} {:instruction float_dup_items} {:instruction integer_mult})
Best program: (integer_flush float_rot float_dec in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup integer_shove integer_div print_float integer_max -9.568963984273623 integer_div -56.50848481366526 integer_div in1 integer_flush float_flush float_dup_items integer_mult)
Errors: [17.0 2 58.0 10 28.0 2 24.0 2 80.0 2 48.0 2 1.0 1 56.0 2 6.0 2 91.0 12 6.0 2 72.0 13 99.0 13 8.0 2 10.0 1 5.0 1 80.0 1 83.0 13 8.0 2 85.0 11 48.0 2 45.0 2 20.0 1 34.0 3 13.0 2]
Total: 1131.0
Mean: 22.62
Genome size: 23
Size: 24
Percent parens: 0.042
--- Population Statistics ---
Average total errors in population: 2596.4319607000007
Median total errors in population: 1135.0
Error averages by case: (79.14528170000001 2.943 112.12400100000005 10.407 86.565034 2.146 86.0022779 2.965 135.82053749999994 3.871 107.08415369999992 3.009 65.56900299999997 2.026 110.73991020000004 2.904 67.23423689999996 2.983 145.16883620000002 11.393 66.04980849999998 2.968 126.83360029999996 13.122 150.88390429999998 13.141 68.42382949999998 2.032 71.00259150000002 2.922 64.50885790000004 1.971 135.54325879999996 1.965 137.6098711 12.285 65.35876320000003 2.935 137.13416479999998 11.281 106.10562080000003 2.04 101.73511140000004 2.961 77.59015360000001 2.869 92.516956 3.824 75.8031969 2.916)
Error minima by case: (10.5596 1 12.6171 10 14.7704 1 23.0 2 77.0 2 47.0 2 0.0 0 53.0 2 5.0 1 30.0016 8 3.0 2 13.6522 8 59.7822 10 7.0 1 9.0 1 2.0 1 0.7293 1 21.6473 10 0.8599 2 23.7275 9 0.1665 1 42.0 2 17.0 1 31.0 2 12.0 2)
Average genome size in population (length): 22.545
Average program size in population (points): 23.545
Average percent parens in population: 0.044
Minimum age in population: 19.83984375
Maximum age in population: 25.53146362304688
Average age in population: 23.62994027709961
Median age in population: 23.69924926757812
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 33
Genome diversity (% unique Plush genomes):	 0.628
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.628
Total error diversity:				 0.027
Error (vector) diversity:			 0.031
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 12993327
--- Timings ---
Current time: 1529615107528 milliseconds
Total Time:          57.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.9 seconds, 47.1%
Fitness Testing:     24.2 seconds, 42.5%
Report:               5.8 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Number IO problem report - generation 17
Test total error for best: 54347.0
Test mean error for best: 27.17350
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 71.2889250004 
Correct output: 15.0922415815  | Program output: -42.9077584185
Correct output: -30.8202558445 | Program output: -2.8202558445 
Correct output: 70.2512965501  | Program output: 94.2512965501 
Correct output: 150.6666771001 | Program output: 70.6666771001 
Correct output: -148.0189802809 | Program output: -100.0189802809
Correct output: 91.9885288633  | Program output: 92.9885288633 
Correct output: 56.3430751406  | Program output: 0.3430751406  
Correct output: -55.2026859793 | Program output: -49.2026859793
Correct output: -31.9001885201 | Program output: 59.0998114799 
Correct output: 70.8415782878  | Program output: 64.8415782878 
Correct output: -70.0770879346 | Program output: 1.9229120654  
Correct output: 62.2573571201  | Program output: -36.7426428799
Correct output: -11.0880796195 | Program output: -3.0880796195 
Correct output: -98.0730811682 | Program output: -88.0730811682
Correct output: 45.954554541   | Program output: 40.954554541  
Correct output: 9.2519145493   | Program output: 89.2519145493 
Correct output: -62.0820375564 | Program output: 20.9179624436 
Correct output: -85.5891975931 | Program output: -93.5891975931
Correct output: 26.7802144548  | Program output: -58.2197855452
Correct output: 1.2069497285   | Program output: 49.2069497285 
Correct output: 70.6151869811  | Program output: 25.6151869811 
Correct output: 27.2083659619  | Program output: 7.2083659619  
Correct output: 103.781099078  | Program output: 69.781099078  
Correct output: 66.4193519736  | Program output: 79.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction integer_flush} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_div} {:instruction print_float} {:instruction integer_max} {:instruction -9.568963984273623} {:instruction integer_div} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction in1} {:instruction integer_flush} {:instruction float_flush} {:instruction float_dup_items} {:instruction integer_mult})
Best program: (float_dec integer_flush float_rot float_dec in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup integer_shove integer_div print_float integer_max -9.568963984273623 integer_div -56.50848481366526 integer_div in1 integer_flush float_flush float_dup_items integer_mult)
Errors: [17.0 2 58.0 10 28.0 2 24.0 2 80.0 2 48.0 2 1.0 1 56.0 2 6.0 2 91.0 12 6.0 2 72.0 13 99.0 13 8.0 2 10.0 1 5.0 1 80.0 1 83.0 13 8.0 2 85.0 11 48.0 2 45.0 2 20.0 1 34.0 3 13.0 2]
Total: 1131.0
Mean: 22.62
Genome size: 24
Size: 25
Percent parens: 0.040
--- Population Statistics ---
Average total errors in population: 2315.6575754000005
Median total errors in population: 1135.0
Error averages by case: (66.87331940000001 2.684 101.9749671 10.293 76.3404305 2.053 73.6513351 2.687 124.3453545 3.448 95.73668450000001 2.754 52.340058799999994 1.737 100.6343118 2.667 55.5976541 2.717 135.503343 11.497 53.8761386 2.694 117.456981 13.118 141.08747370000003 13.118 57.658701599999986 1.978 59.4929179 2.486 52.611311900000004 1.693 125.4395803 1.704 127.82679150000001 12.416 54.6119394 2.693 127.4714974 11.229 95.29150729999999 1.941 90.49075160000001 2.694 66.45090830000001 2.453 80.59274539999998 3.599 63.2718707 2.676)
Error minima by case: (16.0 1 13.2454 10 27.0 1 23.0 2 77.0 2 36.7293 2 0.0 0 53.0 2 5.0 1 6.2707 9 3.0 2 12.6522 8 60.8397 10 7.0 1 9.0 1 2.0 1 4.7293 1 1.7293 8 0.1401 2 16.8457 10 0.3985 1 42.0 2 17.0 1 31.0 2 12.0 2)
Average genome size in population (length): 22.863
Average program size in population (points): 23.863
Average percent parens in population: 0.043
Minimum age in population: 21.125
Maximum age in population: 26.92720031738281
Average age in population: 25.16552561950684
Median age in population: 25.25196838378906
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 99
Genome diversity (% unique Plush genomes):	 0.585
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 99
Syntactic diversity (% unique Push programs):	 0.585
Total error diversity:				 0.028
Error (vector) diversity:			 0.029
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 13564902
--- Timings ---
Current time: 1529615110435 milliseconds
Total Time:          59.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.2 seconds, 47.1%
Fitness Testing:     25.5 seconds, 42.5%
Report:               6.1 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Number IO problem report - generation 18
Test total error for best: 54436.0
Test mean error for best: 27.21800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 69.2889250004 
Correct output: 15.0922415815  | Program output: -44.9077584185
Correct output: -30.8202558445 | Program output: -4.8202558445 
Correct output: 70.2512965501  | Program output: 92.2512965501 
Correct output: 150.6666771001 | Program output: 68.6666771001 
Correct output: -148.0189802809 | Program output: -102.0189802809
Correct output: 91.9885288633  | Program output: 90.9885288633 
Correct output: 56.3430751406  | Program output: -1.6569248594 
Correct output: -55.2026859793 | Program output: -51.2026859793
Correct output: -31.9001885201 | Program output: 57.0998114799 
Correct output: 70.8415782878  | Program output: 62.8415782878 
Correct output: -70.0770879346 | Program output: -0.0770879346 
Correct output: 62.2573571201  | Program output: -38.7426428799
Correct output: -11.0880796195 | Program output: -5.0880796195 
Correct output: -98.0730811682 | Program output: -90.0730811682
Correct output: 45.954554541   | Program output: 38.954554541  
Correct output: 9.2519145493   | Program output: 87.2519145493 
Correct output: -62.0820375564 | Program output: 18.9179624436 
Correct output: -85.5891975931 | Program output: -95.5891975931
Correct output: 26.7802144548  | Program output: -60.2197855452
Correct output: 1.2069497285   | Program output: 47.2069497285 
Correct output: 70.6151869811  | Program output: 23.6151869811 
Correct output: 27.2083659619  | Program output: 5.2083659619  
Correct output: 103.781099078  | Program output: 67.781099078  
Correct output: 66.4193519736  | Program output: 77.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction integer_flush} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_div} {:instruction print_float} {:instruction integer_max} {:instruction -9.568963984273623} {:instruction integer_div} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction in1} {:instruction integer_flush} {:instruction float_flush} {:instruction float_dup_items} {:instruction integer_mult})
Best program: (float_dec integer_flush float_rot float_dec in1 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_dec float_dec float_yankdup integer_shove integer_div print_float integer_max -9.568963984273623 integer_div -56.50848481366526 integer_div in1 integer_flush float_flush float_dup_items integer_mult)
Errors: [15.0 2 60.0 10 26.0 2 22.0 2 82.0 3 46.0 2 1.0 1 58.0 12 4.0 1 89.0 12 8.0 2 70.0 1 101.0 13 6.0 2 8.0 1 7.0 2 78.0 2 81.0 13 10.0 1 87.0 11 46.0 2 47.0 2 22.0 2 36.0 3 11.0 2]
Total: 1127.0
Mean: 22.54
Genome size: 27
Size: 28
Percent parens: 0.036
--- Population Statistics ---
Average total errors in population: 2183.3517558
Median total errors in population: 1131.0
Error averages by case: (60.268085899999996 2.567 98.2775961 10.224 70.28317419999999 2.474 67.01281789999999 2.567 120.02584609999998 2.795 89.6415503 2.664 45.37403870000001 1.609 96.66903149999999 2.617 49.4040393 2.596 130.0217867 11.993 49.27544389999999 2.573 111.94841620000001 13.039 137.5585958 13.073 51.3421296 2.422 53.2551345 1.841 48.145583099999996 1.576 119.667534 1.584 122.38882379999998 12.922 50.59101879999999 2.595 123.99129250000001 11.173 89.28406340000001 2.373 86.318696 2.569 62.26342689999999 1.792 76.1004314 3.489 56.5541992 2.562)
Error minima by case: (15.0 1 13.2454 10 26.0 1 22.0 2 77.0 2 33.7293 2 0.0 0 53.0 2 4.0 1 9.2707 10 3.0 2 9.7293 1 60.8397 10 6.0 1 8.0 1 2.0 1 1.7293 1 1.2707 8 0.8599 1 16.8457 10 0.6183 1 42.0 2 17.0 1 31.0 2 11.0 2)
Average genome size in population (length): 24.132
Average program size in population (points): 25.132
Average percent parens in population: 0.041
Minimum age in population: 24.56187438964844
Maximum age in population: 28.50942230224609
Average age in population: 26.74483125305176
Median age in population: 26.77819442749023
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 291
Genome diversity (% unique Plush genomes):	 0.426
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 291
Syntactic diversity (% unique Push programs):	 0.426
Total error diversity:				 0.023
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 14168252
--- Timings ---
Current time: 1529615113586 milliseconds
Total Time:          63.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.7 seconds, 47.1%
Fitness Testing:     26.8 seconds, 42.6%
Report:               6.4 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Number IO problem report - generation 19
Test total error for best: 54436.0
Test mean error for best: 27.21800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 69.2889250004 
Correct output: 15.0922415815  | Program output: -44.9077584185
Correct output: -30.8202558445 | Program output: -4.8202558445 
Correct output: 70.2512965501  | Program output: 92.2512965501 
Correct output: 150.6666771001 | Program output: 68.6666771001 
Correct output: -148.0189802809 | Program output: -102.0189802809
Correct output: 91.9885288633  | Program output: 90.9885288633 
Correct output: 56.3430751406  | Program output: -1.6569248594 
Correct output: -55.2026859793 | Program output: -51.2026859793
Correct output: -31.9001885201 | Program output: 57.0998114799 
Correct output: 70.8415782878  | Program output: 62.8415782878 
Correct output: -70.0770879346 | Program output: -0.0770879346 
Correct output: 62.2573571201  | Program output: -38.7426428799
Correct output: -11.0880796195 | Program output: -5.0880796195 
Correct output: -98.0730811682 | Program output: -90.0730811682
Correct output: 45.954554541   | Program output: 38.954554541  
Correct output: 9.2519145493   | Program output: 87.2519145493 
Correct output: -62.0820375564 | Program output: 18.9179624436 
Correct output: -85.5891975931 | Program output: -95.5891975931
Correct output: 26.7802144548  | Program output: -60.2197855452
Correct output: 1.2069497285   | Program output: 47.2069497285 
Correct output: 70.6151869811  | Program output: 23.6151869811 
Correct output: 27.2083659619  | Program output: 5.2083659619  
Correct output: 103.781099078  | Program output: 67.781099078  
Correct output: 66.4193519736  | Program output: 77.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction integer_flush} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_div} {:instruction print_float} {:instruction integer_max} {:instruction -9.568963984273623} {:instruction integer_div} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction in1} {:instruction integer_flush} {:instruction float_flush} {:instruction float_dup_items} {:instruction integer_mult})
Best program: (float_dec integer_flush float_rot float_dec in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_yankdup integer_shove integer_div print_float integer_max -9.568963984273623 integer_div -56.50848481366526 integer_div in1 integer_flush float_flush float_dup_items integer_mult)
Errors: [15.0 2 60.0 10 26.0 2 22.0 2 82.0 3 46.0 2 1.0 1 58.0 12 4.0 1 89.0 12 8.0 2 70.0 1 101.0 13 6.0 2 8.0 1 7.0 2 78.0 2 81.0 13 10.0 1 87.0 11 46.0 2 47.0 2 22.0 2 36.0 3 11.0 2]
Total: 1127.0
Mean: 22.54
Genome size: 27
Size: 28
Percent parens: 0.036
--- Population Statistics ---
Average total errors in population: 2301.0412023999997
Median total errors in population: 1131.0
Error averages by case: (64.64803780000001 2.617 103.1017825 10.226 74.6160719 2.702 71.42142180000002 2.626 124.56318370000001 2.741 94.29848849999999 2.733 49.9036224 1.674 101.41572009999999 3.031 54.02645160000001 2.626 134.2858044 12.146 54.3791738 2.631 116.43002150000002 12.716 142.165042 13.055 55.6181022 2.649 58.164638 1.772 53.2161895 1.671 123.89997680000002 1.687 126.8082444 13.086 56.2868781 2.639 128.7193584 11.195 93.5257678 2.586 91.069811 2.632 67.1768883 1.742 80.965441 3.551 60.967084899999996 2.634)
Error minima by case: (14.0 1 13.2454 9 18.9083 1 21.0 2 6.3333 2 45.0 2 0.0 0 52.6569 2 0.1043 1 19.9882 9 3.0 2 14.9787 1 60.8397 10 0.4809 1 7.0 1 2.0 1 5.8193 1 6.9837 7 5.0 1 16.8457 10 0.7168 1 16.3848 2 9.7916 1 31.0 2 10.0 1)
Average genome size in population (length): 24.582
Average program size in population (points): 25.582
Average percent parens in population: 0.040
Minimum age in population: 25.829345703125
Maximum age in population: 30.18366622924805
Average age in population: 28.28770911407471
Median age in population: 28.32070350646973
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 279
Genome diversity (% unique Plush genomes):	 0.429
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 279
Syntactic diversity (% unique Push programs):	 0.429
Total error diversity:				 0.024
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 14782802
--- Timings ---
Current time: 1529615116882 milliseconds
Total Time:          66.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.2 seconds, 47.0%
Fitness Testing:     28.2 seconds, 42.6%
Report:               6.8 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Number IO problem report - generation 20
Test total error for best: 54533.0
Test mean error for best: 27.26650
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 67.2889250004 
Correct output: 15.0922415815  | Program output: -46.9077584185
Correct output: -30.8202558445 | Program output: -6.8202558445 
Correct output: 70.2512965501  | Program output: 90.2512965501 
Correct output: 150.6666771001 | Program output: 66.6666771001 
Correct output: -148.0189802809 | Program output: -104.0189802809
Correct output: 91.9885288633  | Program output: 88.9885288633 
Correct output: 56.3430751406  | Program output: -3.6569248594 
Correct output: -55.2026859793 | Program output: -53.2026859793
Correct output: -31.9001885201 | Program output: 55.0998114799 
Correct output: 70.8415782878  | Program output: 60.8415782878 
Correct output: -70.0770879346 | Program output: -2.0770879346 
Correct output: 62.2573571201  | Program output: -40.7426428799
Correct output: -11.0880796195 | Program output: -7.0880796195 
Correct output: -98.0730811682 | Program output: -92.0730811682
Correct output: 45.954554541   | Program output: 36.954554541  
Correct output: 9.2519145493   | Program output: 85.2519145493 
Correct output: -62.0820375564 | Program output: 16.9179624436 
Correct output: -85.5891975931 | Program output: -97.5891975931
Correct output: 26.7802144548  | Program output: -62.2197855452
Correct output: 1.2069497285   | Program output: 45.2069497285 
Correct output: 70.6151869811  | Program output: 21.6151869811 
Correct output: 27.2083659619  | Program output: 3.2083659619  
Correct output: 103.781099078  | Program output: 65.781099078  
Correct output: 66.4193519736  | Program output: 75.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction integer_flush} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_flush} {:instruction float_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction integer_div} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction in1} {:instruction integer_flush} {:instruction float_flush} {:instruction float_div} {:instruction integer_mult})
Best program: (float_dec integer_flush float_rot float_dec in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup integer_flush float_rot float_dec float_dup float_dup_items float_dec float_dec float_dec float_yankdup integer_shove integer_div print_float float_tan -9.568963984273623 integer_div -56.50848481366526 integer_div in1 integer_flush float_flush float_div integer_mult)
Errors: [13.0 2 62.0 10 24.0 2 20.0 1 84.0 3 44.0 2 3.0 2 60.0 12 2.0 1 87.0 12 10.0 1 68.0 2 103.0 13 4.0 2 6.0 1 9.0 2 76.0 2 79.0 12 12.0 2 89.0 11 44.0 2 49.0 2 24.0 2 38.0 3 9.0 2]
Total: 1125.0
Mean: 22.5
Genome size: 33
Size: 34
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 2536.6559834000004
Median total errors in population: 1131.0
Error averages by case: (73.95322080000001 2.714 112.9772395 10.287 84.0662362 2.744 80.5951986 2.717 133.9235704 2.978 103.0890601 2.828 59.0728128 1.783 110.6548861 4.687 63.4717763 2.564 143.2851558 12.247 63.6916843 2.716 125.10322049999999 10.982 151.61185820000003 13.137 65.2659661 2.743 67.3206328 1.859 62.55590049999999 1.917 132.9888529 1.929 135.7633653 13.165 66.1728014 2.6 138.37791190000002 11.271 102.88145530000001 2.68 100.8692799 2.723 76.4684748 1.982 90.6776003 3.629 70.2388226 2.697)
Error minima by case: (13.0 1 15.0922 9 24.0 1 20.0 1 8.3333 2 44.0 2 0.0 0 17.6749 2 2.0 1 27.0016 10 3.0 1 17.6522 1 60.6749 9 4.0 1 6.0 1 2.0 1 9.2519 1 25.6473 10 2.1401 1 26.7275 10 1.2069 1 6.6749 2 11.7916 1 4.3251 2 9.0 1)
Average genome size in population (length): 25.185
Average program size in population (points): 26.185
Average percent parens in population: 0.039
Minimum age in population: 26.829345703125
Maximum age in population: 31.7113208770752
Average age in population: 29.81853461647034
Median age in population: 29.89375305175781
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 180
Genome diversity (% unique Plush genomes):	 0.501
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 180
Syntactic diversity (% unique Push programs):	 0.501
Total error diversity:				 0.02
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 15412427
--- Timings ---
Current time: 1529615119899 milliseconds
Total Time:          69.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.6 seconds, 47.0%
Fitness Testing:     29.5 seconds, 42.5%
Report:               7.2 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Number IO problem report - generation 21
Test total error for best: 54619.0
Test mean error for best: 27.30950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 65.2889250004 
Correct output: 15.0922415815  | Program output: -48.9077584185
Correct output: -30.8202558445 | Program output: -8.8202558445 
Correct output: 70.2512965501  | Program output: 88.2512965501 
Correct output: 150.6666771001 | Program output: 64.6666771001 
Correct output: -148.0189802809 | Program output: -106.0189802809
Correct output: 91.9885288633  | Program output: 86.9885288633 
Correct output: 56.3430751406  | Program output: -5.6569248594 
Correct output: -55.2026859793 | Program output: -55.2026859793
Correct output: -31.9001885201 | Program output: 53.0998114799 
Correct output: 70.8415782878  | Program output: 58.8415782878 
Correct output: -70.0770879346 | Program output: -4.0770879346 
Correct output: 62.2573571201  | Program output: -42.7426428799
Correct output: -11.0880796195 | Program output: -9.0880796195 
Correct output: -98.0730811682 | Program output: -94.0730811682
Correct output: 45.954554541   | Program output: 34.954554541  
Correct output: 9.2519145493   | Program output: 83.2519145493 
Correct output: -62.0820375564 | Program output: 14.9179624436 
Correct output: -85.5891975931 | Program output: -99.5891975931
Correct output: 26.7802144548  | Program output: -64.2197855452
Correct output: 1.2069497285   | Program output: 43.2069497285 
Correct output: 70.6151869811  | Program output: 19.6151869811 
Correct output: 27.2083659619  | Program output: 1.2083659619  
Correct output: 103.781099078  | Program output: 63.781099078  
Correct output: 66.4193519736  | Program output: 73.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction integer_flush} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_div} {:instruction print_float} {:instruction integer_max} {:instruction -9.568963984273623} {:instruction integer_div} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction in1} {:instruction integer_flush} {:instruction float_flush} {:instruction float_dup_items} {:instruction integer_mult})
Best program: (float_dec integer_flush float_rot float_dec in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup integer_shove float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_yankdup float_dec float_dec float_yankdup integer_shove integer_div print_float integer_max -9.568963984273623 integer_div -56.50848481366526 integer_div in1 integer_flush float_flush float_dup_items integer_mult)
Errors: [11.0 2 64.0 10 22.0 2 18.0 2 86.0 3 42.0 2 5.0 2 62.0 11 0.0 0 85.0 11 12.0 2 66.0 2 105.0 12 2.0 2 4.0 1 11.0 2 74.0 2 77.0 13 14.0 2 91.0 11 42.0 2 51.0 2 26.0 2 40.0 2 7.0 2]
Total: 1121.0
Mean: 22.42
Genome size: 35
Size: 36
Percent parens: 0.028
--- Population Statistics ---
Average total errors in population: 2442.6155784
Median total errors in population: 1127.0
Error averages by case: (69.32809669999999 2.74 110.1096357 10.193 78.03006520000001 2.787 76.08549130000002 2.73 132.1700701 3.502 98.89488130000001 2.863 56.52115819999999 1.915 107.74821019999999 9.672 58.658660600000005 2.09 137.963063 12.212 62.21824919999999 2.735 119.49594940000001 5.119 148.9636257 13.11 59.21150009999999 2.764 62.86633210000001 1.885 60.9654551 2.446 127.6505436 2.455 130.2114941 13.114 63.864754600000005 2.234 135.4812071 11.238 97.6255878 2.711 98.25515279999999 2.74 73.7677166 2.498 88.7173303 3.658 65.7473476 2.653)
Error minima by case: (10.0 1 13.5384 9 15.4548 1 17.0 1 9.3333 2 41.0 2 0.0 0 53.0 2 0.0 0 14.3748 7 3.0 1 13.5686 1 60.7035 9 1.0 1 3.0 1 2.0 1 7.6981 1 5.5736 9 3.1401 1 25.2264 9 0.3469 1 19.3848 1 12.7916 1 31.0 2 6.0 1)
Average genome size in population (length): 26.964
Average program size in population (points): 27.964
Average percent parens in population: 0.036
Minimum age in population: 28.50595092773438
Maximum age in population: 33.20406055450439
Average age in population: 31.30191398525238
Median age in population: 31.36661148071289
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 84
Genome diversity (% unique Plush genomes):	 0.475
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 84
Syntactic diversity (% unique Push programs):	 0.475
Total error diversity:				 0.034
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 16086527
--- Timings ---
Current time: 1529615122950 milliseconds
Total Time:          72.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.0 seconds, 47.0%
Fitness Testing:     30.8 seconds, 42.5%
Report:               7.5 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Number IO problem report - generation 22
Test total error for best: 52268.0
Test mean error for best: 26.13400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 70.2889250004 
Correct output: 15.0922415815  | Program output: -39.9077584185
Correct output: -30.8202558445 | Program output: -3.8202558445 
Correct output: 70.2512965501  | Program output: 93.2512965501 
Correct output: 150.6666771001 | Program output: 73.6666771001 
Correct output: -148.0189802809 | Program output: -101.0189802809
Correct output: 91.9885288633  | Program output: 91.9885288633 
Correct output: 56.3430751406  | Program output: 3.3430751406  
Correct output: -55.2026859793 | Program output: -50.2026859793
Correct output: -31.9001885201 | Program output: 58.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: 0.9229120654  
Correct output: 62.2573571201  | Program output: -33.7426428799
Correct output: -11.0880796195 | Program output: -4.0880796195 
Correct output: -98.0730811682 | Program output: -89.0730811682
Correct output: 45.954554541   | Program output: 43.954554541  
Correct output: 9.2519145493   | Program output: 88.2519145493 
Correct output: -62.0820375564 | Program output: 19.9179624436 
Correct output: -85.5891975931 | Program output: -90.5891975931
Correct output: 26.7802144548  | Program output: -55.2197855452
Correct output: 1.2069497285   | Program output: 48.2069497285 
Correct output: 70.6151869811  | Program output: 28.6151869811 
Correct output: 27.2083659619  | Program output: 10.2083659619 
Correct output: 103.781099078  | Program output: 72.781099078  
Correct output: 66.4193519736  | Program output: 78.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction integer_flush} {:instruction float_rot} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction in2} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_div} {:instruction print_float} {:instruction integer_max} {:instruction integer_mult} {:instruction integer_div} {:instruction float_dup_items} {:instruction integer_mult})
Best program: (float_dec integer_flush float_rot float_dec in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup in2 float_dec float_yankdup integer_shove integer_div print_float integer_max integer_mult integer_div float_dup_items integer_mult)
Errors: [16.0 2 55.0 10 27.0 1 23.0 2 77.0 3 47.0 2 0.0 0 53.0 2 5.0 1 90.0 12 3.0 2 71.0 12 96.0 13 7.0 2 9.0 2 2.0 1 79.0 2 82.0 13 5.0 2 82.0 12 47.0 2 42.0 2 17.0 2 31.0 3 12.0 2]
Total: 1085.0
Mean: 21.7
Genome size: 23
Size: 24
Percent parens: 0.042
--- Population Statistics ---
Average total errors in population: 2576.4239282
Median total errors in population: 1127.0
Error averages by case: (74.21889739999999 2.751 116.59536499999999 10.139 82.18464949999999 2.794 80.89576350000002 2.671 138.1365789 3.719 103.50964290000002 2.869 62.45699079999999 2.064 113.11803759999998 11.832 63.795063999999996 1.878 142.81848970000001 12.154 68.6480284 2.677 123.44893379999998 2.709 155.17963529999997 13.035 63.37065569999999 2.788 67.7999424 1.907 67.46082460000001 2.661 132.48790629999996 2.687 134.4112468 12.999 70.4022438 2.19 141.86386789999997 11.206 102.58026760000001 2.708 103.94852880000002 2.749 79.24441400000002 2.731 94.9737354 3.68 70.6172181 2.659)
Error minima by case: (9.0 1 13.0922 9 20.0 1 16.0 1 8.3333 2 40.0 1 0.0 0 44.7612 2 0.0 0 26.2318 10 3.0 1 23.6522 1 60.2574 8 0.0 0 2.0 1 2.0 1 7.2519 1 31.6473 10 5.0 1 24.7802 10 0.7931 1 18.3848 1 4.6646 1 31.0 2 5.0 1)
Average genome size in population (length): 28.429
Average program size in population (points): 29.429
Average percent parens in population: 0.035
Minimum age in population: 29.96480560302734
Maximum age in population: 34.69249200820923
Average age in population: 32.82547999477386
Median age in population: 32.89443802833557
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 84
Genome diversity (% unique Plush genomes):	 0.51
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 84
Syntactic diversity (% unique Push programs):	 0.51
Total error diversity:				 0.033
Error (vector) diversity:			 0.037
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 16797252
--- Timings ---
Current time: 1529615126115 milliseconds
Total Time:          75.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.5 seconds, 47.0%
Fitness Testing:     32.1 seconds, 42.5%
Report:               7.8 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Number IO problem report - generation 23
Test total error for best: 50890.0
Test mean error for best: 25.44500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 67.2889250004 
Correct output: 15.0922415815  | Program output: -39.9077584185
Correct output: -30.8202558445 | Program output: -6.8202558445 
Correct output: 70.2512965501  | Program output: 90.2512965501 
Correct output: 150.6666771001 | Program output: 73.6666771001 
Correct output: -148.0189802809 | Program output: -104.0189802809
Correct output: 91.9885288633  | Program output: 88.9885288633 
Correct output: 56.3430751406  | Program output: 3.3430751406  
Correct output: -55.2026859793 | Program output: -53.2026859793
Correct output: -31.9001885201 | Program output: 55.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -2.0770879346 
Correct output: 62.2573571201  | Program output: -33.7426428799
Correct output: -11.0880796195 | Program output: -7.0880796195 
Correct output: -98.0730811682 | Program output: -92.0730811682
Correct output: 45.954554541   | Program output: 43.954554541  
Correct output: 9.2519145493   | Program output: 85.2519145493 
Correct output: -62.0820375564 | Program output: 16.9179624436 
Correct output: -85.5891975931 | Program output: -90.5891975931
Correct output: 26.7802144548  | Program output: -55.2197855452
Correct output: 1.2069497285   | Program output: 45.2069497285 
Correct output: 70.6151869811  | Program output: 28.6151869811 
Correct output: 27.2083659619  | Program output: 10.2083659619 
Correct output: 103.781099078  | Program output: 72.781099078  
Correct output: 66.4193519736  | Program output: 75.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction integer_flush} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction integer_div} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction in1} {:instruction integer_flush} {:instruction float_flush} {:instruction float_div} {:instruction integer_mult})
Best program: (float_dec integer_flush float_rot float_dec in1 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_dec float_dup in2 float_dec float_dec float_dec float_yankdup integer_shove integer_div print_float float_tan -9.568963984273623 integer_div -56.50848481366526 integer_div in1 integer_flush float_flush float_div integer_mult)
Errors: [13.0 2 55.0 10 24.0 2 20.0 1 77.0 3 44.0 2 3.0 2 53.0 2 2.0 1 87.0 12 3.0 2 68.0 2 96.0 13 4.0 2 6.0 1 2.0 1 76.0 2 79.0 12 5.0 2 82.0 12 44.0 2 42.0 2 17.0 2 31.0 3 9.0 2]
Total: 1039.0
Mean: 20.78
Genome size: 31
Size: 32
Percent parens: 0.031
--- Population Statistics ---
Average total errors in population: 2710.4373874000003
Median total errors in population: 1125.0
Error averages by case: (78.84581819999998 2.93 122.23384389999998 10.281 85.97080580000001 2.993 85.64686880000002 2.69 145.0748657 3.799 108.28066019999999 3.068 70.28616989999999 2.643 119.29329489999999 11.818 68.335513 2.014 145.41578819999998 12.127 76.0312388 2.687 126.6800936 3.055 160.64093720000002 12.991 67.46030470000001 2.943 72.65475190000001 2.101 74.49624939999997 2.736 135.3791862 2.907 137.2951804 12.826 77.48005129999997 2.781 147.1193505 11.252 105.9482321 2.923 110.42857840000002 2.824 85.7571531 2.848 102.2387362 3.79 75.502715 2.914)
Error minima by case: (8.0 1 14.8727 9 1.95 1 15.0 1 12.3333 2 39.0 1 0.0 0 11.5879 2 0.0 0 3.03 8 3.0 1 15.6522 1 17.5022 8 0.0 0 1.0 1 1.1994 1 8.7946 1 23.6473 8 1.1401 1 17.9749 7 1.1237 1 22.3848 1 11.2897 1 30.7811 2 4.0 1)
Average genome size in population (length): 30.815
Average program size in population (points): 31.815
Average percent parens in population: 0.032
Minimum age in population: 32.23094177246094
Maximum age in population: 36.14630317687988
Average age in population: 34.42131131768227
Median age in population: 34.44714832305908
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 35
Genome diversity (% unique Plush genomes):	 0.513
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.513
Total error diversity:				 0.051
Error (vector) diversity:			 0.055
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 17567627
--- Timings ---
Current time: 1529615129204 milliseconds
Total Time:          78.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.0 seconds, 47.0%
Fitness Testing:     33.5 seconds, 42.6%
Report:               8.1 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Number IO problem report - generation 24
Test total error for best: 50890.0
Test mean error for best: 25.44500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 67.2889250004 
Correct output: 15.0922415815  | Program output: -39.9077584185
Correct output: -30.8202558445 | Program output: -6.8202558445 
Correct output: 70.2512965501  | Program output: 90.2512965501 
Correct output: 150.6666771001 | Program output: 73.6666771001 
Correct output: -148.0189802809 | Program output: -104.0189802809
Correct output: 91.9885288633  | Program output: 88.9885288633 
Correct output: 56.3430751406  | Program output: 3.3430751406  
Correct output: -55.2026859793 | Program output: -53.2026859793
Correct output: -31.9001885201 | Program output: 55.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -2.0770879346 
Correct output: 62.2573571201  | Program output: -33.7426428799
Correct output: -11.0880796195 | Program output: -7.0880796195 
Correct output: -98.0730811682 | Program output: -92.0730811682
Correct output: 45.954554541   | Program output: 43.954554541  
Correct output: 9.2519145493   | Program output: 85.2519145493 
Correct output: -62.0820375564 | Program output: 16.9179624436 
Correct output: -85.5891975931 | Program output: -90.5891975931
Correct output: 26.7802144548  | Program output: -55.2197855452
Correct output: 1.2069497285   | Program output: 45.2069497285 
Correct output: 70.6151869811  | Program output: 28.6151869811 
Correct output: 27.2083659619  | Program output: 10.2083659619 
Correct output: 103.781099078  | Program output: 72.781099078  
Correct output: 66.4193519736  | Program output: 75.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction integer_flush} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction integer_div} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction in1} {:instruction integer_flush} {:instruction float_flush} {:instruction float_div} {:instruction integer_mult})
Best program: (float_dec integer_flush float_rot float_dec in1 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_dec float_dup in2 float_dec float_dec float_dec float_yankdup integer_shove integer_div print_float float_tan -9.568963984273623 integer_div -56.50848481366526 integer_div in1 integer_flush float_flush float_div integer_mult)
Errors: [13.0 2 55.0 10 24.0 2 20.0 1 77.0 3 44.0 2 3.0 2 53.0 2 2.0 1 87.0 12 3.0 2 68.0 2 96.0 13 4.0 2 6.0 1 2.0 1 76.0 2 79.0 12 5.0 2 82.0 12 44.0 2 42.0 2 17.0 2 31.0 3 9.0 2]
Total: 1039.0
Mean: 20.78
Genome size: 31
Size: 32
Percent parens: 0.031
--- Population Statistics ---
Average total errors in population: 2889.6088494999995
Median total errors in population: 1123.0
Error averages by case: (86.34670840000001 2.979 133.2937386 10.287 87.2833183 2.988 93.01397030000001 2.871 155.3261531 3.674 114.60553249999997 3.1 80.0156129 2.913 122.310758 11.297 75.78132160000001 1.767 152.73381150000003 11.829 86.90770770000003 2.9 126.7031918 3.342 171.278029 12.699 68.98681380000001 2.954 79.47088610000002 2.137 85.55888160000002 2.6 142.8232961 2.937 140.72131090000002 12.94 87.6473546 3.07 158.01594079999998 11.261 113.61206930000002 2.934 117.42354700000004 2.715 88.4470313 2.856 112.83739410000001 3.552 82.9094702 2.953)
Error minima by case: (4.4404 1 14.1555 9 17.0 1 13.0 1 10.3333 2 9.3335 1 0.0 0 35.6561 2 0.0 0 0.2707 9 3.0 1 14.6665 1 61.2859 9 0.0 0 0.0 0 2.0 1 8.4103 1 7.7293 8 0.1401 1 26.9618 10 0.5657 1 20.3848 1 4.6646 1 31.0 2 0.31 1)
Average genome size in population (length): 34.229
Average program size in population (points): 35.229
Average percent parens in population: 0.029
Minimum age in population: 33.55557465553284
Maximum age in population: 37.74382889270782
Average age in population: 35.85022652959824
Median age in population: 35.88411855697632
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 99
Genome diversity (% unique Plush genomes):	 0.515
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 99
Syntactic diversity (% unique Push programs):	 0.515
Total error diversity:				 0.062
Error (vector) diversity:			 0.066
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 18423352
--- Timings ---
Current time: 1529615132438 milliseconds
Total Time:          81.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        38.4 seconds, 46.9%
Fitness Testing:     34.9 seconds, 42.6%
Report:               8.4 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Number IO problem report - generation 25
Test total error for best: 49997.0
Test mean error for best: 24.99850
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 65.2889250004 
Correct output: 15.0922415815  | Program output: -39.9077584185
Correct output: -30.8202558445 | Program output: -8.8202558445 
Correct output: 70.2512965501  | Program output: 88.2512965501 
Correct output: 150.6666771001 | Program output: 73.6666771001 
Correct output: -148.0189802809 | Program output: -106.0189802809
Correct output: 91.9885288633  | Program output: 86.9885288633 
Correct output: 56.3430751406  | Program output: 3.3430751406  
Correct output: -55.2026859793 | Program output: -55.2026859793
Correct output: -31.9001885201 | Program output: 53.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -4.0770879346 
Correct output: 62.2573571201  | Program output: -33.7426428799
Correct output: -11.0880796195 | Program output: -9.0880796195 
Correct output: -98.0730811682 | Program output: -94.0730811682
Correct output: 45.954554541   | Program output: 39.954554541  
Correct output: 9.2519145493   | Program output: 83.2519145493 
Correct output: -62.0820375564 | Program output: 14.9179624436 
Correct output: -85.5891975931 | Program output: -90.5891975931
Correct output: 26.7802144548  | Program output: -55.2197855452
Correct output: 1.2069497285   | Program output: 43.2069497285 
Correct output: 70.6151869811  | Program output: 28.6151869811 
Correct output: 27.2083659619  | Program output: 10.2083659619 
Correct output: 103.781099078  | Program output: 72.781099078  
Correct output: 66.4193519736  | Program output: 73.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction integer_flush} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_div} {:instruction print_float} {:instruction integer_max} {:instruction integer_mult} {:instruction integer_div} {:instruction float_dup_items} {:instruction integer_mult})
Best program: (float_dec integer_flush float_rot float_dec in1 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_dec float_dup in2 float_yankdup float_dec float_dec float_yankdup integer_shove integer_div float_dec float_dec float_yankdup integer_shove integer_div in2 float_dec float_yankdup integer_shove integer_div print_float integer_max integer_mult integer_div float_dup_items integer_mult)
Errors: [11.0 2 55.0 10 22.0 2 18.0 2 77.0 3 42.0 2 5.0 2 53.0 2 0.0 0 85.0 11 3.0 2 66.0 2 96.0 13 2.0 2 4.0 1 6.0 2 74.0 2 77.0 13 5.0 2 82.0 12 42.0 2 42.0 2 17.0 2 31.0 3 7.0 2]
Total: 1020.0
Mean: 20.4
Genome size: 36
Size: 37
Percent parens: 0.027
--- Population Statistics ---
Average total errors in population: 2747.8280058999994
Median total errors in population: 1121.0
Error averages by case: (82.9381029 2.842 130.1617432 10.224 74.25810299999999 2.763 89.59047320000002 2.811 152.26352819999997 3.82 112.824193 2.991 75.8666094 2.555 106.89372109999998 9.413 73.64651779999998 1.433 150.673408 11.551 83.8099776 2.88 114.67972759999999 4.417 168.1132859 12.458 55.45861000000001 2.858 77.5282519 2.138 82.6489393 2.591 141.5375655 2.819 131.406461 12.984 84.8742273 2.948 155.08367040000002 11.357 110.91398470000001 2.814 107.8866967 2.822 73.18791079999998 2.936 109.725125 3.199 79.3871724 2.846)
Error minima by case: (4.0 1 10.4702 9 15.0 1 11.0 1 11.3333 2 35.0 1 0.0 0 34.6561 2 0.0 0 24.9002 8 3.0 1 21.6522 1 13.2279 8 0.0 0 0.0 0 2.0 1 8.7114 1 29.6473 8 5.0 1 26.9618 9 0.9842 1 21.3848 1 0.8729 1 31.0 2 0.0 0)
Average genome size in population (length): 34.336
Average program size in population (points): 35.336
Average percent parens in population: 0.029
Minimum age in population: 34.74293994903564
Maximum age in population: 39.37463772296906
Average age in population: 37.39979419726133
Median age in population: 37.42934226989746
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 112
Genome diversity (% unique Plush genomes):	 0.481
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 112
Syntactic diversity (% unique Push programs):	 0.481
Total error diversity:				 0.076
Error (vector) diversity:			 0.084
Behavioral diversity:				 0.084
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 19281752
--- Timings ---
Current time: 1529615135511 milliseconds
Total Time:          84.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        39.8 seconds, 46.9%
Fitness Testing:     36.2 seconds, 42.7%
Report:               8.8 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Number IO problem report - generation 26
Test total error for best: 49166.0
Test mean error for best: 24.58300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 63.2889250004 
Correct output: 15.0922415815  | Program output: -39.9077584185
Correct output: -30.8202558445 | Program output: -10.8202558445
Correct output: 70.2512965501  | Program output: 86.2512965501 
Correct output: 150.6666771001 | Program output: 73.6666771001 
Correct output: -148.0189802809 | Program output: -108.0189802809
Correct output: 91.9885288633  | Program output: 84.9885288633 
Correct output: 56.3430751406  | Program output: 3.3430751406  
Correct output: -55.2026859793 | Program output: -57.2026859793
Correct output: -31.9001885201 | Program output: 51.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -6.0770879346 
Correct output: 62.2573571201  | Program output: -33.7426428799
Correct output: -11.0880796195 | Program output: -11.0880796195
Correct output: -98.0730811682 | Program output: -96.0730811682
Correct output: 45.954554541   | Program output: 39.954554541  
Correct output: 9.2519145493   | Program output: 81.2519145493 
Correct output: -62.0820375564 | Program output: 12.9179624436 
Correct output: -85.5891975931 | Program output: -90.5891975931
Correct output: 26.7802144548  | Program output: -55.2197855452
Correct output: 1.2069497285   | Program output: 41.2069497285 
Correct output: 70.6151869811  | Program output: 28.6151869811 
Correct output: 27.2083659619  | Program output: 10.2083659619 
Correct output: 103.781099078  | Program output: 72.781099078  
Correct output: 66.4193519736  | Program output: 71.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction integer_flush} {:instruction float_rot} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction in2} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_div} {:instruction print_float})
Best program: (float_dec integer_flush float_rot float_dec in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup in2 float_dec float_yankdup integer_shove integer_div float_dup_items float_dec float_yankdup float_dec float_dec float_dec float_dup in2 float_dec float_dec float_dec float_yankdup integer_shove integer_div print_float)
Errors: [9.0 2 55.0 10 20.0 1 16.0 2 77.0 3 40.0 1 7.0 2 53.0 2 2.0 1 83.0 11 3.0 2 64.0 2 96.0 13 0.0 0 2.0 1 6.0 2 72.0 2 75.0 12 5.0 2 82.0 12 40.0 1 42.0 2 17.0 2 31.0 3 5.0 2]
Total: 995.0
Mean: 19.9
Genome size: 32
Size: 33
Percent parens: 0.030
--- Population Statistics ---
Average total errors in population: 3168.5599647
Median total errors in population: 1085.0
Error averages by case: (102.55537160000002 3.108 140.87510559999996 10.384 98.83739650000001 2.836 109.070637 2.913 161.8073545 4.091 131.10222339999999 3.28 92.47894550000004 2.394 125.21374709999999 5.173 92.53594949999997 2.136 168.5027414 12.087 94.85035810000001 3.166 138.7530699 6.859 178.23230479999998 12.976 80.51495260000002 3.122 96.4790663 2.608 93.45105199999998 2.365 158.43987980000003 3.052 153.06175 12.93 96.67375160000002 3.171 165.34044579999994 11.921 129.683933 3.076 122.1473651 3.147 91.81937960000003 3.1 120.21114949999995 3.805 99.1570345 3.065)
Error minima by case: (8.0 1 13.7431 9 19.0 1 15.0 1 5.3333 2 39.0 1 0.0 0 22.621 2 0.0 0 0.6916 7 2.0 1 18.3084 1 28.5353 9 0.0 0 1.0 1 1.0 1 6.2519 1 7.3084 9 0.1401 1 6.9418 9 0.1165 1 15.3848 1 1.0813 1 30.0 2 4.0 1)
Average genome size in population (length): 29.28
Average program size in population (points): 30.28
Average percent parens in population: 0.035
Minimum age in population: 36.28558850288391
Maximum age in population: 41.12911340594292
Average age in population: 39.14694446477294
Median age in population: 39.19106905162334
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 183
Genome diversity (% unique Plush genomes):	 0.442
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 183
Syntactic diversity (% unique Push programs):	 0.442
Total error diversity:				 0.095
Error (vector) diversity:			 0.107
Behavioral diversity:				 0.108
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 20013752
--- Timings ---
Current time: 1529615138709 milliseconds
Total Time:          88.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        41.3 seconds, 46.8%
Fitness Testing:     37.6 seconds, 42.7%
Report:               9.1 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Number IO problem report - generation 27
Test total error for best: 48352.0
Test mean error for best: 24.17600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 61.2889250004 
Correct output: 15.0922415815  | Program output: -39.9077584185
Correct output: -30.8202558445 | Program output: -12.8202558445
Correct output: 70.2512965501  | Program output: 84.2512965501 
Correct output: 150.6666771001 | Program output: 73.6666771001 
Correct output: -148.0189802809 | Program output: -110.0189802809
Correct output: 91.9885288633  | Program output: 82.9885288633 
Correct output: 56.3430751406  | Program output: 3.3430751406  
Correct output: -55.2026859793 | Program output: -59.2026859793
Correct output: -31.9001885201 | Program output: 49.0998114799 
Correct output: 70.8415782878  | Program output: 63.8415782878 
Correct output: -70.0770879346 | Program output: -8.0770879346 
Correct output: 62.2573571201  | Program output: -33.7426428799
Correct output: -11.0880796195 | Program output: -13.0880796195
Correct output: -98.0730811682 | Program output: -98.0730811682
Correct output: 45.954554541   | Program output: 36.954554541  
Correct output: 9.2519145493   | Program output: 79.2519145493 
Correct output: -62.0820375564 | Program output: 10.9179624436 
Correct output: -85.5891975931 | Program output: -90.5891975931
Correct output: 26.7802144548  | Program output: -55.2197855452
Correct output: 1.2069497285   | Program output: 39.2069497285 
Correct output: 70.6151869811  | Program output: 28.6151869811 
Correct output: 27.2083659619  | Program output: 10.2083659619 
Correct output: 103.781099078  | Program output: 72.781099078  
Correct output: 66.4193519736  | Program output: 69.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction integer_flush} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction integer_div} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction in1} {:instruction integer_flush} {:instruction float_flush} {:instruction float_div} {:instruction integer_mult})
Best program: (float_dec integer_flush float_rot float_dec in1 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_dec float_dup in2 float_dec float_dec float_dec float_yankdup integer_shove integer_div float_dec float_dec float_dec float_dup in2 float_dec float_dec float_dec float_yankdup integer_shove integer_div print_float float_tan -9.568963984273623 integer_div -56.50848481366526 integer_div in1 integer_flush float_flush float_div integer_mult)
Errors: [7.0 2 55.0 10 18.0 2 14.0 2 77.0 3 38.0 2 9.0 2 53.0 2 4.0 1 81.0 12 7.0 2 62.0 2 96.0 13 2.0 1 0.0 0 9.0 2 70.0 1 73.0 13 5.0 2 82.0 12 38.0 2 42.0 2 17.0 2 31.0 3 3.0 1]
Total: 989.0
Mean: 19.78
Genome size: 42
Size: 43
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 2490.6686941999997
Median total errors in population: 1039.0
Error averages by case: (73.6028945 2.733 110.23104239999999 10.297 81.8353607 2.747 80.22623850000002 2.102 131.1935147 3.664 103.04776729999999 2.844 63.9150173 2.645 107.4592751 3.29 63.47294280000001 1.801 142.5941102 12.174 60.9782696 2.689 123.0810361 3.222 148.8182979 13.148 63.060066100000014 2.745 67.395875 1.896 59.7628187 1.782 132.27914640000003 2.711 133.89198960000002 12.511 63.497721999999996 2.726 135.6218954 12.097 102.32245510000001 2.708 97.65543489999999 2.708 72.69802360000001 2.675 87.9771258 3.564 69.91937449999999 2.652)
Error minima by case: (7.0 1 15.6877 9 0.1797 1 6.9354 1 9.3333 2 38.0 1 0.0 0 3.3431 2 0.0 0 26.9002 9 2.0 1 4.9229 1 33.7426 10 0.0 0 0.0 0 1.0 1 10.0428 1 23.918 10 4.0 1 26.5407 10 0.8677 1 19.3848 1 7.3354 1 30.0 2 3.0 1)
Average genome size in population (length): 30.951
Average program size in population (points): 31.951
Average percent parens in population: 0.032
Minimum age in population: 38.15736758708954
Maximum age in population: 42.3681276589632
Average age in population: 40.53777286213636
Median age in population: 40.5460816770792
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 278
Genome diversity (% unique Plush genomes):	 0.431
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 278
Syntactic diversity (% unique Push programs):	 0.431
Total error diversity:				 0.08
Error (vector) diversity:			 0.092
Behavioral diversity:				 0.092
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 20787527
--- Timings ---
Current time: 1529615142119 milliseconds
Total Time:          91.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        42.8 seconds, 46.8%
Fitness Testing:     39.1 seconds, 42.7%
Report:               9.5 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Number IO problem report - generation 28
Test total error for best: 47960.0
Test mean error for best: 23.98000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 60.2889250004 
Correct output: 15.0922415815  | Program output: -39.9077584185
Correct output: -30.8202558445 | Program output: -13.8202558445
Correct output: 70.2512965501  | Program output: 83.2512965501 
Correct output: 150.6666771001 | Program output: 73.6666771001 
Correct output: -148.0189802809 | Program output: -111.0189802809
Correct output: 91.9885288633  | Program output: 81.9885288633 
Correct output: 56.3430751406  | Program output: 3.3430751406  
Correct output: -55.2026859793 | Program output: -60.2026859793
Correct output: -31.9001885201 | Program output: 48.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -9.0770879346 
Correct output: 62.2573571201  | Program output: -33.7426428799
Correct output: -11.0880796195 | Program output: -14.0880796195
Correct output: -98.0730811682 | Program output: -99.0730811682
Correct output: 45.954554541   | Program output: 34.954554541  
Correct output: 9.2519145493   | Program output: 78.2519145493 
Correct output: -62.0820375564 | Program output: 9.9179624436  
Correct output: -85.5891975931 | Program output: -90.5891975931
Correct output: 26.7802144548  | Program output: -55.2197855452
Correct output: 1.2069497285   | Program output: 38.2069497285 
Correct output: 70.6151869811  | Program output: 28.6151869811 
Correct output: 27.2083659619  | Program output: 10.2083659619 
Correct output: 103.781099078  | Program output: 72.781099078  
Correct output: 66.4193519736  | Program output: 68.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction integer_div} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_div} {:instruction print_float} {:instruction integer_max} {:instruction integer_mult} {:instruction integer_div} {:instruction float_dup_items} {:instruction integer_mult})
Best program: (float_dec integer_div float_rot float_dec in1 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_yankdup float_dec float_dec float_dec float_dup in2 float_yankdup float_dec float_dec float_yankdup integer_shove integer_div float_dec float_dec float_yankdup integer_shove integer_div in2 float_dec float_yankdup integer_shove integer_div print_float integer_max integer_mult integer_div float_dup_items integer_mult)
Errors: [6.0 2 55.0 10 17.0 2 13.0 2 77.0 3 37.0 2 10.0 1 53.0 2 5.0 2 80.0 12 3.0 2 61.0 2 96.0 13 3.0 1 1.0 1 11.0 2 69.0 2 72.0 13 5.0 2 82.0 12 37.0 2 42.0 2 17.0 2 31.0 3 2.0 1]
Total: 983.0
Mean: 19.66
Genome size: 42
Size: 43
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 2572.3504249999996
Median total errors in population: 1039.0
Error averages by case: (75.4778255 2.809 114.7736615 10.337 83.88546729999999 2.909 82.28172380000004 2.406 135.69296400000002 3.785 104.780893 2.954 67.8434917 2.847 111.98861959999999 3.306 65.38223380000001 1.809 143.36629510000003 12.018 66.29301120000001 2.821 125.057828 3.213 153.06769459999998 13.137 65.24095059999999 2.755 69.40146310000002 2.022 65.49666579999999 2.038 133.151488 2.843 135.45936919999997 12.647 69.08801249999999 2.86 139.98725699999997 12.158 103.26843710000004 2.813 102.2366305 2.843 77.46298759999999 2.807 92.92521649999999 3.733 71.99123799999998 2.879)
Error minima by case: (6.0 1 15.6877 9 1.1797 1 13.0 1 6.3333 2 37.0 1 0.0 0 4.3431 2 0.0 0 25.7396 8 2.0 1 5.9229 1 13.0285 10 0.0 0 0.0 0 1.0 1 7.2519 1 24.918 9 4.0 1 25.8093 9 0.2663 1 4.6706 1 4.6646 1 28.4953 2 2.0 1)
Average genome size in population (length): 31.99
Average program size in population (points): 32.99
Average percent parens in population: 0.031
Minimum age in population: 39.96493148803711
Maximum age in population: 43.82207278162241
Average age in population: 42.11666556987911
Median age in population: 42.12045771628618
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 172
Genome diversity (% unique Plush genomes):	 0.482
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 172
Syntactic diversity (% unique Push programs):	 0.482
Total error diversity:				 0.098
Error (vector) diversity:			 0.111
Behavioral diversity:				 0.112
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 21587277
--- Timings ---
Current time: 1529615145219 milliseconds
Total Time:          94.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        44.2 seconds, 46.7%
Fitness Testing:     40.4 seconds, 42.8%
Report:               9.9 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Number IO problem report - generation 29
Test total error for best: 46599.0
Test mean error for best: 23.29950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 56.2889250004 
Correct output: 15.0922415815  | Program output: -39.9077584185
Correct output: -30.8202558445 | Program output: -17.8202558445
Correct output: 70.2512965501  | Program output: 79.2512965501 
Correct output: 150.6666771001 | Program output: 73.6666771001 
Correct output: -148.0189802809 | Program output: -115.0189802809
Correct output: 91.9885288633  | Program output: 77.9885288633 
Correct output: 56.3430751406  | Program output: 3.3430751406  
Correct output: -55.2026859793 | Program output: -64.2026859793
Correct output: -31.9001885201 | Program output: 44.0998114799 
Correct output: 70.8415782878  | Program output: 58.8415782878 
Correct output: -70.0770879346 | Program output: -13.0770879346
Correct output: 62.2573571201  | Program output: -33.7426428799
Correct output: -11.0880796195 | Program output: -18.0880796195
Correct output: -98.0730811682 | Program output: -103.0730811682
Correct output: 45.954554541   | Program output: 41.954554541  
Correct output: 9.2519145493   | Program output: 74.2519145493 
Correct output: -62.0820375564 | Program output: 5.9179624436  
Correct output: -85.5891975931 | Program output: -90.5891975931
Correct output: 26.7802144548  | Program output: -55.2197855452
Correct output: 1.2069497285   | Program output: 34.2069497285 
Correct output: 70.6151869811  | Program output: 28.6151869811 
Correct output: 27.2083659619  | Program output: 10.2083659619 
Correct output: 103.781099078  | Program output: 72.781099078  
Correct output: 66.4193519736  | Program output: 64.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction integer_flush} {:instruction float_rot} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction float_pop} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction in1} {:instruction integer_flush} {:instruction float_flush} {:instruction float_div} {:instruction integer_mult})
Best program: (float_dec integer_flush float_rot float_dec in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dup in2 float_dec float_dec float_dec float_yankdup integer_shove float_dec float_dec float_dup in2 float_dec float_dec float_dec float_dec float_dup in2 float_dec float_dec float_dec float_yankdup integer_shove integer_div print_float float_tan -9.568963984273623 float_pop -56.50848481366526 integer_div in1 integer_flush float_flush float_div integer_mult)
Errors: [2.0 1 55.0 10 13.0 2 9.0 1 77.0 3 33.0 2 14.0 2 53.0 2 9.0 2 76.0 12 12.0 2 57.0 2 96.0 13 7.0 1 5.0 3 4.0 1 65.0 2 68.0 13 5.0 2 82.0 12 33.0 2 42.0 2 17.0 2 31.0 3 2.0 1]
Total: 965.0
Mean: 19.3
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2588.3004536000003
Median total errors in population: 1015.0
Error averages by case: (75.84346960000002 2.706 114.5106869 10.31 85.12124060000002 2.802 82.59887630000003 2.882 136.0330944 3.753 105.48264620000002 2.873 72.35414150000003 2.921 112.9777267 3.125 67.09228340000001 1.737 142.8939977 11.726 66.8643254 2.791 126.02271529999997 2.956 152.9770818 13.134 66.81747849999999 2.327 69.88903390000002 2.054 67.2067807 2.168 132.64883520000004 2.881 135.9889112 12.921 68.61420240000001 2.838 139.6868229 12.126 103.1915316 2.727 102.8790445 2.791 79.3067102 2.777 92.9249735 3.685 72.45384319999998 2.909)
Error minima by case: (2.0 1 7.78 9 1.8194 1 9.0 1 76.0 2 33.0 1 0.0 0 46.5986 2 0.0 0 19.3312 7 2.0 1 4.2029 1 54.9451 8 0.0 0 0.0 0 1.0 1 3.7756 1 3.7921 8 4.0 1 19.468 9 0.2069 1 41.0 1 16.0 1 30.0 2 1.0 1)
Average genome size in population (length): 33.622
Average program size in population (points): 34.622
Average percent parens in population: 0.029
Minimum age in population: 41.5980266481638
Maximum age in population: 45.53295275568962
Average age in population: 43.70716530974582
Median age in population: 43.7701252065599
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 107
Genome diversity (% unique Plush genomes):	 0.484
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 107
Syntactic diversity (% unique Push programs):	 0.484
Total error diversity:				 0.126
Error (vector) diversity:			 0.158
Behavioral diversity:				 0.158
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 22427827
--- Timings ---
Current time: 1529615148569 milliseconds
Total Time:          97.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        45.6 seconds, 46.6%
Fitness Testing:     41.9 seconds, 42.8%
Report:              10.2 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Number IO problem report - generation 30
Test total error for best: 54552.983700000026
Test mean error for best: 27.27649
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 59.2889250004 
Correct output: 15.0922415815  | Program output: 89.2002939985 
Correct output: -30.8202558445 | Program output: -14.8202558445
Correct output: 70.2512965501  | Program output: 82.2512965501 
Correct output: 150.6666771001 | Program output: 89.2002939985 
Correct output: -148.0189802809 | Program output: -112.0189802809
Correct output: 91.9885288633  | Program output: 80.9885288633 
Correct output: 56.3430751406  | Program output: 89.2002939985 
Correct output: -55.2026859793 | Program output: -61.2026859793
Correct output: -31.9001885201 | Program output: 47.0998114799 
Correct output: 70.8415782878  | Program output: 59.8415782878 
Correct output: -70.0770879346 | Program output: -10.0770879346
Correct output: 62.2573571201  | Program output: 89.2002939985 
Correct output: -11.0880796195 | Program output: -15.0880796195
Correct output: -98.0730811682 | Program output: -100.0730811682
Correct output: 45.954554541   | Program output: 32.954554541  
Correct output: 9.2519145493   | Program output: 77.2519145493 
Correct output: -62.0820375564 | Program output: 8.9179624436  
Correct output: -85.5891975931 | Program output: -90.5891975931
Correct output: 26.7802144548  | Program output: 89.2002939985 
Correct output: 1.2069497285   | Program output: 37.2069497285 
Correct output: 70.6151869811  | Program output: 89.2002939985 
Correct output: 27.2083659619  | Program output: 89.2002939985 
Correct output: 103.781099078  | Program output: 89.2002939985 
Correct output: 66.4193519736  | Program output: 67.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction tagged_481} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_div} {:instruction print_float})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_dec float_dup in2 float_dec float_dec float_dec float_dec float_dup in2 float_dec float_dec float_dec float_yankdup integer_shove float_dec tagged_481 float_dup in2 float_dec float_dec float_dec float_yankdup integer_shove integer_div print_float)
Errors: [5.0 1 74.1081 9 16.0 2 12.0 2 61.4664 13 36.0 2 11.0 2 32.8572 12 6.0 2 79.0 12 11.0 2 60.0 1 26.9429 11 4.0 1 2.0 3 13.0 2 68.0 2 71.0 13 5.0 2 62.4201 10 36.0 2 18.5851 11 61.9919 9 14.5808 11 1.0 1]
Total: 926.9525
Mean: 18.53905
Genome size: 36
Size: 37
Percent parens: 0.027
--- Population Statistics ---
Average total errors in population: 2753.9619569000006
Median total errors in population: 995.0
Error averages by case: (82.15064279999999 2.782 122.33751959999998 10.261 89.49406570000001 2.682 88.86450700000002 2.955 143.3007389 3.834 111.6262627 2.741 80.7791901 2.923 118.1884699 3.2 76.4227091 2.2 149.0305744 11.76 74.10218859999999 2.838 130.2283209 2.92 160.31880299999997 13.034 72.37095450000001 1.801 76.8837218 2.172 74.7688794 2.396 138.86127400000004 2.876 140.88262139999998 12.685 76.69673730000001 2.914 147.32541220000002 12.038 109.5044521 2.55 109.94595729999999 2.866 84.5619622 2.845 100.6738515 3.753 78.7971405 2.819)
Error minima by case: (0.4506 1 1.8139 8 2.1797 1 7.3596 1 13.3333 2 33.0 1 0.0 0 5.3431 2 0.0 0 8.1104 9 2.0 1 6.9229 1 26.9429 8 0.0 0 0.0 0 1.0 1 6.2519 1 25.918 8 4.0 1 25.6534 7 0.2069 1 18.5851 1 12.2084 1 14.5808 2 0.0 0)
Average genome size in population (length): 34.898
Average program size in population (points): 35.898
Average percent parens in population: 0.028
Minimum age in population: 42.74759451299906
Maximum age in population: 47.09327418729663
Average age in population: 45.15776368719898
Median age in population: 45.21977685764432
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 205
Genome diversity (% unique Plush genomes):	 0.496
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 205
Syntactic diversity (% unique Push programs):	 0.496
Total error diversity:				 0.113
Error (vector) diversity:			 0.183
Behavioral diversity:				 0.183
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 23300277
--- Timings ---
Current time: 1529615151813 milliseconds
Total Time:         101.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        47.0 seconds, 46.5%
Fitness Testing:     43.3 seconds, 42.8%
Report:              10.7 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Number IO problem report - generation 31
Test total error for best: 53460.221700000024
Test mean error for best: 26.73011
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 58.2889250004 
Correct output: 15.0922415815  | Program output: 89.2002939985 
Correct output: -30.8202558445 | Program output: -15.8202558445
Correct output: 70.2512965501  | Program output: 81.2512965501 
Correct output: 150.6666771001 | Program output: 89.2002939985 
Correct output: -148.0189802809 | Program output: -113.0189802809
Correct output: 91.9885288633  | Program output: 79.9885288633 
Correct output: 56.3430751406  | Program output: 89.2002939985 
Correct output: -55.2026859793 | Program output: -62.2026859793
Correct output: -31.9001885201 | Program output: 46.0998114799 
Correct output: 70.8415782878  | Program output: 58.8415782878 
Correct output: -70.0770879346 | Program output: -11.0770879346
Correct output: 62.2573571201  | Program output: 89.2002939985 
Correct output: -11.0880796195 | Program output: -16.0880796195
Correct output: -98.0730811682 | Program output: -101.0730811682
Correct output: 45.954554541   | Program output: 34.954554541  
Correct output: 9.2519145493   | Program output: 76.2519145493 
Correct output: -62.0820375564 | Program output: 7.9179624436  
Correct output: -85.5891975931 | Program output: -94.5891975931
Correct output: 26.7802144548  | Program output: 89.2002939985 
Correct output: 1.2069497285   | Program output: 36.2069497285 
Correct output: 70.6151869811  | Program output: 89.2002939985 
Correct output: 27.2083659619  | Program output: 89.2002939985 
Correct output: 103.781099078  | Program output: 89.2002939985 
Correct output: 66.4193519736  | Program output: 66.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_481} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_div} {:instruction print_float})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_dec float_dup in2 float_dec float_dec float_dec float_dec float_dup float_dec float_dup in2 float_yankdup float_dec float_dec float_dec float_dec tagged_481 float_dup in2 float_dec float_dec float_dec float_yankdup integer_shove integer_div print_float)
Errors: [4.0 1 74.1081 9 15.0 2 11.0 2 61.4664 13 35.0 2 12.0 2 32.8572 12 7.0 2 78.0 12 12.0 2 59.0 2 26.9429 11 5.0 1 3.0 3 11.0 2 67.0 2 70.0 13 9.0 2 62.4201 10 35.0 2 18.5851 11 61.9919 9 14.5808 11 0.0 0]
Total: 923.9525
Mean: 18.47905
Genome size: 37
Size: 38
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 2521.3099012999996
Median total errors in population: 987.0
Error averages by case: (69.9123258 2.7 115.02258049999999 10.284 78.6338956 2.875 76.79372660000003 2.862 135.82361410000004 3.846 99.80197340000001 2.941 72.5084212 2.753 110.57086699999999 3.342 67.53080450000002 2.502 136.6647651 12.049 67.3331231 2.792 119.5453429 2.758 152.78751879999996 13.078 64.6851274 1.974 66.16105640000002 2.392 67.51951919999998 2.308 127.58732980000003 2.762 129.19442199999997 12.938 69.6795963 2.907 140.0047013 12.002 96.96174879999998 2.783 101.93149139999998 2.885 77.82370859999999 2.963 93.10072019999998 3.761 66.92952129999999 2.345)
Error minima by case: (0.0 0 11.0922 9 0.1797 1 5.0 1 6.3333 2 29.0 1 0.0 0 3.3431 2 0.0 0 17.9002 8 3.0 1 0.797 1 24.7426 10 0.0 0 0.0 0 2.0 1 6.2519 1 7.1981 8 5.0 1 22.7802 10 0.3332 1 16.3848 1 9.7916 1 14.5808 2 0.0 0)
Average genome size in population (length): 38.828
Average program size in population (points): 39.828
Average percent parens in population: 0.026
Minimum age in population: 43.83972261846066
Maximum age in population: 48.54423237405717
Average age in population: 46.71830065289699
Median age in population: 46.77929201442748
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 38
Genome diversity (% unique Plush genomes):	 0.559
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 38
Syntactic diversity (% unique Push programs):	 0.559
Total error diversity:				 0.148
Error (vector) diversity:			 0.25
Behavioral diversity:				 0.252
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 24270977
--- Timings ---
Current time: 1529615155050 milliseconds
Total Time:         104.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        48.5 seconds, 46.4%
Fitness Testing:     44.8 seconds, 42.9%
Report:              11.1 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Number IO problem report - generation 32
Test total error for best: 53049.221700000024
Test mean error for best: 26.52461
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 57.2889250004 
Correct output: 15.0922415815  | Program output: 89.2002939985 
Correct output: -30.8202558445 | Program output: -16.8202558445
Correct output: 70.2512965501  | Program output: 80.2512965501 
Correct output: 150.6666771001 | Program output: 89.2002939985 
Correct output: -148.0189802809 | Program output: -114.0189802809
Correct output: 91.9885288633  | Program output: 78.9885288633 
Correct output: 56.3430751406  | Program output: 89.2002939985 
Correct output: -55.2026859793 | Program output: -63.2026859793
Correct output: -31.9001885201 | Program output: 45.0998114799 
Correct output: 70.8415782878  | Program output: 57.8415782878 
Correct output: -70.0770879346 | Program output: -12.0770879346
Correct output: 62.2573571201  | Program output: 89.2002939985 
Correct output: -11.0880796195 | Program output: -17.0880796195
Correct output: -98.0730811682 | Program output: -102.0730811682
Correct output: 45.954554541   | Program output: 38.954554541  
Correct output: 9.2519145493   | Program output: 75.2519145493 
Correct output: -62.0820375564 | Program output: 6.9179624436  
Correct output: -85.5891975931 | Program output: -94.5891975931
Correct output: 26.7802144548  | Program output: 89.2002939985 
Correct output: 1.2069497285   | Program output: 35.2069497285 
Correct output: 70.6151869811  | Program output: 89.2002939985 
Correct output: 27.2083659619  | Program output: 89.2002939985 
Correct output: 103.781099078  | Program output: 89.2002939985 
Correct output: 66.4193519736  | Program output: 65.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction tagged_481} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_div} {:instruction print_float})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_dec float_dup in2 float_dec float_dec float_dec integer_yankdup float_dup in2 float_dec float_dec float_dec float_yankdup integer_shove float_dec tagged_481 float_dup in2 float_dec float_dec float_dec float_yankdup in2 float_dec float_dec float_dec float_yankdup integer_shove integer_div print_float)
Errors: [3.0 1 74.1081 9 14.0 2 10.0 1 61.4664 13 34.0 2 13.0 2 32.8572 12 8.0 2 77.0 12 13.0 2 58.0 2 26.9429 11 6.0 1 4.0 3 7.0 2 66.0 2 69.0 12 9.0 2 62.4201 10 34.0 2 18.5851 11 61.9919 9 14.5808 11 1.0 1]
Total: 915.9525
Mean: 18.31905
Genome size: 41
Size: 42
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 2351.5409499
Median total errors in population: 973.0
Error averages by case: (62.51036779999999 2.139 108.82183799999994 10.209 69.67823920000001 2.812 70.10489720000004 2.508 129.21842040000007 4.026 92.2509656 2.865 68.12354309999999 2.64 102.40041139999994 3.523 64.28197640000002 2.657 130.0673751 12.08 60.3766038 2.711 111.0022595 2.648 144.59430469999992 13.014 59.6826308 1.934 61.65085550000001 3.085 59.340311599999986 2.163 120.84424100000003 2.678 121.3250196 12.901 63.680814 2.835 132.95211660000007 11.969 90.0448047 2.74 94.67048269999994 3.044 71.34864560000001 3.089 86.14931779999999 3.897 60.44750779999998 1.806)
Error minima by case: (0.0 0 13.8667 9 0.1797 1 2.0 1 8.3333 2 26.0 1 0.0 0 3.3431 2 0.0 0 11.7401 9 3.0 1 4.9229 1 20.9429 9 0.0 0 0.0 0 2.0 1 7.2519 1 23.918 2 5.0 1 18.8457 10 0.2069 1 12.5851 1 10.2084 1 14.5808 2 0.0 0)
Average genome size in population (length): 41.194
Average program size in population (points): 42.194
Average percent parens in population: 0.024
Minimum age in population: 46.35879675671458
Maximum age in population: 50.12937382189557
Average age in population: 48.32256462591933
Median age in population: 48.36321036377922
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 49
Genome diversity (% unique Plush genomes):	 0.588
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 49
Syntactic diversity (% unique Push programs):	 0.588
Total error diversity:				 0.154
Error (vector) diversity:			 0.303
Behavioral diversity:				 0.304
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 25300827
--- Timings ---
Current time: 1529615158496 milliseconds
Total Time:         107.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.0 seconds, 46.4%
Fitness Testing:     46.3 seconds, 42.9%
Report:              11.4 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Number IO problem report - generation 33
Test total error for best: 50151.22180000001
Test mean error for best: 25.07561
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 49.2889250004 
Correct output: 15.0922415815  | Program output: 89.2002939985 
Correct output: -30.8202558445 | Program output: -24.8202558445
Correct output: 70.2512965501  | Program output: 72.2512965501 
Correct output: 150.6666771001 | Program output: 89.2002939985 
Correct output: -148.0189802809 | Program output: -122.0189802809
Correct output: 91.9885288633  | Program output: 70.9885288633 
Correct output: 56.3430751406  | Program output: 89.2002939985 
Correct output: -55.2026859793 | Program output: -71.2026859793
Correct output: -31.9001885201 | Program output: 37.0998114799 
Correct output: 70.8415782878  | Program output: 65.8415782878 
Correct output: -70.0770879346 | Program output: -20.0770879346
Correct output: 62.2573571201  | Program output: 89.2002939985 
Correct output: -11.0880796195 | Program output: -25.0880796195
Correct output: -98.0730811682 | Program output: -110.0730811682
Correct output: 45.954554541   | Program output: 31.954554541  
Correct output: 9.2519145493   | Program output: 67.2519145493 
Correct output: -62.0820375564 | Program output: -1.0820375564 
Correct output: -85.5891975931 | Program output: -97.5891975931
Correct output: 26.7802144548  | Program output: 89.2002939985 
Correct output: 1.2069497285   | Program output: 27.2069497285 
Correct output: 70.6151869811  | Program output: 89.2002939985 
Correct output: 27.2083659619  | Program output: 89.2002939985 
Correct output: 103.781099078  | Program output: 89.2002939985 
Correct output: 66.4193519736  | Program output: 57.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_div} {:instruction print_float} {:instruction integer_max} {:instruction integer_mult} {:instruction integer_div} {:instruction float_dup_items} {:instruction integer_mult})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_dec float_dup in2 float_dec float_dec float_dec integer_yankdup float_dup in2 float_dec float_dec float_dec float_yankdup integer_shove float_dec float_dec float_yankdup integer_shove float_dec integer_div in2 float_dec float_dec float_dec float_dec float_dup float_dec float_dec float_dec float_yankdup float_dec float_dec float_yankdup integer_shove integer_div float_dec float_dec float_yankdup integer_shove integer_div in2 float_dec float_yankdup integer_shove integer_div print_float integer_max integer_mult integer_div float_dup_items integer_mult)
Errors: [5.0 2 74.1081 9 6.0 2 2.0 1 61.4664 13 26.0 2 21.0 2 32.8572 12 16.0 2 69.0 11 5.0 2 50.0 1 26.9429 11 14.0 2 12.0 3 14.0 2 58.0 2 61.0 2 12.0 2 62.4201 10 26.0 2 18.5851 11 61.9919 9 14.5808 11 9.0 2]
Total: 886.9525
Mean: 17.73905
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2261.1566502999995
Median total errors in population: 962.0
Error averages by case: (57.3620781 1.873 108.68079349999978 10.064 64.2388822 2.769 63.461963000000004 2.244 123.86342550000032 5.315 87.100755 2.816 66.9145797 2.756 97.7130268999998 4.687 62.5667785 2.705 124.70541580000003 11.93 59.92016599999998 2.763 105.731938 2.73 132.62624309999956 12.731 57.87017820000001 2.051 59.91263769999999 3.614 60.13767929999999 2.264 114.33398400000002 2.74 116.66819860000001 12.547 63.597699299999995 2.915 127.72552940000033 11.723 84.55713180000001 2.673 88.71054019999964 4.203 74.32375029999999 3.988 80.55433770000012 4.933 57.05193849999999 1.793)
Error minima by case: (0.0 0 13.0922 8 0.1797 1 0.0 0 9.3333 2 24.0 1 1.0 1 3.3431 2 0.0 0 16.0016 10 3.0 1 4.9229 1 12.2341 10 0.0 0 0.0 0 1.0687 1 7.2519 1 13.4176 1 5.0 1 23.243 9 0.7931 1 12.5851 1 10.2084 1 13.5808 2 0.0 0)
Average genome size in population (length): 43.776
Average program size in population (points): 44.776
Average percent parens in population: 0.023
Minimum age in population: 47.46037702914327
Maximum age in population: 51.64418526249938
Average age in population: 49.89756347194361
Median age in population: 49.96335160231683
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 59
Genome diversity (% unique Plush genomes):	 0.588
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.588
Total error diversity:				 0.182
Error (vector) diversity:			 0.351
Behavioral diversity:				 0.351
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 26395227
--- Timings ---
Current time: 1529615161840 milliseconds
Total Time:         111.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.4 seconds, 46.2%
Fitness Testing:     47.9 seconds, 43.1%
Report:              11.8 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Number IO problem report - generation 34
Test total error for best: 50883.72140000002
Test mean error for best: 25.44186
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 56.2889250004 
Correct output: 15.0922415815  | Program output: 89.2002939985 
Correct output: -30.8202558445 | Program output: -17.8202558445
Correct output: 70.2512965501  | Program output: 79.2512965501 
Correct output: 150.6666771001 | Program output: 89.2002939985 
Correct output: -148.0189802809 | Program output: -115.0189802809
Correct output: 91.9885288633  | Program output: 77.9885288633 
Correct output: 56.3430751406  | Program output: 89.2002939985 
Correct output: -55.2026859793 | Program output: -64.2026859793
Correct output: -31.9001885201 | Program output: 44.0998114799 
Correct output: 70.8415782878  | Program output: 59.8415782878 
Correct output: -70.0770879346 | Program output: -13.0770879346
Correct output: 62.2573571201  | Program output: 89.2002939985 
Correct output: -11.0880796195 | Program output: -18.0880796195
Correct output: -98.0730811682 | Program output: -103.0730811682
Correct output: 45.954554541   | Program output: 40.954554541  
Correct output: 9.2519145493   | Program output: 74.2519145493 
Correct output: -62.0820375564 | Program output: 5.9179624436  
Correct output: -85.5891975931 | Program output: -91.5891975931
Correct output: 26.7802144548  | Program output: 89.2002939985 
Correct output: 1.2069497285   | Program output: 34.2069497285 
Correct output: 70.6151869811  | Program output: 89.2002939985 
Correct output: 27.2083659619  | Program output: 10.2083659619 
Correct output: 103.781099078  | Program output: 89.2002939985 
Correct output: 66.4193519736  | Program output: 64.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction float_pop} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction in1} {:instruction integer_flush} {:instruction float_flush})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 in1 float_dup_items float_dec float_yankdup float_dec in2 in1 float_dec float_yankdup float_dec float_dec float_dec float_dup in2 float_dec in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dup in2 float_dec float_dec float_dec float_yankdup integer_shove float_dec float_dec float_dup in2 float_dec float_dec float_dec float_dec float_dup in2 float_dec float_dec float_dec float_yankdup integer_shove integer_div print_float float_tan -9.568963984273623 float_pop -56.50848481366526 integer_div in1 integer_flush float_flush)
Errors: [2.0 1 74.1081 9 13.0 2 9.0 1 61.4664 13 33.0 2 14.0 2 32.8572 12 9.0 2 76.0 12 11.0 2 57.0 2 26.9429 11 7.0 1 5.0 3 5.0 1 65.0 2 68.0 13 6.0 2 62.4201 10 33.0 2 18.5851 11 17.0 2 14.5808 11 2.0 1]
Total: 852.9606
Mean: 17.059212
Genome size: 63
Size: 64
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2482.877672000003
Median total errors in population: 929.9525
Error averages by case: (67.6679075 2.079 125.44606139999904 9.623 74.88253279999998 2.907 73.31799120000004 2.458 125.27646920000115 9.835 97.71459860000002 2.987 76.341869 2.862 98.5911444999993 9.115 72.80478519999997 2.841 134.43804719999997 11.915 70.53597339999995 3.134 115.83977530000001 2.783 109.61280239999867 11.831 68.1804852 2.233 70.42318089999999 3.651 69.9987345 2.537 124.05693270000002 2.857 125.7593252 12.294 79.07765749999994 3.315 126.89430460000126 10.857 94.63134409999999 2.794 87.26333929999872 8.257 104.88368539999865 7.14 81.58028270000028 8.555 66.86244219999999 1.936)
Error minima by case: (0.0 0 14.0922 8 0.0 0 0.0 0 60.4664 2 20.0 1 3.0 1 16.8572 2 0.0 0 8.9335 9 2.3587 1 11.9229 1 10.9429 9 0.0 0 0.0 0 1.4021 1 9.2516 1 30.918 1 5.0 1 25.7802 9 0.4928 1 2.5851 1 17.0 1 13.5808 2 0.0 0)
Average genome size in population (length): 42.149
Average program size in population (points): 43.149
Average percent parens in population: 0.024
Minimum age in population: 48.70365781709552
Maximum age in population: 53.46337240783032
Average age in population: 51.45338735420653
Median age in population: 51.50092784489971
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 112
Genome diversity (% unique Plush genomes):	 0.57
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 112
Syntactic diversity (% unique Push programs):	 0.57
Total error diversity:				 0.225
Error (vector) diversity:			 0.351
Behavioral diversity:				 0.351
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 27449077
--- Timings ---
Current time: 1529615165622 milliseconds
Total Time:         114.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.9 seconds, 46.1%
Fitness Testing:     49.6 seconds, 43.2%
Report:              12.2 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Number IO problem report - generation 35
Test total error for best: 50846.13340000001
Test mean error for best: 25.42307
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 53.2889250004 
Correct output: 15.0922415815  | Program output: 89.2002939985 
Correct output: -30.8202558445 | Program output: -20.8202558445
Correct output: 70.2512965501  | Program output: 76.2512965501 
Correct output: 150.6666771001 | Program output: 89.2002939985 
Correct output: -148.0189802809 | Program output: -118.0189802809
Correct output: 91.9885288633  | Program output: 74.9885288633 
Correct output: 56.3430751406  | Program output: 89.2002939985 
Correct output: -55.2026859793 | Program output: -67.2026859793
Correct output: -31.9001885201 | Program output: 41.0998114799 
Correct output: 70.8415782878  | Program output: 63.8415782878 
Correct output: -70.0770879346 | Program output: -16.0770879346
Correct output: 62.2573571201  | Program output: 89.2002939985 
Correct output: -11.0880796195 | Program output: -21.0880796195
Correct output: -98.0730811682 | Program output: -106.0730811682
Correct output: 45.954554541   | Program output: 33.954554541  
Correct output: 9.2519145493   | Program output: 71.2519145493 
Correct output: -62.0820375564 | Program output: 2.9179624436  
Correct output: -85.5891975931 | Program output: -99.5891975931
Correct output: 26.7802144548  | Program output: 89.2002939985 
Correct output: 1.2069497285   | Program output: 31.2069497285 
Correct output: 70.6151869811  | Program output: 89.2002939985 
Correct output: 27.2083659619  | Program output: 10.2083659619 
Correct output: 103.781099078  | Program output: 89.2002939985 
Correct output: 66.4193519736  | Program output: 61.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction tagged_481} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction in2} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_div} {:instruction print_float})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_dec float_dup in2 float_dec integer_add float_dec integer_yankdup float_dup in2 float_dec float_dec float_dec float_yankdup integer_shove float_dec tagged_481 float_dup in2 float_dec float_dec float_dec float_yankdup in2 float_dec float_yankdup integer_shove integer_div float_dup_items float_dec float_yankdup float_dec float_dec float_dec float_dup in2 float_dec float_dec float_dec float_yankdup integer_shove integer_div print_float)
Errors: [1.0 1 74.1081 9 10.0 1 6.0 1 61.4664 13 30.0 1 17.0 2 32.8572 12 12.0 2 73.0 11 7.0 2 54.0 2 26.9429 11 10.0 1 8.0 3 12.0 2 62.0 2 65.0 12 14.0 2 62.4201 10 30.0 1 18.5851 11 17.0 2 14.5808 11 5.0 1]
Total: 849.9606
Mean: 16.999212
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2437.7379628000062
Median total errors in population: 919.9525
Error averages by case: (66.78322019999999 2.082 129.85476229999855 9.343 72.9936764 2.899 73.29162920000003 2.424 119.56435320000134 12.788 97.06352219999998 3.0 73.73357460000003 2.961 90.93734199999905 11.842 72.47877959999998 2.864 133.39755330000003 11.944 67.44871469999993 3.211 114.09542800000004 2.862 88.18292719999916 11.223 66.84811049999998 2.209 70.28153929999998 3.759 66.3399515 2.617 122.96066739999999 2.9 124.05381010000005 12.324 83.08039199999993 3.406 119.98274650000181 10.28 93.72213520000004 2.825 79.20863179999837 10.911 117.05286449999791 9.017 75.7015717000007 10.908 66.14505939999997 1.936)
Error minima by case: (0.0 0 14.7634 8 0.1797 1 0.0 0 22.7339 2 22.0 1 0.0 0 6.3431 2 0.0 0 19.3312 8 3.0 1 4.9229 1 15.9429 10 0.0 0 0.0 0 2.0 1 7.2519 1 23.918 1 5.0 1 26.4514 9 0.7931 1 7.5851 2 13.2084 1 6.6883 2 0.0 0)
Average genome size in population (length): 44.812
Average program size in population (points): 45.812
Average percent parens in population: 0.023
Minimum age in population: 49.70365781709552
Maximum age in population: 54.63073000812437
Average age in population: 52.94892603698571
Median age in population: 52.99702743793023
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 96
Genome diversity (% unique Plush genomes):	 0.58
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 96
Syntactic diversity (% unique Push programs):	 0.58
Total error diversity:				 0.219
Error (vector) diversity:			 0.404
Behavioral diversity:				 0.404
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 28569427
--- Timings ---
Current time: 1529615169195 milliseconds
Total Time:         118.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.4 seconds, 45.9%
Fitness Testing:     51.3 seconds, 43.2%
Report:              12.8 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Number IO problem report - generation 36
Test total error for best: 50846.13340000001
Test mean error for best: 25.42307
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 53.2889250004 
Correct output: 15.0922415815  | Program output: 89.2002939985 
Correct output: -30.8202558445 | Program output: -20.8202558445
Correct output: 70.2512965501  | Program output: 76.2512965501 
Correct output: 150.6666771001 | Program output: 89.2002939985 
Correct output: -148.0189802809 | Program output: -118.0189802809
Correct output: 91.9885288633  | Program output: 74.9885288633 
Correct output: 56.3430751406  | Program output: 89.2002939985 
Correct output: -55.2026859793 | Program output: -67.2026859793
Correct output: -31.9001885201 | Program output: 41.0998114799 
Correct output: 70.8415782878  | Program output: 63.8415782878 
Correct output: -70.0770879346 | Program output: -16.0770879346
Correct output: 62.2573571201  | Program output: 89.2002939985 
Correct output: -11.0880796195 | Program output: -21.0880796195
Correct output: -98.0730811682 | Program output: -106.0730811682
Correct output: 45.954554541   | Program output: 33.954554541  
Correct output: 9.2519145493   | Program output: 71.2519145493 
Correct output: -62.0820375564 | Program output: 2.9179624436  
Correct output: -85.5891975931 | Program output: -99.5891975931
Correct output: 26.7802144548  | Program output: 89.2002939985 
Correct output: 1.2069497285   | Program output: 31.2069497285 
Correct output: 70.6151869811  | Program output: 89.2002939985 
Correct output: 27.2083659619  | Program output: 10.2083659619 
Correct output: 103.781099078  | Program output: 89.2002939985 
Correct output: 66.4193519736  | Program output: 61.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction tagged_481} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction in2} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_div} {:instruction print_float})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_dec float_dup in2 float_dec integer_add float_dec integer_yankdup float_dup in2 float_dec float_dec float_dec float_yankdup integer_shove float_dec tagged_481 float_dup in2 float_dec float_dec float_dec float_yankdup in2 float_dec float_yankdup integer_shove integer_div float_dup_items float_dec float_yankdup float_dec float_dec float_dec float_dup in2 float_dec float_dec float_dec float_yankdup integer_shove integer_div print_float)
Errors: [1.0 1 74.1081 9 10.0 1 6.0 1 61.4664 13 30.0 1 17.0 2 32.8572 12 12.0 2 73.0 11 7.0 2 54.0 2 26.9429 11 10.0 1 8.0 3 12.0 2 62.0 2 65.0 12 14.0 2 62.4201 10 30.0 1 18.5851 11 17.0 2 14.5808 11 5.0 1]
Total: 849.9606
Mean: 16.999212
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2694.4895881000057
Median total errors in population: 905.9525
Error averages by case: (78.80170659999997 2.489 138.7432340999997 9.489 82.27399989999999 3.141 83.09076970000004 2.515 129.29451880000178 12.951 108.31231689999994 3.248 87.5588676 3.277 101.84795019999905 11.925 86.36564900000003 3.172 140.19926660000004 11.784 76.4410406999999 3.464 122.5115079 3.237 97.50673579999857 11.284 79.96630870000003 2.713 85.3345451 4.073 74.03706929999997 2.804 129.96608529999997 3.232 130.54279210000007 11.122 94.39541669999994 3.75 128.8875748000017 10.399 101.70441690000003 3.072 88.89723709999829 11.1 124.55608739999782 8.891 85.80239420000007 11.061 80.65209669999999 2.607)
Error minima by case: (0.0 0 12.2206 8 0.0 0 0.0 0 60.4664 2 17.0 1 2.7882 1 7.4884 2 1.0 1 6.2318 7 3.0 1 8.9229 1 13.4026 9 0.0 0 0.0 0 2.0 1 7.7105 1 27.918 1 5.0 1 22.0745 9 0.1076 1 5.5851 2 17.0 1 13.5808 2 0.0 0)
Average genome size in population (length): 52.482
Average program size in population (points): 53.482
Average percent parens in population: 0.019
Minimum age in population: 52.2675710200856
Maximum age in population: 56.34245625027688
Average age in population: 54.42471338737692
Median age in population: 54.44543329795124
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.678
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.678
Total error diversity:				 0.277
Error (vector) diversity:			 0.52
Behavioral diversity:				 0.521
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 29881477
--- Timings ---
Current time: 1529615172808 milliseconds
Total Time:         122.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.8 seconds, 45.7%
Fitness Testing:     53.0 seconds, 43.4%
Report:              13.2 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Number IO problem report - generation 37
Test total error for best: 46098.25200000005
Test mean error for best: 23.04913
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 50.2889250004 
Correct output: 15.0922415815  | Program output: 89.2002939985 
Correct output: -30.8202558445 | Program output: -23.8202558445
Correct output: 70.2512965501  | Program output: 73.2512965501 
Correct output: 150.6666771001 | Program output: 89.2002939985 
Correct output: -148.0189802809 | Program output: -121.0189802809
Correct output: 91.9885288633  | Program output: 71.9885288633 
Correct output: 56.3430751406  | Program output: 89.2002939985 
Correct output: -55.2026859793 | Program output: -70.2026859793
Correct output: -31.9001885201 | Program output: 38.0998114799 
Correct output: 70.8415782878  | Program output: 65.8415782878 
Correct output: -70.0770879346 | Program output: -19.0770879346
Correct output: 62.2573571201  | Program output: 89.2002939985 
Correct output: -11.0880796195 | Program output: -24.0880796195
Correct output: -98.0730811682 | Program output: -109.0730811682
Correct output: 45.954554541   | Program output: 35.954554541  
Correct output: 9.2519145493   | Program output: 68.2519145493 
Correct output: -62.0820375564 | Program output: -0.0820375564 
Correct output: -85.5891975931 | Program output: -98.5891975931
Correct output: 26.7802144548  | Program output: 89.2002939985 
Correct output: 1.2069497285   | Program output: 28.2069497285 
Correct output: 70.6151869811  | Program output: 89.2002939985 
Correct output: 27.2083659619  | Program output: 10.2083659619 
Correct output: 103.781099078  | Program output: 89.2002939985 
Correct output: 66.4193519736  | Program output: 58.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction float_pop} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction in1} {:instruction integer_flush} {:instruction float_flush})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 in1 float_dup_items float_dec float_yankdup float_dec in2 in1 float_dup_items 90.20029399850333 float_rot float_dec in1 in1 float_dup_items float_dec float_yankdup float_dec in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dup in2 float_dec float_dec float_dec float_yankdup integer_shove float_dec float_dec float_dup in2 float_dec float_dec float_dec float_dec float_dup in2 float_dec float_dec float_dec float_dec float_dup in2 float_dec float_dec float_dec float_yankdup integer_shove integer_div print_float float_tan -9.568963984273623 float_pop -56.50848481366526 integer_div in1 integer_flush float_flush)
Errors: [4.0 1 74.1081 9 7.0 2 3.0 1 61.4664 13 27.0 2 20.0 1 32.8572 12 15.0 2 70.0 11 5.0 2 51.0 2 26.9429 11 13.0 2 11.0 3 10.0 1 59.0 2 62.0 2 13.0 2 62.4201 10 27.0 2 18.5851 11 17.0 2 14.5808 11 8.0 2]
Total: 831.9606
Mean: 16.639212
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2516.9175258000055
Median total errors in population: 893.9525
Error averages by case: (73.26420730000001 2.639 130.83287009999864 9.435 73.72468069999998 3.068 75.22989080000004 2.444 120.29085380000143 12.963 101.31531159999999 3.188 85.92581230000003 3.229 92.946916799999 11.927 82.65491749999998 3.162 133.96537740000002 11.562 71.47505419999992 3.482 113.91508790000005 3.18 88.35521979999915 11.241 74.5441716 2.816 81.49584499999997 4.047 73.34102659999998 2.803 123.52131320000002 3.189 124.04918570000004 9.056 85.34473899999995 3.571 120.6432861000018 10.36 95.17346050000003 2.958 79.72421739999842 11.098 109.91226439999866 7.772 76.50177910000075 11.028 75.801037 2.751)
Error minima by case: (0.0 0 12.0922 8 0.0 0 0.0 0 59.9213 2 16.0 1 1.0 1 3.3431 2 0.0 0 6.0016 8 3.0 1 4.9229 1 11.9429 10 0.0 0 0.0 0 2.0 1 5.2519 1 23.918 1 5.0 1 23.7802 9 0.7624 1 3.5851 1 10.2084 1 13.0357 2 0.0 0)
Average genome size in population (length): 57.713
Average program size in population (points): 58.713
Average percent parens in population: 0.017
Minimum age in population: 53.48569744220003
Maximum age in population: 57.90940974369005
Average age in population: 55.83946698525446
Median age in population: 55.88478800310259
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.705
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.705
Total error diversity:				 0.279
Error (vector) diversity:			 0.528
Behavioral diversity:				 0.528
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 31324302
--- Timings ---
Current time: 1529615176485 milliseconds
Total Time:         125.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.2 seconds, 45.5%
Fitness Testing:     54.7 seconds, 43.5%
Report:              13.7 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Number IO problem report - generation 38
Test total error for best: 46098.25200000005
Test mean error for best: 23.04913
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 50.2889250004 
Correct output: 15.0922415815  | Program output: 89.2002939985 
Correct output: -30.8202558445 | Program output: -23.8202558445
Correct output: 70.2512965501  | Program output: 73.2512965501 
Correct output: 150.6666771001 | Program output: 89.2002939985 
Correct output: -148.0189802809 | Program output: -121.0189802809
Correct output: 91.9885288633  | Program output: 71.9885288633 
Correct output: 56.3430751406  | Program output: 89.2002939985 
Correct output: -55.2026859793 | Program output: -70.2026859793
Correct output: -31.9001885201 | Program output: 38.0998114799 
Correct output: 70.8415782878  | Program output: 65.8415782878 
Correct output: -70.0770879346 | Program output: -19.0770879346
Correct output: 62.2573571201  | Program output: 89.2002939985 
Correct output: -11.0880796195 | Program output: -24.0880796195
Correct output: -98.0730811682 | Program output: -109.0730811682
Correct output: 45.954554541   | Program output: 35.954554541  
Correct output: 9.2519145493   | Program output: 68.2519145493 
Correct output: -62.0820375564 | Program output: -0.0820375564 
Correct output: -85.5891975931 | Program output: -98.5891975931
Correct output: 26.7802144548  | Program output: 89.2002939985 
Correct output: 1.2069497285   | Program output: 28.2069497285 
Correct output: 70.6151869811  | Program output: 89.2002939985 
Correct output: 27.2083659619  | Program output: 10.2083659619 
Correct output: 103.781099078  | Program output: 89.2002939985 
Correct output: 66.4193519736  | Program output: 58.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction float_pop} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction in1} {:instruction integer_flush} {:instruction float_flush})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 in1 float_dup_items float_dec float_yankdup float_dec in2 in1 float_dup_items 90.20029399850333 float_rot float_dec in1 in1 float_dup_items float_dec float_yankdup float_dec in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dup in2 float_dec float_dec float_dec float_yankdup integer_shove float_dec float_dec float_dup in2 float_dec float_dec float_dec float_dec float_dup in2 float_dec float_dec float_dec float_dec float_dup in2 float_dec float_dec float_dec float_yankdup integer_shove integer_div print_float float_tan -9.568963984273623 float_pop -56.50848481366526 integer_div in1 integer_flush float_flush)
Errors: [4.0 1 74.1081 9 7.0 2 3.0 1 61.4664 13 27.0 2 20.0 1 32.8572 12 15.0 2 70.0 11 5.0 2 51.0 2 26.9429 11 13.0 2 11.0 3 10.0 1 59.0 2 62.0 2 13.0 2 62.4201 10 27.0 2 18.5851 11 17.0 2 14.5808 11 8.0 2]
Total: 831.9606
Mean: 16.639212
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2539.009690899999
Median total errors in population: 880.9525
Error averages by case: (73.97480209999995 2.723 132.6081477999986 9.431 76.33348099999998 3.263 77.26775620000004 2.547 122.56308850000147 12.935 103.55127819999997 3.372 86.65426860000001 3.319 95.11735649999895 11.975 82.0424568 3.304 133.93806410000002 11.694 73.50585039999989 3.635 116.6857786 3.298 90.54265289999893 11.267 75.42080669999997 2.85 81.65351409999998 4.174 74.26457449999997 2.701 123.76768870000001 3.323 125.74720930000005 9.641 88.05626699999993 3.547 122.49916020000195 10.362 95.41203530000003 3.155 82.00003169999808 11.053 97.43291429999931 5.513 79.04651040000036 10.924 76.11699699999996 2.801)
Error minima by case: (0.0 0 14.7634 8 0.0 0 0.0 0 59.437 3 17.0 1 0.0 0 5.3431 2 0.0 0 5.9132 8 1.6413 1 6.9229 1 12.9429 7 0.0 0 0.0 0 2.0 1 8.195 1 1.4784 1 5.0 1 26.4514 9 0.0745 1 4.5851 2 12.2084 1 12.5514 2 0.0 0)
Average genome size in population (length): 60.366
Average program size in population (points): 61.366
Average percent parens in population: 0.016
Minimum age in population: 55.05289316929702
Maximum age in population: 59.03153200374072
Average age in population: 57.24306117085518
Median age in population: 57.29700031862376
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 42
Genome diversity (% unique Plush genomes):	 0.717
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.717
Total error diversity:				 0.328
Error (vector) diversity:			 0.525
Behavioral diversity:				 0.526
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 32833452
--- Timings ---
Current time: 1529615180535 milliseconds
Total Time:         129.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.7 seconds, 45.3%
Fitness Testing:     56.6 seconds, 43.7%
Report:              14.2 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Number IO problem report - generation 39
Test total error for best: 46098.25200000005
Test mean error for best: 23.04913
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 50.2889250004 
Correct output: 15.0922415815  | Program output: 89.2002939985 
Correct output: -30.8202558445 | Program output: -23.8202558445
Correct output: 70.2512965501  | Program output: 73.2512965501 
Correct output: 150.6666771001 | Program output: 89.2002939985 
Correct output: -148.0189802809 | Program output: -121.0189802809
Correct output: 91.9885288633  | Program output: 71.9885288633 
Correct output: 56.3430751406  | Program output: 89.2002939985 
Correct output: -55.2026859793 | Program output: -70.2026859793
Correct output: -31.9001885201 | Program output: 38.0998114799 
Correct output: 70.8415782878  | Program output: 65.8415782878 
Correct output: -70.0770879346 | Program output: -19.0770879346
Correct output: 62.2573571201  | Program output: 89.2002939985 
Correct output: -11.0880796195 | Program output: -24.0880796195
Correct output: -98.0730811682 | Program output: -109.0730811682
Correct output: 45.954554541   | Program output: 35.954554541  
Correct output: 9.2519145493   | Program output: 68.2519145493 
Correct output: -62.0820375564 | Program output: -0.0820375564 
Correct output: -85.5891975931 | Program output: -98.5891975931
Correct output: 26.7802144548  | Program output: 89.2002939985 
Correct output: 1.2069497285   | Program output: 28.2069497285 
Correct output: 70.6151869811  | Program output: 89.2002939985 
Correct output: 27.2083659619  | Program output: 10.2083659619 
Correct output: 103.781099078  | Program output: 89.2002939985 
Correct output: 66.4193519736  | Program output: 58.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction float_pop} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction in1} {:instruction integer_flush} {:instruction float_flush})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 in1 float_dup_items float_dec float_yankdup float_dec in2 in1 float_dup_items 90.20029399850333 float_rot float_dec in1 in1 float_dup_items float_dec float_yankdup float_dec in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dup in2 float_dec float_dec float_dec float_yankdup integer_shove float_dec float_dec float_dup in2 float_dec float_dec float_dec float_dec float_dup in2 float_dec float_dec float_dec float_dec float_dup in2 float_dec float_dec float_dec float_yankdup integer_shove integer_div print_float float_tan -9.568963984273623 float_pop -56.50848481366526 integer_div in1 integer_flush float_flush)
Errors: [4.0 1 74.1081 9 7.0 2 3.0 1 61.4664 13 27.0 2 20.0 1 32.8572 12 15.0 2 70.0 11 5.0 2 51.0 2 26.9429 11 13.0 2 11.0 3 10.0 1 59.0 2 62.0 2 13.0 2 62.4201 10 27.0 2 18.5851 11 17.0 2 14.5808 11 8.0 2]
Total: 831.9606
Mean: 16.639212
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2257.309921299994
Median total errors in population: 853.9606
Error averages by case: (62.053098599999984 2.21 123.41553369999866 9.323 64.64467629999999 2.806 65.31774190000002 2.136 112.93418900000118 12.911 89.84356100000001 2.888 74.10917610000001 2.899 85.37031239999905 11.954 70.78146600000001 2.927 125.25531950000003 11.569 62.57780979999995 3.273 105.39551520000002 2.961 80.53327169999945 11.191 64.5287243 2.466 68.8446116 3.847 61.48365849999998 2.501 114.97102890000001 2.922 115.94118680000003 9.737 79.06553119999994 3.416 113.0687260000017 10.278 85.6596466 2.713 72.05985099999869 10.998 80.81746529999994 4.178 68.8203068000011 10.901 64.46351309999999 2.349)
Error minima by case: (0.0 0 14.7634 8 0.0 0 0.0 0 60.3027 2 17.0 1 2.7882 1 16.8572 2 1.0 1 7.9025 8 3.0 1 19.9229 1 10.9429 9 0.0 0 0.0 0 2.0 1 8.4982 1 22.2794 1 3.7095 1 26.4514 9 2.2039 1 2.5851 1 17.0 1 13.4171 2 0.0 0)
Average genome size in population (length): 59.219
Average program size in population (points): 60.219
Average percent parens in population: 0.017
Minimum age in population: 56.05289316929702
Maximum age in population: 60.41993935523715
Average age in population: 58.59419792222106
Median age in population: 58.61001027220482
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 103
Genome diversity (% unique Plush genomes):	 0.666
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 103
Syntactic diversity (% unique Push programs):	 0.666
Total error diversity:				 0.262
Error (vector) diversity:			 0.48
Behavioral diversity:				 0.48
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 34313952
--- Timings ---
Current time: 1529615184361 milliseconds
Total Time:         133.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.2 seconds, 45.0%
Fitness Testing:     58.5 seconds, 43.8%
Report:              14.8 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Number IO problem report - generation 40
Test total error for best: 48971.23900000003
Test mean error for best: 24.48562
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 49.2889250004 
Correct output: 15.0922415815  | Program output: 87.2002939985 
Correct output: -30.8202558445 | Program output: -24.8202558445
Correct output: 70.2512965501  | Program output: 72.2512965501 
Correct output: 150.6666771001 | Program output: 87.2002939985 
Correct output: -148.0189802809 | Program output: -122.0189802809
Correct output: 91.9885288633  | Program output: 70.9885288633 
Correct output: 56.3430751406  | Program output: 87.2002939985 
Correct output: -55.2026859793 | Program output: -71.2026859793
Correct output: -31.9001885201 | Program output: 37.0998114799 
Correct output: 70.8415782878  | Program output: 59.8415782878 
Correct output: -70.0770879346 | Program output: -20.0770879346
Correct output: 62.2573571201  | Program output: 87.2002939985 
Correct output: -11.0880796195 | Program output: -25.0880796195
Correct output: -98.0730811682 | Program output: -110.0730811682
Correct output: 45.954554541   | Program output: 37.954554541  
Correct output: 9.2519145493   | Program output: 67.2519145493 
Correct output: -62.0820375564 | Program output: -1.0820375564 
Correct output: -85.5891975931 | Program output: -95.5891975931
Correct output: 26.7802144548  | Program output: 87.2002939985 
Correct output: 1.2069497285   | Program output: 27.2069497285 
Correct output: 70.6151869811  | Program output: 87.2002939985 
Correct output: 27.2083659619  | Program output: 10.2083659619 
Correct output: 103.781099078  | Program output: 87.2002939985 
Correct output: 66.4193519736  | Program output: 57.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction float_max} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_481} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction in2} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_div} {:instruction print_float} {:instruction integer_max} {:instruction integer_mult} {:instruction integer_div} {:instruction float_dup_items} {:instruction integer_mult})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 float_dec float_max float_dec float_yankdup float_dec in2 in1 float_dup in2 float_dec float_dec float_dec float_dec float_dup float_dec float_dup in2 float_yankdup float_dec float_dec float_dec float_dec tagged_481 float_dup in2 float_dec float_dec float_dec float_dec float_yankdup in2 float_dec float_yankdup integer_shove integer_div float_dup_items float_dec float_dec float_dec float_dup float_dec float_dec float_dec float_yankdup float_dec float_dec float_yankdup integer_shove integer_div float_dec float_dec float_yankdup integer_shove integer_div in2 float_dec float_yankdup integer_shove integer_div print_float integer_max integer_mult integer_div float_dup_items integer_mult)
Errors: [5.0 2 72.1081 9 6.0 2 2.0 1 63.4664 13 26.0 2 21.0 2 30.8572 12 16.0 2 69.0 11 11.0 2 50.0 1 24.9429 11 14.0 2 12.0 3 8.0 2 58.0 2 61.0 2 10.0 1 60.4201 10 26.0 2 16.5851 11 17.0 2 16.5808 11 9.0 2]
Total: 825.9606
Mean: 16.519213
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2343.4585527999957
Median total errors in population: 851.9606
Error averages by case: (66.95728359999998 2.482 125.75215129999854 9.407 66.51579699999999 3.011 69.60549380000003 2.381 116.2982516000011 12.768 94.39228799999998 3.12 80.7651818 3.101 88.40420979999902 11.837 75.13749640000002 3.154 125.11684729999996 11.373 68.2642186999999 3.449 106.48778189999999 3.201 84.0925311999994 11.186 67.92938230000003 2.832 74.44618980000003 4.065 67.70388869999998 2.672 115.83731340000006 3.136 113.62328500000001 9.003 84.98095449999997 3.592 115.84872200000187 10.313 86.53728069999998 2.946 75.23848619999859 10.897 83.07601069999991 4.35 72.3851664000009 10.807 70.25934069999998 2.72)
Error minima by case: (0.0 0 12.0922 8 0.0 0 0.0 0 60.3027 2 14.0 1 1.7882 1 5.3431 2 0.0 0 0.9638 7 2.3587 1 2.0489 1 11.9429 9 0.0881 1 0.0 0 3.0 1 6.2519 1 5.9461 1 5.0 1 23.7802 8 0.2069 1 3.5851 1 8.2026 1 13.4171 2 0.0 0)
Average genome size in population (length): 60.338
Average program size in population (points): 61.338
Average percent parens in population: 0.017
Minimum age in population: 57.39598893988295
Maximum age in population: 61.82122865733072
Average age in population: 59.99209463437926
Median age in population: 60.04939262933203
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 110
Genome diversity (% unique Plush genomes):	 0.653
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 110
Syntactic diversity (% unique Push programs):	 0.653
Total error diversity:				 0.299
Error (vector) diversity:			 0.504
Behavioral diversity:				 0.504
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 35822477
--- Timings ---
Current time: 1529615188121 milliseconds
Total Time:         137.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.6 seconds, 44.8%
Fitness Testing:     60.4 seconds, 43.9%
Report:              15.3 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Number IO problem report - generation 41
Test total error for best: 36786.7101
Test mean error for best: 18.39336
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 50.2889250004 
Correct output: 15.0922415815  | Program output: 47.29253558   
Correct output: -30.8202558445 | Program output: -23.8202558445
Correct output: 70.2512965501  | Program output: 73.2512965501 
Correct output: 150.6666771001 | Program output: 160.8669710986
Correct output: -148.0189802809 | Program output: -121.0189802809
Correct output: 91.9885288633  | Program output: 71.9885288633 
Correct output: 56.3430751406  | Program output: 90.5433691391 
Correct output: -55.2026859793 | Program output: -70.2026859793
Correct output: -31.9001885201 | Program output: 38.0998114799 
Correct output: 70.8415782878  | Program output: 65.8415782878 
Correct output: -70.0770879346 | Program output: -19.0770879346
Correct output: 62.2573571201  | Program output: 53.4576511186 
Correct output: -11.0880796195 | Program output: -24.0880796195
Correct output: -98.0730811682 | Program output: -109.0730811682
Correct output: 45.954554541   | Program output: 35.954554541  
Correct output: 9.2519145493   | Program output: 68.2519145493 
Correct output: -62.0820375564 | Program output: -0.0820375564 
Correct output: -85.5891975931 | Program output: -98.5891975931
Correct output: 26.7802144548  | Program output: 31.9805084533 
Correct output: 1.2069497285   | Program output: 28.2069497285 
Correct output: 70.6151869811  | Program output: 115.8154809796
Correct output: 27.2083659619  | Program output: 90.2002939985 
Correct output: 103.781099078  | Program output: 159.9813930765
Correct output: 66.4193519736  | Program output: 58.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction float_pop} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction in1} {:instruction integer_flush} {:instruction float_flush})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_yankdup float_dec in2 in1 float_dup_items 90.20029399850333 float_rot float_dec in1 in1 integer_mod float_dec float_yankdup float_dec in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dup in2 float_dec float_dec float_dec float_yankdup integer_shove float_dec float_dec float_dup in2 float_dec float_dec float_dec float_dec float_dup in2 float_dec float_dec float_dec float_dec float_dup in2 float_dec float_dec float_dec float_yankdup integer_shove integer_div print_float float_tan -9.568963984273623 float_pop -56.50848481366526 integer_div in1 integer_flush float_flush)
Errors: [4.0 1 32.2003 8 7.0 2 3.0 1 10.2003 7 27.0 2 20.0 1 34.2003 9 15.0 2 70.0 11 5.0 2 51.0 2 8.7997 8 13.0 2 11.0 3 10.0 1 59.0 2 62.0 2 13.0 2 5.2003 8 27.0 2 45.2003 9 62.9919 9 56.2003 7 8.0 2]
Total: 764.9933999999998
Mean: 15.299868
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2273.8111245999953
Median total errors in population: 847.9606
Error averages by case: (66.29686549999998 2.373 122.27268259999869 9.473 62.16268319999999 2.942 67.69454650000006 2.205 111.97425040000131 12.794 91.99428540000001 3.041 79.09371620000003 2.86 84.58444159999905 11.731 75.49333980000002 2.98 125.81830479999996 11.388 59.648399599999884 3.413 102.94871040000001 3.0 80.21128759999962 11.196 65.04731779999999 2.775 74.02914770000001 3.874 64.47785069999998 2.499 115.8856178 2.931 113.95042930000005 7.847 81.39067639999993 3.395 112.32679880000174 10.365 86.40785920000002 2.894 71.18058589999836 10.915 76.87839489999999 3.964 68.01590080000143 10.811 69.68203169999998 2.679)
Error minima by case: (0.0 0 14.0583 8 0.0 0 0.0 0 10.2003 2 17.0 1 2.0 1 5.3431 2 1.0 1 6.9002 7 2.3587 1 6.9229 1 8.7997 8 0.5897 1 0.0 0 3.0 1 7.0938 1 25.918 1 5.0 1 5.2003 8 1.2069 1 2.5851 2 12.2084 1 13.4171 2 0.0 0)
Average genome size in population (length): 65.358
Average program size in population (points): 66.358
Average percent parens in population: 0.015
Minimum age in population: 58.86415822080016
Maximum age in population: 63.48882388081347
Average age in population: 61.51912791861517
Median age in population: 61.55049566285015
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 64
Genome diversity (% unique Plush genomes):	 0.678
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 64
Syntactic diversity (% unique Push programs):	 0.678
Total error diversity:				 0.32
Error (vector) diversity:			 0.54
Behavioral diversity:				 0.54
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 37456427
--- Timings ---
Current time: 1529615192041 milliseconds
Total Time:         141.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.2 seconds, 44.7%
Fitness Testing:     62.3 seconds, 44.1%
Report:              15.8 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Number IO problem report - generation 42
Test total error for best: 36623.24980000001
Test mean error for best: 18.31162
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 50.2889250004 
Correct output: 15.0922415815  | Program output: 47.29253558   
Correct output: -30.8202558445 | Program output: -23.8202558445
Correct output: 70.2512965501  | Program output: 73.2512965501 
Correct output: 150.6666771001 | Program output: 160.8669710986
Correct output: -148.0189802809 | Program output: -121.0189802809
Correct output: 91.9885288633  | Program output: 71.9885288633 
Correct output: 56.3430751406  | Program output: 90.5433691391 
Correct output: -55.2026859793 | Program output: -70.2026859793
Correct output: -31.9001885201 | Program output: 38.0998114799 
Correct output: 70.8415782878  | Program output: 56.8415782878 
Correct output: -70.0770879346 | Program output: -19.0770879346
Correct output: 62.2573571201  | Program output: 53.4576511186 
Correct output: -11.0880796195 | Program output: -24.0880796195
Correct output: -98.0730811682 | Program output: -109.0730811682
Correct output: 45.954554541   | Program output: 39.954554541  
Correct output: 9.2519145493   | Program output: 68.2519145493 
Correct output: -62.0820375564 | Program output: -0.0820375564 
Correct output: -85.5891975931 | Program output: -92.5891975931
Correct output: 26.7802144548  | Program output: 31.9805084533 
Correct output: 1.2069497285   | Program output: 28.2069497285 
Correct output: 70.6151869811  | Program output: 115.8154809796
Correct output: 27.2083659619  | Program output: 10.2083659619 
Correct output: 103.781099078  | Program output: 159.9813930765
Correct output: 66.4193519736  | Program output: 58.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction float_pop} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction in1} {:instruction integer_flush} {:instruction float_flush})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_yankdup float_dec in2 in1 float_dup_items 90.20029399850333 float_rot float_dec in1 in1 integer_mod float_dec float_yankdup float_dec in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dup in2 float_dec float_dec float_dec float_yankdup integer_shove float_dec float_dec float_dup in2 float_dec float_dec float_dec float_dec float_dup in2 float_dec float_dec float_dec float_dec integer_add in2 float_dec float_dec float_dec float_yankdup integer_shove integer_div print_float float_tan -9.568963984273623 float_pop -56.50848481366526 integer_div in1 integer_flush float_flush)
Errors: [4.0 1 32.2003 8 7.0 2 3.0 1 10.2003 7 27.0 2 20.0 1 34.2003 9 15.0 2 70.0 11 14.0 2 51.0 2 8.7997 8 13.0 2 11.0 3 6.0 2 59.0 2 62.0 2 7.0 2 5.2003 8 27.0 2 45.2003 9 17.0 2 56.2003 7 8.0 2]
Total: 712.0014999999999
Mean: 14.24003
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2326.729730899995
Median total errors in population: 840.9606
Error averages by case: (68.43031899999998 2.348 125.4884293999985 9.449 64.16314849999999 3.012 68.41983220000003 2.242 115.0154867000011 12.764 91.78123819999996 3.108 83.20563290000001 2.686 86.26742909999895 11.853 77.72944380000001 3.03 126.8018404 11.425 63.73125459999996 3.149 104.46981450000001 3.02 83.90416649999929 11.282 68.89490950000001 2.94 75.57697080000003 3.875 66.66239259999999 2.374 116.78148740000003 2.933 116.18399990000003 6.015 78.53852819999997 3.278 115.44783060000191 10.376 87.69237680000003 2.978 75.28607539999832 10.853 79.32544529999984 3.849 72.53101660000077 10.679 72.04066199999997 2.842)
Error minima by case: (0.0 0 15.3053 8 0.0 0 0.0 0 0.2003 2 12.0 1 1.0 1 16.8572 2 1.0 1 4.0016 8 2.3587 1 10.9229 1 8.7997 7 1.0 1 0.046 1 3.0 1 3.2519 1 3.1681 1 5.0 1 4.2003 8 0.853 1 2.5851 1 17.0 1 12.6647 2 0.0 0)
Average genome size in population (length): 70.484
Average program size in population (points): 71.484
Average percent parens in population: 0.014
Minimum age in population: 60.22637297201436
Maximum age in population: 64.75711356754755
Average age in population: 62.9316994562685
Median age in population: 62.97100714454291
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 134
Genome diversity (% unique Plush genomes):	 0.687
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 134
Syntactic diversity (% unique Push programs):	 0.687
Total error diversity:				 0.284
Error (vector) diversity:			 0.504
Behavioral diversity:				 0.504
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 39218527
--- Timings ---
Current time: 1529615196154 milliseconds
Total Time:         145.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.8 seconds, 44.5%
Fitness Testing:     64.3 seconds, 44.2%
Report:              16.2 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Number IO problem report - generation 43
Test total error for best: 35889.08480000002
Test mean error for best: 17.94454
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 50.2889250004 
Correct output: 15.0922415815  | Program output: 44.29253558   
Correct output: -30.8202558445 | Program output: -23.8202558445
Correct output: 70.2512965501  | Program output: 73.2512965501 
Correct output: 150.6666771001 | Program output: 157.8669710986
Correct output: -148.0189802809 | Program output: -121.0189802809
Correct output: 91.9885288633  | Program output: 71.9885288633 
Correct output: 56.3430751406  | Program output: 87.5433691391 
Correct output: -55.2026859793 | Program output: -70.2026859793
Correct output: -31.9001885201 | Program output: 38.0998114799 
Correct output: 70.8415782878  | Program output: 56.8415782878 
Correct output: -70.0770879346 | Program output: -19.0770879346
Correct output: 62.2573571201  | Program output: 50.4576511186 
Correct output: -11.0880796195 | Program output: -24.0880796195
Correct output: -98.0730811682 | Program output: -109.0730811682
Correct output: 45.954554541   | Program output: 39.954554541  
Correct output: 9.2519145493   | Program output: 68.2519145493 
Correct output: -62.0820375564 | Program output: -0.0820375564 
Correct output: -85.5891975931 | Program output: -92.5891975931
Correct output: 26.7802144548  | Program output: 28.9805084533 
Correct output: 1.2069497285   | Program output: 28.2069497285 
Correct output: 70.6151869811  | Program output: 112.8154809796
Correct output: 27.2083659619  | Program output: 10.2083659619 
Correct output: 103.781099078  | Program output: 156.9813930765
Correct output: 66.4193519736  | Program output: 58.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction float_max} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction float_pop} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction in1} {:instruction integer_flush} {:instruction float_flush})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 float_dec float_max float_dec float_yankdup float_dec float_rot float_dec in1 float_add float_dup_items float_dec float_yankdup float_dec in2 in1 float_dup_items 90.20029399850333 float_rot float_dec in1 in1 integer_mod float_dec float_yankdup float_dec in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dup in2 float_dec float_dec float_dec float_yankdup integer_shove float_dec float_dec float_dup in2 float_dec float_dec float_dec float_dec float_dup in2 float_dec float_dec float_dec float_dec integer_add in2 float_dec float_dec float_dec float_yankdup integer_shove integer_div print_float float_tan -9.568963984273623 float_pop -56.50848481366526 integer_div in1 integer_flush float_flush)
Errors: [4.0 1 29.2003 8 7.0 2 3.0 1 7.2003 7 27.0 2 20.0 1 31.2003 9 15.0 2 70.0 11 14.0 2 51.0 2 11.7997 8 13.0 2 11.0 3 6.0 2 59.0 2 62.0 2 7.0 2 2.2003 7 27.0 2 42.2003 9 17.0 2 53.2003 7 8.0 2]
Total: 696.0014999999999
Mean: 13.92003
Genome size: 81
Size: 82
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2533.270600299996
Median total errors in population: 833.9606
Error averages by case: (77.73927029999999 2.568 130.81228729999856 9.433 73.4538709 3.149 77.72645820000001 2.453 120.73303590000135 12.617 99.11464539999994 3.28 91.89294150000003 2.841 96.28864449999895 11.798 86.57698300000001 3.208 133.55854859999994 11.433 72.72123849999998 3.064 113.7504635 3.209 90.54785179999924 11.187 79.89498610000003 3.144 84.84296400000004 4.068 74.69830549999999 2.499 123.86910260000005 3.113 123.93286039999998 5.089 84.18685369999996 3.308 120.19505190000156 10.314 94.84740169999999 3.117 84.67022849999807 10.795 89.46708379999973 4.104 82.85063000000041 10.541 81.48789269999995 3.079)
Error minima by case: (0.0 0 13.0922 8 0.0 0 0.0 0 2.7997 2 14.0 1 1.0 1 19.8572 2 0.0 0 0.4379 8 2.6413 1 17.9229 1 6.7997 7 0.0 0 1.0 1 2.0 1 7.2519 1 29.7439 1 5.0 1 2.2003 7 0.7931 1 5.5851 1 17.0 1 12.5808 2 0.0 0)
Average genome size in population (length): 73.88
Average program size in population (points): 74.88
Average percent parens in population: 0.013
Minimum age in population: 61.89865346948909
Maximum age in population: 66.34160976272437
Average age in population: 64.40177569914741
Median age in population: 64.45855684157402
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 96
Genome diversity (% unique Plush genomes):	 0.763
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 96
Syntactic diversity (% unique Push programs):	 0.763
Total error diversity:				 0.292
Error (vector) diversity:			 0.53
Behavioral diversity:				 0.532
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 41065552
--- Timings ---
Current time: 1529615200110 milliseconds
Total Time:         149.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.2 seconds, 44.3%
Fitness Testing:     66.4 seconds, 44.4%
Report:              16.7 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Number IO problem report - generation 44
Test total error for best: 32710.02840000007
Test mean error for best: 16.35501
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 46.2889250004 
Correct output: 15.0922415815  | Program output: 47.29253558   
Correct output: -30.8202558445 | Program output: -27.8202558445
Correct output: 70.2512965501  | Program output: 69.2512965501 
Correct output: 150.6666771001 | Program output: 160.8669710986
Correct output: -148.0189802809 | Program output: -125.0189802809
Correct output: 91.9885288633  | Program output: 67.9885288633 
Correct output: 56.3430751406  | Program output: 90.5433691391 
Correct output: -55.2026859793 | Program output: -74.2026859793
Correct output: -31.9001885201 | Program output: 34.0998114799 
Correct output: 70.8415782878  | Program output: 56.8415782878 
Correct output: -70.0770879346 | Program output: -23.0770879346
Correct output: 62.2573571201  | Program output: 53.4576511186 
Correct output: -11.0880796195 | Program output: -28.0880796195
Correct output: -98.0730811682 | Program output: -113.0730811682
Correct output: 45.954554541   | Program output: 39.954554541  
Correct output: 9.2519145493   | Program output: 64.2519145493 
Correct output: -62.0820375564 | Program output: -4.0820375564 
Correct output: -85.5891975931 | Program output: -92.5891975931
Correct output: 26.7802144548  | Program output: 31.9805084533 
Correct output: 1.2069497285   | Program output: 24.2069497285 
Correct output: 70.6151869811  | Program output: 28.6151869811 
Correct output: 27.2083659619  | Program output: 10.2083659619 
Correct output: 103.781099078  | Program output: 72.781099078  
Correct output: 66.4193519736  | Program output: 54.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction in1} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_div} {:instruction print_float})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_yankdup float_dec in2 in1 in1 in1 float_dup_items float_dec float_yankdup float_dup_items float_dec float_yankdup float_dec float_dec in2 in1 float_dup_items 90.20029399850333 float_rot float_dec in1 in1 float_dup_items float_dec float_yankdup float_dec in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dup in2 float_dec float_dec float_dec float_yankdup integer_shove integer_shove float_dec float_dec float_dup in2 float_dec float_dec float_dec float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dec float_dec float_dec float_dec float_dec float_dup in2 float_dec float_dec float_dec float_yankdup integer_shove integer_div print_float)
Errors: [8.0 2 32.2003 8 3.0 2 1.0 2 10.2003 7 23.0 2 24.0 2 34.2003 9 19.0 2 66.0 11 14.0 2 47.0 2 8.7997 8 17.0 2 15.0 3 6.0 2 55.0 2 58.0 2 7.0 2 5.2003 8 23.0 2 42.0 2 17.0 2 31.0 3 12.0 2]
Total: 669.6008999999999
Mean: 13.392018
Genome size: 85
Size: 86
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2901.4002632999955
Median total errors in population: 830.9606
Error averages by case: (93.89437869999999 2.797 136.48160779999876 9.274 88.16429410000002 3.225 92.42041290000003 2.64 124.63486900000053 11.267 113.65566990000002 3.406 107.34439550000005 3.04 111.9807773999987 11.15 102.57245470000001 3.321 147.6508912 11.476 90.28523029999992 3.495 127.49030470000002 3.317 102.67253049999943 10.6 95.36931739999997 3.218 100.791795 4.169 90.99370129999997 2.772 138.2351684 3.197 137.52797579999995 5.22 104.03425779999993 3.661 123.06970050000072 9.958 109.60874430000001 3.178 106.25747509999809 10.161 110.03939589999932 4.745 106.60497599999907 9.664 97.51493909999998 3.154)
Error minima by case: (0.0 0 9.7075 7 0.0 0 0.0 0 1.7997 2 4.0 1 0.0 0 3.3431 2 1.0 1 2.0016 8 0.6413 1 4.9229 1 6.7997 7 0.0 0 0.0 0 2.0 1 1.8812 1 23.918 1 5.0 1 0.2003 6 0.7931 1 2.5851 2 8.7916 1 13.5808 2 0.0 0)
Average genome size in population (length): 75.028
Average program size in population (points): 76.028
Average percent parens in population: 0.013
Minimum age in population: 63.29065590659957
Maximum age in population: 68.00127980469335
Average age in population: 65.88324622314698
Median age in population: 65.95325451272004
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.762
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.762
Total error diversity:				 0.378
Error (vector) diversity:			 0.561
Behavioral diversity:				 0.562
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 42941402
--- Timings ---
Current time: 1529615204463 milliseconds
Total Time:         153.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.7 seconds, 44.0%
Fitness Testing:     68.7 seconds, 44.7%
Report:              17.2 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Number IO problem report - generation 45
Test total error for best: 33066.984000000055
Test mean error for best: 16.53349
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 47.2889250004 
Correct output: 15.0922415815  | Program output: 40.29253558   
Correct output: -30.8202558445 | Program output: -26.8202558445
Correct output: 70.2512965501  | Program output: 70.2512965501 
Correct output: 150.6666771001 | Program output: 153.8669710986
Correct output: -148.0189802809 | Program output: -124.0189802809
Correct output: 91.9885288633  | Program output: 68.9885288633 
Correct output: 56.3430751406  | Program output: 83.5433691391 
Correct output: -55.2026859793 | Program output: -73.2026859793
Correct output: -31.9001885201 | Program output: 35.0998114799 
Correct output: 70.8415782878  | Program output: 61.8415782878 
Correct output: -70.0770879346 | Program output: -22.0770879346
Correct output: 62.2573571201  | Program output: 46.4576511186 
Correct output: -11.0880796195 | Program output: -27.0880796195
Correct output: -98.0730811682 | Program output: -112.0730811682
Correct output: 45.954554541   | Program output: 32.954554541  
Correct output: 9.2519145493   | Program output: 65.2519145493 
Correct output: -62.0820375564 | Program output: -3.0820375564 
Correct output: -85.5891975931 | Program output: -101.5891975931
Correct output: 26.7802144548  | Program output: 24.9805084533 
Correct output: 1.2069497285   | Program output: 25.2069497285 
Correct output: 70.6151869811  | Program output: 108.8154809796
Correct output: 27.2083659619  | Program output: 10.2083659619 
Correct output: 103.781099078  | Program output: 90.2002939985 
Correct output: 66.4193519736  | Program output: 55.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction in1} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_shove} {:instruction in1} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction float_tan} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_flush} {:instruction float_flush})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_yankdup float_dec in2 in1 float_dup_items 90.20029399850333 float_rot in1 in2 in1 float_dup_items 90.20029399850333 float_rot float_shove in1 in1 integer_mod float_dec float_yankdup float_dec in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dup in2 float_dec float_dec float_dec float_yankdup integer_shove float_dec float_dec float_dup float_dec float_yankdup integer_shove float_dec float_dec float_dup in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dec float_dec float_dup in2 float_dec float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -9.568963984273623 float_tan -56.50848481366526 integer_div float_frominteger integer_flush float_flush)
Errors: [7.0 2 25.2003 8 4.0 2 0.0 0 3.2003 7 24.0 2 23.0 2 27.2003 9 18.0 2 67.0 11 9.0 2 48.0 2 15.7997 8 16.0 2 14.0 3 13.0 2 56.0 2 59.0 2 16.0 3 1.7997 7 24.0 2 38.2003 8 17.0 2 13.5808 10 11.0 2]
Total: 652.9813999999999
Mean: 13.059628
Genome size: 89
Size: 90
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2668.355851199994
Median total errors in population: 775.9933999999998
Error averages by case: (85.07313559999997 2.726 110.29185789999802 8.702 81.92499910000001 3.247 85.78759550000001 2.612 94.9362198999985 8.494 106.90098899999997 3.38 98.06901110000003 3.085 105.8961975999981 9.697 93.3343573 3.322 140.42596769999994 11.448 82.48432499999991 3.324 121.8754511 3.317 88.30859970000132 9.102 87.1637886 3.225 91.67132709999997 4.055 81.77895889999995 2.819 130.8774791 3.137 132.2976299 6.763 95.3301120999999 3.623 90.25669819999888 8.892 102.28719349999997 3.202 111.48590789999801 9.052 111.20368149999902 5.487 116.40413159999831 7.87 88.56123629999999 3.148)
Error minima by case: (0.0 0 2.4763 7 0.0 0 0.0 0 0.2003 2 9.0 1 0.6376 1 17.2003 2 0.0 0 7.6493 8 3.0 1 7.9229 1 6.7997 7 0.0 0 0.0 0 2.0 1 8.9291 1 19.6701 1 5.0 1 0.2003 6 1.2069 1 4.5851 2 12.7916 1 12.4643 2 0.0 0)
Average genome size in population (length): 75.627
Average program size in population (points): 76.627
Average percent parens in population: 0.013
Minimum age in population: 64.29065590659957
Maximum age in population: 69.31221819733958
Average age in population: 67.42881309399041
Median age in population: 67.46574288033557
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 29
Genome diversity (% unique Plush genomes):	 0.784
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.784
Total error diversity:				 0.427
Error (vector) diversity:			 0.613
Behavioral diversity:				 0.613
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 44832202
--- Timings ---
Current time: 1529615208708 milliseconds
Total Time:         157.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.3 seconds, 43.9%
Fitness Testing:     70.7 seconds, 44.8%
Report:              17.8 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Number IO problem report - generation 46
Test total error for best: 33066.984000000055
Test mean error for best: 16.53349
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 47.2889250004 
Correct output: 15.0922415815  | Program output: 40.29253558   
Correct output: -30.8202558445 | Program output: -26.8202558445
Correct output: 70.2512965501  | Program output: 70.2512965501 
Correct output: 150.6666771001 | Program output: 153.8669710986
Correct output: -148.0189802809 | Program output: -124.0189802809
Correct output: 91.9885288633  | Program output: 68.9885288633 
Correct output: 56.3430751406  | Program output: 83.5433691391 
Correct output: -55.2026859793 | Program output: -73.2026859793
Correct output: -31.9001885201 | Program output: 35.0998114799 
Correct output: 70.8415782878  | Program output: 61.8415782878 
Correct output: -70.0770879346 | Program output: -22.0770879346
Correct output: 62.2573571201  | Program output: 46.4576511186 
Correct output: -11.0880796195 | Program output: -27.0880796195
Correct output: -98.0730811682 | Program output: -112.0730811682
Correct output: 45.954554541   | Program output: 32.954554541  
Correct output: 9.2519145493   | Program output: 65.2519145493 
Correct output: -62.0820375564 | Program output: -3.0820375564 
Correct output: -85.5891975931 | Program output: -101.5891975931
Correct output: 26.7802144548  | Program output: 24.9805084533 
Correct output: 1.2069497285   | Program output: 25.2069497285 
Correct output: 70.6151869811  | Program output: 108.8154809796
Correct output: 27.2083659619  | Program output: 10.2083659619 
Correct output: 103.781099078  | Program output: 90.2002939985 
Correct output: 66.4193519736  | Program output: 55.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction in1} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_shove} {:instruction in1} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction float_tan} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_flush} {:instruction float_flush})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_yankdup float_dec in2 in1 float_dup_items 90.20029399850333 float_rot in1 in2 in1 float_dup_items 90.20029399850333 float_rot float_shove in1 in1 integer_mod float_dec float_yankdup float_dec in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dup in2 float_dec float_dec float_dec float_yankdup integer_shove float_dec float_dec float_dup float_dec float_yankdup integer_shove float_dec float_dec float_dup in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dec float_dec float_dup in2 float_dec float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -9.568963984273623 float_tan -56.50848481366526 integer_div float_frominteger integer_flush float_flush)
Errors: [7.0 2 25.2003 8 4.0 2 0.0 0 3.2003 7 24.0 2 23.0 2 27.2003 9 18.0 2 67.0 11 9.0 2 48.0 2 15.7997 8 16.0 2 14.0 3 13.0 2 56.0 2 59.0 2 16.0 3 1.7997 7 24.0 2 38.2003 8 17.0 2 13.5808 10 11.0 2]
Total: 652.9813999999999
Mean: 13.059628
Genome size: 89
Size: 90
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2406.8952607000006
Median total errors in population: 728.6808499999999
Error averages by case: (75.55472759999998 2.598 96.66005289999825 8.614 71.34703839999997 3.111 75.80425590000007 2.406 80.0031535999985 7.858 97.87318929999998 3.214 89.50893950000005 2.944 97.36836919999826 9.278 83.55749189999995 3.169 132.4864447 11.469 74.29307399999996 2.971 111.36736489999997 3.133 78.4908933000015 8.847 75.78114779999997 3.016 81.62314689999997 3.99 74.41566419999995 2.719 123.95683200000003 3.079 120.90911310000003 6.74 81.23754169999994 3.435 74.86042039999879 8.619 93.93547850000003 3.083 105.35314699999842 8.361 94.00084889999948 4.271 110.62869059999862 6.982 78.99123439999995 2.98)
Error minima by case: (0.0 0 7.7075 7 0.0 0 0.0 0 0.2003 2 10.0 1 3.0 1 16.2003 2 0.0 0 1.0016 7 3.0 1 10.9229 1 6.7997 7 0.0 0 0.0 0 2.0 1 8.2519 1 11.4267 1 5.0 1 0.2003 6 0.2069 1 11.5851 2 10.7916 1 13.5808 2 0.0 0)
Average genome size in population (length): 77.589
Average program size in population (points): 78.589
Average percent parens in population: 0.013
Minimum age in population: 66.5393317036445
Maximum age in population: 70.83599204954422
Average age in population: 68.86229036824957
Median age in population: 68.88438659638487
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.795
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.795
Total error diversity:				 0.454
Error (vector) diversity:			 0.662
Behavioral diversity:				 0.662
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 46771927
--- Timings ---
Current time: 1529615213424 milliseconds
Total Time:         162.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        70.8 seconds, 43.6%
Fitness Testing:     73.2 seconds, 45.0%
Report:              18.3 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Number IO problem report - generation 47
Test total error for best: 33066.984000000055
Test mean error for best: 16.53349
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 47.2889250004 
Correct output: 15.0922415815  | Program output: 40.29253558   
Correct output: -30.8202558445 | Program output: -26.8202558445
Correct output: 70.2512965501  | Program output: 70.2512965501 
Correct output: 150.6666771001 | Program output: 153.8669710986
Correct output: -148.0189802809 | Program output: -124.0189802809
Correct output: 91.9885288633  | Program output: 68.9885288633 
Correct output: 56.3430751406  | Program output: 83.5433691391 
Correct output: -55.2026859793 | Program output: -73.2026859793
Correct output: -31.9001885201 | Program output: 35.0998114799 
Correct output: 70.8415782878  | Program output: 61.8415782878 
Correct output: -70.0770879346 | Program output: -22.0770879346
Correct output: 62.2573571201  | Program output: 46.4576511186 
Correct output: -11.0880796195 | Program output: -27.0880796195
Correct output: -98.0730811682 | Program output: -112.0730811682
Correct output: 45.954554541   | Program output: 32.954554541  
Correct output: 9.2519145493   | Program output: 65.2519145493 
Correct output: -62.0820375564 | Program output: -3.0820375564 
Correct output: -85.5891975931 | Program output: -101.5891975931
Correct output: 26.7802144548  | Program output: 24.9805084533 
Correct output: 1.2069497285   | Program output: 25.2069497285 
Correct output: 70.6151869811  | Program output: 108.8154809796
Correct output: 27.2083659619  | Program output: 10.2083659619 
Correct output: 103.781099078  | Program output: 90.2002939985 
Correct output: 66.4193519736  | Program output: 55.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction in1} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_shove} {:instruction in1} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction float_tan} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_flush} {:instruction float_flush})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_yankdup float_dec in2 in1 float_dup_items 90.20029399850333 float_rot in1 in2 in1 float_dup_items 90.20029399850333 float_rot float_shove in1 in1 integer_mod float_dec float_yankdup float_dec in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dup in2 float_dec float_dec float_dec float_yankdup integer_shove float_dec float_dec float_dup float_dec float_yankdup integer_shove float_dec float_dec float_dup in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dec float_dec float_dup in2 float_dec float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -9.568963984273623 float_tan -56.50848481366526 integer_div float_frominteger integer_flush float_flush)
Errors: [7.0 2 25.2003 8 4.0 2 0.0 0 3.2003 7 24.0 2 23.0 2 27.2003 9 18.0 2 67.0 11 9.0 2 48.0 2 15.7997 8 16.0 2 14.0 3 13.0 2 56.0 2 59.0 2 16.0 3 1.7997 7 24.0 2 38.2003 8 17.0 2 13.5808 10 11.0 2]
Total: 652.9813999999999
Mean: 13.059628
Genome size: 89
Size: 90
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2510.991044999999
Median total errors in population: 712.0014999999999
Error averages by case: (80.59228469999996 2.737 100.05901929999843 8.656 76.1891153 3.21 81.18184370000002 2.468 83.82487769999871 7.744 102.8804416 3.317 95.01463460000004 3.098 100.16662209999842 9.206 89.24820809999999 3.26 136.7509623 11.484 80.08270029999997 3.098 116.14682030000002 3.175 82.35684680000132 8.884 81.44744439999998 3.142 87.5816969 4.09 80.65947669999997 2.785 127.25705049999999 3.139 127.14359590000005 6.53 87.24767879999995 3.466 79.0806527999989 8.619 98.38257710000002 3.179 108.01244539999885 7.275 93.09595169999963 3.909 107.05114229999921 5.935 84.09195569999994 3.039)
Error minima by case: (0.0 0 7.7075 7 0.0 0 0.0 0 0.2003 2 8.0 1 1.0 1 3.3431 2 1.0 1 0.9 7 3.0 1 4.9229 1 6.7997 7 0.0 0 0.0 0 2.0 1 8.8315 1 18.3899 1 5.0 1 0.2003 6 0.6556 1 8.5851 2 7.7916 1 13.5808 2 0.0 0)
Average genome size in population (length): 81.409
Average program size in population (points): 82.409
Average percent parens in population: 0.012
Minimum age in population: 67.5393317036445
Maximum age in population: 72.3773575600026
Average age in population: 70.24006254482516
Median age in population: 70.29073112428341
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.809
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.809
Total error diversity:				 0.489
Error (vector) diversity:			 0.665
Behavioral diversity:				 0.665
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 48807152
--- Timings ---
Current time: 1529615217725 milliseconds
Total Time:         166.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        72.3 seconds, 43.3%
Fitness Testing:     75.4 seconds, 45.2%
Report:              19.1 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Number IO problem report - generation 48
Test total error for best: 34064.21020000004
Test mean error for best: 17.03211
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 50.2889250004 
Correct output: 15.0922415815  | Program output: 43.29253558   
Correct output: -30.8202558445 | Program output: -23.8202558445
Correct output: 70.2512965501  | Program output: 73.2512965501 
Correct output: 150.6666771001 | Program output: 156.8669710986
Correct output: -148.0189802809 | Program output: -121.0189802809
Correct output: 91.9885288633  | Program output: 71.9885288633 
Correct output: 56.3430751406  | Program output: 86.5433691391 
Correct output: -55.2026859793 | Program output: -70.2026859793
Correct output: -31.9001885201 | Program output: 38.0998114799 
Correct output: 70.8415782878  | Program output: 65.8415782878 
Correct output: -70.0770879346 | Program output: -19.0770879346
Correct output: 62.2573571201  | Program output: 49.4576511186 
Correct output: -11.0880796195 | Program output: -24.0880796195
Correct output: -98.0730811682 | Program output: -109.0730811682
Correct output: 45.954554541   | Program output: 36.954554541  
Correct output: 9.2519145493   | Program output: 68.2519145493 
Correct output: -62.0820375564 | Program output: -0.0820375564 
Correct output: -85.5891975931 | Program output: -98.5891975931
Correct output: 26.7802144548  | Program output: 27.9805084533 
Correct output: 1.2069497285   | Program output: 28.2069497285 
Correct output: 70.6151869811  | Program output: 89.2002939985 
Correct output: 27.2083659619  | Program output: 10.2083659619 
Correct output: 103.781099078  | Program output: 69.781099078  
Correct output: 66.4193519736  | Program output: 58.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_pop} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_div} {:instruction print_float} {:instruction float_shove} {:instruction -9.568963984273623} {:instruction float_pop} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction in1} {:instruction integer_flush} {:instruction float_flush})
Best program: (float_dec 90.20029399850333 float_rot float_dec float_dec float_dec float_yankdup float_dec float_rot float_dec in1 float_add float_dup_items float_dec float_yankdup float_dec in2 in1 float_dup_items 90.20029399850333 float_dec in1 in1 integer_mod float_dec float_yankdup float_dec integer_mod integer_yankdup float_yankdup float_dec in2 90.20029399850333 float_rot float_dec in1 in1 float_dup_items float_dec float_yankdup integer_pop in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dup in2 float_dec float_dec float_dec float_yankdup integer_shove float_dec float_dec float_dup in2 float_dec float_inc float_dec float_dec float_dec float_dec float_dup in2 float_dec float_dec float_dec float_dec float_dup in2 float_dec float_dec float_dec float_yankdup integer_shove integer_div print_float float_shove -9.568963984273623 float_pop -56.50848481366526 integer_div in1 integer_flush float_flush)
Errors: [4.0 1 28.2003 8 7.0 2 3.0 1 6.2003 7 27.0 2 20.0 1 30.2003 8 15.0 2 70.0 11 5.0 2 51.0 2 12.7997 8 13.0 2 11.0 3 9.0 2 59.0 2 62.0 2 13.0 2 1.2003 7 27.0 2 18.5851 11 17.0 2 34.0 3 8.0 2]
Total: 647.1859999999999
Mean: 12.94372
Genome size: 94
Size: 95
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2721.7278308999985
Median total errors in population: 695.7010499999999
Error averages by case: (89.483329 2.865 110.35626129999827 8.776 85.04906800000003 3.244 89.11235740000006 2.529 93.64731119999846 7.892 109.64406589999999 3.366 103.97706480000002 3.145 110.24834929999828 9.209 98.2071706 3.304 144.50512560000004 11.542 85.71220699999998 3.055 124.80760249999997 3.252 91.82120710000157 8.948 91.70653679999998 3.217 96.16558949999997 4.182 87.6280704 2.749 135.04103880000005 3.232 134.67045739999995 5.681 97.21713589999995 3.571 89.13906419999887 8.742 106.2095351 3.222 116.41376009999895 6.671 102.00527349999975 3.859 110.84049649999955 5.539 93.199753 3.128)
Error minima by case: (0.0 0 7.7075 7 0.0 0 0.0 0 0.7997 2 8.0 1 2.0 1 0.8281 2 2.0 1 0.7682 8 3.0 1 4.9229 1 3.1606 7 0.0 0 0.0 0 2.0 1 4.2519 1 23.918 1 4.0 1 0.2003 6 1.2069 1 5.5851 1 8.7916 1 12.3899 2 0.0 0)
Average genome size in population (length): 85.005
Average program size in population (points): 86.005
Average percent parens in population: 0.012
Minimum age in population: 68.5393317036445
Maximum age in population: 73.7220422799256
Average age in population: 71.61500936365036
Median age in population: 71.64947629099557
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.809
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.809
Total error diversity:				 0.499
Error (vector) diversity:			 0.687
Behavioral diversity:				 0.687
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 50932277
--- Timings ---
Current time: 1529615222498 milliseconds
Total Time:         171.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        73.8 seconds, 43.0%
Fitness Testing:     77.9 seconds, 45.4%
Report:              19.6 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Number IO problem report - generation 49
Test total error for best: 33634.98400000006
Test mean error for best: 16.81749
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 49.2889250004 
Correct output: 15.0922415815  | Program output: 40.29253558   
Correct output: -30.8202558445 | Program output: -24.8202558445
Correct output: 70.2512965501  | Program output: 72.2512965501 
Correct output: 150.6666771001 | Program output: 153.8669710986
Correct output: -148.0189802809 | Program output: -122.0189802809
Correct output: 91.9885288633  | Program output: 70.9885288633 
Correct output: 56.3430751406  | Program output: 83.5433691391 
Correct output: -55.2026859793 | Program output: -71.2026859793
Correct output: -31.9001885201 | Program output: 37.0998114799 
Correct output: 70.8415782878  | Program output: 58.8415782878 
Correct output: -70.0770879346 | Program output: -20.0770879346
Correct output: 62.2573571201  | Program output: 46.4576511186 
Correct output: -11.0880796195 | Program output: -25.0880796195
Correct output: -98.0730811682 | Program output: -110.0730811682
Correct output: 45.954554541   | Program output: 41.954554541  
Correct output: 9.2519145493   | Program output: 67.2519145493 
Correct output: -62.0820375564 | Program output: -1.0820375564 
Correct output: -85.5891975931 | Program output: -92.5891975931
Correct output: 26.7802144548  | Program output: 24.9805084533 
Correct output: 1.2069497285   | Program output: 27.2069497285 
Correct output: 70.6151869811  | Program output: 108.8154809796
Correct output: 27.2083659619  | Program output: 10.2083659619 
Correct output: 103.781099078  | Program output: 90.2002939985 
Correct output: 66.4193519736  | Program output: 57.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction in1} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_shove} {:instruction in1} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction tag_float_321} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction float_tan} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_flush} {:instruction float_flush})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_yankdup float_dec in2 in1 float_dup_items 90.20029399850333 float_rot in1 in2 in1 float_dup_items 90.20029399850333 float_rot float_shove in1 in1 integer_mod float_dec float_yankdup float_dec in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec tag_float_321 float_dec float_dec integer_flush float_dec float_dec float_dup in2 float_dec float_dec float_dec float_yankdup integer_shove float_dec float_dec float_dup float_dec float_yankdup integer_shove float_dec float_dec float_dup in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup integer_div float_dec float_dec float_dup in2 float_dec float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -9.568963984273623 float_tan -56.50848481366526 integer_div float_frominteger integer_flush float_flush)
Errors: [5.0 2 25.2003 8 6.0 2 2.0 1 3.2003 7 26.0 2 21.0 2 27.2003 9 16.0 2 69.0 11 12.0 2 50.0 1 15.7997 8 14.0 2 12.0 3 4.0 1 58.0 2 61.0 2 7.0 2 1.7997 7 26.0 2 38.2003 8 17.0 2 13.5808 10 9.0 2]
Total: 639.9813999999999
Mean: 12.799628
Genome size: 89
Size: 90
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2201.0217893
Median total errors in population: 684.6008999999999
Error averages by case: (69.14507080000001 2.672 90.45615349999846 8.637 64.28523199999998 2.915 66.62638770000002 2.224 74.70465959999872 7.588 88.6709565 3.045 82.5799392 2.866 90.29260049999849 8.992 78.28928330000001 2.983 124.55581440000002 11.335 65.975868 2.77 104.65212700000002 2.953 74.1082275000013 8.842 72.46187109999997 2.918 76.1689637 3.93 65.62615419999997 2.595 114.63846440000003 2.951 114.39094419999999 4.344 74.30391089999998 3.295 69.89691799999923 8.506 84.88027499999998 2.912 97.11636129999918 5.773 80.0114522999998 3.489 87.34229859999982 5.582 72.89485559999999 2.83)
Error minima by case: (0.0 0 7.7075 7 0.0 0 0.0 0 0.0508 2 14.0 1 1.0 1 9.5556 2 1.3058 1 7.7396 7 3.0 1 13.5686 1 3.6413 7 0.1595 1 1.0 1 2.0 1 7.9291 1 5.5736 1 5.0 1 0.2003 6 0.2069 1 4.7165 1 8.7916 1 12.6532 2 0.0 0)
Average genome size in population (length): 86.444
Average program size in population (points): 87.444
Average percent parens in population: 0.011
Minimum age in population: 69.5393317036445
Maximum age in population: 75.24977233129049
Average age in population: 73.01716182132567
Median age in population: 73.03516989768723
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 31
Genome diversity (% unique Plush genomes):	 0.812
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.812
Total error diversity:				 0.499
Error (vector) diversity:			 0.688
Behavioral diversity:				 0.688
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 53093377
--- Timings ---
Current time: 1529615226942 milliseconds
Total Time:         176.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        75.3 seconds, 42.8%
Fitness Testing:     80.3 seconds, 45.6%
Report:              20.4 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Number IO problem report - generation 50
Test total error for best: 33634.98400000006
Test mean error for best: 16.81749
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 49.2889250004 
Correct output: 15.0922415815  | Program output: 40.29253558   
Correct output: -30.8202558445 | Program output: -24.8202558445
Correct output: 70.2512965501  | Program output: 72.2512965501 
Correct output: 150.6666771001 | Program output: 153.8669710986
Correct output: -148.0189802809 | Program output: -122.0189802809
Correct output: 91.9885288633  | Program output: 70.9885288633 
Correct output: 56.3430751406  | Program output: 83.5433691391 
Correct output: -55.2026859793 | Program output: -71.2026859793
Correct output: -31.9001885201 | Program output: 37.0998114799 
Correct output: 70.8415782878  | Program output: 58.8415782878 
Correct output: -70.0770879346 | Program output: -20.0770879346
Correct output: 62.2573571201  | Program output: 46.4576511186 
Correct output: -11.0880796195 | Program output: -25.0880796195
Correct output: -98.0730811682 | Program output: -110.0730811682
Correct output: 45.954554541   | Program output: 41.954554541  
Correct output: 9.2519145493   | Program output: 67.2519145493 
Correct output: -62.0820375564 | Program output: -1.0820375564 
Correct output: -85.5891975931 | Program output: -92.5891975931
Correct output: 26.7802144548  | Program output: 24.9805084533 
Correct output: 1.2069497285   | Program output: 27.2069497285 
Correct output: 70.6151869811  | Program output: 108.8154809796
Correct output: 27.2083659619  | Program output: 10.2083659619 
Correct output: 103.781099078  | Program output: 90.2002939985 
Correct output: 66.4193519736  | Program output: 57.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction in1} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_shove} {:instruction in1} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction tag_float_321} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction float_tan} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_flush} {:instruction float_flush})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_yankdup float_dec in2 in1 float_dup_items 90.20029399850333 float_rot in1 in2 in1 float_dup_items 90.20029399850333 float_rot float_shove in1 in1 integer_mod float_dec float_yankdup float_dec in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec tag_float_321 float_dec float_dec integer_flush float_dec float_dec float_dup in2 float_dec float_dec float_dec float_yankdup integer_shove float_dec float_dec float_dup float_dec float_yankdup integer_shove float_dec float_dec float_dup in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup integer_div float_dec float_dec float_dup in2 float_dec float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -9.568963984273623 float_tan -56.50848481366526 integer_div float_frominteger integer_flush float_flush)
Errors: [5.0 2 25.2003 8 6.0 2 2.0 1 3.2003 7 26.0 2 21.0 2 27.2003 9 16.0 2 69.0 11 12.0 2 50.0 1 15.7997 8 14.0 2 12.0 3 4.0 1 58.0 2 61.0 2 7.0 2 1.7997 7 26.0 2 38.2003 8 17.0 2 13.5808 10 9.0 2]
Total: 639.9813999999999
Mean: 12.799628
Genome size: 89
Size: 90
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2523.878554999999
Median total errors in population: 686.2010499999999
Error averages by case: (84.90957030000001 3.129 100.48802539999849 8.696 74.21738080000004 3.324 83.26993760000002 2.556 85.96408539999868 7.521 103.32045109999999 3.439 99.31160450000004 3.277 100.73991729999851 9.273 92.52566430000002 3.339 136.55414960000002 11.367 79.67911989999998 3.03 113.18450210000006 3.333 89.13010170000136 8.979 82.63763969999997 3.306 91.1159266 4.213 80.61105489999998 2.932 127.62158860000004 3.29 123.0071108 4.405 88.08966609999996 3.697 82.06833489999993 8.432 98.32410220000001 3.269 106.63338409999898 6.38 92.35580529999963 3.894 94.92703799999973 6.127 88.80539379999998 3.179)
Error minima by case: (0.0 0 9.7075 7 0.0 0 0.0 0 0.2003 2 13.0 1 1.0 1 3.3431 2 1.0 1 1.4043 8 3.0 1 4.9229 1 6.7997 7 0.0881 1 0.0 0 2.0 1 4.0371 1 14.6612 1 3.3499 1 0.2003 6 0.2287 1 0.4149 1 6.7916 1 12.6532 2 0.0 0)
Average genome size in population (length): 87.099
Average program size in population (points): 88.099
Average percent parens in population: 0.011
Minimum age in population: 71.65267215809017
Maximum age in population: 76.25044396789477
Average age in population: 74.43126593185914
Median age in population: 74.50031743891653
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.836
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.836
Total error diversity:				 0.538
Error (vector) diversity:			 0.698
Behavioral diversity:				 0.699
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 55270877
--- Timings ---
Current time: 1529615231688 milliseconds
Total Time:         180.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        77.0 seconds, 42.6%
Fitness Testing:     82.6 seconds, 45.7%
Report:              21.0 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Number IO problem report - generation 51
Test total error for best: 32944.07470000004
Test mean error for best: 16.47204
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 48.2889250004 
Correct output: 15.0922415815  | Program output: 41.29253558   
Correct output: -30.8202558445 | Program output: -25.8202558445
Correct output: 70.2512965501  | Program output: 71.2512965501 
Correct output: 150.6666771001 | Program output: 154.8669710986
Correct output: -148.0189802809 | Program output: -123.0189802809
Correct output: 91.9885288633  | Program output: 69.9885288633 
Correct output: 56.3430751406  | Program output: 84.5433691391 
Correct output: -55.2026859793 | Program output: -72.2026859793
Correct output: -31.9001885201 | Program output: 36.0998114799 
Correct output: 70.8415782878  | Program output: 57.8415782878 
Correct output: -70.0770879346 | Program output: -21.0770879346
Correct output: 62.2573571201  | Program output: 47.4576511186 
Correct output: -11.0880796195 | Program output: -26.0880796195
Correct output: -98.0730811682 | Program output: -111.0730811682
Correct output: 45.954554541   | Program output: 40.954554541  
Correct output: 9.2519145493   | Program output: 66.2519145493 
Correct output: -62.0820375564 | Program output: -2.0820375564 
Correct output: -85.5891975931 | Program output: -92.5891975931
Correct output: 26.7802144548  | Program output: 25.9805084533 
Correct output: 1.2069497285   | Program output: 26.2069497285 
Correct output: 70.6151869811  | Program output: 28.6151869811 
Correct output: 27.2083659619  | Program output: 10.2083659619 
Correct output: 103.781099078  | Program output: 90.2002939985 
Correct output: 66.4193519736  | Program output: 56.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction in1} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_shove} {:instruction in1} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction float_yankdup} {:instruction tag_integer_907} {:instruction in2} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction float_tan} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_flush} {:instruction float_flush})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_yankdup float_dec in2 in1 float_dup_items 90.20029399850333 float_rot in1 in2 in1 float_dup_items 90.20029399850333 float_rot float_shove in1 in1 integer_mod float_dec float_yankdup tag_integer_907 in2 float_dec float_yankdup float_dec in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dup in2 float_dec float_dec float_dec float_yankdup integer_shove float_dec float_dec float_dup float_dec float_dec float_dup in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup integer_div float_dec float_dec float_dup in2 float_dec float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -9.568963984273623 float_tan -56.50848481366526 integer_div float_frominteger integer_flush float_flush)
Errors: [6.0 2 26.2003 8 5.0 2 1.0 1 4.2003 7 25.0 2 22.0 2 28.2003 9 17.0 2 68.0 11 13.0 2 49.0 2 14.7997 8 15.0 2 13.0 3 5.0 1 57.0 2 60.0 1 7.0 2 0.7997 7 25.0 2 42.0 2 17.0 2 13.5808 10 10.0 1]
Total: 637.7810999999999
Mean: 12.755622
Genome size: 90
Size: 91
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2189.4655226999985
Median total errors in population: 669.7802499999999
Error averages by case: (68.93313659999998 2.974 87.43300049999841 8.598 63.1950003 3.105 66.99100020000003 2.284 72.35372329999899 7.52 88.95176220000002 3.233 82.69783829999999 3.111 87.92156399999843 9.292 77.62686550000001 3.147 122.07012780000001 11.324 64.17834109999998 2.886 103.68285140000003 3.131 77.40900630000128 8.837 71.35157770000002 3.106 76.39996070000001 4.065 67.39497349999998 2.712 112.15208910000004 3.123 113.1022767 3.84 78.66239349999996 3.721 68.2284773000003 8.068 83.03006829999998 3.084 95.0146253999986 7.511 82.06472519999973 3.642 83.8066333 6.768 72.7745045 2.957)
Error minima by case: (0.0 0 3.2999 7 0.0 0 0.0 0 0.2003 2 8.0 1 3.0 1 6.4625 2 5.0 1 5.0016 8 4.0 1 0.278 1 5.7997 7 0.4868 1 1.0 1 4.0 1 0.1402 1 8.2731 1 5.0 1 0.2003 6 0.136 1 5.5851 1 8.7916 1 12.6425 2 0.0 0)
Average genome size in population (length): 88.539
Average program size in population (points): 89.539
Average percent parens in population: 0.011
Minimum age in population: 73.11279808324478
Maximum age in population: 77.80324027285529
Average age in population: 75.86728531233106
Median age in population: 75.90080333662911
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 34
Genome diversity (% unique Plush genomes):	 0.816
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.816
Total error diversity:				 0.557
Error (vector) diversity:			 0.674
Behavioral diversity:				 0.674
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 57484352
--- Timings ---
Current time: 1529615236192 milliseconds
Total Time:         185.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        78.6 seconds, 42.4%
Fitness Testing:     84.9 seconds, 45.8%
Report:              21.7 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Number IO problem report - generation 52
Test total error for best: 31169.10480000005
Test mean error for best: 15.58455
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 44.2889250004 
Correct output: 15.0922415815  | Program output: 38.29253558   
Correct output: -30.8202558445 | Program output: -29.8202558445
Correct output: 70.2512965501  | Program output: 67.2512965501 
Correct output: 150.6666771001 | Program output: 151.8669710986
Correct output: -148.0189802809 | Program output: -127.0189802809
Correct output: 91.9885288633  | Program output: 65.9885288633 
Correct output: 56.3430751406  | Program output: 81.5433691391 
Correct output: -55.2026859793 | Program output: -76.2026859793
Correct output: -31.9001885201 | Program output: 32.0998114799 
Correct output: 70.8415782878  | Program output: 63.8415782878 
Correct output: -70.0770879346 | Program output: -25.0770879346
Correct output: 62.2573571201  | Program output: 44.4576511186 
Correct output: -11.0880796195 | Program output: -30.0880796195
Correct output: -98.0730811682 | Program output: -115.0730811682
Correct output: 45.954554541   | Program output: 37.954554541  
Correct output: 9.2519145493   | Program output: 62.2519145493 
Correct output: -62.0820375564 | Program output: -6.0820375564 
Correct output: -85.5891975931 | Program output: -98.5891975931
Correct output: 26.7802144548  | Program output: 22.9805084533 
Correct output: 1.2069497285   | Program output: 22.2069497285 
Correct output: 70.6151869811  | Program output: 90.2002939985 
Correct output: 27.2083659619  | Program output: 10.2083659619 
Correct output: 103.781099078  | Program output: 72.781099078  
Correct output: 66.4193519736  | Program output: 52.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction in1} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction 89.4490515390873} {:instruction float_rot} {:instruction float_shove} {:instruction in1} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_rot} {:instruction float_shove} {:instruction in1} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_flush} {:instruction float_flush})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_yankdup float_dec in2 in1 float_dup_items 90.20029399850333 float_rot in1 in2 in1 float_dup_items 89.4490515390873 float_rot float_shove in1 in1 integer_mod float_dec float_yankdup float_dec float_rot float_shove in1 in1 integer_mod float_dec float_yankdup float_dec in2 in1 float_dup_items float_dec float_yankdup in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dup in2 float_dec float_dec float_dec float_yankdup integer_shove float_dec float_dec float_dup float_dec float_yankdup integer_shove float_dec float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dec float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -9.568963984273623 integer_fromfloat -56.50848481366526 integer_div float_frominteger integer_flush float_flush)
Errors: [10.0 1 23.2003 8 1.0 2 3.0 2 1.2003 7 21.0 2 26.0 2 25.2003 9 21.0 2 64.0 11 7.0 2 45.0 2 17.7997 8 19.0 2 17.0 3 8.0 2 53.0 2 56.0 1 13.0 2 3.7997 7 21.0 2 19.5851 10 17.0 2 31.0 3 14.0 2]
Total: 633.7854
Mean: 12.675708
Genome size: 112
Size: 113
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2268.4501958999986
Median total errors in population: 663.5593499999999
Error averages by case: (73.13402839999999 2.91 88.16197229999852 8.618 65.7067202 3.084 73.09422710000003 2.309 74.8858878999988 7.425 91.7915423 3.176 86.96670890000003 3.05 88.92938519999856 9.309 81.91860639999999 3.086 127.0463729 11.342 67.86642929999998 2.996 105.71395650000001 3.106 81.31799830000139 8.928 74.4669508 3.056 80.19764499999998 4.048 70.55276449999998 2.783 117.4747389 3.116 116.6836873 3.934 80.37375639999996 3.698 70.73957260000047 8.064 87.9386585 3.064 94.98141639999854 7.838 83.97643089999973 3.726 85.06157160000001 6.99 76.93516729999997 2.878)
Error minima by case: (0.0 0 9.7075 6 0.0 0 0.0 0 0.088 2 10.0 1 3.0 1 3.3431 2 2.0 1 5.9829 8 2.3587 1 4.9229 1 7.7997 7 0.0 0 0.0 0 2.0 1 9.2566 1 23.918 1 5.0 1 0.088 6 0.1956 1 3.5851 1 10.2084 1 12.6425 2 0.0 0)
Average genome size in population (length): 89.432
Average program size in population (points): 90.432
Average percent parens in population: 0.011
Minimum age in population: 74.11279808324478
Maximum age in population: 79.20801923086225
Average age in population: 77.3303815283841
Median age in population: 77.37512806906328
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.818
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.818
Total error diversity:				 0.54
Error (vector) diversity:			 0.666
Behavioral diversity:				 0.667
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 59720152
--- Timings ---
Current time: 1529615241072 milliseconds
Total Time:         190.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        80.5 seconds, 42.3%
Fitness Testing:     87.3 seconds, 45.9%
Report:              22.3 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Number IO problem report - generation 53
Test total error for best: 31169.10480000005
Test mean error for best: 15.58455
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 44.2889250004 
Correct output: 15.0922415815  | Program output: 38.29253558   
Correct output: -30.8202558445 | Program output: -29.8202558445
Correct output: 70.2512965501  | Program output: 67.2512965501 
Correct output: 150.6666771001 | Program output: 151.8669710986
Correct output: -148.0189802809 | Program output: -127.0189802809
Correct output: 91.9885288633  | Program output: 65.9885288633 
Correct output: 56.3430751406  | Program output: 81.5433691391 
Correct output: -55.2026859793 | Program output: -76.2026859793
Correct output: -31.9001885201 | Program output: 32.0998114799 
Correct output: 70.8415782878  | Program output: 63.8415782878 
Correct output: -70.0770879346 | Program output: -25.0770879346
Correct output: 62.2573571201  | Program output: 44.4576511186 
Correct output: -11.0880796195 | Program output: -30.0880796195
Correct output: -98.0730811682 | Program output: -115.0730811682
Correct output: 45.954554541   | Program output: 37.954554541  
Correct output: 9.2519145493   | Program output: 62.2519145493 
Correct output: -62.0820375564 | Program output: -6.0820375564 
Correct output: -85.5891975931 | Program output: -98.5891975931
Correct output: 26.7802144548  | Program output: 22.9805084533 
Correct output: 1.2069497285   | Program output: 22.2069497285 
Correct output: 70.6151869811  | Program output: 90.2002939985 
Correct output: 27.2083659619  | Program output: 10.2083659619 
Correct output: 103.781099078  | Program output: 72.781099078  
Correct output: 66.4193519736  | Program output: 52.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction in1} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction 89.4490515390873} {:instruction float_rot} {:instruction float_shove} {:instruction in1} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_rot} {:instruction float_shove} {:instruction in1} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_flush} {:instruction float_flush})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_yankdup float_dec in2 in1 float_dup_items 90.20029399850333 float_rot in1 in2 in1 float_dup_items 89.4490515390873 float_rot float_shove in1 in1 integer_mod float_dec float_yankdup float_dec float_rot float_shove in1 in1 integer_mod float_dec float_yankdup float_dec in2 in1 float_dup_items float_dec float_yankdup in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dup in2 float_dec float_dec float_dec float_yankdup integer_shove float_dec float_dec float_dup float_dec float_yankdup integer_shove float_dec float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dec float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -9.568963984273623 integer_fromfloat -56.50848481366526 integer_div float_frominteger integer_flush float_flush)
Errors: [10.0 1 23.2003 8 1.0 2 3.0 2 1.2003 7 21.0 2 26.0 2 25.2003 9 21.0 2 64.0 11 7.0 2 45.0 2 17.7997 8 19.0 2 17.0 3 8.0 2 53.0 2 56.0 1 13.0 2 3.7997 7 21.0 2 19.5851 10 17.0 2 31.0 3 14.0 2]
Total: 633.7854
Mean: 12.675708
Genome size: 112
Size: 113
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2427.456058199998
Median total errors in population: 678.2911499999999
Error averages by case: (76.93978109999998 2.957 96.78802309999831 8.692 73.5366387 3.129 75.19978870000001 2.558 83.48659589999878 7.604 97.0315957 3.294 90.94149779999998 3.145 96.56515039999836 9.259 86.3705855 3.204 130.3647857 11.36 74.95181699999998 2.95 113.91693279999998 3.18 88.27037260000156 9.013 81.9832493 3.163 84.9152354 4.149 76.76427079999999 2.736 120.26998870000003 3.184 123.50426219999997 4.165 91.11478869999995 3.841 80.08269450000037 8.203 91.4959873 3.113 100.7705196999984 7.943 91.82382009999974 3.936 95.10845439999972 6.759 80.73422209999997 2.988)
Error minima by case: (0.0 0 8.7075 7 0.0 0 0.0 0 0.088 2 9.0 1 1.0 1 0.0382 2 2.0 1 2.9002 9 3.0 1 5.9229 1 5.9525 7 0.0 0 1.0 1 2.0 1 8.2379 1 24.918 1 5.0 1 0.2003 6 0.1749 1 4.5851 1 11.2084 1 13.5808 2 0.0 0)
Average genome size in population (length): 89.839
Average program size in population (points): 90.839
Average percent parens in population: 0.011
Minimum age in population: 76.15271468783592
Maximum age in population: 80.94938551081808
Average age in population: 78.6855621852973
Median age in population: 78.69797927477792
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.839
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.839
Total error diversity:				 0.593
Error (vector) diversity:			 0.711
Behavioral diversity:				 0.711
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 61966127
--- Timings ---
Current time: 1529615246213 milliseconds
Total Time:         195.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        82.1 seconds, 42.1%
Fitness Testing:     89.9 seconds, 46.1%
Report:              23.0 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Number IO problem report - generation 54
Test total error for best: 33126.77620000006
Test mean error for best: 16.56339
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 48.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -25.8202558445
Correct output: 70.2512965501  | Program output: 71.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -123.0189802809
Correct output: 91.9885288633  | Program output: 69.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -72.2026859793
Correct output: -31.9001885201 | Program output: 36.0998114799 
Correct output: 70.8415782878  | Program output: 56.8415782878 
Correct output: -70.0770879346 | Program output: -21.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -26.0880796195
Correct output: -98.0730811682 | Program output: -111.0730811682
Correct output: 45.954554541   | Program output: 41.954554541  
Correct output: 9.2519145493   | Program output: 66.2519145493 
Correct output: -62.0820375564 | Program output: -2.0820375564 
Correct output: -85.5891975931 | Program output: -92.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 26.2069497285 
Correct output: 70.6151869811  | Program output: 105.8154809796
Correct output: 27.2083659619  | Program output: 10.2083659619 
Correct output: 103.781099078  | Program output: 90.2002939985 
Correct output: 66.4193519736  | Program output: 56.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction in1} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_shove} {:instruction in1} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction float_yankdup} {:instruction tag_integer_907} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction tag_float_321} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_mod} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction float_tan} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_flush} {:instruction float_flush})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_yankdup float_dec in2 in1 float_dup_items 90.20029399850333 float_rot in1 in2 in1 float_dup_items 90.20029399850333 float_rot float_shove in1 in1 integer_mod float_dec float_yankdup tag_integer_907 in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec tag_float_321 float_dec float_dec integer_flush float_dec float_dec float_dup in2 float_dec float_dec float_dec float_yankdup integer_shove float_dec float_dec float_dup float_dec float_dec float_dec float_dec float_yankdup integer_shove float_dec float_dec float_dup in2 float_dec float_dec float_shove float_dec float_dup in2 integer_mod float_dec float_dec float_yankdup float_dup integer_div float_dec float_dec float_dup in2 float_dec float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -9.568963984273623 float_tan -56.50848481366526 integer_div float_frominteger integer_flush float_flush)
Errors: [6.0 2 22.2003 8 5.0 2 1.0 1 0.2003 6 25.0 2 22.0 2 24.2003 9 17.0 2 68.0 11 14.0 2 49.0 2 18.7997 8 15.0 2 13.0 3 4.0 1 57.0 2 60.0 1 7.0 2 4.7997 7 25.0 2 35.2003 8 17.0 2 13.5808 10 10.0 1]
Total: 631.9813999999999
Mean: 12.639628
Genome size: 92
Size: 93
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2408.9181607999985
Median total errors in population: 661.9813999999999
Error averages by case: (77.12510400000001 2.863 94.98757209999843 8.659 73.9713503 3.021 74.86289970000004 2.529 83.06353129999874 7.518 97.61037359999999 3.22 89.44203020000006 3.042 95.5125362999984 9.295 86.73364099999996 3.152 129.94288340000003 11.358 71.95396399999998 3.017 113.91641759999997 3.089 88.34999840000151 9.018 82.4693046 3.087 85.30804449999997 4.092 72.9291983 2.635 120.30227010000007 3.126 122.62566479999994 4.218 88.00695659999998 3.638 78.67784140000036 8.139 91.04458170000005 3.028 100.72638749999848 8.113 90.62584149999967 3.826 94.03618559999974 7.08 80.96158229999998 2.969)
Error minima by case: (0.0 0 2.7758 7 0.0 0 0.0 0 0.088 2 12.0 1 1.0 1 3.3431 2 1.0 1 0.2599 8 4.0 1 4.9229 1 6.7997 7 0.0881 1 0.0 0 2.0 1 5.9355 1 9.5018 1 5.0 1 0.2003 6 0.1413 1 7.5851 1 0.4167 1 13.5808 2 0.0 0)
Average genome size in population (length): 90.533
Average program size in population (points): 91.533
Average percent parens in population: 0.011
Minimum age in population: 77.84448449458574
Maximum age in population: 82.45627934543496
Average age in population: 80.05801273188963
Median age in population: 80.08921893396052
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.8
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.8
Total error diversity:				 0.551
Error (vector) diversity:			 0.658
Behavioral diversity:				 0.659
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 64229577
--- Timings ---
Current time: 1529615250725 milliseconds
Total Time:         199.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        83.6 seconds, 41.8%
Fitness Testing:     92.3 seconds, 46.2%
Report:              23.9 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
;;******************************
;; -*- Number IO problem report - generation 55
Test total error for best: 32497.909300000032
Test mean error for best: 16.24895
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 38.0042391515 
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 151.5786746701
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 81.2550727106 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 63.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 44.1693546901 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 39.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -97.5891975931
Correct output: 26.7802144548  | Program output: 22.6922120248 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 106.5271845511
Correct output: 27.2083659619  | Program output: 10.2083659619 
Correct output: 103.781099078  | Program output: 90.2002939985 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 89.9119975699274} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_rot} {:instruction in1} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_shove} {:instruction in1} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_rot} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction in2} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_div} {:instruction print_float})
Best program: (float_dec 89.9119975699274 float_rot float_dec in1 float_add float_dup_items float_dec float_yankdup float_dec in2 in1 float_dup_items 90.20029399850333 float_rot float_rot in1 in2 in1 float_dup_items 90.20029399850333 float_rot float_shove in1 in1 integer_mod float_dec float_yankdup float_dec in2 in1 float_dup_items float_rot float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dup in2 float_dec float_dec float_dec float_yankdup integer_shove float_dec float_dec float_dup integer_shove float_dec float_dec float_dup float_dec float_yankdup integer_shove float_dec float_dec float_dup in2 float_dec float_dec float_shove float_dec in2 in2 float_dec float_dec float_dec integer_div float_dec float_dec float_dec float_dec float_dec float_dup in2 float_dec float_dec float_dec float_yankdup integer_shove integer_div print_float)
Errors: [11.0 2 22.912 7 0.0 0 4.0 2 0.912 7 20.0 1 27.0 2 24.912 8 22.0 2 63.0 10 7.0 2 44.0 2 18.088 8 20.0 1 18.0 3 6.0 2 52.0 2 55.0 2 12.0 2 4.088 7 20.0 1 35.912 8 17.0 2 13.5808 10 15.0 2]
Total: 628.4048
Mean: 12.568096
Genome size: 87
Size: 88
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2608.705688299998
Median total errors in population: 661.1909999999999
Error averages by case: (86.163387 3.02 102.04592469999817 8.693 79.61508529999999 3.201 84.02339080000004 2.771 88.05039799999855 7.681 105.66203850000004 3.376 100.69971240000008 3.239 102.57935019999822 9.393 94.94809299999994 3.338 138.75267179999994 11.435 85.26418709999997 3.204 119.09534829999998 3.32 95.41670890000172 9.044 88.4309478 3.263 93.49176219999994 4.251 82.55908349999996 2.6 129.02449130000002 3.324 129.5709619 4.529 96.10623229999993 3.787 84.40437390000102 8.159 100.16126670000004 3.221 109.07776139999838 7.857 98.09994959999962 3.934 97.95675779999969 7.659 89.95480389999996 3.252)
Error minima by case: (0.0 0 7.7261 6 0.0 0 0.0 0 0.088 1 8.0 1 1.0 1 16.2003 2 0.0 0 0.0016 7 3.0 1 2.5288 1 7.7997 7 0.07 1 0.0 0 2.0 1 2.6681 1 5.4663 1 5.0 1 0.088 6 1.2069 1 7.2968 1 16.0 1 13.5808 2 0.0 0)
Average genome size in population (length): 90.678
Average program size in population (points): 91.678
Average percent parens in population: 0.011
Minimum age in population: 78.84448449458574
Maximum age in population: 83.60926507970937
Average age in population: 81.40238225718902
Median age in population: 81.42767394899252
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 33
Genome diversity (% unique Plush genomes):	 0.788
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.788
Total error diversity:				 0.544
Error (vector) diversity:			 0.619
Behavioral diversity:				 0.62
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 66496777
--- Timings ---
Current time: 1529615255706 milliseconds
Total Time:         204.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        85.3 seconds, 41.6%
Fitness Testing:     94.9 seconds, 46.3%
Report:              24.5 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
;;******************************
;; -*- Number IO problem report - generation 56
Test total error for best: 33696.341500000046
Test mean error for best: 16.84817
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 48.2889250004 
Correct output: 15.0922415815  | Program output: 46.29253558   
Correct output: -30.8202558445 | Program output: -25.8202558445
Correct output: 70.2512965501  | Program output: 71.2512965501 
Correct output: 150.6666771001 | Program output: 159.8669710986
Correct output: -148.0189802809 | Program output: -123.0189802809
Correct output: 91.9885288633  | Program output: 69.9885288633 
Correct output: 56.3430751406  | Program output: 89.5433691391 
Correct output: -55.2026859793 | Program output: -72.2026859793
Correct output: -31.9001885201 | Program output: 36.0998114799 
Correct output: 70.8415782878  | Program output: 65.8415782878 
Correct output: -70.0770879346 | Program output: -21.0770879346
Correct output: 62.2573571201  | Program output: 52.4576511186 
Correct output: -11.0880796195 | Program output: -26.0880796195
Correct output: -98.0730811682 | Program output: -111.0730811682
Correct output: 45.954554541   | Program output: 41.954554541  
Correct output: 9.2519145493   | Program output: 66.2519145493 
Correct output: -62.0820375564 | Program output: -2.0820375564 
Correct output: -85.5891975931 | Program output: -91.5891975931
Correct output: 26.7802144548  | Program output: 30.9805084533 
Correct output: 1.2069497285   | Program output: 26.2069497285 
Correct output: 70.6151869811  | Program output: 90.2002939985 
Correct output: 27.2083659619  | Program output: 10.2083659619 
Correct output: 103.781099078  | Program output: 90.2002939985 
Correct output: 66.4193519736  | Program output: 56.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_pop} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_div} {:instruction print_float})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_dup_items float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 integer_mod float_dec float_yankdup float_dec integer_mod integer_yankdup float_yankdup float_dec in2 90.20029399850333 float_rot float_dec in1 in1 float_dup_items float_dec float_yankdup integer_pop in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_dec float_dec float_dup float_dup in2 float_dec float_dec float_dec integer_div float_dec float_dec float_dec float_dec float_dec float_dup in2 float_dec float_dec float_dec float_yankdup integer_shove integer_div print_float)
Errors: [6.0 2 31.2003 8 5.0 2 1.0 1 9.2003 7 25.0 2 22.0 2 33.2003 9 17.0 2 68.0 11 5.0 2 49.0 2 9.7997 7 15.0 2 13.0 3 4.0 1 57.0 2 60.0 1 6.0 2 4.2003 8 25.0 2 19.5851 10 17.0 2 13.5808 10 10.0 1]
Total: 626.7668
Mean: 12.535336
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2405.850212699999
Median total errors in population: 668.4907
Error averages by case: (76.06208619999998 2.794 94.76805479999865 8.602 73.19475990000001 3.021 73.21164920000001 2.617 83.70768459999923 7.602 95.46451190000002 3.198 90.2178342 3.062 95.07279189999865 9.534 86.06166309999998 3.084 128.4981856 11.411 76.64223089999997 3.176 113.58447589999997 3.035 90.2356054000012 9.117 82.8819853 3.082 84.30189749999997 4.078 72.73775869999997 2.426 119.77842370000006 3.125 122.98252549999997 4.116 87.62408609999993 3.607 79.64134460000088 8.254 89.86114900000001 3.063 101.56137729999867 7.739 92.57586349999967 3.955 90.70245119999962 7.789 79.93981669999998 3.053)
Error minima by case: (0.0 0 5.7075 6 0.0 0 0.0 0 0.088 2 13.0 1 2.0 1 10.3431 2 2.0 1 2.502 8 0.1509 1 0.7982 1 5.9429 7 1.0 1 0.0 0 2.0 1 9.2519 1 7.1968 1 5.0 1 0.088 6 0.3277 1 0.3773 1 3.2084 1 12.5808 2 0.0 0)
Average genome size in population (length): 91.52
Average program size in population (points): 92.52
Average percent parens in population: 0.011
Minimum age in population: 80.31558392015997
Maximum age in population: 84.75613085587936
Average age in population: 82.7609166374233
Median age in population: 82.83700641196953
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.803
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.803
Total error diversity:				 0.556
Error (vector) diversity:			 0.638
Behavioral diversity:				 0.639
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 68784902
--- Timings ---
Current time: 1529615260190 milliseconds
Total Time:         209.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        86.8 seconds, 41.4%
Fitness Testing:     97.3 seconds, 46.5%
Report:              25.2 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
;;******************************
;; -*- Number IO problem report - generation 57
Test total error for best: 40059.97989999999
Test mean error for best: 20.02999
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 48.2889250004 
Correct output: 15.0922415815  | Program output: 5.3847771616  
Correct output: -30.8202558445 | Program output: -25.8202558445
Correct output: 70.2512965501  | Program output: 71.2512965501 
Correct output: 150.6666771001 | Program output: 160.8669710986
Correct output: -148.0189802809 | Program output: -123.0189802809
Correct output: 91.9885288633  | Program output: 69.9885288633 
Correct output: 56.3430751406  | Program output: 90.5433691391 
Correct output: -55.2026859793 | Program output: -72.2026859793
Correct output: -31.9001885201 | Program output: 36.0998114799 
Correct output: 70.8415782878  | Program output: 65.8415782878 
Correct output: -70.0770879346 | Program output: -21.0770879346
Correct output: 62.2573571201  | Program output: 53.4576511186 
Correct output: -11.0880796195 | Program output: -26.0880796195
Correct output: -98.0730811682 | Program output: -111.0730811682
Correct output: 45.954554541   | Program output: 41.954554541  
Correct output: 9.2519145493   | Program output: 66.2519145493 
Correct output: -62.0820375564 | Program output: -2.0820375564 
Correct output: -85.5891975931 | Program output: -91.5891975931
Correct output: 26.7802144548  | Program output: 31.9805084533 
Correct output: 1.2069497285   | Program output: 26.2069497285 
Correct output: 70.6151869811  | Program output: 27.6151869811 
Correct output: 27.2083659619  | Program output: 10.2083659619 
Correct output: 103.781099078  | Program output: 90.2002939985 
Correct output: 66.4193519736  | Program output: 56.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_swap} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_pop} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_div} {:instruction print_float})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_swap float_dec in2 in1 float_dup_items 90.20029399850333 float_rot in1 float_add float_dup_items float_dec float_yankdup float_dec in2 in1 float_dup_items 90.20029399850333 float_dec in1 in1 integer_mod float_dec float_yankdup float_dec integer_mod integer_yankdup float_yankdup float_dec in2 90.20029399850333 float_rot float_dec in1 in1 float_dup_items float_dec float_yankdup integer_pop in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_dec float_dec float_dup float_dup in2 float_dec float_dec float_dec integer_div float_dec float_dec float_dec float_dec float_dec float_dup in2 float_dec float_dec float_dec float_yankdup integer_shove integer_div print_float)
Errors: [6.0 2 9.7075 10 5.0 2 1.0 1 10.2003 7 25.0 2 22.0 2 34.2003 9 17.0 2 68.0 11 5.0 2 49.0 2 8.7997 8 15.0 2 13.0 3 4.0 1 57.0 2 60.0 1 6.0 2 5.2003 8 25.0 2 43.0 2 17.0 2 13.5808 10 10.0 1]
Total: 625.6888999999999
Mean: 12.513778
Genome size: 91
Size: 92
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2658.897674999999
Median total errors in population: 670.09085
Error averages by case: (90.00559189999997 3.074 102.41107279999828 8.614 81.6313742 3.242 86.88749360000004 2.913 89.87453509999914 7.634 107.7410985 3.443 103.53180740000005 3.301 102.74805889999827 9.497 98.86838059999995 3.272 140.52409020000002 11.468 84.02196669999996 3.131 120.80523090000003 3.353 98.31925440000161 9.098 91.77640709999996 3.305 97.40974029999997 4.279 79.50820219999996 2.523 132.9588131 3.327 130.52911820000003 4.135 95.15851369999993 3.561 87.82417840000117 8.308 102.39597300000004 3.26 109.34227979999824 7.959 102.37722799999953 4.11 100.61070819999976 7.728 93.8485578 3.253)
Error minima by case: (0.0 0 8.2003 6 0.0 0 0.0 0 0.088 2 12.0 1 0.0 0 2.5947 2 2.0 1 4.644 8 4.0 1 4.105 1 1.7337 7 0.0 0 0.0 0 0.8655 1 8.2519 1 12.1 1 5.0 1 0.088 6 0.2069 1 1.5851 1 10.7916 1 13.2949 2 0.2191 1)
Average genome size in population (length): 93.969
Average program size in population (points): 94.969
Average percent parens in population: 0.011
Minimum age in population: 81.79348829280472
Maximum age in population: 86.17478943480943
Average age in population: 84.12305811528697
Median age in population: 84.14096768112698
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.825
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.825
Total error diversity:				 0.586
Error (vector) diversity:			 0.683
Behavioral diversity:				 0.684
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 71134302
--- Timings ---
Current time: 1529615265320 milliseconds
Total Time:         214.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        88.4 seconds, 41.2%
Fitness Testing:    100.1 seconds, 46.7%
Report:              25.8 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
;;******************************
;; -*- Number IO problem report - generation 58
Test total error for best: 32052.718100000042
Test mean error for best: 16.02636
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 44.2889250004 
Correct output: 15.0922415815  | Program output: 38.29253558   
Correct output: -30.8202558445 | Program output: -29.8202558445
Correct output: 70.2512965501  | Program output: 67.2512965501 
Correct output: 150.6666771001 | Program output: 151.8669710986
Correct output: -148.0189802809 | Program output: -127.0189802809
Correct output: 91.9885288633  | Program output: 65.9885288633 
Correct output: 56.3430751406  | Program output: 81.5433691391 
Correct output: -55.2026859793 | Program output: -76.2026859793
Correct output: -31.9001885201 | Program output: 32.0998114799 
Correct output: 70.8415782878  | Program output: 65.8415782878 
Correct output: -70.0770879346 | Program output: -25.0770879346
Correct output: 62.2573571201  | Program output: 44.4576511186 
Correct output: -11.0880796195 | Program output: -30.0880796195
Correct output: -98.0730811682 | Program output: -115.0730811682
Correct output: 45.954554541   | Program output: 36.954554541  
Correct output: 9.2519145493   | Program output: 62.2519145493 
Correct output: -62.0820375564 | Program output: -6.0820375564 
Correct output: -85.5891975931 | Program output: -91.5891975931
Correct output: 26.7802144548  | Program output: 22.9805084533 
Correct output: 1.2069497285   | Program output: 22.2069497285 
Correct output: 70.6151869811  | Program output: 90.2002939985 
Correct output: 27.2083659619  | Program output: 10.2083659619 
Correct output: 103.781099078  | Program output: 90.2002939985 
Correct output: 66.4193519736  | Program output: 52.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_pop} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction tagged_132} {:instruction float_dec} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_flush} {:instruction float_flush})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_dup_items float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 integer_mod float_dec float_yankdup float_dec integer_mod integer_yankdup float_yankdup float_dec in2 90.20029399850333 float_rot float_dec in1 in1 float_dup_items float_dec float_yankdup integer_pop in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_yankdup float_yankdup integer_shove float_dec float_dec float_dup float_dec float_yankdup integer_shove float_dec float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 integer_mult float_dup integer_dup float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dec float_dec float_dup in2 tagged_132 float_dec integer_dec float_yankdup float_dup_times integer_div print_float float_tan -9.568963984273623 integer_fromfloat -56.50848481366526 integer_div float_frominteger integer_flush float_flush)
Errors: [10.0 1 23.2003 8 1.0 2 3.0 2 1.2003 7 21.0 2 26.0 2 25.2003 9 21.0 2 64.0 11 5.0 2 45.0 2 17.7997 8 19.0 2 17.0 3 9.0 2 53.0 2 56.0 1 6.0 2 3.7997 7 21.0 2 19.5851 10 17.0 2 13.5808 10 14.0 2]
Total: 615.3661999999999
Mean: 12.307324
Genome size: 115
Size: 116
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2646.517001599999
Median total errors in population: 666.2003
Error averages by case: (88.17971819999998 3.149 104.23828209999833 8.667 80.35460999999998 3.283 84.54558020000005 2.928 92.83632319999914 7.714 106.23688760000003 3.482 102.57595670000003 3.343 103.99307029999834 9.534 97.17163419999997 3.289 137.983364 11.429 86.97402969999999 3.217 120.1266581 3.344 100.86693370000161 9.027 90.65069309999997 3.345 96.00725999999996 4.306 82.13257139999997 2.584 128.2588972 3.337 130.33162880000003 3.871 91.99057549999995 3.419 90.19636750000126 8.345 99.91849160000004 3.25 109.08567549999839 7.972 101.16424539999956 4.033 101.10374909999955 7.482 92.01079849999998 3.233)
Error minima by case: (0.0 0 7.7075 6 0.0 0 0.0 0 0.088 2 11.0 1 1.0 1 3.3431 2 1.5832 1 7.9 9 3.0 1 4.9229 1 7.088 7 0.0 0 1.0 1 2.0 1 1.5974 1 8.4626 1 5.0 1 0.2003 6 1.3444 1 6.5851 1 8.7916 1 13.4433 2 0.2191 1)
Average genome size in population (length): 95.484
Average program size in population (points): 96.484
Average percent parens in population: 0.010
Minimum age in population: 82.79348829280472
Maximum age in population: 87.3951790563214
Average age in population: 85.45087398559485
Median age in population: 85.49040625964817
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.823
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.823
Total error diversity:				 0.567
Error (vector) diversity:			 0.674
Behavioral diversity:				 0.674
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 73521477
--- Timings ---
Current time: 1529615270005 milliseconds
Total Time:         219.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        89.8 seconds, 41.0%
Fitness Testing:    102.5 seconds, 46.8%
Report:              26.5 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
;;******************************
;; -*- Number IO problem report - generation 59
Test total error for best: 32052.718100000042
Test mean error for best: 16.02636
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 44.2889250004 
Correct output: 15.0922415815  | Program output: 38.29253558   
Correct output: -30.8202558445 | Program output: -29.8202558445
Correct output: 70.2512965501  | Program output: 67.2512965501 
Correct output: 150.6666771001 | Program output: 151.8669710986
Correct output: -148.0189802809 | Program output: -127.0189802809
Correct output: 91.9885288633  | Program output: 65.9885288633 
Correct output: 56.3430751406  | Program output: 81.5433691391 
Correct output: -55.2026859793 | Program output: -76.2026859793
Correct output: -31.9001885201 | Program output: 32.0998114799 
Correct output: 70.8415782878  | Program output: 65.8415782878 
Correct output: -70.0770879346 | Program output: -25.0770879346
Correct output: 62.2573571201  | Program output: 44.4576511186 
Correct output: -11.0880796195 | Program output: -30.0880796195
Correct output: -98.0730811682 | Program output: -115.0730811682
Correct output: 45.954554541   | Program output: 36.954554541  
Correct output: 9.2519145493   | Program output: 62.2519145493 
Correct output: -62.0820375564 | Program output: -6.0820375564 
Correct output: -85.5891975931 | Program output: -91.5891975931
Correct output: 26.7802144548  | Program output: 22.9805084533 
Correct output: 1.2069497285   | Program output: 22.2069497285 
Correct output: 70.6151869811  | Program output: 90.2002939985 
Correct output: 27.2083659619  | Program output: 10.2083659619 
Correct output: 103.781099078  | Program output: 90.2002939985 
Correct output: 66.4193519736  | Program output: 52.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_pop} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction tagged_132} {:instruction float_dec} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_flush} {:instruction float_flush})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_dup_items float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 integer_mod float_dec float_yankdup float_dec integer_mod integer_yankdup float_yankdup float_dec in2 90.20029399850333 float_rot float_dec in1 in1 float_dup_items float_dec float_yankdup integer_pop in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_yankdup float_yankdup integer_shove float_dec float_dec float_dup float_dec float_yankdup integer_shove float_dec float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 integer_mult float_dup integer_dup float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dec float_dec float_dup in2 tagged_132 float_dec integer_dec float_yankdup float_dup_times integer_div print_float float_tan -9.568963984273623 integer_fromfloat -56.50848481366526 integer_div float_frominteger integer_flush float_flush)
Errors: [10.0 1 23.2003 8 1.0 2 3.0 2 1.2003 7 21.0 2 26.0 2 25.2003 9 21.0 2 64.0 11 5.0 2 45.0 2 17.7997 8 19.0 2 17.0 3 9.0 2 53.0 2 56.0 1 6.0 2 3.7997 7 21.0 2 19.5851 10 17.0 2 13.5808 10 14.0 2]
Total: 615.3661999999999
Mean: 12.307324
Genome size: 115
Size: 116
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2613.589837599999
Median total errors in population: 681.6008999999999
Error averages by case: (87.14010449999998 3.144 103.07724079999849 8.684 79.75196019999997 3.199 83.69340480000008 2.899 91.02012459999914 7.542 105.6261105 3.408 101.32118320000005 3.355 103.24140619999848 9.476 96.4340411 3.307 137.0086165 11.351 83.79381919999997 3.172 119.15627880000001 3.341 98.7800658000015 8.94 89.9870016 3.288 95.40595629999997 4.316 79.02302999999998 2.499 127.39138930000001 3.325 128.02230730000002 3.953 89.58325439999996 3.386 88.46761390000081 8.317 98.67511310000002 3.191 108.61616969999864 7.71 100.83862619999958 4.273 99.8930145999996 7.284 91.03100499999998 3.251)
Error minima by case: (0.0 0 0.4695 6 0.0 0 0.0 0 0.2003 2 10.0 1 1.0 1 3.7612 2 0.0 0 1.9132 8 3.0 1 20.9229 1 5.7997 7 0.0 0 2.0 1 2.0 1 4.9368 1 32.2823 1 5.0 1 0.088 6 0.2069 1 3.5851 1 8.7916 1 13.4433 2 0.0 0)
Average genome size in population (length): 95.829
Average program size in population (points): 96.829
Average percent parens in population: 0.010
Minimum age in population: 83.79348829280472
Maximum age in population: 88.80275877818697
Average age in population: 86.9057142265444
Median age in population: 86.94818379779856
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.858
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.858
Total error diversity:				 0.617
Error (vector) diversity:			 0.715
Behavioral diversity:				 0.716
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 75917377
--- Timings ---
Current time: 1529615275047 milliseconds
Total Time:         224.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        91.5 seconds, 40.8%
Fitness Testing:    105.2 seconds, 46.9%
Report:              27.3 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
;;******************************
;; -*- Number IO problem report - generation 60
Test total error for best: 33582.78780000004
Test mean error for best: 16.79139
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 40.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 153.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 83.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 66.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 46.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 39.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -91.5891975931
Correct output: 26.7802144548  | Program output: 24.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.2002939985 
Correct output: 27.2083659619  | Program output: 10.2083659619 
Correct output: 103.781099078  | Program output: 90.2002939985 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_frominteger} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction integer_mod} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_pop} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_flush})
Best program: (float_dec 90.20029399850333 float_rot float_frominteger in1 float_add float_dup_items float_dec float_yankdup float_dec in2 in1 float_dup_items 90.20029399850333 float_rot float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 integer_mod float_dec float_yankdup float_dec integer_mod float_sub float_yankdup float_dec in2 90.20029399850333 float_rot float_dec in1 in1 float_dup_items float_dec float_yankdup integer_pop in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_dec float_dup float_dec float_yankdup integer_shove float_dec float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dec float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -9.568963984273623 integer_fromfloat -56.50848481366526 integer_div float_frominteger integer_flush)
Errors: [11.0 2 25.2003 8 0.0 0 4.0 2 3.2003 7 20.0 1 27.0 2 27.2003 9 22.0 2 63.0 10 4.0 2 44.0 2 15.7997 8 20.0 1 18.0 3 6.0 2 52.0 2 55.0 2 6.0 2 1.7997 7 20.0 1 19.5851 10 17.0 2 13.5808 10 15.0 2]
Total: 609.3661999999999
Mean: 12.187324
Genome size: 112
Size: 113
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2336.977914299999
Median total errors in population: 671.5007499999999
Error averages by case: (76.68377469999999 3.093 93.30988599999833 8.62 67.93184090000001 3.088 74.68278340000008 2.721 80.51791909999896 7.39 95.71096460000004 3.308 91.23122820000007 3.293 93.13475379999836 9.3 85.19730020000002 3.287 126.99486209999999 11.251 72.63536609999994 2.996 107.78019799999998 3.287 86.49507570000162 8.74 77.82046849999996 3.175 84.31702530000001 4.219 68.24123809999999 2.367 117.59355340000005 3.255 116.78214570000002 4.069 76.29838769999995 3.261 77.01405390000059 8.282 88.8277805 3.098 95.92527759999844 7.728 88.58128969999966 3.915 88.48051239999978 7.301 80.65222869999995 3.094)
Error minima by case: (0.0 0 0.8459 7 0.0 0 0.0 0 0.088 2 8.0 1 3.0 1 15.2003 2 1.0 1 1.4253 8 2.3587 1 1.3558 1 6.7997 7 0.1482 1 0.0 0 2.0 1 5.2519 1 6.6393 1 5.0 1 0.088 6 0.2069 1 7.5851 1 12.1476 1 12.94 2 0.0 0)
Average genome size in population (length): 93.976
Average program size in population (points): 94.976
Average percent parens in population: 0.011
Minimum age in population: 85.76282278533135
Maximum age in population: 90.02766345804346
Average age in population: 88.33283569914781
Median age in population: 88.39639825941563
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 34
Genome diversity (% unique Plush genomes):	 0.847
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.847
Total error diversity:				 0.61
Error (vector) diversity:			 0.684
Behavioral diversity:				 0.685
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 78266877
--- Timings ---
Current time: 1529615279802 milliseconds
Total Time:         228.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        93.0 seconds, 40.7%
Fitness Testing:    107.6 seconds, 47.1%
Report:              28.0 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
;;******************************
;; -*- Number IO problem report - generation 61
Test total error for best: 33582.78780000004
Test mean error for best: 16.79139
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 40.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 153.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 83.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 66.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 46.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 39.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -91.5891975931
Correct output: 26.7802144548  | Program output: 24.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.2002939985 
Correct output: 27.2083659619  | Program output: 10.2083659619 
Correct output: 103.781099078  | Program output: 90.2002939985 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_frominteger} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction integer_mod} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_pop} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_flush})
Best program: (float_dec 90.20029399850333 float_rot float_frominteger in1 float_add float_dup_items float_dec float_yankdup float_dec in2 in1 float_dup_items 90.20029399850333 float_rot float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 integer_mod float_dec float_yankdup float_dec integer_mod float_sub float_yankdup float_dec in2 90.20029399850333 float_rot float_dec in1 in1 float_dup_items float_dec float_yankdup integer_pop in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_dec float_dup float_dec float_yankdup integer_shove float_dec float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dec float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -9.568963984273623 integer_fromfloat -56.50848481366526 integer_div float_frominteger integer_flush)
Errors: [11.0 2 25.2003 8 0.0 0 4.0 2 3.2003 7 20.0 1 27.0 2 27.2003 9 22.0 2 63.0 10 4.0 2 44.0 2 15.7997 8 20.0 1 18.0 3 6.0 2 52.0 2 55.0 2 6.0 2 1.7997 7 20.0 1 19.5851 10 17.0 2 13.5808 10 15.0 2]
Total: 609.3661999999999
Mean: 12.187324
Genome size: 112
Size: 113
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2201.1359617999988
Median total errors in population: 666.5007499999999
Error averages by case: (74.0304817 3.057 83.71798059999861 8.652 63.61768419999997 2.925 70.71997400000004 2.617 71.32052779999917 7.374 92.67176879999998 3.154 87.92127170000005 3.214 85.35086469999858 9.028 83.1373301 3.132 126.09030629999998 11.233 66.14146509999998 2.916 103.41391480000004 3.237 75.73455050000129 8.605 73.31432609999997 3.019 81.76221980000001 4.076 61.71715059999998 2.212 116.16883700000002 3.171 113.37142270000004 3.877 68.63749289999997 3.022 67.43303360000013 8.314 86.24650229999997 2.989 87.2465558999987 7.561 81.13695879999968 3.876 80.89153139999989 7.356 77.78981040000001 2.935)
Error minima by case: (0.0 0 8.7075 7 0.0 0 0.0 0 0.088 2 12.0 1 0.0 0 3.3431 2 1.0 1 2.0998 7 3.0 1 0.5467 1 6.7997 7 0.0881 1 0.0 0 2.0 1 3.2519 1 7.4484 1 5.0 1 0.0531 6 1.2069 1 6.5851 1 10.2084 1 12.6356 2 0.0 0)
Average genome size in population (length): 92.446
Average program size in population (points): 93.446
Average percent parens in population: 0.011
Minimum age in population: 87.83384290035893
Maximum age in population: 91.65870536316213
Average age in population: 89.66902468762282
Median age in population: 89.67929212820232
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 56
Genome diversity (% unique Plush genomes):	 0.821
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 56
Syntactic diversity (% unique Push programs):	 0.821
Total error diversity:				 0.595
Error (vector) diversity:			 0.671
Behavioral diversity:				 0.672
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 80578202
--- Timings ---
Current time: 1529615284678 milliseconds
Total Time:         233.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        94.7 seconds, 40.5%
Fitness Testing:    110.2 seconds, 47.1%
Report:              28.8 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
;;******************************
;; -*- Number IO problem report - generation 62
Test total error for best: 33582.78780000004
Test mean error for best: 16.79139
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 40.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 153.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 83.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 66.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 46.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 39.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -91.5891975931
Correct output: 26.7802144548  | Program output: 24.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.2002939985 
Correct output: 27.2083659619  | Program output: 10.2083659619 
Correct output: 103.781099078  | Program output: 90.2002939985 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_frominteger} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction integer_mod} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_pop} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_flush})
Best program: (float_dec 90.20029399850333 float_rot float_frominteger in1 float_add float_dup_items float_dec float_yankdup float_dec in2 in1 float_dup_items 90.20029399850333 float_rot float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 integer_mod float_dec float_yankdup float_dec integer_mod float_sub float_yankdup float_dec in2 90.20029399850333 float_rot float_dec in1 in1 float_dup_items float_dec float_yankdup integer_pop in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_dec float_dup float_dec float_yankdup integer_shove float_dec float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dec float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -9.568963984273623 integer_fromfloat -56.50848481366526 integer_div float_frominteger integer_flush)
Errors: [11.0 2 25.2003 8 0.0 0 4.0 2 3.2003 7 20.0 1 27.0 2 27.2003 9 22.0 2 63.0 10 4.0 2 44.0 2 15.7997 8 20.0 1 18.0 3 6.0 2 52.0 2 55.0 2 6.0 2 1.7997 7 20.0 1 19.5851 10 17.0 2 13.5808 10 15.0 2]
Total: 609.3661999999999
Mean: 12.187324
Genome size: 112
Size: 113
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2649.617754200001
Median total errors in population: 673.4005999999999
Error averages by case: (91.1943388 3.178 106.08924949999849 8.782 81.5600343 3.038 87.96858810000003 2.71 93.2042200999987 7.646 108.36768039999998 3.328 104.15180130000006 3.299 105.44927849999836 9.109 99.4782809 3.336 141.15121639999995 11.246 81.80636879999997 3.038 120.65902870000001 3.345 94.57273990000154 8.659 91.49797000000001 3.186 98.07415959999997 4.232 78.42655539999998 2.266 132.0171022 3.26 129.90434569999996 3.837 86.90049489999998 3.225 88.80635249999963 8.457 102.49737150000003 3.096 105.82238539999862 7.581 100.46887649999961 4.162 100.16886579999951 7.379 94.99044899999998 2.995)
Error minima by case: (0.0 0 8.7075 7 0.0 0 0.0 0 0.088 2 10.0 1 0.0 0 3.3431 2 0.0 0 1.0171 8 3.0 1 4.9229 1 6.7997 7 0.0881 1 1.0 1 2.0 1 8.2633 1 16.5877 1 4.0 1 0.1662 6 0.2097 1 5.5851 1 8.7916 1 13.5808 2 0.0 0)
Average genome size in population (length): 92.375
Average program size in population (points): 93.375
Average percent parens in population: 0.011
Minimum age in population: 89.1859255980547
Maximum age in population: 92.96414016098323
Average age in population: 91.1272214598339
Median age in population: 91.19256915622356
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 42
Genome diversity (% unique Plush genomes):	 0.811
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.811
Total error diversity:				 0.555
Error (vector) diversity:			 0.631
Behavioral diversity:				 0.631
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 82887727
--- Timings ---
Current time: 1529615289233 milliseconds
Total Time:         238.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        96.2 seconds, 40.4%
Fitness Testing:    112.5 seconds, 47.2%
Report:              29.5 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
;;******************************
;; -*- Number IO problem report - generation 63
Test total error for best: 33582.78780000004
Test mean error for best: 16.79139
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 40.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 153.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 83.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 66.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 46.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 39.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -91.5891975931
Correct output: 26.7802144548  | Program output: 24.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.2002939985 
Correct output: 27.2083659619  | Program output: 10.2083659619 
Correct output: 103.781099078  | Program output: 90.2002939985 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_frominteger} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction integer_mod} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_pop} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction float_max} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_flush})
Best program: (float_dec 90.20029399850333 float_rot float_frominteger in1 float_add float_dup_items float_dec float_yankdup float_dec in2 in1 float_dup_items 90.20029399850333 float_rot float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 integer_mod float_dec float_yankdup float_dec integer_mod float_sub float_yankdup float_dec in2 90.20029399850333 float_rot float_dec in1 in1 float_dup_items float_dec float_yankdup integer_pop in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_dec float_dup float_dec float_yankdup integer_shove float_dec float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dec float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod float_max print_float float_tan -9.568963984273623 integer_fromfloat -56.50848481366526 integer_div float_frominteger integer_flush)
Errors: [11.0 2 25.2003 8 0.0 0 4.0 2 3.2003 7 20.0 1 27.0 2 27.2003 9 22.0 2 63.0 10 4.0 2 44.0 2 15.7997 8 20.0 1 18.0 3 6.0 2 52.0 2 55.0 2 6.0 2 1.7997 7 20.0 1 19.5851 10 17.0 2 13.5808 10 15.0 2]
Total: 609.3661999999999
Mean: 12.187324
Genome size: 112
Size: 113
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2318.3990340000028
Median total errors in population: 663.30045
Error averages by case: (78.6735246 2.905 92.42675579999853 8.712 67.1071759 2.737 75.31629560000003 2.475 78.16993249999878 7.538 95.57881899999998 3.033 92.52172759999998 3.035 93.42119779999847 8.743 87.17446149999999 3.06 130.19734849999998 11.187 69.24156839999996 2.934 107.20614260000004 3.08 79.78268560000141 8.565 77.27657219999998 2.898 85.2566846 3.999 65.98023249999997 2.065 120.71497670000002 3.028 118.92724180000002 3.714 73.49836169999996 3.059 73.24061769999952 8.256 91.29509709999998 2.841 91.26723379999882 7.504 86.17457649999974 3.861 85.94414339999992 7.564 82.45966059999998 2.753)
Error minima by case: (0.0 0 8.7075 7 0.0 0 0.0 0 0.088 2 7.0 1 0.0 0 3.3431 2 1.0 1 0.0998 8 0.6413 1 2.8472 1 6.7997 7 0.0881 1 0.0 0 2.0 1 10.2095 1 9.8855 1 4.0 1 0.2003 6 0.331 1 8.5851 1 6.7916 1 10.7811 2 0.0 0)
Average genome size in population (length): 94.023
Average program size in population (points): 95.023
Average percent parens in population: 0.011
Minimum age in population: 90.23832656546405
Maximum age in population: 94.76262759391142
Average age in population: 92.45793616218344
Median age in population: 92.48705728114118
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.811
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.811
Total error diversity:				 0.545
Error (vector) diversity:			 0.638
Behavioral diversity:				 0.638
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 85238427
--- Timings ---
Current time: 1529615294417 milliseconds
Total Time:         243.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        97.9 seconds, 40.3%
Fitness Testing:    115.1 seconds, 47.3%
Report:              30.1 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 64
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 64
;;******************************
;; -*- Number IO problem report - generation 64
Test total error for best: 33373.58300000004
Test mean error for best: 16.68679
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 38.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 151.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 81.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 66.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 44.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 39.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -91.5891975931
Correct output: 26.7802144548  | Program output: 22.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.2002939985 
Correct output: 27.2083659619  | Program output: 10.2083659619 
Correct output: 103.781099078  | Program output: 90.2002939985 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction integer_mod} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_pop} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction integer_add} {:instruction integer_flush})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_dup_items float_dec float_dec in2 in1 float_dup_items 90.20029399850333 float_rot float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 integer_mod float_dec float_yankdup float_dec integer_mod float_sub float_yankdup float_dec in2 90.20029399850333 float_rot float_dec in1 in1 float_dup_items float_dec float_yankdup integer_pop in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_dec float_dup float_dec float_yankdup integer_shove float_dec float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dec float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -9.568963984273623 integer_fromfloat -56.50848481366526 integer_div integer_add integer_flush)
Errors: [11.0 2 23.2003 8 0.0 0 4.0 2 1.2003 7 20.0 1 27.0 2 25.2003 9 22.0 2 63.0 10 4.0 2 44.0 2 17.7997 8 20.0 1 18.0 3 6.0 2 52.0 2 55.0 2 6.0 2 3.7997 7 20.0 1 19.5851 10 17.0 2 13.5808 10 15.0 2]
Total: 607.3661999999999
Mean: 12.147324
Genome size: 113
Size: 114
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2476.0464319000025
Median total errors in population: 658.59685
Error averages by case: (81.94066709999998 3.011 100.50192679999866 8.857 74.79625489999998 2.875 78.59191980000003 2.661 87.7841424999989 7.748 98.23426889999998 3.17 96.60218620000002 3.158 101.06942469999854 8.957 90.52455400000001 3.187 133.3254108 11.27 76.77291289999998 2.96 114.45595649999997 3.185 90.56572460000135 8.947 85.4197726 3.036 88.58808649999997 4.117 75.3696439 2.24 123.92870620000002 3.149 124.38577029999999 3.741 81.20049849999997 3.166 82.93055939999954 8.37 94.42271540000002 2.939 98.83931569999878 7.806 93.22978829999977 3.929 93.41702409999972 8.002 85.72420129999999 2.944)
Error minima by case: (0.0 0 6.7075 7 0.0 0 0.0 0 0.088 2 11.0 1 0.0 0 3.3431 2 4.0 1 0.0998 8 3.0 1 10.9229 1 6.7997 7 0.4689 1 0.0 0 2.0 1 8.2519 1 16.8111 1 4.0 1 0.2003 6 0.2069 1 8.5851 1 10.2084 1 13.5808 2 0.0 0)
Average genome size in population (length): 97.207
Average program size in population (points): 98.207
Average percent parens in population: 0.010
Minimum age in population: 91.32072736014251
Maximum age in population: 95.58421173330694
Average age in population: 93.79650945522035
Median age in population: 93.87278204574913
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 52
Genome diversity (% unique Plush genomes):	 0.835
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 52
Syntactic diversity (% unique Push programs):	 0.835
Total error diversity:				 0.552
Error (vector) diversity:			 0.649
Behavioral diversity:				 0.649
--- Run Statistics ---
Number of program evaluations used so far: 65000
Number of point (instruction) evaluations so far: 87668652
--- Timings ---
Current time: 1529615299259 milliseconds
Total Time:         248.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        99.5 seconds, 40.1%
Fitness Testing:    117.7 seconds, 47.4%
Report:              31.0 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 65
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 65
;;******************************
;; -*- Number IO problem report - generation 65
Test total error for best: 31692.112700000034
Test mean error for best: 15.84606
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 36.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 149.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 79.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 66.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 42.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 39.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -91.5891975931
Correct output: 26.7802144548  | Program output: 20.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.2002939985 
Correct output: 27.2083659619  | Program output: 10.2083659619 
Correct output: 103.781099078  | Program output: 90.2002939985 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_pop} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_flush})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 integer_mod float_dec float_yankdup float_dec integer_mod integer_yankdup float_yankdup float_dec in2 90.20029399850333 float_rot float_dec in1 in1 float_dup_items float_dec float_yankdup integer_pop in2 in1 float_dup_items float_dec float_yankdup float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_dec float_dup float_dec float_yankdup integer_shove float_dec float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dec float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -9.568963984273623 integer_fromfloat -56.50848481366526 integer_div float_frominteger integer_flush)
Errors: [11.0 2 21.2003 8 0.0 0 4.0 2 0.7997 8 20.0 1 27.0 2 23.2003 9 22.0 2 63.0 10 4.0 2 44.0 2 19.7997 7 20.0 1 18.0 3 6.0 2 52.0 2 55.0 2 6.0 2 5.7997 7 20.0 1 19.5851 10 17.0 2 13.5808 10 15.0 2]
Total: 606.9656
Mean: 12.139312
Genome size: 115
Size: 116
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2559.313712800003
Median total errors in population: 661.2667999999999
Error averages by case: (86.39984729999998 3.079 105.09408849999826 8.766 77.75016690000002 2.899 83.10443930000004 2.778 93.8388689999988 7.758 103.88058699999998 3.241 98.61322480000007 3.259 105.66933349999823 9.006 95.39955909999998 3.296 136.75436219999997 11.237 75.23218979999997 2.953 117.08812449999998 3.261 96.79453290000163 9.078 88.41952510000003 3.092 94.22788029999997 4.246 74.53228289999996 2.475 127.16898310000005 3.265 126.7430657 3.816 82.16064889999998 3.138 87.13651879999998 8.324 97.73375630000004 3.028 100.0075571999986 7.942 94.68892159999974 3.946 95.73154479999975 7.959 90.21270329999999 3.089)
Error minima by case: (0.0 0 8.7075 7 0.0 0 0.0 0 0.1081 2 10.0 1 0.0 0 4.3431 2 0.0 0 1.2318 7 3.0 1 8.9229 1 6.7997 7 0.0 0 0.0 0 2.0 1 5.1773 1 3.2725 1 3.7979 1 0.2003 6 0.6385 1 2.5851 1 9.7916 1 13.5808 2 0.0 0)
Average genome size in population (length): 100.68
Average program size in population (points): 101.68
Average percent parens in population: 0.010
Minimum age in population: 92.87784752870765
Maximum age in population: 96.86941018993429
Average age in population: 95.10811989784273
Median age in population: 95.15228194915761
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 43
Genome diversity (% unique Plush genomes):	 0.861
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.861
Total error diversity:				 0.574
Error (vector) diversity:			 0.688
Behavioral diversity:				 0.689
--- Run Statistics ---
Number of program evaluations used so far: 66000
Number of point (instruction) evaluations so far: 90185752
--- Timings ---
Current time: 1529615304456 milliseconds
Total Time:         253.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       101.0 seconds, 39.9%
Fitness Testing:    120.5 seconds, 47.6%
Report:              31.7 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 65
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 66
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 66
;;******************************
;; -*- Number IO problem report - generation 66
Test total error for best: 32979.43200000002
Test mean error for best: 16.48972
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 44.2889250004 
Correct output: 15.0922415815  | Program output: 0.0           
Correct output: -30.8202558445 | Program output: -29.8202558445
Correct output: 70.2512965501  | Program output: 67.2512965501 
Correct output: 150.6666771001 | Program output: 153.8669710986
Correct output: -148.0189802809 | Program output: -127.0189802809
Correct output: 91.9885288633  | Program output: 65.9885288633 
Correct output: 56.3430751406  | Program output: 88.2002939985 
Correct output: -55.2026859793 | Program output: -76.2026859793
Correct output: -31.9001885201 | Program output: 32.0998114799 
Correct output: 70.8415782878  | Program output: 66.8415782878 
Correct output: -70.0770879346 | Program output: -25.0770879346
Correct output: 62.2573571201  | Program output: 46.4576511186 
Correct output: -11.0880796195 | Program output: -30.0880796195
Correct output: -98.0730811682 | Program output: -115.0730811682
Correct output: 45.954554541   | Program output: 39.954554541  
Correct output: 9.2519145493   | Program output: 62.2519145493 
Correct output: -62.0820375564 | Program output: -6.0820375564 
Correct output: -85.5891975931 | Program output: -91.5891975931
Correct output: 26.7802144548  | Program output: 24.9805084533 
Correct output: 1.2069497285   | Program output: 22.2069497285 
Correct output: 70.6151869811  | Program output: 68.6151869811 
Correct output: 27.2083659619  | Program output: 25.2083659619 
Correct output: 103.781099078  | Program output: 72.781099078  
Correct output: 66.4193519736  | Program output: 52.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_frominteger} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_yank} {:instruction integer_mod} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_pop} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_mod})
Best program: (float_dec 90.20029399850333 float_rot float_frominteger in1 float_add float_dup_items float_dec float_yankdup float_dec in2 in1 float_rot float_frominteger in1 float_add float_dup_items float_dec float_yankdup float_dec in2 in1 float_dup_items 90.20029399850333 float_rot float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 integer_mod float_dec float_yankdup float_yank integer_mod float_sub float_yankdup float_dec in2 90.20029399850333 float_rot float_dec in1 in1 float_dup_items float_dec float_yankdup integer_pop in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_dec float_dup float_dec float_yankdup integer_shove float_dec float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dec integer_rot float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -9.568963984273623 integer_fromfloat -56.50848481366526 integer_mod)
Errors: [10.0 1 15.0922 11 1.0 2 3.0 2 3.2003 7 21.0 2 26.0 2 31.8572 12 21.0 2 64.0 11 4.0 2 45.0 2 15.7997 8 19.0 2 17.0 3 6.0 2 53.0 2 56.0 1 6.0 2 1.7997 7 21.0 2 2.0 2 2.0 1 31.0 3 14.0 2]
Total: 582.7491
Mean: 11.654982
Genome size: 120
Size: 121
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2306.266911300003
Median total errors in population: 652.0
Error averages by case: (77.78999239999999 3.027 92.40347659999847 8.735 66.09122929999998 2.629 73.89250920000005 2.837 80.52885569999901 7.647 92.8129036 3.038 91.96672670000007 3.213 92.87093849999845 9.142 86.55534959999996 3.175 125.89985949999998 11.122 67.23931639999996 2.935 105.75235719999998 3.18 86.12829060000142 9.011 78.708388 2.897 84.88194589999998 4.099 68.11627579999998 2.501 116.70270360000004 3.197 115.67592099999996 3.598 72.3072172 3.059 76.74586230000038 8.181 87.4204036 2.886 89.64766139999867 8.08 85.1882263999997 4.044 85.81575529999958 7.955 81.82874549999995 3.108)
Error minima by case: (0.0 0 8.7075 7 0.0 0 0.0 0 0.2003 1 8.0 1 0.0 0 5.3431 2 1.0 1 0.0998 8 3.0 1 6.9229 1 7.7997 7 0.0413 1 2.0 1 2.0 1 5.2519 1 17.182 1 4.0 1 0.2003 6 0.1619 1 2.0 1 2.0 1 13.5808 2 0.0 0)
Average genome size in population (length): 104.272
Average program size in population (points): 105.272
Average percent parens in population: 0.010
Minimum age in population: 93.87784752870765
Maximum age in population: 98.45126367353441
Average age in population: 96.39627250073654
Median age in population: 96.45308011727332
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.865
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.865
Total error diversity:				 0.552
Error (vector) diversity:			 0.683
Behavioral diversity:				 0.684
--- Run Statistics ---
Number of program evaluations used so far: 67000
Number of point (instruction) evaluations so far: 92792627
--- Timings ---
Current time: 1529615309354 milliseconds
Total Time:         258.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       102.6 seconds, 39.7%
Fitness Testing:    123.2 seconds, 47.7%
Report:              32.6 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 66
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 67
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 67
;;******************************
;; -*- Number IO problem report - generation 67
Test total error for best: 31586.112700000034
Test mean error for best: 15.79306
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 36.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 149.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 79.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 65.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 42.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 41.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -91.5891975931
Correct output: 26.7802144548  | Program output: 20.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.2002939985 
Correct output: 27.2083659619  | Program output: 10.2083659619 
Correct output: 103.781099078  | Program output: 90.2002939985 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_pop} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_flush})
Best program: (float_dec 90.20029399850333 float_rot float_dec float_dec float_dec float_yankdup float_dec float_rot float_dec in1 float_add float_dup_items float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 integer_mod float_dec float_yankdup float_dec integer_mod integer_yankdup float_yankdup float_dec in2 90.20029399850333 float_rot float_dec in1 in1 float_dup_items float_dec float_yankdup integer_pop in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_dec float_dec float_dup float_dup in2 float_dec float_dec float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dec float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -9.568963984273623 integer_fromfloat -56.50848481366526 integer_div float_frominteger integer_flush)
Errors: [11.0 2 21.2003 8 0.0 0 4.0 2 0.7997 8 20.0 1 27.0 2 23.2003 9 22.0 2 63.0 10 5.0 2 44.0 2 19.7997 7 20.0 1 18.0 3 4.0 1 52.0 2 55.0 2 6.0 2 5.7997 7 20.0 1 19.5851 10 17.0 2 13.5808 10 15.0 2]
Total: 604.9656
Mean: 12.099312
Genome size: 114
Size: 115
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2678.7466010000016
Median total errors in population: 652.2003
Error averages by case: (96.15663579999998 3.229 106.75057299999838 8.739 79.8975689 2.647 92.03997590000009 3.129 95.61635199999881 7.617 110.59082110000001 3.177 108.26404960000009 3.409 105.3296488999984 9.237 104.80607329999998 3.396 142.0514526 11.063 76.97839149999999 2.951 118.3544131 3.413 102.72088750000162 9.068 93.26638639999997 3.014 103.862081 4.354 78.90090629999997 2.706 132.95878790000003 3.387 127.73755400000002 3.645 86.38928399999999 3.21 90.76223970000092 8.166 103.5084847 2.95 101.42283059999852 8.399 94.6140987999997 4.136 98.96537799999962 8.351 100.02572639999998 3.383)
Error minima by case: (0.0 0 5.0184 7 0.0 0 0.0 0 0.2003 2 3.0 1 0.0 0 2.0 1 1.0 1 2.9002 8 3.0 1 4.9229 1 7.7997 7 0.0 0 2.0 1 2.0 1 4.3933 1 17.739 1 5.0 1 0.2003 6 0.6057 1 2.5851 1 8.7916 1 2.0 1 0.0 0)
Average genome size in population (length): 107.428
Average program size in population (points): 108.428
Average percent parens in population: 0.009
Minimum age in population: 95.19331325102094
Maximum age in population: 99.7086305318803
Average age in population: 97.63456742078465
Median age in population: 97.68244045877107
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.875
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.875
Total error diversity:				 0.555
Error (vector) diversity:			 0.683
Behavioral diversity:				 0.683
--- Run Statistics ---
Number of program evaluations used so far: 68000
Number of point (instruction) evaluations so far: 95478352
--- Timings ---
Current time: 1529615314524 milliseconds
Total Time:         263.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       104.1 seconds, 39.5%
Fitness Testing:    126.1 seconds, 47.8%
Report:              33.2 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 67
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 68
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 68
;;******************************
;; -*- Number IO problem report - generation 68
Test total error for best: 31575.112700000034
Test mean error for best: 15.78756
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 36.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 149.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 79.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 65.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 42.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 41.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -91.5891975931
Correct output: 26.7802144548  | Program output: 20.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.2002939985 
Correct output: 27.2083659619  | Program output: 10.2083659619 
Correct output: 103.781099078  | Program output: 90.2002939985 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_pop} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction integer_fromfloat} {:instruction -56.50848481366526})
Best program: (float_dec 90.20029399850333 float_rot float_dec float_dec float_dec float_yankdup float_dec float_rot float_dec in1 float_add float_dup_items float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 integer_mod float_dec float_yankdup float_dec integer_mod integer_yankdup float_yankdup float_dec in2 90.20029399850333 float_rot float_dec in1 in1 float_dup_items float_dec float_yankdup integer_pop in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_dec float_dec float_dup float_dup in2 float_dec float_dec float_dec integer_div float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dec integer_rot float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -9.568963984273623 integer_fromfloat -56.50848481366526)
Errors: [11.0 2 21.2003 8 0.0 0 4.0 2 0.7997 8 20.0 1 27.0 2 23.2003 9 22.0 2 63.0 10 5.0 2 44.0 2 19.7997 7 20.0 1 18.0 3 4.0 1 52.0 2 55.0 2 6.0 2 5.7997 7 20.0 1 19.5851 10 17.0 2 13.5808 10 15.0 2]
Total: 604.9656
Mean: 12.099312
Genome size: 113
Size: 114
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2078.1561775
Median total errors in population: 648.4005999999999
Error averages by case: (71.28399439999998 2.878 80.65828809999837 8.6 56.06898119999999 2.173 66.40976900000003 2.865 67.39953319999913 7.534 84.1911759 2.767 85.61682090000001 3.023 81.55636349999838 9.201 80.27725819999999 3.041 118.44345750000002 10.964 56.25672929999999 2.749 95.78633779999998 3.063 75.68959010000148 8.88 70.94536429999997 2.646 78.63663960000001 3.988 57.4052711 2.467 108.85287659999999 3.013 105.66823759999998 3.272 62.9749633 2.96 65.30525480000092 8.028 78.6867914 2.524 80.32831529999858 8.336 76.62347149999987 3.865 77.70437800000039 8.258 75.26431489999997 3.027)
Error minima by case: (0.0 0 8.2003 7 0.0 0 0.0 0 0.2003 2 11.0 1 0.0 0 3.3431 2 1.0 1 1.9166 8 3.0 1 1.8034 1 7.7997 7 0.0881 1 3.0 1 2.0 1 9.2519 1 6.1917 1 4.0 1 0.0712 6 1.2069 1 6.5851 1 8.7916 1 12.7895 2 1.0 1)
Average genome size in population (length): 108.313
Average program size in population (points): 109.313
Average percent parens in population: 0.009
Minimum age in population: 96.19331325102094
Maximum age in population: 101.3918624961432
Average age in population: 98.90753216804637
Median age in population: 98.94067964879528
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.88
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.88
Total error diversity:				 0.553
Error (vector) diversity:			 0.697
Behavioral diversity:				 0.697
--- Run Statistics ---
Number of program evaluations used so far: 69000
Number of point (instruction) evaluations so far: 98186177
--- Timings ---
Current time: 1529615319799 milliseconds
Total Time:         268.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       105.7 seconds, 39.4%
Fitness Testing:    128.9 seconds, 48.0%
Report:              33.9 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 68
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 69
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 69
;;******************************
;; -*- Number IO problem report - generation 69
Test total error for best: 32196.191400000032
Test mean error for best: 16.09810
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 66.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 39.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -91.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.2002939985 
Correct output: 27.2083659619  | Program output: 10.2083659619 
Correct output: 103.781099078  | Program output: 90.2002939985 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_dec} {:instruction in1} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_pop} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_flush})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_dup_items float_dec float_dec integer_add float_dec in2 in1 float_dup_items 90.20029399850333 float_dec in1 in1 integer_mod float_dec float_yankdup float_dec integer_mod integer_yankdup float_yankdup float_dec in1 integer_mod float_yankdup float_dec in2 90.20029399850333 float_rot float_dec in1 in1 float_dup_items float_dec float_yankdup integer_pop in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_flush in2 float_dec float_dec float_dec float_yankdup integer_shove float_dec float_dup float_dec float_yankdup integer_shove float_dec float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dec float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -9.568963984273623 integer_fromfloat -56.50848481366526 integer_div float_frominteger integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 4.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 6.0 2 52.0 2 55.0 2 6.0 2 4.7997 7 20.0 1 19.5851 10 17.0 2 13.5808 10 15.0 2]
Total: 605.3661999999999
Mean: 12.107324
Genome size: 114
Size: 115
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2585.8094647000003
Median total errors in population: 647.08295
Error averages by case: (89.90030809999998 3.18 102.42769969999863 8.766 77.97324609999998 2.363 86.37704500000007 3.185 89.7135232999994 7.75 102.43373560000003 3.005 102.86168130000006 3.353 103.30261109999859 9.265 98.36817749999996 3.309 134.69625059999996 10.996 76.13550679999999 2.941 117.0014206 3.366 98.0251383000013 8.948 92.76332229999996 2.882 97.23159479999998 4.254 77.70972869999997 2.735 125.31750590000004 3.288 126.36405229999997 3.599 85.4499614 3.218 86.80755050000091 8.158 96.09364289999999 2.762 102.76663859999861 8.49 96.94791769999978 4.096 99.5036096999998 8.428 93.98059589999994 3.32)
Error minima by case: (0.0 0 6.6392 7 0.0 0 0.0 0 0.2003 1 10.0 1 3.0 1 3.3431 2 1.0 1 0.7682 9 3.0 1 4.9229 1 7.7997 7 0.0881 1 1.0 1 2.0 1 4.6681 1 12.114 1 4.0 1 0.2003 6 0.2069 1 4.5851 1 9.7916 1 6.4142 2 0.0 0)
Average genome size in population (length): 109.549
Average program size in population (points): 110.549
Average percent parens in population: 0.009
Minimum age in population: 97.97397415562817
Maximum age in population: 102.7167991913924
Average age in population: 100.1878764270298
Median age in population: 100.2275454472916
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.889
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.889
Total error diversity:				 0.536
Error (vector) diversity:			 0.673
Behavioral diversity:				 0.674
--- Run Statistics ---
Number of program evaluations used so far: 70000
Number of point (instruction) evaluations so far: 100924902
--- Timings ---
Current time: 1529615325262 milliseconds
Total Time:         274.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       107.4 seconds, 39.1%
Fitness Testing:    132.0 seconds, 48.1%
Report:              34.8 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 69
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 70
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 70
;;******************************
;; -*- Number IO problem report - generation 70
Test total error for best: 32196.191400000032
Test mean error for best: 16.09810
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 66.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 39.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -91.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.2002939985 
Correct output: 27.2083659619  | Program output: 10.2083659619 
Correct output: 103.781099078  | Program output: 90.2002939985 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_dec} {:instruction in1} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_pop} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_flush})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_dup_items float_dec float_dec integer_add float_dec in2 in1 float_dup_items 90.20029399850333 float_dec in1 in1 integer_mod float_dec float_yankdup float_dec integer_mod integer_yankdup float_yankdup float_dec in1 integer_mod float_yankdup float_dec in2 90.20029399850333 float_rot float_dec in1 in1 float_dup_items float_dec float_yankdup integer_pop in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_flush in2 float_dec float_dec float_dec float_yankdup integer_shove float_dec float_dup float_dec float_yankdup integer_shove float_dec float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dec float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -9.568963984273623 integer_fromfloat -56.50848481366526 integer_div float_frominteger integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 4.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 6.0 2 52.0 2 55.0 2 6.0 2 4.7997 7 20.0 1 19.5851 10 17.0 2 13.5808 10 15.0 2]
Total: 605.3661999999999
Mean: 12.107324
Genome size: 114
Size: 115
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2552.6808006
Median total errors in population: 641.10015
Error averages by case: (88.85143489999994 3.136 102.64278069999838 8.762 74.94516939999998 2.35 84.06990280000005 3.164 90.01494969999946 7.87 100.61137389999999 2.971 101.94847240000003 3.267 103.17598439999833 9.341 97.27785949999998 3.247 134.80756150000002 11.012 75.68550049999996 3.02 113.91823660000001 3.325 99.48348270000167 8.936 89.952863 2.847 95.63722109999998 4.208 76.46144149999999 2.741 125.68824160000005 3.243 124.15744979999997 3.491 81.4554668 3.116 87.51422300000125 8.183 96.65791200000001 2.734 99.22792749999849 8.64 93.71179759999977 3.992 96.75272539999953 8.553 92.59982229999996 3.282)
Error minima by case: (0.0 0 11.7075 7 0.0 0 0.0 0 0.2003 2 5.0 1 0.0 0 3.3431 2 1.0 1 0.644 6 3.0 1 4.9229 1 6.7997 7 0.0 0 0.0 0 2.0 1 0.7481 1 1.0815 1 4.0 1 0.2003 6 0.2701 1 1.5851 1 12.2084 1 12.5808 2 0.0 0)
Average genome size in population (length): 109.665
Average program size in population (points): 110.665
Average percent parens in population: 0.009
Minimum age in population: 98.97397415562817
Maximum age in population: 104.0899784416335
Average age in population: 101.5968044548457
Median age in population: 101.653738513512
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.869
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.869
Total error diversity:				 0.529
Error (vector) diversity:			 0.649
Behavioral diversity:				 0.649
--- Run Statistics ---
Number of program evaluations used so far: 71000
Number of point (instruction) evaluations so far: 103666527
--- Timings ---
Current time: 1529615330334 milliseconds
Total Time:         279.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       108.9 seconds, 39.0%
Fitness Testing:    134.8 seconds, 48.3%
Report:              35.5 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 70
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 71
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 71
;;******************************
;; -*- Number IO problem report - generation 71
Test total error for best: 33378.58000000004
Test mean error for best: 16.68929
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 66.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 39.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -91.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.2002939985 
Correct output: 27.2083659619  | Program output: 10.2083659619 
Correct output: 103.781099078  | Program output: 90.2002939985 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_frominteger} {:instruction in1} {:instruction float_add} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction integer_mod} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_pop} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_flush})
Best program: (float_dec 90.20029399850333 float_rot float_frominteger in1 float_add integer_dup_items float_dec float_dup_items float_dec float_yankdup float_dec in2 in1 float_dup_items 90.20029399850333 float_rot float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 integer_mod float_dec float_yankdup float_dec integer_mod float_sub float_yankdup float_dec in2 90.20029399850333 float_rot float_dec in1 in1 float_dup_items float_dec float_yankdup integer_pop in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_dec float_dup float_dec float_yankdup integer_shove float_dec float_dec float_dup in2 float_dec float_dec float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dec float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -9.568963984273623 integer_fromfloat -56.50848481366526 integer_div float_frominteger integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 4.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 6.0 2 52.0 2 55.0 2 6.0 2 4.7997 7 20.0 1 19.5851 10 17.0 2 13.5808 10 15.0 2]
Total: 605.3661999999999
Mean: 12.107324
Genome size: 110
Size: 111
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2484.477410400001
Median total errors in population: 650.7003
Error averages by case: (87.30457239999997 3.131 96.62897709999862 8.798 72.2555767 2.292 83.49709230000002 3.151 84.38344659999954 7.856 99.5248092 2.921 101.51050510000006 3.272 96.56097909999863 9.338 95.99127079999998 3.229 132.71071239999995 11.015 74.58836799999999 2.995 111.60498329999994 3.287 92.93887380000135 8.927 87.31096069999997 2.807 94.23392989999998 4.192 74.2703777 2.725 123.58854369999999 3.216 121.73181029999995 3.489 78.09859099999998 3.123 82.81113180000104 8.234 94.47991080000003 2.717 96.84937179999866 8.398 92.15153209999978 3.982 93.59086469999964 8.185 91.32021909999997 3.26)
Error minima by case: (0.0 0 10.2003 7 0.0 0 0.0 0 0.1028 1 10.0 1 2.0 1 12.2003 2 3.0 1 4.9002 8 0.3587 1 9.3421 1 6.7997 7 0.0881 1 1.0 1 2.0 1 8.2519 1 10.0973 1 4.0 1 0.2003 6 0.2069 1 2.5851 1 4.6187 1 13.0412 2 0.0 0)
Average genome size in population (length): 110.953
Average program size in population (points): 111.953
Average percent parens in population: 0.009
Minimum age in population: 100.123473163071
Maximum age in population: 105.0589832183133
Average age in population: 102.908258936347
Median age in population: 102.9339467021504
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 34
Genome diversity (% unique Plush genomes):	 0.869
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.869
Total error diversity:				 0.531
Error (vector) diversity:			 0.647
Behavioral diversity:				 0.648
--- Run Statistics ---
Number of program evaluations used so far: 72000
Number of point (instruction) evaluations so far: 106440352
--- Timings ---
Current time: 1529615335358 milliseconds
Total Time:         284.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       110.5 seconds, 38.8%
Fitness Testing:    137.6 seconds, 48.4%
Report:              36.2 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 71
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 72
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 72
;;******************************
;; -*- Number IO problem report - generation 72
Test total error for best: 33384.58000000004
Test mean error for best: 16.69229
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 66.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 39.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -91.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.2002939985 
Correct output: 27.2083659619  | Program output: 10.2083659619 
Correct output: 103.781099078  | Program output: 90.2002939985 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_frominteger} {:instruction in1} {:instruction float_add} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction integer_yankdup} {:instruction in1} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction integer_mod} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_pop} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_flush})
Best program: (float_dec 90.20029399850333 float_rot float_frominteger in1 float_add integer_dup_items float_dec float_dup_items float_dec float_yankdup float_dec in2 in1 float_dup_items 90.20029399850333 float_rot float_dup_items in1 float_dup_items 90.20029399850333 integer_yankdup in1 in1 integer_mod float_dec float_yankdup float_dec integer_mod float_sub float_yankdup float_dec in2 90.20029399850333 float_rot float_dec in1 in1 float_dup_items float_dec float_yankdup integer_pop in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_dec float_dup float_dec float_yankdup integer_shove float_dec float_dec float_dup in2 float_dec float_dec float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dec float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -9.568963984273623 integer_fromfloat -56.50848481366526 integer_div float_frominteger integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 4.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 6.0 2 52.0 2 55.0 2 6.0 2 4.7997 7 20.0 1 19.5851 10 17.0 2 13.5808 10 15.0 2]
Total: 605.3661999999999
Mean: 12.107324
Genome size: 110
Size: 111
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2669.8133888000007
Median total errors in population: 655.30045
Error averages by case: (95.72671709999996 3.314 103.92116879999838 8.803 80.95151330000002 2.412 91.17300850000007 3.304 92.03948559999975 7.845 106.60619759999999 3.057 107.51580990000002 3.418 103.96946019999828 9.392 102.98357299999998 3.328 140.0733949 11.092 78.94041139999997 3.039 118.93848209999999 3.403 101.71852940000163 8.951 95.7440596 2.918 101.1735058 4.279 78.6421257 2.799 131.90210530000004 3.397 128.2056786 3.615 87.62697729999998 3.236 90.57243140000134 8.284 101.96176799999999 2.896 104.48407889999861 8.068 96.24751189999972 3.921 102.92067169999947 7.962 99.63272279999995 3.409)
Error minima by case: (0.0 0 9.7075 7 0.0 0 0.0 0 0.2003 2 9.0 1 2.0 1 6.3431 2 0.582 1 0.0016 8 3.0 1 0.5931 1 7.7997 7 0.0881 1 1.0 1 2.0 1 2.2519 1 6.2974 1 5.0 1 0.2003 6 1.2069 1 6.5851 1 9.7916 1 11.7434 2 0.0 0)
Average genome size in population (length): 111.919
Average program size in population (points): 112.919
Average percent parens in population: 0.009
Minimum age in population: 101.455438907467
Maximum age in population: 106.3182790605199
Average age in population: 104.2593491875023
Median age in population: 104.3034722426658
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 32
Genome diversity (% unique Plush genomes):	 0.901
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.901
Total error diversity:				 0.548
Error (vector) diversity:			 0.686
Behavioral diversity:				 0.687
--- Run Statistics ---
Number of program evaluations used so far: 73000
Number of point (instruction) evaluations so far: 109238352
--- Timings ---
Current time: 1529615340515 milliseconds
Total Time:         289.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       112.2 seconds, 38.7%
Fitness Testing:    140.4 seconds, 48.5%
Report:              36.9 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 72
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 73
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 73
;;******************************
;; -*- Number IO problem report - generation 73
Test total error for best: 32917.14150000004
Test mean error for best: 16.45857
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 66.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 39.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -91.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.2002939985 
Correct output: 27.2083659619  | Program output: 21.0269740675 
Correct output: 103.781099078  | Program output: 90.2002939985 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_dec} {:instruction in1} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction 21.02697406752263} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_pop} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_flush})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_dup_items float_dec float_dec integer_add float_dec in2 in1 float_dup_items 90.20029399850333 float_dec in1 in1 integer_mod float_dec float_yankdup float_dec integer_mod integer_yankdup float_yankdup float_dec in1 integer_mod float_yankdup float_dec in2 90.20029399850333 float_rot float_dec 21.02697406752263 in1 float_dup_items float_dec float_yankdup integer_pop in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_dec float_dup float_dec float_yankdup integer_shove float_dec float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dec float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -9.568963984273623 integer_fromfloat -56.50848481366526 integer_div float_frominteger integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 4.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 6.0 2 52.0 2 55.0 2 6.0 2 4.7997 7 20.0 1 19.5851 10 6.1814 10 13.5808 10 15.0 2]
Total: 602.5476
Mean: 12.050952
Genome size: 114
Size: 115
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2316.013860999999
Median total errors in population: 653.2003
Error averages by case: (78.17570159999997 3.109 92.39463589999845 8.77 65.5350359 2.261 74.58383710000005 3.134 83.5075336999997 7.761 91.0922823 2.893 91.64006300000001 3.228 92.47210519999841 9.378 86.5593108 3.218 123.4149952 10.982 66.29803399999999 2.839 105.28413369999997 3.271 91.72060000000157 8.898 80.32700919999999 2.779 85.59248900000001 4.141 68.52865169999997 2.702 113.94859910000002 3.2 114.77666839999998 3.499 74.46429449999998 3.092 79.84102250000144 8.249 84.92664369999996 2.675 92.24262739999865 7.93 84.26211539999984 3.927 89.14595500000004 7.923 82.18151669999997 3.239)
Error minima by case: (0.0 0 2.4403 7 0.0 0 0.0 0 0.2003 1 10.0 1 3.0 1 5.3431 2 2.0 1 0.9132 8 2.0 1 8.9229 1 1.3714 7 0.0881 1 1.0 1 2.0 1 0.2807 1 7.3239 1 5.0 1 0.2003 6 0.7931 1 4.5851 1 1.3498 1 6.7811 2 0.0 0)
Average genome size in population (length): 112.659
Average program size in population (points): 113.659
Average percent parens in population: 0.009
Minimum age in population: 102.7730621592056
Maximum age in population: 107.8914786765574
Average age in population: 105.5990651762344
Median age in population: 105.6169028639604
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.891
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.891
Total error diversity:				 0.538
Error (vector) diversity:			 0.662
Behavioral diversity:				 0.663
--- Run Statistics ---
Number of program evaluations used so far: 74000
Number of point (instruction) evaluations so far: 112054827
--- Timings ---
Current time: 1529615345748 milliseconds
Total Time:         294.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       113.7 seconds, 38.6%
Fitness Testing:    143.5 seconds, 48.7%
Report:              37.5 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 73
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 74
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 74
;;******************************
;; -*- Number IO problem report - generation 74
Test total error for best: 32917.14150000004
Test mean error for best: 16.45857
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 66.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 39.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -91.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.2002939985 
Correct output: 27.2083659619  | Program output: 21.0269740675 
Correct output: 103.781099078  | Program output: 90.2002939985 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_dec} {:instruction in1} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction 21.02697406752263} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_pop} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_shove})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_dup_items float_dec float_dec integer_add float_dec in2 in1 float_dup_items 90.20029399850333 float_dec in1 in1 integer_mod float_dec float_yankdup float_dec integer_mod integer_yankdup float_yankdup float_dec in1 integer_mod float_yankdup float_dec in2 90.20029399850333 float_rot float_dec 21.02697406752263 in1 float_dup_items float_dec float_yankdup integer_pop in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_dec float_dup float_dec float_yankdup integer_shove float_dec float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dec float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -9.568963984273623 integer_fromfloat -56.50848481366526 integer_div float_frominteger integer_shove)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 4.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 6.0 2 52.0 2 55.0 2 6.0 2 4.7997 7 20.0 1 19.5851 10 6.1814 10 13.5808 10 15.0 2]
Total: 602.5476
Mean: 12.050952
Genome size: 114
Size: 115
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2407.141691399999
Median total errors in population: 653.2003
Error averages by case: (84.65489860000001 3.353 91.74138049999857 8.693 69.8144956 2.51 80.32851700000003 3.373 81.2735311999996 7.505 97.59758080000002 3.152 99.63138230000006 3.472 93.85567599999858 9.327 91.96397679999997 3.443 127.62591609999997 10.958 70.77948709999998 2.951 108.52032000000003 3.517 92.09889390000139 8.839 84.44513849999997 3.011 91.35874869999998 4.372 73.29007859999997 2.842 118.70143180000005 3.42 117.02274549999996 3.645 76.0715735 3.169 79.3076054000012 8.138 89.7357078 2.892 94.46759099999886 7.895 87.73359419999986 3.821 90.64111239999983 7.912 88.79130809999997 3.479)
Error minima by case: (0.0 0 2.5636 7 0.0 0 0.0 0 0.2003 2 10.0 1 3.8606 1 15.2003 2 1.0 1 1.7396 8 3.0 1 13.2614 1 9.7997 7 0.0167 1 1.0 1 2.0 1 1.2519 1 5.2663 1 5.0 1 0.2003 6 0.2069 1 10.5851 1 6.1814 1 6.8834 2 1.0 1)
Average genome size in population (length): 112.838
Average program size in population (points): 113.838
Average percent parens in population: 0.009
Minimum age in population: 103.7730621592056
Maximum age in population: 108.943330900021
Average age in population: 106.9033791850324
Median age in population: 106.948971981176
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.906
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.906
Total error diversity:				 0.518
Error (vector) diversity:			 0.64
Behavioral diversity:				 0.641
--- Run Statistics ---
Number of program evaluations used so far: 75000
Number of point (instruction) evaluations so far: 114875827
--- Timings ---
Current time: 1529615351097 milliseconds
Total Time:         299.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       115.2 seconds, 38.4%
Fitness Testing:    146.4 seconds, 48.8%
Report:              38.2 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 74
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 75
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 75
;;******************************
;; -*- Number IO problem report - generation 75
Test total error for best: 32917.14150000004
Test mean error for best: 16.45857
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 66.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 39.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -91.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.2002939985 
Correct output: 27.2083659619  | Program output: 21.0269740675 
Correct output: 103.781099078  | Program output: 90.2002939985 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_dec} {:instruction in1} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction 21.02697406752263} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_pop} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_flush})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_dup_items float_dec float_dec integer_add float_dec in2 in1 float_dup_items 90.20029399850333 float_dec in1 in1 integer_mod float_dec float_yankdup float_dec integer_mod integer_yankdup float_yankdup float_dec in1 integer_mod float_yankdup float_dec in2 90.20029399850333 float_rot float_dec 21.02697406752263 in1 float_dup_items float_dec float_yankdup integer_pop in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_dec float_dup float_dec float_yankdup integer_shove float_dec float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dec float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -9.568963984273623 integer_fromfloat -56.50848481366526 integer_div float_frominteger integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 4.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 6.0 2 52.0 2 55.0 2 6.0 2 4.7997 7 20.0 1 19.5851 10 6.1814 10 13.5808 10 15.0 2]
Total: 602.5476
Mean: 12.050952
Genome size: 114
Size: 115
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2416.6817210000013
Median total errors in population: 652.2003
Error averages by case: (85.97430229999996 3.287 93.69697499999846 8.704 68.89014989999998 2.335 81.40475340000003 3.272 82.15464049999946 7.487 97.14799079999999 3.003 100.88403500000005 3.375 93.38776219999845 9.535 93.4170754 3.322 130.64944659999995 10.973 71.36813419999999 2.913 108.27735820000002 3.403 92.02244580000152 8.948 83.82427009999999 2.876 91.9598311 4.262 74.05715009999997 2.738 122.5271099 3.332 117.56304669999994 3.529 75.3335665 3.12 79.78289400000132 8.203 92.01599119999999 2.801 93.37460179999871 7.682 85.01081769999986 3.921 87.82126099999999 7.803 89.93411159999998 3.378)
Error minima by case: (0.0 0 9.2003 7 0.0 0 0.0 0 0.2003 1 12.0 1 2.0 1 3.3431 2 1.0 1 1.8841 8 3.0 1 1.3828 1 5.7997 7 0.0598 1 3.0 1 2.0 1 8.702 1 6.6122 1 5.0 1 0.2003 6 0.9952 1 5.5851 1 4.3517 1 12.5808 2 0.0 0)
Average genome size in population (length): 113.171
Average program size in population (points): 114.171
Average percent parens in population: 0.009
Minimum age in population: 105.5600667481132
Maximum age in population: 110.5124646611906
Average age in population: 108.2824521212295
Median age in population: 108.348329753774
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.899
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.899
Total error diversity:				 0.539
Error (vector) diversity:			 0.654
Behavioral diversity:				 0.654
--- Run Statistics ---
Number of program evaluations used so far: 76000
Number of point (instruction) evaluations so far: 117705127
--- Timings ---
Current time: 1529615356173 milliseconds
Total Time:         305.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       116.8 seconds, 38.3%
Fitness Testing:    149.2 seconds, 48.9%
Report:              39.1 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 75
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 76
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 76
;;******************************
;; -*- Number IO problem report - generation 76
Test total error for best: 31834.51930000004
Test mean error for best: 15.91726
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 39.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 152.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 82.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 45.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -90.5891975931
Correct output: 26.7802144548  | Program output: 23.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.2002939985 
Correct output: 27.2083659619  | Program output: 10.2083659619 
Correct output: 103.781099078  | Program output: 90.2002939985 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction integer_pop} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_flush})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 integer_mod float_dec float_yankdup float_dec integer_mod integer_yankdup float_yankdup float_dec in2 90.20029399850333 float_rot float_dec in1 in1 float_dup_items integer_yankdup float_yankdup integer_pop in2 in1 float_dup_items float_dec float_yankdup float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -9.568963984273623 integer_fromfloat -56.50848481366526 integer_div float_frominteger integer_flush)
Errors: [11.0 2 24.2003 8 0.0 0 4.0 2 2.2003 7 20.0 1 27.0 2 26.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 16.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 5.0 2 2.7997 7 20.0 1 19.5851 10 17.0 2 13.5808 10 15.0 2]
Total: 602.3661999999999
Mean: 12.047324
Genome size: 115
Size: 116
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2644.404420500001
Median total errors in population: 648.7290499999999
Error averages by case: (96.78218129999996 3.35 100.02362899999832 8.726 78.26984389999997 2.471 93.08444060000008 3.391 88.25790299999909 7.412 108.9402009 3.122 110.36864210000003 3.483 100.58270819999836 9.536 104.51466859999994 3.436 140.38716359999998 11.034 77.41297769999998 2.908 116.97688009999996 3.472 98.36527150000161 8.984 93.12506690000002 3.002 104.17079839999991 4.348 77.5848393 2.791 131.22961720000004 3.445 127.46206039999998 3.573 84.3027992 3.227 86.76511840000161 8.191 102.27173079999999 2.925 102.7526509999986 7.998 95.6503321999998 3.968 98.10940379999988 7.98 100.74349239999998 3.497)
Error minima by case: (0.0 0 4.2738 7 0.0 0 0.0 0 0.2003 1 11.0 1 4.0 1 6.6542 2 2.0 1 0.0016 8 3.0 1 8.9229 1 0.7399 7 0.0 0 0.0 0 2.0 1 1.1141 1 7.3239 1 5.0 1 0.2003 6 0.2069 1 8.5851 1 6.1814 1 9.1087 2 1.0 1)
Average genome size in population (length): 113.474
Average program size in population (points): 114.474
Average percent parens in population: 0.009
Minimum age in population: 107.2122162911764
Maximum age in population: 111.6950680307407
Average age in population: 109.6542364910388
Median age in population: 109.7011307641377
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.914
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.914
Total error diversity:				 0.508
Error (vector) diversity:			 0.65
Behavioral diversity:				 0.65
--- Run Statistics ---
Number of program evaluations used so far: 77000
Number of point (instruction) evaluations so far: 120541977
--- Timings ---
Current time: 1529615361514 milliseconds
Total Time:         310.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       118.6 seconds, 38.2%
Fitness Testing:    152.1 seconds, 49.0%
Report:              39.8 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 76
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 77
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 77
;;******************************
;; -*- Number IO problem report - generation 77
Test total error for best: 31834.51930000004
Test mean error for best: 15.91726
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 39.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 152.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 82.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 45.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -90.5891975931
Correct output: 26.7802144548  | Program output: 23.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.2002939985 
Correct output: 27.2083659619  | Program output: 10.2083659619 
Correct output: 103.781099078  | Program output: 90.2002939985 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction integer_pop} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_flush})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 integer_mod float_dec float_yankdup float_dec integer_mod integer_yankdup float_yankdup float_dec in2 90.20029399850333 float_rot float_dec in1 in1 float_dup_items integer_yankdup float_yankdup integer_pop in2 in1 float_dup_items float_dec float_yankdup float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -9.568963984273623 integer_fromfloat -56.50848481366526 integer_div float_frominteger integer_flush)
Errors: [11.0 2 24.2003 8 0.0 0 4.0 2 2.2003 7 20.0 1 27.0 2 26.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 16.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 5.0 2 2.7997 7 20.0 1 19.5851 10 17.0 2 13.5808 10 15.0 2]
Total: 602.3661999999999
Mean: 12.047324
Genome size: 115
Size: 116
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2501.6660423000008
Median total errors in population: 648.2003
Error averages by case: (86.76022989999997 3.216 99.18021829999829 8.694 74.5068615 2.275 82.21850850000004 3.219 87.08438479999917 7.347 98.01479330000002 2.927 98.73991710000007 3.348 99.13214289999827 9.459 94.34576489999996 3.255 130.8014972 10.951 73.17827350000002 2.935 113.5895357 3.371 97.05310200000166 8.937 89.72304889999997 2.807 92.96271909999999 4.175 74.22838459999997 2.807 121.84485380000005 3.32 123.68640659999998 3.47 82.2876603 3.169 85.53686760000154 8.162 93.10530860000001 2.776 99.77975449999846 8.092 92.39553429999987 4.301 96.16242379999979 8.173 90.80285059999994 3.359)
Error minima by case: (0.0 0 13.0922 7 0.0 0 0.0 0 0.0748 2 9.0 1 1.0 1 3.3431 2 3.0 1 0.2318 8 2.0 1 5.9229 1 4.894 7 0.0413 1 1.0 1 2.0 1 6.2519 1 11.1363 1 0.8005 1 0.2003 6 0.4907 1 3.5851 1 6.1814 1 12.5808 2 0.0 0)
Average genome size in population (length): 113.666
Average program size in population (points): 114.666
Average percent parens in population: 0.009
Minimum age in population: 108.4904205085011
Maximum age in population: 113.1933870385597
Average age in population: 110.9586120199907
Median age in population: 111.0010684214003
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.916
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.916
Total error diversity:				 0.517
Error (vector) diversity:			 0.632
Behavioral diversity:				 0.634
--- Run Statistics ---
Number of program evaluations used so far: 78000
Number of point (instruction) evaluations so far: 123383627
--- Timings ---
Current time: 1529615366685 milliseconds
Total Time:         315.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       120.0 seconds, 38.0%
Fitness Testing:    155.2 seconds, 49.2%
Report:              40.4 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 77
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 78
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 78
;;******************************
;; -*- Number IO problem report - generation 78
Test total error for best: 32911.42880000004
Test mean error for best: 16.45571
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 66.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 39.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -91.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.8642318398 
Correct output: 27.2083659619  | Program output: 21.0269740675 
Correct output: 103.781099078  | Program output: 90.8642318398 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_dec} {:instruction in1} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction 90.86423183975475} {:instruction float_rot} {:instruction float_dec} {:instruction 21.02697406752263} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_pop} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction float_frominteger})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_rot float_dec float_dec integer_add float_dec in2 in1 float_dup_items 90.20029399850333 float_dec in1 in1 integer_mod float_dec float_yankdup float_dec integer_mod integer_yankdup float_yankdup float_dec in1 integer_mod float_yankdup float_dec in2 90.86423183975475 float_rot float_dec 21.02697406752263 in1 float_dup_items float_dec float_yankdup integer_pop in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_dec float_dup float_dec float_yankdup integer_shove float_dec float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dec float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -9.568963984273623 integer_fromfloat -56.50848481366526 integer_div float_frominteger)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 4.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 6.0 2 52.0 2 55.0 2 6.0 2 4.7997 7 20.0 1 20.249 8 6.1814 10 12.9169 11 15.0 2]
Total: 601.5476000000001
Mean: 12.030952
Genome size: 113
Size: 114
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2447.5861958000014
Median total errors in population: 651.2408999999999
Error averages by case: (85.2883069 3.28 95.42609499999844 8.699 71.53070210000003 2.372 81.0522608000001 3.296 83.73678309999913 7.409 97.09903540000003 3.025 98.72800540000004 3.427 96.72978929999843 9.446 92.79832589999998 3.366 129.82861949999992 10.94 72.1194852 2.985 110.24425420000001 3.418 93.90707650000152 8.995 86.5199156 2.918 92.03078599999995 4.319 72.53023169999999 2.893 121.79100780000007 3.372 119.61131430000007 3.507 80.74427880000002 3.359 82.17247320000129 8.195 91.28069249999996 2.844 96.38377889999869 8.028 86.90966609999997 4.909 93.2996798999999 8.075 89.33563169999995 3.411)
Error minima by case: (1.0 1 5.9347 7 0.0 0 0.0 0 0.2003 1 8.0 1 0.0 0 3.3431 2 0.0 0 7.3376 8 2.0 1 4.9229 1 7.7997 7 0.0881 1 0.7263 1 2.0 1 0.8018 1 22.0896 1 5.0 1 0.2003 6 0.2069 1 6.5851 1 6.1814 1 12.8311 2 1.0 1)
Average genome size in population (length): 112.984
Average program size in population (points): 113.984
Average percent parens in population: 0.009
Minimum age in population: 110.193349116195
Maximum age in population: 114.4824018655823
Average age in population: 112.3995002074556
Median age in population: 112.4257669912303
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.915
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.915
Total error diversity:				 0.531
Error (vector) diversity:			 0.628
Behavioral diversity:				 0.629
--- Run Statistics ---
Number of program evaluations used so far: 79000
Number of point (instruction) evaluations so far: 126208227
--- Timings ---
Current time: 1529615371907 milliseconds
Total Time:         321.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       121.6 seconds, 37.9%
Fitness Testing:    158.2 seconds, 49.3%
Report:              41.1 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 78
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 79
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 79
;;******************************
;; -*- Number IO problem report - generation 79
Test total error for best: 32939.68590000003
Test mean error for best: 16.46984
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 66.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 39.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -91.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.2002939985 
Correct output: 27.2083659619  | Program output: 22.3389232162 
Correct output: 103.781099078  | Program output: 90.2002939985 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction float_yankdup} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_dec} {:instruction in1} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_dec} {:instruction in1} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction 22.338923216214678} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_pop} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction 15.00382779222089} {:instruction float_frominteger} {:instruction integer_flush})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_dup_items float_dec float_dec integer_add float_dec in2 in1 float_dup_items 90.20029399850333 float_dec in1 float_yankdup float_dec integer_mod integer_yankdup float_yankdup float_dec in1 integer_mod integer_yankdup float_dec integer_mod integer_dup_items float_yankdup float_dec in1 integer_mod float_yankdup float_dec in2 90.20029399850333 float_rot float_dec 22.338923216214678 in1 float_dup_items float_dec float_yankdup integer_pop in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_dec float_dup float_dec float_yankdup integer_shove float_dec float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dec float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -9.568963984273623 integer_fromfloat -56.50848481366526 15.00382779222089 float_frominteger integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 4.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 6.0 2 52.0 2 55.0 2 6.0 2 4.7997 7 20.0 1 19.5851 10 4.8694 10 13.5808 10 15.0 2]
Total: 601.2356
Mean: 12.024712
Genome size: 118
Size: 119
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2483.0090212000014
Median total errors in population: 652.6008999999999
Error averages by case: (88.82355649999997 3.394 95.07823449999852 8.747 72.38785409999998 2.408 85.43164020000003 3.384 83.63782509999909 7.459 101.5831715 3.079 103.56200390000008 3.506 95.58199899999846 9.454 96.5999744 3.427 132.71256470000003 10.989 72.09044990000001 3.046 111.20599289999996 3.431 92.61419190000143 8.995 86.84497949999997 2.953 95.60222779999998 4.37 74.36003869999999 2.872 123.51811500000007 3.481 119.89911349999997 3.678 79.79604959999999 3.416 80.86140280000133 8.184 94.8314543 2.898 95.88888899999876 8.055 85.55466400000006 5.522 93.16282479999985 8.259 92.87180359999996 3.501)
Error minima by case: (0.0 0 1.0653 7 0.0 0 0.0 0 0.2003 1 9.0 1 2.0 1 3.3431 2 2.0 1 0.0998 8 3.0 1 4.9229 1 7.7997 7 0.0 1 0.6658 1 2.0 1 0.2519 1 21.4195 1 5.0 1 0.2003 6 0.2085 1 0.2795 1 4.8694 1 11.8964 2 2.0 1)
Average genome size in population (length): 112.325
Average program size in population (points): 113.325
Average percent parens in population: 0.009
Minimum age in population: 111.5201650850876
Maximum age in population: 115.9397219299611
Average age in population: 113.8034984024162
Median age in population: 113.8473284260799
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.893
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.893
Total error diversity:				 0.552
Error (vector) diversity:			 0.646
Behavioral diversity:				 0.646
--- Run Statistics ---
Number of program evaluations used so far: 80000
Number of point (instruction) evaluations so far: 129016352
--- Timings ---
Current time: 1529615376994 milliseconds
Total Time:         326.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       123.1 seconds, 37.8%
Fitness Testing:    161.1 seconds, 49.4%
Report:              41.8 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 79
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 80
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 80
;;******************************
;; -*- Number IO problem report - generation 80
Test total error for best: 34846.602700000025
Test mean error for best: 17.42330
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 66.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 39.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -89.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.2002939985 
Correct output: 27.2083659619  | Program output: 21.0269740675 
Correct output: 103.781099078  | Program output: 90.2002939985 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction -91.78783078612429} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_dec} {:instruction in1} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction 21.02697406752263} {:instruction in1} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_pop} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction integer_yank} {:instruction integer_flush})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_dup_items float_dec float_dec integer_add float_dec in2 in1 float_dup_items 90.20029399850333 float_dec in1 -91.78783078612429 integer_mod float_yankdup float_yankdup float_dec integer_mod integer_yankdup float_yankdup float_dec in1 integer_mod float_yankdup float_dec in2 90.20029399850333 float_rot float_dec 21.02697406752263 in1 float_dup_items float_inc float_yankdup integer_pop in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_dec float_dup float_dec float_yankdup integer_shove float_dec float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dec float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -9.568963984273623 integer_fromfloat -56.50848481366526 integer_div integer_yank integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 4.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 6.0 2 52.0 2 55.0 2 4.0 1 4.7997 7 20.0 1 19.5851 10 6.1814 10 13.5808 10 15.0 2]
Total: 599.5476
Mean: 11.990952
Genome size: 113
Size: 114
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2236.0413166000017
Median total errors in population: 638.28325
Error averages by case: (78.64337139999998 3.102 85.9203707999986 8.617 63.99099979999998 2.117 73.85397760000004 3.116 72.85916319999914 7.207 90.07002170000001 2.809 91.33524560000008 3.217 86.34170809999856 9.49 87.01128649999998 3.191 124.20975550000001 10.898 61.900581899999985 2.873 102.61382429999999 3.232 84.56931030000136 8.88 79.54704639999997 2.718 85.48222849999998 4.142 62.16796200000001 2.723 115.06307310000004 3.179 111.05759230000001 3.293 73.45573589999992 3.473 71.62810120000125 8.059 83.71774749999999 2.619 85.15749339999878 7.999 74.48602860000025 6.249 83.70430880000015 8.266 82.57238219999996 3.213)
Error minima by case: (0.0 0 5.9347 7 0.0 0 0.0 0 0.1962 1 9.0 1 1.0 1 3.3431 2 0.7974 1 0.2318 8 2.0 1 4.9229 1 8.7997 7 0.0 0 1.0 1 2.0 1 9.2249 1 7.6768 1 4.0 1 0.2003 6 1.18 1 6.5851 1 5.1814 1 12.5808 2 0.0 0)
Average genome size in population (length): 112.615
Average program size in population (points): 113.615
Average percent parens in population: 0.009
Minimum age in population: 113.0401751479595
Maximum age in population: 117.0456726344993
Average age in population: 115.2041425389283
Median age in population: 115.2623839774536
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.875
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.875
Total error diversity:				 0.518
Error (vector) diversity:			 0.606
Behavioral diversity:				 0.607
--- Run Statistics ---
Number of program evaluations used so far: 81000
Number of point (instruction) evaluations so far: 131831752
--- Timings ---
Current time: 1529615382365 milliseconds
Total Time:         331.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       124.8 seconds, 37.7%
Fitness Testing:    164.0 seconds, 49.5%
Report:              42.5 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 80
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 81
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 81
;;******************************
;; -*- Number IO problem report - generation 81
Test total error for best: 31803.519300000044
Test mean error for best: 15.90176
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 39.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 152.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 82.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 45.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -89.5891975931
Correct output: 26.7802144548  | Program output: 23.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.2002939985 
Correct output: 27.2083659619  | Program output: 10.2083659619 
Correct output: 103.781099078  | Program output: 90.2002939985 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction integer_mult} {:instruction in2} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_flush})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 integer_mod float_dec float_yankdup float_dec integer_mod integer_yankdup float_yankdup integer_mult in2 90.20029399850333 float_rot float_dec in1 in1 float_dup_items integer_yankdup float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -9.568963984273623 integer_fromfloat -56.50848481366526 integer_div float_frominteger integer_flush)
Errors: [11.0 2 24.2003 8 0.0 0 4.0 2 2.2003 7 20.0 1 27.0 2 26.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 16.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 4.0 1 2.7997 7 20.0 1 19.5851 10 17.0 2 13.5808 10 15.0 2]
Total: 600.3661999999999
Mean: 12.007324
Genome size: 115
Size: 116
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2290.4137120000014
Median total errors in population: 649.9912999999999
Error averages by case: (80.27804769999997 3.276 87.69287399999843 8.667 65.15882199999999 2.184 75.81575640000004 3.292 76.81339819999907 7.333 91.59133710000003 2.885 94.35537010000004 3.365 88.45064419999841 9.423 87.47022009999995 3.251 124.4528466 10.922 65.18536849999998 2.965 104.55080930000003 3.304 86.06337660000156 8.893 80.53902549999997 2.754 86.26610999999997 4.199 65.0928938 2.791 116.17416200000001 3.355 114.00109489999996 3.551 75.70156439999994 3.619 74.00024460000128 8.091 85.9852712 2.771 89.21559829999873 7.989 76.97536030000028 6.913 86.69085159999995 8.307 84.40266459999997 3.39)
Error minima by case: (0.0 0 2.0653 7 0.0 0 0.0 0 0.1962 2 11.0 1 2.0 1 13.3431 2 3.0 1 0.0868 7 3.0 1 6.339 1 7.7997 7 0.0167 1 1.0 1 2.0 1 4.9904 1 3.415 1 4.0 1 0.2003 6 0.2069 1 2.5851 1 5.1281 1 12.1995 2 1.0 1)
Average genome size in population (length): 113.222
Average program size in population (points): 114.222
Average percent parens in population: 0.009
Minimum age in population: 114.0401751479595
Maximum age in population: 118.8747513856122
Average age in population: 116.5658000278361
Median age in population: 116.5938775540075
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.875
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.875
Total error diversity:				 0.529
Error (vector) diversity:			 0.616
Behavioral diversity:				 0.617
--- Run Statistics ---
Number of program evaluations used so far: 82000
Number of point (instruction) evaluations so far: 134662302
--- Timings ---
Current time: 1529615387571 milliseconds
Total Time:         336.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       126.4 seconds, 37.5%
Fitness Testing:    167.0 seconds, 49.6%
Report:              43.1 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 81
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 82
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 82
;;******************************
;; -*- Number IO problem report - generation 82
Test total error for best: 31803.519300000044
Test mean error for best: 15.90176
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 39.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 152.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 82.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 45.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -89.5891975931
Correct output: 26.7802144548  | Program output: 23.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.2002939985 
Correct output: 27.2083659619  | Program output: 10.2083659619 
Correct output: 103.781099078  | Program output: 90.2002939985 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction integer_mult} {:instruction in2} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_flush})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 integer_mod float_dec float_yankdup float_dec integer_mod integer_yankdup float_yankdup integer_mult in2 90.20029399850333 float_rot float_dec in1 in1 float_dup_items integer_yankdup float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -9.568963984273623 integer_fromfloat -56.50848481366526 integer_div float_frominteger integer_flush)
Errors: [11.0 2 24.2003 8 0.0 0 4.0 2 2.2003 7 20.0 1 27.0 2 26.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 16.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 4.0 1 2.7997 7 20.0 1 19.5851 10 17.0 2 13.5808 10 15.0 2]
Total: 600.3661999999999
Mean: 12.007324
Genome size: 115
Size: 116
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2455.125326300001
Median total errors in population: 661.0
Error averages by case: (87.67043539999999 3.426 95.85570279999834 8.801 72.13324759999999 2.434 82.6363056000001 3.449 84.91368049999896 7.499 99.30448409999998 3.114 100.13810820000002 3.532 97.10399569999832 9.49 94.0384013 3.443 130.926893 10.983 70.10084269999996 3.101 110.89640040000002 3.506 93.31913810000164 9.018 86.83068109999998 2.985 93.28282719999997 4.378 68.94524809999997 2.842 121.47783910000008 3.502 120.17140649999996 3.647 81.52405880000002 3.716 81.46820250000147 8.231 91.95859960000003 2.929 94.11838649999858 8.13 81.34583880000022 7.165 92.03097359999975 8.413 91.66162909999993 3.538)
Error minima by case: (0.0 0 5.9347 7 0.0 0 0.0 0 0.1218 2 11.0 1 1.0 1 3.3431 2 0.0 0 1.1157 8 3.0 1 4.9229 1 10.7997 7 0.0881 1 0.8007 1 2.0 1 0.4369 1 14.3316 1 4.0 1 0.2003 6 0.1619 1 5.5851 1 5.9026 1 12.4114 2 0.0 0)
Average genome size in population (length): 113.519
Average program size in population (points): 114.519
Average percent parens in population: 0.009
Minimum age in population: 115.0401751479595
Maximum age in population: 119.9991060959421
Average age in population: 117.8904430910528
Median age in population: 117.9377509913524
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.908
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.908
Total error diversity:				 0.553
Error (vector) diversity:			 0.648
Behavioral diversity:				 0.648
--- Run Statistics ---
Number of program evaluations used so far: 83000
Number of point (instruction) evaluations so far: 137500277
--- Timings ---
Current time: 1529615393231 milliseconds
Total Time:         342.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       128.0 seconds, 37.4%
Fitness Testing:    170.1 seconds, 49.7%
Report:              43.8 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 82
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 83
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 83
;;******************************
;; -*- Number IO problem report - generation 83
Test total error for best: 31803.519300000044
Test mean error for best: 15.90176
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 39.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 152.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 82.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 45.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -89.5891975931
Correct output: 26.7802144548  | Program output: 23.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.2002939985 
Correct output: 27.2083659619  | Program output: 10.2083659619 
Correct output: 103.781099078  | Program output: 90.2002939985 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction integer_mult} {:instruction in2} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_flush})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 integer_mod float_dec float_yankdup float_dec integer_mod integer_yankdup float_yankdup integer_mult in2 90.20029399850333 float_rot float_dec in1 in1 float_dup_items integer_yankdup float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -9.568963984273623 integer_fromfloat -56.50848481366526 integer_div float_frominteger integer_flush)
Errors: [11.0 2 24.2003 8 0.0 0 4.0 2 2.2003 7 20.0 1 27.0 2 26.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 16.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 4.0 1 2.7997 7 20.0 1 19.5851 10 17.0 2 13.5808 10 15.0 2]
Total: 600.3661999999999
Mean: 12.007324
Genome size: 115
Size: 116
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2404.526330500001
Median total errors in population: 654.7904
Error averages by case: (82.96327629999995 3.3 92.04597149999839 8.723 70.7692266 2.37 78.7270303000001 3.315 81.60834429999895 7.311 96.90939680000001 2.999 96.53376910000001 3.437 92.99428359999835 9.449 92.03064569999995 3.337 127.21547830000002 10.947 70.96639179999995 3.088 110.17358890000001 3.393 90.23394550000161 8.962 85.57636419999996 2.88 91.34056659999996 4.285 69.05251629999997 2.751 117.86835870000007 3.42 120.08775309999996 3.603 84.2476397999999 3.697 78.08668760000151 8.098 89.01744289999995 2.849 94.36444669999862 7.946 83.52456010000023 6.961 92.48450529999958 8.111 87.03014049999993 3.442)
Error minima by case: (0.0 0 3.9347 7 0.0 0 0.0 0 0.2003 1 7.0 1 4.0 1 6.3431 2 1.0 1 4.9002 8 3.0 1 2.2032 1 10.7997 7 0.0 0 0.973 1 1.0 1 5.0455 1 5.7918 1 4.0 1 0.2003 6 0.1413 1 7.5851 1 6.1814 1 12.9169 2 0.0 0)
Average genome size in population (length): 113.366
Average program size in population (points): 114.366
Average percent parens in population: 0.009
Minimum age in population: 116.6542798188326
Maximum age in population: 121.2867602457105
Average age in population: 119.2224622380609
Median age in population: 119.2393190567537
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.891
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.891
Total error diversity:				 0.556
Error (vector) diversity:			 0.643
Behavioral diversity:				 0.644
--- Run Statistics ---
Number of program evaluations used so far: 84000
Number of point (instruction) evaluations so far: 140334452
--- Timings ---
Current time: 1529615398417 milliseconds
Total Time:         347.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       129.5 seconds, 37.3%
Fitness Testing:    173.1 seconds, 49.8%
Report:              44.7 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 83
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 84
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 84
;;******************************
;; -*- Number IO problem report - generation 84
Test total error for best: 32239.062800000043
Test mean error for best: 16.11953
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 36.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 149.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 79.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 42.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -90.5891975931
Correct output: 26.7802144548  | Program output: 20.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.2002939985 
Correct output: 27.2083659619  | Program output: 21.0269740675 
Correct output: 103.781099078  | Program output: 90.2002939985 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_dec} {:instruction in2} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction 21.02697406752263} {:instruction in1} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction integer_pop} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_flush})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_dup_items float_dup_items float_dec float_dec integer_add float_add float_dup_items float_dec float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 float_dec in2 90.20029399850333 float_rot float_dec 21.02697406752263 in1 float_dup_items float_dup_items integer_yankdup float_yankdup integer_pop in2 in1 float_dup_items float_dec float_yankdup float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -9.568963984273623 integer_fromfloat -56.50848481366526 integer_div float_frominteger integer_flush)
Errors: [11.0 2 21.2003 8 0.0 0 4.0 2 0.7997 8 20.0 1 27.0 2 23.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 19.7997 7 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 5.0 2 5.7997 7 20.0 1 19.5851 10 6.1814 10 13.5808 10 15.0 2]
Total: 598.1469999999999
Mean: 11.96294
Genome size: 117
Size: 118
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2697.7643474
Median total errors in population: 666.7997
Error averages by case: (96.84771379999998 3.403 105.20727249999834 8.838 79.51434179999998 2.464 93.29824030000009 3.416 93.4152854999989 7.466 109.45637559999999 3.148 110.32618720000009 3.535 106.12884149999829 9.548 104.96716649999996 3.475 141.0064131 11.053 80.19679879999998 3.287 118.06732509999995 3.571 102.94552260000161 9.136 94.1605738 2.993 103.02107919999997 4.401 78.82295819999996 2.855 132.08192570000008 3.487 128.08227609999992 3.823 93.71788619999997 3.919 90.62869800000156 8.279 103.17327679999998 2.938 104.62247689999859 8.039 92.59936240000017 6.969 102.02777949999954 8.321 101.5645703 3.52)
Error minima by case: (0.0 0 2.0653 7 0.0 0 0.0 0 0.2003 2 10.0 1 1.0 1 6.3431 2 1.3058 1 1.2318 8 3.0 1 0.6857 1 10.7997 7 0.0881 1 0.0 0 2.0 1 8.2956 1 4.6804 1 4.0 1 0.2003 6 1.2069 1 9.5851 1 6.1814 1 12.9169 2 0.0 0)
Average genome size in population (length): 113.798
Average program size in population (points): 114.798
Average percent parens in population: 0.009
Minimum age in population: 118.2020410899925
Maximum age in population: 122.6428578405521
Average age in population: 120.6147170303878
Median age in population: 120.6879895695529
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.888
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.888
Total error diversity:				 0.579
Error (vector) diversity:			 0.656
Behavioral diversity:				 0.656
--- Run Statistics ---
Number of program evaluations used so far: 85000
Number of point (instruction) evaluations so far: 143179427
--- Timings ---
Current time: 1529615403454 milliseconds
Total Time:         352.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       131.0 seconds, 37.2%
Fitness Testing:    176.0 seconds, 49.9%
Report:              45.4 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 84
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 85
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 85
;;******************************
;; -*- Number IO problem report - generation 85
Test total error for best: 32239.062800000043
Test mean error for best: 16.11953
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 36.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 149.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 79.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 42.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -90.5891975931
Correct output: 26.7802144548  | Program output: 20.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.2002939985 
Correct output: 27.2083659619  | Program output: 21.0269740675 
Correct output: 103.781099078  | Program output: 90.2002939985 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_dec} {:instruction in2} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction 21.02697406752263} {:instruction in1} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction integer_pop} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_flush})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_dup_items float_dec float_dec float_dec float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 float_dec in2 90.20029399850333 float_rot float_dec 21.02697406752263 in1 float_dup_items float_dup_items integer_yankdup float_yankdup integer_pop in2 in1 float_dup_items float_dec float_yankdup float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -9.568963984273623 integer_fromfloat -56.50848481366526 integer_div float_frominteger integer_flush)
Errors: [11.0 2 21.2003 8 0.0 0 4.0 2 0.7997 8 20.0 1 27.0 2 23.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 19.7997 7 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 5.0 2 5.7997 7 20.0 1 19.5851 10 6.1814 10 13.5808 10 15.0 2]
Total: 598.1469999999999
Mean: 11.96294
Genome size: 113
Size: 114
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2858.172984000001
Median total errors in population: 657.2003
Error averages by case: (102.81451069999997 3.383 113.84025039999841 8.867 87.24766650000001 2.433 98.41909050000005 3.429 103.02607289999897 7.57 113.68869540000003 3.099 115.10931460000006 3.528 112.76290699999838 9.54 109.72090100000001 3.431 145.6045245 11.064 85.77289769999999 3.259 125.3947691 3.508 112.0380823000016 9.166 102.17739009999997 2.968 108.51420510000001 4.379 85.90162669999997 2.856 136.93056730000006 3.484 133.86151840000002 3.68 97.88424030000006 3.743 99.63258910000151 8.325 107.79247229999999 2.934 110.51062529999862 8.129 101.76698620000012 6.911 109.32497069999975 8.434 106.80310989999998 3.513)
Error minima by case: (0.0 0 1.9347 6 0.0 0 0.0 0 0.2003 2 8.0 1 0.0 0 3.3431 2 1.3058 1 0.9132 8 2.0 1 4.9229 1 10.7997 7 0.0 0 2.0 1 2.0 1 4.2519 1 2.9808 1 4.0 1 0.2003 6 0.5093 1 6.5851 1 4.8046 1 12.7025 2 0.0 0)
Average genome size in population (length): 114.05
Average program size in population (points): 115.05
Average percent parens in population: 0.009
Minimum age in population: 119.2384724750484
Maximum age in population: 124.0255587194091
Average age in population: 121.9413624295419
Median age in population: 121.9493395513026
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.89
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.89
Total error diversity:				 0.575
Error (vector) diversity:			 0.656
Behavioral diversity:				 0.657
--- Run Statistics ---
Number of program evaluations used so far: 86000
Number of point (instruction) evaluations so far: 146030877
--- Timings ---
Current time: 1529615408756 milliseconds
Total Time:         357.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       132.6 seconds, 37.1%
Fitness Testing:    179.0 seconds, 50.0%
Report:              46.1 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 85
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 86
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 86
;;******************************
;; -*- Number IO problem report - generation 86
Test total error for best: 31692.715100000038
Test mean error for best: 15.84636
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -89.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.2002939985 
Correct output: 27.2083659619  | Program output: 10.2083659619 
Correct output: 103.781099078  | Program output: 90.2002939985 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction integer_mult} {:instruction in2} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_flush})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 integer_mod float_dec float_yankdup float_dec integer_mod integer_mod integer_yankdup float_yankdup integer_mult in2 90.20029399850333 float_rot float_dec in1 in1 float_dup_items integer_yankdup float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -9.568963984273623 integer_fromfloat -56.50848481366526 integer_div float_frominteger integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 4.0 1 4.7997 7 20.0 1 19.5851 10 17.0 2 13.5808 10 15.0 2]
Total: 597.3661999999999
Mean: 11.947324
Genome size: 113
Size: 114
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2400.266039900002
Median total errors in population: 656.5
Error averages by case: (83.51599439999997 3.277 94.49261749999839 8.727 70.07296559999997 2.372 80.13193990000005 3.339 82.26686479999888 7.323 97.0106926 3.019 97.67499810000002 3.435 94.10471669999836 9.432 91.7119722 3.362 126.35042649999998 10.934 70.79374989999998 3.064 108.6159744000001 3.422 92.22481010000165 8.986 84.92069060000003 2.899 91.20478569999999 4.267 70.2115951 2.668 117.51535850000008 3.375 116.57177280000003 3.582 79.64528069999994 3.352 80.42085420000151 8.151 87.88559659999999 2.84 94.26960719999859 7.843 81.2225351000002 6.379 92.24243909999984 8.051 87.65680159999995 3.432)
Error minima by case: (0.0 0 0.0653 7 0.0 0 0.0 0 0.2003 2 8.0 1 2.8847 1 3.3431 2 1.0 1 2.644 7 0.3587 1 4.9229 1 10.7997 7 0.0 0 0.0 0 1.0 1 3.3723 1 5.5736 1 4.0 1 0.2003 6 0.2069 1 7.5851 1 5.1814 1 12.7025 2 1.0 1)
Average genome size in population (length): 114.16
Average program size in population (points): 115.16
Average percent parens in population: 0.009
Minimum age in population: 121.1629939101087
Maximum age in population: 125.0838221204734
Average age in population: 123.2031483598761
Median age in population: 123.2150458560247
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 37
Genome diversity (% unique Plush genomes):	 0.882
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 37
Syntactic diversity (% unique Push programs):	 0.882
Total error diversity:				 0.578
Error (vector) diversity:			 0.666
Behavioral diversity:				 0.667
--- Run Statistics ---
Number of program evaluations used so far: 87000
Number of point (instruction) evaluations so far: 148885077
--- Timings ---
Current time: 1529615413820 milliseconds
Total Time:         362.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       134.1 seconds, 37.0%
Fitness Testing:    181.9 seconds, 50.1%
Report:              46.7 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 86
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 87
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 87
;;******************************
;; -*- Number IO problem report - generation 87
Test total error for best: 31692.715100000038
Test mean error for best: 15.84636
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -89.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.2002939985 
Correct output: 27.2083659619  | Program output: 10.2083659619 
Correct output: 103.781099078  | Program output: 90.2002939985 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction integer_mult} {:instruction in2} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_flush})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 integer_mod float_dec float_yankdup float_dec integer_mod integer_mod integer_yankdup float_yankdup integer_mult in2 90.20029399850333 float_rot float_dec in1 in1 float_dup_items integer_yankdup float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -9.568963984273623 integer_fromfloat -56.50848481366526 integer_div float_frominteger integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 4.0 1 4.7997 7 20.0 1 19.5851 10 17.0 2 13.5808 10 15.0 2]
Total: 597.3661999999999
Mean: 11.947324
Genome size: 113
Size: 114
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2484.492521700001
Median total errors in population: 653.4005999999999
Error averages by case: (90.2110075 3.398 95.43746469999843 8.842 72.52666719999993 2.463 85.98350200000012 3.431 84.61545319999905 7.584 101.99812480000001 3.083 104.56912990000006 3.546 95.37253669999846 9.47 97.46846149999998 3.43 133.7682104 10.985 71.49907909999997 3.165 110.3580048 3.498 92.7618486000015 9.068 87.33152810000001 2.969 96.51727080000002 4.383 71.31606999999997 2.546 124.74441010000007 3.514 118.49623059999999 3.598 79.07675469999997 3.224 81.5560611000014 8.249 94.72747129999996 2.955 93.4811339999987 8.02 85.60413960000011 5.785 91.7999360999997 8.132 94.39802489999997 3.536)
Error minima by case: (0.0 0 0.0653 7 0.0 0 0.0 0 0.2003 1 9.0 1 2.7882 1 6.3431 2 0.0 0 2.9002 8 0.1584 1 1.2164 1 3.7426 7 0.0413 1 2.9082 1 1.0 1 4.0162 1 2.7132 1 4.0 1 0.2003 6 0.1126 1 7.5851 1 5.7202 1 12.7025 2 0.0 0)
Average genome size in population (length): 114.56
Average program size in population (points): 115.56
Average percent parens in population: 0.009
Minimum age in population: 122.2478045380502
Maximum age in population: 126.3624044883671
Average age in population: 124.4634760293534
Median age in population: 124.5312608908443
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 41
Genome diversity (% unique Plush genomes):	 0.89
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.89
Total error diversity:				 0.579
Error (vector) diversity:			 0.663
Behavioral diversity:				 0.663
--- Run Statistics ---
Number of program evaluations used so far: 88000
Number of point (instruction) evaluations so far: 151749177
--- Timings ---
Current time: 1529615419320 milliseconds
Total Time:         368.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       135.6 seconds, 36.8%
Fitness Testing:    185.1 seconds, 50.3%
Report:              47.4 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 87
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 88
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 88
;;******************************
;; -*- Number IO problem report - generation 88
Test total error for best: 32265.665200000047
Test mean error for best: 16.13283
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -90.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.2002939985 
Correct output: 27.2083659619  | Program output: 21.0269740675 
Correct output: 103.781099078  | Program output: 90.2002939985 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_dec} {:instruction in2} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction 21.02697406752263} {:instruction in1} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction integer_pop} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction tagged_10} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_flush})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_dup_items float_dec float_dec float_dec float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 float_dec in2 90.20029399850333 float_rot float_dec 21.02697406752263 in1 float_dup_items float_dup_items integer_yankdup float_yankdup integer_pop in2 in1 float_dup_items float_dec float_yankdup float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dec float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan tagged_10 integer_fromfloat -56.50848481366526 integer_div float_frominteger integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 5.0 2 4.7997 7 20.0 1 19.5851 10 6.1814 10 13.5808 10 15.0 2]
Total: 596.5476
Mean: 11.930952
Genome size: 112
Size: 113
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2330.375587200001
Median total errors in population: 652.2003
Error averages by case: (82.3361099 3.267 92.22134559999866 8.828 65.2252854 2.359 78.02732140000006 3.305 83.14638689999923 7.489 94.4708213 3.031 96.68227480000007 3.4 92.48213379999865 9.318 90.05159079999997 3.381 126.62479960000003 10.913 65.15459509999998 3.065 103.49194440000001 3.396 90.74612120000128 9.175 80.15043199999995 2.908 89.39684099999997 4.28 67.6302934 2.385 117.65197270000006 3.385 112.34575289999998 3.516 73.06316119999998 3.057 78.5530527000011 8.257 87.96845290000003 2.812 87.52598009999886 8.018 79.39161300000004 5.221 83.38408919999986 8.064 86.39421589999996 3.429)
Error minima by case: (0.0 0 3.9347 7 0.0 0 0.0 0 0.2003 2 8.0 1 0.3751 1 4.2224 2 4.0 1 0.2318 7 2.0 1 5.9229 1 10.1367 7 0.0598 1 0.0 0 1.0 1 6.2519 1 24.918 1 4.0 1 0.2003 6 0.1619 1 7.5851 1 2.0813 1 10.107 2 2.0 1)
Average genome size in population (length): 115.025
Average program size in population (points): 116.025
Average percent parens in population: 0.009
Minimum age in population: 123.741284444746
Maximum age in population: 127.8156576014285
Average age in population: 125.7918176235134
Median age in population: 125.836007560127
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 41
Genome diversity (% unique Plush genomes):	 0.899
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.899
Total error diversity:				 0.551
Error (vector) diversity:			 0.632
Behavioral diversity:				 0.632
--- Run Statistics ---
Number of program evaluations used so far: 89000
Number of point (instruction) evaluations so far: 154624827
--- Timings ---
Current time: 1529615424482 milliseconds
Total Time:         373.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       137.2 seconds, 36.7%
Fitness Testing:    188.0 seconds, 50.3%
Report:              48.2 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 88
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 89
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 89
;;******************************
;; -*- Number IO problem report - generation 89
Test total error for best: 32265.665200000047
Test mean error for best: 16.13283
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -90.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.2002939985 
Correct output: 27.2083659619  | Program output: 21.0269740675 
Correct output: 103.781099078  | Program output: 90.2002939985 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_dec} {:instruction in2} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction 21.02697406752263} {:instruction in1} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction integer_pop} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction tagged_10} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_flush})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_dup_items float_dec float_dec float_dec float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 float_dec in2 90.20029399850333 float_rot float_dec 21.02697406752263 in1 float_dup_items float_dup_items integer_yankdup float_yankdup integer_pop in2 in1 float_dup_items float_dec float_yankdup float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dec float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan tagged_10 integer_fromfloat -56.50848481366526 integer_div float_frominteger integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 5.0 2 4.7997 7 20.0 1 19.5851 10 6.1814 10 13.5808 10 15.0 2]
Total: 596.5476
Mean: 11.930952
Genome size: 112
Size: 113
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2648.0275812000014
Median total errors in population: 652.9005999999999
Error averages by case: (96.27902659999997 3.515 102.72719329999872 8.823 78.7194991 2.714 92.59343370000013 3.593 90.97132729999912 7.718 107.85621260000003 3.324 110.20896110000014 3.668 102.89752009999866 9.438 102.75331249999996 3.618 138.04856039999999 10.991 79.02482269999999 3.173 116.13877860000005 3.682 98.34569940000128 9.014 93.36737640000003 3.206 102.57951609999995 4.522 76.50561189999996 2.347 130.1012688000001 3.627 125.20766889999997 3.858 88.4085282 3.121 87.35741640000133 8.182 100.41001900000006 3.111 102.85837469999878 8.024 95.18129889999992 5.146 98.90539419999963 7.96 100.50476029999996 3.701)
Error minima by case: (0.0 0 5.9347 7 0.0 0 0.0 0 0.2003 2 10.0 1 2.0 1 2.0719 2 2.0 1 0.7401 8 2.0 1 4.9229 1 10.7997 7 0.0 0 0.0 0 1.0 1 8.2519 1 14.0872 1 3.0 1 0.2003 6 0.2069 1 5.5728 1 4.7802 1 12.5808 2 0.0 0)
Average genome size in population (length): 114.632
Average program size in population (points): 115.632
Average percent parens in population: 0.009
Minimum age in population: 124.9944470330969
Maximum age in population: 128.9405979655286
Average age in population: 127.1432822703999
Median age in population: 127.1732011248413
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 29
Genome diversity (% unique Plush genomes):	 0.911
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.911
Total error diversity:				 0.547
Error (vector) diversity:			 0.648
Behavioral diversity:				 0.649
--- Run Statistics ---
Number of program evaluations used so far: 90000
Number of point (instruction) evaluations so far: 157490627
--- Timings ---
Current time: 1529615429653 milliseconds
Total Time:         378.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       138.7 seconds, 36.6%
Fitness Testing:    190.9 seconds, 50.4%
Report:              48.9 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 89
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 90
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 90
;;******************************
;; -*- Number IO problem report - generation 90
Test total error for best: 32313.665200000047
Test mean error for best: 16.15683
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -90.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.2002939985 
Correct output: 27.2083659619  | Program output: 21.0269740675 
Correct output: 103.781099078  | Program output: 90.2002939985 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_dec} {:instruction in2} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction 21.02697406752263} {:instruction in1} {:instruction integer_dec} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction integer_pop} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_flush})
Best program: (float_dec 90.20029399850333 in1 float_add float_dup_items float_dec float_dup_items float_dec float_dec float_dec float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 float_dec in2 90.20029399850333 float_rot float_dec 21.02697406752263 in1 integer_dec float_dup_items integer_yankdup float_yankdup integer_pop in2 in1 float_dup_items float_dec float_yankdup float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -9.568963984273623 integer_fromfloat -56.50848481366526 integer_div float_frominteger integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 5.0 2 4.7997 7 20.0 1 19.5851 10 6.1814 10 13.5808 10 15.0 2]
Total: 596.5476
Mean: 11.930952
Genome size: 111
Size: 112
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2193.825422900002
Median total errors in population: 646.4005999999999
Error averages by case: (76.58136199999997 3.205 86.61680149999845 8.731 60.94215159999998 2.255 72.44707960000008 3.26 74.55919239999893 7.578 89.13872439999999 2.93 89.69279050000003 3.354 85.22164229999842 9.229 84.31480859999999 3.3 121.05517689999996 10.906 58.11236459999997 2.868 99.96514350000001 3.319 83.35780440000157 8.904 76.00317020000001 2.825 83.77308099999995 4.204 58.47950959999998 2.143 113.11212910000005 3.335 109.86940670000004 3.496 70.35093779999994 2.947 72.32109510000144 8.091 82.42430099999999 2.775 84.4702270999986 7.913 76.15675930000006 5.157 80.2061364000001 7.929 80.63062729999993 3.369)
Error minima by case: (0.0 0 0.9347 7 0.0 0 0.0 0 0.2003 1 7.0 1 2.0 1 3.3431 1 0.027 1 0.0998 7 0.3587 1 4.9229 1 10.7997 7 0.0881 1 0.0 0 1.0 1 4.2249 1 23.2151 1 3.0 1 0.2003 6 0.3615 1 7.5851 1 5.4119 1 7.5181 2 0.0 0)
Average genome size in population (length): 114.979
Average program size in population (points): 115.979
Average percent parens in population: 0.009
Minimum age in population: 126.1303613985759
Maximum age in population: 130.6087017476431
Average age in population: 128.432699307794
Median age in population: 128.4801280373987
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.87
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.87
Total error diversity:				 0.542
Error (vector) diversity:			 0.646
Behavioral diversity:				 0.646
--- Run Statistics ---
Number of program evaluations used so far: 91000
Number of point (instruction) evaluations so far: 160365102
--- Timings ---
Current time: 1529615434852 milliseconds
Total Time:         384.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       140.2 seconds, 36.5%
Fitness Testing:    193.9 seconds, 50.5%
Report:              49.7 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 90
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 91
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 91
;;******************************
;; -*- Number IO problem report - generation 91
Test total error for best: 32288.665200000047
Test mean error for best: 16.14433
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -89.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.2002939985 
Correct output: 27.2083659619  | Program output: 21.0269740675 
Correct output: 103.781099078  | Program output: 90.2002939985 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction 21.02697406752263} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_flush})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 float_add integer_pop float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 float_yank in2 90.20029399850333 float_rot float_dec 21.02697406752263 in1 float_dup_items integer_yankdup float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -9.568963984273623 integer_fromfloat -56.50848481366526 integer_div float_frominteger integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 4.0 1 4.7997 7 20.0 1 19.5851 10 6.1814 10 13.5808 10 15.0 2]
Total: 594.5476
Mean: 11.890952
Genome size: 116
Size: 117
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2483.901723500002
Median total errors in population: 654.0
Error averages by case: (91.30657699999998 3.41 95.76981149999865 8.813 72.59229119999996 2.551 87.7711297000001 3.448 85.43035189999938 7.629 102.8377005 3.175 103.62143410000016 3.552 95.61809189999857 9.364 97.87726789999991 3.496 134.82980789999996 10.975 68.43005679999996 3.093 110.10020410000006 3.568 93.21579650000136 9.043 86.95560779999998 3.049 97.6064834999999 4.395 67.31925269999995 2.301 126.52067520000008 3.518 118.4886199000001 3.848 78.77585269999997 3.269 82.56107750000123 8.262 96.78749020000004 2.997 93.63515969999875 7.847 82.12268050000013 5.706 89.58957579999964 7.92 95.32872699999996 3.581)
Error minima by case: (0.0 0 0.9347 7 0.0 0 0.0 0 0.2003 2 5.0 1 1.0 1 3.3431 2 0.0 0 0.2318 8 2.0 1 1.5456 1 8.7997 7 0.0 0 0.0 0 1.0 1 3.2249 1 23.918 1 3.0 1 0.2003 6 0.1793 1 4.5851 1 5.7202 1 12.5808 2 0.0 0)
Average genome size in population (length): 114.354
Average program size in population (points): 115.354
Average percent parens in population: 0.009
Minimum age in population: 127.4779119009962
Maximum age in population: 131.5054286946674
Average age in population: 129.7502098194632
Median age in population: 129.798978785313
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.918
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.918
Total error diversity:				 0.589
Error (vector) diversity:			 0.675
Behavioral diversity:				 0.676
--- Run Statistics ---
Number of program evaluations used so far: 92000
Number of point (instruction) evaluations so far: 163223977
--- Timings ---
Current time: 1529615440036 milliseconds
Total Time:         389.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       141.7 seconds, 36.4%
Fitness Testing:    196.9 seconds, 50.6%
Report:              50.4 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 91
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 92
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 92
;;******************************
;; -*- Number IO problem report - generation 92
Test total error for best: 32288.665200000047
Test mean error for best: 16.14433
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -89.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.2002939985 
Correct output: 27.2083659619  | Program output: 21.0269740675 
Correct output: 103.781099078  | Program output: 90.2002939985 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction 21.02697406752263} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_flush})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 float_add integer_pop float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 float_yank in2 90.20029399850333 float_rot float_dec 21.02697406752263 in1 float_dup_items integer_yankdup float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -9.568963984273623 integer_fromfloat -56.50848481366526 integer_div float_frominteger integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 4.0 1 4.7997 7 20.0 1 19.5851 10 6.1814 10 13.5808 10 15.0 2]
Total: 594.5476
Mean: 11.890952
Genome size: 116
Size: 117
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2478.4387975000013
Median total errors in population: 648.5
Error averages by case: (87.52460239999998 3.307 99.2629273999986 8.836 72.05853719999999 2.444 83.19148620000007 3.361 89.09203469999925 7.625 98.6157776 3.108 99.9859543000001 3.428 98.41339289999848 9.476 94.4979453 3.404 131.06758799999997 11.006 71.87883729999997 3.232 109.85410650000004 3.456 97.34461780000142 9.057 87.00718000000003 2.981 93.68589159999999 4.324 69.97896279999995 2.334 122.45050060000007 3.414 118.24330590000002 3.528 81.94053249999997 3.263 84.59067390000139 8.298 92.2111623 2.875 96.91605969999867 8.167 84.84278750000011 6.072 93.60364780000006 8.17 91.57128529999993 3.443)
Error minima by case: (0.0 0 0.9347 7 0.0 0 0.0 0 0.0752 2 7.0 1 0.0115 1 3.3431 2 5.0 1 1.0031 8 2.0 1 0.3143 1 9.7997 6 0.0881 1 0.7149 1 1.0 1 4.6681 1 23.918 1 4.0 1 0.2003 6 0.6069 1 8.5851 1 5.7202 1 12.9169 2 0.0 0)
Average genome size in population (length): 114.521
Average program size in population (points): 115.521
Average percent parens in population: 0.009
Minimum age in population: 129.0516303022314
Maximum age in population: 132.9328862005271
Average age in population: 131.0795314375847
Median age in population: 131.1592402750403
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.891
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.891
Total error diversity:				 0.56
Error (vector) diversity:			 0.656
Behavioral diversity:				 0.657
--- Run Statistics ---
Number of program evaluations used so far: 93000
Number of point (instruction) evaluations so far: 166087002
--- Timings ---
Current time: 1529615444993 milliseconds
Total Time:         394.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       143.2 seconds, 36.3%
Fitness Testing:    199.7 seconds, 50.7%
Report:              51.1 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 92
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 93
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 93
;;******************************
;; -*- Number IO problem report - generation 93
Test total error for best: 32288.665200000047
Test mean error for best: 16.14433
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -89.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.2002939985 
Correct output: 27.2083659619  | Program output: 21.0269740675 
Correct output: 103.781099078  | Program output: 90.2002939985 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction 21.02697406752263} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_flush})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 float_add integer_pop float_dec float_dup_items integer_add float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 float_yank in2 90.20029399850333 float_rot float_dec 21.02697406752263 in1 float_dup_items integer_yankdup float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -9.568963984273623 integer_fromfloat -56.50848481366526 integer_div float_frominteger integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 4.0 1 4.7997 7 20.0 1 19.5851 10 6.1814 10 13.5808 10 15.0 2]
Total: 594.5476
Mean: 11.890952
Genome size: 116
Size: 117
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2381.1401689000013
Median total errors in population: 648.60015
Error averages by case: (82.78559569999999 3.197 96.68285449999868 8.807 67.39860310000002 2.221 78.40361080000005 3.235 87.83242009999937 7.589 94.3808543 2.905 95.89518310000005 3.325 96.09998329999867 9.3 90.53857389999996 3.292 128.38760279999994 10.907 66.91544699999997 3.035 106.34823210000002 3.345 95.41759470000119 9.072 82.43969139999997 2.78 89.33187249999997 4.204 64.79071289999997 2.199 119.36152610000006 3.28 115.89448820000004 3.528 77.05303759999998 3.268 84.49359940000107 8.327 89.29872170000003 2.706 90.30359829999888 8.276 80.70907020000024 6.453 86.88422990000008 8.218 86.70906529999999 3.315)
Error minima by case: (0.0 0 5.9347 7 0.0 0 0.0 0 0.2003 2 9.0 1 3.0 1 3.3431 2 0.0 0 2.9002 8 2.0 1 4.9229 1 10.7997 7 0.0 0 0.0 0 2.0 1 7.8262 1 20.5134 1 4.0 1 0.2003 6 0.2187 1 7.5851 1 5.7202 1 11.7695 2 0.0 0)
Average genome size in population (length): 114.041
Average program size in population (points): 115.041
Average percent parens in population: 0.009
Minimum age in population: 130.0516303022314
Maximum age in population: 134.224631062359
Average age in population: 132.2393989009311
Median age in population: 132.2665818901715
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.877
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.877
Total error diversity:				 0.554
Error (vector) diversity:			 0.632
Behavioral diversity:				 0.632
--- Run Statistics ---
Number of program evaluations used so far: 94000
Number of point (instruction) evaluations so far: 168938077
--- Timings ---
Current time: 1529615450045 milliseconds
Total Time:         399.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       144.6 seconds, 36.2%
Fitness Testing:    202.6 seconds, 50.8%
Report:              51.7 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 93
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 94
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 94
;;******************************
;; -*- Number IO problem report - generation 94
Test total error for best: 32288.665200000047
Test mean error for best: 16.14433
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -89.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.2002939985 
Correct output: 27.2083659619  | Program output: 21.0269740675 
Correct output: 103.781099078  | Program output: 90.2002939985 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction 21.02697406752263} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_flush})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 float_add integer_pop float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 float_yank in2 90.20029399850333 float_rot float_dec 21.02697406752263 in1 float_dup_items integer_yankdup float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -9.568963984273623 integer_fromfloat -56.50848481366526 integer_div float_frominteger integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 4.0 1 4.7997 7 20.0 1 19.5851 10 6.1814 10 13.5808 10 15.0 2]
Total: 594.5476
Mean: 11.890952
Genome size: 116
Size: 117
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2575.4317166000005
Median total errors in population: 653.9005999999999
Error averages by case: (90.73591039999998 3.495 98.41941229999851 8.833 79.0011841 2.55 87.18231400000013 3.538 89.44567159999927 7.438 105.65688680000002 3.244 104.47477530000009 3.602 99.68191739999843 9.504 99.44990529999993 3.586 133.81213689999996 10.948 76.45154179999996 3.284 116.90002020000003 3.622 96.84703320000143 9.109 92.7574719 3.105 99.56931819999996 4.493 74.70768869999995 2.417 125.2512045000001 3.583 125.0875233 3.778 88.57248329999999 3.558 85.44812570000133 8.319 95.39556270000007 3.002 98.29006919999853 8.411 89.72958940000018 7.225 95.25625639999953 8.37 94.64971399999993 3.644)
Error minima by case: (0.0 0 2.0653 7 0.0 0 0.0 0 0.2003 2 9.0 1 5.0 1 5.3431 2 0.0 0 1.5654 8 2.0 1 7.9229 1 9.7997 7 0.0 0 0.0 0 1.0 1 9.6356 1 26.918 1 4.0 1 0.2003 6 0.5093 1 7.5851 1 5.7202 1 11.7695 2 0.0 0)
Average genome size in population (length): 114.189
Average program size in population (points): 115.189
Average percent parens in population: 0.009
Minimum age in population: 131.2589349774466
Maximum age in population: 135.3638155605158
Average age in population: 133.5009494237791
Median age in population: 133.5157858754131
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.877
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.877
Total error diversity:				 0.56
Error (vector) diversity:			 0.629
Behavioral diversity:				 0.629
--- Run Statistics ---
Number of program evaluations used so far: 95000
Number of point (instruction) evaluations so far: 171792802
--- Timings ---
Current time: 1529615455394 milliseconds
Total Time:         404.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       146.2 seconds, 36.2%
Fitness Testing:    205.6 seconds, 50.8%
Report:              52.5 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 94
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 95
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 95
;;******************************
;; -*- Number IO problem report - generation 95
Test total error for best: 33418.60610000003
Test mean error for best: 16.70930
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -89.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.2002939985 
Correct output: 27.2083659619  | Program output: 22.2342573679 
Correct output: 103.781099078  | Program output: 90.2002939985 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction 22.23425736786634} {:instruction in1} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_shove} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction integer_fromfloat})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec float_dup in1 float_yank in2 90.20029399850333 float_rot float_dec 22.23425736786634 in1 float_dup_items float_dup_items integer_yankdup float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_shove print_float float_tan -9.568963984273623 integer_fromfloat)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 4.0 1 4.7997 7 20.0 1 19.5851 10 4.9741 8 13.5808 10 15.0 2]
Total: 591.3403
Mean: 11.826806
Genome size: 113
Size: 114
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2449.099370800001
Median total errors in population: 662.7211500000001
Error averages by case: (89.3977496 3.589 94.97258749999848 8.888 67.10827589999998 2.729 85.92179910000011 3.633 87.18268829999917 7.476 101.5675872 3.391 104.22816190000007 3.754 94.72930579999839 9.53 95.63055649999998 3.662 131.11255780000002 10.994 71.00617019999996 3.271 104.40079770000003 3.711 94.13328970000148 9.177 81.41373750000004 3.213 96.0579466 4.549 70.09945319999997 2.475 122.94818650000013 3.717 113.6895238 3.847 82.28546099999994 3.789 81.1895595000012 8.374 93.00442429999995 3.163 90.7084828999987 8.034 81.10848210000027 7.404 87.46462880000001 8.049 93.52395739999992 3.795)
Error minima by case: (1.0 1 4.9347 7 0.0 0 0.0 0 0.2003 2 10.0 1 1.0 1 3.3431 2 1.0 1 1.9002 8 2.0 1 3.9642 1 11.7997 7 0.1416 1 1.0 1 1.0 1 0.3022 1 0.7281 1 4.0 1 0.2003 6 0.7931 1 6.5851 1 4.8344 1 12.7881 2 0.0 0)
Average genome size in population (length): 114.103
Average program size in population (points): 115.103
Average percent parens in population: 0.009
Minimum age in population: 132.829466671678
Maximum age in population: 136.7890817640801
Average age in population: 134.8517842342187
Median age in population: 134.8715792853407
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.902
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.902
Total error diversity:				 0.593
Error (vector) diversity:			 0.667
Behavioral diversity:				 0.667
--- Run Statistics ---
Number of program evaluations used so far: 96000
Number of point (instruction) evaluations so far: 174645377
--- Timings ---
Current time: 1529615460481 milliseconds
Total Time:         409.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       147.8 seconds, 36.1%
Fitness Testing:    208.4 seconds, 50.9%
Report:              53.2 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 95
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 96
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 96
;;******************************
;; -*- Number IO problem report - generation 96
Test total error for best: 32288.665200000047
Test mean error for best: 16.14433
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -89.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.2002939985 
Correct output: 27.2083659619  | Program output: 21.0269740675 
Correct output: 103.781099078  | Program output: 90.2002939985 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction 21.02697406752263} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction float_frominteger} {:instruction float_cos})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 float_add integer_pop float_dec float_dup_items float_dup_items float_dec float_yankdup integer_add float_add float_dup_items float_dec float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 float_yank in2 90.20029399850333 float_rot float_dec 21.02697406752263 in1 float_dup_items integer_yankdup float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan integer_sub integer_fromfloat -56.50848481366526 integer_div float_frominteger float_cos)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 4.0 1 4.7997 7 20.0 1 19.5851 10 6.1814 10 13.5808 10 15.0 2]
Total: 594.5476
Mean: 11.890952
Genome size: 116
Size: 117
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2308.1488950000003
Median total errors in population: 652.58095
Error averages by case: (80.62595339999996 3.245 88.2323803999985 8.76 65.453082 2.347 76.37910380000007 3.285 78.88050349999916 7.304 92.99409389999997 2.957 94.33615120000006 3.373 89.20939479999838 9.403 88.64438220000002 3.299 125.02952870000004 10.871 65.00001439999997 3.129 104.30506970000002 3.4 87.3282576000015 8.999 80.5302901 2.869 87.75471330000002 4.175 64.7196825 2.255 116.14218600000007 3.341 114.61047279999998 3.536 81.96403359999996 3.601 75.86727090000127 8.179 86.68727469999993 2.803 87.63136909999857 8.234 77.91193940000038 7.752 84.44727640000004 8.298 84.64647059999993 3.403)
Error minima by case: (0.0 0 5.9347 7 0.0 0 0.0 0 0.2003 1 10.0 1 0.0 0 4.3431 2 0.027 1 0.2318 8 2.0 1 5.9229 1 11.7997 7 0.0 0 0.0 0 1.0 1 6.2519 1 11.9994 1 4.0 1 0.2003 6 0.2069 1 12.5851 1 4.9741 1 13.2742 2 0.6768 1)
Average genome size in population (length): 114.062
Average program size in population (points): 115.062
Average percent parens in population: 0.009
Minimum age in population: 133.8977566573934
Maximum age in population: 138.2288791144746
Average age in population: 136.1008483221028
Median age in population: 136.1527844398581
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.895
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.895
Total error diversity:				 0.554
Error (vector) diversity:			 0.621
Behavioral diversity:				 0.622
--- Run Statistics ---
Number of program evaluations used so far: 97000
Number of point (instruction) evaluations so far: 177496927
--- Timings ---
Current time: 1529615466009 milliseconds
Total Time:         414.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       149.4 seconds, 36.0%
Fitness Testing:    211.4 seconds, 51.0%
Report:              53.9 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 96
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 97
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 97
;;******************************
;; -*- Number IO problem report - generation 97
Test total error for best: 32272.841200000046
Test mean error for best: 16.13642
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -89.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 21.0269740675 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 21.02697406752263} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_flush})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 float_add integer_pop float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_dup_items float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 21.02697406752263 in1 float_dup_items integer_yankdup float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -9.568963984273623 integer_fromfloat -56.50848481366526 integer_div float_frominteger integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 4.0 1 4.7997 7 20.0 1 19.7131 9 6.1814 10 13.4528 9 15.0 2]
Total: 592.5476000000001
Mean: 11.850952
Genome size: 116
Size: 117
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2046.0759718000013
Median total errors in population: 647.48415
Error averages by case: (68.22265729999998 3.199 79.06329279999895 8.726 56.0961805 2.258 64.12379580000007 3.252 68.9721701999994 7.134 82.17033910000002 2.929 83.32689330000004 3.321 80.17252269999892 9.37 76.91314850000002 3.282 111.94924670000002 10.834 57.85350999999997 3.159 95.6704554 3.369 78.11905080000105 8.979 71.04801269999999 2.808 76.4132976 4.177 55.194715399999986 2.14 103.21641810000004 3.298 105.70544009999999 3.605 71.52593119999996 3.494 66.2963409000008 8.143 73.30025019999995 2.735 78.37539129999897 8.013 66.55986420000032 7.727 75.77940160000018 8.253 72.44864539999993 3.354)
Error minima by case: (0.0 0 5.9347 7 0.0 0 0.0 0 0.2003 2 9.0 1 1.0 1 3.3431 2 1.0 1 0.9002 8 2.0 1 4.8489 1 10.7997 7 0.0413 1 0.0 0 1.0 1 3.2249 1 2.4189 1 3.0 1 0.2003 6 0.2069 1 10.5851 1 4.7202 1 12.5808 2 1.0 1)
Average genome size in population (length): 113.927
Average program size in population (points): 114.927
Average percent parens in population: 0.009
Minimum age in population: 134.8977566573934
Maximum age in population: 139.2810574877665
Average age in population: 137.451608932221
Median age in population: 137.4806663054866
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.886
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.886
Total error diversity:				 0.544
Error (vector) diversity:			 0.612
Behavioral diversity:				 0.613
--- Run Statistics ---
Number of program evaluations used so far: 98000
Number of point (instruction) evaluations so far: 180345127
--- Timings ---
Current time: 1529615471161 milliseconds
Total Time:         420.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       151.0 seconds, 35.9%
Fitness Testing:    214.2 seconds, 51.0%
Report:              54.8 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 97
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 98
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 98
;;******************************
;; -*- Number IO problem report - generation 98
Test total error for best: 32272.841200000046
Test mean error for best: 16.13642
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -89.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 21.0269740675 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 21.02697406752263} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_flush})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 float_add integer_pop float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_dup_items float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 21.02697406752263 in1 float_dup_items integer_yankdup float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -9.568963984273623 integer_fromfloat -56.50848481366526 integer_div float_frominteger integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 4.0 1 4.7997 7 20.0 1 19.7131 9 6.1814 10 13.4528 9 15.0 2]
Total: 592.5476000000001
Mean: 11.850952
Genome size: 116
Size: 117
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2303.624963200001
Median total errors in population: 653.7003
Error averages by case: (80.20548389999998 3.391 90.0050574999986 8.836 63.612944200000015 2.456 76.1538608000001 3.434 82.54274549999906 7.245 92.29456860000002 3.133 95.58119720000008 3.507 90.85483439999848 9.46 87.31857090000003 3.476 123.2535478 10.916 66.71062429999995 3.244 101.73618790000002 3.519 90.44927800000143 9.141 78.75380979999998 3.02 87.26636780000001 4.353 67.73657839999997 2.418 114.76586810000006 3.471 110.68258790000003 3.584 79.68018549999988 3.454 77.77348010000131 8.301 84.95338549999995 2.92 87.10301619999868 8.194 74.90227330000037 7.759 83.87037280000013 8.298 84.35013679999993 3.538)
Error minima by case: (1.0 1 0.0653 7 0.0 0 0.0 0 0.2003 2 8.0 1 1.0 1 3.3431 2 2.0 1 1.0016 8 2.0 1 6.9229 1 1.9153 7 0.0 0 0.0 0 0.0 0 4.2249 1 20.5134 1 3.0 1 0.2003 6 0.2069 1 6.5851 1 4.7202 1 12.5808 2 1.0 1)
Average genome size in population (length): 114.666
Average program size in population (points): 115.666
Average percent parens in population: 0.009
Minimum age in population: 136.450146739028
Maximum age in population: 140.8688659281062
Average age in population: 138.8295336635644
Median age in population: 138.8444991149771
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.902
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.902
Total error diversity:				 0.531
Error (vector) diversity:			 0.617
Behavioral diversity:				 0.617
--- Run Statistics ---
Number of program evaluations used so far: 99000
Number of point (instruction) evaluations so far: 183211802
--- Timings ---
Current time: 1529615476613 milliseconds
Total Time:         425.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       152.8 seconds, 35.9%
Fitness Testing:    217.3 seconds, 51.0%
Report:              55.5 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 98
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 99
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 99
;;******************************
;; -*- Number IO problem report - generation 99
Test total error for best: 32272.841200000046
Test mean error for best: 16.13642
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -89.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 21.0269740675 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 21.02697406752263} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_flush})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 float_add integer_pop float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_dup_items float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 21.02697406752263 in1 float_dup_items integer_yankdup float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -9.568963984273623 integer_fromfloat -56.50848481366526 integer_div float_frominteger integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 4.0 1 4.7997 7 20.0 1 19.7131 9 6.1814 10 13.4528 9 15.0 2]
Total: 592.5476000000001
Mean: 11.850952
Genome size: 116
Size: 117
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2267.6848717
Median total errors in population: 654.0
Error averages by case: (79.0634956 3.361 87.69337439999877 8.799 63.855263700000016 2.446 75.06973650000009 3.397 78.30400329999922 7.167 92.7338727 3.099 94.31164310000005 3.502 89.5462233999987 9.458 87.17886609999998 3.411 121.96128479999994 10.921 63.30365069999996 3.254 102.51702840000007 3.474 86.94114530000117 9.056 78.378062 2.978 86.94783969999997 4.313 60.573226 2.316 112.96373680000009 3.454 112.21835490000007 3.661 76.33376499999993 3.431 75.39323390000105 8.226 84.0192253 2.914 85.53124639999885 8.102 76.30890580000037 7.816 82.89036029999998 8.342 83.2383276 3.511)
Error minima by case: (0.0 0 5.9347 7 0.0 0 0.0 0 0.2003 2 9.0 1 1.0 1 5.3431 2 0.0 1 2.644 8 1.0 1 4.9229 1 10.7997 7 0.0881 1 0.0 0 1.0 1 2.2249 1 14.0534 1 3.0 1 0.2003 6 0.1619 1 13.5851 1 4.4169 1 12.5808 2 0.0 0)
Average genome size in population (length): 114.677
Average program size in population (points): 115.677
Average percent parens in population: 0.009
Minimum age in population: 138.0162681880353
Maximum age in population: 142.0578338257333
Average age in population: 140.230485150527
Median age in population: 140.2468594433539
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.911
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.911
Total error diversity:				 0.56
Error (vector) diversity:			 0.639
Behavioral diversity:				 0.639
--- Run Statistics ---
Number of program evaluations used so far: 100000
Number of point (instruction) evaluations so far: 186078752
--- Timings ---
Current time: 1529615481790 milliseconds
Total Time:         430.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       154.4 seconds, 35.8%
Fitness Testing:    220.1 seconds, 51.1%
Report:              56.2 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 99
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 100
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 100
;;******************************
;; -*- Number IO problem report - generation 100
Test total error for best: 32272.841200000046
Test mean error for best: 16.13642
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -89.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 21.0269740675 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 21.02697406752263} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_flush})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 float_add integer_pop float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_dup_items float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 21.02697406752263 in1 float_dup_items integer_yankdup float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -9.568963984273623 integer_fromfloat -56.50848481366526 integer_div float_frominteger integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 4.0 1 4.7997 7 20.0 1 19.7131 9 6.1814 10 13.4528 9 15.0 2]
Total: 592.5476000000001
Mean: 11.850952
Genome size: 116
Size: 117
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2129.9040384000004
Median total errors in population: 652.0
Error averages by case: (71.45900939999999 3.111 83.1020725999986 8.754 59.21492819999999 2.162 66.98407030000007 3.16 74.03740189999907 7.053 83.03090710000002 2.84 83.72733930000003 3.24 84.07481519999857 9.419 79.0718601 3.187 116.44936040000002 10.929 58.04571859999996 3.105 98.6168139 3.223 83.06400750000142 9.053 74.44589139999997 2.725 78.0337114 4.106 55.38218659999998 2.197 107.18423440000008 3.228 108.82521049999998 3.376 73.67634629999996 3.251 71.71674490000127 8.198 77.90821749999998 2.657 84.41001139999868 8.303 73.23614710000032 7.813 82.0266180999999 8.342 75.50541429999994 3.243)
Error minima by case: (1.0 1 1.0653 7 0.0 0 0.0 0 0.2003 1 5.0 1 3.0 1 4.3431 2 1.0 1 3.9329 7 2.0 1 12.9229 1 12.7997 7 0.0 0 0.0 0 1.0 1 1.7751 1 31.918 1 3.0 1 0.2003 6 0.2069 1 6.5851 1 5.7202 1 13.0053 2 0.0 0)
Average genome size in population (length): 114.859
Average program size in population (points): 115.859
Average percent parens in population: 0.009
Minimum age in population: 139.1029090043249
Maximum age in population: 143.2552873569026
Average age in population: 141.5014699932738
Median age in population: 141.5106079566803
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.906
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.906
Total error diversity:				 0.541
Error (vector) diversity:			 0.624
Behavioral diversity:				 0.624
--- Run Statistics ---
Number of program evaluations used so far: 101000
Number of point (instruction) evaluations so far: 188950227
--- Timings ---
Current time: 1529615487259 milliseconds
Total Time:         436.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       156.1 seconds, 35.8%
Fitness Testing:    223.2 seconds, 51.1%
Report:              56.9 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 100
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 101
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 101
;;******************************
;; -*- Number IO problem report - generation 101
Test total error for best: 32272.841200000046
Test mean error for best: 16.13642
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -89.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 21.0269740675 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 21.02697406752263} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_flush})
Best program: (float_inc 90.20029399850333 float_rot float_dec in1 float_add integer_pop float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_dup_items float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 21.02697406752263 in1 float_dup_items integer_yankdup float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -9.568963984273623 integer_fromfloat -56.50848481366526 integer_div float_frominteger integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 4.0 1 4.7997 7 20.0 1 19.7131 9 6.1814 10 13.4528 9 15.0 2]
Total: 592.5476000000001
Mean: 11.850952
Genome size: 116
Size: 117
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 1988.1154224
Median total errors in population: 637.6916000000001
Error averages by case: (67.92058239999997 3.264 75.55906219999896 8.729 53.292632000000005 2.382 64.92005470000008 3.3 66.81498489999933 7.221 80.0612409 3.047 82.60770150000009 3.396 76.7812346999989 9.372 74.71459899999996 3.385 111.62427769999992 10.878 54.191766199999996 3.139 91.92789840000002 3.407 75.25726700000101 9.016 68.08370539999997 2.937 74.6266723 4.268 52.03013829999996 2.269 103.0208098000001 3.371 100.56197500000003 3.543 65.29264929999994 3.069 62.849029800000814 8.146 72.10363720000002 2.817 75.99721689999896 8.325 62.7318042000005 8.009 73.8117498000001 8.527 72.08473279999995 3.431)
Error minima by case: (0.0 0 0.9347 7 0.0 0 0.0 0 0.2003 1 8.0 1 1.0 1 3.3431 1 1.0 1 6.9862 8 1.0 1 4.9229 1 8.7997 7 0.0881 1 0.0 0 1.0 1 3.2249 1 0.3684 1 3.0 1 0.2003 6 0.2069 1 7.5851 1 2.027 1 11.973 2 0.0 0)
Average genome size in population (length): 114.816
Average program size in population (points): 115.816
Average percent parens in population: 0.009
Minimum age in population: 140.6451881052071
Maximum age in population: 144.5568007437366
Average age in population: 142.8954219574747
Median age in population: 142.9486448977238
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.879
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.879
Total error diversity:				 0.522
Error (vector) diversity:			 0.586
Behavioral diversity:				 0.586
--- Run Statistics ---
Number of program evaluations used so far: 102000
Number of point (instruction) evaluations so far: 191820627
--- Timings ---
Current time: 1529615492807 milliseconds
Total Time:         441.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       157.7 seconds, 35.7%
Fitness Testing:    226.3 seconds, 51.2%
Report:              57.6 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 101
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 102
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 102
;;******************************
;; -*- Number IO problem report - generation 102
Test total error for best: 32272.841200000046
Test mean error for best: 16.13642
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -89.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 21.0269740675 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 21.02697406752263} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_flush})
Best program: (float_inc 90.20029399850333 float_rot float_dec in1 float_add integer_pop float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_dup_items float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 21.02697406752263 in1 float_dup_items integer_yankdup float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -9.568963984273623 integer_fromfloat -56.50848481366526 integer_div float_frominteger integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 4.0 1 4.7997 7 20.0 1 19.7131 9 6.1814 10 13.4528 9 15.0 2]
Total: 592.5476000000001
Mean: 11.850952
Genome size: 116
Size: 117
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2445.7529482000014
Median total errors in population: 657.7003
Error averages by case: (85.20636749999997 3.425 96.30697319999848 8.842 71.15699959999998 2.498 81.90432960000007 3.485 87.91521469999896 7.221 98.41782339999999 3.13 98.58035380000011 3.562 96.90347519999841 9.581 92.94591769999998 3.473 127.0085874 10.942 69.70376529999997 3.257 109.3587995 3.555 96.38997560000142 9.236 85.97943940000003 3.034 92.80198599999994 4.368 69.3672357 2.478 118.3448236000001 3.521 117.56810590000002 3.67 86.50623299999994 3.491 84.7370979000014 8.403 89.7454504 2.944 94.21598549999855 8.365 80.16841030000033 7.976 92.64849269999966 8.415 89.39710529999995 3.602)
Error minima by case: (0.0 0 1.9568 7 0.0 0 0.0 0 0.2003 2 7.0 1 2.0 1 5.3431 2 3.0 1 0.3781 8 1.0 1 12.9229 1 9.9429 7 0.1327 1 0.0 0 1.0 1 0.0909 1 12.4174 1 3.0 1 0.2003 6 0.18 1 5.793 1 3.1271 1 5.207 2 1.0 1)
Average genome size in population (length): 115.046
Average program size in population (points): 116.046
Average percent parens in population: 0.009
Minimum age in population: 141.6451881052071
Maximum age in population: 146.0014639596295
Average age in population: 144.2662224039915
Median age in population: 144.295516435296
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.902
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.902
Total error diversity:				 0.54
Error (vector) diversity:			 0.612
Behavioral diversity:				 0.613
--- Run Statistics ---
Number of program evaluations used so far: 103000
Number of point (instruction) evaluations so far: 194696777
--- Timings ---
Current time: 1529615498179 milliseconds
Total Time:         447.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       159.2 seconds, 35.6%
Fitness Testing:    229.4 seconds, 51.3%
Report:              58.5 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 102
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 103
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 103
;;******************************
;; -*- Number IO problem report - generation 103
Test total error for best: 32274.26760000004
Test mean error for best: 16.13713
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -89.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_flush})
Best program: (float_inc 90.20029399850333 float_rot float_dec in1 float_add integer_pop float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_dup_items float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -9.568963984273623 integer_fromfloat -56.50848481366526 integer_div float_frominteger integer_fromfloat -56.50848481366526 integer_div float_frominteger integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 4.0 1 4.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 591.0623
Mean: 11.821246
Genome size: 120
Size: 121
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2427.4908135000005
Median total errors in population: 654.7997
Error averages by case: (85.40738819999999 3.388 94.76870229999882 8.853 68.6626162 2.544 81.45698240000007 3.448 88.47573209999932 7.397 97.37980599999999 3.218 99.11849820000006 3.555 94.21793459999878 9.54 91.72154929999994 3.515 129.1237126 10.979 71.06374849999999 3.378 106.88829280000003 3.54 95.52794880000121 9.167 83.26914159999997 3.089 91.72946119999996 4.42 68.12867679999998 2.503 120.46216810000007 3.509 116.24156940000003 3.673 82.80384689999995 3.325 83.43153290000105 8.371 90.18496360000006 2.971 93.06730799999885 8.317 81.1141204000003 7.944 91.19422399999964 8.394 89.44188859999996 3.571)
Error minima by case: (0.0 0 0.0653 7 0.0 0 0.0 0 0.2003 1 8.0 1 1.0 1 3.3431 2 0.027 1 0.8171 8 1.0 1 7.7818 1 0.9153 7 0.0 0 0.0 0 0.0 0 1.0279 1 0.2132 1 2.0 1 0.2003 6 0.2069 1 6.793 1 6.0474 1 4.207 2 0.0 0)
Average genome size in population (length): 115.579
Average program size in population (points): 116.579
Average percent parens in population: 0.009
Minimum age in population: 143.4063382582056
Maximum age in population: 147.4606481859055
Average age in population: 145.6267173629196
Median age in population: 145.6868713156797
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.923
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.923
Total error diversity:				 0.543
Error (vector) diversity:			 0.631
Behavioral diversity:				 0.632
--- Run Statistics ---
Number of program evaluations used so far: 104000
Number of point (instruction) evaluations so far: 197586252
--- Timings ---
Current time: 1529615503569 milliseconds
Total Time:         452.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       160.9 seconds, 35.6%
Fitness Testing:    232.4 seconds, 51.3%
Report:              59.2 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 103
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 104
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 104
;;******************************
;; -*- Number IO problem report - generation 104
Test total error for best: 32274.26760000004
Test mean error for best: 16.13713
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -89.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction integer_fromfloat} {:instruction -56.50848481366526})
Best program: (float_dec float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_dup_items float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -9.568963984273623 integer_fromfloat -56.50848481366526)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 4.0 1 4.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 591.0623
Mean: 11.821246
Genome size: 114
Size: 115
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2086.3862753000008
Median total errors in population: 649.62095
Error averages by case: (72.29755329999998 3.264 79.3671060999988 8.727 56.275308399999986 2.293 68.19711500000012 3.3 71.36839359999924 7.201 85.27314970000002 2.992 87.50464890000012 3.397 79.7834457999987 9.435 79.95979599999998 3.334 115.59071789999999 10.819 56.50081759999996 3.142 95.20910870000003 3.366 79.84549820000117 9.024 71.42093579999998 2.869 79.86364589999998 4.233 53.974428099999976 2.265 108.12470140000009 3.376 105.20829120000003 3.465 68.69764389999995 3.149 67.66980210000104 8.187 77.3044652 2.786 79.37394779999894 7.914 66.07069240000048 7.71 77.10940690000008 8.079 76.63865539999995 3.43)
Error minima by case: (0.0 0 3.1171 7 0.0 0 0.0 0 0.2003 2 10.0 1 6.0 1 6.3431 1 1.0 1 0.2318 8 1.0 1 7.9229 1 13.7997 7 0.0 0 0.0 0 0.0 0 0.9042 1 26.918 1 2.0 1 0.2003 6 0.2069 1 7.5851 1 4.9761 1 12.3711 2 1.0 1)
Average genome size in population (length): 115.625
Average program size in population (points): 116.625
Average percent parens in population: 0.009
Minimum age in population: 144.453693556331
Maximum age in population: 149.1064649344914
Average age in population: 146.9046722589093
Median age in population: 146.9607558945409
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.909
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.909
Total error diversity:				 0.561
Error (vector) diversity:			 0.637
Behavioral diversity:				 0.637
--- Run Statistics ---
Number of program evaluations used so far: 105000
Number of point (instruction) evaluations so far: 200476877
--- Timings ---
Current time: 1529615508884 milliseconds
Total Time:         457.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       162.5 seconds, 35.5%
Fitness Testing:    235.3 seconds, 51.4%
Report:              59.9 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 104
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 105
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 105
;;******************************
;; -*- Number IO problem report - generation 105
Test total error for best: 32827.512100000036
Test mean error for best: 16.41376
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -89.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.2002939985 
Correct output: 27.2083659619  | Program output: 21.5891651019 
Correct output: 103.781099078  | Program output: 90.2002939985 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction 23.20934775678265} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction 21.589165101913654} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction float_frominteger} {:instruction float_cos})
Best program: (float_dec 90.20029399850333 float_rot float_dec in1 float_add integer_pop float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add integer_pop float_dec float_dup_items float_dec float_yankdup float_dec float_dec integer_rot float_dec in2 in1 float_dup_items 23.20934775678265 float_dup_items 90.20029399850333 float_dec in1 in1 float_yank in2 90.20029399850333 float_rot float_dec 21.589165101913654 in1 float_dup_items integer_yankdup float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -9.568963984273623 integer_fromfloat integer_fromfloat -56.50848481366526 integer_div float_frominteger float_cos)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 4.0 1 4.7997 7 20.0 1 19.5851 10 5.6192 7 13.5808 10 15.0 2]
Total: 590.9853999999999
Mean: 11.819708
Genome size: 117
Size: 118
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2537.7684551
Median total errors in population: 654.2211500000001
Error averages by case: (92.03386919999996 3.468 98.05765129999858 8.883 73.2063409 2.514 88.00722680000004 3.515 88.04471679999908 7.47 103.31929440000002 3.175 105.34653380000006 3.575 99.08203999999856 9.629 98.11456599999995 3.493 134.6673305 10.996 72.45175499999998 3.349 112.0129255 3.598 96.6913434000014 9.112 87.824573 3.038 97.57096919999995 4.419 70.15599889999994 2.484 126.16266260000009 3.583 123.27548540000001 3.743 84.84834259999997 3.233 84.2703270000013 8.332 97.57177180000004 3.022 96.78124819999877 7.96 85.50187380000033 7.85 94.41364529999964 8.14 96.16996369999991 3.605)
Error minima by case: (0.0 0 5.9347 7 0.0 0 0.0 0 0.2003 2 6.0 1 1.0 1 7.3431 2 3.0 1 0.9132 8 1.0 1 3.5134 1 3.271 7 0.1881 1 1.0 1 0.0 0 3.8648 1 4.4817 1 1.0 1 0.2003 6 0.2069 1 6.5851 1 3.999 1 13.06 2 0.0 0)
Average genome size in population (length): 115.809
Average program size in population (points): 116.809
Average percent parens in population: 0.009
Minimum age in population: 145.453693556331
Maximum age in population: 150.3156078375991
Average age in population: 148.18483130013
Median age in population: 148.22519252776
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.907
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.907
Total error diversity:				 0.546
Error (vector) diversity:			 0.634
Behavioral diversity:				 0.635
--- Run Statistics ---
Number of program evaluations used so far: 106000
Number of point (instruction) evaluations so far: 203372102
--- Timings ---
Current time: 1529615514211 milliseconds
Total Time:         463.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       164.1 seconds, 35.4%
Fitness Testing:    238.3 seconds, 51.4%
Report:              60.7 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 105
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 106
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 106
;;******************************
;; -*- Number IO problem report - generation 106
Test total error for best: 32267.26760000004
Test mean error for best: 16.13363
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -88.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_flush})
Best program: (float_dec float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_dup_items float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup float_yankdup float_inc integer_yankdup float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan integer_sub integer_fromfloat -56.50848481366526 integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 3.0 1 4.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 590.0623
Mean: 11.801246
Genome size: 117
Size: 118
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2101.0581125000017
Median total errors in population: 645.7909999999999
Error averages by case: (70.84652349999998 3.246 82.89539759999866 8.762 57.47397389999998 2.274 66.92510490000006 3.285 74.16265009999913 7.147 83.69888230000001 2.981 84.41221670000004 3.372 84.34209409999862 9.421 77.6287441 3.305 114.85232690000001 10.798 59.85050169999998 3.092 96.68925559999998 3.387 83.0157910000013 9.055 71.84411459999998 2.857 77.65431500000003 4.215 57.635512699999985 2.188 105.89927800000005 3.344 105.47912919999997 3.482 70.91659299999993 3.108 70.91913680000118 8.214 76.32306289999994 2.752 80.6073844999993 7.711 67.73405660000041 7.68 77.44210529999985 7.881 74.86896149999994 3.384)
Error minima by case: (0.0 0 5.9347 7 0.0 0 0.0 0 0.2003 1 9.0 1 0.0 0 4.3431 2 2.0 1 1.7396 8 0.3587 1 3.8359 1 12.7997 7 0.4143 1 0.0 0 0.0 0 1.2249 1 11.8309 1 2.0 1 0.2003 6 0.1619 1 13.5851 1 3.1271 1 12.0946 2 1.0 1)
Average genome size in population (length): 116.094
Average program size in population (points): 117.094
Average percent parens in population: 0.009
Minimum age in population: 147.4799710676463
Maximum age in population: 151.6329502510295
Average age in population: 149.5921440206591
Median age in population: 149.6209310334179
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.883
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.883
Total error diversity:				 0.55
Error (vector) diversity:			 0.628
Behavioral diversity:				 0.628
--- Run Statistics ---
Number of program evaluations used so far: 107000
Number of point (instruction) evaluations so far: 206274452
--- Timings ---
Current time: 1529615519617 milliseconds
Total Time:         468.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       165.7 seconds, 35.4%
Fitness Testing:    241.4 seconds, 51.5%
Report:              61.4 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 106
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 107
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 107
;;******************************
;; -*- Number IO problem report - generation 107
Test total error for best: 32267.26760000004
Test mean error for best: 16.13363
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -88.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_flush})
Best program: (float_dec float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_dup_items float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup float_yankdup float_inc integer_yankdup float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan integer_sub integer_fromfloat -56.50848481366526 integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 3.0 1 4.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 590.0623
Mean: 11.801246
Genome size: 117
Size: 118
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2065.178242600002
Median total errors in population: 657.2003
Error averages by case: (71.81448809999999 3.192 79.79799109999882 8.737 54.12776169999999 2.217 67.53737830000007 3.266 71.82754989999916 7.211 84.10340430000002 2.902 84.28810730000002 3.319 80.10882119999879 9.333 79.46356869999998 3.255 115.55585389999997 10.838 54.725820299999995 3.06 93.08446320000003 3.321 80.71790870000115 9.041 69.37603379999999 2.774 79.03042039999998 4.181 51.3481678 2.157 107.52513690000006 3.314 103.52475069999998 3.417 67.67777329999996 3.097 68.78084130000099 8.16 77.01394490000001 2.718 79.75394079999938 7.413 67.22767590000039 7.461 75.38317499999962 7.648 76.00726509999997 3.344)
Error minima by case: (0.0 0 1.3235 7 0.0 0 0.0 0 0.2003 1 9.0 1 2.0 1 4.3431 2 0.5122 1 1.7401 8 1.0 1 5.9229 1 12.7997 7 0.1428 1 0.0 0 0.0 0 2.4832 1 24.918 1 2.0 1 0.2003 6 0.18 1 5.5851 1 6.0474 1 13.0968 2 1.0 1)
Average genome size in population (length): 116.42
Average program size in population (points): 117.42
Average percent parens in population: 0.009
Minimum age in population: 148.610869342286
Maximum age in population: 152.8312288818074
Average age in population: 150.9530272372794
Median age in population: 151.0004528405807
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.901
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.901
Total error diversity:				 0.575
Error (vector) diversity:			 0.636
Behavioral diversity:				 0.636
--- Run Statistics ---
Number of program evaluations used so far: 108000
Number of point (instruction) evaluations so far: 209184952
--- Timings ---
Current time: 1529615524704 milliseconds
Total Time:         473.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       167.2 seconds, 35.3%
Fitness Testing:    244.4 seconds, 51.6%
Report:              62.1 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 107
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 108
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 108
;;******************************
;; -*- Number IO problem report - generation 108
Test total error for best: 32267.26760000004
Test mean error for best: 16.13363
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -88.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_flush})
Best program: (float_dec float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_dup_items float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup float_yankdup float_inc integer_yankdup float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan integer_sub integer_fromfloat -56.50848481366526 integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 3.0 1 4.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 590.0623
Mean: 11.801246
Genome size: 117
Size: 118
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2489.4321717999997
Median total errors in population: 657.291
Error averages by case: (89.94342379999999 3.441 96.4959135999986 8.752 75.40610919999997 2.528 86.06917380000007 3.482 86.67843669999901 7.263 102.63856549999997 3.195 102.82509350000007 3.549 95.13084589999855 9.481 96.56846359999999 3.544 133.58642899999998 10.901 69.82782349999997 3.245 112.68796860000002 3.557 96.21177110000136 9.074 89.05979010000004 3.062 96.57227089999996 4.426 68.32163289999994 2.386 124.85427060000009 3.53 118.71917939999996 3.834 82.91031890000004 3.342 84.89824230000131 8.226 93.74083979999999 2.945 92.9948173999992 7.652 79.68450020000034 7.567 89.66320409999955 7.676 93.73208739999995 3.553)
Error minima by case: (0.0 0 1.2003 7 0.0 0 0.0 0 0.2003 2 11.0 1 2.0 1 3.3431 1 1.0 1 1.7666 8 1.0 1 4.9229 1 10.3207 7 0.0 0 0.0 0 0.0 0 5.6681 1 23.918 1 2.0 1 0.2003 6 0.1126 1 9.5851 1 6.0474 1 13.173 2 0.0 0)
Average genome size in population (length): 116.249
Average program size in population (points): 117.249
Average percent parens in population: 0.009
Minimum age in population: 150.055970585713
Maximum age in population: 154.231183430568
Average age in population: 152.3727090976549
Median age in population: 152.4010654539923
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.891
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.891
Total error diversity:				 0.549
Error (vector) diversity:			 0.618
Behavioral diversity:				 0.618
--- Run Statistics ---
Number of program evaluations used so far: 109000
Number of point (instruction) evaluations so far: 212091177
--- Timings ---
Current time: 1529615530028 milliseconds
Total Time:         478.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       168.7 seconds, 35.2%
Fitness Testing:    247.3 seconds, 51.6%
Report:              62.8 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 108
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 109
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 109
;;******************************
;; -*- Number IO problem report - generation 109
Test total error for best: 32267.26760000004
Test mean error for best: 16.13363
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -88.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_flush})
Best program: (float_dec float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_dup_items float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup float_yankdup float_inc integer_yankdup float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan integer_sub integer_fromfloat -56.50848481366526 integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 3.0 1 4.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 590.0623
Mean: 11.801246
Genome size: 117
Size: 118
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2236.192426000002
Median total errors in population: 658.2003
Error averages by case: (77.67398549999997 3.298 88.48011609999871 8.775 62.350707099999994 2.395 73.4966737000001 3.325 79.93402139999907 7.161 90.7472382 3.031 89.9560460000001 3.431 87.9301742999987 9.413 85.30480299999995 3.372 122.66059309999996 10.937 59.991283099999954 3.147 101.04005250000004 3.418 89.30546080000126 9.155 76.62731189999997 2.944 85.19160959999995 4.26 57.831218799999974 2.239 114.36909200000008 3.408 110.12994520000002 3.562 74.94628359999999 3.149 76.99227720000111 8.272 83.27416930000003 2.856 85.71317859999911 7.53 71.34621470000033 7.225 82.14382859999945 7.646 81.35614169999994 3.451)
Error minima by case: (0.0 0 5.42 7 0.0 0 0.0 0 0.2003 2 9.0 1 0.9126 1 4.3431 1 0.0 0 0.7401 8 1.0 1 0.3143 1 4.9429 7 0.3997 1 0.0 0 0.0 0 1.1951 1 29.918 1 2.0 1 0.2003 6 0.2069 1 3.4149 1 5.5406 1 10.88 2 0.0 0)
Average genome size in population (length): 116.566
Average program size in population (points): 117.566
Average percent parens in population: 0.009
Minimum age in population: 151.3312426219446
Maximum age in population: 155.6167840278857
Average age in population: 153.7030456636081
Median age in population: 153.7305114301073
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.894
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.894
Total error diversity:				 0.579
Error (vector) diversity:			 0.663
Behavioral diversity:				 0.663
--- Run Statistics ---
Number of program evaluations used so far: 110000
Number of point (instruction) evaluations so far: 215005327
--- Timings ---
Current time: 1529615535340 milliseconds
Total Time:         484.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       170.3 seconds, 35.2%
Fitness Testing:    250.3 seconds, 51.7%
Report:              63.7 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 109
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 110
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 110
;;******************************
;; -*- Number IO problem report - generation 110
Test total error for best: 32267.26760000004
Test mean error for best: 16.13363
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -88.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_flush})
Best program: (float_dec float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_dup_items float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup float_yankdup float_inc integer_yankdup float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan integer_sub integer_fromfloat -56.50848481366526 integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 3.0 1 4.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 590.0623
Mean: 11.801246
Genome size: 117
Size: 118
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2191.9249231000013
Median total errors in population: 651.0
Error averages by case: (77.73101939999998 3.394 83.12364739999882 8.78 61.84334389999999 2.434 74.74880450000006 3.398 74.30345129999921 7.267 89.71240580000001 3.08 90.76647740000006 3.483 84.9615587999987 9.473 83.95651649999999 3.389 120.14840859999998 10.917 57.690428 3.162 100.29775529999998 3.464 81.9695977000012 8.999 76.69198079999995 2.982 83.80279149999997 4.31 54.83173389999999 2.301 111.78790370000003 3.465 109.0096671 3.632 72.89694569999996 3.088 70.23386590000094 8.192 81.60360759999999 2.907 85.16195749999923 7.501 72.7640632000003 7.169 81.88623069999947 7.715 81.97676089999993 3.522)
Error minima by case: (0.0 0 5.42 7 0.0 0 0.0 0 0.0702 2 8.0 1 1.0 1 3.3431 2 2.027 1 0.0998 7 1.0 1 2.4526 1 9.7997 7 0.4689 1 2.0 1 0.0 0 3.2021 1 0.3442 1 2.0 1 0.2003 6 0.2069 1 5.5851 1 6.1814 1 13.173 2 0.0 0)
Average genome size in population (length): 116.44
Average program size in population (points): 117.44
Average percent parens in population: 0.009
Minimum age in population: 152.7237405370882
Maximum age in population: 157.0057036090965
Average age in population: 154.8802425686146
Median age in population: 154.8846827141366
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.889
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.889
Total error diversity:				 0.557
Error (vector) diversity:			 0.626
Behavioral diversity:				 0.628
--- Run Statistics ---
Number of program evaluations used so far: 111000
Number of point (instruction) evaluations so far: 217916327
--- Timings ---
Current time: 1529615541075 milliseconds
Total Time:         489.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       172.0 seconds, 35.1%
Fitness Testing:    253.4 seconds, 51.7%
Report:              64.4 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 110
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 111
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 111
;;******************************
;; -*- Number IO problem report - generation 111
Test total error for best: 32267.26760000004
Test mean error for best: 16.13363
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -88.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_flush})
Best program: (float_dec float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_dup_items float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup float_yankdup float_inc integer_yankdup float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan integer_sub integer_fromfloat -56.50848481366526 integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 3.0 1 4.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 590.0623
Mean: 11.801246
Genome size: 117
Size: 118
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2257.5811089999993
Median total errors in population: 652.3963
Error averages by case: (80.6750521 3.384 86.34196499999865 8.791 62.177315 2.498 77.81664180000007 3.45 76.54972089999907 7.159 92.83293819999999 3.167 95.22248810000006 3.49 87.32172189999861 9.519 86.96735020000003 3.468 123.4406325 10.894 63.34739259999997 3.179 100.69970400000001 3.573 85.23836680000134 9.083 76.95840219999998 3.021 86.94432109999997 4.37 60.9718113 2.265 115.18741080000008 3.484 110.67008069999997 3.739 73.40517559999995 3.086 74.21209830000119 8.246 85.7594096 2.946 85.67327049999932 7.569 72.83934200000023 7.085 82.76531699999956 7.714 84.84618079999996 3.537)
Error minima by case: (0.0 0 3.42 7 0.0 0 0.0 0 0.1476 2 8.0 1 2.0 1 3.3431 1 0.0 0 0.5431 8 1.0 1 1.0483 1 9.7997 7 0.0 0 0.0 0 0.0 0 5.7397 1 9.0433 1 1.9346 1 0.2003 6 0.2069 1 8.5851 1 6.1814 1 13.173 2 0.0 0)
Average genome size in population (length): 116.641
Average program size in population (points): 117.641
Average percent parens in population: 0.009
Minimum age in population: 153.8059265077151
Maximum age in population: 158.3292729660473
Average age in population: 156.1286953297086
Median age in population: 156.1664320822532
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.888
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.888
Total error diversity:				 0.528
Error (vector) diversity:			 0.603
Behavioral diversity:				 0.604
--- Run Statistics ---
Number of program evaluations used so far: 112000
Number of point (instruction) evaluations so far: 220832377
--- Timings ---
Current time: 1529615546311 milliseconds
Total Time:         495.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       173.5 seconds, 35.0%
Fitness Testing:    256.4 seconds, 51.8%
Report:              65.3 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 111
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 112
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 112
;;******************************
;; -*- Number IO problem report - generation 112
Test total error for best: 32267.26760000004
Test mean error for best: 16.13363
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -88.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction -56.50848481366526})
Best program: (float_dec float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_dup_items float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup float_yankdup float_inc integer_yankdup float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan integer_sub integer_fromfloat -56.50848481366526)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 3.0 1 4.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 590.0623
Mean: 11.801246
Genome size: 116
Size: 117
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2248.1513325000014
Median total errors in population: 651.4005999999999
Error averages by case: (80.73747219999998 3.239 88.31073029999862 8.727 62.58774379999998 2.314 76.46205690000006 3.266 78.89668019999908 7.083 92.27470619999997 2.936 93.7330209 3.374 87.89472759999859 9.237 86.998138 3.287 124.4879854 10.93 58.01857039999998 3.04 100.90843349999999 3.354 88.61256640000144 9.044 77.6269466 2.849 87.1949683 4.208 56.49826009999999 2.107 115.56351200000003 3.337 109.83754899999994 3.476 72.65913699999996 3.014 75.32599770000108 8.169 85.42883149999996 2.778 85.36062709999945 7.28 70.89088150000033 6.765 82.3056355999994 7.537 84.80315429999995 3.382)
Error minima by case: (0.0 0 5.42 7 0.0 0 0.0 0 0.0449 1 8.0 1 0.0 0 6.3431 1 0.0 0 0.2318 8 1.0 1 4.1366 1 12.9429 7 0.2219 1 1.0 1 0.0 0 8.7397 1 3.8585 1 2.0 1 0.2003 6 0.6947 1 6.5851 1 3.5122 1 13.173 2 0.0 0)
Average genome size in population (length): 116.991
Average program size in population (points): 117.991
Average percent parens in population: 0.008
Minimum age in population: 155.1106462230075
Maximum age in population: 159.5250243487794
Average age in population: 157.4457912024414
Median age in population: 157.4790587712859
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.89
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.89
Total error diversity:				 0.526
Error (vector) diversity:			 0.593
Behavioral diversity:				 0.593
--- Run Statistics ---
Number of program evaluations used so far: 113000
Number of point (instruction) evaluations so far: 223757152
--- Timings ---
Current time: 1529615551735 milliseconds
Total Time:         500.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       175.2 seconds, 35.0%
Fitness Testing:    259.5 seconds, 51.8%
Report:              66.0 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 112
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 113
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 113
;;******************************
;; -*- Number IO problem report - generation 113
Test total error for best: 32267.26760000004
Test mean error for best: 16.13363
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -88.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_flush})
Best program: (float_dec float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_dup_items float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup float_yankdup float_inc integer_yankdup float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan integer_sub integer_fromfloat -56.50848481366526 integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 3.0 1 4.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 590.0623
Mean: 11.801246
Genome size: 117
Size: 118
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2266.5152652000015
Median total errors in population: 652.2003
Error averages by case: (78.67028559999999 3.242 87.45779279999867 8.786 64.67338670000002 2.412 74.33995490000005 3.239 77.64449309999904 7.165 91.43376839999999 3.052 92.37938650000007 3.363 88.26147739999863 9.435 87.08127849999998 3.342 122.61125729999998 10.997 65.76121179999997 3.106 102.93071590000007 3.396 86.91058430000136 9.068 79.69465880000003 2.939 86.47420819999998 4.3 63.67489669999998 2.21 113.7923221000001 3.327 112.09566319999999 3.506 77.21597099999997 3.047 76.01343370000119 8.219 84.25302690000002 2.795 86.74903989999932 7.538 73.77839560000027 6.975 83.24489329999945 7.673 82.87316259999997 3.368)
Error minima by case: (0.0 0 5.42 7 0.0 0 0.0 0 0.2003 1 5.0 1 4.0 1 4.3431 2 1.0 1 0.23 8 1.0 1 4.9229 1 0.9153 7 0.0881 1 0.0 0 1.0 1 5.7397 1 16.5698 1 2.0 1 0.2003 6 0.5007 1 1.9142 1 5.6961 1 12.1373 2 1.0 1)
Average genome size in population (length): 116.671
Average program size in population (points): 117.671
Average percent parens in population: 0.009
Minimum age in population: 156.215590228872
Maximum age in population: 160.7306931001027
Average age in population: 158.812610558321
Median age in population: 158.8667768693773
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.897
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.897
Total error diversity:				 0.506
Error (vector) diversity:			 0.583
Behavioral diversity:				 0.584
--- Run Statistics ---
Number of program evaluations used so far: 114000
Number of point (instruction) evaluations so far: 226673927
--- Timings ---
Current time: 1529615557031 milliseconds
Total Time:         506.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       176.9 seconds, 34.9%
Fitness Testing:    262.4 seconds, 51.8%
Report:              66.7 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 113
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 114
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 114
;;******************************
;; -*- Number IO problem report - generation 114
Test total error for best: 32260.26760000004
Test mean error for best: 16.13013
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -87.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_flush})
Best program: (float_dec float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_dup_items float_dup_items float_dec float_add float_dup_items float_dec float_dup_items float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup float_yankdup float_inc float_yankdup float_inc integer_yankdup float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan integer_sub integer_fromfloat -56.50848481366526 integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 2.0 1 4.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 589.0623
Mean: 11.781246
Genome size: 117
Size: 118
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2384.489962000001
Median total errors in population: 652.5
Error averages by case: (82.42648739999998 3.341 93.42479309999855 8.834 70.18777829999999 2.464 78.1801781000001 3.4 83.32597079999891 7.266 95.4551017 3.112 96.41249520000012 3.478 94.63332859999849 9.521 90.4954526999999 3.404 126.29172829999997 11.042 69.82922339999998 3.203 108.26475480000003 3.464 93.37163670000143 9.199 84.5434913 2.989 89.8350105999999 4.345 67.91988229999997 2.311 117.27753810000009 3.438 116.20895100000004 3.613 82.82738129999998 3.237 80.28826650000141 8.324 87.26522560000001 2.905 91.44492369999891 7.572 79.20486700000029 6.821 90.42028799999939 7.859 86.30720749999996 3.506)
Error minima by case: (0.0 0 1.42 7 0.0 0 0.0 0 0.2003 1 11.0 1 2.0 1 1.2568 1 0.0 0 0.0016 8 1.0 1 5.9229 1 12.7997 7 0.0 0 0.0 0 0.0 0 5.2519 1 15.6679 1 2.0 1 0.2003 6 0.1169 1 6.5851 1 5.6961 1 10.6934 2 1.0 1)
Average genome size in population (length): 116.328
Average program size in population (points): 117.328
Average percent parens in population: 0.009
Minimum age in population: 157.7080595600072
Maximum age in population: 162.0524709103974
Average age in population: 160.1299969834149
Median age in population: 160.1429986499442
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.914
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.914
Total error diversity:				 0.514
Error (vector) diversity:			 0.591
Behavioral diversity:				 0.592
--- Run Statistics ---
Number of program evaluations used so far: 115000
Number of point (instruction) evaluations so far: 229582127
--- Timings ---
Current time: 1529615563028 milliseconds
Total Time:         511.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       178.5 seconds, 34.9%
Fitness Testing:    265.8 seconds, 51.9%
Report:              67.4 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 114
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 115
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 115
;;******************************
;; -*- Number IO problem report - generation 115
Test total error for best: 32260.26760000004
Test mean error for best: 16.13013
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -87.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_flush})
Best program: (float_inc 90.20029399850333 float_rot float_dec in1 float_add integer_pop float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_dup_items float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup float_yankdup float_inc float_inc integer_yankdup float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan integer_sub integer_fromfloat -56.50848481366526 integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 2.0 1 4.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 589.0623
Mean: 11.781246
Genome size: 117
Size: 118
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2168.036206300002
Median total errors in population: 650.931
Error averages by case: (75.09009129999998 3.322 85.86639629999894 8.77 59.41213380000001 2.31 70.86241920000006 3.339 75.2556119999993 7.179 86.66128760000001 2.996 90.00874760000006 3.42 85.18364799999884 9.407 82.15028269999998 3.344 118.98598439999999 10.879 59.40629969999996 3.125 98.10290669999999 3.411 84.99387970000109 9.021 74.56453419999997 2.891 81.54913609999996 4.262 59.11019689999996 2.196 111.13238160000003 3.386 107.17903500000004 3.578 70.99556609999998 3.133 72.72052310000092 8.176 80.39618870000002 2.821 82.68071969999954 7.511 70.11701650000019 6.834 80.00160369999955 7.665 79.18661569999996 3.447)
Error minima by case: (0.0 0 5.42 7 0.0 0 0.0 0 0.0521 2 11.0 1 1.0 1 3.3431 2 3.0 1 1.5413 7 1.0 1 3.9792 1 7.9429 7 0.0598 1 0.0 0 1.0 1 6.8104 1 11.9742 1 2.0 1 0.2003 6 0.5093 1 0.4149 1 0.7916 1 11.4069 2 0.0 0)
Average genome size in population (length): 116.381
Average program size in population (points): 117.381
Average percent parens in population: 0.009
Minimum age in population: 158.818786830668
Maximum age in population: 163.3258649403973
Average age in population: 161.4259653518918
Median age in population: 161.4446855856361
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.895
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.895
Total error diversity:				 0.488
Error (vector) diversity:			 0.567
Behavioral diversity:				 0.568
--- Run Statistics ---
Number of program evaluations used so far: 116000
Number of point (instruction) evaluations so far: 232491652
--- Timings ---
Current time: 1529615568328 milliseconds
Total Time:         517.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       180.0 seconds, 34.8%
Fitness Testing:    268.7 seconds, 51.9%
Report:              68.4 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 115
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 116
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 116
;;******************************
;; -*- Number IO problem report - generation 116
Test total error for best: 32260.26760000004
Test mean error for best: 16.13013
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -87.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_mod} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_flush})
Best program: (float_inc 90.20029399850333 float_rot float_dec in1 float_add integer_pop float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_mod float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup float_yankdup float_inc float_inc integer_yankdup float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan integer_sub integer_fromfloat -56.50848481366526 integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 2.0 1 4.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 589.0623
Mean: 11.781246
Genome size: 117
Size: 118
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2473.7495704000007
Median total errors in population: 657.9005999999999
Error averages by case: (86.22657790000001 3.498 95.8041165999985 8.871 73.25467359999999 2.677 82.53632890000009 3.542 87.94915749999903 7.299 99.07862569999996 3.303 101.00231370000007 3.657 96.91786749999842 9.516 93.05750820000003 3.562 128.78477600000002 11.033 73.76511909999996 3.384 111.27645130000008 3.656 96.4717521000015 9.189 87.64791519999999 3.169 93.14072839999999 4.487 71.64785039999997 2.465 120.24744730000015 3.591 119.65663489999996 3.793 83.29784869999997 3.104 85.0730605000013 8.419 91.1103258 3.067 96.70569999999873 7.624 84.09072570000032 6.782 93.33771759999934 7.864 90.45634779999996 3.66)
Error minima by case: (0.0 0 0.42 7 0.0 0 0.0 0 0.2003 2 11.0 1 2.0 1 1.1003 1 1.0 1 0.9174 8 1.0 1 5.8353 1 7.0145 7 0.0 0 0.0 0 1.0 1 3.7397 1 2.1598 1 2.0 1 0.2003 6 0.2069 1 7.5851 1 5.8161 1 9.4878 2 0.0 0)
Average genome size in population (length): 116.393
Average program size in population (points): 117.393
Average percent parens in population: 0.009
Minimum age in population: 160.1235715941951
Maximum age in population: 164.61978122737
Average age in population: 162.7757622712856
Median age in population: 162.8398754836809
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.919
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.919
Total error diversity:				 0.508
Error (vector) diversity:			 0.609
Behavioral diversity:				 0.609
--- Run Statistics ---
Number of program evaluations used so far: 117000
Number of point (instruction) evaluations so far: 235401477
--- Timings ---
Current time: 1529615574195 milliseconds
Total Time:         523.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       181.8 seconds, 34.8%
Fitness Testing:    271.8 seconds, 52.0%
Report:              69.3 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 116
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 117
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 117
;;******************************
;; -*- Number IO problem report - generation 117
Test total error for best: 32260.26760000004
Test mean error for best: 16.13013
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -87.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_mod} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_flush})
Best program: (float_inc 90.20029399850333 float_rot float_dec in1 float_add integer_pop float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_mod float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup float_yankdup float_inc float_inc integer_yankdup float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan integer_sub integer_fromfloat -56.50848481366526 integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 2.0 1 4.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 589.0623
Mean: 11.781246
Genome size: 117
Size: 118
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2527.9940515999997
Median total errors in population: 650.7997
Error averages by case: (88.34703949999998 3.38 98.2979976999983 8.834 74.74927419999997 2.508 85.0606701000001 3.429 88.68163039999878 7.445 101.1780522 3.173 103.80493560000009 3.51 99.39711549999826 9.458 96.77386459999994 3.511 132.1809209 11.003 75.83658239999995 3.261 113.02511390000001 3.583 97.27183860000171 9.116 89.69889850000001 3.039 96.09600339999993 4.403 74.05926109999994 2.4 123.43713090000008 3.44 122.77245079999999 3.664 87.18111119999998 3.318 85.3045059000017 8.288 93.50080310000001 2.92 97.62861389999874 7.788 86.63279720000033 6.909 94.80022469999932 7.96 92.43121529999993 3.506)
Error minima by case: (1.0 1 5.42 7 0.0 0 0.0 0 0.2003 2 10.0 1 1.0 1 3.3431 1 1.0 1 0.9002 8 0.0 0 0.9229 1 10.7997 7 0.0881 1 0.0 0 0.0 0 5.2519 1 5.458 1 2.0 1 0.2003 6 0.3053 1 6.5851 1 5.422 1 12.6599 2 0.0 0)
Average genome size in population (length): 116.701
Average program size in population (points): 117.701
Average percent parens in population: 0.009
Minimum age in population: 161.1235715941951
Maximum age in population: 166.1655001022607
Average age in population: 163.9373862109708
Median age in population: 163.9968623691111
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.908
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.908
Total error diversity:				 0.484
Error (vector) diversity:			 0.568
Behavioral diversity:				 0.569
--- Run Statistics ---
Number of program evaluations used so far: 118000
Number of point (instruction) evaluations so far: 238319027
--- Timings ---
Current time: 1529615579511 milliseconds
Total Time:         528.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       183.4 seconds, 34.7%
Fitness Testing:    274.9 seconds, 52.0%
Report:              70.2 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 117
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 118
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 118
;;******************************
;; -*- Number IO problem report - generation 118
Test total error for best: 32260.26760000004
Test mean error for best: 16.13013
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -87.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_mod} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_flush})
Best program: (float_inc 90.20029399850333 float_rot float_dec in1 float_add integer_pop float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_mod float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup float_yankdup float_inc float_inc integer_yankdup float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan integer_sub integer_fromfloat -56.50848481366526 integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 2.0 1 4.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 589.0623
Mean: 11.781246
Genome size: 117
Size: 118
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2651.1842529
Median total errors in population: 655.7003
Error averages by case: (98.1091444 3.533 99.46685649999846 8.791 79.92706999999997 2.66 96.07577450000012 3.58 89.20635309999902 7.417 110.49737909999999 3.3 111.4182843000001 3.658 100.4607983999984 9.576 105.41848119999993 3.582 140.39555090000002 10.97 75.12958739999999 3.238 117.10143260000004 3.66 98.19166930000151 9.017 94.45356450000004 3.174 105.17569109999992 4.478 74.36759019999995 2.476 132.0800379000001 3.606 126.36173759999997 3.803 89.50210459999997 3.38 87.11630990000143 8.22 102.45234690000002 3.074 99.82851969999871 7.686 87.31125580000034 6.98 97.62820059999939 7.75 102.23351239999992 3.666)
Error minima by case: (0.0 0 5.42 7 0.0 0 0.0 0 0.2003 2 11.0 1 0.0 0 3.3431 1 0.5122 1 0.2523 8 0.0 0 4.9229 1 12.7997 7 0.0881 1 0.0 0 0.0 0 3.5189 1 0.3283 1 2.0 1 0.2003 6 0.1715 1 7.5851 1 5.422 1 13.3241 2 0.0 0)
Average genome size in population (length): 116.57
Average program size in population (points): 117.57
Average percent parens in population: 0.009
Minimum age in population: 162.5687035255781
Maximum age in population: 167.2489519698713
Average age in population: 165.1891971449476
Median age in population: 165.2082787276568
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.917
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.917
Total error diversity:				 0.498
Error (vector) diversity:			 0.597
Behavioral diversity:				 0.598
--- Run Statistics ---
Number of program evaluations used so far: 119000
Number of point (instruction) evaluations so far: 241233302
--- Timings ---
Current time: 1529615585354 milliseconds
Total Time:         534.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       184.9 seconds, 34.6%
Fitness Testing:    278.2 seconds, 52.1%
Report:              70.9 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 118
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 119
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 119
;;******************************
;; -*- Number IO problem report - generation 119
Test total error for best: 32259.93160000004
Test mean error for best: 16.12997
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -88.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 21.0450896319 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 21.04508963191543} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_add} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_sub} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction -56.50848481366526})
Best program: (float_dec float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec integer_rot float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 21.04508963191543 in1 float_dup_items integer_yankdup float_yankdup float_inc integer_yankdup float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_add float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_sub float_dup_items float_dec float_dup in2 integer_rot float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan integer_sub integer_fromfloat -56.50848481366526)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 3.0 1 4.7997 7 20.0 1 19.7131 9 6.1633 7 13.4528 9 15.0 2]
Total: 588.5295000000001
Mean: 11.77059
Genome size: 116
Size: 117
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2620.0184582999996
Median total errors in population: 654.2003
Error averages by case: (94.22295719999997 3.606 101.66022979999848 8.856 77.87446440000001 2.694 91.32509570000009 3.642 93.36749329999894 7.345 106.98076049999999 3.38 109.12636100000006 3.734 102.37502839999846 9.557 100.97565939999993 3.684 136.50089970000002 11.005 78.14532349999996 3.34 115.49126900000007 3.725 101.1641534000015 9.17 92.11758850000001 3.228 100.93276929999995 4.58 75.75096739999996 2.458 127.74932400000007 3.693 123.85863810000002 3.898 86.43983569999997 3.283 89.61956600000134 8.354 98.61084720000005 3.132 101.16289769999885 7.749 85.01855630000023 6.959 98.50824139999939 7.92 98.31553139999994 3.732)
Error minima by case: (0.0 0 0.42 7 0.0 0 0.0 0 0.2003 1 9.0 1 1.0 1 5.3431 1 0.5122 1 0.9132 8 0.0 0 1.6901 1 10.7997 7 0.1014 1 0.0 0 0.0 0 4.7397 1 6.305 1 1.0 1 0.2003 6 0.1126 1 7.5851 1 5.0958 1 13.4528 2 0.0 0)
Average genome size in population (length): 117.223
Average program size in population (points): 118.223
Average percent parens in population: 0.008
Minimum age in population: 164.2946399646508
Maximum age in population: 168.7084446786063
Average age in population: 166.5035913050366
Median age in population: 166.5379016297699
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.902
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.902
Total error diversity:				 0.522
Error (vector) diversity:			 0.599
Behavioral diversity:				 0.601
--- Run Statistics ---
Number of program evaluations used so far: 120000
Number of point (instruction) evaluations so far: 244163927
--- Timings ---
Current time: 1529615590706 milliseconds
Total Time:         539.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       186.5 seconds, 34.6%
Fitness Testing:    281.2 seconds, 52.1%
Report:              71.8 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 119
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 120
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 120
;;******************************
;; -*- Number IO problem report - generation 120
Test total error for best: 32998.88520000005
Test mean error for best: 16.49944
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -86.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_sin} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction -56.776723240265056})
Best program: (float_inc 90.20029399850333 float_rot float_dec in1 float_add integer_pop float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_dup_items float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_sin 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup integer_yankdup float_yankdup float_inc integer_yankdup float_yankdup float_inc float_yankdup float_inc integer_yankdup float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan integer_sub integer_fromfloat -56.776723240265056)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 1.0 1 4.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 588.0623
Mean: 11.761246
Genome size: 121
Size: 122
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2392.9633671000006
Median total errors in population: 649.8480500000001
Error averages by case: (84.17142129999998 3.268 94.89699219999858 8.786 66.24451509999999 2.333 79.00038290000009 3.302 85.31339969999921 7.206 95.7818964 3.05 97.89449140000006 3.417 98.2558919999985 9.381 90.85712979999998 3.401 128.10890300000003 10.973 68.02369689999999 3.179 106.43172480000001 3.43 93.61412680000143 9.085 81.1518087 2.918 90.149389 4.323 66.38003729999998 2.181 119.03583700000009 3.381 117.890458 3.604 79.37888489999996 3.218 81.42596300000115 8.263 90.51344539999997 2.801 92.72608259999934 7.61 81.10433040000026 6.743 89.37546499999944 7.771 88.19409349999998 3.419)
Error minima by case: (0.0 0 5.42 7 0.0 0 0.0 0 0.1228 1 10.0 1 1.0 1 6.3431 1 1.0 1 0.9132 8 0.0 0 2.7522 1 5.1166 7 0.1482 1 0.2982 1 0.0 0 4.6681 1 10.7473 1 1.0 1 0.2003 6 0.2069 1 4.5851 1 4.6961 1 13.1472 2 1.0 1)
Average genome size in population (length): 117.314
Average program size in population (points): 118.314
Average percent parens in population: 0.008
Minimum age in population: 165.4100332744497
Maximum age in population: 169.8831866937546
Average age in population: 167.7869319815464
Median age in population: 167.8145996917188
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.889
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.889
Total error diversity:				 0.487
Error (vector) diversity:			 0.575
Behavioral diversity:				 0.575
--- Run Statistics ---
Number of program evaluations used so far: 121000
Number of point (instruction) evaluations so far: 247096802
--- Timings ---
Current time: 1529615596630 milliseconds
Total Time:         545.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       188.2 seconds, 34.5%
Fitness Testing:    284.4 seconds, 52.1%
Report:              72.7 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 120
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 121
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 121
;;******************************
;; -*- Number IO problem report - generation 121
Test total error for best: 32245.26760000004
Test mean error for best: 16.12263
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_mod} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -8.845553435400346} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_flush})
Best program: (float_inc 90.20029399850333 float_rot float_dec in1 float_add integer_pop float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_mod float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup float_yankdup float_inc float_inc integer_yankdup float_yankdup float_inc integer_yankdup float_yankdup float_inc float_inc integer_yankdup float_yankdup in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -8.845553435400346 integer_fromfloat float_tan integer_sub integer_fromfloat -56.50848481366526 integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 0.0 0 4.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 586.0623
Mean: 11.721246
Genome size: 126
Size: 127
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2102.5838715000014
Median total errors in population: 650.2003
Error averages by case: (70.75177389999996 3.206 81.86101189999846 8.817 57.01435850000001 2.277 66.49777200000008 3.246 73.72795469999905 7.24 82.496734 2.955 86.31154140000008 3.325 83.7147952999983 9.594 77.38803969999998 3.309 114.96385729999999 10.922 59.858515299999986 3.025 96.42256620000002 3.354 81.9818802000016 9.121 72.00175990000001 2.853 76.98259889999999 4.223 58.776401599999964 2.18 105.8965097000001 3.306 105.98355230000001 3.486 70.43556529999998 3.078 70.36268330000118 8.27 76.08810270000001 2.747 83.10970969999944 7.609 70.46153500000037 6.832 78.55589089999944 7.703 74.91976179999996 3.341)
Error minima by case: (0.0 0 4.3599 7 0.0 0 0.0 0 0.2003 1 5.0 1 2.0 1 8.3431 1 1.0 1 3.23 8 0.0 0 1.3255 1 10.7997 7 0.0 0 1.0 1 0.0 0 3.2002 1 9.3206 1 0.0 0 0.2003 6 0.2069 1 3.3848 1 4.6961 1 13.1472 2 0.0 0)
Average genome size in population (length): 117.406
Average program size in population (points): 118.406
Average percent parens in population: 0.008
Minimum age in population: 166.4100332744497
Maximum age in population: 171.0747477797887
Average age in population: 169.0927471319627
Median age in population: 169.1420720717947
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.911
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.911
Total error diversity:				 0.487
Error (vector) diversity:			 0.592
Behavioral diversity:				 0.592
--- Run Statistics ---
Number of program evaluations used so far: 122000
Number of point (instruction) evaluations so far: 250031977
--- Timings ---
Current time: 1529615602026 milliseconds
Total Time:         551.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       189.8 seconds, 34.4%
Fitness Testing:    287.5 seconds, 52.2%
Report:              73.6 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 121
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 122
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 122
;;******************************
;; -*- Number IO problem report - generation 122
Test total error for best: 32245.26760000004
Test mean error for best: 16.12263
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_mod} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -8.845553435400346} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_flush})
Best program: (float_inc 90.20029399850333 float_rot float_dec in1 float_add integer_pop float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_mod float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup float_yankdup float_inc float_inc integer_yankdup float_yankdup float_inc integer_yankdup float_yankdup float_inc float_inc integer_yankdup float_yankdup in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -8.845553435400346 integer_fromfloat float_tan integer_sub integer_fromfloat -56.50848481366526 integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 0.0 0 4.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 586.0623
Mean: 11.721246
Genome size: 126
Size: 127
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2025.995640000001
Median total errors in population: 654.7997
Error averages by case: (68.95692279999999 3.104 77.54484549999871 8.691 55.26890659999999 2.171 64.58023000000007 3.123 66.4684956999993 7.13 81.3781799 2.858 83.59263320000007 3.238 78.23744329999865 9.303 77.0211607 3.222 113.98280679999998 10.849 55.44711749999996 3.054 94.51278970000007 3.261 76.94491300000125 8.964 70.44801719999995 2.751 76.29160989999998 4.132 53.059857499999985 2.049 104.8233926000001 3.188 103.75713410000002 3.472 65.21228459999998 2.96 65.46266290000104 8.122 74.016472 2.631 79.36032099999939 7.517 66.65592420000019 6.62 76.44709769999955 7.793 73.08442159999997 3.237)
Error minima by case: (0.0 0 0.2003 6 0.0 0 0.0 0 0.2003 2 4.0 1 2.0 1 2.2003 1 1.0 1 0.7396 8 0.0 0 12.9229 1 0.9429 7 0.0 0 1.0 1 0.0 0 2.2641 1 19.3777 1 0.0 0 0.2003 6 0.2069 1 6.5851 1 5.4878 1 12.7774 2 0.0 0)
Average genome size in population (length): 117.694
Average program size in population (points): 118.694
Average percent parens in population: 0.008
Minimum age in population: 168.1178923707649
Maximum age in population: 172.4991507820222
Average age in population: 170.4336755645166
Median age in population: 170.4875622283485
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.906
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.906
Total error diversity:				 0.518
Error (vector) diversity:			 0.617
Behavioral diversity:				 0.617
--- Run Statistics ---
Number of program evaluations used so far: 123000
Number of point (instruction) evaluations so far: 252974327
--- Timings ---
Current time: 1529615607852 milliseconds
Total Time:         556.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       191.4 seconds, 34.4%
Fitness Testing:    290.7 seconds, 52.2%
Report:              74.4 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 122
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 123
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 123
;;******************************
;; -*- Number IO problem report - generation 123
Test total error for best: 32245.26760000004
Test mean error for best: 16.12263
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_mod} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -8.845553435400346} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_flush})
Best program: (float_inc 90.20029399850333 float_rot float_dec in1 float_add integer_pop float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_mod float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup float_yankdup float_inc float_inc integer_yankdup float_yankdup float_inc integer_yankdup float_yankdup float_inc float_inc integer_yankdup float_yankdup in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -8.845553435400346 integer_fromfloat float_tan integer_sub integer_fromfloat -56.50848481366526 integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 0.0 0 4.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 586.0623
Mean: 11.721246
Genome size: 126
Size: 127
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2382.5521123000008
Median total errors in population: 657.0
Error averages by case: (81.8510007 3.431 93.9074743999985 8.813 67.78836609999998 2.588 79.75703080000008 3.469 85.323874999999 7.276 94.39915229999997 3.188 97.4597851000001 3.575 94.31695629999845 9.517 89.027943 3.479 125.48162889999995 10.936 71.90134679999996 3.282 106.64102100000002 3.566 93.20256480000153 9.092 82.05547029999995 3.105 88.93938299999999 4.395 69.56957889999997 2.451 117.08117520000009 3.546 116.30565849999999 3.731 82.08982029999993 3.342 81.52184930000121 8.271 87.60461689999994 3.005 92.97810969999921 7.721 79.36092180000027 6.732 88.08958269999944 7.83 85.96280049999994 3.594)
Error minima by case: (0.0 0 4.3925 7 0.0 0 0.0 0 0.2003 1 3.0 1 3.0 1 2.3925 1 0.0 0 0.7742 8 0.0 0 12.9229 1 7.7997 7 0.0881 1 1.0 1 0.0 0 1.7397 1 5.9975 1 0.0 0 0.2003 6 0.2069 1 6.5851 1 5.2712 1 11.8344 2 1.0 1)
Average genome size in population (length): 117.74
Average program size in population (points): 118.74
Average percent parens in population: 0.008
Minimum age in population: 169.3662903601485
Maximum age in population: 174.1209913599709
Average age in population: 171.7753037834648
Median age in population: 171.8125910625347
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.914
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.914
Total error diversity:				 0.523
Error (vector) diversity:			 0.628
Behavioral diversity:				 0.629
--- Run Statistics ---
Number of program evaluations used so far: 124000
Number of point (instruction) evaluations so far: 255917827
--- Timings ---
Current time: 1529615613217 milliseconds
Total Time:         562.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       192.9 seconds, 34.3%
Fitness Testing:    293.7 seconds, 52.3%
Report:              75.3 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 123
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 124
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 124
;;******************************
;; -*- Number IO problem report - generation 124
Test total error for best: 32245.26760000004
Test mean error for best: 16.12263
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_mod} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -8.845553435400346} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_flush})
Best program: (float_inc 90.20029399850333 float_rot float_dec in1 float_add integer_pop float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_mod float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup float_yankdup float_inc float_inc integer_yankdup float_yankdup float_inc integer_yankdup float_yankdup float_inc float_inc integer_yankdup float_yankdup in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -8.845553435400346 integer_fromfloat float_tan integer_sub integer_fromfloat -56.50848481366526 integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 0.0 0 4.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 586.0623
Mean: 11.721246
Genome size: 126
Size: 127
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2190.453464200001
Median total errors in population: 658.5
Error averages by case: (76.75260869999997 3.389 83.76701609999888 8.81 60.58851299999999 2.485 73.03042670000005 3.392 77.81768529999923 7.342 88.97572870000003 3.114 90.37033280000006 3.513 85.96212009999886 9.306 83.23887449999998 3.429 119.9374385 10.911 59.780840699999956 3.153 99.0095655 3.531 83.16130890000105 9.056 74.98466449999998 2.991 83.14423849999994 4.344 56.82779289999997 2.211 111.50463230000005 3.493 108.72611280000002 3.706 72.09714799999998 3.125 71.55947250000085 8.21 81.88070389999999 2.923 83.6774738999995 7.483 72.93911750000025 6.671 82.05120029999948 7.719 80.82944759999992 3.532)
Error minima by case: (0.0 0 3.196 7 0.0 0 0.0 0 0.2003 1 7.0 1 0.0 0 3.3431 1 0.0 0 0.0016 7 0.0 0 4.6013 1 0.0847 7 0.0 0 0.0 0 0.0 0 0.8126 1 3.3937 1 0.0 0 0.2003 6 0.2069 1 4.5851 1 5.3463 1 13.2548 2 1.0 1)
Average genome size in population (length): 118.572
Average program size in population (points): 119.572
Average percent parens in population: 0.008
Minimum age in population: 170.6063189817941
Maximum age in population: 175.2509228630769
Average age in population: 173.077154356833
Median age in population: 173.1103641739941
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.918
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.918
Total error diversity:				 0.571
Error (vector) diversity:			 0.671
Behavioral diversity:				 0.672
--- Run Statistics ---
Number of program evaluations used so far: 125000
Number of point (instruction) evaluations so far: 258882127
--- Timings ---
Current time: 1529615618704 milliseconds
Total Time:         567.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       194.6 seconds, 34.3%
Fitness Testing:    296.8 seconds, 52.3%
Report:              76.3 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 124
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 125
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 125
;;******************************
;; -*- Number IO problem report - generation 125
Test total error for best: 32245.26760000004
Test mean error for best: 16.12263
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -8.845553435400346} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_flush})
Best program: (float_dec float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_dup_items float_dup_items float_dec float_add float_dup_items float_dec float_dup_items float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup float_yankdup float_inc float_inc integer_yankdup float_yankdup float_inc integer_yankdup float_yankdup float_inc float_inc integer_yankdup float_yankdup in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -8.845553435400346 integer_fromfloat float_tan integer_sub integer_fromfloat -56.50848481366526 integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 0.0 0 4.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 586.0623
Mean: 11.721246
Genome size: 124
Size: 125
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2264.1007287000007
Median total errors in population: 654.7997
Error averages by case: (77.41633139999998 3.26 88.23266849999852 8.814 64.39685709999999 2.361 73.28451500000007 3.316 78.79763369999898 7.201 88.6735509 3.005 91.73776310000007 3.397 89.9338203999985 9.464 84.4501809 3.302 121.77733339999995 10.94 65.86765139999997 3.196 102.80723860000003 3.411 87.65058170000147 9.071 79.23692690000001 2.878 83.61312329999997 4.231 63.48255579999998 2.341 112.97005470000008 3.375 112.38432150000004 3.652 78.2221567 3.262 75.92752020000134 8.242 83.21617449999998 2.806 89.19236799999923 7.601 76.60450680000017 6.716 85.76074879999939 7.691 81.51914539999997 3.412)
Error minima by case: (0.0 0 4.42 7 0.0 0 0.0 0 0.0683 2 10.0 1 0.0 0 4.0185 1 0.4878 1 6.2026 8 0.0 0 14.9229 1 1.8958 7 0.0 0 0.0 0 0.0 0 5.1685 1 20.3869 1 0.0 0 0.2003 6 0.7931 1 8.2487 1 5.3463 1 12.6154 2 0.0 0)
Average genome size in population (length): 119.331
Average program size in population (points): 120.331
Average percent parens in population: 0.008
Minimum age in population: 171.6063189817941
Maximum age in population: 176.4855615411891
Average age in population: 174.3896513079195
Median age in population: 174.4336353545848
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.912
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.912
Total error diversity:				 0.551
Error (vector) diversity:			 0.631
Behavioral diversity:				 0.634
--- Run Statistics ---
Number of program evaluations used so far: 126000
Number of point (instruction) evaluations so far: 261865402
--- Timings ---
Current time: 1529615624324 milliseconds
Total Time:         573.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       196.2 seconds, 34.2%
Fitness Testing:    299.8 seconds, 52.3%
Report:              77.0 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 125
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 126
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 126
;;******************************
;; -*- Number IO problem report - generation 126
Test total error for best: 32245.26760000004
Test mean error for best: 16.12263
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_mod} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -8.845553435400346} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_flush})
Best program: (float_inc 90.20029399850333 float_rot float_dec in1 float_add integer_pop float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_mod float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup float_yankdup float_inc float_inc integer_yankdup float_yankdup float_inc integer_yankdup float_yankdup float_inc float_inc integer_yankdup float_yankdup in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -8.845553435400346 integer_fromfloat float_tan integer_sub integer_fromfloat -56.50848481366526 integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 0.0 0 4.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 586.0623
Mean: 11.721246
Genome size: 126
Size: 127
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2749.2279113000013
Median total errors in population: 662.48645
Error averages by case: (98.21964749999995 3.469 107.13143259999849 8.856 83.79874179999999 2.653 94.72301790000016 3.503 98.994659599999 7.38 110.55452000000004 3.309 109.41177010000011 3.616 107.2532274999984 9.538 104.6312003999999 3.558 141.83657220000003 10.985 82.03210709999995 3.253 121.84378130000002 3.625 106.64180390000148 9.176 97.31378739999998 3.157 104.55305469999986 4.489 79.41697139999992 2.471 133.35704160000012 3.57 132.47468159999997 3.917 96.74486819999998 3.461 96.08660090000144 8.367 104.31147070000003 3.065 107.20120929999875 7.71 93.07292920000027 6.747 104.25628219999936 7.886 101.98553219999997 3.62)
Error minima by case: (0.0 0 5.42 7 0.0 0 0.0 0 0.2003 2 7.0 1 2.0 1 3.3431 1 1.0 1 1.7396 8 0.0 0 1.1482 1 9.7997 7 0.07 1 0.0 0 0.0 0 6.2519 1 3.7372 1 0.0 0 0.2003 6 0.6947 1 6.5851 1 5.867 1 12.6154 2 0.0 0)
Average genome size in population (length): 119.862
Average program size in population (points): 120.862
Average percent parens in population: 0.008
Minimum age in population: 172.6063189817941
Maximum age in population: 177.9783922804525
Average age in population: 175.7101229190945
Median age in population: 175.7593027816157
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.898
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.898
Total error diversity:				 0.537
Error (vector) diversity:			 0.624
Behavioral diversity:				 0.627
--- Run Statistics ---
Number of program evaluations used so far: 127000
Number of point (instruction) evaluations so far: 264862002
--- Timings ---
Current time: 1529615629554 milliseconds
Total Time:         578.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       197.8 seconds, 34.2%
Fitness Testing:    302.7 seconds, 52.3%
Report:              77.9 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 126
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 127
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 127
;;******************************
;; -*- Number IO problem report - generation 127
Test total error for best: 32245.26760000004
Test mean error for best: 16.12263
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_mod} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction in2} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction float_inc} {:instruction integer_flush})
Best program: (float_inc 90.20029399850333 float_rot float_dec in1 float_add float_sub float_dec float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_mod float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup float_yankdup float_inc float_inc float_inc float_inc integer_yankdup float_yankdup float_frominteger float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove in2 float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan integer_sub integer_fromfloat float_inc integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 0.0 0 4.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 586.0623
Mean: 11.721246
Genome size: 120
Size: 121
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2484.0187524
Median total errors in population: 654.7997
Error averages by case: (85.97514669999998 3.426 97.18634709999861 8.846 72.75052710000001 2.513 81.94251240000013 3.424 87.96134849999896 7.312 98.2658363 3.166 100.2441812000001 3.554 97.61419209999852 9.478 93.06828729999995 3.503 129.4666455 10.927 75.77018069999995 3.242 111.40398040000005 3.565 96.73773520000148 9.125 87.4921986 3.068 92.7432106999999 4.389 71.86207939999996 2.356 120.85179140000011 3.512 121.5639901 3.706 83.69204459999993 3.089 85.40785760000134 8.31 92.02271510000001 2.951 98.19654079999887 7.775 85.73623040000028 6.875 96.36918209999942 7.975 90.05999109999998 3.547)
Error minima by case: (0.0 0 5.42 7 0.0 0 0.0 0 0.2003 1 9.0 1 1.0 1 4.3431 1 4.0 1 0.7742 9 0.0 0 1.0021 1 3.0194 7 0.1482 1 1.4878 1 0.0 0 7.2519 1 8.9972 1 0.0 0 0.2003 6 0.3053 1 5.3385 1 5.883 1 13.0255 2 1.1426 1)
Average genome size in population (length): 121.213
Average program size in population (points): 122.213
Average percent parens in population: 0.008
Minimum age in population: 173.6063189817941
Maximum age in population: 179.2840521572924
Average age in population: 177.0682997815238
Median age in population: 177.0728498550475
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.906
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.906
Total error diversity:				 0.539
Error (vector) diversity:			 0.624
Behavioral diversity:				 0.626
--- Run Statistics ---
Number of program evaluations used so far: 128000
Number of point (instruction) evaluations so far: 267892352
--- Timings ---
Current time: 1529615635119 milliseconds
Total Time:         584.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       199.5 seconds, 34.1%
Fitness Testing:    306.0 seconds, 52.4%
Report:              78.7 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 127
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 128
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 128
;;******************************
;; -*- Number IO problem report - generation 128
Test total error for best: 32990.88520000005
Test mean error for best: 16.49544
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_sin} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction -56.776723240265056})
Best program: (float_inc 90.20029399850333 float_rot float_dec in1 float_add integer_pop float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_dup_items float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_sin 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup integer_yankdup float_yankdup float_inc integer_yankdup integer_yankdup float_yankdup float_inc integer_add float_yankdup float_inc float_yankdup float_inc integer_yankdup float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan integer_sub integer_fromfloat -56.776723240265056)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 0.0 0 4.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 586.0623
Mean: 11.721246
Genome size: 125
Size: 126
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2329.214473100001
Median total errors in population: 653.2003
Error averages by case: (79.7179154 3.16 91.10776229999847 8.823 66.0705542 2.286 76.05186810000009 3.179 81.74749629999899 7.235 90.6243077 2.919 93.82812420000005 3.314 92.0072522999984 9.524 87.17277169999997 3.236 125.7963338 10.974 67.66713929999996 3.052 105.21943650000001 3.323 91.95936760000157 9.121 81.3558843 2.835 85.64297229999998 4.171 65.91636869999999 2.203 117.59687120000005 3.26 115.47530000000005 3.403 79.22731829999998 3.086 79.64024770000138 8.29 86.618435 2.743 91.79634149999924 7.642 78.28485420000028 6.788 89.20351549999947 7.925 83.70703499999998 3.287)
Error minima by case: (0.0 0 5.42 7 0.0 0 0.0 0 0.2003 2 8.0 1 2.0 1 3.3431 1 0.0972 1 10.5829 9 0.0 0 0.3669 1 4.7022 7 0.0881 1 0.0 0 0.0 0 0.2519 1 6.6018 1 0.0 0 0.2003 6 0.2069 1 2.4024 1 5.883 1 13.4107 2 2.0 1)
Average genome size in population (length): 122.09
Average program size in population (points): 123.09
Average percent parens in population: 0.008
Minimum age in population: 175.564182296932
Maximum age in population: 180.354070584595
Average age in population: 178.3369628443772
Median age in population: 178.3795327615714
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.908
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.908
Total error diversity:				 0.523
Error (vector) diversity:			 0.613
Behavioral diversity:				 0.618
--- Run Statistics ---
Number of program evaluations used so far: 129000
Number of point (instruction) evaluations so far: 270944652
--- Timings ---
Current time: 1529615640421 milliseconds
Total Time:         589.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       201.0 seconds, 34.1%
Fitness Testing:    309.0 seconds, 52.4%
Report:              79.3 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 128
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 129
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 129
;;******************************
;; -*- Number IO problem report - generation 129
Test total error for best: 32245.26760000004
Test mean error for best: 16.12263
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_inc} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_mod} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_yankdup} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction float_inc} {:instruction integer_flush})
Best program: (float_dec float_inc 90.20029399850333 float_rot float_dec in1 float_add integer_pop float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_mod float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup float_yankdup float_inc float_inc float_inc float_inc integer_yankdup float_yankdup float_frominteger float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove float_yankdup float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan integer_sub integer_fromfloat float_inc integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 0.0 0 4.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 586.0623
Mean: 11.721246
Genome size: 122
Size: 123
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2636.4941973
Median total errors in population: 652.0
Error averages by case: (95.10452559999997 3.42 98.49054709999854 8.86 80.90475140000002 2.484 90.91410050000005 3.453 89.48679039999898 7.389 107.9135037 3.193 108.68536180000007 3.558 100.15615999999847 9.474 103.01003299999998 3.52 138.80589749999993 10.976 79.67095679999996 3.287 118.34447630000004 3.552 98.4128333000015 9.108 95.3230261 3.02 102.35958979999998 4.446 78.19655849999997 2.416 130.89815290000007 3.51 126.86456170000001 3.775 91.61744969999998 3.227 86.37819450000147 8.299 99.9737426 2.965 100.138654499999 7.962 88.5482822000003 6.986 96.90103569999941 7.954 99.02101169999997 3.54)
Error minima by case: (0.0 0 5.42 7 0.0 0 0.0 0 0.1446 1 10.0 1 1.4878 1 3.3431 1 0.5122 1 0.7005 8 0.0 0 2.896 1 1.2513 6 0.0 0 0.0 0 0.0 0 5.7397 1 5.099 1 0.0 0 0.2003 6 0.2069 1 1.1541 1 1.7732 1 12.4528 2 1.0 1)
Average genome size in population (length): 122.389
Average program size in population (points): 123.389
Average percent parens in population: 0.008
Minimum age in population: 176.564182296932
Maximum age in population: 181.8597075200971
Average age in population: 179.5801176243795
Median age in population: 179.5999812680566
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.895
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.895
Total error diversity:				 0.524
Error (vector) diversity:			 0.612
Behavioral diversity:				 0.617
--- Run Statistics ---
Number of program evaluations used so far: 130000
Number of point (instruction) evaluations so far: 274004477
--- Timings ---
Current time: 1529615645833 milliseconds
Total Time:         594.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       202.5 seconds, 34.0%
Fitness Testing:    312.2 seconds, 52.5%
Report:              80.1 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 129
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 130
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 130
;;******************************
;; -*- Number IO problem report - generation 130
Test total error for best: 32245.26760000004
Test mean error for best: 16.12263
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_mod} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -8.845553435400346} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_flush})
Best program: (float_inc 90.20029399850333 float_rot float_dec in1 float_add integer_pop float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_mod float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup float_yankdup float_inc float_inc integer_yankdup float_yankdup float_inc integer_yankdup float_yankdup float_inc float_inc integer_yankdup float_yankdup in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -8.845553435400346 integer_fromfloat float_tan integer_sub integer_fromfloat -56.50848481366526 integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 0.0 0 4.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 586.0623
Mean: 11.721246
Genome size: 126
Size: 127
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 1990.3309155000006
Median total errors in population: 654.7997
Error averages by case: (67.83420709999999 3.2 75.36300959999878 8.742 51.56763839999999 2.299 64.16828620000007 3.238 69.01693919999927 7.343 81.0122341 2.926 83.36774320000004 3.356 77.12408789999867 9.411 75.49954549999997 3.293 112.58352489999994 10.906 54.545985599999966 3.089 90.5664408 3.35 76.04641380000128 9.058 66.15976089999997 2.815 75.0921073 4.221 52.345137699999995 2.188 103.72287670000007 3.33 100.4885234 3.655 64.82388699999996 2.916 63.89196230000111 8.257 73.3342264 2.763 75.18457859999963 7.634 64.45645100000029 6.79 73.15160169999952 7.92 72.92674619999997 3.357)
Error minima by case: (0.0 0 0.42 7 0.0 0 0.0 0 0.2003 1 11.0 1 3.0 1 3.3431 1 0.0 0 3.9641 8 0.0 0 4.9229 1 12.7997 7 0.0 0 0.0 0 0.0 0 1.7481 1 13.082 1 0.0 0 0.2003 6 0.2069 1 7.5851 1 4.9098 1 12.7512 2 0.0 0)
Average genome size in population (length): 123.034
Average program size in population (points): 124.034
Average percent parens in population: 0.008
Minimum age in population: 177.5911822408408
Maximum age in population: 183.2582615980221
Average age in population: 180.8300926394917
Median age in population: 180.8982018713077
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.928
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.928
Total error diversity:				 0.546
Error (vector) diversity:			 0.63
Behavioral diversity:				 0.636
--- Run Statistics ---
Number of program evaluations used so far: 131000
Number of point (instruction) evaluations so far: 277080352
--- Timings ---
Current time: 1529615651221 milliseconds
Total Time:         600.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       204.1 seconds, 34.0%
Fitness Testing:    315.2 seconds, 52.5%
Report:              80.8 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 130
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 131
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 131
;;******************************
;; -*- Number IO problem report - generation 131
Test total error for best: 32990.88520000005
Test mean error for best: 16.49544
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_sin} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction -56.776723240265056})
Best program: (float_inc 90.20029399850333 float_rot float_dec in1 float_add integer_pop float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_dup_items float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_sin 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup integer_yankdup float_yankdup float_inc integer_yankdup integer_yankdup float_yankdup float_inc integer_add float_yankdup float_inc float_yankdup float_inc integer_yankdup float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_inc float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan integer_sub integer_fromfloat -56.776723240265056)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 0.0 0 4.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 586.0623
Mean: 11.721246
Genome size: 125
Size: 126
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2595.6042118
Median total errors in population: 656.7997
Error averages by case: (91.79523619999998 3.372 101.88393959999864 8.801 76.97205319999993 2.51 88.45647640000008 3.418 93.6422734999992 7.414 104.72503959999999 3.188 105.2466844000001 3.524 103.44903459999854 9.509 99.72440589999991 3.495 136.13903639999995 10.953 75.00007099999993 3.227 115.39747470000006 3.561 101.73210440000133 9.066 91.27081250000002 3.045 99.21779149999992 4.414 73.63692359999996 2.393 127.29860440000006 3.473 124.44614950000003 3.67 86.56155729999996 2.903 89.40309600000121 8.275 98.17057159999999 2.922 101.57780339999898 7.668 86.18775630000032 6.843 98.7749780999994 7.991 95.73633769999995 3.523)
Error minima by case: (0.0 0 1.42 7 0.0 0 0.0 0 0.2003 1 11.0 1 1.0 1 5.3431 2 1.0 1 1.9641 9 1.0 1 5.5287 1 4.7426 7 0.0881 1 0.0 0 0.0 0 6.0805 1 0.7939 1 0.0 0 0.2003 6 0.1126 1 6.5851 1 6.1633 1 13.4528 2 1.0 1)
Average genome size in population (length): 123.579
Average program size in population (points): 124.579
Average percent parens in population: 0.008
Minimum age in population: 178.5911822408408
Maximum age in population: 184.6436817535601
Average age in population: 182.1772980352664
Median age in population: 182.2158658650647
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.922
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.922
Total error diversity:				 0.543
Error (vector) diversity:			 0.634
Behavioral diversity:				 0.64
--- Run Statistics ---
Number of program evaluations used so far: 132000
Number of point (instruction) evaluations so far: 280169902
--- Timings ---
Current time: 1529615656715 milliseconds
Total Time:         605.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       205.5 seconds, 33.9%
Fitness Testing:    318.3 seconds, 52.6%
Report:              81.5 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 131
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 132
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 132
;;******************************
;; -*- Number IO problem report - generation 132
Test total error for best: 32990.88520000005
Test mean error for best: 16.49544
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_sin} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_max} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction -56.776723240265056})
Best program: (float_dec float_dec float_dec float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_dup_items float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_sin 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup integer_yankdup integer_yankdup integer_yankdup integer_max float_inc float_inc float_yankdup float_inc float_yankdup float_inc integer_yankdup float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_max float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan integer_sub integer_fromfloat -56.776723240265056)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 0.0 0 4.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 586.0623
Mean: 11.721246
Genome size: 126
Size: 127
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2576.5734808000007
Median total errors in population: 664.2003
Error averages by case: (93.37792149999997 3.517 98.43779819999848 8.848 74.83813200000004 2.641 89.49004470000011 3.564 89.3579635999991 7.455 104.4334579 3.298 108.14598330000014 3.64 98.26591879999846 9.493 99.07492739999996 3.606 136.1631205 10.977 76.84367169999997 3.296 113.02001610000002 3.641 98.01997380000142 9.128 90.0619745 3.159 98.80528499999994 4.519 75.78245959999997 2.493 127.62899410000009 3.614 124.84806019999999 3.813 86.15796019999996 3.01 86.68542120000139 8.341 98.56915350000001 3.053 98.35115659999899 7.696 85.96843460000026 6.707 95.67898939999937 7.91 97.47766239999999 3.67)
Error minima by case: (0.0 0 2.42 7 0.0 0 0.0 0 0.0534 2 8.0 1 5.0 1 5.3431 1 0.0 0 2.4569 8 0.0 0 0.3795 1 9.0025 7 0.0328 1 0.0 0 0.0 0 1.2519 1 13.4989 1 0.0 0 0.2003 6 0.2069 1 6.5851 1 5.7885 1 12.6145 2 1.0 1)
Average genome size in population (length): 124.159
Average program size in population (points): 125.159
Average percent parens in population: 0.008
Minimum age in population: 179.5911822408408
Maximum age in population: 185.5739650413826
Average age in population: 183.406752410437
Median age in population: 183.466508659849
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.929
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.929
Total error diversity:				 0.533
Error (vector) diversity:			 0.622
Behavioral diversity:				 0.628
--- Run Statistics ---
Number of program evaluations used so far: 133000
Number of point (instruction) evaluations so far: 283273902
--- Timings ---
Current time: 1529615662293 milliseconds
Total Time:         611.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       207.0 seconds, 33.9%
Fitness Testing:    321.7 seconds, 52.6%
Report:              82.5 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 132
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 133
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 133
;;******************************
;; -*- Number IO problem report - generation 133
Test total error for best: 32990.88520000005
Test mean error for best: 16.49544
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_sin} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction -56.776723240265056})
Best program: (float_inc 90.20029399850333 float_rot float_dec in1 float_add integer_pop float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_dup_items float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_sin 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup integer_yankdup float_yankdup float_inc integer_yankdup integer_yankdup float_yankdup float_inc integer_add float_yankdup float_inc float_yankdup float_inc integer_yankdup float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_inc float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float print_integer integer_sub integer_fromfloat -56.776723240265056)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 0.0 0 4.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 586.0623
Mean: 11.721246
Genome size: 125
Size: 126
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2427.0991704000007
Median total errors in population: 666.7997
Error averages by case: (85.13747729999993 3.445 93.0554793999984 8.805 71.68203560000005 2.512 82.45206900000008 3.468 86.79559879999907 7.462 99.54369960000002 3.132 98.47504870000009 3.58 94.89432479999837 9.483 93.32317489999991 3.45 128.10298980000002 10.931 71.58362859999994 3.226 109.85381049999998 3.56 93.19025440000166 9.069 85.66172089999996 3.069 93.24484449999993 4.372 70.14099779999997 2.387 119.5175395000001 3.529 118.35452649999996 3.723 83.27012839999996 2.901 81.14365710000145 8.288 90.37534060000002 2.966 91.550323399999 7.634 78.37760670000027 6.672 89.23376809999942 7.786 89.11012549999997 3.579)
Error minima by case: (0.0 0 4.0922 7 0.0 0 0.0 0 0.2003 1 4.0 1 2.0 1 3.3431 2 0.0 0 0.0027 7 0.0 0 4.9229 1 10.7997 6 0.0 0 0.0 0 0.0 0 3.2519 1 9.7829 1 0.0 0 0.2003 6 0.2069 1 5.5851 1 5.6961 1 12.3805 2 0.0 0)
Average genome size in population (length): 124.732
Average program size in population (points): 125.732
Average percent parens in population: 0.008
Minimum age in population: 181.8394872132733
Maximum age in population: 186.8010035149486
Average age in population: 184.6834051230333
Median age in population: 184.7002516389806
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.925
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.925
Total error diversity:				 0.555
Error (vector) diversity:			 0.66
Behavioral diversity:				 0.665
--- Run Statistics ---
Number of program evaluations used so far: 134000
Number of point (instruction) evaluations so far: 286392227
--- Timings ---
Current time: 1529615668268 milliseconds
Total Time:         617.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       208.5 seconds, 33.8%
Fitness Testing:    325.3 seconds, 52.7%
Report:              83.2 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 133
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 134
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 134
;;******************************
;; -*- Number IO problem report - generation 134
Test total error for best: 32990.88520000005
Test mean error for best: 16.49544
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_inc} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_mod} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_sin} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction in2} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction float_inc} {:instruction integer_flush})
Best program: (float_dec float_inc 90.20029399850333 float_rot float_dec in1 integer_pop float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_mod float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_sin 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup float_yankdup float_inc float_inc float_inc float_inc integer_yankdup float_yankdup float_frominteger float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove in2 float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan integer_sub integer_fromfloat float_inc integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 0.0 0 4.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 586.0623
Mean: 11.721246
Genome size: 121
Size: 122
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2594.0095577999996
Median total errors in population: 664.4698
Error averages by case: (92.15124789999997 3.473 99.93035999999847 8.912 76.13274930000003 2.623 87.1178968000001 3.516 92.50565349999904 7.574 102.8966402 3.283 104.82127910000004 3.621 102.39057239999839 9.644 97.8318401 3.569 134.89536179999996 11.028 76.08299979999997 3.325 115.67306450000005 3.626 101.11237500000155 9.231 91.11428019999994 3.161 97.59940059999997 4.489 74.83399919999998 2.567 126.41780960000008 3.589 126.56387699999998 3.781 92.21137709999996 3.131 89.08946830000147 8.465 97.96488900000001 3.051 100.57095599999872 7.834 88.25960290000022 6.96 97.6414628999993 7.925 96.19839459999996 3.624)
Error minima by case: (0.0 0 0.2003 6 0.0 0 0.0 0 0.2003 2 5.0 1 6.2233 1 2.2003 2 2.0 1 2.2318 8 0.0 0 9.9229 1 10.7997 7 0.0 1 0.0 0 0.0 0 4.7397 1 15.5134 1 0.0 0 0.2003 6 0.9877 1 6.5851 1 6.1633 1 12.3805 2 1.0 1)
Average genome size in population (length): 124.377
Average program size in population (points): 125.377
Average percent parens in population: 0.008
Minimum age in population: 182.8394872132733
Maximum age in population: 188.040810096706
Average age in population: 185.892242397282
Median age in population: 185.931926757795
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.935
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.935
Total error diversity:				 0.548
Error (vector) diversity:			 0.649
Behavioral diversity:				 0.655
--- Run Statistics ---
Number of program evaluations used so far: 135000
Number of point (instruction) evaluations so far: 289501677
--- Timings ---
Current time: 1529615673768 milliseconds
Total Time:         622.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       210.0 seconds, 33.7%
Fitness Testing:    328.3 seconds, 52.7%
Report:              84.1 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 134
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 135
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 135
;;******************************
;; -*- Number IO problem report - generation 135
Test total error for best: 32990.88520000005
Test mean error for best: 16.49544
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_sin} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction -56.776723240265056})
Best program: (float_inc 90.20029399850333 float_rot float_dec in1 float_add integer_pop float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_dup_items float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_sin 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup integer_yankdup float_yankdup float_inc integer_yankdup integer_yankdup float_yankdup float_inc integer_add float_yankdup float_inc float_yankdup float_inc integer_yankdup float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_inc float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float print_integer integer_sub integer_fromfloat -56.776723240265056)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 0.0 0 4.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 586.0623
Mean: 11.721246
Genome size: 125
Size: 126
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2632.6758017
Median total errors in population: 662.7003
Error averages by case: (92.87870929999998 3.502 101.50316449999845 8.842 78.45336769999999 2.733 89.93709970000009 3.504 92.72343499999909 7.329 104.97853370000003 3.29 108.51126460000006 3.63 102.24012449999836 9.57 99.46351809999996 3.579 135.7213543999999 11.027 81.39773309999995 3.25 116.45433230000002 3.665 101.57680620000154 9.164 92.71869650000002 3.194 98.990714 4.474 79.96610709999993 2.436 127.95941020000006 3.577 125.70479699999999 3.854 93.35036559999998 2.986 89.79790500000145 8.356 97.71619129999999 3.08 101.96359789999893 7.822 90.05227560000027 6.986 100.23611509999941 7.92 96.95118329999993 3.659)
Error minima by case: (0.0 0 0.58 7 0.0 0 0.0 0 0.2003 2 9.0 1 1.0 1 3.3431 2 1.0 1 0.7942 8 1.0 1 4.9229 1 10.5385 7 0.0881 1 1.0 1 0.0 0 0.7397 1 13.3985 1 0.0 0 0.2003 6 0.2069 1 8.5851 1 5.2157 1 12.3805 2 0.0 0)
Average genome size in population (length): 124.103
Average program size in population (points): 125.103
Average percent parens in population: 0.008
Minimum age in population: 185.2514699037075
Maximum age in population: 189.5201331954741
Average age in population: 187.2095308547597
Median age in population: 187.2307323330184
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.929
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.929
Total error diversity:				 0.559
Error (vector) diversity:			 0.645
Behavioral diversity:				 0.652
--- Run Statistics ---
Number of program evaluations used so far: 136000
Number of point (instruction) evaluations so far: 292604277
--- Timings ---
Current time: 1529615679314 milliseconds
Total Time:         628.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       211.6 seconds, 33.7%
Fitness Testing:    331.6 seconds, 52.8%
Report:              85.1 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 135
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 136
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 136
;;******************************
;; -*- Number IO problem report - generation 136
Test total error for best: 32261.26760000004
Test mean error for best: 16.13063
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -8.845553435400346} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction float_tan} {:instruction -9.568963984273623} {:instruction integer_fromfloat} {:instruction in2} {:instruction -56.50848481366526} {:instruction integer_flush})
Best program: (float_dec float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_dup_items float_dup_items float_dec float_mod float_dup_items float_dec integer_inc float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec float_dec 20.512235721913395 in1 float_dup_items integer_yankdup float_yankdup float_inc float_inc integer_yankdup float_yankdup float_inc integer_yankdup float_yankdup float_inc float_inc integer_yankdup float_yankdup in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -8.845553435400346 integer_fromfloat float_tan integer_sub integer_fromfloat -56.50848481366526 float_tan -9.568963984273623 integer_fromfloat in2 -56.50848481366526 integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 0.0 0 4.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 586.0623
Mean: 11.721246
Genome size: 131
Size: 132
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2466.9614828000012
Median total errors in population: 675.23055
Error averages by case: (87.58363869999995 3.419 91.5688973999986 8.815 73.02623129999996 2.603 83.81088730000006 3.469 83.84796329999921 7.285 102.20665259999996 3.247 102.10867250000007 3.552 94.01198569999849 9.472 96.85844669999997 3.514 131.85832939999997 10.994 73.02004489999995 3.264 111.2779347 3.576 92.5022715000014 9.116 87.16301679999994 3.13 96.58412259999993 4.421 70.30378999999998 2.38 122.7788635000001 3.518 122.12763759999996 3.848 84.70707989999993 3.089 79.7598652000013 8.307 93.79562609999999 2.989 92.36110159999902 7.593 81.93844780000022 6.705 90.55194919999938 7.745 91.57802649999994 3.579)
Error minima by case: (0.0 0 4.42 7 0.0 0 0.0 0 0.2003 2 1.0 1 0.0 0 4.3431 2 0.0 0 5.3896 9 0.0 0 6.2253 1 11.0231 7 0.9043 1 0.0 0 0.0 0 6.2519 1 20.5134 1 0.0 0 0.2003 6 0.2069 1 5.5851 1 4.2084 1 12.3805 2 0.0 0)
Average genome size in population (length): 124.202
Average program size in population (points): 125.202
Average percent parens in population: 0.008
Minimum age in population: 186.5236126116319
Maximum age in population: 190.2883234876434
Average age in population: 188.4881164337232
Median age in population: 188.5066811504556
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.937
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.937
Total error diversity:				 0.565
Error (vector) diversity:			 0.653
Behavioral diversity:				 0.657
--- Run Statistics ---
Number of program evaluations used so far: 137000
Number of point (instruction) evaluations so far: 295709352
--- Timings ---
Current time: 1529615685118 milliseconds
Total Time:         634.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       213.1 seconds, 33.6%
Fitness Testing:    335.0 seconds, 52.8%
Report:              85.8 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 136
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 137
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 137
;;******************************
;; -*- Number IO problem report - generation 137
Test total error for best: 32242.26760000004
Test mean error for best: 16.12113
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -8.845553435400346} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_flush})
Best program: (float_dec float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_dup_items float_dup_items float_dec float_add float_dup_items float_dec float_dup_items float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup float_yankdup float_inc float_inc integer_yankdup float_yankdup float_inc integer_yankdup float_yankdup float_inc float_inc integer_yankdup float_yankdup in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -8.845553435400346 integer_fromfloat float_tan integer_sub integer_fromfloat integer_fromfloat -56.50848481366526 integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 0.0 0 4.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 586.0623
Mean: 11.721246
Genome size: 124
Size: 125
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2674.4129698
Median total errors in population: 657.5
Error averages by case: (94.7559754 3.387 105.11903499999845 8.863 79.87944799999997 2.601 91.12681280000011 3.447 96.74928039999898 7.346 107.1249713 3.202 106.00939770000002 3.559 106.6670142999984 9.565 101.61174969999999 3.495 138.25824999999998 11.028 77.84540839999994 3.288 118.07990360000007 3.582 105.96544990000149 9.184 94.06132210000001 3.073 101.56257799999997 4.43 77.03925559999996 2.416 129.58518920000014 3.538 128.6423556 3.808 92.60171130000002 2.946 93.62231860000139 8.424 100.9044701 3.019 104.78852489999878 7.753 90.35036230000027 6.765 102.91605949999934 7.93 98.92212609999996 3.575)
Error minima by case: (0.0 0 0.42 7 0.0 0 0.0 0 0.1474 2 10.0 1 1.0 1 5.8527 1 0.0 0 0.7401 8 0.0 0 7.9229 1 11.767 7 0.0 0 1.0 1 0.0 0 4.2519 1 1.5028 1 0.0 0 0.2003 6 0.2069 1 6.5851 1 6.019 1 12.3805 2 1.0 1)
Average genome size in population (length): 124.007
Average program size in population (points): 125.007
Average percent parens in population: 0.008
Minimum age in population: 187.5236126116319
Maximum age in population: 191.8402856360384
Average age in population: 189.7924505863864
Median age in population: 189.8709297883902
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.918
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.918
Total error diversity:				 0.535
Error (vector) diversity:			 0.62
Behavioral diversity:				 0.626
--- Run Statistics ---
Number of program evaluations used so far: 138000
Number of point (instruction) evaluations so far: 298809552
--- Timings ---
Current time: 1529615690682 milliseconds
Total Time:         639.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       214.6 seconds, 33.6%
Fitness Testing:    338.1 seconds, 52.9%
Report:              86.7 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 137
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 138
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 138
;;******************************
;; -*- Number IO problem report - generation 138
Test total error for best: 32257.022900000044
Test mean error for best: 16.12851
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 21.6633211213 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 21.663321121264993} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction -56.776723240265056})
Best program: (float_dec float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_dup_items float_dup_items float_dec float_add float_dup_items float_dec float_dup_items float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 21.663321121264993 in1 float_dup_items integer_yankdup float_yankdup float_inc float_inc integer_yankdup float_yankdup float_inc integer_yankdup float_yankdup float_inc float_inc integer_yankdup float_yankdup in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float print_integer integer_sub integer_fromfloat -56.776723240265056)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 0.0 0 4.7997 7 20.0 1 19.7131 9 5.545 9 13.4528 9 15.0 2]
Total: 585.9112
Mean: 11.718224
Genome size: 120
Size: 121
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2588.2899190000003
Median total errors in population: 658.10015
Error averages by case: (92.70285329999993 3.498 101.51011629999847 8.814 76.1955512 2.584 89.15924770000008 3.525 93.86252139999901 7.454 106.01322370000003 3.271 105.30961110000014 3.63 100.91026679999848 9.497 98.92035799999992 3.568 134.03446659999997 10.962 75.21079629999997 3.218 114.57645349999999 3.62 101.55736330000157 9.123 90.1149096 3.103 99.44450509999992 4.468 74.05708459999994 2.331 125.71030800000011 3.579 123.76669939999998 3.915 88.64894879999994 2.848 89.65481480000145 8.309 97.10606630000008 3.039 99.7952344999987 7.614 84.8522191000003 6.661 98.19164129999933 7.806 96.93465829999994 3.613)
Error minima by case: (0.0 0 0.42 7 0.0 0 0.0 0 0.1474 1 9.0 1 1.001 1 5.3431 1 0.0 0 0.017 5 0.0 0 5.2603 1 4.9153 7 0.0 0 0.0 0 0.0 0 0.0463 1 5.0364 1 0.0 0 0.2003 6 0.2069 1 6.5851 1 5.545 1 13.4528 2 0.0 0)
Average genome size in population (length): 123.471
Average program size in population (points): 124.471
Average percent parens in population: 0.008
Minimum age in population: 188.6148919924949
Maximum age in population: 192.9823936383911
Average age in population: 191.1514968329805
Median age in population: 191.1877231298873
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.888
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.888
Total error diversity:				 0.519
Error (vector) diversity:			 0.613
Behavioral diversity:				 0.616
--- Run Statistics ---
Number of program evaluations used so far: 139000
Number of point (instruction) evaluations so far: 301896352
--- Timings ---
Current time: 1529615696153 milliseconds
Total Time:         645.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       216.1 seconds, 33.5%
Fitness Testing:    341.2 seconds, 52.9%
Report:              87.6 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 138
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 139
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 139
;;******************************
;; -*- Number IO problem report - generation 139
Test total error for best: 32257.022900000044
Test mean error for best: 16.12851
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 21.6633211213 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 21.663321121264993} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction -56.776723240265056})
Best program: (float_dec float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_dup_items float_dup_items float_dec float_add float_dup_items float_dec float_dup_items float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 21.663321121264993 in1 float_dup_items integer_yankdup float_yankdup float_inc float_inc integer_yankdup float_yankdup float_inc integer_yankdup float_yankdup float_inc float_inc integer_yankdup float_yankdup in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float print_integer integer_sub integer_fromfloat -56.776723240265056)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 0.0 0 4.7997 7 20.0 1 19.7131 9 5.545 9 13.4528 9 15.0 2]
Total: 585.9112
Mean: 11.718224
Genome size: 120
Size: 121
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2265.0521176000007
Median total errors in population: 661.7997
Error averages by case: (79.60617839999995 3.304 87.70739789999878 8.751 64.69879139999999 2.391 75.67329780000004 3.295 78.41007909999935 7.199 92.12386919999999 3.016 93.67179370000005 3.412 88.58184339999873 9.486 86.6423824 3.37 123.82031319999993 10.938 62.80785139999996 3.089 103.40680649999999 3.417 88.71762660000124 9.097 79.11702959999998 2.913 86.25562449999997 4.256 61.890136899999966 2.237 114.64323420000004 3.396 112.52903970000003 3.717 70.45611709999996 2.561 74.98304020000103 8.251 85.1703289 2.83 86.03751079999932 7.483 74.81181090000032 6.676 83.38626109999947 7.657 83.73175269999994 3.43)
Error minima by case: (0.0 0 5.42 7 0.0 0 0.0 0 0.2003 2 8.0 1 2.0 1 4.3431 2 2.0 1 3.0695 8 0.0 0 12.9229 1 10.7997 7 0.0 0 0.0 0 0.0 0 4.7397 1 31.918 1 0.0 0 0.2003 6 0.2069 1 12.5851 1 4.6653 1 2.2189 2 0.0 0)
Average genome size in population (length): 123.169
Average program size in population (points): 124.169
Average percent parens in population: 0.008
Minimum age in population: 190.2509671867545
Maximum age in population: 194.3886752906965
Average age in population: 192.3957999380328
Median age in population: 192.4364312561754
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.924
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.924
Total error diversity:				 0.535
Error (vector) diversity:			 0.623
Behavioral diversity:				 0.626
--- Run Statistics ---
Number of program evaluations used so far: 140000
Number of point (instruction) evaluations so far: 304975577
--- Timings ---
Current time: 1529615701659 milliseconds
Total Time:         650.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       217.9 seconds, 33.5%
Fitness Testing:    344.2 seconds, 52.9%
Report:              88.5 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 139
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 140
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 140
;;******************************
;; -*- Number IO problem report - generation 140
Test total error for best: 32245.26760000004
Test mean error for best: 16.12263
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_inc} {:instruction float_inc} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_mod} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_yank} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction float_sin} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction float_frominteger})
Best program: (float_dec float_inc float_inc 90.20029399850333 float_rot float_dec in1 float_add integer_pop float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_mod float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup float_yankdup float_inc float_inc integer_yankdup float_yankdup float_inc integer_yankdup float_yankdup float_inc float_inc integer_yankdup float_yankdup in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_yank float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan float_sin -56.50848481366526 integer_div float_frominteger)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 0.0 0 4.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 586.0623
Mean: 11.721246
Genome size: 123
Size: 124
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2727.2764207000014
Median total errors in population: 655.0
Error averages by case: (99.1883132 3.636 104.60019419999837 8.857 82.81213190000001 2.824 95.5733359000001 3.591 96.26757129999888 7.406 112.23373859999998 3.451 112.10514020000014 3.765 105.36002239999827 9.578 106.07057149999991 3.717 141.53162640000002 11.033 80.13546329999996 3.359 120.13835370000002 3.785 105.50055110000169 9.147 96.28847610000004 3.289 105.9807271999999 4.599 78.30569199999996 2.426 133.79700640000007 3.703 130.0698722 4.038 92.07193729999995 3.064 93.62216180000159 8.364 104.14175970000005 3.181 103.64893929999887 7.642 90.4133292000003 6.736 101.4402426999994 7.793 103.24826309999995 3.747)
Error minima by case: (0.0 0 1.4759 7 0.0 0 0.0 0 0.2003 2 4.0 1 1.0 1 1.0107 2 2.0 1 1.9002 8 0.0 0 4.9229 1 11.7997 7 0.0881 1 0.0 0 0.0 0 3.1493 1 19.5134 1 0.0 0 0.2003 6 0.2223 1 6.5851 1 5.545 1 13.4528 2 1.0 1)
Average genome size in population (length): 122.757
Average program size in population (points): 123.757
Average percent parens in population: 0.008
Minimum age in population: 191.2509671867545
Maximum age in population: 195.7245476751962
Average age in population: 193.7251738667264
Median age in population: 193.7689575940828
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.929
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.929
Total error diversity:				 0.521
Error (vector) diversity:			 0.608
Behavioral diversity:				 0.613
--- Run Statistics ---
Number of program evaluations used so far: 141000
Number of point (instruction) evaluations so far: 308044527
--- Timings ---
Current time: 1529615707366 milliseconds
Total Time:         656.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       219.5 seconds, 33.5%
Fitness Testing:    347.4 seconds, 52.9%
Report:              89.2 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 140
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 141
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 141
;;******************************
;; -*- Number IO problem report - generation 141
Test total error for best: 32245.26760000004
Test mean error for best: 16.12263
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_add} {:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_mod} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction in2} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction float_inc} {:instruction integer_flush})
Best program: (integer_add float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_dup_items float_dup_items float_dec float_dup_items float_dec float_mod float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup float_yankdup float_inc float_inc float_inc float_inc integer_yankdup float_yankdup float_frominteger float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove in2 float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan integer_sub integer_fromfloat float_inc integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 0.0 0 4.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 586.0623
Mean: 11.721246
Genome size: 119
Size: 120
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2437.961790200001
Median total errors in population: 667.7003
Error averages by case: (84.77872129999996 3.36 93.49633359999858 8.816 70.46055180000002 2.458 82.7737530000001 3.371 87.10783569999913 7.341 98.16777930000002 3.086 98.34099990000007 3.49 94.76646939999848 9.382 92.54020059999998 3.43 128.21373199999996 10.906 71.19717559999995 3.18 109.3291659 3.48 94.94615390000142 9.197 84.8858214 2.977 92.20655559999994 4.289 67.98509759999995 2.388 119.58248950000005 3.44 120.35649060000001 3.777 87.28724769999998 2.933 83.39406170000119 8.372 90.76814009999997 2.901 94.61597839999926 7.337 81.62410290000022 6.457 92.77758989999947 7.644 88.85934279999995 3.488)
Error minima by case: (0.0 0 5.42 7 0.0 0 0.0 0 0.2003 1 8.0 1 1.0 1 5.0669 1 0.0 0 0.2191 8 0.0457 1 1.7472 1 7.8364 7 0.0092 1 0.0 0 0.0 0 0.9627 1 1.3115 1 0.0 0 0.2003 6 1.6947 1 0.2721 1 6.6961 1 13.4528 2 1.0 1)
Average genome size in population (length): 122.467
Average program size in population (points): 123.467
Average percent parens in population: 0.008
Minimum age in population: 192.2509671867545
Maximum age in population: 197.0655923102809
Average age in population: 195.1056989822763
Median age in population: 195.1095389153909
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.919
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.919
Total error diversity:				 0.557
Error (vector) diversity:			 0.639
Behavioral diversity:				 0.641
--- Run Statistics ---
Number of program evaluations used so far: 142000
Number of point (instruction) evaluations so far: 311106202
--- Timings ---
Current time: 1529615712733 milliseconds
Total Time:         661.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       221.0 seconds, 33.4%
Fitness Testing:    350.4 seconds, 53.0%
Report:              90.1 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 141
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 142
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 142
;;******************************
;; -*- Number IO problem report - generation 142
Test total error for best: 32245.26760000004
Test mean error for best: 16.12263
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_inc} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_mod} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction in2} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction float_inc} {:instruction integer_flush})
Best program: (float_dec float_inc 90.20029399850333 float_rot float_dec in1 float_add integer_pop float_dec float_dup_items integer_shove float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_mod float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup float_yankdup float_inc float_inc float_inc float_inc integer_yankdup float_frominteger float_frominteger float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove in2 float_dup in2 float_dec float_dup in2 float_dec integer_dup float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan integer_sub integer_fromfloat float_inc integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 0.0 0 4.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 586.0623
Mean: 11.721246
Genome size: 122
Size: 123
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2727.2178482000004
Median total errors in population: 661.0
Error averages by case: (96.59506059999998 3.512 106.22283089999856 8.884 82.23845100000005 2.667 92.85102980000009 3.538 97.17861509999915 7.387 109.39536770000002 3.328 110.18505680000014 3.662 106.37784039999849 9.526 103.77415249999994 3.652 139.70377029999997 11.03 83.21757089999997 3.377 120.31729729999996 3.728 106.36490220000147 9.213 96.44487760000001 3.177 103.6095036999999 4.538 80.48455479999998 2.443 131.19255920000012 3.613 130.61433749999998 4.004 94.48913809999996 2.878 94.87167890000137 8.409 102.53764430000005 3.055 106.28558229999886 7.703 95.65543200000027 6.833 104.26537999999937 7.881 100.65021429999993 3.657)
Error minima by case: (0.0 0 2.58 7 0.0 0 0.0 0 0.2003 1 9.0 1 2.0 1 3.3431 2 0.0 0 0.0193 8 0.0 0 4.9229 1 7.8364 7 0.0 0 1.0 1 0.0 0 3.6681 1 11.9584 1 0.0 0 0.2003 6 1.2069 1 6.5851 1 6.6961 1 11.8356 2 2.0 1)
Average genome size in population (length): 122.37
Average program size in population (points): 123.37
Average percent parens in population: 0.008
Minimum age in population: 193.2509671867545
Maximum age in population: 198.3027955569049
Average age in population: 196.3824045741568
Median age in population: 196.4183289257706
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.92
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.92
Total error diversity:				 0.516
Error (vector) diversity:			 0.606
Behavioral diversity:				 0.61
--- Run Statistics ---
Number of program evaluations used so far: 143000
Number of point (instruction) evaluations so far: 314165452
--- Timings ---
Current time: 1529615718248 milliseconds
Total Time:         667.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       222.5 seconds, 33.4%
Fitness Testing:    353.5 seconds, 53.0%
Report:              91.0 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 142
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 143
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 143
;;******************************
;; -*- Number IO problem report - generation 143
Test total error for best: 32245.26760000004
Test mean error for best: 16.12263
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction in2} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_shove} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction float_inc} {:instruction integer_flush})
Best program: (float_dec float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_dup_items float_dup_items float_dec float_mod float_dup_items float_dec float_dup_items float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup float_yankdup float_inc float_inc integer_yankdup float_yankdup float_inc integer_yankdup float_yankdup float_inc float_inc integer_yankdup float_yankdup in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove in2 float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup float_shove integer_div print_float float_tan integer_sub integer_fromfloat float_inc integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 0.0 0 4.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 586.0623
Mean: 11.721246
Genome size: 120
Size: 121
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2504.575453599999
Median total errors in population: 666.24865
Error averages by case: (89.98625699999998 3.46 95.15492529999844 8.811 72.98304950000002 2.611 87.18696540000012 3.492 87.20801319999886 7.349 101.73575609999999 3.247 104.5887808000001 3.599 96.8103353999984 9.468 96.4734339 3.55 133.0120987 11.009 73.64973319999994 3.255 110.77088810000002 3.638 95.44570510000156 9.156 87.6460193 3.123 96.22047069999995 4.458 71.23305759999995 2.412 124.74968680000009 3.548 120.47835330000005 3.838 84.74954149999996 2.852 83.45454910000149 8.324 94.48864700000004 3.021 95.21230239999889 7.76 84.55830290000021 6.891 92.3606184999994 7.919 94.02296279999995 3.604)
Error minima by case: (0.0 0 1.9078 7 0.0 0 0.0 0 0.2003 1 9.0 1 0.0 0 8.3431 2 0.0 0 0.4702 7 0.0 0 7.3751 1 9.7997 7 0.0881 1 0.0 0 0.0 0 0.7612 1 15.3702 1 0.0 0 0.2003 6 0.2069 1 5.5851 1 6.6961 1 11.6058 2 0.0 0)
Average genome size in population (length): 122.343
Average program size in population (points): 123.343
Average percent parens in population: 0.008
Minimum age in population: 194.8288017015776
Maximum age in population: 199.6709170056061
Average age in population: 197.6202430165776
Median age in population: 197.6685091184676
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.928
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.928
Total error diversity:				 0.529
Error (vector) diversity:			 0.611
Behavioral diversity:				 0.616
--- Run Statistics ---
Number of program evaluations used so far: 144000
Number of point (instruction) evaluations so far: 317224027
--- Timings ---
Current time: 1529615723746 milliseconds
Total Time:         672.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       224.1 seconds, 33.3%
Fitness Testing:    356.7 seconds, 53.0%
Report:              91.9 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 143
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 144
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 144
;;******************************
;; -*- Number IO problem report - generation 144
Test total error for best: 32245.26760000004
Test mean error for best: 16.12263
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_mod} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_min} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction -56.50848481366526})
Best program: (float_dec float_dec 90.20029399850333 float_rot float_rot float_dec in1 float_add integer_pop float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_mod float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup float_yankdup float_inc float_inc integer_yankdup float_yankdup float_inc integer_yankdup float_yankdup float_inc float_inc integer_yankdup float_yankdup in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_min in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan integer_sub integer_fromfloat -56.50848481366526)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 0.0 0 4.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 586.0623
Mean: 11.721246
Genome size: 124
Size: 125
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2478.9991147000005
Median total errors in population: 668.2695
Error averages by case: (88.00240199999999 3.446 96.4279938999986 8.769 72.06528309999999 2.519 84.34112210000015 3.471 89.82643209999904 7.241 100.82037259999998 3.179 101.18820810000014 3.583 96.9425462999985 9.474 94.91842199999988 3.477 130.705562 10.898 70.04850939999997 3.071 109.84289639999997 3.531 97.94773950000143 9.126 86.22922759999997 3.042 94.86432879999987 4.383 71.32540509999994 2.463 122.04532710000011 3.535 117.40278239999992 3.847 84.04863179999997 2.819 85.30967090000132 8.291 92.27548270000005 2.98 95.86598479999903 7.524 82.61130670000021 6.79 93.05776749999939 7.719 92.11570979999995 3.592)
Error minima by case: (0.0 0 0.42 7 0.0 0 0.0 0 0.0934 1 10.0 1 2.0 1 3.3431 1 0.0 0 0.0016 8 0.0 0 4.9229 1 11.7997 7 0.0 0 0.0 0 0.0 0 2.7397 1 8.082 1 0.0 0 0.2003 6 0.2069 1 6.5851 1 3.1271 1 11.6058 2 0.0 0)
Average genome size in population (length): 122.216
Average program size in population (points): 123.216
Average percent parens in population: 0.008
Minimum age in population: 195.8288017015776
Maximum age in population: 200.9797315580749
Average age in population: 198.8234712537496
Median age in population: 198.8693477790978
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.926
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.926
Total error diversity:				 0.531
Error (vector) diversity:			 0.599
Behavioral diversity:				 0.604
--- Run Statistics ---
Number of program evaluations used so far: 145000
Number of point (instruction) evaluations so far: 320279452
--- Timings ---
Current time: 1529615729331 milliseconds
Total Time:         678.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       225.6 seconds, 33.3%
Fitness Testing:    360.1 seconds, 53.1%
Report:              92.6 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 144
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 145
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 145
;;******************************
;; -*- Number IO problem report - generation 145
Test total error for best: 32245.26760000004
Test mean error for best: 16.12263
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction tagged_742} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction float_sin} {:instruction -56.50848481366526} {:instruction integer_div} {:instruction float_frominteger})
Best program: (float_dec float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_dup_items float_dup_items float_dec float_add float_dup_items float_dec float_dup_items float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 90.20029399850333 float_dec in1 in1 float_yank float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items tagged_742 float_yankdup float_inc float_inc integer_yankdup float_yankdup float_inc integer_yankdup float_yankdup float_yankdup float_inc integer_dup_items float_yankdup float_inc in2 in1 float_dup_items float_dec float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan float_sin -56.50848481366526 integer_div float_frominteger)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 0.0 0 4.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 586.0623
Mean: 11.721246
Genome size: 120
Size: 121
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2565.8343616
Median total errors in population: 667.7997
Error averages by case: (91.09639629999997 3.454 98.46070219999865 8.823 76.74042229999996 2.728 87.20244000000014 3.493 92.47109319999917 7.449 106.49516469999996 3.363 103.9330362000001 3.615 100.63271469999852 9.516 100.10233359999995 3.609 134.0091696999999 10.974 75.02219279999993 3.33 114.1936681000001 3.663 99.02838600000133 9.152 90.50490290000009 3.216 100.5592418999999 4.509 72.32958929999994 2.486 125.30851350000012 3.561 123.24695030000002 3.809 85.21906889999997 2.76 87.4785316000013 8.343 95.89746210000008 3.045 98.25484439999873 7.567 85.99494790000024 6.824 95.88341409999934 7.721 95.15517489999993 3.604)
Error minima by case: (0.9114 1 0.42 7 0.0 0 0.0 0 0.2003 1 7.0 1 1.0 1 3.3431 2 0.0 0 4.3343 7 0.0 0 7.9229 1 11.7997 7 0.0 0 2.0 1 0.0 0 0.0849 1 13.8397 1 0.0 0 0.2003 6 0.1619 1 12.5851 1 5.4953 1 11.6058 2 0.0 0)
Average genome size in population (length): 121.932
Average program size in population (points): 122.932
Average percent parens in population: 0.008
Minimum age in population: 196.8288017015776
Maximum age in population: 202.3155840664669
Average age in population: 200.0842694623643
Median age in population: 200.1267931502065
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.936
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.936
Total error diversity:				 0.545
Error (vector) diversity:			 0.627
Behavioral diversity:				 0.633
--- Run Statistics ---
Number of program evaluations used so far: 146000
Number of point (instruction) evaluations so far: 323327777
--- Timings ---
Current time: 1529615734579 milliseconds
Total Time:         683.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       227.1 seconds, 33.2%
Fitness Testing:    363.2 seconds, 53.1%
Report:              93.3 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 145
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 146
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 146
;;******************************
;; -*- Number IO problem report - generation 146
Test total error for best: 32245.26760000004
Test mean error for best: 16.12263
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_inc} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_mod} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction in2} {:instruction float_dup} {:instruction float_stackdepth} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_fromfloat})
Best program: (float_dec float_inc 90.20029399850333 float_rot float_dec in1 float_add integer_pop float_dec float_dup_items integer_shove float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_mod float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup float_yankdup float_inc float_inc float_inc float_inc integer_yankdup float_frominteger float_frominteger float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove in2 float_dup float_stackdepth float_dec float_dup in2 float_dec integer_dup float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan integer_sub integer_fromfloat)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 0.0 0 4.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 586.0623
Mean: 11.721246
Genome size: 120
Size: 121
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2564.3208355
Median total errors in population: 672.6700999999999
Error averages by case: (89.32935939999996 3.477 101.01579829999848 8.856 76.0703261 2.716 85.57900560000007 3.476 92.46650029999901 7.386 103.0895493 3.302 102.80514560000007 3.639 102.24715579999841 9.569 97.00303479999995 3.567 132.4297519 11.034 74.89496419999996 3.273 114.35185250000004 3.63 101.03709360000151 9.247 89.96369979999999 3.184 96.92683669999994 4.457 72.62640309999995 2.48 123.68544840000003 3.588 123.7388826 3.858 89.21050949999996 3.125 89.20465850000147 8.435 95.12858530000003 3.091 101.05968099999883 7.605 86.74635650000023 6.799 98.99868579999942 7.857 93.42155089999996 3.639)
Error minima by case: (1.0 1 4.3947 7 0.0 0 0.0 0 0.0239 2 6.0 1 1.4878 1 4.3431 2 0.0 0 1.0016 8 0.0 0 3.8414 1 11.7997 7 0.0598 1 0.0 0 0.0 0 6.5544 1 3.0577 1 0.0 0 0.2003 6 0.2069 1 6.5851 1 2.6961 1 5.4878 2 1.0 1)
Average genome size in population (length): 121.939
Average program size in population (points): 122.939
Average percent parens in population: 0.008
Minimum age in population: 197.8288017015776
Maximum age in population: 203.3332886965062
Average age in population: 201.3634176752837
Median age in population: 201.4056275528842
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.934
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.934
Total error diversity:				 0.552
Error (vector) diversity:			 0.634
Behavioral diversity:				 0.64
--- Run Statistics ---
Number of program evaluations used so far: 147000
Number of point (instruction) evaluations so far: 326376252
--- Timings ---
Current time: 1529615740050 milliseconds
Total Time:         688.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       228.6 seconds, 33.2%
Fitness Testing:    366.2 seconds, 53.2%
Report:              94.0 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 146
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 147
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 147
;;******************************
;; -*- Number IO problem report - generation 147
Test total error for best: 32273.26760000004
Test mean error for best: 16.13663
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_add} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_div} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_yankdup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction float_max} {:instruction integer_fromfloat} {:instruction -56.776723240265056})
Best program: (float_dec float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_dup_items float_dup_items float_dec float_add integer_inc float_dec float_dup_items float_dec integer_add float_dec float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup float_yankdup float_inc float_inc integer_yankdup float_yankdup float_inc integer_yankdup float_yankdup float_inc float_inc integer_yankdup float_yankdup in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_div float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_div float_dup in2 float_dec in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_yankdup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan float_max integer_fromfloat -56.776723240265056)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 0.0 0 4.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 586.0623
Mean: 11.721246
Genome size: 121
Size: 122
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2177.5484734
Median total errors in population: 673.1299
Error averages by case: (75.69132469999998 3.338 83.00556529999865 8.753 59.93497459999999 2.521 72.06848660000006 3.364 76.9386392999991 7.159 88.61746159999998 3.127 90.02550850000009 3.475 85.00633329999863 9.359 82.10645939999999 3.418 118.40780149999993 10.902 60.96311169999996 3.118 98.37428400000003 3.528 84.83261590000139 9.12 74.20511279999995 3.011 82.08567199999999 4.304 60.20155699999998 2.299 109.85733440000006 3.44 107.77813870000004 3.79 72.54089149999994 2.803 72.48814170000128 8.324 79.98039760000003 2.912 83.69095459999926 7.466 70.11353820000025 6.611 81.26370849999952 7.741 79.99845999999997 3.489)
Error minima by case: (0.0 0 2.58 7 0.0 0 0.0 0 0.2003 1 6.0 1 2.0 1 3.9469 2 0.0 0 0.0016 8 0.0 0 0.4555 1 12.7997 7 0.8572 1 0.0 0 0.0 0 3.2519 1 5.3016 1 0.0 0 0.2003 6 0.1467 1 7.5851 1 4.8314 1 13.4528 2 1.0 1)
Average genome size in population (length): 122.062
Average program size in population (points): 123.062
Average percent parens in population: 0.008
Minimum age in population: 199.8448465364544
Maximum age in population: 204.9876924767184
Average age in population: 202.7195748554398
Median age in population: 202.740149199136
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.924
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.924
Total error diversity:				 0.565
Error (vector) diversity:			 0.636
Behavioral diversity:				 0.64
--- Run Statistics ---
Number of program evaluations used so far: 148000
Number of point (instruction) evaluations so far: 329427802
--- Timings ---
Current time: 1529615745320 milliseconds
Total Time:         694.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       230.2 seconds, 33.2%
Fitness Testing:    369.2 seconds, 53.2%
Report:              94.9 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 147
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 148
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 148
;;******************************
;; -*- Number IO problem report - generation 148
Test total error for best: 32273.26760000004
Test mean error for best: 16.13663
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 43.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_add} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction -8.845553435400346} {:instruction integer_fromfloat} {:instruction in1} {:instruction integer_sub} {:instruction integer_flush})
Best program: (float_dec float_dec 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_dup_items float_dup_items float_dec float_add integer_inc float_dec float_dup_items float_dec integer_add float_dec float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup float_yankdup float_inc float_inc integer_yankdup float_yankdup float_inc integer_yankdup float_yankdup float_inc float_inc integer_yankdup float_yankdup in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_div float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_pop float_dup in2 float_dec in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove float_dec float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_mod integer_div print_float float_tan -8.845553435400346 integer_fromfloat in1 integer_sub integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 18.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 0.0 0 4.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 586.0623
Mean: 11.721246
Genome size: 123
Size: 124
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2635.3761477000003
Median total errors in population: 665.0208500000001
Error averages by case: (96.2310041 3.645 100.67907589999878 8.866 77.65882620000001 2.836 92.82159960000013 3.647 93.50693299999926 7.417 109.74137669999998 3.455 110.9585761000001 3.782 101.17507829999867 9.553 102.78465849999992 3.725 138.32586699999996 10.978 78.10676149999993 3.412 114.88804430000003 3.794 101.1365622000012 9.225 91.17302409999998 3.319 103.25441179999993 4.599 77.25566559999997 2.437 130.8047861000001 3.709 123.2493248 4.113 88.26843809999997 2.944 88.49036150000123 8.39 100.11014830000005 3.211 99.31601449999901 7.743 85.84224730000038 6.773 96.04103339999939 7.881 100.31632879999994 3.786)
Error minima by case: (0.0 0 0.42 7 0.0 0 0.0 0 0.2003 2 6.0 1 1.0 1 1.2369 1 1.0 1 0.9149 8 0.0 0 0.3024 1 4.6774 7 0.035 1 0.0 0 0.0 0 2.2718 1 14.9221 1 0.0 0 0.2003 6 0.1896 1 5.5851 1 5.2084 1 13.4528 2 0.0 0)
Average genome size in population (length): 122.062
Average program size in population (points): 123.062
Average percent parens in population: 0.008
Minimum age in population: 202.0547440035192
Maximum age in population: 205.950220053556
Average age in population: 204.0723417199741
Median age in population: 204.0890599279809
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.925
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.925
Total error diversity:				 0.533
Error (vector) diversity:			 0.623
Behavioral diversity:				 0.628
--- Run Statistics ---
Number of program evaluations used so far: 149000
Number of point (instruction) evaluations so far: 332479377
--- Timings ---
Current time: 1529615750894 milliseconds
Total Time:         699.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       231.8 seconds, 33.1%
Fitness Testing:    372.5 seconds, 53.2%
Report:              95.6 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 148
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 149
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 149
;;******************************
;; -*- Number IO problem report - generation 149
Test total error for best: 35586.67090000001
Test mean error for best: 17.79334
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 44.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -29.8202558445
Correct output: 70.2512965501  | Program output: 67.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -127.0189802809
Correct output: 91.9885288633  | Program output: 65.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -76.2026859793
Correct output: -31.9001885201 | Program output: 32.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -25.0770879346
Correct output: 62.2573571201  | Program output: 48.4576511186 
Correct output: -11.0880796195 | Program output: -30.0880796195
Correct output: -98.0730811682 | Program output: -115.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 62.2519145493 
Correct output: -62.0820375564 | Program output: -6.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 22.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 52.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_sin} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 81} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_dec} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_flush})
Best program: (90.20029399850333 float_rot float_dec in1 float_add integer_pop float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_dup_items float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_sin 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup integer_yankdup integer_flush float_inc integer_yankdup integer_yankdup float_yankdup float_inc integer_add float_yankdup float_inc float_yankdup float_inc integer_yankdup float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_inc float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove 81 float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_div integer_dec print_float float_tan integer_sub integer_fromfloat -56.50848481366526 integer_flush)
Errors: [10.0 1 22.2003 8 1.0 2 3.0 2 0.2003 6 21.0 2 26.0 2 24.2003 9 21.0 2 64.0 11 3.0 2 45.0 2 13.7997 8 19.0 2 17.0 3 3.0 1 53.0 2 56.0 1 0.0 0 4.7997 7 21.0 2 19.7131 9 6.6961 8 13.4528 9 14.0 2]
Total: 585.0623
Mean: 11.701246
Genome size: 125
Size: 126
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2402.7214306000014
Median total errors in population: 656.7997
Error averages by case: (88.04987479999997 3.326 89.83623479999864 8.838 71.46571469999999 2.437 83.94268060000003 3.358 81.28881049999899 7.247 100.66674500000003 3.1 101.0365104000001 3.449 90.38465939999857 9.418 95.36712419999996 3.421 132.24109099999995 10.9 64.19121639999999 3.12 109.11018270000004 3.456 90.05318100000136 9.159 85.74236670000006 2.969 94.84116209999995 4.37 61.975317699999984 2.269 123.18150550000007 3.417 116.5733465 3.711 77.42467249999999 2.583 78.48128520000134 8.315 91.58218710000003 2.892 90.83715289999923 7.541 76.67041760000025 6.825 88.32147359999949 7.784 92.08451769999998 3.467)
Error minima by case: (0.0 0 5.42 7 0.0 0 0.0 0 0.2003 2 11.0 1 1.0 1 3.3431 1 0.0 0 4.0695 8 1.0 1 0.3024 1 7.7997 7 0.0 0 0.0 0 0.0 0 0.929 1 6.9221 1 0.0 0 0.2003 6 0.2087 1 2.6152 1 6.6961 1 13.4528 2 0.0 0)
Average genome size in population (length): 121.739
Average program size in population (points): 122.739
Average percent parens in population: 0.008
Minimum age in population: 203.2179430832247
Maximum age in population: 207.1871455071987
Average age in population: 205.3245551970108
Median age in population: 205.3615485651353
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.909
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.909
Total error diversity:				 0.529
Error (vector) diversity:			 0.604
Behavioral diversity:				 0.608
--- Run Statistics ---
Number of program evaluations used so far: 150000
Number of point (instruction) evaluations so far: 335522852
--- Timings ---
Current time: 1529615756284 milliseconds
Total Time:         705.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       233.4 seconds, 33.1%
Fitness Testing:    375.6 seconds, 53.2%
Report:              96.3 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 149
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 150
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 150
;;******************************
;; -*- Number IO problem report - generation 150
Test total error for best: 35586.67090000001
Test mean error for best: 17.79334
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 44.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -29.8202558445
Correct output: 70.2512965501  | Program output: 67.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -127.0189802809
Correct output: 91.9885288633  | Program output: 65.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -76.2026859793
Correct output: -31.9001885201 | Program output: 32.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -25.0770879346
Correct output: 62.2573571201  | Program output: 48.4576511186 
Correct output: -11.0880796195 | Program output: -30.0880796195
Correct output: -98.0730811682 | Program output: -115.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 62.2519145493 
Correct output: -62.0820375564 | Program output: -6.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 22.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 52.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_sin} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 81} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_dec} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_flush})
Best program: (90.20029399850333 float_rot float_dec in1 float_add integer_pop float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_dup_items float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_sin 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup integer_yankdup integer_flush float_inc integer_yankdup integer_yankdup float_yankdup float_inc integer_add float_yankdup float_inc float_yankdup float_inc integer_min float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_inc float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove 81 float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_div integer_dec print_float float_tan integer_sub integer_fromfloat -56.50848481366526 integer_flush)
Errors: [10.0 1 22.2003 8 1.0 2 3.0 2 0.2003 6 21.0 2 26.0 2 24.2003 9 21.0 2 64.0 11 3.0 2 45.0 2 13.7997 8 19.0 2 17.0 3 3.0 1 53.0 2 56.0 1 0.0 0 4.7997 7 21.0 2 19.7131 9 6.6961 8 13.4528 9 14.0 2]
Total: 585.0623
Mean: 11.701246
Genome size: 125
Size: 126
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2281.1863337000004
Median total errors in population: 652.2003
Error averages by case: (79.4345025 3.219 88.42552539999842 8.71 64.83505190000001 2.37 74.55365370000008 3.254 79.08606679999899 7.226 91.86227679999999 2.988 92.21341090000004 3.38 89.56225089999838 9.434 86.843848 3.306 124.01196520000002 10.98 63.210740999999985 3.063 104.49349059999996 3.396 88.92475430000155 9.053 79.91341799999998 2.88 85.92835700000002 4.241 61.516519899999984 2.132 114.74367730000009 3.327 114.07312849999994 3.647 77.90798319999995 2.684 76.16925400000136 8.195 84.73712409999995 2.809 88.82476789999922 7.54 76.4380922000003 6.757 85.26325589999946 7.694 82.55321769999996 3.375)
Error minima by case: (0.0 0 1.0435 7 0.0 0 0.0 0 0.2003 2 5.0 1 0.0 0 7.3431 1 0.0 0 4.7396 8 0.0 0 15.9229 1 10.7997 7 0.0 0 1.0 1 0.0 0 1.2032 1 34.4817 1 0.0 0 0.2003 6 0.2977 1 11.7131 1 5.6961 1 1.6447 2 1.0 1)
Average genome size in population (length): 121.938
Average program size in population (points): 122.938
Average percent parens in population: 0.008
Minimum age in population: 204.3472997791849
Maximum age in population: 208.5537871346771
Average age in population: 206.5930864459846
Median age in population: 206.6386806821776
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.921
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.921
Total error diversity:				 0.513
Error (vector) diversity:			 0.601
Behavioral diversity:				 0.606
--- Run Statistics ---
Number of program evaluations used so far: 151000
Number of point (instruction) evaluations so far: 338571302
--- Timings ---
Current time: 1529615761768 milliseconds
Total Time:         710.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       234.8 seconds, 33.0%
Fitness Testing:    378.7 seconds, 53.3%
Report:              97.0 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 150
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 151
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 151
;;******************************
;; -*- Number IO problem report - generation 151
Test total error for best: 34819.499800000034
Test mean error for best: 17.40975
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 44.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -29.8202558445
Correct output: 70.2512965501  | Program output: 67.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -127.0189802809
Correct output: 91.9885288633  | Program output: 65.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -76.2026859793
Correct output: -31.9001885201 | Program output: 32.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -25.0770879346
Correct output: 62.2573571201  | Program output: 48.4576511186 
Correct output: -11.0880796195 | Program output: -30.0880796195
Correct output: -98.0730811682 | Program output: -115.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 62.2519145493 
Correct output: -62.0820375564 | Program output: -6.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 22.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 52.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_inc} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_mod} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 81} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_dec} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_flush})
Best program: (float_dec float_inc 90.20029399850333 float_rot float_dec in1 float_add integer_pop float_dec float_dup_items integer_shove float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_mod float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup float_yankdup float_inc float_inc float_inc float_inc integer_yankdup float_frominteger float_frominteger float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_min float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove float_shove integer_inc float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove 81 float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_div integer_dec print_float float_tan integer_sub integer_fromfloat -56.50848481366526 integer_flush)
Errors: [10.0 1 22.2003 8 1.0 2 3.0 2 0.2003 6 21.0 2 26.0 2 24.2003 9 21.0 2 64.0 11 3.0 2 45.0 2 13.7997 8 19.0 2 17.0 3 3.0 1 53.0 2 56.0 1 0.0 0 4.7997 7 21.0 2 19.7131 9 6.6961 8 13.4528 9 14.0 2]
Total: 585.0623
Mean: 11.701246
Genome size: 124
Size: 125
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2586.3403811000007
Median total errors in population: 667.8503499999999
Error averages by case: (92.7327399 3.424 99.92719039999851 8.877 76.1518312 2.528 89.5810374000001 3.444 92.79698879999893 7.413 104.3238827 3.206 107.68144380000011 3.56 101.30842019999847 9.481 99.49315959999996 3.531 136.4560804 11.0 77.48745439999995 3.278 113.71026140000002 3.583 99.74614320000146 9.258 90.58644520000001 3.063 98.83767669999993 4.436 75.57134389999995 2.472 127.55560310000008 3.51 122.3870328 3.848 86.79129499999996 2.772 88.0782842000014 8.408 97.79921400000006 2.94 97.52896399999904 7.686 87.32138070000035 6.891 95.74268709999944 7.864 96.71382099999997 3.557)
Error minima by case: (0.0 0 2.58 7 0.0 0 0.0 0 0.2003 1 2.0 1 1.0 1 6.3431 2 1.0 1 2.2318 8 0.0 0 2.9993 1 11.7997 7 0.0 0 1.0 1 0.0 0 4.7397 1 4.9958 1 0.0 0 0.2003 6 0.2069 1 13.5851 1 3.1271 1 13.4528 2 1.0 1)
Average genome size in population (length): 122.272
Average program size in population (points): 123.272
Average percent parens in population: 0.008
Minimum age in population: 205.3472997791849
Maximum age in population: 209.9781803434154
Average age in population: 207.8293040583388
Median age in population: 207.8524648905502
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.928
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.928
Total error diversity:				 0.552
Error (vector) diversity:			 0.627
Behavioral diversity:				 0.632
--- Run Statistics ---
Number of program evaluations used so far: 152000
Number of point (instruction) evaluations so far: 341628127
--- Timings ---
Current time: 1529615767247 milliseconds
Total Time:         716.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       236.4 seconds, 33.0%
Fitness Testing:    381.7 seconds, 53.3%
Report:              97.9 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 151
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 152
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 152
;;******************************
;; -*- Number IO problem report - generation 152
Test total error for best: 35586.67090000001
Test mean error for best: 17.79334
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 44.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -29.8202558445
Correct output: 70.2512965501  | Program output: 67.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -127.0189802809
Correct output: 91.9885288633  | Program output: 65.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -76.2026859793
Correct output: -31.9001885201 | Program output: 32.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -25.0770879346
Correct output: 62.2573571201  | Program output: 48.4576511186 
Correct output: -11.0880796195 | Program output: -30.0880796195
Correct output: -98.0730811682 | Program output: -115.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 62.2519145493 
Correct output: -62.0820375564 | Program output: -6.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 22.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 52.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_inc} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_sin} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction tagged_368} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 81} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_dec} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_flush})
Best program: (float_dec float_inc 90.20029399850333 float_rot float_dec in1 integer_pop float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_dup_items float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_sin 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup integer_yankdup integer_flush float_inc integer_yankdup integer_yankdup float_yankdup float_inc integer_add float_yankdup float_inc float_yankdup float_inc integer_yankdup float_yankdup float_inc in2 in1 float_dup_items float_dec tagged_368 float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_inc float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove 81 float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_div integer_dec print_float float_tan integer_sub integer_fromfloat -56.50848481366526 integer_flush)
Errors: [10.0 1 22.2003 8 1.0 2 3.0 2 0.2003 6 21.0 2 26.0 2 24.2003 9 21.0 2 64.0 11 3.0 2 45.0 2 13.7997 8 19.0 2 17.0 3 3.0 1 53.0 2 56.0 1 0.0 0 4.7997 7 21.0 2 19.7131 9 6.6961 8 13.4528 9 14.0 2]
Total: 585.0623
Mean: 11.701246
Genome size: 126
Size: 127
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2531.9662891000003
Median total errors in population: 659.2003
Error averages by case: (86.91126019999996 3.254 100.63235529999838 8.83 74.6044456 2.399 82.65688830000009 3.285 93.35288919999891 7.291 99.6080334 3.014 101.40888030000008 3.41 99.28639559999829 9.441 94.8831245 3.332 131.57895979999998 10.933 76.99738339999995 3.158 113.64310370000001 3.432 102.13158690000162 9.264 89.08067629999998 2.919 93.6920811 4.209 76.01555219999997 2.342 122.25726340000007 3.348 123.13351430000003 3.754 89.93779079999993 2.898 89.24828260000143 8.321 93.10053890000003 2.819 98.39632489999882 7.622 85.11851300000026 6.845 96.08700449999935 7.818 90.85444089999997 3.411)
Error minima by case: (0.0 0 0.42 7 0.0 0 0.0 0 0.1933 2 9.0 1 1.0 1 6.3431 1 0.0 0 2.2318 8 0.0 0 12.9229 1 11.7997 7 0.3028 1 0.0 0 0.0 0 2.2519 1 9.082 1 0.0 0 0.2003 6 0.2069 1 5.5851 1 6.6418 1 13.1303 2 2.0 1)
Average genome size in population (length): 121.917
Average program size in population (points): 122.917
Average percent parens in population: 0.008
Minimum age in population: 206.8304458989587
Maximum age in population: 211.147260744425
Average age in population: 209.1127639261309
Median age in population: 209.1360784258349
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.916
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.916
Total error diversity:				 0.519
Error (vector) diversity:			 0.595
Behavioral diversity:				 0.601
--- Run Statistics ---
Number of program evaluations used so far: 153000
Number of point (instruction) evaluations so far: 344676077
--- Timings ---
Current time: 1529615772827 milliseconds
Total Time:         721.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       238.0 seconds, 33.0%
Fitness Testing:    384.9 seconds, 53.3%
Report:              98.8 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 152
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 153
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 153
;;******************************
;; -*- Number IO problem report - generation 153
Test total error for best: 35586.67090000001
Test mean error for best: 17.79334
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 44.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -29.8202558445
Correct output: 70.2512965501  | Program output: 67.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -127.0189802809
Correct output: 91.9885288633  | Program output: 65.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -76.2026859793
Correct output: -31.9001885201 | Program output: 32.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -25.0770879346
Correct output: 62.2573571201  | Program output: 48.4576511186 
Correct output: -11.0880796195 | Program output: -30.0880796195
Correct output: -98.0730811682 | Program output: -115.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 62.2519145493 
Correct output: -62.0820375564 | Program output: -6.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 22.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 52.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_inc} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_sin} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction tagged_368} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 81} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_dec} {:instruction print_float} {:instruction float_tan} {:instruction integer_flush})
Best program: (float_dec float_inc 90.20029399850333 float_rot float_dec in1 integer_pop float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_dup_items float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_sin 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup integer_yankdup integer_flush float_inc integer_yankdup integer_yankdup float_yankdup float_inc integer_add float_yankdup float_inc float_yankdup float_inc integer_yankdup float_yankdup float_inc in2 in1 float_dup_items float_dec tagged_368 float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_inc float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove 81 float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_div integer_dec print_float float_tan integer_flush)
Errors: [10.0 1 22.2003 8 1.0 2 3.0 2 0.2003 6 21.0 2 26.0 2 24.2003 9 21.0 2 64.0 11 3.0 2 45.0 2 13.7997 8 19.0 2 17.0 3 3.0 1 53.0 2 56.0 1 0.0 0 4.7997 7 21.0 2 19.7131 9 6.6961 8 13.4528 9 14.0 2]
Total: 585.0623
Mean: 11.701246
Genome size: 123
Size: 124
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2403.8733926
Median total errors in population: 669.0181499999999
Error averages by case: (85.10900859999997 3.351 92.98998579999864 8.87 68.51509660000002 2.57 82.08519950000006 3.382 87.35513919999913 7.354 97.18962470000001 3.188 98.7034478 3.517 94.20236359999859 9.516 91.81872589999998 3.452 128.58530489999995 10.996 67.98931609999997 3.161 106.9276567 3.535 95.04239300000134 9.331 83.0165492 3.088 91.48017139999995 4.361 66.83823369999999 2.471 119.91983510000006 3.47 116.38445620000002 3.674 79.79444079999992 2.769 80.87978750000124 8.405 89.83012779999999 2.96 91.90038929999928 7.78 78.28305400000028 6.915 90.14543959999943 7.94 89.29564559999994 3.536)
Error minima by case: (0.0 0 5.42 7 0.0 0 0.0 0 0.2003 2 9.0 1 1.0 1 3.3431 1 0.0 0 2.0998 8 0.0 0 4.9229 1 11.9429 7 0.0 0 0.9269 1 0.0 0 3.2519 1 16.5295 1 0.0 0 0.2003 6 0.1413 1 6.5851 1 6.0 1 7.0 2 0.0 0)
Average genome size in population (length): 122.076
Average program size in population (points): 123.076
Average percent parens in population: 0.008
Minimum age in population: 208.4043634887474
Maximum age in population: 212.6134001976093
Average age in population: 210.4197061976014
Median age in population: 210.4679125413919
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.92
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.92
Total error diversity:				 0.548
Error (vector) diversity:			 0.64
Behavioral diversity:				 0.644
--- Run Statistics ---
Number of program evaluations used so far: 154000
Number of point (instruction) evaluations so far: 347728027
--- Timings ---
Current time: 1529615778360 milliseconds
Total Time:         727.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       239.6 seconds, 32.9%
Fitness Testing:    388.1 seconds, 53.4%
Report:              99.6 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 153
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 154
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 154
;;******************************
;; -*- Number IO problem report - generation 154
Test total error for best: 35385.72300000002
Test mean error for best: 17.69286
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 48.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_sin} {:instruction 92.00551630298831} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction integer_rot} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 81} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_dec} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_flush})
Best program: (float_dec float_dec 90.20029399850333 float_rot float_dec in1 integer_pop float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_dup_items float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_sin 92.00551630298831 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot integer_rot 20.512235721913395 in1 float_dup_items integer_yankdup integer_yankdup integer_flush float_inc integer_yankdup integer_yankdup float_yankdup float_inc integer_add float_yankdup float_inc float_yankdup float_inc integer_yankdup float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup integer_dec float_dec float_dec float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_min float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove float_shove integer_inc float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove 81 float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_div integer_dec print_float float_tan integer_sub integer_fromfloat -56.50848481366526 integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 13.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 0.0 0 4.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 581.0623
Mean: 11.621246
Genome size: 130
Size: 131
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2452.8527385999996
Median total errors in population: 658.7003
Error averages by case: (85.87194969999996 3.325 95.81459159999865 8.848 71.5568127 2.717 82.05690080000012 3.414 88.03849639999906 7.281 98.1764435 3.274 99.5401793000002 3.566 95.65328229999858 9.526 92.61471379999986 3.51 129.51977509999998 11.016 71.86114919999999 3.313 109.72331350000002 3.549 98.46045660000135 9.325 85.64137259999998 3.141 92.29451219999987 4.426 69.54414939999995 2.479 121.38061650000009 3.519 118.48899709999999 3.775 81.30048489999997 2.799 85.14590100000123 8.364 90.56917940000011 3.054 94.40038119999899 7.671 83.08424560000024 6.817 92.25237909999939 7.76 89.83445509999994 3.559)
Error minima by case: (0.0 0 0.42 7 0.0 0 0.0 0 0.2003 2 9.0 1 1.0 1 0.4954 2 0.0 0 2.8355 8 0.0 0 0.3024 1 8.7997 7 0.0 0 1.0 1 0.0 0 2.2372 1 8.918 1 0.0 0 0.2003 6 0.2069 1 10.7131 1 6.6961 1 12.648 2 0.0 0)
Average genome size in population (length): 122.037
Average program size in population (points): 123.037
Average percent parens in population: 0.008
Minimum age in population: 209.4043634887474
Maximum age in population: 213.6339487745152
Average age in population: 211.7132334019193
Median age in population: 211.7517437350535
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.925
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.925
Total error diversity:				 0.554
Error (vector) diversity:			 0.632
Behavioral diversity:				 0.637
--- Run Statistics ---
Number of program evaluations used so far: 155000
Number of point (instruction) evaluations so far: 350779027
--- Timings ---
Current time: 1529615784047 milliseconds
Total Time:         732.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       241.1 seconds, 32.9%
Fitness Testing:    391.4 seconds, 53.4%
Report:             100.3 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 154
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 155
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 155
;;******************************
;; -*- Number IO problem report - generation 155
Test total error for best: 34637.49980000004
Test mean error for best: 17.31875
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 48.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_inc} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_mod} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 81} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_dec} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_flush})
Best program: (float_dec float_inc 90.20029399850333 float_rot float_dec in1 float_add integer_pop float_dec float_dup_items integer_shove float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_mod float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup float_yankdup float_inc float_inc float_inc float_inc integer_yankdup float_frominteger float_frominteger float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_inc float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove 81 float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_div integer_dec print_float float_tan integer_sub integer_fromfloat -56.50848481366526 integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 13.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 0.0 0 4.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 581.0623
Mean: 11.621246
Genome size: 123
Size: 124
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2485.2646936999995
Median total errors in population: 683.0263
Error averages by case: (85.95706479999998 3.348 98.03407619999858 8.835 72.44579690000002 2.831 82.35996610000008 3.447 90.9277277999992 7.322 99.5498046 3.384 100.38420800000007 3.561 98.8744021999985 9.591 91.71752269999996 3.528 129.7413779 11.001 72.21762129999996 3.166 110.88928200000004 3.592 101.33071860000128 9.479 85.88499 3.227 92.86496829999996 4.445 70.191474 2.349 121.0202703000001 3.527 120.01104379999997 3.817 86.67441339999998 2.946 85.8525872000012 8.333 91.76851369999997 3.134 97.62366219999903 7.532 83.54030350000028 6.684 94.84077549999945 7.729 90.16812269999996 3.586)
Error minima by case: (0.0 0 1.42 7 0.0 0 0.0 0 0.2003 1 10.0 1 1.0 1 3.3431 1 0.0 0 1.9807 7 0.0 0 4.9229 1 7.7264 7 0.0881 1 0.0 0 0.0 0 4.7397 1 23.918 1 0.0 0 0.2003 6 0.5007 1 0.6314 2 5.5324 1 12.1377 2 0.0 0)
Average genome size in population (length): 122.23
Average program size in population (points): 123.23
Average percent parens in population: 0.008
Minimum age in population: 210.7397566002773
Maximum age in population: 215.3080831673565
Average age in population: 213.0980606459744
Median age in population: 213.1086887206323
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.927
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.927
Total error diversity:				 0.575
Error (vector) diversity:			 0.665
Behavioral diversity:				 0.671
--- Run Statistics ---
Number of program evaluations used so far: 156000
Number of point (instruction) evaluations so far: 353834777
--- Timings ---
Current time: 1529615789621 milliseconds
Total Time:         738.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       242.6 seconds, 32.9%
Fitness Testing:    394.5 seconds, 53.4%
Report:             101.2 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 155
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 156
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 156
;;******************************
;; -*- Number IO problem report - generation 156
Test total error for best: 34637.49980000004
Test mean error for best: 17.31875
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 48.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_inc} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_mod} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 81} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_dec} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_flush})
Best program: (float_dec float_inc 90.20029399850333 float_rot float_dec in1 float_add integer_pop float_dec float_dup_items integer_shove float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_mod float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup float_yankdup float_inc float_inc float_inc float_inc integer_yankdup float_frominteger float_frominteger float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_inc float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove 81 float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_div integer_dec print_float float_tan integer_sub integer_fromfloat -56.50848481366526 integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 13.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 0.0 0 4.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 581.0623
Mean: 11.621246
Genome size: 123
Size: 124
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2277.8061185000006
Median total errors in population: 676.8604
Error averages by case: (77.8005083 3.376 89.77800649999877 8.845 63.8798399 2.959 74.24605180000007 3.491 82.3402994999992 7.318 91.19006920000001 3.41 93.64677290000003 3.582 89.59330119999866 9.402 84.09885489999996 3.5 121.26768659999993 11.108 66.66174469999997 3.178 101.56522240000002 3.616 95.23893700000124 9.609 77.39869939999997 3.273 84.48001519999997 4.409 65.48784719999996 2.498 112.87527400000008 3.553 110.54360489999996 3.702 77.35851349999994 2.883 76.99708380000106 8.332 82.4548302 3.184 85.93742429999944 7.67 76.23615470000018 6.796 83.4819244999995 7.897 82.03645189999996 3.62)
Error minima by case: (1.0 1 5.42 7 0.0 0 0.0 0 0.2003 1 2.4878 1 0.0 0 3.3431 2 0.0 0 0.7401 7 1.0 1 7.9229 1 2.0889 7 0.0 0 0.0 0 1.0 1 6.2519 1 26.918 1 0.0 0 0.2003 6 0.2069 1 2.5851 2 5.5324 1 12.1377 2 1.0 1)
Average genome size in population (length): 123.048
Average program size in population (points): 124.048
Average percent parens in population: 0.008
Minimum age in population: 212.2022940327117
Maximum age in population: 216.4859570726384
Average age in population: 214.4895958915985
Median age in population: 214.5253649405905
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.932
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.932
Total error diversity:				 0.589
Error (vector) diversity:			 0.683
Behavioral diversity:				 0.688
--- Run Statistics ---
Number of program evaluations used so far: 157000
Number of point (instruction) evaluations so far: 356911077
--- Timings ---
Current time: 1529615795811 milliseconds
Total Time:         744.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       244.2 seconds, 32.8%
Fitness Testing:    398.1 seconds, 53.5%
Report:             102.2 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 156
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 157
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 157
;;******************************
;; -*- Number IO problem report - generation 157
Test total error for best: 35404.67090000002
Test mean error for best: 17.70234
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 48.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_sin} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 81} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_dec} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_flush})
Best program: (90.20029399850333 float_rot float_dec in1 float_add integer_pop float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_dup_items float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_sin 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup integer_yankdup integer_flush float_inc integer_yankdup integer_yankdup float_yankdup float_inc integer_add float_yankdup float_inc float_yankdup float_inc integer_min float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_inc float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove 81 float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_div integer_dec print_float float_tan integer_sub integer_fromfloat -56.50848481366526 integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 13.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 0.0 0 4.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 581.0623
Mean: 11.621246
Genome size: 126
Size: 127
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2347.1392060000003
Median total errors in population: 672.2626000000001
Error averages by case: (81.11340259999996 3.217 91.02200949999867 8.857 66.65312930000003 2.908 77.25478180000009 3.357 83.03555209999912 7.28 95.14737790000001 3.341 94.90218470000012 3.501 89.56677049999857 9.428 88.78319029999992 3.433 125.75483739999997 11.163 68.53297549999996 3.254 105.04584890000001 3.525 94.0745983000012 9.679 80.4217864 3.235 88.9501975999999 4.361 66.66378629999997 2.398 117.19649170000008 3.439 115.56446260000006 3.638 79.87614189999995 2.771 79.43959250000125 8.357 87.73429820000005 3.123 89.62998549999891 7.715 78.00586860000031 6.874 87.42536839999934 7.809 85.17656749999993 3.505)
Error minima by case: (0.0 0 5.42 7 0.0 0 0.0 0 0.055 1 8.0 1 2.0 1 6.3431 2 0.0 0 5.9829 8 0.0 0 8.0771 1 8.7997 7 0.0 0 1.0 1 0.0 0 4.7397 1 13.2094 1 0.0 0 0.2003 6 1.2069 1 11.5851 1 5.5808 1 12.7756 2 1.0 1)
Average genome size in population (length): 123.417
Average program size in population (points): 124.417
Average percent parens in population: 0.008
Minimum age in population: 213.4763963132701
Maximum age in population: 217.813466133894
Average age in population: 215.8423024189139
Median age in population: 215.8573429816973
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.921
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.921
Total error diversity:				 0.57
Error (vector) diversity:			 0.683
Behavioral diversity:				 0.688
--- Run Statistics ---
Number of program evaluations used so far: 158000
Number of point (instruction) evaluations so far: 359996502
--- Timings ---
Current time: 1529615801475 milliseconds
Total Time:         750.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       245.7 seconds, 32.7%
Fitness Testing:    401.4 seconds, 53.5%
Report:             103.1 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 157
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 158
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 158
;;******************************
;; -*- Number IO problem report - generation 158
Test total error for best: 35404.67090000002
Test mean error for best: 17.70234
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 48.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_sin} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 81} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_dec} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_flush})
Best program: (90.20029399850333 float_rot float_dec in1 float_add integer_pop float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_dup_items float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_sin 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup integer_yankdup integer_flush float_inc integer_yankdup integer_yankdup float_yankdup float_inc integer_add float_yankdup float_inc float_yankdup float_inc integer_min float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_inc float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove 81 float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_div integer_dec print_float float_tan integer_sub integer_fromfloat -56.50848481366526 integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 13.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 0.0 0 4.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 581.0623
Mean: 11.621246
Genome size: 126
Size: 127
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2169.2938311
Median total errors in population: 673.5659
Error averages by case: (73.31589609999997 3.164 84.59933079999868 8.781 60.328212599999986 2.87 69.58830990000007 3.303 77.15633029999937 7.251 86.1245602 3.236 87.16204289999999 3.441 85.64628509999862 9.43 79.94277280000003 3.379 118.52125349999996 11.086 60.76158669999996 3.298 98.74140239999998 3.478 91.5129061000012 9.774 74.6238825 3.173 79.5549522 4.318 57.39737269999997 2.344 110.14812410000008 3.438 108.1497594 3.546 72.16942589999996 2.909 72.52648510000093 8.278 80.21922789999995 3.072 83.03748509999947 7.745 71.21147360000028 6.818 80.1917957999995 7.7 77.37795739999999 3.453)
Error minima by case: (0.0 0 0.42 7 0.0 0 0.0 0 0.2003 1 6.0 1 1.0 1 3.2327 2 1.2931 1 0.4702 8 0.0 0 5.9229 1 8.7997 7 0.0 0 1.0 1 0.0 0 7.9291 1 5.5862 1 0.0 0 0.2003 6 0.4907 1 7.5851 2 1.6961 1 12.4528 2 0.0 0)
Average genome size in population (length): 123.444
Average program size in population (points): 124.444
Average percent parens in population: 0.008
Minimum age in population: 214.9961362351927
Maximum age in population: 219.4069064674923
Average age in population: 217.1501393544939
Median age in population: 217.1874345720608
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.915
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.915
Total error diversity:				 0.57
Error (vector) diversity:			 0.661
Behavioral diversity:				 0.665
--- Run Statistics ---
Number of program evaluations used so far: 159000
Number of point (instruction) evaluations so far: 363082652
--- Timings ---
Current time: 1529615807016 milliseconds
Total Time:         755.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       247.2 seconds, 32.7%
Fitness Testing:    404.5 seconds, 53.5%
Report:             104.1 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 158
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 159
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 159
;;******************************
;; -*- Number IO problem report - generation 159
Test total error for best: 35385.72300000002
Test mean error for best: 17.69286
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 48.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_dec} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_sin} {:instruction 92.00551630298831} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction integer_rot} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 81} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_dec} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_flush})
Best program: (float_dec float_dec 90.20029399850333 float_rot float_dec in1 integer_pop float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_dup_items float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_sin 92.00551630298831 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot integer_rot 20.512235721913395 in1 float_dup_items integer_yankdup integer_yankdup integer_flush float_inc integer_yankdup integer_yankdup float_yankdup float_inc integer_add float_yankdup float_inc float_yankdup float_inc integer_yankdup float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup integer_dec float_dec float_dec float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_min float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove float_shove integer_inc float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove 81 float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_div integer_dec print_float float_tan integer_sub integer_fromfloat -56.50848481366526 integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 13.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 0.0 0 4.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 581.0623
Mean: 11.621246
Genome size: 130
Size: 131
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2614.5236698000003
Median total errors in population: 679.1950000000002
Error averages by case: (92.1806326 3.313 99.9882877999986 8.87 79.48908399999995 2.893 88.2696433000001 3.43 93.56293009999901 7.259 106.4924414 3.369 106.23483980000013 3.594 103.31956069999843 9.493 100.54243219999992 3.495 136.69251279999997 11.14 79.70401389999994 3.356 116.41021820000005 3.585 108.73027440000124 10.024 92.01650010000002 3.252 99.12264539999993 4.445 77.82943879999995 2.423 127.71303060000008 3.527 121.91871419999998 3.788 87.43496449999996 2.953 90.2672607000013 8.389 96.34112520000004 3.142 98.06273999999897 7.78 86.55602990000028 7.024 96.45011329999942 8.013 97.06923589999995 3.568)
Error minima by case: (0.0 0 3.58 7 0.0 0 0.0 0 0.2003 1 4.0 1 0.0 0 3.3431 1 1.0 1 2.23 8 0.0 0 4.9229 1 7.9153 7 0.0881 1 1.0 1 0.0 0 2.2519 1 13.8328 1 0.0 0 0.2003 6 0.5093 1 16.7131 1 5.2344 1 5.4878 2 0.0 0)
Average genome size in population (length): 124.472
Average program size in population (points): 125.472
Average percent parens in population: 0.008
Minimum age in population: 215.9961362351927
Maximum age in population: 220.5386357039137
Average age in population: 218.4895160736515
Median age in population: 218.5427239269137
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.908
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.908
Total error diversity:				 0.569
Error (vector) diversity:			 0.657
Behavioral diversity:				 0.661
--- Run Statistics ---
Number of program evaluations used so far: 160000
Number of point (instruction) evaluations so far: 366194452
--- Timings ---
Current time: 1529615812693 milliseconds
Total Time:         761.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       248.6 seconds, 32.6%
Fitness Testing:    407.8 seconds, 53.6%
Report:             105.0 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 159
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 160
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 160
;;******************************
;; -*- Number IO problem report - generation 160
Test total error for best: 34637.49980000004
Test mean error for best: 17.31875
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 48.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_inc} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_mod} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 81} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_dec} {:instruction print_float} {:instruction float_tan} {:instruction in2} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_flush})
Best program: (float_dec float_inc 90.20029399850333 float_rot float_dec in1 float_add integer_pop float_dec float_dup_items integer_shove float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_mod float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup float_yankdup float_inc float_inc float_inc float_inc integer_yankdup float_frominteger float_frominteger float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_min float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove float_shove integer_inc float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove 81 float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_div integer_dec print_float float_tan in2 integer_fromfloat -56.50848481366526 integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 13.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 0.0 0 4.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 581.0623
Mean: 11.621246
Genome size: 125
Size: 126
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2216.511448399999
Median total errors in population: 703.44335
Error averages by case: (75.62492169999997 3.288 83.7305358999986 8.8 60.08128339999998 2.748 72.11873920000005 3.367 79.05158499999901 7.286 90.89877129999999 3.236 91.83490760000007 3.51 85.79269129999858 9.465 83.2145025 3.448 118.93070089999995 11.0 63.24380149999995 3.231 99.96994550000005 3.559 94.73117680000124 10.019 73.50408490000004 3.158 83.7712267 4.341 61.01525729999997 2.318 110.06959450000006 3.473 110.6423464 3.869 75.51233739999995 2.964 71.31892350000118 8.292 80.79402569999999 3.03 84.73808279999916 7.688 73.80988520000027 6.637 82.20996789999943 7.714 79.93715349999998 3.524)
Error minima by case: (0.0 0 0.42 7 0.0 0 0.0 0 0.1442 1 5.0 1 0.67 1 0.0719 2 1.0 1 1.2613 8 0.0 0 0.7014 1 8.7997 7 0.0 0 0.0 0 0.0 0 0.1707 1 15.918 1 0.0 0 0.2003 6 0.2069 1 7.5851 1 5.2344 1 11.1226 2 0.0 0)
Average genome size in population (length): 124.642
Average program size in population (points): 125.642
Average percent parens in population: 0.008
Minimum age in population: 217.2555603999319
Maximum age in population: 222.0437027418027
Average age in population: 219.9062141649489
Median age in population: 219.9432163001418
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.921
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.921
Total error diversity:				 0.586
Error (vector) diversity:			 0.674
Behavioral diversity:				 0.677
--- Run Statistics ---
Number of program evaluations used so far: 161000
Number of point (instruction) evaluations so far: 369310552
--- Timings ---
Current time: 1529615818357 milliseconds
Total Time:         767.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       250.2 seconds, 32.6%
Fitness Testing:    410.9 seconds, 53.6%
Report:             105.9 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 160
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 161
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 161
;;******************************
;; -*- Number IO problem report - generation 161
Test total error for best: 34637.49980000004
Test mean error for best: 17.31875
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 49.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 21.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction float_inc} {:instruction float_sin} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_mod} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction integer_swap} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 81} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_dec} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction float_inc})
Best program: (float_min float_inc float_sin 90.20029399850333 float_rot float_dec in1 float_add integer_pop float_dec integer_dup_times float_dup_items float_dup_items float_dec float_mod float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup float_yankdup float_inc float_inc float_inc float_inc integer_yankdup float_frominteger float_frominteger float_yankdup float_inc in2 in1 float_dup_items float_dec float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items float_frominteger in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_dec float_dup in2 float_dec float_dup in2 float_dec integer_swap float_dec in2 float_dec float_dec float_shove 81 float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times integer_div float_dup_items integer_div float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_div integer_dec print_float float_tan integer_sub integer_fromfloat -56.50848481366526 float_inc)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 12.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 0.0 0 4.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 580.0623
Mean: 11.601246
Genome size: 123
Size: 124
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2530.6117259
Median total errors in population: 675.89155
Error averages by case: (90.43306539999995 3.395 96.75286919999874 8.875 72.95733479999998 2.617 86.30599310000002 3.445 89.74026679999918 7.428 102.8237518 3.254 104.12566460000006 3.541 98.46288549999866 9.536 97.43301849999993 3.52 133.83497639999996 11.003 73.01633959999997 3.238 111.20384010000001 3.581 104.78641570000107 9.98 87.39567920000003 3.127 97.04265839999994 4.403 72.01416319999997 2.473 125.13492960000008 3.513 121.26630570000002 3.704 88.19378519999995 3.132 84.24286350000102 8.39 95.8080934 3.003 96.06549899999925 7.832 82.24443740000028 6.988 93.41417559999941 7.915 94.48571419999995 3.534)
Error minima by case: (0.0 0 0.42 7 0.0 0 0.0 0 0.2003 1 10.0 1 1.4878 1 3.3431 1 0.5122 1 2.438 8 0.0 0 4.9229 1 0.8053 7 0.0881 1 0.0 0 0.0 0 8.8786 1 23.918 1 0.0 0 0.2003 6 0.2097 1 7.5526 1 5.2344 1 12.7756 2 0.8371 1)
Average genome size in population (length): 124.897
Average program size in population (points): 125.897
Average percent parens in population: 0.008
Minimum age in population: 218.8212739299567
Maximum age in population: 223.1449827805747
Average age in population: 221.1975208932835
Median age in population: 221.2121888408062
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.902
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.902
Total error diversity:				 0.561
Error (vector) diversity:			 0.647
Behavioral diversity:				 0.652
--- Run Statistics ---
Number of program evaluations used so far: 162000
Number of point (instruction) evaluations so far: 372432977
--- Timings ---
Current time: 1529615824077 milliseconds
Total Time:         773.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       251.8 seconds, 32.6%
Fitness Testing:    414.4 seconds, 53.6%
Report:             106.9 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 161
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 162
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 162
;;******************************
;; -*- Number IO problem report - generation 162
Test total error for best: 36603.16750000001
Test mean error for best: 18.30158
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 48.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 24.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_sin} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 81} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_dec} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub})
Best program: (90.20029399850333 float_rot float_dec in1 float_add integer_pop float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_dup_items float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_sin 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup integer_yankdup integer_flush float_inc integer_yankdup integer_yankdup float_yankdup float_inc integer_add float_yankdup float_inc float_yankdup float_inc integer_min float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_inc float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove 81 float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times float_pop float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_div integer_dec print_float float_tan integer_sub)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 13.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 0.0 0 1.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 578.0623
Mean: 11.561246
Genome size: 123
Size: 124
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2252.5031959
Median total errors in population: 700.4006
Error averages by case: (76.80707839999998 3.241 86.39854169999879 8.746 62.93340479999997 2.403 72.77033800000005 3.257 77.57718569999923 7.23 89.27327509999999 2.995 90.68791250000007 3.339 87.20054599999871 9.34 83.92767299999993 3.285 121.86524019999996 10.938 65.83662369999993 3.232 102.14813410000002 3.391 96.55634860000107 9.994 77.18739050000003 2.937 83.46822579999993 4.2 63.91360609999996 2.482 112.80079140000005 3.344 112.28754090000001 3.644 77.60882209999994 2.831 73.82763990000105 8.21 82.67325030000003 2.808 87.07781189999936 7.573 74.6456916000002 6.763 84.9692204999994 7.773 80.73390309999995 3.371)
Error minima by case: (0.0 0 0.42 7 0.0 0 0.0 0 0.2003 1 6.0 1 1.0 1 6.3431 1 1.0 1 0.0016 1 0.0 0 8.9229 1 5.7997 7 0.1849 1 0.0 0 0.0 0 1.7397 1 8.7995 1 0.0 0 0.2003 6 0.5007 1 5.5851 1 6.6961 1 12.7756 2 0.0 0)
Average genome size in population (length): 125.053
Average program size in population (points): 126.053
Average percent parens in population: 0.008
Minimum age in population: 220.1771602670298
Maximum age in population: 224.7679319369771
Average age in population: 222.4870258370169
Median age in population: 222.5074612149167
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.904
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.904
Total error diversity:				 0.567
Error (vector) diversity:			 0.662
Behavioral diversity:				 0.669
--- Run Statistics ---
Number of program evaluations used so far: 163000
Number of point (instruction) evaluations so far: 375559302
--- Timings ---
Current time: 1529615829466 milliseconds
Total Time:         778.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       253.3 seconds, 32.5%
Fitness Testing:    417.5 seconds, 53.6%
Report:             107.6 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 162
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 163
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 163
;;******************************
;; -*- Number IO problem report - generation 163
Test total error for best: 36603.16750000001
Test mean error for best: 18.30158
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 48.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 24.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_sin} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 81} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_dec} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub})
Best program: (90.20029399850333 float_rot float_dec in1 float_add integer_pop float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_dup_items float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_sin 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup integer_yankdup integer_flush float_inc integer_yankdup integer_yankdup float_yankdup float_inc integer_add float_yankdup float_inc float_yankdup float_inc integer_min float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_inc float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove 81 float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times float_pop float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_div integer_dec print_float float_tan integer_sub)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 13.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 0.0 0 1.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 578.0623
Mean: 11.561246
Genome size: 123
Size: 124
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2383.5576636999986
Median total errors in population: 703.7875
Error averages by case: (82.09591289999999 3.412 93.1228189999986 8.837 68.22226669999996 2.618 79.47932250000011 3.45 84.68090679999904 7.385 95.10928459999998 3.173 96.2335649000001 3.553 93.39461699999856 9.501 89.36528669999996 3.512 125.6823191 10.993 68.86354529999996 3.239 105.72754010000006 3.612 102.3925703000012 10.078 82.46039789999999 3.123 89.32069379999996 4.422 66.97321759999998 2.323 117.4558156000001 3.549 116.27992259999998 3.843 82.83958199999996 2.944 79.97501170000136 8.292 87.81463180000004 2.991 90.63925169999912 7.818 78.88710610000025 6.885 89.16200399999938 7.974 86.25407299999993 3.599)
Error minima by case: (0.0 0 2.368 7 0.0 0 0.0 0 0.0207 1 6.0 1 1.0 1 3.3431 1 1.0 1 1.2059 8 0.0 0 4.3795 1 6.7997 7 0.0 0 1.0 1 0.0 0 3.7481 1 1.5232 1 0.0 0 0.2003 6 0.1126 1 6.5851 2 6.6961 1 12.7756 2 0.0 0)
Average genome size in population (length): 125.248
Average program size in population (points): 126.248
Average percent parens in population: 0.008
Minimum age in population: 221.5073986244418
Maximum age in population: 225.6790719717261
Average age in population: 223.8271096566116
Median age in population: 223.8782451687556
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.905
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.905
Total error diversity:				 0.567
Error (vector) diversity:			 0.642
Behavioral diversity:				 0.647
--- Run Statistics ---
Number of program evaluations used so far: 164000
Number of point (instruction) evaluations so far: 378690502
--- Timings ---
Current time: 1529615835237 milliseconds
Total Time:         784.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       255.0 seconds, 32.5%
Fitness Testing:    420.8 seconds, 53.7%
Report:             108.3 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 163
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 164
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 164
;;******************************
;; -*- Number IO problem report - generation 164
Test total error for best: 36603.16750000001
Test mean error for best: 18.30158
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 48.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 24.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_sin} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 81} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_dec} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub})
Best program: (90.20029399850333 float_rot float_dec in1 float_add integer_pop float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_dup_items float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_sin 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup integer_yankdup integer_flush float_inc integer_yankdup integer_yankdup float_yankdup float_inc integer_add float_yankdup float_inc float_yankdup float_inc integer_min float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_inc float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove 81 float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times float_pop float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_div integer_dec print_float float_tan integer_sub)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 13.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 0.0 0 1.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 578.0623
Mean: 11.561246
Genome size: 123
Size: 124
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2168.5152651000003
Median total errors in population: 677.2626000000001
Error averages by case: (72.66175429999998 3.214 83.37853269999863 8.709 61.50113669999998 2.24 68.16885720000003 3.207 74.45008889999913 7.142 89.22703809999997 2.91 87.55934130000001 3.317 84.57828099999857 9.51 84.31439959999997 3.298 117.32056919999994 10.894 62.84804489999994 3.144 100.4850678 3.364 90.8723308000011 9.998 76.3221619 2.85 83.55497909999998 4.184 59.36081049999998 2.24 107.87983100000007 3.28 109.0391054 3.463 76.29358379999992 2.904 70.87546930000121 8.136 78.29935379999998 2.706 80.8526389999993 7.631 67.38154030000027 6.704 78.3947461999995 7.82 76.71960229999996 3.311)
Error minima by case: (1.0 1 5.42 7 0.0 0 0.0 0 0.2003 1 7.0 1 1.0 1 0.7691 2 1.0 1 1.0016 8 0.0 0 7.2253 1 0.6438 7 0.1551 1 0.0 0 0.0 0 2.7397 1 23.8364 1 0.0 0 0.2003 6 0.2069 1 6.5851 1 6.6961 1 4.0096 2 0.0 0)
Average genome size in population (length): 125.22
Average program size in population (points): 126.22
Average percent parens in population: 0.008
Minimum age in population: 222.5073986244418
Maximum age in population: 226.890987321905
Average age in population: 225.0537839570493
Median age in population: 225.0748976109274
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.909
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.909
Total error diversity:				 0.563
Error (vector) diversity:			 0.637
Behavioral diversity:				 0.64
--- Run Statistics ---
Number of program evaluations used so far: 165000
Number of point (instruction) evaluations so far: 381821002
--- Timings ---
Current time: 1529615840650 milliseconds
Total Time:         789.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       256.5 seconds, 32.5%
Fitness Testing:    424.0 seconds, 53.7%
Report:             109.1 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 164
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 165
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 165
;;******************************
;; -*- Number IO problem report - generation 165
Test total error for best: 36603.16750000001
Test mean error for best: 18.30158
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 48.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 24.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_sin} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 81} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_dec} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub})
Best program: (90.20029399850333 float_rot float_dec in1 float_add integer_pop float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_dup_items float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_sin 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup integer_yankdup integer_flush float_inc integer_yankdup integer_yankdup float_yankdup float_inc integer_add float_yankdup float_inc float_yankdup float_inc integer_min float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_inc float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove 81 float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times float_pop float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_div integer_dec print_float float_tan integer_sub)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 13.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 0.0 0 1.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 578.0623
Mean: 11.561246
Genome size: 123
Size: 124
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2300.7141591
Median total errors in population: 677.6656
Error averages by case: (79.32358549999995 3.329 89.04505559999863 8.809 66.10193879999999 2.449 75.34928160000007 3.332 79.93299559999912 7.18 93.0129301 3.075 92.78121190000007 3.428 89.65467509999861 9.364 87.41758139999997 3.397 123.50839229999997 10.921 65.34577509999995 3.16 104.41035270000003 3.514 98.14585300000114 9.972 80.31522749999996 2.991 87.16949959999997 4.316 62.73612619999997 2.326 114.90090580000007 3.401 113.36953560000002 3.697 75.38137969999994 2.604 76.29746970000116 8.254 84.54363809999997 2.839 88.19509459999924 7.626 76.08007600000029 6.933 86.23241809999949 7.833 83.26015949999992 3.453)
Error minima by case: (0.0 0 2.42 7 0.0 0 0.0 0 0.2003 1 6.0 1 0.9366 1 3.3431 2 0.0 0 2.7396 8 0.0 0 14.9229 1 8.7997 7 0.0 0 0.0 0 0.0 0 6.5749 1 23.0991 1 0.0 0 0.2003 6 0.1619 1 7.5851 2 1.6961 1 12.7756 2 0.0 0)
Average genome size in population (length): 125.035
Average program size in population (points): 126.035
Average percent parens in population: 0.008
Minimum age in population: 223.5073986244418
Maximum age in population: 228.3971545960514
Average age in population: 226.3467632951852
Median age in population: 226.4251487764065
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.913
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.913
Total error diversity:				 0.556
Error (vector) diversity:			 0.635
Behavioral diversity:				 0.637
--- Run Statistics ---
Number of program evaluations used so far: 166000
Number of point (instruction) evaluations so far: 384946877
--- Timings ---
Current time: 1529615846575 milliseconds
Total Time:         795.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       258.0 seconds, 32.4%
Fitness Testing:    427.5 seconds, 53.7%
Report:             109.8 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 165
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 166
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 166
;;******************************
;; -*- Number IO problem report - generation 166
Test total error for best: 35709.36560000002
Test mean error for best: 17.85468
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 48.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 24.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_dup} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction 90.62601647526289} {:instruction integer_yank} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 81} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_min} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_dec} {:instruction print_float} {:instruction float_tan} {:instruction float_max} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_flush})
Best program: (float_dec float_dup 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_dec float_add float_dup_items float_dec float_dup_items float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 90.62601647526289 integer_yank in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup integer_yankdup integer_flush float_inc integer_yankdup integer_yankdup float_yankdup float_inc integer_add float_yankdup float_inc float_yankdup float_inc integer_min float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_inc float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove 81 float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times float_min float_dup_items float_dec float_dup in2 float_swap float_dec float_dec float_yankdup integer_div integer_dec print_float float_tan float_max integer_fromfloat -56.50848481366526 integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 13.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 0.0 0 1.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 578.0623
Mean: 11.561246
Genome size: 123
Size: 124
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2466.4814070999996
Median total errors in population: 712.80045
Error averages by case: (85.4512817 3.42 97.72891589999838 8.813 71.53493399999998 2.633 81.9716141000001 3.474 91.74525939999897 7.383 99.13196009999999 3.234 100.0092695000001 3.566 97.23274529999841 9.422 92.42278009999997 3.503 129.24018049999992 10.976 73.64729579999994 3.329 109.48956270000002 3.601 105.53374990000113 10.071 84.71347629999998 3.122 92.41440119999996 4.395 72.14261989999991 2.445 120.2878458000001 3.517 117.74490289999999 3.816 82.79806479999993 3.098 84.80667770000149 8.299 91.21533559999996 2.987 93.08890119999896 7.661 80.8441248000003 6.761 90.93954019999934 7.803 89.45096769999991 3.566)
Error minima by case: (0.0 0 4.4723 7 0.0 0 0.0 0 0.2003 1 9.0 1 1.0 1 3.3431 2 1.0 1 3.9 9 0.0 0 4.9229 1 9.7997 7 0.0598 1 0.0 0 0.0 0 1.632 1 2.1329 1 0.0 0 0.2003 6 0.5093 1 0.8554 1 6.6961 1 12.7756 2 2.0 1)
Average genome size in population (length): 124.922
Average program size in population (points): 125.922
Average percent parens in population: 0.008
Minimum age in population: 224.5073986244418
Maximum age in population: 229.4246692105512
Average age in population: 227.6058987639373
Median age in population: 227.6643066367972
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.922
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.922
Total error diversity:				 0.569
Error (vector) diversity:			 0.643
Behavioral diversity:				 0.647
--- Run Statistics ---
Number of program evaluations used so far: 167000
Number of point (instruction) evaluations so far: 388069952
--- Timings ---
Current time: 1529615852282 milliseconds
Total Time:         801.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       259.5 seconds, 32.4%
Fitness Testing:    430.7 seconds, 53.8%
Report:             110.7 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 166
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 167
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 167
;;******************************
;; -*- Number IO problem report - generation 167
Test total error for best: 36603.16750000001
Test mean error for best: 18.30158
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 48.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 24.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_sin} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 81} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_dec} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub})
Best program: (90.20029399850333 float_rot float_dec in1 float_add integer_pop float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_dup_items float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_sin 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup integer_yankdup integer_flush float_inc integer_yankdup integer_yankdup float_yankdup float_inc integer_add float_yankdup float_inc float_yankdup float_inc integer_min float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_inc float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove 81 float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times float_pop float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_div integer_dec print_float float_tan integer_sub)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 13.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 0.0 0 1.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 578.0623
Mean: 11.561246
Genome size: 123
Size: 124
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2261.4808741
Median total errors in population: 692.43965
Error averages by case: (75.91318359999995 3.351 90.05264549999863 8.835 65.1694469 2.581 72.67477310000011 3.357 82.94956709999897 7.335 90.47736509999997 3.153 88.77159370000003 3.523 89.20312739999855 9.402 83.53362949999996 3.454 120.64277259999999 10.997 64.48777039999993 3.261 103.49839580000005 3.528 98.12219580000112 9.994 78.20348569999996 3.079 83.68738719999996 4.347 62.73905039999995 2.389 111.8946127000001 3.471 111.45895890000001 3.828 75.78609439999995 2.843 77.49364330000125 8.31 82.03382849999998 2.928 86.55514059999933 7.668 72.54502570000025 6.847 83.96329659999951 7.814 79.83288359999995 3.496)
Error minima by case: (0.0 0 0.42 7 0.0 0 0.0 0 0.2003 1 9.0 1 2.0 1 2.6347 2 0.0 0 0.9984 7 0.0 0 7.9229 1 3.2796 7 0.0 0 0.0 0 0.0 0 3.7397 1 26.918 1 0.0 0 0.0482 6 0.2069 1 8.5851 1 4.8287 1 11.7756 2 0.0 0)
Average genome size in population (length): 124.597
Average program size in population (points): 125.597
Average percent parens in population: 0.008
Minimum age in population: 225.5073986244418
Maximum age in population: 230.7987430963297
Average age in population: 228.8038348840364
Median age in population: 228.8580018477954
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.928
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.928
Total error diversity:				 0.578
Error (vector) diversity:			 0.663
Behavioral diversity:				 0.668
--- Run Statistics ---
Number of program evaluations used so far: 168000
Number of point (instruction) evaluations so far: 391184877
--- Timings ---
Current time: 1529615857997 milliseconds
Total Time:         807.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       261.1 seconds, 32.4%
Fitness Testing:    434.1 seconds, 53.8%
Report:             111.7 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 167
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 168
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 168
;;******************************
;; -*- Number IO problem report - generation 168
Test total error for best: 36603.16750000001
Test mean error for best: 18.30158
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 48.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 24.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_swap} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_sin} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 81} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_dec} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub})
Best program: (90.20029399850333 float_rot float_dec in1 float_add integer_pop float_dec float_dup_items integer_swap float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_dup_items float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_sin 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup integer_yankdup integer_flush float_inc integer_yankdup integer_yankdup float_yankdup float_inc integer_add float_yankdup float_inc float_yankdup float_inc integer_min float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_inc float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove 81 float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times float_pop float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_div integer_dec print_float float_tan integer_sub)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 13.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 0.0 0 1.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 578.0623
Mean: 11.561246
Genome size: 123
Size: 124
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2400.6420807
Median total errors in population: 688.6882500000002
Error averages by case: (86.92559609999998 3.407 89.66060039999866 8.757 67.72200319999996 2.633 83.12297410000008 3.432 81.74474269999916 7.157 99.80727769999999 3.211 100.32111230000011 3.577 90.96670649999862 9.424 94.23711799999995 3.503 130.600668 10.924 66.84365289999992 3.273 105.58810609999999 3.596 98.23932680000107 9.976 82.08726909999997 3.143 94.20116159999993 4.418 64.77954219999997 2.428 122.03873290000004 3.516 115.8987248 3.745 80.77977159999993 2.978 77.23697620000131 8.221 92.21168810000003 2.98 88.88816979999906 7.623 75.78340370000029 6.785 89.74802319999941 7.969 90.98373269999995 3.549)
Error minima by case: (0.0 0 5.2003 7 0.0 0 0.0 0 0.2003 1 5.0 1 4.0 1 4.3431 2 0.0 0 0.9644 8 0.0 0 5.9229 1 7.7997 7 0.0881 1 0.0 0 0.0 0 1.7302 1 24.918 1 0.0 0 0.2003 6 0.2069 1 4.1975 1 4.8287 1 12.7756 2 0.0 0)
Average genome size in population (length): 124.36
Average program size in population (points): 125.36
Average percent parens in population: 0.008
Minimum age in population: 227.8193925351332
Maximum age in population: 232.1582265456764
Average age in population: 230.1320782320121
Median age in population: 230.1676491534227
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.924
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.924
Total error diversity:				 0.576
Error (vector) diversity:			 0.662
Behavioral diversity:				 0.666
--- Run Statistics ---
Number of program evaluations used so far: 169000
Number of point (instruction) evaluations so far: 394293877
--- Timings ---
Current time: 1529615864107 milliseconds
Total Time:         812.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       262.6 seconds, 32.3%
Fitness Testing:    437.8 seconds, 53.9%
Report:             112.4 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 168
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 169
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 169
;;******************************
;; -*- Number IO problem report - generation 169
Test total error for best: 36603.16750000001
Test mean error for best: 18.30158
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 48.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 24.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_sin} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 81} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_dec} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub})
Best program: (90.20029399850333 float_rot float_dec in1 float_add integer_pop float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_dup_items float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_sin 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup integer_yankdup integer_flush float_inc integer_yankdup integer_yankdup float_yankdup float_inc integer_add float_yankdup float_inc float_yankdup float_inc integer_min float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_inc float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove 81 float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times float_pop float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_div integer_dec print_float float_tan integer_sub)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 13.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 0.0 0 1.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 578.0623
Mean: 11.561246
Genome size: 123
Size: 124
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2272.973677299999
Median total errors in population: 728.4006
Error averages by case: (77.42180379999998 3.522 88.5174953999988 8.858 63.81591369999998 2.716 74.27124960000009 3.541 83.41033879999921 7.202 91.68068019999997 3.29 90.52809690000005 3.663 87.87967289999874 9.473 83.79487019999999 3.573 120.72685379999999 10.9 63.51924959999997 3.251 102.2018677 3.69 99.74088930000106 10.033 76.8293707 3.243 84.53114759999998 4.448 61.14521699999997 2.404 112.20561130000007 3.616 111.45610929999997 3.938 79.64263109999997 3.169 78.13679530000114 8.407 82.68937989999999 3.084 86.61844529999932 7.575 73.2943619000003 6.766 85.92778679999945 7.697 81.24383919999993 3.685)
Error minima by case: (0.0 0 5.42 7 0.0 0 0.0 0 0.2003 1 8.0 1 0.4878 1 4.27 1 0.0 0 0.4702 8 0.0 0 4.9463 1 1.6443 7 0.0 0 1.0 1 0.0 0 0.5434 1 1.3336 1 0.0 0 0.2003 6 0.2069 1 2.6813 1 2.5122 1 12.1176 2 0.0 0)
Average genome size in population (length): 124.019
Average program size in population (points): 125.019
Average percent parens in population: 0.008
Minimum age in population: 228.8714552637547
Maximum age in population: 233.1666302054706
Average age in population: 231.4110224940121
Median age in population: 231.4391282660595
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.93
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.93
Total error diversity:				 0.627
Error (vector) diversity:			 0.711
Behavioral diversity:				 0.717
--- Run Statistics ---
Number of program evaluations used so far: 170000
Number of point (instruction) evaluations so far: 397394352
--- Timings ---
Current time: 1529615869812 milliseconds
Total Time:         818.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       264.1 seconds, 32.3%
Fitness Testing:    441.0 seconds, 53.9%
Report:             113.4 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 169
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 170
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 170
;;******************************
;; -*- Number IO problem report - generation 170
Test total error for best: 35728.36560000002
Test mean error for best: 17.86418
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 48.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 24.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_dup} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_max} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction 90.62601647526289} {:instruction integer_yank} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dup} {:instruction in2} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 81} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_dec} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub})
Best program: (float_dec float_dup 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_dec float_max float_dup_items float_dec float_dup_items float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 90.62601647526289 integer_yank in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup integer_yankdup integer_flush float_inc integer_yankdup integer_yankdup float_yankdup float_inc integer_add float_yankdup float_inc float_yankdup float_inc integer_min float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_inc float_dup in2 float_shove integer_inc float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove 81 float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times float_pop float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_div integer_dec print_float float_tan integer_sub)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 13.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 0.0 0 1.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 578.0623
Mean: 11.561246
Genome size: 124
Size: 125
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2382.2466599999993
Median total errors in population: 702.32905
Error averages by case: (80.97269360000001 3.301 91.72384469999861 8.81 68.88526699999994 2.482 76.87914580000005 3.274 84.4416925999991 7.391 94.86929309999995 3.059 95.54334870000004 3.399 92.90545079999856 9.486 89.30223249999995 3.418 126.59211329999992 10.975 71.90301349999994 3.283 107.91502440000002 3.468 102.46849700000108 10.096 82.9098815 3.033 88.62666499999996 4.318 68.57594289999994 2.327 117.60887960000004 3.379 117.88497970000002 3.768 82.42438939999992 2.855 76.86910380000111 8.298 87.953241 2.835 91.96985889999911 7.71 78.96217840000027 6.864 90.11107409999947 7.88 84.85984869999993 3.38)
Error minima by case: (0.0 0 0.42 7 0.0 0 0.0 0 0.2003 1 8.0 1 1.0 1 6.3431 1 0.0 0 2.644 8 0.0 0 5.6976 1 8.7997 7 0.0 0 0.0 0 0.0 0 3.9366 1 7.082 1 0.0 0 0.2003 6 0.1126 1 7.5851 1 6.4482 1 12.7756 2 0.0 0)
Average genome size in population (length): 123.356
Average program size in population (points): 124.356
Average percent parens in population: 0.008
Minimum age in population: 229.8714552637547
Maximum age in population: 234.9950723641774
Average age in population: 232.7467887489352
Median age in population: 232.79804769674
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.916
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.916
Total error diversity:				 0.602
Error (vector) diversity:			 0.709
Behavioral diversity:				 0.715
--- Run Statistics ---
Number of program evaluations used so far: 171000
Number of point (instruction) evaluations so far: 400478252
--- Timings ---
Current time: 1529615875400 milliseconds
Total Time:         824.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       265.7 seconds, 32.2%
Fitness Testing:    444.3 seconds, 53.9%
Report:             114.3 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 170
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 171
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 171
;;******************************
;; -*- Number IO problem report - generation 171
Test total error for best: 36603.16750000001
Test mean error for best: 18.30158
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 48.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 24.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction integer_mod} {:instruction float_inc} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_add} {:instruction integer_shove} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_sin} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 81} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_dec} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub})
Best program: (90.20029399850333 float_rot float_dec in1 integer_mod float_inc float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_dup_items integer_add integer_shove float_dup_items float_dec float_dup_items float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_sin 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup integer_yankdup integer_flush float_inc integer_yankdup integer_yankdup float_yankdup float_inc integer_add float_yankdup float_inc float_yankdup float_inc integer_min float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_inc float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_shove 81 float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times float_pop float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_div integer_dec print_float float_tan integer_sub)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 13.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 0.0 0 1.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 578.0623
Mean: 11.561246
Genome size: 128
Size: 129
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2041.2998172999994
Median total errors in population: 699.2003
Error averages by case: (68.30139249999996 3.238 77.51280699999869 8.749 55.144504 2.503 65.52138960000006 3.266 67.5945992999991 7.258 82.23058739999998 3.024 83.42229060000008 3.407 78.45139079999862 9.318 76.02218509999992 3.382 113.50777439999999 10.941 55.53633279999997 3.114 94.50999859999999 3.412 87.28064190000113 9.958 69.4659126 2.985 75.82217069999993 4.28 53.73030589999999 2.186 104.86971310000004 3.395 104.26234920000002 3.723 67.01430809999998 2.79 63.304580300001135 8.149 74.54673829999999 2.886 79.24336329999925 7.455 67.9768529000003 6.686 76.42270779999947 7.656 72.44692109999995 3.397)
Error minima by case: (0.0 0 3.42 7 0.0 0 0.0 0 0.2003 1 5.0 1 4.0 1 6.3431 1 1.0 1 1.9132 8 0.0 0 1.1873 1 6.7997 7 0.0 0 0.4503 1 0.0 0 0.7397 1 1.1622 1 0.0 0 0.2003 6 0.7931 1 4.7986 1 5.6961 1 12.7756 2 1.0 1)
Average genome size in population (length): 123.115
Average program size in population (points): 124.115
Average percent parens in population: 0.008
Minimum age in population: 231.8461623379754
Maximum age in population: 235.8553776328176
Average age in population: 234.0386107878989
Median age in population: 234.089088303168
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.919
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.919
Total error diversity:				 0.613
Error (vector) diversity:			 0.702
Behavioral diversity:				 0.709
--- Run Statistics ---
Number of program evaluations used so far: 172000
Number of point (instruction) evaluations so far: 403556127
--- Timings ---
Current time: 1529615880808 milliseconds
Total Time:         829.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       267.3 seconds, 32.2%
Fitness Testing:    447.4 seconds, 53.9%
Report:             115.1 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 171
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 172
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 172
;;******************************
;; -*- Number IO problem report - generation 172
Test total error for best: 36235.760900000016
Test mean error for best: 18.11788
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 35.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 148.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 78.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 73.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 48.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 48.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -84.5891975931
Correct output: 26.7802144548  | Program output: 24.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_sin} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mult} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 81} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_dec} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub})
Best program: (90.20029399850333 float_rot float_dec in1 float_add integer_pop float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_dup_items float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_sin 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup integer_yankdup integer_flush float_inc integer_yankdup integer_yankdup float_yankdup float_inc integer_add float_yankdup float_inc integer_mult float_yankdup float_inc float_yankdup float_inc integer_min float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_shove float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec integer_inc float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_inc float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_dec float_dec float_shove 81 float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times float_pop float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_div integer_dec print_float float_tan integer_sub)
Errors: [11.0 2 20.2003 7 0.0 0 4.0 2 1.7997 8 20.0 1 27.0 2 22.2003 9 22.0 2 63.0 10 3.0 1 44.0 2 13.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 1.0 1 1.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 577.6617
Mean: 11.553234
Genome size: 128
Size: 129
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2215.4753780999995
Median total errors in population: 686.6036000000001
Error averages by case: (76.02121509999999 3.404 85.09284269999871 8.814 61.50907739999998 2.528 72.73373580000008 3.385 77.20671169999906 7.182 90.119056 3.108 90.14043450000007 3.543 86.13851449999864 9.415 82.49319649999998 3.457 120.85647469999991 10.88 61.59970949999998 3.115 100.6864643000001 3.551 93.37622290000105 9.849 74.63584040000003 3.065 82.69990599999996 4.34 59.75921349999995 2.259 112.0517633000001 3.48 111.11741110000003 3.818 73.06212399999995 2.992 71.82388820000108 8.24 82.30046159999996 2.945 85.17813889999938 7.603 72.71387420000028 6.813 83.07235569999949 7.784 79.99574559999992 3.521)
Error minima by case: (0.0 0 5.42 7 0.0 0 0.0 0 0.2003 1 8.0 1 0.3223 1 3.3431 2 1.0 1 3.2073 8 0.0 0 3.2304 1 6.6717 7 0.0 0 0.0 0 0.0 0 2.7397 1 4.7646 1 0.0 0 0.0141 6 0.2069 1 7.5851 1 4.6961 1 13.1551 2 1.0 1)
Average genome size in population (length): 123.162
Average program size in population (points): 124.162
Average percent parens in population: 0.008
Minimum age in population: 233.1062516553168
Maximum age in population: 237.255614907314
Average age in population: 235.2877996586092
Median age in population: 235.3101764202826
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.904
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.904
Total error diversity:				 0.574
Error (vector) diversity:			 0.659
Behavioral diversity:				 0.667
--- Run Statistics ---
Number of program evaluations used so far: 173000
Number of point (instruction) evaluations so far: 406635227
--- Timings ---
Current time: 1529615886293 milliseconds
Total Time:         835.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       268.8 seconds, 32.2%
Fitness Testing:    450.5 seconds, 53.9%
Report:             115.8 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 172
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 173
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 173
;;******************************
;; -*- Number IO problem report - generation 173
Test total error for best: 36235.760900000016
Test mean error for best: 18.11788
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 35.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 148.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 78.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 73.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 48.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 48.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -84.5891975931
Correct output: 26.7802144548  | Program output: 24.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_sin} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mult} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 81} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_dec} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub})
Best program: (90.20029399850333 float_rot float_dec in1 float_add integer_pop float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_dup_items float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_sin 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup integer_yankdup integer_flush float_inc integer_yankdup integer_yankdup float_yankdup float_inc integer_add float_yankdup float_inc integer_mult float_yankdup float_inc float_yankdup float_inc integer_min float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_shove float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec integer_inc float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_inc float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_dec float_dec float_shove 81 float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times float_pop float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_div integer_dec print_float float_tan integer_sub)
Errors: [11.0 2 20.2003 7 0.0 0 4.0 2 1.7997 8 20.0 1 27.0 2 22.2003 9 22.0 2 63.0 10 3.0 1 44.0 2 13.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 1.0 1 1.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 577.6617
Mean: 11.553234
Genome size: 128
Size: 129
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2467.412059299999
Median total errors in population: 707.30045
Error averages by case: (88.87766929999997 3.392 93.72841569999854 8.821 72.59232679999997 2.55 85.73141080000009 3.396 86.14986099999895 7.29 102.20743309999999 3.138 100.7233543000001 3.51 95.17618589999856 9.469 96.59979619999999 3.448 132.47010469999998 10.942 66.67069929999997 3.193 110.57007230000002 3.556 101.39157160000113 10.004 86.76427859999995 3.063 96.21077189999997 4.367 64.29625949999998 2.291 123.6442286000001 3.477 119.29540059999995 3.721 82.15561229999996 2.826 79.32158390000122 8.259 94.08059400000005 2.94 93.914854999999 7.589 80.03091540000021 6.778 92.51489719999945 7.86 92.90476129999996 3.509)
Error minima by case: (0.0 0 0.42 7 0.0 0 0.0 0 0.2003 1 9.0 1 1.0 1 8.3431 1 0.0 0 0.2318 8 0.0 0 8.3099 1 8.7997 7 0.0413 1 0.0 0 0.0 0 4.2519 1 16.305 1 0.0 0 0.2003 6 0.2069 1 7.5851 1 1.6961 1 12.7756 2 0.0 0)
Average genome size in population (length): 123.061
Average program size in population (points): 124.061
Average percent parens in population: 0.008
Minimum age in population: 234.3859972233469
Maximum age in population: 238.5516993243451
Average age in population: 236.5212021357915
Median age in population: 236.4976761561887
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.91
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.91
Total error diversity:				 0.585
Error (vector) diversity:			 0.656
Behavioral diversity:				 0.663
--- Run Statistics ---
Number of program evaluations used so far: 174000
Number of point (instruction) evaluations so far: 409711752
--- Timings ---
Current time: 1529615891975 milliseconds
Total Time:         841.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       270.5 seconds, 32.2%
Fitness Testing:    453.9 seconds, 54.0%
Report:             116.5 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 173
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 174
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 174
;;******************************
;; -*- Number IO problem report - generation 174
Test total error for best: 35693.40160000003
Test mean error for best: 17.84670
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 67.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 48.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 42.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 25.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_inc} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction tagged_495} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_mod} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction integer_dec} {:instruction 92.00551630298831} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction integer_swap} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 81} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_min} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_mult} {:instruction integer_dec} {:instruction print_float} {:instruction float_tan} {:instruction float_max} {:instruction integer_fromfloat} {:instruction -56.50848481366526} {:instruction integer_flush})
Best program: (float_dec float_inc 90.20029399850333 float_rot float_dec in1 tagged_495 integer_pop float_dec float_dup_items integer_shove float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_mod float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 integer_dec 92.00551630298831 float_dec in1 in1 in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup integer_yankdup integer_flush float_inc integer_yankdup integer_yankdup float_yankdup float_inc integer_add float_yankdup float_inc float_yankdup float_inc integer_rot float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec float_dec float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dup in2 float_dec float_dec float_shove integer_inc float_dup in2 float_dec integer_swap in2 float_dec in2 float_dec float_dec float_shove 81 float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times float_min float_dup_items float_dec float_dup in2 float_swap float_dec float_dec float_yankdup integer_mult integer_dec print_float float_tan float_max integer_fromfloat -56.50848481366526 integer_flush)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 3.0 2 44.0 2 13.7997 8 20.0 1 18.0 3 3.0 1 52.0 2 55.0 2 0.0 0 0.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 577.0623
Mean: 11.541246
Genome size: 129
Size: 130
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2277.6785830999984
Median total errors in population: 679.4089000000001
Error averages by case: (79.70790039999996 3.255 88.59332549999839 8.778 65.0754951 2.359 75.54270630000003 3.251 79.6465072999989 7.228 93.70654910000002 2.977 92.83552810000002 3.378 88.30329739999837 9.416 89.06054409999997 3.318 124.9899872 10.898 62.31553279999995 3.16 103.53086289999999 3.399 93.5210010000013 9.875 79.7358275 2.906 88.27624679999995 4.234 59.92948069999997 2.199 116.0128529 3.332 112.10316989999997 3.651 74.40217899999996 2.767 73.60057850000123 8.232 86.01705509999996 2.761 85.46080629999919 7.665 71.97258860000034 6.712 82.7466003999995 7.749 83.70496019999997 3.387)
Error minima by case: (0.0 0 4.8534 7 0.0 0 0.0 0 0.0302 1 6.0 1 2.3991 1 4.3431 2 0.0 0 0.2939 8 0.0 0 6.9229 1 7.7997 7 0.1881 1 1.0 1 0.0 0 4.7397 1 25.918 1 0.0 0 0.2003 6 0.6947 1 11.5851 1 4.412 1 12.5808 2 0.0 0)
Average genome size in population (length): 123.129
Average program size in population (points): 124.129
Average percent parens in population: 0.008
Minimum age in population: 235.7478810745672
Maximum age in population: 239.8703147305961
Average age in population: 237.804738039605
Median age in population: 237.8788989320674
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.886
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.886
Total error diversity:				 0.572
Error (vector) diversity:			 0.639
Behavioral diversity:				 0.646
--- Run Statistics ---
Number of program evaluations used so far: 175000
Number of point (instruction) evaluations so far: 412789977
--- Timings ---
Current time: 1529615897716 milliseconds
Total Time:         846.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       272.0 seconds, 32.1%
Fitness Testing:    457.3 seconds, 54.0%
Report:             117.3 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 174
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 175
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 175
;;******************************
;; -*- Number IO problem report - generation 175
Test total error for best: 36355.56510000001
Test mean error for best: 18.17778
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 36.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 149.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 79.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 72.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 49.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 47.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 25.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_sin} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 81} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_dec} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub})
Best program: (90.20029399850333 float_rot float_dec in1 float_add integer_pop float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_dup_items float_dec integer_add float_dec integer_dup_items float_yankdup float_dec in2 in1 float_dup_items in1 float_sin 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup integer_yankdup integer_flush float_inc integer_yankdup integer_yankdup float_yankdup float_inc integer_add float_yankdup float_inc float_yankdup float_inc integer_min float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_shove float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec integer_inc float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_inc float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_dec float_dec float_shove 81 float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times float_pop float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_div integer_dec print_float float_tan integer_sub)
Errors: [11.0 2 21.2003 8 0.0 0 4.0 2 0.7997 8 20.0 1 27.0 2 23.2003 9 22.0 2 63.0 10 2.0 1 44.0 2 12.7997 8 20.0 1 18.0 3 2.0 1 52.0 2 55.0 2 0.0 0 0.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 573.6617
Mean: 11.473234
Genome size: 125
Size: 126
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2300.5562424999994
Median total errors in population: 678.83085
Error averages by case: (79.90759609999995 3.268 89.17603019999879 8.762 65.08947189999999 2.392 75.84450520000009 3.298 82.22013129999931 7.266 92.46759700000003 2.995 93.03066020000004 3.389 90.31753599999873 9.504 87.13050939999997 3.385 124.66287379999999 10.868 65.64931609999996 3.198 103.5473854 3.43 96.230614400001 9.843 79.34403359999996 2.922 86.54933599999995 4.25 63.93776839999996 2.276 115.71070030000006 3.353 112.47659619999997 3.733 74.89380569999996 2.631 74.77615620000098 8.199 85.59377489999999 2.769 88.1661093999994 7.573 76.56886340000025 6.911 86.10043709999952 7.699 83.85243429999996 3.398)
Error minima by case: (0.0 0 0.42 7 0.0 0 0.0 0 0.2003 1 3.0 1 4.0 1 3.3431 1 0.0 0 0.7941 9 0.0 0 4.9229 1 8.7997 7 0.0 0 0.0 0 0.0 0 7.7397 1 13.8169 1 0.0 0 0.2003 6 0.1639 1 2.155 1 6.6961 1 12.6265 2 0.0 0)
Average genome size in population (length): 123.596
Average program size in population (points): 124.596
Average percent parens in population: 0.008
Minimum age in population: 236.9393484685695
Maximum age in population: 241.6881332770677
Average age in population: 239.0989029637444
Median age in population: 239.1470832814613
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.897
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.897
Total error diversity:				 0.564
Error (vector) diversity:			 0.634
Behavioral diversity:				 0.642
--- Run Statistics ---
Number of program evaluations used so far: 176000
Number of point (instruction) evaluations so far: 415879902
--- Timings ---
Current time: 1529615903308 milliseconds
Total Time:         852.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       273.5 seconds, 32.1%
Fitness Testing:    460.7 seconds, 54.0%
Report:             118.0 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 175
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 176
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 176
;;******************************
;; -*- Number IO problem report - generation 176
Test total error for best: 36355.56510000001
Test mean error for best: 18.17778
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 36.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 149.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 79.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 72.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 49.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 47.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 25.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_inc} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_sin} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 81} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_dec} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub})
Best program: (float_dec float_inc 90.20029399850333 float_rot float_dec in1 float_add integer_pop float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_dup_items float_dec integer_add float_dec integer_dup_items float_yankdup float_dec in2 in1 float_dup_items in1 float_sin 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup integer_yankdup integer_flush float_inc integer_yankdup integer_yankdup float_yankdup float_inc integer_add float_yankdup float_inc float_yankdup float_inc integer_min float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_shove float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec integer_inc float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_inc float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_dec float_dec float_shove 81 float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times float_pop float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_div integer_dec print_float float_tan integer_sub)
Errors: [11.0 2 21.2003 8 0.0 0 4.0 2 0.7997 8 20.0 1 27.0 2 23.2003 9 22.0 2 63.0 10 2.0 1 44.0 2 12.7997 8 20.0 1 18.0 3 2.0 1 52.0 2 55.0 2 0.0 0 0.7997 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 573.6617
Mean: 11.473234
Genome size: 127
Size: 128
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2184.1187747999998
Median total errors in population: 679.5346499999999
Error averages by case: (73.7208272 3.308 85.50437609999861 8.784 60.22126509999999 2.282 69.62958430000006 3.278 77.2386940999992 7.223 87.21478229999998 2.975 88.22492410000002 3.415 86.33159739999859 9.417 81.318251 3.356 118.05222749999999 10.866 61.64844209999997 3.039 99.4754593 3.409 93.05162260000117 9.944 74.44246239999998 2.858 81.01820299999997 4.24 60.7274126 2.222 108.88480730000006 3.359 108.81971059999995 3.713 73.22190029999996 2.676 70.87942370000104 8.264 79.70319350000003 2.771 85.39645849999906 7.791 72.3280846000003 6.92 81.85838529999938 7.918 77.79267989999995 3.386)
Error minima by case: (0.0 0 5.42 7 0.0 0 0.0 0 0.2003 1 10.0 1 0.0 0 3.3431 2 1.0 1 0.4946 8 0.0 0 4.9229 1 6.6717 7 0.0 0 1.0 1 0.0 0 2.7397 1 17.9435 1 0.0 0 0.2003 6 0.1639 1 11.5851 1 1.6961 1 12.4528 2 0.0 0)
Average genome size in population (length): 123.327
Average program size in population (points): 124.327
Average percent parens in population: 0.008
Minimum age in population: 237.9393484685695
Maximum age in population: 242.6881332770677
Average age in population: 240.3966033193258
Median age in population: 240.435383772591
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.904
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.904
Total error diversity:				 0.564
Error (vector) diversity:			 0.639
Behavioral diversity:				 0.645
--- Run Statistics ---
Number of program evaluations used so far: 177000
Number of point (instruction) evaluations so far: 418963077
--- Timings ---
Current time: 1529615909042 milliseconds
Total Time:         857.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       275.0 seconds, 32.1%
Fitness Testing:    463.9 seconds, 54.1%
Report:             118.8 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 176
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 177
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 177
;;******************************
;; -*- Number IO problem report - generation 177
Test total error for best: 36488.775900000015
Test mean error for best: 18.24439
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 72.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 50.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 47.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 26.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_dup} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_sin} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 81} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_dec} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub})
Best program: (float_dec float_dup 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_rot integer_add float_add float_dup_items float_dec float_dup_items float_dec integer_add float_dec integer_dup_items float_yankdup float_dec in2 in1 float_dup_items in1 float_sin 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup integer_yankdup integer_flush float_inc integer_yankdup integer_yankdup float_yankdup float_inc integer_add float_yankdup float_inc float_yankdup float_inc integer_min float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_shove float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec integer_inc float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_inc float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_dec float_dec float_shove 81 float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times float_pop float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_div integer_dec print_float float_tan integer_sub)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 2.0 1 44.0 2 11.7997 8 20.0 1 18.0 3 2.0 1 52.0 2 55.0 2 0.0 0 0.2003 6 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 570.4629000000001
Mean: 11.409258
Genome size: 124
Size: 125
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2232.9534031
Median total errors in population: 680.74305
Error averages by case: (79.23863859999999 3.273 84.45129279999868 8.717 61.87134589999998 2.421 75.11260030000004 3.303 75.38786659999933 7.327 91.66910079999994 2.99 92.55240450000002 3.404 85.3866092999986 9.407 85.56544930000001 3.359 123.67952689999997 10.922 59.865739899999966 3.068 100.07134460000002 3.394 92.47074610000105 9.853 76.33998999999999 2.957 85.84678219999996 4.258 59.25993619999999 2.34 114.77274420000009 3.379 109.56377699999996 3.587 75.74039339999996 2.797 68.57950330000092 8.139 84.44002 2.834 85.85892109999938 7.789 71.15584770000031 6.761 83.22329349999947 7.917 83.27252889999994 3.381)
Error minima by case: (0.0 0 0.42 7 0.0 0 0.0 0 0.2003 1 8.0 1 2.0 1 3.3431 2 0.0 0 3.9677 8 0.0 0 4.9229 1 8.0103 7 0.0 0 0.0 0 0.0 0 2.7397 1 5.8813 1 0.0 0 0.2003 6 0.2069 1 0.3475 1 2.6961 1 12.7523 2 0.8483 1)
Average genome size in population (length): 123.413
Average program size in population (points): 124.413
Average percent parens in population: 0.008
Minimum age in population: 239.6974098850429
Maximum age in population: 243.9141102742203
Average age in population: 241.665348196199
Median age in population: 241.6716837511828
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.921
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.921
Total error diversity:				 0.567
Error (vector) diversity:			 0.648
Behavioral diversity:				 0.652
--- Run Statistics ---
Number of program evaluations used so far: 178000
Number of point (instruction) evaluations so far: 422048427
--- Timings ---
Current time: 1529615914753 milliseconds
Total Time:         863.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       276.6 seconds, 32.0%
Fitness Testing:    467.1 seconds, 54.1%
Report:             119.7 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 177
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 178
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 178
;;******************************
;; -*- Number IO problem report - generation 178
Test total error for best: 36488.775900000015
Test mean error for best: 18.24439
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 72.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 50.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 47.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 26.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_dup} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_sin} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 81} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_dec} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub})
Best program: (float_dec float_dup 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_rot integer_add float_add float_dup_items float_dec float_dup_items float_dec integer_add float_dec integer_dup_items float_yankdup float_dec in2 in1 float_dup_items in1 float_sin 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup integer_yankdup integer_flush float_inc integer_yankdup integer_yankdup float_yankdup float_inc integer_add float_yankdup float_inc float_yankdup float_inc integer_min float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_shove float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec integer_inc float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_inc float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_dec float_dec float_shove 81 float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times float_pop float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_div integer_dec print_float float_tan integer_sub)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 2.0 1 44.0 2 11.7997 8 20.0 1 18.0 3 2.0 1 52.0 2 55.0 2 0.0 0 0.2003 6 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 570.4629000000001
Mean: 11.409258
Genome size: 124
Size: 125
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2631.7128109000005
Median total errors in population: 704.8398
Error averages by case: (95.48647959999994 3.522 99.68662749999862 8.755 77.55393419999999 2.748 91.94171470000003 3.527 94.0066289999996 7.541 108.02278489999999 3.282 107.70893920000002 3.653 101.40191929999855 9.465 101.67324669999996 3.602 138.80781089999996 10.937 75.59568109999995 3.268 115.5010688 3.694 108.52208630000115 9.972 91.22347609999996 3.224 101.33318559999995 4.445 72.41706499999997 2.639 131.36579250000003 3.581 126.47854559999999 3.98 88.49107749999997 3.116 87.1884267000011 8.299 101.24813579999999 3.058 99.89655649999898 7.573 86.31373370000026 6.831 98.07892829999945 7.815 99.62196539999992 3.62)
Error minima by case: (0.0 0 5.3393 7 0.0 0 0.0 0 7.0E-4 1 8.0 1 1.0 1 3.3431 2 0.0 0 0.9968 8 0.0 0 4.3024 1 9.7997 7 0.1428 1 0.0 0 0.0 0 2.2519 1 14.4456 1 0.0 0 0.2003 6 0.2069 1 4.5851 1 0.7916 1 12.4562 2 0.0 0)
Average genome size in population (length): 123.746
Average program size in population (points): 124.746
Average percent parens in population: 0.008
Minimum age in population: 240.9453980825847
Maximum age in population: 245.2361068979229
Average age in population: 242.9733374153483
Median age in population: 243.0306602617242
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.923
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.923
Total error diversity:				 0.604
Error (vector) diversity:			 0.694
Behavioral diversity:				 0.699
--- Run Statistics ---
Number of program evaluations used so far: 179000
Number of point (instruction) evaluations so far: 425142077
--- Timings ---
Current time: 1529615920317 milliseconds
Total Time:         869.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       278.2 seconds, 32.0%
Fitness Testing:    470.4 seconds, 54.1%
Report:             120.7 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 178
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 179
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 179
;;******************************
;; -*- Number IO problem report - generation 179
Test total error for best: 35596.568400000026
Test mean error for best: 17.79828
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 72.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 50.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 47.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 26.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_inc} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_add} {:instruction float_dup_items} {:instruction integer_max} {:instruction float_mod} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction integer_sub} {:instruction in1} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mult} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 81} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_dec} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub})
Best program: (float_dec float_inc 90.20029399850333 float_rot float_dec in1 float_add integer_pop float_dec float_add float_dup_items integer_max float_mod float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 integer_sub in1 in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup float_yankdup integer_yankdup integer_flush float_inc integer_yankdup integer_yankdup float_yankdup integer_add float_yankdup float_inc integer_mult float_yankdup float_inc float_yankdup float_inc integer_min float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_shove float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec integer_inc float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_inc float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_dec float_dec float_shove 81 float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times float_pop float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_div integer_dec print_float float_tan integer_sub)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 2.0 1 44.0 2 11.7997 8 20.0 1 18.0 3 2.0 1 52.0 2 55.0 2 0.0 0 0.2003 6 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 570.4629000000001
Mean: 11.409258
Genome size: 125
Size: 126
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2410.132416399998
Median total errors in population: 706.4222
Error averages by case: (83.66392799999996 3.43 92.06163829999839 8.671 68.86082589999998 2.786 80.07485680000009 3.448 86.70847579999977 7.63 96.97723179999997 3.305 97.52299610000003 3.577 92.6035024999983 9.418 90.37494519999998 3.556 127.73898749999998 11.01 70.69294229999991 3.265 107.3629831 3.616 102.4686658000014 9.982 82.174323 3.229 90.24297629999995 4.433 70.09160009999997 2.633 118.22514750000008 3.555 118.20510579999994 3.945 82.08839009999993 3.2 80.10179740000106 8.265 90.0990888999999 3.087 92.26673709999908 7.619 78.84162770000032 6.652 91.23638549999944 7.841 87.72525789999987 3.569)
Error minima by case: (0.0 0 0.42 7 0.0 0 0.0 0 0.1964 1 4.0 1 4.4878 1 1.3967 1 0.5122 1 3.502 8 0.0 0 4.9229 1 7.311 7 0.0598 1 1.0 1 0.0 0 1.2519 1 19.1433 1 0.0 0 0.2003 6 0.1575 1 6.5851 1 0.6961 1 12.7523 2 0.0 0)
Average genome size in population (length): 124.405
Average program size in population (points): 125.405
Average percent parens in population: 0.008
Minimum age in population: 241.9453980825847
Maximum age in population: 246.3705766996499
Average age in population: 244.299762836067
Median age in population: 244.3673063691177
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.939
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.939
Total error diversity:				 0.638
Error (vector) diversity:			 0.734
Behavioral diversity:				 0.736
--- Run Statistics ---
Number of program evaluations used so far: 180000
Number of point (instruction) evaluations so far: 428252202
--- Timings ---
Current time: 1529615925789 milliseconds
Total Time:         874.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       279.7 seconds, 32.0%
Fitness Testing:    473.6 seconds, 54.1%
Report:             121.4 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 179
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 180
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 180
;;******************************
;; -*- Number IO problem report - generation 180
Test total error for best: 35596.568400000026
Test mean error for best: 17.79828
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 72.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 50.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 47.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -85.5891975931
Correct output: 26.7802144548  | Program output: 26.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_mod} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction integer_sub} {:instruction in1} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mult} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 81} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_dec} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub})
Best program: (90.20029399850333 float_rot float_dec in1 float_add integer_pop float_dec float_mod float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 integer_sub in1 in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup float_yankdup integer_yankdup integer_flush float_inc integer_yankdup integer_yankdup float_yankdup integer_add float_yankdup float_inc integer_mult float_yankdup float_inc float_yankdup float_inc integer_min float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_shove float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec integer_inc float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_inc float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_dec float_dec float_shove 81 float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times float_pop float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_div integer_dec print_float float_tan integer_sub)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 2.0 1 44.0 2 11.7997 8 20.0 1 18.0 3 2.0 1 52.0 2 55.0 2 0.0 0 0.2003 6 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 570.4629000000001
Mean: 11.409258
Genome size: 120
Size: 121
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2545.4364694999995
Median total errors in population: 708.7691
Error averages by case: (89.80805519999997 3.344 95.24604769999868 8.649 75.93226609999998 2.714 87.69448460000005 3.371 87.8311265 7.732 102.79791659999995 3.211 103.67375290000001 3.5 96.12519929999863 9.432 96.83601099999996 3.484 134.37936520000002 11.03 77.07027229999991 3.077 114.5205595 3.574 108.68865560000108 10.111 89.63978009999997 3.165 96.11166599999997 4.346 75.10573079999999 2.547 125.30630520000001 3.458 123.41151439999999 3.947 86.05821429999992 3.11 82.89450130000081 8.255 95.25467539999997 2.993 97.21662619999914 7.688 84.1628292000003 6.763 95.1973158999994 7.761 93.72559819999991 3.486)
Error minima by case: (0.0 0 0.42 7 0.0 0 0.0 0 0.2003 1 7.0 1 1.0 1 8.3431 1 0.9672 1 1.9132 9 0.0 0 10.6278 1 6.7997 7 0.9119 1 0.0 0 0.0 0 1.006 1 2.6327 1 0.0 0 0.2003 6 0.7305 1 5.5851 1 6.2156 1 12.7523 2 0.0 0)
Average genome size in population (length): 124.54
Average program size in population (points): 125.54
Average percent parens in population: 0.008
Minimum age in population: 242.9453980825847
Maximum age in population: 248.0109561957547
Average age in population: 245.6287571052139
Median age in population: 245.6848293260479
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.937
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.937
Total error diversity:				 0.615
Error (vector) diversity:			 0.737
Behavioral diversity:				 0.738
--- Run Statistics ---
Number of program evaluations used so far: 181000
Number of point (instruction) evaluations so far: 431365702
--- Timings ---
Current time: 1529615931577 milliseconds
Total Time:         880.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       281.3 seconds, 31.9%
Fitness Testing:    477.1 seconds, 54.2%
Report:             122.1 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 180
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 181
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 181
;;******************************
;; -*- Number IO problem report - generation 181
Test total error for best: 36511.77590000002
Test mean error for best: 18.25589
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 70.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 50.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 45.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -87.5891975931
Correct output: 26.7802144548  | Program output: 26.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_dup} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_sin} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 81} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_dec} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub})
Best program: (float_dec float_dup 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_rot integer_add float_add float_dup_items float_dec float_dup_items float_dec integer_add float_dec integer_dup_items float_yankdup float_dec in2 in1 float_dup_items in1 float_sin 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup integer_yankdup integer_flush float_inc integer_yankdup float_inc integer_min float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_shove float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec integer_inc float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_inc float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_dec float_dec float_shove 81 float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times float_pop float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_div integer_dec print_float float_tan integer_sub)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 0.0 0 44.0 2 11.7997 8 20.0 1 18.0 3 0.0 0 52.0 2 55.0 2 2.0 1 0.2003 6 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 567.4629000000001
Mean: 11.349258
Genome size: 117
Size: 118
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2339.0956481999997
Median total errors in population: 705.5245500000001
Error averages by case: (82.80671289999997 3.302 87.76424489999852 8.576 65.33213519999998 2.634 78.95989540000008 3.316 80.80325070000019 7.856 95.9345148 3.153 97.72640400000006 3.45 89.1814017999985 9.421 89.37872199999993 3.37 127.51983789999997 11.019 67.45471899999995 2.935 104.25333930000002 3.48 97.2950398000012 9.939 78.86848810000004 3.066 89.09870279999997 4.277 64.42011030000002 2.553 118.42627720000007 3.438 114.74100830000003 3.834 79.63916629999997 3.132 72.71330530000075 8.116 89.44828030000005 2.971 89.73201479999906 7.695 74.14022780000026 6.51 87.3615668999994 7.827 86.77428239999993 3.452)
Error minima by case: (0.0 0 1.58 7 0.0 0 0.0 0 0.2003 1 8.0 1 0.0 0 3.3431 1 0.0 0 1.9132 8 0.0 0 6.9229 1 7.7997 7 0.0225 1 1.0 1 0.0 0 7.2519 1 0.1758 1 0.0 0 0.2003 6 0.2069 1 3.5851 1 4.6961 1 12.7756 2 0.0 0)
Average genome size in population (length): 124.217
Average program size in population (points): 125.217
Average percent parens in population: 0.008
Minimum age in population: 244.8392952087561
Maximum age in population: 249.2166562961963
Average age in population: 246.9662691348016
Median age in population: 246.9911486704094
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.938
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.938
Total error diversity:				 0.628
Error (vector) diversity:			 0.762
Behavioral diversity:				 0.764
--- Run Statistics ---
Number of program evaluations used so far: 182000
Number of point (instruction) evaluations so far: 434471127
--- Timings ---
Current time: 1529615937267 milliseconds
Total Time:         886.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       282.8 seconds, 31.9%
Fitness Testing:    480.4 seconds, 54.2%
Report:             122.9 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 181
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 182
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 182
;;******************************
;; -*- Number IO problem report - generation 182
Test total error for best: 36511.77590000002
Test mean error for best: 18.25589
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 70.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 50.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 45.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -87.5891975931
Correct output: 26.7802144548  | Program output: 26.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_dup} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_sin} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 81} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_dec} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub})
Best program: (float_dec float_dup 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_rot integer_add float_add float_dup_items float_dec float_dup_items float_dec integer_add float_dec integer_dup_items float_yankdup float_dec in2 in1 float_dup_items in1 float_sin 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup integer_yankdup integer_flush float_inc integer_yankdup float_inc integer_min float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_shove float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec integer_inc float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_inc float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_dec float_dec float_shove 81 float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times float_pop float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_div integer_dec print_float float_tan integer_sub)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 0.0 0 44.0 2 11.7997 8 20.0 1 18.0 3 0.0 0 52.0 2 55.0 2 2.0 1 0.2003 6 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 567.4629000000001
Mean: 11.349258
Genome size: 117
Size: 118
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2403.0223218999995
Median total errors in population: 716.5515
Error averages by case: (81.89811099999996 3.439 91.7064015999986 8.67 69.29418209999997 2.792 78.51102290000001 3.422 86.01819960000024 7.896 96.02245529999999 3.302 95.75257200000004 3.6 91.63680369999848 9.414 89.13408229999995 3.551 125.49707689999997 11.01 71.73733119999991 3.093 107.94967350000002 3.626 103.61740230000117 10.103 82.62699329999998 3.223 89.33207139999993 4.41 68.30827969999997 2.762 116.94631980000003 3.561 118.27269280000002 3.992 87.96553029999994 3.18 79.64847000000061 8.238 87.95766980000002 3.121 92.89956449999902 7.653 79.51314840000028 6.626 92.59976389999942 7.893 85.99150359999993 3.608)
Error minima by case: (0.0 0 1.42 7 0.0 0 0.0 0 0.2003 1 9.0 1 3.0 1 2.3431 1 1.0 1 1.4136 7 0.0 0 4.9229 1 6.7997 6 0.0881 1 1.0 1 0.0 0 3.2519 1 23.918 1 0.0 0 0.2003 6 0.1688 1 6.5851 1 1.6961 1 12.4314 2 0.0 0)
Average genome size in population (length): 124.02
Average program size in population (points): 125.02
Average percent parens in population: 0.008
Minimum age in population: 245.9513494122097
Maximum age in population: 250.3412025761756
Average age in population: 248.3456875588805
Median age in population: 248.4174101944589
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.934
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.934
Total error diversity:				 0.651
Error (vector) diversity:			 0.768
Behavioral diversity:				 0.769
--- Run Statistics ---
Number of program evaluations used so far: 183000
Number of point (instruction) evaluations so far: 437571652
--- Timings ---
Current time: 1529615942865 milliseconds
Total Time:         891.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       284.2 seconds, 31.9%
Fitness Testing:    483.5 seconds, 54.2%
Report:             123.8 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 182
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 183
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 183
;;******************************
;; -*- Number IO problem report - generation 183
Test total error for best: 36511.77590000002
Test mean error for best: 18.25589
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 70.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 50.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 45.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -87.5891975931
Correct output: 26.7802144548  | Program output: 26.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_dup} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_sin} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 81} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_dec} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub})
Best program: (float_dec float_dup 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_rot integer_add float_add float_dup_items float_dec float_dup_items float_dec integer_add float_dec integer_dup_items float_yankdup float_dec in2 in1 float_dup_items in1 float_sin 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup integer_yankdup integer_flush float_inc integer_yankdup float_inc integer_min float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_shove float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec integer_inc float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_inc float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_dec float_dec float_shove 81 float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times float_pop float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_div integer_dec print_float float_tan integer_sub)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 0.0 0 44.0 2 11.7997 8 20.0 1 18.0 3 0.0 0 52.0 2 55.0 2 2.0 1 0.2003 6 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 567.4629000000001
Mean: 11.349258
Genome size: 117
Size: 118
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2565.9968239000013
Median total errors in population: 699.0343
Error averages by case: (89.95309569999998 3.564 98.18852279999852 8.696 76.55313369999992 2.825 86.5939396000001 3.541 91.94884390000024 7.841 103.99945749999998 3.411 103.50595560000005 3.702 98.64427819999842 9.452 97.04268409999993 3.672 133.5907049 10.992 77.02097769999992 2.999 114.11868790000005 3.727 105.26005210000129 9.896 90.57086670000001 3.314 97.54219689999992 4.548 74.43880969999992 2.746 126.24767570000007 3.668 125.04409839999997 4.039 87.21626469999995 2.984 85.70972270000054 8.209 96.29959160000004 3.154 97.59774979999881 7.905 85.31836950000026 6.997 95.96109799999934 8.091 93.96704649999991 3.69)
Error minima by case: (0.0 0 1.58 7 0.0 0 0.0 0 0.2003 1 8.0 1 3.0 1 7.3431 1 1.0 1 0.2318 7 0.0 0 3.958 1 7.7997 7 0.0 0 1.0 1 0.0 0 2.2603 1 11.953 1 0.0 0 0.2003 6 0.5007 1 6.5851 1 3.6961 1 9.5808 2 0.0 0)
Average genome size in population (length): 123.508
Average program size in population (points): 124.508
Average percent parens in population: 0.008
Minimum age in population: 246.9513494122097
Maximum age in population: 252.0320374286283
Average age in population: 249.6603122158977
Median age in population: 249.7168834988589
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.905
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.905
Total error diversity:				 0.594
Error (vector) diversity:			 0.703
Behavioral diversity:				 0.704
--- Run Statistics ---
Number of program evaluations used so far: 184000
Number of point (instruction) evaluations so far: 440659352
--- Timings ---
Current time: 1529615948384 milliseconds
Total Time:         897.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       285.9 seconds, 31.9%
Fitness Testing:    486.6 seconds, 54.2%
Report:             124.7 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 183
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 184
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 184
;;******************************
;; -*- Number IO problem report - generation 184
Test total error for best: 35619.568400000026
Test mean error for best: 17.80978
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 70.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 50.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 45.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -87.5891975931
Correct output: 26.7802144548  | Program output: 26.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_dup} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 81} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_dec} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub})
Best program: (float_dec float_dup 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_rot integer_add float_add float_dup_items float_dec float_dup_items float_dec integer_flush float_dec integer_dup_items float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup integer_yankdup integer_flush float_inc integer_yankdup float_inc integer_min float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec print_integer float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec integer_inc float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_inc float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_dec float_dec float_shove 81 float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times float_pop float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_div integer_dec print_float float_tan integer_sub)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 0.0 0 44.0 2 11.7997 8 20.0 1 18.0 3 0.0 0 52.0 2 55.0 2 2.0 1 0.2003 6 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 567.4629000000001
Mean: 11.349258
Genome size: 117
Size: 118
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2304.0107381000007
Median total errors in population: 709.0334
Error averages by case: (79.68063609999997 3.257 90.20870159999876 8.688 64.77573199999998 2.538 76.20449320000004 3.307 84.09779479999993 7.546 91.91876739999998 3.093 93.00322150000002 3.438 91.25893389999871 9.449 85.85781359999991 3.398 123.7726569 10.948 65.06348959999994 2.885 102.81300979999999 3.493 96.85064080000103 9.975 78.65266349999997 3.033 85.27337389999997 4.265 61.98853750000002 2.638 115.53042850000004 3.408 111.80515679999999 4.064 77.23322579999996 3.007 77.69264070000024 8.07 85.93381750000003 2.924 89.06097909999923 7.771 74.20773280000027 6.602 88.3169372999994 7.939 83.68135349999996 3.392)
Error minima by case: (0.0 0 5.42 7 0.0 0 0.0 0 0.2003 1 7.0 1 2.0 1 2.3431 1 0.0 0 1.3828 8 0.0 0 0.1855 1 8.7997 7 0.0 0 0.0 0 0.0 0 7.2519 1 1.2692 1 0.0 0 0.0718 6 0.7931 1 5.5851 1 0.7916 1 12.4528 2 0.0 0)
Average genome size in population (length): 123.18
Average program size in population (points): 124.18
Average percent parens in population: 0.008
Minimum age in population: 248.9741557868695
Maximum age in population: 252.8483806095815
Average age in population: 250.9941313315957
Median age in population: 251.0009184413289
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.937
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.937
Total error diversity:				 0.645
Error (vector) diversity:			 0.74
Behavioral diversity:				 0.741
--- Run Statistics ---
Number of program evaluations used so far: 185000
Number of point (instruction) evaluations so far: 443738852
--- Timings ---
Current time: 1529615954070 milliseconds
Total Time:         902.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       287.4 seconds, 31.8%
Fitness Testing:    489.7 seconds, 54.2%
Report:             125.6 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 184
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 185
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 185
;;******************************
;; -*- Number IO problem report - generation 185
Test total error for best: 36511.77590000002
Test mean error for best: 18.25589
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 70.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 50.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 45.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -87.5891975931
Correct output: 26.7802144548  | Program output: 26.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction 90.20029399850333} {:instruction float_rot} {:instruction integer_add} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_sin} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 81} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_dec} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub})
Best program: (90.20029399850333 float_rot integer_add in1 float_add integer_pop float_dec float_dup_items float_dec float_rot integer_add float_add float_dup_items float_dec float_dup_items float_dec integer_add float_dec integer_dup_items float_yankdup float_dec in2 in1 float_dup_items in1 float_sin 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup integer_yankdup integer_flush float_inc integer_yankdup float_inc integer_min float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_shove float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec integer_inc float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_inc float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_dec float_dec float_shove 81 float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times float_pop float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_div integer_dec print_float float_tan integer_sub)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 0.0 0 44.0 2 11.7997 8 20.0 1 18.0 3 0.0 0 52.0 2 55.0 2 2.0 1 0.2003 6 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 567.4629000000001
Mean: 11.349258
Genome size: 117
Size: 118
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2667.897680900001
Median total errors in population: 701.9675500000001
Error averages by case: (93.23051419999994 3.437 104.29703859999867 8.824 80.15858769999998 2.737 89.5598641000001 3.46 97.73431969999955 7.688 106.10948969999998 3.31 106.25535260000008 3.6 104.6166788999986 9.562 99.89926279999999 3.582 137.04889229999998 11.055 78.80769689999993 2.877 118.6786689 3.678 112.31313970000113 10.024 93.73818009999994 3.218 99.77540119999995 4.435 79.08919809999995 2.702 128.38797170000007 3.533 128.44499709999997 4.064 91.89026619999994 3.237 91.37389759999989 8.07 99.78168010000003 3.052 103.07625119999894 7.857 90.77307550000026 6.756 103.22761129999935 8.136 97.17164469999994 3.564)
Error minima by case: (0.0 0 1.58 7 0.0 0 0.0 0 0.2003 1 8.0 1 2.0 1 3.3431 1 2.0 1 4.4569 7 0.0 0 4.9229 1 7.7997 6 0.0 0 0.0 0 0.0 0 4.2603 1 18.9553 1 0.0 0 0.2003 6 0.6947 1 5.5851 1 2.7497 1 11.0342 2 1.0 1)
Average genome size in population (length): 122.668
Average program size in population (points): 123.668
Average percent parens in population: 0.008
Minimum age in population: 250.015303964439
Maximum age in population: 254.4173274112151
Average age in population: 252.3034953369198
Median age in population: 252.3406291076258
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.922
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.922
Total error diversity:				 0.61
Error (vector) diversity:			 0.707
Behavioral diversity:				 0.708
--- Run Statistics ---
Number of program evaluations used so far: 186000
Number of point (instruction) evaluations so far: 446805552
--- Timings ---
Current time: 1529615959614 milliseconds
Total Time:         908.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       288.9 seconds, 31.8%
Fitness Testing:    493.0 seconds, 54.3%
Report:             126.6 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 185
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 186
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 186
;;******************************
;; -*- Number IO problem report - generation 186
Test total error for best: 36511.77590000002
Test mean error for best: 18.25589
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 70.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 50.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 45.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -87.5891975931
Correct output: 26.7802144548  | Program output: 26.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_dup} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_sin} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction integer_add} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 81} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_dec} {:instruction print_float} {:instruction float_tan})
Best program: (float_dec float_dup 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_dup_items float_dup_items float_dec integer_stackdepth integer_add float_add float_dup_items float_dec float_dup_items float_dec integer_add integer_rot integer_dup_items float_yankdup float_dec in2 in1 float_dup_items in1 float_sin 90.20029399850333 float_dec in1 in1 integer_add in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup integer_yankdup integer_flush integer_add float_yankdup float_inc float_yankdup float_inc integer_min float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_shove float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec integer_inc float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_inc float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_dec float_dec float_shove 81 float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times float_pop float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_div integer_dec print_float float_tan)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 0.0 0 44.0 2 11.7997 8 20.0 1 18.0 3 0.0 0 52.0 2 55.0 2 2.0 1 0.2003 6 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 567.4629000000001
Mean: 11.349258
Genome size: 121
Size: 122
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2588.6224337000003
Median total errors in population: 717.3011999999999
Error averages by case: (92.09174199999994 3.45 98.03517309999839 8.797 76.07286669999993 2.73 89.45059060000008 3.463 91.56269199999937 7.525 105.7570483 3.299 104.31168690000008 3.589 98.27108809999832 9.524 99.16924029999996 3.599 136.67969579999993 11.028 77.34023049999992 3.059 114.06525969999998 3.646 107.01715260000122 10.096 89.21529029999996 3.213 99.01885359999994 4.439 73.82458639999993 2.824 127.97555090000004 3.573 123.5905264 4.245 91.73364319999992 3.463 84.40768569999983 8.06 98.08764919999999 3.052 98.14852649999877 7.867 86.60890480000032 6.761 97.52758459999924 7.946 95.87016549999991 3.541)
Error minima by case: (0.0 0 0.0922 7 0.0 0 0.0 0 0.041 1 9.0 1 1.0 1 3.3431 1 1.0 1 2.0695 8 0.0 0 4.9229 1 7.7997 7 0.0 0 0.0 0 0.0 0 2.2519 1 23.918 1 0.0 0 0.041 6 0.2069 1 3.5851 1 3.6961 1 12.6749 2 0.0 0)
Average genome size in population (length): 121.527
Average program size in population (points): 122.527
Average percent parens in population: 0.008
Minimum age in population: 251.4609852821109
Maximum age in population: 255.3301094004376
Average age in population: 253.6082153049284
Median age in population: 253.6493069223446
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.916
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.916
Total error diversity:				 0.619
Error (vector) diversity:			 0.708
Behavioral diversity:				 0.709
--- Run Statistics ---
Number of program evaluations used so far: 187000
Number of point (instruction) evaluations so far: 449843727
--- Timings ---
Current time: 1529615964966 milliseconds
Total Time:         914.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       290.5 seconds, 31.8%
Fitness Testing:    496.0 seconds, 54.3%
Report:             127.3 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 186
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 187
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 187
;;******************************
;; -*- Number IO problem report - generation 187
Test total error for best: 36511.77590000002
Test mean error for best: 18.25589
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 37.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 150.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 80.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 70.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 50.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 45.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -87.5891975931
Correct output: 26.7802144548  | Program output: 26.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_dup} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_sin} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_min} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 81} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_dec} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub})
Best program: (float_dec float_dup 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_rot integer_add float_add float_dup_items float_dec integer_shove float_dec integer_add float_dec float_sub float_yankdup float_dec in2 in1 float_dup_items in1 float_sin 90.20029399850333 float_dec in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup integer_yankdup integer_flush float_inc integer_min integer_yankdup float_yankdup float_inc integer_add float_yankdup float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_shove float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec integer_inc float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_inc float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_dec float_dec float_shove 81 float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times float_pop float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_div integer_dec print_float float_tan integer_sub)
Errors: [11.0 2 22.2003 8 0.0 0 4.0 2 0.2003 6 20.0 1 27.0 2 24.2003 9 22.0 2 63.0 10 0.0 0 44.0 2 11.7997 8 20.0 1 18.0 3 0.0 0 52.0 2 55.0 2 2.0 1 0.2003 6 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 567.4629000000001
Mean: 11.349258
Genome size: 120
Size: 121
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2680.2717326000015
Median total errors in population: 704.8978999999999
Error averages by case: (94.04114029999995 3.517 102.12050359999846 8.808 80.64783570000002 2.806 90.66226980000008 3.507 94.98587399999916 7.352 107.59996350000002 3.356 108.23206350000007 3.675 105.00886289999835 9.446 100.94273609999992 3.673 137.75549970000003 10.994 81.0820374999999 3.138 118.95360079999992 3.767 112.47538450000127 10.079 93.78711369999995 3.252 100.78892599999992 4.495 77.73021679999992 2.871 129.39023670000003 3.594 128.04808579999994 4.38 95.28454329999997 3.591 88.83937219999954 7.919 100.07404670000003 3.119 105.96755129999873 7.856 90.13460040000032 6.757 104.25778699999933 7.941 97.92848079999993 3.64)
Error minima by case: (0.0 0 5.42 7 0.0 0 0.0 0 0.0767 1 11.0 1 1.0 1 2.2708 1 1.0 1 0.4702 8 0.0 0 6.9229 1 0.889 7 0.0881 1 0.0 0 0.0 0 0.9378 1 24.2618 1 0.0 0 0.0767 6 0.3053 1 7.5851 2 1.9172 1 13.1551 2 0.0 0)
Average genome size in population (length): 120.418
Average program size in population (points): 121.418
Average percent parens in population: 0.008
Minimum age in population: 252.662311626745
Maximum age in population: 256.8150819233661
Average age in population: 254.9900661212481
Median age in population: 255.0071749152506
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.909
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.909
Total error diversity:				 0.61
Error (vector) diversity:			 0.689
Behavioral diversity:				 0.69
--- Run Statistics ---
Number of program evaluations used so far: 188000
Number of point (instruction) evaluations so far: 452854177
--- Timings ---
Current time: 1529615970900 milliseconds
Total Time:         919.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       292.1 seconds, 31.8%
Fitness Testing:    499.3 seconds, 54.3%
Report:             128.1 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 187
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 188
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 188
;;******************************
;; -*- Number IO problem report - generation 188
Test total error for best: 35439.56740000003
Test mean error for best: 17.71978
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 35.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 148.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 78.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 70.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 51.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 45.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -87.5891975931
Correct output: 26.7802144548  | Program output: 27.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_dup} {:instruction integer_min} {:instruction float_dup} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_yank} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_sub} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction 90.62601647526289} {:instruction integer_yank} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mult} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_add} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 81} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_dec} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub})
Best program: (float_dec float_dup integer_min float_dup 90.20029399850333 float_rot float_dec in1 float_add float_inc float_dec float_dec float_add float_dup_items float_dec float_dup_items float_yank integer_add float_dec float_dec float_yankdup integer_sub in2 in1 float_dup_items in1 90.62601647526289 integer_yank in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup integer_yankdup integer_flush integer_yankdup float_yankdup integer_add float_yankdup float_inc integer_mult float_yankdup float_inc float_yankdup integer_add integer_min float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_shove float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec integer_inc float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_inc float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_shove 81 float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times float_pop float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_div integer_dec print_float float_tan integer_sub)
Errors: [11.0 2 20.2003 7 0.0 0 4.0 2 1.7997 8 20.0 1 27.0 2 22.2003 9 22.0 2 63.0 10 0.0 0 44.0 2 10.7997 8 20.0 1 18.0 3 0.0 0 52.0 2 55.0 2 2.0 1 1.2003 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 567.0622999999999
Mean: 11.341246
Genome size: 124
Size: 125
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2508.618122200002
Median total errors in population: 694.50425
Error averages by case: (87.7029553 3.48 96.74537469999866 8.839 73.57416430000002 2.672 84.37592940000009 3.461 89.09983089999919 7.284 101.22055169999996 3.25 101.44713040000005 3.617 97.40286099999864 9.429 95.19056879999994 3.586 131.52934169999997 10.957 74.69328799999988 2.757 111.40674819999998 3.638 103.53265000000117 9.885 87.04595360000002 3.165 94.9529264999999 4.421 72.09299449999995 2.457 122.97364760000008 3.577 120.33215209999997 4.233 90.08916239999989 3.352 84.08588729999956 7.978 93.64814860000008 3.041 96.56554359999912 7.836 81.43754870000029 6.86 94.31512619999938 8.034 91.75763669999992 3.591)
Error minima by case: (0.0 0 0.42 7 0.0 0 0.0 0 0.0767 1 4.0 1 1.0 1 6.3431 1 2.0 1 3.1814 8 0.0 0 1.4944 1 6.7997 7 0.0 0 0.0 0 0.0 0 3.7397 1 6.5006 1 0.0 0 0.0767 6 0.2069 1 10.5851 1 2.7916 1 13.1551 2 0.0 0)
Average genome size in population (length): 120.218
Average program size in population (points): 121.218
Average percent parens in population: 0.008
Minimum age in population: 254.2174679754897
Maximum age in population: 258.1417347638552
Average age in population: 256.3297213683995
Median age in population: 256.376613719221
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.906
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.906
Total error diversity:				 0.594
Error (vector) diversity:			 0.674
Behavioral diversity:				 0.674
--- Run Statistics ---
Number of program evaluations used so far: 189000
Number of point (instruction) evaluations so far: 455859627
--- Timings ---
Current time: 1529615976283 milliseconds
Total Time:         925.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       293.7 seconds, 31.7%
Fitness Testing:    502.4 seconds, 54.3%
Report:             129.1 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 188
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 189
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 189
;;******************************
;; -*- Number IO problem report - generation 189
Test total error for best: 35439.56740000003
Test mean error for best: 17.71978
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 35.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 148.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 78.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 70.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 51.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 45.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -87.5891975931
Correct output: 26.7802144548  | Program output: 27.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_dup} {:instruction integer_min} {:instruction float_dup} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_yank} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_sub} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction 90.62601647526289} {:instruction integer_yank} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mult} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_add} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 81} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_dec} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub})
Best program: (float_dec float_dup integer_min float_dup 90.20029399850333 float_rot float_dec in1 float_add float_inc float_dec float_dec float_add float_dup_items float_dec float_dup_items float_yank integer_add float_dec float_dec float_yankdup integer_sub in2 in1 float_dup_items in1 90.62601647526289 integer_yank in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup integer_yankdup integer_flush integer_yankdup float_yankdup integer_add float_yankdup float_inc integer_mult float_yankdup float_inc float_yankdup integer_add integer_min float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_shove float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec integer_inc float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_inc float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_shove 81 float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times float_pop float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_div integer_dec print_float float_tan integer_sub)
Errors: [11.0 2 20.2003 7 0.0 0 4.0 2 1.7997 8 20.0 1 27.0 2 22.2003 9 22.0 2 63.0 10 0.0 0 44.0 2 10.7997 8 20.0 1 18.0 3 0.0 0 52.0 2 55.0 2 2.0 1 1.2003 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 567.0622999999999
Mean: 11.341246
Genome size: 124
Size: 125
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2572.0482942
Median total errors in population: 705.12645
Error averages by case: (90.46035619999998 3.636 99.09526259999862 8.846 76.01641919999996 2.86 87.16890150000009 3.607 91.49792009999923 7.37 105.83639329999997 3.43 105.23358210000009 3.757 99.89751269999849 9.551 98.56000669999996 3.739 134.0305996 10.969 76.69095829999992 2.851 113.77715920000004 3.758 105.98034170000112 9.988 89.0223302 3.321 98.83407739999997 4.546 75.69030999999994 2.578 125.48389260000009 3.726 122.3283766 4.281 89.33977079999995 3.56 86.68541499999954 7.894 96.90904529999999 3.195 95.77788579999918 7.932 83.68625070000029 6.876 95.53296699999935 8.079 94.42255959999991 3.74)
Error minima by case: (0.0 0 5.42 7 0.0 0 0.0 0 0.2003 1 7.0 1 4.0 1 1.0869 1 0.0 0 0.2318 8 0.0 0 5.9229 1 7.7997 7 0.0167 1 0.0 0 0.0 0 0.7726 1 15.8629 1 0.0 0 0.2003 6 1.0307 1 6.5851 1 3.6961 1 11.4878 2 0.0 0)
Average genome size in population (length): 119.061
Average program size in population (points): 120.061
Average percent parens in population: 0.008
Minimum age in population: 255.6407808786634
Maximum age in population: 259.5971399248111
Average age in population: 257.6935114557077
Median age in population: 257.7384372036415
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.91
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.91
Total error diversity:				 0.567
Error (vector) diversity:			 0.653
Behavioral diversity:				 0.654
--- Run Statistics ---
Number of program evaluations used so far: 190000
Number of point (instruction) evaluations so far: 458836177
--- Timings ---
Current time: 1529615981628 milliseconds
Total Time:         930.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       295.3 seconds, 31.7%
Fitness Testing:    505.3 seconds, 54.3%
Report:             129.9 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 189
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 190
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 190
;;******************************
;; -*- Number IO problem report - generation 190
Test total error for best: 35439.56740000003
Test mean error for best: 17.71978
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 35.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 148.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 78.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 70.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 51.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 45.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -87.5891975931
Correct output: 26.7802144548  | Program output: 27.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_dup} {:instruction integer_min} {:instruction float_dup} {:instruction 90.20029399850333} {:instruction float_shove} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_yank} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_sub} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction 90.62601647526289} {:instruction integer_yank} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mult} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_add} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 81} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_dec} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub})
Best program: (float_dec float_dup integer_min float_dup 90.20029399850333 float_shove float_dec in1 float_add float_inc float_dec float_dec float_add float_dup_items float_dec float_dup_items float_yank integer_add float_dec float_dec float_yankdup integer_sub in2 in1 float_dup_items in1 90.62601647526289 integer_yank in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup integer_yankdup integer_flush integer_yankdup float_yankdup integer_add float_yankdup float_inc integer_mult float_yankdup float_inc float_yankdup integer_add integer_min float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_shove float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec integer_inc float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_inc float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_shove 81 float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times float_pop float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_div integer_dec print_float float_tan integer_sub)
Errors: [11.0 2 20.2003 7 0.0 0 4.0 2 1.7997 8 20.0 1 27.0 2 22.2003 9 22.0 2 63.0 10 0.0 0 44.0 2 10.7997 8 20.0 1 18.0 3 0.0 0 52.0 2 55.0 2 2.0 1 1.2003 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 567.0622999999999
Mean: 11.341246
Genome size: 124
Size: 125
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2385.787604000001
Median total errors in population: 715.934
Error averages by case: (82.98975589999996 3.335 91.70269519999866 8.8 68.0000751 2.528 79.15706870000011 3.352 84.37612769999905 7.295 95.6090351 3.126 97.24653670000009 3.49 92.5912797999986 9.441 89.48883989999995 3.426 126.59501839999999 10.935 68.99580229999991 2.636 107.18096710000002 3.495 101.35466620000113 10.066 82.15355490000002 3.037 89.50921529999994 4.291 65.4707763 2.301 117.95142180000012 3.437 117.3815049 3.852 82.30053189999994 3.422 78.44542569999948 7.856 88.41451610000001 2.93 92.03010679999915 7.817 79.00197530000024 6.808 91.63323589999935 7.968 87.07547099999995 3.488)
Error minima by case: (0.0 0 2.42 7 0.0 0 0.0 0 0.2003 1 8.0 1 1.0 1 3.3431 1 0.0 0 1.5684 8 0.0 0 7.9229 1 7.7997 7 0.0881 1 0.0 0 0.0 0 2.7397 1 15.8106 1 0.0 0 0.2003 6 0.2069 1 0.4149 1 0.6603 1 12.4528 2 0.0 0)
Average genome size in population (length): 118.795
Average program size in population (points): 119.795
Average percent parens in population: 0.008
Minimum age in population: 256.8604703657499
Maximum age in population: 260.9336975339967
Average age in population: 258.9141225052271
Median age in population: 258.9371049102846
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.898
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.898
Total error diversity:				 0.582
Error (vector) diversity:			 0.66
Behavioral diversity:				 0.661
--- Run Statistics ---
Number of program evaluations used so far: 191000
Number of point (instruction) evaluations so far: 461806052
--- Timings ---
Current time: 1529615987319 milliseconds
Total Time:         936.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       297.0 seconds, 31.7%
Fitness Testing:    508.6 seconds, 54.3%
Report:             130.6 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 190
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 191
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 191
;;******************************
;; -*- Number IO problem report - generation 191
Test total error for best: 35439.56740000003
Test mean error for best: 17.71978
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 35.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 148.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 78.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 70.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 51.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 45.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -87.5891975931
Correct output: 26.7802144548  | Program output: 27.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_dup} {:instruction integer_min} {:instruction float_dup} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_yank} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_sub} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction 90.62601647526289} {:instruction integer_inc} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mult} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_add} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 81} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_dec} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub})
Best program: (float_dec float_dup integer_min float_dup 90.20029399850333 float_rot float_dec in1 float_add float_inc float_dec float_dec float_add float_dup_items float_dec float_dup_items float_yank integer_add float_dec float_dec float_yankdup integer_sub in2 in1 float_dup_items in1 90.62601647526289 integer_inc in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup integer_yankdup integer_flush integer_yankdup float_yankdup integer_add float_yankdup float_inc integer_mult float_yankdup float_inc float_yankdup integer_add integer_min float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_shove float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec integer_inc float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_inc float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_shove 81 float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times float_pop float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_div integer_dec print_float float_tan integer_sub)
Errors: [11.0 2 20.2003 7 0.0 0 4.0 2 1.7997 8 20.0 1 27.0 2 22.2003 9 22.0 2 63.0 10 0.0 0 44.0 2 10.7997 8 20.0 1 18.0 3 0.0 0 52.0 2 55.0 2 2.0 1 1.2003 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 567.0622999999999
Mean: 11.341246
Genome size: 124
Size: 125
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2452.7883161000013
Median total errors in population: 683.4512500000001
Error averages by case: (87.13019549999994 3.27 95.44868179999872 8.759 70.90976919999999 2.471 83.84208749999999 3.271 85.7208537999991 7.235 99.75643749999998 3.047 99.32698830000004 3.368 97.19543639999861 9.487 95.05321909999992 3.405 133.10982299999995 10.92 66.61972109999998 2.3 109.43733059999994 3.443 102.69948150000103 9.918 85.03815859999996 2.964 93.88513579999996 4.267 65.01743470000002 2.135 123.92972420000002 3.347 119.73163819999998 3.803 79.36800089999996 3.095 80.92807729999936 7.761 94.5173485 2.806 92.67285429999913 7.887 81.02645640000028 6.99 92.13326359999938 8.068 90.93119829999996 3.342)
Error minima by case: (0.0 0 5.42 7 0.0 0 0.0 0 0.2003 1 8.0 1 0.5175 1 6.3431 1 2.0 1 0.7401 8 0.0 0 3.9941 1 7.7997 7 0.0 0 0.0 0 0.0 0 6.7397 1 13.9583 1 0.0 0 0.2003 6 0.2069 1 6.5851 1 0.4878 1 13.1551 2 0.0 0)
Average genome size in population (length): 118.324
Average program size in population (points): 119.324
Average percent parens in population: 0.008
Minimum age in population: 258.1429981755653
Maximum age in population: 262.3657642356908
Average age in population: 260.2278609049911
Median age in population: 260.3041865222913
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.877
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.877
Total error diversity:				 0.563
Error (vector) diversity:			 0.629
Behavioral diversity:				 0.629
--- Run Statistics ---
Number of program evaluations used so far: 192000
Number of point (instruction) evaluations so far: 464764152
--- Timings ---
Current time: 1529615992644 milliseconds
Total Time:         941.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       298.4 seconds, 31.7%
Fitness Testing:    511.8 seconds, 54.3%
Report:             131.3 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 191
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 192
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 192
;;******************************
;; -*- Number IO problem report - generation 192
Test total error for best: 35290.755200000036
Test mean error for best: 17.64538
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 34.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 147.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 77.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 70.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 50.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 45.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -87.5891975931
Correct output: 26.7802144548  | Program output: 26.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_inc} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_add} {:instruction float_dup_items} {:instruction integer_max} {:instruction float_mod} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction float_dup_items} {:instruction 90.20029399850333} {:instruction float_dec} {:instruction in1} {:instruction integer_sub} {:instruction in1} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction integer_flush} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mult} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_add} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 81} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_dec} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub})
Best program: (float_dec float_inc 90.20029399850333 float_rot float_dec in1 float_add integer_pop float_dec float_add float_dup_items integer_max float_mod float_dec integer_add float_dec float_dec float_yankdup float_dec in2 in1 float_dup_items in1 float_dup_items 90.20029399850333 float_dec in1 integer_sub in1 in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup float_dup_times integer_yankdup integer_flush integer_flush integer_yankdup float_yankdup integer_add float_yankdup float_inc integer_mult float_yankdup float_inc float_yankdup integer_add integer_min float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_shove float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec integer_inc float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_inc float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_shove 81 float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times float_pop float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_div integer_dec print_float float_tan integer_sub)
Errors: [11.0 2 19.2003 8 0.0 0 4.0 2 2.7997 8 20.0 1 27.0 2 21.2003 9 22.0 2 63.0 10 0.0 0 44.0 2 11.7997 8 20.0 1 18.0 3 0.0 0 52.0 2 55.0 2 2.0 1 0.2003 6 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 566.0622999999999
Mean: 11.321246
Genome size: 124
Size: 125
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2319.6041669
Median total errors in population: 702.7457999999999
Error averages by case: (80.53938349999996 3.334 89.0124495999987 8.812 66.37184709999998 2.463 76.74114850000004 3.339 81.24254119999915 7.185 92.98509749999998 3.059 90.74578549999998 3.454 90.43402549999863 9.555 87.20806919999998 3.426 125.72472019999994 10.894 62.398048699999954 2.459 105.3246805 3.5 98.80148350000108 9.981 80.38050099999995 2.987 86.733504 4.32 60.18545750000001 2.303 117.04880300000006 3.435 115.73648689999997 3.867 78.80570539999998 3.293 75.66694049999937 7.811 87.38455899999997 2.899 89.58955649999938 7.803 77.68260180000031 6.837 90.01971409999943 7.989 84.40205669999995 3.434)
Error minima by case: (0.0 0 1.1585 7 0.0 0 0.0 0 0.2003 1 9.0 1 1.0 1 3.1585 1 1.0 1 0.2765 8 0.0 0 4.9229 1 8.7997 7 0.0241 1 0.5122 1 0.0 0 2.7397 1 13.7368 1 0.0 0 0.2003 6 0.7931 1 1.6715 1 3.6961 1 13.1551 2 1.0 1)
Average genome size in population (length): 118.306
Average program size in population (points): 119.306
Average percent parens in population: 0.008
Minimum age in population: 259.1429981755653
Maximum age in population: 263.4727586915911
Average age in population: 261.4540367773574
Median age in population: 261.4652859071296
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.903
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.903
Total error diversity:				 0.58
Error (vector) diversity:			 0.624
Behavioral diversity:				 0.624
--- Run Statistics ---
Number of program evaluations used so far: 193000
Number of point (instruction) evaluations so far: 467721802
--- Timings ---
Current time: 1529615998231 milliseconds
Total Time:         947.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       299.9 seconds, 31.7%
Fitness Testing:    514.9 seconds, 54.4%
Report:             132.1 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 192
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 193
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 193
;;******************************
;; -*- Number IO problem report - generation 193
Test total error for best: 35439.56740000003
Test mean error for best: 17.71978
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 35.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 148.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 78.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 70.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 51.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 45.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -87.5891975931
Correct output: 26.7802144548  | Program output: 27.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_dup} {:instruction integer_min} {:instruction float_dup} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_yank} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_sub} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction 90.62601647526289} {:instruction integer_inc} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mult} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_add} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 81} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_dec} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub})
Best program: (float_dec float_dup integer_min float_dup 90.20029399850333 float_rot float_dec in1 float_add float_inc float_dec float_dec float_add float_dup_items float_dec float_dup_items float_yank integer_add float_dec float_dec float_yankdup integer_sub in2 in1 float_dup_items in1 90.62601647526289 integer_inc in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup integer_yankdup integer_flush integer_yankdup float_yankdup integer_add float_yankdup float_inc integer_mult float_yankdup float_inc float_yankdup integer_add integer_min float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_shove float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec integer_inc float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_inc float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_shove 81 float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times float_pop float_dup_items float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_div integer_dec print_float float_tan integer_sub)
Errors: [11.0 2 20.2003 7 0.0 0 4.0 2 1.7997 8 20.0 1 27.0 2 22.2003 9 22.0 2 63.0 10 0.0 0 44.0 2 10.7997 8 20.0 1 18.0 3 0.0 0 52.0 2 55.0 2 2.0 1 1.2003 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 567.0622999999999
Mean: 11.341246
Genome size: 125
Size: 126
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2300.128582100001
Median total errors in population: 686.36495
Error averages by case: (77.46394329999998 3.259 90.12176689999858 8.777 66.53082049999998 2.413 73.39486630000002 3.292 82.89956369999904 7.21 90.05220399999997 2.992 90.18909050000003 3.418 90.74572679999855 9.501 84.57585479999995 3.368 122.35050629999995 10.911 65.11040819999992 2.326 105.58754039999998 3.446 99.23747110000117 9.992 80.93647510000001 2.921 83.82212409999995 4.267 63.37171680000002 2.166 114.25978160000004 3.388 114.15698119999998 3.767 79.99161369999996 3.265 77.18636489999928 7.766 83.25647439999995 2.826 90.12844659999902 7.778 77.33499660000032 6.72 88.97721289999939 7.854 81.44963139999993 3.374)
Error minima by case: (0.0 0 4.1719 7 0.0 0 0.0 0 0.2003 1 10.0 1 3.9885 1 2.1719 1 0.5225 1 0.2939 9 0.0 0 6.1788 1 8.7997 6 0.1482 1 2.0 2 0.0 0 6.7397 1 1.8163 1 0.0 0 0.2003 6 0.5564 1 6.5851 1 5.5838 1 13.1551 2 0.0 0)
Average genome size in population (length): 118.352
Average program size in population (points): 119.352
Average percent parens in population: 0.008
Minimum age in population: 260.2992772058485
Maximum age in population: 264.9444365684281
Average age in population: 262.7725987993506
Median age in population: 262.7901614327013
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.894
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.894
Total error diversity:				 0.557
Error (vector) diversity:			 0.609
Behavioral diversity:				 0.61
--- Run Statistics ---
Number of program evaluations used so far: 194000
Number of point (instruction) evaluations so far: 470680627
--- Timings ---
Current time: 1529616003784 milliseconds
Total Time:         952.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       301.5 seconds, 31.6%
Fitness Testing:    518.0 seconds, 54.4%
Report:             133.0 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 193
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 194
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 194
;;******************************
;; -*- Number IO problem report - generation 194
Test total error for best: 35439.56740000003
Test mean error for best: 17.71978
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 35.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 148.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 78.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 70.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 51.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 45.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -87.5891975931
Correct output: 26.7802144548  | Program output: 27.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_dup} {:instruction integer_min} {:instruction float_dup} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_add} {:instruction float_yank} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_sub} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction 90.62601647526289} {:instruction integer_inc} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mult} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_add} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 81} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_dec} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub})
Best program: (float_dec float_dup integer_min float_dup 90.20029399850333 float_rot float_dec in1 float_add float_inc float_dec float_dec float_add float_dup_items float_dec float_add float_yank integer_add float_dec float_dec float_yankdup integer_sub in2 in1 float_dup_items in1 90.62601647526289 integer_inc in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup integer_yankdup integer_flush integer_yankdup float_yankdup integer_add float_yankdup float_inc integer_mult float_yankdup float_inc float_yankdup integer_add integer_min float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_shove float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec integer_inc float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_inc float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_shove 81 float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times float_pop float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_div integer_dec print_float float_tan integer_sub)
Errors: [11.0 2 20.2003 7 0.0 0 4.0 2 1.7997 8 20.0 1 27.0 2 22.2003 9 22.0 2 63.0 10 0.0 0 44.0 2 10.7997 8 20.0 1 18.0 3 0.0 0 52.0 2 55.0 2 2.0 1 1.2003 7 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 567.0622999999999
Mean: 11.341246
Genome size: 124
Size: 125
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2371.4027499000017
Median total errors in population: 694.2936500000001
Error averages by case: (80.2218564 3.215 93.67480079999864 8.825 66.32367959999998 2.395 76.18894370000005 3.25 87.83591229999922 7.132 92.6512753 2.96 94.80684930000008 3.367 95.86218879999853 9.36 87.60581719999998 3.3 125.37482729999998 10.87 72.00419659999999 2.359 105.55229199999997 3.41 101.76213860000112 10.039 80.70639439999997 2.858 86.47078639999997 4.209 69.88659129999994 2.128 116.33903390000006 3.328 115.50310359999997 3.823 81.95892089999997 3.381 80.74452549999944 7.948 86.80589160000002 2.801 92.73268829999883 7.763 78.87987880000031 6.67 90.70831079999941 7.887 84.17684649999995 3.347)
Error minima by case: (0.0 0 5.42 7 0.0 0 0.0 0 0.2003 1 11.0 1 1.0 1 9.3431 1 1.5122 1 1.644 7 0.0 0 10.9229 1 8.7997 7 0.0167 1 0.0 0 0.0 0 1.7397 1 16.4092 1 0.0 0 0.2003 6 0.7931 1 2.4213 1 6.6961 1 8.5787 2 0.0 0)
Average genome size in population (length): 118.178
Average program size in population (points): 119.178
Average percent parens in population: 0.008
Minimum age in population: 261.8512677601118
Maximum age in population: 266.2141215224203
Average age in population: 264.1357759918137
Median age in population: 264.1491825081904
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.888
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.888
Total error diversity:				 0.578
Error (vector) diversity:			 0.618
Behavioral diversity:				 0.618
--- Run Statistics ---
Number of program evaluations used so far: 195000
Number of point (instruction) evaluations so far: 473635077
--- Timings ---
Current time: 1529616009362 milliseconds
Total Time:         958.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       303.1 seconds, 31.6%
Fitness Testing:    521.2 seconds, 54.4%
Report:             134.0 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 194
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 195
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 195
;;******************************
;; -*- Number IO problem report - generation 195
Test total error for best: 35289.16080000003
Test mean error for best: 17.64458
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 34.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 147.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 77.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 70.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 50.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 45.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -87.5891975931
Correct output: 26.7802144548  | Program output: 26.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_dup} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_rot} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_yank} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_sub} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction 90.62601647526289} {:instruction integer_inc} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mult} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_add} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 81} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_dec} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub})
Best program: (float_dec float_dup 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_rot float_add float_dup_items float_dec float_dup_items float_dec float_dup_items float_yank integer_add float_dec float_dec float_yankdup integer_sub in2 in1 float_dup_items in1 90.62601647526289 integer_inc in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup integer_yankdup integer_flush integer_yankdup float_yankdup integer_add float_yankdup float_inc integer_mult float_yankdup float_inc float_yankdup integer_add integer_min float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_shove float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec integer_inc float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_inc float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_shove 81 float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times float_pop float_dup_items float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_div integer_dec print_float float_tan integer_sub)
Errors: [11.0 2 19.2003 8 0.0 0 4.0 2 2.7997 8 20.0 1 27.0 2 21.2003 9 22.0 2 63.0 10 0.0 0 44.0 2 11.7997 8 20.0 1 18.0 3 0.0 0 52.0 2 55.0 2 2.0 1 0.2003 6 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 566.0622999999999
Mean: 11.321246
Genome size: 125
Size: 126
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2521.264862100001
Median total errors in population: 711.26635
Error averages by case: (87.82016789999997 3.508 97.83139119999856 8.752 75.68046509999995 2.702 84.4311099000001 3.514 91.74794149999926 7.341 103.10117389999996 3.294 99.0547077000001 3.641 97.72356919999845 9.565 95.96816799999993 3.644 131.85070329999994 10.905 69.35923429999991 2.568 113.85627380000001 3.658 104.96113140000122 9.988 89.04312000000002 3.198 96.05971439999992 4.492 66.78849679999996 2.378 123.04790320000006 3.616 125.21057109999997 4.104 86.84850789999994 3.61 84.69522409999932 7.979 94.22125810000006 3.054 98.78263849999861 7.725 83.89649100000028 6.844 96.08073909999935 7.814 91.70316069999988 3.607)
Error minima by case: (0.0 0 4.854 7 0.0 0 0.0 0 0.2003 1 9.0 1 1.7882 1 2.3646 1 1.5122 1 0.0016 7 0.0 0 3.1201 1 5.5911 7 0.0092 1 0.0 0 0.0 0 3.2519 1 4.875 1 0.0 0 0.2003 6 0.1201 1 2.7667 1 5.7707 1 13.1551 2 0.0 0)
Average genome size in population (length): 118.735
Average program size in population (points): 119.735
Average percent parens in population: 0.008
Minimum age in population: 263.2126014321027
Maximum age in population: 267.3379425338063
Average age in population: 265.4056060980024
Median age in population: 265.4686370588048
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.917
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.917
Total error diversity:				 0.599
Error (vector) diversity:			 0.65
Behavioral diversity:				 0.65
--- Run Statistics ---
Number of program evaluations used so far: 196000
Number of point (instruction) evaluations so far: 476603452
--- Timings ---
Current time: 1529616015203 milliseconds
Total Time:         964.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       304.6 seconds, 31.6%
Fitness Testing:    524.5 seconds, 54.4%
Report:             134.7 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 195
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 196
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 196
;;******************************
;; -*- Number IO problem report - generation 196
Test total error for best: 35289.16080000003
Test mean error for best: 17.64458
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 34.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 147.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 77.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 70.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 50.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 45.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -87.5891975931
Correct output: 26.7802144548  | Program output: 26.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_dup} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_rot} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_yank} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_sub} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction 90.62601647526289} {:instruction integer_inc} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mult} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_add} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dup} {:instruction integer_max} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 81} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_dec} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub})
Best program: (float_dec float_dup 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_rot float_add float_dup_items float_dec float_dup_items float_dec float_dup_items float_yank integer_add float_dec float_dec float_yankdup integer_sub in2 in1 float_dup_items in1 90.62601647526289 integer_inc in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup integer_yankdup integer_flush integer_yankdup float_yankdup integer_add float_yankdup float_inc integer_mult float_yankdup float_inc float_yankdup integer_add integer_min float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_shove float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec integer_inc float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_inc float_dup integer_max float_dec float_dup in2 float_dec in2 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_shove 81 float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times float_pop float_dup_items float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_div integer_dec print_float float_tan integer_sub)
Errors: [11.0 2 19.2003 8 0.0 0 4.0 2 2.7997 8 20.0 1 27.0 2 21.2003 9 22.0 2 63.0 10 0.0 0 44.0 2 11.7997 8 20.0 1 18.0 3 0.0 0 52.0 2 55.0 2 2.0 1 0.2003 6 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 566.0622999999999
Mean: 11.321246
Genome size: 125
Size: 126
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2388.4165085000013
Median total errors in population: 715.30045
Error averages by case: (84.10145159999996 3.508 93.06849449999851 8.734 68.37403129999997 2.674 80.74835830000009 3.529 87.36091349999951 7.471 96.84973780000003 3.262 98.1333857000001 3.638 93.13653549999844 9.339 90.14207669999998 3.584 126.03451089999993 10.844 67.26199649999992 2.624 105.44370640000005 3.663 99.36863670000115 9.966 82.42622390000004 3.169 90.33098769999998 4.454 65.33382929999999 2.419 118.2099947000001 3.599 114.71141950000006 4.045 81.47164009999996 3.349 79.12138089999942 8.023 88.42636180000001 3.064 91.41124179999898 7.695 77.54324560000033 6.782 90.4242676999993 7.687 88.23808009999992 3.622)
Error minima by case: (0.0 0 5.42 7 0.0 0 0.0 0 0.098 1 10.0 1 4.0 1 1.1511 1 1.0 1 0.9793 8 0.0 0 0.075 1 4.7632 7 0.1014 1 1.0 1 0.0 0 3.6681 1 2.1381 1 0.0 0 0.098 6 0.4907 1 7.3848 1 5.7707 1 11.7802 2 0.0 0)
Average genome size in population (length): 119.728
Average program size in population (points): 120.728
Average percent parens in population: 0.008
Minimum age in population: 264.2126014321027
Maximum age in population: 268.409234266686
Average age in population: 266.6741756044962
Median age in population: 266.7147872318437
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.906
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.906
Total error diversity:				 0.623
Error (vector) diversity:			 0.671
Behavioral diversity:				 0.672
--- Run Statistics ---
Number of program evaluations used so far: 197000
Number of point (instruction) evaluations so far: 479596677
--- Timings ---
Current time: 1529616020703 milliseconds
Total Time:         969.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       306.2 seconds, 31.6%
Fitness Testing:    527.5 seconds, 54.4%
Report:             135.7 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 196
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 197
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 197
;;******************************
;; -*- Number IO problem report - generation 197
Test total error for best: 35289.16080000003
Test mean error for best: 17.64458
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 34.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 147.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 77.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 70.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 50.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 45.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -87.5891975931
Correct output: 26.7802144548  | Program output: 26.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_dup} {:instruction integer_min} {:instruction float_dup} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_yank} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_sub} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction 90.62601647526289} {:instruction integer_inc} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mult} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_add} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 81} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_dec} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub})
Best program: (float_dec float_dup integer_min float_dup 90.20029399850333 float_rot float_dec in1 float_add integer_dec float_dec float_dec float_add float_dup_items float_dec float_dup_items float_yank integer_add float_dec float_dec float_yankdup integer_sub in2 in1 float_dup_items in1 90.62601647526289 integer_inc in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup integer_yankdup integer_flush integer_yankdup float_yankdup integer_add float_yankdup float_inc integer_mult float_yankdup float_inc float_yankdup integer_add integer_min float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_shove float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec integer_inc float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_inc float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_shove 81 float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times float_pop float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_div integer_dec print_float float_tan integer_sub)
Errors: [11.0 2 19.2003 8 0.0 0 4.0 2 2.7997 8 20.0 1 27.0 2 21.2003 9 22.0 2 63.0 10 0.0 0 44.0 2 11.7997 8 20.0 1 18.0 3 0.0 0 52.0 2 55.0 2 2.0 1 0.2003 6 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 566.0622999999999
Mean: 11.321246
Genome size: 124
Size: 125
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2263.2527667000004
Median total errors in population: 681.40915
Error averages by case: (77.94089719999997 3.318 87.8053928999986 8.618 65.77948659999997 2.487 74.33746930000007 3.305 81.71580319999987 7.625 90.43379229999995 3.078 90.77775559999996 3.454 88.27754099999858 9.374 83.98851219999999 3.387 121.99592139999993 10.918 61.92745219999994 2.491 104.27570829999999 3.532 96.79960460000122 9.902 79.25677489999997 2.998 83.39930249999999 4.282 59.34738419999999 2.35 113.15493570000008 3.399 112.15919059999996 4.146 76.09240709999993 3.434 74.69125499999952 7.952 82.79346589999992 2.868 87.1251194999992 7.593 72.77047810000028 6.759 86.06310349999943 7.758 81.92301289999992 3.393)
Error minima by case: (0.0 0 0.42 7 0.0 0 0.0 0 0.2003 1 10.0 1 0.0 0 3.3431 1 1.0 1 2.9485 8 0.0 0 4.9229 1 7.7997 7 0.0 0 0.0 0 0.0 0 3.9755 1 23.918 1 0.0 0 0.2003 6 0.2069 1 7.5851 1 3.6961 1 6.7811 2 0.0 0)
Average genome size in population (length): 120.768
Average program size in population (points): 121.768
Average percent parens in population: 0.008
Minimum age in population: 265.2126014321027
Maximum age in population: 269.7262535082811
Average age in population: 267.9211315808179
Median age in population: 267.9302479716698
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 31
Genome diversity (% unique Plush genomes):	 0.904
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.904
Total error diversity:				 0.602
Error (vector) diversity:			 0.659
Behavioral diversity:				 0.659
--- Run Statistics ---
Number of program evaluations used so far: 198000
Number of point (instruction) evaluations so far: 482615902
--- Timings ---
Current time: 1529616026240 milliseconds
Total Time:         975.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       307.8 seconds, 31.6%
Fitness Testing:    530.7 seconds, 54.4%
Report:             136.7 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 197
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 198
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 198
;;******************************
;; -*- Number IO problem report - generation 198
Test total error for best: 35289.16080000003
Test mean error for best: 17.64458
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 34.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 147.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 77.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 70.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 50.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 45.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -87.5891975931
Correct output: 26.7802144548  | Program output: 26.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_dup} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_rot} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_yank} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_sub} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction 90.62601647526289} {:instruction integer_inc} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mult} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_add} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dup} {:instruction integer_max} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 81} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_dec} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub})
Best program: (float_dec float_dup 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_rot float_add float_dup_items float_dec float_dup_items float_dec float_dup_items float_yank integer_add float_dec float_dec float_yankdup integer_sub in2 in1 float_dup_items in1 90.62601647526289 integer_inc in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup integer_yankdup integer_flush integer_yankdup float_yankdup integer_add float_yankdup float_inc integer_mult float_yankdup float_inc float_yankdup integer_add integer_min float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_shove float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec integer_inc float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_inc float_dup integer_max float_dec float_dup in2 float_dec in2 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_shove 81 float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times float_pop float_dup_items float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_div integer_dec print_float float_tan integer_sub)
Errors: [11.0 2 19.2003 8 0.0 0 4.0 2 2.7997 8 20.0 1 27.0 2 21.2003 9 22.0 2 63.0 10 0.0 0 44.0 2 11.7997 8 20.0 1 18.0 3 0.0 0 52.0 2 55.0 2 2.0 1 0.2003 6 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 566.0622999999999
Mean: 11.321246
Genome size: 125
Size: 126
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2172.476260500001
Median total errors in population: 706.77315
Error averages by case: (73.68174259999999 3.306 83.10127899999883 8.59 59.50390079999999 2.526 70.14190100000005 3.336 78.1002648000002 7.794 89.09452459999999 3.134 88.85619310000003 3.449 83.49372879999882 9.364 82.49390869999999 3.473 118.50834099999999 10.907 61.07244119999995 2.418 98.13874500000001 3.528 92.134694400001 10.035 73.33176680000001 3.009 82.68024309999998 4.373 57.5334456 2.124 110.07172340000005 3.432 107.91410139999998 4.0 75.05494509999996 3.381 69.61891509999948 8.031 79.64629840000002 2.878 81.63298209999935 7.456 69.95178680000028 6.571 80.70957549999954 7.697 77.75181219999996 3.445)
Error minima by case: (0.0 0 1.58 7 0.0 0 0.0 0 0.2003 1 5.1296 1 2.0 1 0.4599 1 3.0 1 3.575 8 0.0 0 1.9872 1 6.7997 7 0.9119 1 0.0 0 0.0 0 5.2519 1 9.9822 1 0.0 0 0.2003 6 0.2069 1 2.5851 1 3.6961 1 9.6211 2 0.0 0)
Average genome size in population (length): 121.706
Average program size in population (points): 122.706
Average percent parens in population: 0.008
Minimum age in population: 266.9934333249136
Maximum age in population: 271.4554706195178
Average age in population: 269.1852049189178
Median age in population: 269.2307553231961
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.897
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.897
Total error diversity:				 0.599
Error (vector) diversity:			 0.661
Behavioral diversity:				 0.661
--- Run Statistics ---
Number of program evaluations used so far: 199000
Number of point (instruction) evaluations so far: 485658552
--- Timings ---
Current time: 1529616031650 milliseconds
Total Time:         980.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       309.4 seconds, 31.5%
Fitness Testing:    533.8 seconds, 54.4%
Report:             137.4 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 198
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 199
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 199
;;******************************
;; -*- Number IO problem report - generation 199
Test total error for best: 35289.16080000003
Test mean error for best: 17.64458
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 34.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 147.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 77.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 70.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 50.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 45.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -87.5891975931
Correct output: 26.7802144548  | Program output: 26.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_dup} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_add} {:instruction float_yank} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_sub} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction 90.62601647526289} {:instruction integer_inc} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mult} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_add} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 81} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_dec} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub})
Best program: (integer_div float_dup 90.20029399850333 float_rot float_dec in1 float_add float_dup_items float_dec float_inc float_dec float_dec float_add float_dup_items float_dec float_add float_yank integer_add float_dec float_dec float_yankdup integer_sub in2 in1 float_dup_items in1 90.62601647526289 integer_inc in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup integer_yankdup integer_flush integer_yankdup float_yankdup integer_add float_yankdup float_inc integer_mult float_yankdup float_inc float_yankdup integer_add integer_min float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_shove float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec integer_inc float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_inc float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_shove 81 float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times float_pop float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_div integer_dec print_float float_tan integer_sub)
Errors: [11.0 2 19.2003 8 0.0 0 4.0 2 2.7997 8 20.0 1 27.0 2 21.2003 9 22.0 2 63.0 10 0.0 0 44.0 2 11.7997 8 20.0 1 18.0 3 0.0 0 52.0 2 55.0 2 2.0 1 0.2003 6 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 566.0622999999999
Mean: 11.321246
Genome size: 124
Size: 125
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2477.4668274
Median total errors in population: 709.2095999999999
Error averages by case: (87.35372659999992 3.464 92.04188269999868 8.648 72.65959869999999 2.685 84.71516780000007 3.464 87.4055061000005 8.052 101.12704669999995 3.251 101.67081800000007 3.578 92.24779159999862 9.352 94.4689847999999 3.566 131.652338 10.989 73.40432609999996 2.583 111.04679460000004 3.658 102.25986160000113 10.032 86.14471619999999 3.18 94.31368189999993 4.462 70.60727069999993 2.298 123.05166420000005 3.575 120.88698779999999 4.222 85.85089199999999 3.404 80.75581059999965 8.184 92.97473689999993 3.039 93.34117259999921 7.705 82.58622280000034 6.768 92.10531179999938 7.775 91.29151659999992 3.569)
Error minima by case: (0.0 0 4.42 7 0.0 0 0.0 0 0.2003 1 8.0 1 1.0 1 2.3431 1 0.0 0 0.9002 8 0.0 0 4.7355 1 7.7997 7 0.0259 1 0.0 0 0.0 0 8.2519 1 3.2596 1 0.0 0 0.1227 6 0.2069 1 7.5851 2 5.5499 1 12.4528 2 0.0 0)
Average genome size in population (length): 122.656
Average program size in population (points): 123.656
Average percent parens in population: 0.008
Minimum age in population: 268.1000453478826
Maximum age in population: 272.8024461198889
Average age in population: 270.5129778986037
Median age in population: 270.5530284537333
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.92
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.92
Total error diversity:				 0.62
Error (vector) diversity:			 0.687
Behavioral diversity:				 0.687
--- Run Statistics ---
Number of program evaluations used so far: 200000
Number of point (instruction) evaluations so far: 488724952
--- Timings ---
Current time: 1529616037331 milliseconds
Total Time:         986.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       311.0 seconds, 31.5%
Fitness Testing:    537.0 seconds, 54.4%
Report:             138.1 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 199
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 200
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 200
;;******************************
;; -*- Number IO problem report - generation 200
Test total error for best: 35289.16080000003
Test mean error for best: 17.64458
;;------------------------------
Outputs of best individual on training cases:
Correct output: 54.2889250004  | Program output: 43.2889250004 
Correct output: 15.0922415815  | Program output: 34.29253558   
Correct output: -30.8202558445 | Program output: -30.8202558445
Correct output: 70.2512965501  | Program output: 66.2512965501 
Correct output: 150.6666771001 | Program output: 147.8669710986
Correct output: -148.0189802809 | Program output: -128.0189802809
Correct output: 91.9885288633  | Program output: 64.9885288633 
Correct output: 56.3430751406  | Program output: 77.5433691391 
Correct output: -55.2026859793 | Program output: -77.2026859793
Correct output: -31.9001885201 | Program output: 31.0998114799 
Correct output: 70.8415782878  | Program output: 70.8415782878 
Correct output: -70.0770879346 | Program output: -26.0770879346
Correct output: 62.2573571201  | Program output: 50.4576511186 
Correct output: -11.0880796195 | Program output: -31.0880796195
Correct output: -98.0730811682 | Program output: -116.0730811682
Correct output: 45.954554541   | Program output: 45.954554541  
Correct output: 9.2519145493   | Program output: 61.2519145493 
Correct output: -62.0820375564 | Program output: -7.0820375564 
Correct output: -85.5891975931 | Program output: -87.5891975931
Correct output: 26.7802144548  | Program output: 26.9805084533 
Correct output: 1.2069497285   | Program output: 21.2069497285 
Correct output: 70.6151869811  | Program output: 90.3282919858 
Correct output: 27.2083659619  | Program output: 20.5122357219 
Correct output: 103.781099078  | Program output: 90.3282919858 
Correct output: 66.4193519736  | Program output: 51.4193519736 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_dup} {:instruction integer_min} {:instruction float_dup} {:instruction 90.20029399850333} {:instruction float_rot} {:instruction float_dec} {:instruction in1} {:instruction float_add} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_yank} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_sub} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction in1} {:instruction 90.62601647526289} {:instruction integer_inc} {:instruction in1} {:instruction in1} {:instruction float_yank} {:instruction in2} {:instruction 90.32829198580089} {:instruction float_rot} {:instruction float_dec} {:instruction 20.512235721913395} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mult} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_add} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 81} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_dec} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub})
Best program: (float_dec float_dup integer_min float_dup 90.20029399850333 float_rot float_dec in1 float_add integer_dec float_dec float_dec float_add float_dup_items float_dec float_dup_items float_yank integer_add float_dec float_dec float_yankdup integer_sub in2 in1 float_dup_items in1 90.62601647526289 integer_inc in1 in1 float_yank in2 90.32829198580089 float_rot float_dec 20.512235721913395 in1 float_dup_items integer_yankdup integer_yankdup integer_flush integer_yankdup float_yankdup integer_add float_yankdup float_inc integer_mult float_yankdup float_inc float_yankdup integer_add integer_min float_yankdup float_inc in2 in1 float_dup_items float_dec float_yankdup float_dec float_dec float_shove float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items in2 float_dec integer_inc float_dec float_yankdup integer_shove float_frominteger float_dup float_dec float_dup in2 float_dec float_dec float_shove integer_inc float_dup in2 float_dec float_dup in2 float_dec in2 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_shove 81 float_dup in2 float_dec float_dec float_dec float_yankdup float_dup_times float_pop float_dup_items float_dec float_dup in2 integer_yankdup float_dec float_dec float_yankdup integer_div integer_dec print_float float_tan integer_sub)
Errors: [11.0 2 19.2003 8 0.0 0 4.0 2 2.7997 8 20.0 1 27.0 2 21.2003 9 22.0 2 63.0 10 0.0 0 44.0 2 11.7997 8 20.0 1 18.0 3 0.0 0 52.0 2 55.0 2 2.0 1 0.2003 6 20.0 1 19.7131 9 6.6961 8 13.4528 9 15.0 2]
Total: 566.0622999999999
Mean: 11.321246
Genome size: 124
Size: 125
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2108.7911818000002
Median total errors in population: 709.6008999999999
Error averages by case: (74.40502159999997 3.398 78.78985629999868 8.588 57.33570319999998 2.573 72.91589510000006 3.382 72.97038470000066 7.99 87.1257361 3.143 86.49350650000008 3.5 79.04958639999863 9.359 80.49997619999996 3.478 118.99277939999993 10.885 57.48278059999991 2.519 95.16445620000006 3.548 86.40056100000113 9.896 70.92939329999996 3.068 80.67014119999995 4.333 52.113034200000016 2.209 110.61595750000009 3.489 104.52805640000003 4.05 69.68883939999998 3.211 64.49500569999971 7.999 80.15932409999999 2.929 77.80322679999952 7.602 65.64051160000018 6.679 77.10946859999945 7.813 78.28297969999993 3.488)
Error minima by case: (0.0 0 2.6249 7 0.0 0 0.0 0 0.2003 1 7.0 1 2.4878 1 4.3431 1 1.0 1 0.0868 7 0.0 0 1.9094 1 6.7997 7 0.0598 1 0.0 0 0.0 0 2.6681 1 6.0856 1 0.0 0 0.2003 6 0.2069 1 2.5851 1 0.5088 1 13.1551 2 1.0 1)
Average genome size in population (length): 123.91
Average program size in population (points): 124.91
Average percent parens in population: 0.008
Minimum age in population: 269.8247404823034
Maximum age in population: 273.8968779734418
Average age in population: 271.8335871123965
Median age in population: 271.8844486321726
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.924
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.924
Total error diversity:				 0.648
Error (vector) diversity:			 0.721
Behavioral diversity:				 0.721
--- Run Statistics ---
Number of program evaluations used so far: 201000
Number of point (instruction) evaluations so far: 491822752
--- Timings ---
Current time: 1529616042720 milliseconds
Total Time:         991.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       312.5 seconds, 31.5%
Fitness Testing:    540.3 seconds, 54.5%
Report:             138.9 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 200
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

FAILURE
