Command line args: clojush.problems.software.number-io :parent-selection :tournament :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
epigenetic-markers = []
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :tournament
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
report-simplifications = 0
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [[-41.354222531172404 91] 49.645777468827596]
Train Case:   1 | Input/Output: [[-66.84384112026936 91] 24.15615887973064]
Train Case:   2 | Input/Output: [[64.26187416514756 -1] 63.26187416514756]
Train Case:   3 | Input/Output: [[-3.5386655195967336 85] 81.46133448040327]
Train Case:   4 | Input/Output: [[-70.42097846675128 -46] -116.42097846675128]
Train Case:   5 | Input/Output: [[2.449391606380729 -83] -80.55060839361927]
Train Case:   6 | Input/Output: [[36.79159865323723 5] 41.79159865323723]
Train Case:   7 | Input/Output: [[-18.943975213655335 12] -6.943975213655335]
Train Case:   8 | Input/Output: [[59.56040700056761 -1] 58.56040700056761]
Train Case:   9 | Input/Output: [[-13.471709312819002 -92] -105.471709312819]
Train Case:  10 | Input/Output: [[-93.37376500228352 28] -65.37376500228352]
Train Case:  11 | Input/Output: [[-6.577028266977209 87] 80.42297173302279]
Train Case:  12 | Input/Output: [[-51.433140566404155 15] -36.433140566404155]
Train Case:  13 | Input/Output: [[-31.714482343731376 81] 49.285517656268624]
Train Case:  14 | Input/Output: [[66.25300487427992 -61] 5.253004874279924]
Train Case:  15 | Input/Output: [[19.46927374619119 -34] -14.530726253808808]
Train Case:  16 | Input/Output: [[85.84259992285195 89] 174.84259992285195]
Train Case:  17 | Input/Output: [[-5.714197231749722 100] 94.28580276825028]
Train Case:  18 | Input/Output: [[-96.1580651661942 64] -32.158065166194206]
Train Case:  19 | Input/Output: [[-32.74366754458573 67] 34.25633245541427]
Train Case:  20 | Input/Output: [[29.689161409400327 -64] -34.31083859059967]
Train Case:  21 | Input/Output: [[-76.54207965619511 51] -25.542079656195114]
Train Case:  22 | Input/Output: [[-49.43902520769503 90] 40.56097479230497]
Train Case:  23 | Input/Output: [[-78.39052537525237 -68] -146.39052537525237]
Train Case:  24 | Input/Output: [[56.27459390783585 69] 125.27459390783585]
Test Case:   0 | Input/Output: [[62.907589962440824 -52] 10.907589962440824]
Test Case:   1 | Input/Output: [[50.50838070900022 -64] -13.491619290999779]
Test Case:   2 | Input/Output: [[-3.605347753278366 75] 71.39465224672163]
Test Case:   3 | Input/Output: [[64.22763504737361 75] 139.2276350473736]
Test Case:   4 | Input/Output: [[-0.2070877982920365 84] 83.79291220170796]
Test Case:   5 | Input/Output: [[-41.91616095146047 1] -40.91616095146047]
Test Case:   6 | Input/Output: [[-62.030309365058066 -83] -145.03030936505806]
Test Case:   7 | Input/Output: [[-94.39009429738934 -75] -169.39009429738934]
Test Case:   8 | Input/Output: [[-12.70224305489127 40] 27.29775694510873]
Test Case:   9 | Input/Output: [[-33.55945078560252 69] 35.44054921439748]
Test Case:  10 | Input/Output: [[56.26424050557205 20] 76.26424050557205]
Test Case:  11 | Input/Output: [[34.814060959537585 1] 35.814060959537585]
Test Case:  12 | Input/Output: [[11.211809796898933 0] 11.211809796898933]
Test Case:  13 | Input/Output: [[89.1016974734984 -4] 85.1016974734984]
Test Case:  14 | Input/Output: [[-71.69926793827614 62] -9.699267938276137]
Test Case:  15 | Input/Output: [[-25.558665765317528 32] 6.441334234682472]
Test Case:  16 | Input/Output: [[49.86644962560672 -69] -19.13355037439328]
Test Case:  17 | Input/Output: [[50.04927795508155 -63] -12.95072204491845]
Test Case:  18 | Input/Output: [[28.542673396613623 -42] -13.457326603386377]
Test Case:  19 | Input/Output: [[-25.694109672940684 53] 27.305890327059316]
Test Case:  20 | Input/Output: [[-42.037034437174235 70] 27.962965562825765]
Test Case:  21 | Input/Output: [[10.307059058352763 -76] -65.69294094164724]
Test Case:  22 | Input/Output: [[15.851070242229454 -67] -51.148929757770546]
Test Case:  23 | Input/Output: [[-84.3930699820889 88] 3.606930017911097]
Test Case:  24 | Input/Output: [[-62.75292357365863 47] -15.752923573658627]
Test Case:  25 | Input/Output: [[-71.73323032518621 32] -39.73323032518621]
Test Case:  26 | Input/Output: [[-68.02300550309495 -36] -104.02300550309495]
Test Case:  27 | Input/Output: [[-55.80757723697452 47] -8.807577236974517]
Test Case:  28 | Input/Output: [[-52.91241277222236 -23] -75.91241277222235]
Test Case:  29 | Input/Output: [[-70.50990810616746 50] -20.509908106167458]
Test Case:  30 | Input/Output: [[-64.29963529708833 -11] -75.29963529708833]
Test Case:  31 | Input/Output: [[65.73437618722363 -16] 49.73437618722363]
Test Case:  32 | Input/Output: [[53.05157431435023 41] 94.05157431435023]
Test Case:  33 | Input/Output: [[-80.14207347059636 18] -62.14207347059636]
Test Case:  34 | Input/Output: [[18.469733170786952 84] 102.46973317078695]
Test Case:  35 | Input/Output: [[-0.02892897504041514 -30] -30.028928975040415]
Test Case:  36 | Input/Output: [[-35.18855012727454 -69] -104.18855012727454]
Test Case:  37 | Input/Output: [[-98.67821582132079 52] -46.67821582132079]
Test Case:  38 | Input/Output: [[-70.33284740186525 -72] -142.33284740186525]
Test Case:  39 | Input/Output: [[92.72331279726063 -65] 27.723312797260633]
Test Case:  40 | Input/Output: [[12.80180567427638 -19] -6.19819432572362]
Test Case:  41 | Input/Output: [[86.46964100886927 89] 175.46964100886927]
Test Case:  42 | Input/Output: [[36.77866645922148 -76] -39.22133354077852]
Test Case:  43 | Input/Output: [[-31.452131440637274 72] 40.547868559362726]
Test Case:  44 | Input/Output: [[-97.179746375668 -31] -128.179746375668]
Test Case:  45 | Input/Output: [[75.76713468764572 -24] 51.76713468764572]
Test Case:  46 | Input/Output: [[92.90831223440304 -20] 72.90831223440304]
Test Case:  47 | Input/Output: [[-13.177551512331647 83] 69.82244848766835]
Test Case:  48 | Input/Output: [[51.28750306375642 47] 98.28750306375642]
Test Case:  49 | Input/Output: [[-97.00408688927256 -60] -157.00408688927257]
Test Case:  50 | Input/Output: [[-0.3591347256136146 85] 84.64086527438639]
Test Case:  51 | Input/Output: [[51.72308945567133 86] 137.72308945567133]
Test Case:  52 | Input/Output: [[15.304945524150355 -8] 7.304945524150355]
Test Case:  53 | Input/Output: [[-9.04809490762031 -90] -99.04809490762031]
Test Case:  54 | Input/Output: [[-10.517480558744552 54] 43.48251944125545]
Test Case:  55 | Input/Output: [[-18.55019176118509 41] 22.44980823881491]
Test Case:  56 | Input/Output: [[1.6109107954002724 73] 74.61091079540027]
Test Case:  57 | Input/Output: [[-77.02789247710777 11] -66.02789247710777]
Test Case:  58 | Input/Output: [[56.421938539521676 47] 103.42193853952168]
Test Case:  59 | Input/Output: [[-64.08789019585603 85] 20.912109804143967]
Test Case:  60 | Input/Output: [[-75.91635857455852 -15] -90.91635857455852]
Test Case:  61 | Input/Output: [[-0.8918612957216538 -60] -60.891861295721654]
Test Case:  62 | Input/Output: [[-84.30126236617832 -35] -119.30126236617832]
Test Case:  63 | Input/Output: [[-87.94323553457394 -90] -177.94323553457394]
Test Case:  64 | Input/Output: [[70.81888050166202 78] 148.81888050166202]
Test Case:  65 | Input/Output: [[4.772352540237222 -58] -53.22764745976278]
Test Case:  66 | Input/Output: [[51.889756562870616 -89] -37.110243437129384]
Test Case:  67 | Input/Output: [[-14.363173629847893 25] 10.636826370152107]
Test Case:  68 | Input/Output: [[50.10310438975807 15] 65.10310438975807]
Test Case:  69 | Input/Output: [[17.144009343599635 -50] -32.855990656400365]
Test Case:  70 | Input/Output: [[-16.40268234253672 -2] -18.40268234253672]
Test Case:  71 | Input/Output: [[-2.0071568644322184 35] 32.99284313556778]
Test Case:  72 | Input/Output: [[-81.4196737573888 54] -27.419673757388793]
Test Case:  73 | Input/Output: [[2.2964642721440782 -32] -29.703535727855922]
Test Case:  74 | Input/Output: [[-78.19969407292275 13] -65.19969407292275]
Test Case:  75 | Input/Output: [[11.106437731550727 91] 102.10643773155073]
Test Case:  76 | Input/Output: [[-22.381148226724235 40] 17.618851773275765]
Test Case:  77 | Input/Output: [[6.132573965484724 -14] -7.867426034515276]
Test Case:  78 | Input/Output: [[32.16122404151116 34] 66.16122404151116]
Test Case:  79 | Input/Output: [[20.23395911022618 -65] -44.76604088977382]
Test Case:  80 | Input/Output: [[20.449463353238187 -81] -60.55053664676181]
Test Case:  81 | Input/Output: [[-8.180905159645263 -89] -97.18090515964526]
Test Case:  82 | Input/Output: [[-12.559730668907747 85] 72.44026933109225]
Test Case:  83 | Input/Output: [[29.012809823276683 -67] -37.98719017672332]
Test Case:  84 | Input/Output: [[58.63184484004293 93] 151.63184484004293]
Test Case:  85 | Input/Output: [[70.57269608089695 -85] -14.427303919103053]
Test Case:  86 | Input/Output: [[-81.41736357435045 56] -25.417363574350446]
Test Case:  87 | Input/Output: [[45.134687557258445 2] 47.134687557258445]
Test Case:  88 | Input/Output: [[1.1021184910663777 90] 91.10211849106638]
Test Case:  89 | Input/Output: [[81.50494866417395 14] 95.50494866417395]
Test Case:  90 | Input/Output: [[89.48903221066743 -44] 45.48903221066743]
Test Case:  91 | Input/Output: [[-38.14611293711789 -47] -85.14611293711789]
Test Case:  92 | Input/Output: [[-64.42117109496715 -89] -153.42117109496715]
Test Case:  93 | Input/Output: [[53.53217889376026 -54] -0.4678211062397395]
Test Case:  94 | Input/Output: [[-38.5287681739207 -16] -54.5287681739207]
Test Case:  95 | Input/Output: [[48.1617811875885 -30] 18.161781187588502]
Test Case:  96 | Input/Output: [[10.409774538074899 -52] -41.5902254619251]
Test Case:  97 | Input/Output: [[-12.415075817836538 -20] -32.41507581783654]
Test Case:  98 | Input/Output: [[-67.98410653911554 -17] -84.98410653911554]
Test Case:  99 | Input/Output: [[55.406456261352815 -30] 25.406456261352815]
Test Case: 100 | Input/Output: [[45.245122279367735 -42] 3.2451222793677346]
Test Case: 101 | Input/Output: [[-64.86744962821591 41] -23.86744962821591]
Test Case: 102 | Input/Output: [[24.587618358963994 -87] -62.412381641036006]
Test Case: 103 | Input/Output: [[69.89599058078443 3] 72.89599058078443]
Test Case: 104 | Input/Output: [[-17.354260009073215 -19] -36.354260009073215]
Test Case: 105 | Input/Output: [[-95.99766394413804 51] -44.99766394413804]
Test Case: 106 | Input/Output: [[-18.066959379324544 -31] -49.066959379324544]
Test Case: 107 | Input/Output: [[62.00318190516518 43] 105.00318190516518]
Test Case: 108 | Input/Output: [[44.001797300075566 -58] -13.998202699924434]
Test Case: 109 | Input/Output: [[37.90024187620958 6] 43.90024187620958]
Test Case: 110 | Input/Output: [[46.79416621258986 13] 59.79416621258986]
Test Case: 111 | Input/Output: [[85.2037337402329 -90] -4.796266259767094]
Test Case: 112 | Input/Output: [[42.44562241669925 -18] 24.44562241669925]
Test Case: 113 | Input/Output: [[85.20740728643548 62] 147.20740728643548]
Test Case: 114 | Input/Output: [[6.848099764153986 25] 31.848099764153986]
Test Case: 115 | Input/Output: [[22.431571199448314 -47] -24.568428800551686]
Test Case: 116 | Input/Output: [[-94.87480793739012 24] -70.87480793739012]
Test Case: 117 | Input/Output: [[-84.83282102578163 3] -81.83282102578163]
Test Case: 118 | Input/Output: [[-89.0562321288199 -64] -153.0562321288199]
Test Case: 119 | Input/Output: [[92.03569293317139 45] 137.0356929331714]
Test Case: 120 | Input/Output: [[16.648914264524578 11] 27.648914264524578]
Test Case: 121 | Input/Output: [[7.213271218265518 -33] -25.78672878173448]
Test Case: 122 | Input/Output: [[63.94708835001802 45] 108.94708835001802]
Test Case: 123 | Input/Output: [[-34.66767678130256 -20] -54.66767678130256]
Test Case: 124 | Input/Output: [[34.24439127447704 -81] -46.75560872552296]
Test Case: 125 | Input/Output: [[75.67494193188227 23] 98.67494193188227]
Test Case: 126 | Input/Output: [[-50.89773443351042 -36] -86.89773443351042]
Test Case: 127 | Input/Output: [[-89.62098930081379 -27] -116.62098930081379]
Test Case: 128 | Input/Output: [[-24.948038770115716 55] 30.051961229884284]
Test Case: 129 | Input/Output: [[-5.707326483576921 -94] -99.70732648357692]
Test Case: 130 | Input/Output: [[76.63001461038667 -34] 42.63001461038667]
Test Case: 131 | Input/Output: [[45.567402490780296 -98] -52.432597509219704]
Test Case: 132 | Input/Output: [[6.101677190736382 74] 80.10167719073638]
Test Case: 133 | Input/Output: [[94.66915193799917 -16] 78.66915193799917]
Test Case: 134 | Input/Output: [[69.54501460882543 -55] 14.545014608825426]
Test Case: 135 | Input/Output: [[-65.41852590134368 69] 3.581474098656315]
Test Case: 136 | Input/Output: [[-64.14413698383879 50] -14.144136983838791]
Test Case: 137 | Input/Output: [[30.971431737437825 79] 109.97143173743783]
Test Case: 138 | Input/Output: [[-69.91861911263635 -62] -131.91861911263635]
Test Case: 139 | Input/Output: [[-16.882662461460598 1] -15.882662461460598]
Test Case: 140 | Input/Output: [[72.07791907853948 36] 108.07791907853948]
Test Case: 141 | Input/Output: [[44.437866141854386 48] 92.43786614185439]
Test Case: 142 | Input/Output: [[80.87727092911865 63] 143.87727092911865]
Test Case: 143 | Input/Output: [[-57.26698855948504 48] -9.266988559485043]
Test Case: 144 | Input/Output: [[-90.41363313683037 -49] -139.41363313683036]
Test Case: 145 | Input/Output: [[44.39375710974116 61] 105.39375710974116]
Test Case: 146 | Input/Output: [[41.070753830775914 13] 54.070753830775914]
Test Case: 147 | Input/Output: [[-42.47656219680547 -78] -120.47656219680547]
Test Case: 148 | Input/Output: [[87.16988772998073 -57] 30.16988772998073]
Test Case: 149 | Input/Output: [[96.23073909288323 -38] 58.230739092883226]
Test Case: 150 | Input/Output: [[-24.612496126940314 52] 27.387503873059686]
Test Case: 151 | Input/Output: [[-68.84224178617086 -78] -146.84224178617086]
Test Case: 152 | Input/Output: [[-33.2118129064183 49] 15.788187093581698]
Test Case: 153 | Input/Output: [[-9.51324386501733 -92] -101.51324386501733]
Test Case: 154 | Input/Output: [[6.950292925188492 -54] -47.04970707481151]
Test Case: 155 | Input/Output: [[56.09434116356135 0] 56.09434116356135]
Test Case: 156 | Input/Output: [[-34.14971136095639 -96] -130.1497113609564]
Test Case: 157 | Input/Output: [[-52.325141982676485 -26] -78.32514198267648]
Test Case: 158 | Input/Output: [[-38.11422122469226 -51] -89.11422122469226]
Test Case: 159 | Input/Output: [[94.45785008847105 -46] 48.45785008847105]
Test Case: 160 | Input/Output: [[-34.85563626978265 73] 38.14436373021735]
Test Case: 161 | Input/Output: [[-11.725296410214824 4] -7.725296410214824]
Test Case: 162 | Input/Output: [[-58.36886409554785 94] 35.63113590445215]
Test Case: 163 | Input/Output: [[-94.23501516465949 -56] -150.2350151646595]
Test Case: 164 | Input/Output: [[15.13639018519622 -62] -46.86360981480378]
Test Case: 165 | Input/Output: [[-63.38427777842091 6] -57.38427777842091]
Test Case: 166 | Input/Output: [[8.115225449118839 95] 103.11522544911884]
Test Case: 167 | Input/Output: [[75.42476389438596 76] 151.42476389438596]
Test Case: 168 | Input/Output: [[-79.72214490047133 19] -60.722144900471335]
Test Case: 169 | Input/Output: [[-10.546087308360313 22] 11.453912691639687]
Test Case: 170 | Input/Output: [[-4.502089213886123 73] 68.49791078611388]
Test Case: 171 | Input/Output: [[22.212154956974302 -89] -66.7878450430257]
Test Case: 172 | Input/Output: [[-99.50403811641924 38] -61.50403811641924]
Test Case: 173 | Input/Output: [[5.493437509223597 -49] -43.5065624907764]
Test Case: 174 | Input/Output: [[83.99516832593665 -22] 61.995168325936646]
Test Case: 175 | Input/Output: [[99.21084408474024 69] 168.21084408474024]
Test Case: 176 | Input/Output: [[33.24641800763658 77] 110.24641800763658]
Test Case: 177 | Input/Output: [[-47.916554218484464 -52] -99.91655421848446]
Test Case: 178 | Input/Output: [[-79.73636069579923 41] -38.736360695799235]
Test Case: 179 | Input/Output: [[-9.27473252101909 19] 9.72526747898091]
Test Case: 180 | Input/Output: [[1.116886400177151 42] 43.11688640017715]
Test Case: 181 | Input/Output: [[-43.32779442479671 83] 39.67220557520329]
Test Case: 182 | Input/Output: [[76.29481801534203 -62] 14.294818015342031]
Test Case: 183 | Input/Output: [[-20.91866860231933 -64] -84.91866860231933]
Test Case: 184 | Input/Output: [[-78.12594513724676 -71] -149.12594513724676]
Test Case: 185 | Input/Output: [[-20.117984877941836 55] 34.882015122058164]
Test Case: 186 | Input/Output: [[0.15358958799041034 -31] -30.84641041200959]
Test Case: 187 | Input/Output: [[-92.6777396592886 -47] -139.6777396592886]
Test Case: 188 | Input/Output: [[-98.08443491383771 75] -23.08443491383771]
Test Case: 189 | Input/Output: [[-0.37176390103196866 5] 4.628236098968031]
Test Case: 190 | Input/Output: [[-32.63535923686365 25] -7.63535923686365]
Test Case: 191 | Input/Output: [[1.9889798988606202 -24] -22.01102010113938]
Test Case: 192 | Input/Output: [[14.591353855571512 -42] -27.408646144428488]
Test Case: 193 | Input/Output: [[57.567938228388044 41] 98.56793822838804]
Test Case: 194 | Input/Output: [[-77.3182062438218 -54] -131.3182062438218]
Test Case: 195 | Input/Output: [[92.62808674931321 -28] 64.62808674931321]
Test Case: 196 | Input/Output: [[-72.38154577204297 -94] -166.38154577204295]
Test Case: 197 | Input/Output: [[33.4115517732229 -36] -2.5884482267771034]
Test Case: 198 | Input/Output: [[-1.108135849775536 -64] -65.10813584977554]
Test Case: 199 | Input/Output: [[73.73163730930483 -45] 28.73163730930483]
Test Case: 200 | Input/Output: [[-22.987134515492542 -93] -115.98713451549254]
Test Case: 201 | Input/Output: [[-79.48368329187893 -65] -144.48368329187895]
Test Case: 202 | Input/Output: [[-39.85257791471199 -83] -122.85257791471199]
Test Case: 203 | Input/Output: [[-28.76727395205161 56] 27.23272604794839]
Test Case: 204 | Input/Output: [[8.44062504313527 10] 18.44062504313527]
Test Case: 205 | Input/Output: [[0.6587196650727662 32] 32.658719665072766]
Test Case: 206 | Input/Output: [[-53.18322806359728 77] 23.816771936402723]
Test Case: 207 | Input/Output: [[-26.743641808783522 40] 13.256358191216478]
Test Case: 208 | Input/Output: [[73.58948600880939 -91] -17.410513991190612]
Test Case: 209 | Input/Output: [[-86.32741975118756 -21] -107.32741975118756]
Test Case: 210 | Input/Output: [[-37.58668155431002 79] 41.41331844568998]
Test Case: 211 | Input/Output: [[-88.16953370878016 16] -72.16953370878016]
Test Case: 212 | Input/Output: [[-33.73305138037506 -21] -54.73305138037506]
Test Case: 213 | Input/Output: [[-9.692414314591403 83] 73.3075856854086]
Test Case: 214 | Input/Output: [[25.0168415843017 -46] -20.9831584156983]
Test Case: 215 | Input/Output: [[-32.125694922718594 38] 5.874305077281406]
Test Case: 216 | Input/Output: [[32.32171940354198 -89] -56.67828059645802]
Test Case: 217 | Input/Output: [[51.8314703934216 -41] 10.831470393421597]
Test Case: 218 | Input/Output: [[-90.80944320651074 -7] -97.80944320651074]
Test Case: 219 | Input/Output: [[67.51540369932806 12] 79.51540369932806]
Test Case: 220 | Input/Output: [[34.932540360280996 -52] -17.067459639719004]
Test Case: 221 | Input/Output: [[62.98303522745118 4] 66.98303522745118]
Test Case: 222 | Input/Output: [[56.70643554353646 40] 96.70643554353646]
Test Case: 223 | Input/Output: [[-98.08652122673844 53] -45.08652122673844]
Test Case: 224 | Input/Output: [[83.79093339423864 -48] 35.790933394238635]
Test Case: 225 | Input/Output: [[93.42035438310666 -90] 3.4203543831066554]
Test Case: 226 | Input/Output: [[-22.81926084722123 64] 41.18073915277877]
Test Case: 227 | Input/Output: [[13.66881516291076 19] 32.66881516291076]
Test Case: 228 | Input/Output: [[-69.48907067516913 -38] -107.48907067516913]
Test Case: 229 | Input/Output: [[28.569957341542846 69] 97.56995734154285]
Test Case: 230 | Input/Output: [[15.817344782575589 -64] -48.18265521742441]
Test Case: 231 | Input/Output: [[75.98255405547934 56] 131.98255405547934]
Test Case: 232 | Input/Output: [[-97.359095574315 53] -44.359095574315006]
Test Case: 233 | Input/Output: [[37.650011889990225 10] 47.650011889990225]
Test Case: 234 | Input/Output: [[34.854540264381455 -31] 3.8545402643814555]
Test Case: 235 | Input/Output: [[-41.57419171057435 11] -30.574191710574347]
Test Case: 236 | Input/Output: [[18.34809831697551 85] 103.34809831697551]
Test Case: 237 | Input/Output: [[44.94629488848122 -22] 22.94629488848122]
Test Case: 238 | Input/Output: [[-29.24839773405847 59] 29.75160226594153]
Test Case: 239 | Input/Output: [[-16.74301863127367 67] 50.25698136872633]
Test Case: 240 | Input/Output: [[60.5219082866501 -36] 24.521908286650103]
Test Case: 241 | Input/Output: [[49.95808913662697 -75] -25.041910863373033]
Test Case: 242 | Input/Output: [[-47.45288692175185 2] -45.45288692175185]
Test Case: 243 | Input/Output: [[-20.877500136241764 -22] -42.877500136241764]
Test Case: 244 | Input/Output: [[-43.13548080165099 92] 48.86451919834901]
Test Case: 245 | Input/Output: [[-20.79603079760976 -15] -35.79603079760976]
Test Case: 246 | Input/Output: [[-34.91870962002956 -95] -129.91870962002957]
Test Case: 247 | Input/Output: [[82.44638538385817 3] 85.44638538385817]
Test Case: 248 | Input/Output: [[-9.694143337160185 -16] -25.694143337160185]
Test Case: 249 | Input/Output: [[70.46611962130663 27] 97.46611962130663]
Test Case: 250 | Input/Output: [[68.7200861011626 86] 154.7200861011626]
Test Case: 251 | Input/Output: [[-57.489762040570525 98] 40.510237959429475]
Test Case: 252 | Input/Output: [[30.293622808491648 61] 91.29362280849165]
Test Case: 253 | Input/Output: [[-15.598908328340684 -20] -35.598908328340684]
Test Case: 254 | Input/Output: [[22.049724541351836 59] 81.04972454135184]
Test Case: 255 | Input/Output: [[82.0934338111386 78] 160.0934338111386]
Test Case: 256 | Input/Output: [[42.411339860919355 -33] 9.411339860919355]
Test Case: 257 | Input/Output: [[83.04407939649886 -86] -2.9559206035011414]
Test Case: 258 | Input/Output: [[67.59587072120001 100] 167.59587072120001]
Test Case: 259 | Input/Output: [[5.7385731429874625 75] 80.73857314298746]
Test Case: 260 | Input/Output: [[-10.987152533336769 -18] -28.98715253333677]
Test Case: 261 | Input/Output: [[24.105703591972883 30] 54.10570359197288]
Test Case: 262 | Input/Output: [[46.641300788595174 7] 53.641300788595174]
Test Case: 263 | Input/Output: [[34.818079188343916 51] 85.81807918834392]
Test Case: 264 | Input/Output: [[81.56166487348935 -83] -1.4383351265106512]
Test Case: 265 | Input/Output: [[68.66369296910776 -42] 26.663692969107757]
Test Case: 266 | Input/Output: [[-14.819205346754742 -68] -82.81920534675474]
Test Case: 267 | Input/Output: [[-88.30948157443893 72] -16.309481574438934]
Test Case: 268 | Input/Output: [[-99.54161305682084 58] -41.541613056820836]
Test Case: 269 | Input/Output: [[25.054732006417595 -59] -33.945267993582405]
Test Case: 270 | Input/Output: [[32.6130215085754 -33] -0.3869784914245997]
Test Case: 271 | Input/Output: [[-97.58399956576518 94] -3.5839995657651826]
Test Case: 272 | Input/Output: [[-56.31168186164015 12] -44.31168186164015]
Test Case: 273 | Input/Output: [[90.69612590045506 33] 123.69612590045506]
Test Case: 274 | Input/Output: [[95.84480893119661 -91] 4.84480893119661]
Test Case: 275 | Input/Output: [[55.58309139949975 -5] 50.58309139949975]
Test Case: 276 | Input/Output: [[-44.81227621607729 -7] -51.81227621607729]
Test Case: 277 | Input/Output: [[92.12527327654846 8] 100.12527327654846]
Test Case: 278 | Input/Output: [[-99.40292044275425 -69] -168.40292044275424]
Test Case: 279 | Input/Output: [[-93.93892521592508 46] -47.93892521592508]
Test Case: 280 | Input/Output: [[23.64962028797828 58] 81.64962028797828]
Test Case: 281 | Input/Output: [[-92.08139406227684 80] -12.081394062276843]
Test Case: 282 | Input/Output: [[60.659379133232676 45] 105.65937913323268]
Test Case: 283 | Input/Output: [[19.05520268979093 90] 109.05520268979093]
Test Case: 284 | Input/Output: [[-98.04304794748222 -100] -198.04304794748222]
Test Case: 285 | Input/Output: [[-72.83671482891667 -79] -151.83671482891668]
Test Case: 286 | Input/Output: [[88.75558278377949 80] 168.7555827837795]
Test Case: 287 | Input/Output: [[-12.781707989247337 26] 13.218292010752663]
Test Case: 288 | Input/Output: [[61.82881138150981 84] 145.8288113815098]
Test Case: 289 | Input/Output: [[21.03885494813244 76] 97.03885494813244]
Test Case: 290 | Input/Output: [[-9.738938210272408 83] 73.26106178972759]
Test Case: 291 | Input/Output: [[48.27191702083175 -25] 23.27191702083175]
Test Case: 292 | Input/Output: [[-8.625515294285279 79] 70.37448470571472]
Test Case: 293 | Input/Output: [[91.66531265994286 -55] 36.665312659942856]
Test Case: 294 | Input/Output: [[26.13372054401475 63] 89.13372054401475]
Test Case: 295 | Input/Output: [[94.86384026563962 -45] 49.863840265639624]
Test Case: 296 | Input/Output: [[21.02068670004033 -17] 4.020686700040329]
Test Case: 297 | Input/Output: [[-28.70477216415219 -23] -51.70477216415219]
Test Case: 298 | Input/Output: [[83.95243793665628 18] 101.95243793665628]
Test Case: 299 | Input/Output: [[54.60338605911744 -51] 3.6033860591174403]
Test Case: 300 | Input/Output: [[-98.25159206904554 23] -75.25159206904554]
Test Case: 301 | Input/Output: [[58.92989957259641 6] 64.92989957259641]
Test Case: 302 | Input/Output: [[-11.615059454596619 5] -6.615059454596619]
Test Case: 303 | Input/Output: [[72.67847820449319 -97] -24.32152179550681]
Test Case: 304 | Input/Output: [[13.949154607926033 69] 82.94915460792603]
Test Case: 305 | Input/Output: [[-14.814702191969232 -60] -74.81470219196923]
Test Case: 306 | Input/Output: [[24.878382521128657 -95] -70.12161747887134]
Test Case: 307 | Input/Output: [[92.38232851786503 25] 117.38232851786503]
Test Case: 308 | Input/Output: [[38.389443925053 -17] 21.389443925053]
Test Case: 309 | Input/Output: [[-28.9439637219197 66] 37.0560362780803]
Test Case: 310 | Input/Output: [[-80.62229984500762 90] 9.377700154992382]
Test Case: 311 | Input/Output: [[34.05036425539629 -68] -33.94963574460371]
Test Case: 312 | Input/Output: [[56.065313524235506 -34] 22.065313524235506]
Test Case: 313 | Input/Output: [[26.86145251627532 50] 76.86145251627532]
Test Case: 314 | Input/Output: [[74.7575290900723 -31] 43.757529090072296]
Test Case: 315 | Input/Output: [[-77.96839994401941 -34] -111.96839994401941]
Test Case: 316 | Input/Output: [[-0.9908130945478035 -55] -55.9908130945478]
Test Case: 317 | Input/Output: [[-79.36647695884076 -49] -128.36647695884076]
Test Case: 318 | Input/Output: [[-0.9201328573557248 -13] -13.920132857355725]
Test Case: 319 | Input/Output: [[-62.07338450968509 14] -48.07338450968509]
Test Case: 320 | Input/Output: [[-31.912641377688516 44] 12.087358622311484]
Test Case: 321 | Input/Output: [[72.28636471930324 39] 111.28636471930324]
Test Case: 322 | Input/Output: [[-0.11626461187562143 56] 55.88373538812438]
Test Case: 323 | Input/Output: [[-34.31476914204319 -35] -69.31476914204319]
Test Case: 324 | Input/Output: [[-58.42423075867538 -60] -118.42423075867538]
Test Case: 325 | Input/Output: [[-5.7865518005235685 -28] -33.78655180052357]
Test Case: 326 | Input/Output: [[-83.55953495736499 77] -6.559534957364988]
Test Case: 327 | Input/Output: [[71.33714765045224 31] 102.33714765045224]
Test Case: 328 | Input/Output: [[-4.175266702186818 -9] -13.175266702186818]
Test Case: 329 | Input/Output: [[75.16120958752091 -30] 45.161209587520915]
Test Case: 330 | Input/Output: [[-94.14625057121091 60] -34.14625057121091]
Test Case: 331 | Input/Output: [[-52.48559113732354 9] -43.48559113732354]
Test Case: 332 | Input/Output: [[-72.56792114355162 -11] -83.56792114355162]
Test Case: 333 | Input/Output: [[94.77148561198487 3] 97.77148561198487]
Test Case: 334 | Input/Output: [[-62.08071828755586 -54] -116.08071828755587]
Test Case: 335 | Input/Output: [[29.969095227536826 73] 102.96909522753683]
Test Case: 336 | Input/Output: [[-97.22112126370526 76] -21.221121263705257]
Test Case: 337 | Input/Output: [[-34.22247230667699 27] -7.222472306676991]
Test Case: 338 | Input/Output: [[91.56153261667646 -45] 46.56153261667646]
Test Case: 339 | Input/Output: [[64.73528447091181 93] 157.7352844709118]
Test Case: 340 | Input/Output: [[51.90503560498448 20] 71.90503560498448]
Test Case: 341 | Input/Output: [[-98.20472223817964 32] -66.20472223817964]
Test Case: 342 | Input/Output: [[69.86624569618232 -87] -17.133754303817682]
Test Case: 343 | Input/Output: [[-61.78657856136993 -9] -70.78657856136994]
Test Case: 344 | Input/Output: [[-61.74076068870027 -37] -98.74076068870028]
Test Case: 345 | Input/Output: [[-79.13464896677715 -14] -93.13464896677715]
Test Case: 346 | Input/Output: [[-73.66824828315477 95] 21.331751716845233]
Test Case: 347 | Input/Output: [[98.09640121292313 -42] 56.096401212923126]
Test Case: 348 | Input/Output: [[-62.15514355933978 -68] -130.15514355933976]
Test Case: 349 | Input/Output: [[86.91285297719952 -92] -5.08714702280048]
Test Case: 350 | Input/Output: [[-49.867990868787196 -21] -70.86799086878719]
Test Case: 351 | Input/Output: [[-65.28068264935243 -11] -76.28068264935243]
Test Case: 352 | Input/Output: [[-45.24476270483326 -68] -113.24476270483326]
Test Case: 353 | Input/Output: [[-36.078496583169105 57] 20.921503416830895]
Test Case: 354 | Input/Output: [[-36.97307444179214 -67] -103.97307444179214]
Test Case: 355 | Input/Output: [[51.00170550650961 25] 76.00170550650961]
Test Case: 356 | Input/Output: [[73.73094349176088 -34] 39.73094349176088]
Test Case: 357 | Input/Output: [[-66.93452265297722 -65] -131.93452265297722]
Test Case: 358 | Input/Output: [[-30.45096488360808 -70] -100.45096488360808]
Test Case: 359 | Input/Output: [[96.54067517987949 -78] 18.540675179879486]
Test Case: 360 | Input/Output: [[-17.289545248141636 -35] -52.289545248141636]
Test Case: 361 | Input/Output: [[-32.22565892213831 -71] -103.22565892213831]
Test Case: 362 | Input/Output: [[-58.97062543323155 20] -38.97062543323155]
Test Case: 363 | Input/Output: [[-86.03686278862813 -76] -162.03686278862813]
Test Case: 364 | Input/Output: [[-49.17900192889455 -71] -120.17900192889455]
Test Case: 365 | Input/Output: [[-26.046198050723305 19] -7.046198050723305]
Test Case: 366 | Input/Output: [[24.942890123839163 58] 82.94289012383916]
Test Case: 367 | Input/Output: [[-91.17983064236255 -57] -148.17983064236256]
Test Case: 368 | Input/Output: [[-40.63659079207129 51] 10.363409207928711]
Test Case: 369 | Input/Output: [[-14.12979968373233 -43] -57.12979968373233]
Test Case: 370 | Input/Output: [[72.53621879988395 -28] 44.536218799883954]
Test Case: 371 | Input/Output: [[2.6711160623430033 90] 92.671116062343]
Test Case: 372 | Input/Output: [[97.50506287001329 -87] 10.50506287001329]
Test Case: 373 | Input/Output: [[81.289580740237 -67] 14.289580740237]
Test Case: 374 | Input/Output: [[-61.556116223118295 -8] -69.5561162231183]
Test Case: 375 | Input/Output: [[19.809450190332583 -43] -23.190549809667417]
Test Case: 376 | Input/Output: [[-59.04182913861877 61] 1.9581708613812268]
Test Case: 377 | Input/Output: [[-9.837913844770014 -42] -51.837913844770014]
Test Case: 378 | Input/Output: [[43.20533461812178 68] 111.20533461812178]
Test Case: 379 | Input/Output: [[92.41356863412449 -79] 13.413568634124488]
Test Case: 380 | Input/Output: [[11.30945714799114 57] 68.30945714799114]
Test Case: 381 | Input/Output: [[-92.345510664592 -69] -161.34551066459198]
Test Case: 382 | Input/Output: [[88.22291958658798 70] 158.22291958658798]
Test Case: 383 | Input/Output: [[74.7777614887687 -54] 20.777761488768704]
Test Case: 384 | Input/Output: [[97.01293236264769 55] 152.0129323626477]
Test Case: 385 | Input/Output: [[51.77933758807524 -42] 9.779337588075236]
Test Case: 386 | Input/Output: [[-95.21815836821285 -38] -133.21815836821287]
Test Case: 387 | Input/Output: [[22.613847444857527 9] 31.613847444857527]
Test Case: 388 | Input/Output: [[88.29020439582007 -29] 59.29020439582007]
Test Case: 389 | Input/Output: [[67.9125912866181 -16] 51.912591286618095]
Test Case: 390 | Input/Output: [[0.4729221421904839 -57] -56.527077857809516]
Test Case: 391 | Input/Output: [[70.35091798466928 29] 99.35091798466928]
Test Case: 392 | Input/Output: [[-68.04809786831922 -58] -126.04809786831922]
Test Case: 393 | Input/Output: [[35.117574953210436 -34] 1.1175749532104362]
Test Case: 394 | Input/Output: [[-95.71618628231123 46] -49.71618628231123]
Test Case: 395 | Input/Output: [[-13.86821702604881 61] 47.13178297395119]
Test Case: 396 | Input/Output: [[-76.08059148895983 58] -18.080591488959826]
Test Case: 397 | Input/Output: [[-3.9544368301869497 -16] -19.95443683018695]
Test Case: 398 | Input/Output: [[-21.218808097325322 55] 33.78119190267468]
Test Case: 399 | Input/Output: [[-69.78817592288493 3] -66.78817592288493]
Test Case: 400 | Input/Output: [[-14.415441014872016 -12] -26.415441014872016]
Test Case: 401 | Input/Output: [[-25.010138331917247 75] 49.98986166808275]
Test Case: 402 | Input/Output: [[71.20337696936625 -54] 17.203376969366246]
Test Case: 403 | Input/Output: [[-57.273689060344026 -84] -141.27368906034403]
Test Case: 404 | Input/Output: [[-58.236649895567425 -57] -115.23664989556742]
Test Case: 405 | Input/Output: [[-36.43606484351458 98] 61.56393515648542]
Test Case: 406 | Input/Output: [[5.816870162703111 -75] -69.18312983729689]
Test Case: 407 | Input/Output: [[-64.484167699482 -66] -130.484167699482]
Test Case: 408 | Input/Output: [[44.50597992973243 61] 105.50597992973243]
Test Case: 409 | Input/Output: [[-4.075083603452725 62] 57.924916396547275]
Test Case: 410 | Input/Output: [[38.34879237998615 -37] 1.3487923799861505]
Test Case: 411 | Input/Output: [[-73.87801162049546 3] -70.87801162049546]
Test Case: 412 | Input/Output: [[49.14184089027984 -95] -45.85815910972016]
Test Case: 413 | Input/Output: [[-57.93157872555588 1] -56.93157872555588]
Test Case: 414 | Input/Output: [[37.687446001478264 -33] 4.687446001478264]
Test Case: 415 | Input/Output: [[-33.89345460479704 -96] -129.89345460479706]
Test Case: 416 | Input/Output: [[-94.59461896753871 36] -58.59461896753871]
Test Case: 417 | Input/Output: [[65.09595359053426 -43] 22.095953590534265]
Test Case: 418 | Input/Output: [[30.00620413924844 -54] -23.99379586075156]
Test Case: 419 | Input/Output: [[-84.69560427340954 -21] -105.69560427340954]
Test Case: 420 | Input/Output: [[-44.47266579609166 -77] -121.47266579609166]
Test Case: 421 | Input/Output: [[74.33178287517592 -35] 39.33178287517592]
Test Case: 422 | Input/Output: [[75.66443926899939 -61] 14.664439268999388]
Test Case: 423 | Input/Output: [[21.54473921617692 50] 71.54473921617692]
Test Case: 424 | Input/Output: [[-68.14427419288467 31] -37.144274192884666]
Test Case: 425 | Input/Output: [[-88.21380201253324 12] -76.21380201253324]
Test Case: 426 | Input/Output: [[-16.438062348970277 40] 23.561937651029723]
Test Case: 427 | Input/Output: [[52.56483467440813 -96] -43.43516532559187]
Test Case: 428 | Input/Output: [[-84.78839869449995 62] -22.788398694499946]
Test Case: 429 | Input/Output: [[-90.15257277231446 91] 0.847427227685543]
Test Case: 430 | Input/Output: [[-72.26564757335514 77] 4.734352426644861]
Test Case: 431 | Input/Output: [[-95.47114639899961 -81] -176.47114639899962]
Test Case: 432 | Input/Output: [[5.547626009495104 35] 40.547626009495104]
Test Case: 433 | Input/Output: [[-55.88980649866957 51] -4.8898064986695715]
Test Case: 434 | Input/Output: [[-70.58948051335416 -48] -118.58948051335416]
Test Case: 435 | Input/Output: [[9.551023988305403 19] 28.551023988305403]
Test Case: 436 | Input/Output: [[-54.940814835721 -92] -146.940814835721]
Test Case: 437 | Input/Output: [[-75.31259534842451 -65] -140.3125953484245]
Test Case: 438 | Input/Output: [[-87.3760442427153 0] -87.3760442427153]
Test Case: 439 | Input/Output: [[-11.258491571544099 -58] -69.2584915715441]
Test Case: 440 | Input/Output: [[15.544099162351174 -75] -59.45590083764883]
Test Case: 441 | Input/Output: [[48.22142226154088 -21] 27.22142226154088]
Test Case: 442 | Input/Output: [[74.01144237049508 64] 138.01144237049508]
Test Case: 443 | Input/Output: [[-16.89641218994879 30] 13.10358781005121]
Test Case: 444 | Input/Output: [[43.45515290273812 17] 60.45515290273812]
Test Case: 445 | Input/Output: [[80.29775228539842 -29] 51.29775228539842]
Test Case: 446 | Input/Output: [[-20.670820118992154 65] 44.329179881007846]
Test Case: 447 | Input/Output: [[48.10645546462527 -63] -14.89354453537473]
Test Case: 448 | Input/Output: [[70.66826247294543 84] 154.66826247294543]
Test Case: 449 | Input/Output: [[44.99430210031602 75] 119.99430210031602]
Test Case: 450 | Input/Output: [[83.95327623295984 28] 111.95327623295984]
Test Case: 451 | Input/Output: [[58.899743466655195 -35] 23.899743466655195]
Test Case: 452 | Input/Output: [[-83.92041905853753 -7] -90.92041905853753]
Test Case: 453 | Input/Output: [[-41.16337705371018 78] 36.83662294628982]
Test Case: 454 | Input/Output: [[-66.91607817948167 -3] -69.91607817948167]
Test Case: 455 | Input/Output: [[-72.94028111732977 -14] -86.94028111732977]
Test Case: 456 | Input/Output: [[5.723126807879069 -20] -14.27687319212093]
Test Case: 457 | Input/Output: [[-33.490027125798335 65] 31.509972874201665]
Test Case: 458 | Input/Output: [[-14.264709552803765 -97] -111.26470955280377]
Test Case: 459 | Input/Output: [[-58.580465790747915 -29] -87.58046579074792]
Test Case: 460 | Input/Output: [[67.98110192919484 -16] 51.981101929194836]
Test Case: 461 | Input/Output: [[93.25528410286407 53] 146.25528410286407]
Test Case: 462 | Input/Output: [[2.9673384527741433 21] 23.967338452774143]
Test Case: 463 | Input/Output: [[-3.1433687876545946 -25] -28.143368787654595]
Test Case: 464 | Input/Output: [[71.83455432077864 11] 82.83455432077864]
Test Case: 465 | Input/Output: [[82.63022878698075 -8] 74.63022878698075]
Test Case: 466 | Input/Output: [[-10.18694970486564 87] 76.81305029513436]
Test Case: 467 | Input/Output: [[-42.635323142428284 -15] -57.635323142428284]
Test Case: 468 | Input/Output: [[-79.77920482360123 28] -51.77920482360123]
Test Case: 469 | Input/Output: [[1.4469412714210819 53] 54.44694127142108]
Test Case: 470 | Input/Output: [[-53.55391065413624 64] 10.446089345863761]
Test Case: 471 | Input/Output: [[-12.518201422773672 50] 37.48179857722633]
Test Case: 472 | Input/Output: [[-92.83476742754826 -24] -116.83476742754826]
Test Case: 473 | Input/Output: [[-79.04906937030252 88] 8.950930629697481]
Test Case: 474 | Input/Output: [[-0.07365457667222586 70] 69.92634542332777]
Test Case: 475 | Input/Output: [[40.91882257246863 93] 133.91882257246863]
Test Case: 476 | Input/Output: [[-34.09688330426705 61] 26.903116695732948]
Test Case: 477 | Input/Output: [[23.075065703036685 -55] -31.924934296963315]
Test Case: 478 | Input/Output: [[74.36887489748915 78] 152.36887489748915]
Test Case: 479 | Input/Output: [[81.73930265534511 94] 175.7393026553451]
Test Case: 480 | Input/Output: [[63.905051883730664 -7] 56.905051883730664]
Test Case: 481 | Input/Output: [[14.905967462528835 -51] -36.094032537471165]
Test Case: 482 | Input/Output: [[-8.262475534930289 69] 60.73752446506971]
Test Case: 483 | Input/Output: [[-84.32491622963528 -44] -128.32491622963528]
Test Case: 484 | Input/Output: [[9.680636245427294 -32] -22.319363754572706]
Test Case: 485 | Input/Output: [[-80.55036914846652 52] -28.550369148466515]
Test Case: 486 | Input/Output: [[45.86750658016382 -16] 29.86750658016382]
Test Case: 487 | Input/Output: [[14.44827670599662 -40] -25.55172329400338]
Test Case: 488 | Input/Output: [[-78.61857707616669 6] -72.61857707616669]
Test Case: 489 | Input/Output: [[-29.874733576978613 92] 62.12526642302139]
Test Case: 490 | Input/Output: [[81.98884230023708 -19] 62.98884230023708]
Test Case: 491 | Input/Output: [[66.66117474605798 46] 112.66117474605798]
Test Case: 492 | Input/Output: [[62.634316557875906 44] 106.6343165578759]
Test Case: 493 | Input/Output: [[67.39491047877837 31] 98.39491047877837]
Test Case: 494 | Input/Output: [[-26.82956136410222 -81] -107.82956136410222]
Test Case: 495 | Input/Output: [[-8.841783203876503 33] 24.158216796123497]
Test Case: 496 | Input/Output: [[54.39942031092184 77] 131.39942031092184]
Test Case: 497 | Input/Output: [[-3.4757080158646545 82] 78.52429198413535]
Test Case: 498 | Input/Output: [[-46.900158454019156 86] 39.099841545980844]
Test Case: 499 | Input/Output: [[83.69547634149131 71] 154.69547634149131]
Test Case: 500 | Input/Output: [[39.39290281239255 22] 61.39290281239255]
Test Case: 501 | Input/Output: [[88.84692538544252 -82] 6.846925385442518]
Test Case: 502 | Input/Output: [[63.48792104701971 84] 147.4879210470197]
Test Case: 503 | Input/Output: [[-2.82797986852124 -68] -70.82797986852124]
Test Case: 504 | Input/Output: [[-32.12436508443632 -32] -64.12436508443632]
Test Case: 505 | Input/Output: [[-5.120129070466817 8] 2.8798709295331832]
Test Case: 506 | Input/Output: [[-10.774936338584439 12] 1.225063661415561]
Test Case: 507 | Input/Output: [[74.4403558453161 75] 149.4403558453161]
Test Case: 508 | Input/Output: [[-15.530849735188383 -88] -103.53084973518838]
Test Case: 509 | Input/Output: [[-54.21671687495881 6] -48.21671687495881]
Test Case: 510 | Input/Output: [[-5.444992458815264 -18] -23.444992458815264]
Test Case: 511 | Input/Output: [[-33.49735955509745 -28] -61.49735955509745]
Test Case: 512 | Input/Output: [[56.96391979182883 -26] 30.96391979182883]
Test Case: 513 | Input/Output: [[-28.893983523318866 -85] -113.89398352331887]
Test Case: 514 | Input/Output: [[79.69489676161749 -78] 1.6948967616174855]
Test Case: 515 | Input/Output: [[-75.37118195510115 -44] -119.37118195510115]
Test Case: 516 | Input/Output: [[14.128570926189028 39] 53.12857092618903]
Test Case: 517 | Input/Output: [[-48.7251048588752 -8] -56.7251048588752]
Test Case: 518 | Input/Output: [[-0.9909575257215835 -91] -91.99095752572158]
Test Case: 519 | Input/Output: [[84.86645289126048 82] 166.86645289126048]
Test Case: 520 | Input/Output: [[-55.3015929307064 -23] -78.30159293070639]
Test Case: 521 | Input/Output: [[-53.7292717080784 -59] -112.7292717080784]
Test Case: 522 | Input/Output: [[20.27857123248033 73] 93.27857123248033]
Test Case: 523 | Input/Output: [[75.79804983285669 47] 122.79804983285669]
Test Case: 524 | Input/Output: [[71.38577036695966 87] 158.38577036695966]
Test Case: 525 | Input/Output: [[25.55308763670287 72] 97.55308763670287]
Test Case: 526 | Input/Output: [[88.00631042819856 -92] -3.99368957180144]
Test Case: 527 | Input/Output: [[-1.0838831148915204 81] 79.91611688510848]
Test Case: 528 | Input/Output: [[-69.91328189399253 -78] -147.91328189399252]
Test Case: 529 | Input/Output: [[-13.673379942960253 -90] -103.67337994296025]
Test Case: 530 | Input/Output: [[-27.402907225262354 -96] -123.40290722526235]
Test Case: 531 | Input/Output: [[71.58110633623403 -19] 52.58110633623403]
Test Case: 532 | Input/Output: [[58.39404399019608 78] 136.39404399019608]
Test Case: 533 | Input/Output: [[81.28952362011071 -41] 40.289523620110714]
Test Case: 534 | Input/Output: [[43.91723359023038 26] 69.91723359023038]
Test Case: 535 | Input/Output: [[33.07210045146502 86] 119.07210045146502]
Test Case: 536 | Input/Output: [[-72.92194473652978 -78] -150.92194473652978]
Test Case: 537 | Input/Output: [[-43.80823788350781 -63] -106.80823788350781]
Test Case: 538 | Input/Output: [[51.37128438636927 64] 115.37128438636927]
Test Case: 539 | Input/Output: [[-24.229209680022052 0] -24.229209680022052]
Test Case: 540 | Input/Output: [[69.41081980316511 -81] -11.589180196834889]
Test Case: 541 | Input/Output: [[28.169189276206367 10] 38.16918927620637]
Test Case: 542 | Input/Output: [[-27.749011621984664 31] 3.250988378015336]
Test Case: 543 | Input/Output: [[-59.346206492331646 54] -5.346206492331646]
Test Case: 544 | Input/Output: [[34.47323445964315 0] 34.47323445964315]
Test Case: 545 | Input/Output: [[-67.39981641500611 16] -51.399816415006114]
Test Case: 546 | Input/Output: [[-4.581054983029603 1] -3.5810549830296026]
Test Case: 547 | Input/Output: [[46.056313155494706 79] 125.0563131554947]
Test Case: 548 | Input/Output: [[-5.0621942175836665 -56] -61.06219421758367]
Test Case: 549 | Input/Output: [[-62.99533346263617 -20] -82.99533346263617]
Test Case: 550 | Input/Output: [[-67.13930405248675 18] -49.13930405248675]
Test Case: 551 | Input/Output: [[46.32826505870099 2] 48.32826505870099]
Test Case: 552 | Input/Output: [[-68.16982162103392 -24] -92.16982162103392]
Test Case: 553 | Input/Output: [[31.863530587060865 -10] 21.863530587060865]
Test Case: 554 | Input/Output: [[-7.053945593368923 -50] -57.05394559336892]
Test Case: 555 | Input/Output: [[-93.66909781293754 -87] -180.66909781293754]
Test Case: 556 | Input/Output: [[26.290262581049674 52] 78.29026258104967]
Test Case: 557 | Input/Output: [[-68.34793698306108 -24] -92.34793698306108]
Test Case: 558 | Input/Output: [[57.50744167612504 1] 58.50744167612504]
Test Case: 559 | Input/Output: [[-18.69319367170735 37] 18.30680632829265]
Test Case: 560 | Input/Output: [[44.312918870927064 13] 57.312918870927064]
Test Case: 561 | Input/Output: [[12.144337380075626 15] 27.144337380075626]
Test Case: 562 | Input/Output: [[-52.33272275447691 -13] -65.33272275447692]
Test Case: 563 | Input/Output: [[-5.640074187073466 -26] -31.640074187073466]
Test Case: 564 | Input/Output: [[42.67817669372832 -76] -33.32182330627168]
Test Case: 565 | Input/Output: [[-54.175196062948984 72] 17.824803937051016]
Test Case: 566 | Input/Output: [[-7.628084444990208 36] 28.371915555009792]
Test Case: 567 | Input/Output: [[-28.49477123287481 -5] -33.49477123287481]
Test Case: 568 | Input/Output: [[-6.5143667881121985 0] -6.5143667881121985]
Test Case: 569 | Input/Output: [[-82.33572267992095 -87] -169.33572267992093]
Test Case: 570 | Input/Output: [[-91.57967780995449 -42] -133.5796778099545]
Test Case: 571 | Input/Output: [[44.52426940947544 -5] 39.52426940947544]
Test Case: 572 | Input/Output: [[-87.21822707758764 17] -70.21822707758764]
Test Case: 573 | Input/Output: [[-62.06349832152189 38] -24.06349832152189]
Test Case: 574 | Input/Output: [[53.046373664282015 -26] 27.046373664282015]
Test Case: 575 | Input/Output: [[-31.56049019379681 -31] -62.56049019379681]
Test Case: 576 | Input/Output: [[92.64775761645393 -75] 17.64775761645393]
Test Case: 577 | Input/Output: [[45.45533664917889 41] 86.45533664917889]
Test Case: 578 | Input/Output: [[89.74149986119747 57] 146.74149986119747]
Test Case: 579 | Input/Output: [[59.07816444781818 26] 85.07816444781818]
Test Case: 580 | Input/Output: [[73.17599001746652 -37] 36.17599001746652]
Test Case: 581 | Input/Output: [[93.42078304070526 -67] 26.42078304070526]
Test Case: 582 | Input/Output: [[-13.526297546016224 100] 86.47370245398378]
Test Case: 583 | Input/Output: [[53.234502081292476 -34] 19.234502081292476]
Test Case: 584 | Input/Output: [[87.14499650590028 55] 142.14499650590028]
Test Case: 585 | Input/Output: [[29.02453890009241 81] 110.02453890009241]
Test Case: 586 | Input/Output: [[-90.48696905332751 30] -60.48696905332751]
Test Case: 587 | Input/Output: [[34.66089470608793 -81] -46.33910529391207]
Test Case: 588 | Input/Output: [[1.454183694013068 10] 11.454183694013068]
Test Case: 589 | Input/Output: [[59.7482451447012 -51] 8.748245144701201]
Test Case: 590 | Input/Output: [[-86.58947156734891 92] 5.410528432651091]
Test Case: 591 | Input/Output: [[48.27002507727059 -50] -1.7299749227294114]
Test Case: 592 | Input/Output: [[87.12835988882901 33] 120.12835988882901]
Test Case: 593 | Input/Output: [[-25.948017529047135 -94] -119.94801752904714]
Test Case: 594 | Input/Output: [[-17.34807308910709 29] 11.65192691089291]
Test Case: 595 | Input/Output: [[-31.263453136917335 0] -31.263453136917335]
Test Case: 596 | Input/Output: [[62.09134334359197 -17] 45.09134334359197]
Test Case: 597 | Input/Output: [[-49.34641603622227 -36] -85.34641603622228]
Test Case: 598 | Input/Output: [[-34.18922910153893 -77] -111.18922910153893]
Test Case: 599 | Input/Output: [[67.68560542472335 97] 164.68560542472335]
Test Case: 600 | Input/Output: [[43.44402328270601 -66] -22.555976717293987]
Test Case: 601 | Input/Output: [[89.46685371486615 -47] 42.46685371486615]
Test Case: 602 | Input/Output: [[-35.158283318613016 -3] -38.158283318613016]
Test Case: 603 | Input/Output: [[-5.576028954146366 10] 4.423971045853634]
Test Case: 604 | Input/Output: [[9.785122881920486 -8] 1.7851228819204863]
Test Case: 605 | Input/Output: [[-20.783540896954207 36] 15.216459103045793]
Test Case: 606 | Input/Output: [[-52.22584877123519 -70] -122.22584877123519]
Test Case: 607 | Input/Output: [[61.229467520069136 29] 90.22946752006914]
Test Case: 608 | Input/Output: [[86.92063564000728 -53] 33.920635640007276]
Test Case: 609 | Input/Output: [[66.84208273138609 55] 121.84208273138609]
Test Case: 610 | Input/Output: [[6.374044603650987 -14] -7.625955396349013]
Test Case: 611 | Input/Output: [[-24.631360597811565 -12] -36.631360597811565]
Test Case: 612 | Input/Output: [[-83.02059308099952 96] 12.979406919000482]
Test Case: 613 | Input/Output: [[67.11871524223113 81] 148.11871524223113]
Test Case: 614 | Input/Output: [[-40.193443409730165 60] 19.806556590269835]
Test Case: 615 | Input/Output: [[-13.341387690312104 46] 32.658612309687896]
Test Case: 616 | Input/Output: [[-68.06053015212842 -66] -134.06053015212842]
Test Case: 617 | Input/Output: [[7.10230247284052 -11] -3.8976975271594796]
Test Case: 618 | Input/Output: [[24.651773353427416 58] 82.65177335342742]
Test Case: 619 | Input/Output: [[-25.766675693795733 47] 21.233324306204267]
Test Case: 620 | Input/Output: [[92.38135436333047 -44] 48.38135436333047]
Test Case: 621 | Input/Output: [[-1.2735967203193752 -83] -84.27359672031938]
Test Case: 622 | Input/Output: [[34.55368477390681 4] 38.55368477390681]
Test Case: 623 | Input/Output: [[-33.51989887894389 -24] -57.51989887894389]
Test Case: 624 | Input/Output: [[14.751106067822064 75] 89.75110606782206]
Test Case: 625 | Input/Output: [[-18.814754737248165 59] 40.185245262751835]
Test Case: 626 | Input/Output: [[-21.714895713340994 68] 46.285104286659006]
Test Case: 627 | Input/Output: [[-84.9415578262381 35] -49.941557826238096]
Test Case: 628 | Input/Output: [[35.90682106811548 -93] -57.09317893188452]
Test Case: 629 | Input/Output: [[73.90985203404273 9] 82.90985203404273]
Test Case: 630 | Input/Output: [[78.65988510340452 -90] -11.34011489659548]
Test Case: 631 | Input/Output: [[-74.8255831587294 -61] -135.8255831587294]
Test Case: 632 | Input/Output: [[39.93336729590504 86] 125.93336729590504]
Test Case: 633 | Input/Output: [[-30.62703634540982 58] 27.37296365459018]
Test Case: 634 | Input/Output: [[40.3802953398928 49] 89.3802953398928]
Test Case: 635 | Input/Output: [[81.37794611692817 -68] 13.377946116928172]
Test Case: 636 | Input/Output: [[54.33461810770413 32] 86.33461810770413]
Test Case: 637 | Input/Output: [[-12.178424024071006 -46] -58.178424024071006]
Test Case: 638 | Input/Output: [[85.18324109867234 19] 104.18324109867234]
Test Case: 639 | Input/Output: [[52.12819641909482 -58] -5.87180358090518]
Test Case: 640 | Input/Output: [[25.153645739699826 -55] -29.846354260300174]
Test Case: 641 | Input/Output: [[-3.7672645365344266 95] 91.23273546346557]
Test Case: 642 | Input/Output: [[13.225309984202866 -52] -38.774690015797134]
Test Case: 643 | Input/Output: [[22.600858829179813 62] 84.60085882917981]
Test Case: 644 | Input/Output: [[93.98847831242506 -26] 67.98847831242506]
Test Case: 645 | Input/Output: [[-14.141852795557043 -72] -86.14185279555704]
Test Case: 646 | Input/Output: [[-40.72870582160355 60] 19.271294178396452]
Test Case: 647 | Input/Output: [[-56.126867743435184 -10] -66.12686774343518]
Test Case: 648 | Input/Output: [[-27.48338009864956 -90] -117.48338009864956]
Test Case: 649 | Input/Output: [[-75.05336214069429 68] -7.05336214069429]
Test Case: 650 | Input/Output: [[-18.996012922971104 -6] -24.996012922971104]
Test Case: 651 | Input/Output: [[-29.660435815608622 -7] -36.66043581560862]
Test Case: 652 | Input/Output: [[-48.12245127300936 38] -10.12245127300936]
Test Case: 653 | Input/Output: [[82.0334631521863 20] 102.0334631521863]
Test Case: 654 | Input/Output: [[-11.302986182777033 -6] -17.302986182777033]
Test Case: 655 | Input/Output: [[-20.82949961158033 -45] -65.82949961158033]
Test Case: 656 | Input/Output: [[1.471078960410523 -89] -87.52892103958948]
Test Case: 657 | Input/Output: [[-87.03324008392768 61] -26.03324008392768]
Test Case: 658 | Input/Output: [[-81.50320375029243 21] -60.50320375029243]
Test Case: 659 | Input/Output: [[77.5387923946083 45] 122.5387923946083]
Test Case: 660 | Input/Output: [[32.45956176788343 59] 91.45956176788343]
Test Case: 661 | Input/Output: [[-91.30662352769224 99] 7.693376472307762]
Test Case: 662 | Input/Output: [[-92.1818301620286 6] -86.1818301620286]
Test Case: 663 | Input/Output: [[26.584539687420232 -9] 17.584539687420232]
Test Case: 664 | Input/Output: [[-54.012285366125724 -67] -121.01228536612572]
Test Case: 665 | Input/Output: [[98.26792210340369 10] 108.26792210340369]
Test Case: 666 | Input/Output: [[-92.6199059638585 -91] -183.6199059638585]
Test Case: 667 | Input/Output: [[-26.818533558311003 2] -24.818533558311003]
Test Case: 668 | Input/Output: [[-65.15401703760182 -84] -149.15401703760182]
Test Case: 669 | Input/Output: [[57.736146159194675 -30] 27.736146159194675]
Test Case: 670 | Input/Output: [[-80.23988661166845 33] -47.23988661166845]
Test Case: 671 | Input/Output: [[39.21578923589152 31] 70.21578923589152]
Test Case: 672 | Input/Output: [[8.918864777696811 -78] -69.08113522230319]
Test Case: 673 | Input/Output: [[-79.09265093667642 33] -46.09265093667642]
Test Case: 674 | Input/Output: [[77.94305895584387 -92] -14.056941044156133]
Test Case: 675 | Input/Output: [[-18.134341732804373 -9] -27.134341732804373]
Test Case: 676 | Input/Output: [[-90.70871428004237 -99] -189.7087142800424]
Test Case: 677 | Input/Output: [[9.260983095252783 92] 101.26098309525278]
Test Case: 678 | Input/Output: [[-58.15703771135772 -33] -91.15703771135772]
Test Case: 679 | Input/Output: [[-28.7387011419425 -30] -58.7387011419425]
Test Case: 680 | Input/Output: [[-43.89817105441216 -65] -108.89817105441216]
Test Case: 681 | Input/Output: [[58.57898027992752 92] 150.57898027992752]
Test Case: 682 | Input/Output: [[-22.89600544465938 100] 77.10399455534062]
Test Case: 683 | Input/Output: [[-13.648337537880224 -94] -107.64833753788022]
Test Case: 684 | Input/Output: [[35.12782685898088 -20] 15.127826858980882]
Test Case: 685 | Input/Output: [[21.81501157213232 -43] -21.18498842786768]
Test Case: 686 | Input/Output: [[-24.662309556602338 85] 60.33769044339766]
Test Case: 687 | Input/Output: [[91.47035561128902 58] 149.47035561128902]
Test Case: 688 | Input/Output: [[85.13363254534258 -3] 82.13363254534258]
Test Case: 689 | Input/Output: [[-37.26776268849703 18] -19.26776268849703]
Test Case: 690 | Input/Output: [[-30.235657722407765 41] 10.764342277592235]
Test Case: 691 | Input/Output: [[31.344640891564268 69] 100.34464089156427]
Test Case: 692 | Input/Output: [[81.27821272718495 -53] 28.27821272718495]
Test Case: 693 | Input/Output: [[98.49768768768533 86] 184.49768768768533]
Test Case: 694 | Input/Output: [[-92.5696450231728 -70] -162.5696450231728]
Test Case: 695 | Input/Output: [[33.548118023836054 26] 59.548118023836054]
Test Case: 696 | Input/Output: [[-69.69380860776451 -28] -97.69380860776451]
Test Case: 697 | Input/Output: [[-42.76798515411453 -70] -112.76798515411453]
Test Case: 698 | Input/Output: [[-86.50108931628269 -47] -133.50108931628267]
Test Case: 699 | Input/Output: [[82.49841867413042 -31] 51.49841867413042]
Test Case: 700 | Input/Output: [[-74.04774239850201 88] 13.95225760149799]
Test Case: 701 | Input/Output: [[74.48795851997872 32] 106.48795851997872]
Test Case: 702 | Input/Output: [[69.55184509185852 -38] 31.551845091858524]
Test Case: 703 | Input/Output: [[-1.6793159947599463 23] 21.320684005240054]
Test Case: 704 | Input/Output: [[-76.08869241524252 -57] -133.08869241524252]
Test Case: 705 | Input/Output: [[83.64594595441989 -90] -6.3540540455801136]
Test Case: 706 | Input/Output: [[97.34905887684366 12] 109.34905887684366]
Test Case: 707 | Input/Output: [[-69.66904609690695 75] 5.330953903093047]
Test Case: 708 | Input/Output: [[57.97101225252709 -8] 49.97101225252709]
Test Case: 709 | Input/Output: [[-6.276267030017294 5] -1.2762670300172942]
Test Case: 710 | Input/Output: [[67.8859579332327 -69] -1.114042066767297]
Test Case: 711 | Input/Output: [[15.957099509993839 65] 80.95709950999384]
Test Case: 712 | Input/Output: [[-16.098293185843687 -79] -95.09829318584369]
Test Case: 713 | Input/Output: [[-21.211194173741575 24] 2.788805826258425]
Test Case: 714 | Input/Output: [[-54.142542191591644 -79] -133.14254219159164]
Test Case: 715 | Input/Output: [[21.50668394339054 52] 73.50668394339054]
Test Case: 716 | Input/Output: [[60.14039320107523 15] 75.14039320107523]
Test Case: 717 | Input/Output: [[17.004804696258674 76] 93.00480469625867]
Test Case: 718 | Input/Output: [[18.476111633472783 -36] -17.523888366527217]
Test Case: 719 | Input/Output: [[-51.42841073178357 -48] -99.42841073178357]
Test Case: 720 | Input/Output: [[-82.80597889135768 22] -60.80597889135768]
Test Case: 721 | Input/Output: [[-79.25915926688482 -99] -178.2591592668848]
Test Case: 722 | Input/Output: [[5.051647806412433 -11] -5.948352193587567]
Test Case: 723 | Input/Output: [[80.43807702728134 84] 164.43807702728134]
Test Case: 724 | Input/Output: [[75.14296428268102 0] 75.14296428268102]
Test Case: 725 | Input/Output: [[-6.5975544033954066 -56] -62.59755440339541]
Test Case: 726 | Input/Output: [[24.593022644029475 27] 51.593022644029475]
Test Case: 727 | Input/Output: [[39.318829614744544 -23] 16.318829614744544]
Test Case: 728 | Input/Output: [[37.275966321029074 -52] -14.724033678970926]
Test Case: 729 | Input/Output: [[53.47498542437475 -15] 38.47498542437475]
Test Case: 730 | Input/Output: [[-79.74225553447177 -11] -90.74225553447177]
Test Case: 731 | Input/Output: [[19.422348282039238 66] 85.42234828203924]
Test Case: 732 | Input/Output: [[-57.81065410757593 3] -54.81065410757593]
Test Case: 733 | Input/Output: [[-60.50064577561858 -42] -102.50064577561858]
Test Case: 734 | Input/Output: [[-81.5628797729107 91] 9.437120227089295]
Test Case: 735 | Input/Output: [[-32.63768268850164 75] 42.36231731149836]
Test Case: 736 | Input/Output: [[-94.40932540622613 -67] -161.40932540622612]
Test Case: 737 | Input/Output: [[19.98352792988311 79] 98.98352792988311]
Test Case: 738 | Input/Output: [[-78.27509094457379 -55] -133.27509094457378]
Test Case: 739 | Input/Output: [[98.85175918048367 -66] 32.85175918048367]
Test Case: 740 | Input/Output: [[42.362647467513824 75] 117.36264746751382]
Test Case: 741 | Input/Output: [[42.46344683071271 32] 74.46344683071271]
Test Case: 742 | Input/Output: [[-57.64861412409796 -28] -85.64861412409796]
Test Case: 743 | Input/Output: [[-26.32121763500379 -52] -78.32121763500379]
Test Case: 744 | Input/Output: [[4.462859723943467 82] 86.46285972394347]
Test Case: 745 | Input/Output: [[-46.80072106042283 -99] -145.80072106042283]
Test Case: 746 | Input/Output: [[40.03673673860803 43] 83.03673673860803]
Test Case: 747 | Input/Output: [[-48.51611778537537 -5] -53.51611778537537]
Test Case: 748 | Input/Output: [[-56.5099532741526 -35] -91.5099532741526]
Test Case: 749 | Input/Output: [[-16.134177698312826 -16] -32.134177698312826]
Test Case: 750 | Input/Output: [[62.82616575870378 -7] 55.82616575870378]
Test Case: 751 | Input/Output: [[-82.38322982787194 81] -1.3832298278719435]
Test Case: 752 | Input/Output: [[-89.80337856226552 40] -49.80337856226552]
Test Case: 753 | Input/Output: [[43.55775947332725 -50] -6.442240526672748]
Test Case: 754 | Input/Output: [[-63.88366793818885 -36] -99.88366793818885]
Test Case: 755 | Input/Output: [[22.572090552407502 -31] -8.427909447592498]
Test Case: 756 | Input/Output: [[-97.76737625890357 48] -49.76737625890357]
Test Case: 757 | Input/Output: [[36.10453303721101 9] 45.10453303721101]
Test Case: 758 | Input/Output: [[79.71039731195285 -72] 7.710397311952846]
Test Case: 759 | Input/Output: [[40.08743965945601 26] 66.08743965945601]
Test Case: 760 | Input/Output: [[65.4999680201141 -25] 40.499968020114096]
Test Case: 761 | Input/Output: [[-50.81570331313885 -96] -146.81570331313884]
Test Case: 762 | Input/Output: [[-5.764160485630725 41] 35.235839514369275]
Test Case: 763 | Input/Output: [[-22.044181018869537 76] 53.95581898113046]
Test Case: 764 | Input/Output: [[-2.175319455213028 -78] -80.17531945521303]
Test Case: 765 | Input/Output: [[93.21674108643657 86] 179.21674108643657]
Test Case: 766 | Input/Output: [[83.06350929887333 25] 108.06350929887333]
Test Case: 767 | Input/Output: [[75.1636136628359 -68] 7.1636136628359]
Test Case: 768 | Input/Output: [[95.74390821119911 -70] 25.743908211199113]
Test Case: 769 | Input/Output: [[-26.52010235890647 86] 59.47989764109353]
Test Case: 770 | Input/Output: [[13.73509854229664 65] 78.73509854229664]
Test Case: 771 | Input/Output: [[-66.88457897620334 89] 22.115421023796657]
Test Case: 772 | Input/Output: [[78.41604784329243 -54] 24.416047843292432]
Test Case: 773 | Input/Output: [[68.01186040439995 5] 73.01186040439995]
Test Case: 774 | Input/Output: [[75.85451461854322 -40] 35.85451461854322]
Test Case: 775 | Input/Output: [[-18.751107167298528 86] 67.24889283270147]
Test Case: 776 | Input/Output: [[29.045581212216405 -57] -27.954418787783595]
Test Case: 777 | Input/Output: [[15.166051578274818 58] 73.16605157827482]
Test Case: 778 | Input/Output: [[54.815311049529214 -99] -44.184688950470786]
Test Case: 779 | Input/Output: [[-5.877499739355343 -78] -83.87749973935534]
Test Case: 780 | Input/Output: [[-0.2808517228661316 91] 90.71914827713387]
Test Case: 781 | Input/Output: [[-82.9687071074426 33] -49.9687071074426]
Test Case: 782 | Input/Output: [[-28.749085734772507 -78] -106.7490857347725]
Test Case: 783 | Input/Output: [[26.513000817719927 74] 100.51300081771993]
Test Case: 784 | Input/Output: [[24.83295352598003 -43] -18.16704647401997]
Test Case: 785 | Input/Output: [[38.30018323689805 -79] -40.69981676310195]
Test Case: 786 | Input/Output: [[-87.67130626675623 77] -10.671306266756233]
Test Case: 787 | Input/Output: [[-91.01695144740387 -87] -178.01695144740387]
Test Case: 788 | Input/Output: [[-78.7709191615384 -97] -175.77091916153842]
Test Case: 789 | Input/Output: [[-48.773728075168734 90] 41.226271924831266]
Test Case: 790 | Input/Output: [[0.40707813588245756 -25] -24.592921864117542]
Test Case: 791 | Input/Output: [[17.463534522303775 -1] 16.463534522303775]
Test Case: 792 | Input/Output: [[63.522262176139776 20] 83.52226217613978]
Test Case: 793 | Input/Output: [[-78.23183564923666 64] -14.231835649236658]
Test Case: 794 | Input/Output: [[-14.605176195087168 55] 40.39482380491283]
Test Case: 795 | Input/Output: [[41.04364560298245 76] 117.04364560298245]
Test Case: 796 | Input/Output: [[-54.18696443214055 78] 23.81303556785945]
Test Case: 797 | Input/Output: [[79.15391709108926 51] 130.15391709108926]
Test Case: 798 | Input/Output: [[-36.68716941280228 -19] -55.68716941280228]
Test Case: 799 | Input/Output: [[92.98167452742874 -94] -1.018325472571263]
Test Case: 800 | Input/Output: [[-7.782130099392262 -72] -79.78213009939226]
Test Case: 801 | Input/Output: [[45.47759281590464 -96] -50.52240718409536]
Test Case: 802 | Input/Output: [[-76.57167617258153 -21] -97.57167617258153]
Test Case: 803 | Input/Output: [[22.651260701522148 -24] -1.3487392984778523]
Test Case: 804 | Input/Output: [[34.94564968937925 31] 65.94564968937925]
Test Case: 805 | Input/Output: [[-14.664880389307754 -3] -17.664880389307754]
Test Case: 806 | Input/Output: [[-23.770820306109172 39] 15.229179693890828]
Test Case: 807 | Input/Output: [[-94.74322875604584 90] -4.743228756045838]
Test Case: 808 | Input/Output: [[75.17330184502825 -35] 40.17330184502825]
Test Case: 809 | Input/Output: [[-55.337542967683184 -33] -88.33754296768319]
Test Case: 810 | Input/Output: [[36.40751292391229 14] 50.40751292391229]
Test Case: 811 | Input/Output: [[26.100644844614138 -47] -20.899355155385862]
Test Case: 812 | Input/Output: [[78.14506405706544 39] 117.14506405706544]
Test Case: 813 | Input/Output: [[-48.14933937082251 -54] -102.1493393708225]
Test Case: 814 | Input/Output: [[84.36758553039766 -96] -11.632414469602338]
Test Case: 815 | Input/Output: [[55.67471099809919 13] 68.67471099809919]
Test Case: 816 | Input/Output: [[96.57485112308535 -56] 40.57485112308535]
Test Case: 817 | Input/Output: [[34.83357165345814 -99] -64.16642834654186]
Test Case: 818 | Input/Output: [[96.5670332060306 88] 184.5670332060306]
Test Case: 819 | Input/Output: [[7.957315046355703 -23] -15.042684953644297]
Test Case: 820 | Input/Output: [[-47.86218568838334 -75] -122.86218568838333]
Test Case: 821 | Input/Output: [[-88.25978810596413 -41] -129.25978810596413]
Test Case: 822 | Input/Output: [[-58.24020524801181 -43] -101.24020524801182]
Test Case: 823 | Input/Output: [[36.47874536788538 -91] -54.52125463211462]
Test Case: 824 | Input/Output: [[11.007680130954142 92] 103.00768013095414]
Test Case: 825 | Input/Output: [[56.59022277077085 38] 94.59022277077085]
Test Case: 826 | Input/Output: [[8.583045113417924 -8] 0.5830451134179242]
Test Case: 827 | Input/Output: [[35.66492180521544 -39] -3.3350781947845576]
Test Case: 828 | Input/Output: [[78.41048558034214 -66] 12.41048558034214]
Test Case: 829 | Input/Output: [[-51.90132080295415 27] -24.901320802954153]
Test Case: 830 | Input/Output: [[48.99869544216841 -60] -11.001304557831588]
Test Case: 831 | Input/Output: [[-52.36531280973662 23] -29.365312809736622]
Test Case: 832 | Input/Output: [[-47.030883179515605 49] 1.9691168204843947]
Test Case: 833 | Input/Output: [[-54.87775925430467 -19] -73.87775925430466]
Test Case: 834 | Input/Output: [[-31.895485978316486 4] -27.895485978316486]
Test Case: 835 | Input/Output: [[-81.6425426887027 -12] -93.6425426887027]
Test Case: 836 | Input/Output: [[43.993230747333854 -73] -29.006769252666146]
Test Case: 837 | Input/Output: [[34.02901443443628 11] 45.02901443443628]
Test Case: 838 | Input/Output: [[65.88093638849242 -15] 50.880936388492415]
Test Case: 839 | Input/Output: [[64.88550186075346 2] 66.88550186075346]
Test Case: 840 | Input/Output: [[-89.98262522477356 -3] -92.98262522477356]
Test Case: 841 | Input/Output: [[22.46725392065126 26] 48.46725392065126]
Test Case: 842 | Input/Output: [[-21.169631117397714 -52] -73.16963111739771]
Test Case: 843 | Input/Output: [[-64.77388518778204 80] 15.226114812217958]
Test Case: 844 | Input/Output: [[88.57968988834807 -78] 10.57968988834807]
Test Case: 845 | Input/Output: [[82.9392434125873 -98] -15.060756587412698]
Test Case: 846 | Input/Output: [[45.851336355002985 -20] 25.851336355002985]
Test Case: 847 | Input/Output: [[-30.846785327568753 45] 14.153214672431247]
Test Case: 848 | Input/Output: [[65.11481437748284 58] 123.11481437748284]
Test Case: 849 | Input/Output: [[-33.70837001129384 21] -12.708370011293837]
Test Case: 850 | Input/Output: [[-16.744349341618573 16] -0.7443493416185731]
Test Case: 851 | Input/Output: [[-77.56615529277921 -60] -137.56615529277923]
Test Case: 852 | Input/Output: [[94.9246757408225 0] 94.9246757408225]
Test Case: 853 | Input/Output: [[-77.41550073852814 35] -42.41550073852814]
Test Case: 854 | Input/Output: [[71.05785779996992 -82] -10.942142200030077]
Test Case: 855 | Input/Output: [[-15.27273629282955 54] 38.72726370717045]
Test Case: 856 | Input/Output: [[-41.30502410270947 73] 31.694975897290533]
Test Case: 857 | Input/Output: [[62.853137742078275 50] 112.85313774207827]
Test Case: 858 | Input/Output: [[40.93098901212136 25] 65.93098901212136]
Test Case: 859 | Input/Output: [[48.505920814605616 -28] 20.505920814605616]
Test Case: 860 | Input/Output: [[8.305765758527613 -88] -79.69423424147239]
Test Case: 861 | Input/Output: [[32.95883156393623 -13] 19.95883156393623]
Test Case: 862 | Input/Output: [[65.49203526887405 68] 133.49203526887405]
Test Case: 863 | Input/Output: [[42.89743948186742 60] 102.89743948186742]
Test Case: 864 | Input/Output: [[33.32020988990044 -58] -24.67979011009956]
Test Case: 865 | Input/Output: [[-83.2443814970216 63] -20.244381497021607]
Test Case: 866 | Input/Output: [[-44.61442979508132 -43] -87.61442979508132]
Test Case: 867 | Input/Output: [[21.636555180123736 52] 73.63655518012374]
Test Case: 868 | Input/Output: [[71.67107363173074 -42] 29.671073631730735]
Test Case: 869 | Input/Output: [[89.06230897110302 -34] 55.06230897110302]
Test Case: 870 | Input/Output: [[-47.70171235326792 -53] -100.70171235326792]
Test Case: 871 | Input/Output: [[-6.649796886121237 -88] -94.64979688612124]
Test Case: 872 | Input/Output: [[7.1005943771267965 -85] -77.8994056228732]
Test Case: 873 | Input/Output: [[49.461093860373836 17] 66.46109386037384]
Test Case: 874 | Input/Output: [[47.15346357525951 70] 117.15346357525951]
Test Case: 875 | Input/Output: [[-23.533431552218474 -51] -74.53343155221847]
Test Case: 876 | Input/Output: [[-41.2305461963371 28] -13.230546196337102]
Test Case: 877 | Input/Output: [[80.30422354834596 87] 167.30422354834596]
Test Case: 878 | Input/Output: [[90.12384458087232 86] 176.12384458087232]
Test Case: 879 | Input/Output: [[5.203567583368795 -23] -17.796432416631205]
Test Case: 880 | Input/Output: [[21.080511442299013 11] 32.08051144229901]
Test Case: 881 | Input/Output: [[20.32358818861455 -72] -51.67641181138545]
Test Case: 882 | Input/Output: [[18.888303616950907 31] 49.88830361695091]
Test Case: 883 | Input/Output: [[-0.688081752031124 -58] -58.688081752031124]
Test Case: 884 | Input/Output: [[-9.673319648012807 77] 67.32668035198719]
Test Case: 885 | Input/Output: [[39.86856863351784 78] 117.86856863351784]
Test Case: 886 | Input/Output: [[13.095889918389119 54] 67.09588991838912]
Test Case: 887 | Input/Output: [[-70.34435861714687 68] -2.3443586171468667]
Test Case: 888 | Input/Output: [[-63.77788029784761 -80] -143.77788029784762]
Test Case: 889 | Input/Output: [[83.94836751272263 -10] 73.94836751272263]
Test Case: 890 | Input/Output: [[-61.33247438346032 37] -24.332474383460323]
Test Case: 891 | Input/Output: [[72.54254250896128 -91] -18.457457491038724]
Test Case: 892 | Input/Output: [[-90.77965761877303 72] -18.77965761877303]
Test Case: 893 | Input/Output: [[-50.486938408319595 -30] -80.48693840831959]
Test Case: 894 | Input/Output: [[93.95152717742539 -26] 67.95152717742539]
Test Case: 895 | Input/Output: [[-76.61259859478557 -69] -145.61259859478557]
Test Case: 896 | Input/Output: [[-40.191714086383776 75] 34.808285913616224]
Test Case: 897 | Input/Output: [[0.9975826606310108 78] 78.99758266063101]
Test Case: 898 | Input/Output: [[-71.24555524398545 82] 10.75444475601455]
Test Case: 899 | Input/Output: [[-19.823348589651047 -4] -23.823348589651047]
Test Case: 900 | Input/Output: [[-15.735398986898105 -69] -84.7353989868981]
Test Case: 901 | Input/Output: [[-68.77411125970616 52] -16.77411125970616]
Test Case: 902 | Input/Output: [[18.109996569999723 6] 24.109996569999723]
Test Case: 903 | Input/Output: [[-99.9343274655573 -75] -174.93432746555732]
Test Case: 904 | Input/Output: [[-6.137575754278373 17] 10.862424245721627]
Test Case: 905 | Input/Output: [[10.765173254407586 91] 101.76517325440759]
Test Case: 906 | Input/Output: [[-17.19331944224713 74] 56.80668055775287]
Test Case: 907 | Input/Output: [[-24.060466065029857 -28] -52.06046606502986]
Test Case: 908 | Input/Output: [[86.94906778706809 97] 183.9490677870681]
Test Case: 909 | Input/Output: [[-10.650395594566774 55] 44.349604405433226]
Test Case: 910 | Input/Output: [[-5.551036269260166 -81] -86.55103626926017]
Test Case: 911 | Input/Output: [[62.73005588991015 25] 87.73005588991015]
Test Case: 912 | Input/Output: [[-45.745444641280365 -15] -60.745444641280365]
Test Case: 913 | Input/Output: [[5.111425099091704 82] 87.1114250990917]
Test Case: 914 | Input/Output: [[63.45596497774915 55] 118.45596497774915]
Test Case: 915 | Input/Output: [[-15.059242532947394 36] 20.940757467052606]
Test Case: 916 | Input/Output: [[21.026577098225104 74] 95.0265770982251]
Test Case: 917 | Input/Output: [[-58.346405458461746 -82] -140.34640545846173]
Test Case: 918 | Input/Output: [[28.390613189302258 -15] 13.390613189302258]
Test Case: 919 | Input/Output: [[17.516530707756942 1] 18.516530707756942]
Test Case: 920 | Input/Output: [[55.58024620078646 33] 88.58024620078646]
Test Case: 921 | Input/Output: [[44.156427932076554 -32] 12.156427932076554]
Test Case: 922 | Input/Output: [[-85.17581669484527 -22] -107.17581669484527]
Test Case: 923 | Input/Output: [[67.53668480947243 -75] -7.463315190527567]
Test Case: 924 | Input/Output: [[48.885399011529955 -64] -15.114600988470045]
Test Case: 925 | Input/Output: [[-14.756966408892325 -48] -62.756966408892325]
Test Case: 926 | Input/Output: [[-16.189582382575367 21] 4.810417617424633]
Test Case: 927 | Input/Output: [[-80.89719496989507 -96] -176.89719496989505]
Test Case: 928 | Input/Output: [[-1.3502348220300746 -98] -99.35023482203007]
Test Case: 929 | Input/Output: [[-75.56089936849206 -92] -167.56089936849207]
Test Case: 930 | Input/Output: [[-88.9338668745343 -38] -126.9338668745343]
Test Case: 931 | Input/Output: [[61.3574772986305 77] 138.3574772986305]
Test Case: 932 | Input/Output: [[39.48571574163054 -51] -11.514284258369457]
Test Case: 933 | Input/Output: [[-26.284550257379863 -67] -93.28455025737986]
Test Case: 934 | Input/Output: [[2.041109264315139 15] 17.04110926431514]
Test Case: 935 | Input/Output: [[5.706106779368184 3] 8.706106779368184]
Test Case: 936 | Input/Output: [[35.21425203193468 12] 47.21425203193468]
Test Case: 937 | Input/Output: [[29.19781507305194 93] 122.19781507305194]
Test Case: 938 | Input/Output: [[6.547713494511683 89] 95.54771349451168]
Test Case: 939 | Input/Output: [[-33.19397934595759 -82] -115.19397934595759]
Test Case: 940 | Input/Output: [[87.96735884380865 49] 136.96735884380865]
Test Case: 941 | Input/Output: [[-47.35473663581775 80] 32.64526336418225]
Test Case: 942 | Input/Output: [[-90.72578626672679 60] -30.725786266726786]
Test Case: 943 | Input/Output: [[-31.403924419448487 -33] -64.40392441944849]
Test Case: 944 | Input/Output: [[-33.93403248967357 68] 34.06596751032643]
Test Case: 945 | Input/Output: [[-82.68335052940316 -74] -156.68335052940316]
Test Case: 946 | Input/Output: [[83.97980727637008 3] 86.97980727637008]
Test Case: 947 | Input/Output: [[92.36240898162936 -62] 30.362408981629358]
Test Case: 948 | Input/Output: [[-44.35272446739298 64] 19.64727553260702]
Test Case: 949 | Input/Output: [[65.62577181797556 -92] -26.37422818202444]
Test Case: 950 | Input/Output: [[1.874257033583234 0] 1.874257033583234]
Test Case: 951 | Input/Output: [[72.25040104799365 -85] -12.749598952006352]
Test Case: 952 | Input/Output: [[66.17932335291786 -24] 42.17932335291786]
Test Case: 953 | Input/Output: [[26.167874138479988 44] 70.16787413847999]
Test Case: 954 | Input/Output: [[21.65115025901656 91] 112.65115025901656]
Test Case: 955 | Input/Output: [[4.63335194482417 62] 66.63335194482417]
Test Case: 956 | Input/Output: [[35.40715419103853 27] 62.40715419103853]
Test Case: 957 | Input/Output: [[-26.31313677780615 -18] -44.31313677780615]
Test Case: 958 | Input/Output: [[-89.26803483328838 -90] -179.26803483328837]
Test Case: 959 | Input/Output: [[6.062459296437851 12] 18.06245929643785]
Test Case: 960 | Input/Output: [[75.56446016141777 44] 119.56446016141777]
Test Case: 961 | Input/Output: [[-61.11421841242042 60] -1.1142184124204206]
Test Case: 962 | Input/Output: [[34.239839265660805 3] 37.239839265660805]
Test Case: 963 | Input/Output: [[43.59264241802961 -78] -34.40735758197039]
Test Case: 964 | Input/Output: [[74.35876150461124 -53] 21.358761504611238]
Test Case: 965 | Input/Output: [[-88.86873368422698 -51] -139.86873368422698]
Test Case: 966 | Input/Output: [[-54.3358335396837 -30] -84.3358335396837]
Test Case: 967 | Input/Output: [[-58.31299071947767 24] -34.31299071947767]
Test Case: 968 | Input/Output: [[-52.96376113636268 -11] -63.96376113636268]
Test Case: 969 | Input/Output: [[85.69407369701395 38] 123.69407369701395]
Test Case: 970 | Input/Output: [[83.82853556064819 31] 114.82853556064819]
Test Case: 971 | Input/Output: [[-37.74416669468068 -17] -54.74416669468068]
Test Case: 972 | Input/Output: [[62.241616606253615 38] 100.24161660625361]
Test Case: 973 | Input/Output: [[64.59002032050023 22] 86.59002032050023]
Test Case: 974 | Input/Output: [[-0.6096029366395186 -76] -76.60960293663952]
Test Case: 975 | Input/Output: [[-55.33645721137219 -98] -153.3364572113722]
Test Case: 976 | Input/Output: [[39.758286379835795 100] 139.7582863798358]
Test Case: 977 | Input/Output: [[-17.636315690993328 82] 64.36368430900667]
Test Case: 978 | Input/Output: [[29.173974688260444 -100] -70.82602531173956]
Test Case: 979 | Input/Output: [[29.94651786991409 -76] -46.05348213008591]
Test Case: 980 | Input/Output: [[21.038248558792077 -18] 3.038248558792077]
Test Case: 981 | Input/Output: [[-19.38591742946481 -84] -103.38591742946481]
Test Case: 982 | Input/Output: [[98.8573447941755 -21] 77.8573447941755]
Test Case: 983 | Input/Output: [[80.5075391400299 -69] 11.507539140029905]
Test Case: 984 | Input/Output: [[28.572808945775307 29] 57.57280894577531]
Test Case: 985 | Input/Output: [[97.45826606172665 -56] 41.45826606172665]
Test Case: 986 | Input/Output: [[-87.4123365641776 12] -75.4123365641776]
Test Case: 987 | Input/Output: [[-11.322518042419574 -45] -56.322518042419574]
Test Case: 988 | Input/Output: [[-64.56721361548631 -72] -136.5672136154863]
Test Case: 989 | Input/Output: [[41.740111127565115 11] 52.740111127565115]
Test Case: 990 | Input/Output: [[-11.080203803457024 -57] -68.08020380345702]
Test Case: 991 | Input/Output: [[-17.324980326902548 63] 45.67501967309745]
Test Case: 992 | Input/Output: [[80.97562548402232 -33] 47.975625484022316]
Test Case: 993 | Input/Output: [[51.95072073199242 93] 144.95072073199242]
Test Case: 994 | Input/Output: [[97.37531520151859 77] 174.3753152015186]
Test Case: 995 | Input/Output: [[99.50116852223988 -33] 66.50116852223988]
Test Case: 996 | Input/Output: [[-28.588384614597345 -68] -96.58838461459735]
Test Case: 997 | Input/Output: [[-48.63502128236252 67] 18.364978717637477]
Test Case: 998 | Input/Output: [[-28.284022708626892 -98] -126.28402270862689]
Test Case: 999 | Input/Output: [[30.746802077294234 -2] 28.746802077294234]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove vector_boolean_pushall zip_insert_left_fromcode exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup vector_integer_butlast vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse exec_k vector_integer_yank float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times genome_dup return_code_pop char_swap integer_max return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank zip_shove vector_integer_flush vector_integer_subvec vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean integer_min exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add code_stackdepth exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse integer_swap string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.11.1-1-SNAPSHOTHash of last Git commit = 8a64f874173fae27ed1a77827849de0fade43c2b
GitHub link = https://github.com/lspector/Clojush/commit/8a64f874173fae27ed1a77827849de0fade43c2b
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = []
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :tournament
pop-when-tagging = true
population-size = 1000
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
random-screen = false
random-seed = -36 77 -106 -45 79 39 -62 -45 -19 88 -94 117 -12 53 65 8
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Number IO problem report - generation 0
Test total error for best: 61057.514999999905
Test mean error for best: 30.52876
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 89            
Correct output: 24.1561588797  | Program output: 89            
Correct output: 63.2618741651  | Program output: -3            
Correct output: 81.4613344804  | Program output: 83            
Correct output: -116.4209784668 | Program output: -48           
Correct output: -80.5506083936 | Program output: -85           
Correct output: 41.7915986532  | Program output: 3             
Correct output: -6.9439752137  | Program output: 10            
Correct output: 58.5604070006  | Program output: -3            
Correct output: -105.4717093128 | Program output: -94           
Correct output: -65.3737650023 | Program output: 26            
Correct output: 80.422971733   | Program output: 85            
Correct output: -36.4331405664 | Program output: 13            
Correct output: 49.2855176563  | Program output: 79            
Correct output: 5.2530048743   | Program output: -63           
Correct output: -14.5307262538 | Program output: -36           
Correct output: 174.8425999229 | Program output: 87            
Correct output: 94.2858027683  | Program output: 98            
Correct output: -32.1580651662 | Program output: 62            
Correct output: 34.2563324554  | Program output: 65            
Correct output: -34.3108385906 | Program output: -66           
Correct output: -25.5420796562 | Program output: 49            
Correct output: 40.5609747923  | Program output: 88            
Correct output: -146.3905253753 | Program output: -70           
Correct output: 125.2745939078 | Program output: 67            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction -45} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_mod} {:instruction integer_dup_items} {:instruction integer_fromfloat} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_swap} {:instruction print_float} {:instruction integer_dup} {:instruction float_cos} {:instruction in1} {:instruction integer_sub} {:instruction float_shove} {:instruction float_dup_times} {:instruction integer_dup_items} {:instruction float_max} {:instruction float_pop} {:instruction integer_sub} {:instruction float_stackdepth} {:instruction float_pop} {:instruction integer_rot} {:instruction float_rot} {:instruction float_min} {:instruction integer_pop} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_dec} {:instruction in1} {:instruction float_max} {:instruction -27} {:instruction integer_pop} {:instruction float_yank} {:instruction tagged_302} {:instruction float_pop} {:instruction integer_min} {:instruction float_dec} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_min} {:instruction -78} {:instruction float_flush} {:instruction integer_swap} {:instruction in2} {:instruction float_mod} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_sin} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_mult})
Best program: (float_yankdup -45 integer_dup_times print_float float_mod integer_dup_items integer_fromfloat integer_swap float_stackdepth integer_stackdepth float_rot integer_swap integer_add in2 integer_swap float_dec 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod print_integer integer_swap print_float integer_dup float_cos in1 integer_sub float_shove float_dup_times integer_dup_items float_max float_pop integer_sub float_stackdepth float_pop integer_rot float_rot float_min integer_pop float_cos integer_dec integer_dec in1 float_max -27 integer_pop float_yank tagged_302 float_pop integer_min float_dec float_shove float_frominteger integer_pop integer_min -78 float_flush integer_swap in2 float_mod integer_yank float_dup_times float_stackdepth float_sin integer_yankdup integer_shove float_mult)
Errors: [39.3542 12 64.8438 11 66.2619 12 1.5387 11 68.421 12 4.4494 11 38.7916 12 16.944 12 61.5604 13 11.4717 13 91.3738 13 4.577 11 49.4331 13 29.7145 12 68.253 11 21.4693 11 87.8426 13 3.7142 11 94.1581 12 30.7437 11 31.6892 12 74.5421 12 47.439 13 76.3905 13 58.2746 13]
Total: 1443.2514
Mean: 28.865028
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 18199.7163239
Median total errors in population: 25338.0
Error averages by case: (711.919634000001 13.383 710.8182277999999 13.392 713.7678132000002 12.465 715.4765337999999 13.211 732.323558499997 14.072 720.8867997999996 13.762 696.1471074999995 12.545 698.5994799000015 12.533 715.0438775999994 12.522 730.3160505999995 13.928 712.8980581999975 13.345 714.5931797999989 12.264 704.3297862000016 13.27 709.6279747999995 13.346 710.7077528000023 11.819 705.9214590000001 13.767 735.4635245999973 13.421 720.5890104999992 13.252 710.5303373000003 13.305 706.4298598000001 13.229 713.3424294999991 13.885 707.0943578000001 13.265 710.443507399999 13.067 740.8071669999982 14.141 721.1238365000005 13.326)
Error minima by case: (0.2157 8 0.537 8 0.0 0 1.5387 7 21.421 3 0.2795 8 2.5796 2 0.944 1 0.0 0 10.4717 2 0.3738 2 3.3407 8 2.5669 2 0.1446 8 2.253 2 0.1887 9 3.1574 2 0.2858 8 6.8419 2 0.3245 8 4.2569 8 2.5421 2 1.3489 7 2.6768 2 12.7254 3)
Average genome size in population (length): 51.537
Average program size in population (points): 52.537
Average percent parens in population: 0.040
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 1
Genome diversity (% unique Plush genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.319
Error (vector) diversity:			 0.349
Behavioral diversity:				 0.371
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 1292673
--- Timings ---
Current time: 1529615571631 milliseconds
Total Time:           3.6 seconds
Initialization:       0.1 seconds,  3.1%
Reproduction:         0.6 seconds, 16.5%
Fitness Testing:      2.9 seconds, 80.4%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Number IO problem report - generation 1
Test total error for best: 61057.514999999905
Test mean error for best: 30.52876
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 89            
Correct output: 24.1561588797  | Program output: 89            
Correct output: 63.2618741651  | Program output: -3            
Correct output: 81.4613344804  | Program output: 83            
Correct output: -116.4209784668 | Program output: -48           
Correct output: -80.5506083936 | Program output: -85           
Correct output: 41.7915986532  | Program output: 3             
Correct output: -6.9439752137  | Program output: 10            
Correct output: 58.5604070006  | Program output: -3            
Correct output: -105.4717093128 | Program output: -94           
Correct output: -65.3737650023 | Program output: 26            
Correct output: 80.422971733   | Program output: 85            
Correct output: -36.4331405664 | Program output: 13            
Correct output: 49.2855176563  | Program output: 79            
Correct output: 5.2530048743   | Program output: -63           
Correct output: -14.5307262538 | Program output: -36           
Correct output: 174.8425999229 | Program output: 87            
Correct output: 94.2858027683  | Program output: 98            
Correct output: -32.1580651662 | Program output: 62            
Correct output: 34.2563324554  | Program output: 65            
Correct output: -34.3108385906 | Program output: -66           
Correct output: -25.5420796562 | Program output: 49            
Correct output: 40.5609747923  | Program output: 88            
Correct output: -146.3905253753 | Program output: -70           
Correct output: 125.2745939078 | Program output: 67            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction -45} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_mod} {:instruction integer_dup_items} {:instruction integer_fromfloat} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_swap} {:instruction print_float} {:instruction integer_dup} {:instruction float_cos} {:instruction in1} {:instruction integer_sub} {:instruction float_shove} {:instruction float_dup_times} {:instruction integer_dup_items} {:instruction float_max} {:instruction float_pop} {:instruction integer_sub} {:instruction float_stackdepth} {:instruction float_pop} {:instruction integer_rot} {:instruction float_rot} {:instruction float_min} {:instruction integer_pop} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_dec} {:instruction in1} {:instruction float_max} {:instruction -27} {:instruction integer_pop} {:instruction float_yank} {:instruction tagged_302} {:instruction float_pop} {:instruction integer_min} {:instruction float_dec} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_min} {:instruction -78} {:instruction float_flush} {:instruction integer_swap} {:instruction in2} {:instruction float_mod} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_sin} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_mult})
Best program: (float_yankdup -45 integer_dup_times print_float float_mod integer_dup_items integer_fromfloat integer_swap float_stackdepth integer_stackdepth float_rot integer_swap integer_add in2 integer_swap float_dec 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod print_integer integer_swap print_float integer_dup float_cos in1 integer_sub float_shove float_dup_times integer_dup_items float_max float_pop integer_sub float_stackdepth float_pop integer_rot float_rot float_min integer_pop float_cos integer_dec integer_dec in1 float_max -27 integer_pop float_yank tagged_302 float_pop integer_min float_dec float_shove float_frominteger integer_pop integer_min -78 float_flush integer_swap in2 float_mod integer_yank float_dup_times float_stackdepth float_sin integer_yankdup integer_shove float_mult)
Errors: [39.3542 12 64.8438 11 66.2619 12 1.5387 11 68.421 12 4.4494 11 38.7916 12 16.944 12 61.5604 13 11.4717 13 91.3738 13 4.577 11 49.4331 13 29.7145 12 68.253 11 21.4693 11 87.8426 13 3.7142 11 94.1581 12 30.7437 11 31.6892 12 74.5421 12 47.439 13 76.3905 13 58.2746 13]
Total: 1443.2514
Mean: 28.865028
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 6275.323634100003
Median total errors in population: 1876.1198
Error averages by case: (234.18389169999998 12.47 234.9806264000001 12.526 231.0887681000019 10.4 237.3223335 12.168 272.60142000000036 11.697 246.31766459999983 12.416 202.47812109999896 10.629 202.75142299999914 10.587 229.2913372999985 10.582 264.3199535999987 11.415 245.18160980000084 11.385 237.9163430000002 11.18 220.70275739999883 11.012 229.9941583000001 12.383 229.66534939999917 10.112 213.9596817999998 12.45 294.7115561000003 11.428 247.4138039999998 12.259 238.53826830000028 11.25 221.7709182999998 12.104 232.50816159999994 12.696 231.16939309999918 11.183 232.47246320000033 11.994 289.75592270000055 11.864 264.66670780000084 11.371)
Error minima by case: (0.2157 8 0.537 2 0.0 0 1.5387 7 22.115 2 0.7896 8 0.7916 2 0.944 1 0.0 0 11.1657 2 0.3738 2 3.3407 8 2.5669 2 0.1446 7 2.253 1 0.1887 9 3.1574 2 0.2858 7 6.8419 2 0.3245 8 4.6892 9 2.5421 2 1.3489 2 10.3905 2 12.7254 2)
Average genome size in population (length): 60.549
Average program size in population (points): 61.549
Average percent parens in population: 0.021
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.519
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.767
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.767
Total error diversity:				 0.298
Error (vector) diversity:			 0.323
Behavioral diversity:				 0.345
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 2812051
--- Timings ---
Current time: 1529615575380 milliseconds
Total Time:           7.5 seconds
Initialization:       0.1 seconds,  1.5%
Reproduction:         2.3 seconds, 30.9%
Fitness Testing:      4.5 seconds, 60.3%
Report:               0.5 seconds,  7.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Number IO problem report - generation 2
Test total error for best: 61057.514999999905
Test mean error for best: 30.52876
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 89            
Correct output: 24.1561588797  | Program output: 89            
Correct output: 63.2618741651  | Program output: -3            
Correct output: 81.4613344804  | Program output: 83            
Correct output: -116.4209784668 | Program output: -48           
Correct output: -80.5506083936 | Program output: -85           
Correct output: 41.7915986532  | Program output: 3             
Correct output: -6.9439752137  | Program output: 10            
Correct output: 58.5604070006  | Program output: -3            
Correct output: -105.4717093128 | Program output: -94           
Correct output: -65.3737650023 | Program output: 26            
Correct output: 80.422971733   | Program output: 85            
Correct output: -36.4331405664 | Program output: 13            
Correct output: 49.2855176563  | Program output: 79            
Correct output: 5.2530048743   | Program output: -63           
Correct output: -14.5307262538 | Program output: -36           
Correct output: 174.8425999229 | Program output: 87            
Correct output: 94.2858027683  | Program output: 98            
Correct output: -32.1580651662 | Program output: 62            
Correct output: 34.2563324554  | Program output: 65            
Correct output: -34.3108385906 | Program output: -66           
Correct output: -25.5420796562 | Program output: 49            
Correct output: 40.5609747923  | Program output: 88            
Correct output: -146.3905253753 | Program output: -70           
Correct output: 125.2745939078 | Program output: 67            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_mod} {:instruction integer_dup_items} {:instruction integer_fromfloat} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_swap} {:instruction print_float} {:instruction integer_dup} {:instruction in1} {:instruction in1} {:instruction integer_sub} {:instruction float_shove} {:instruction float_dup_times} {:instruction integer_dup_items} {:instruction float_max} {:instruction float_pop} {:instruction integer_sub} {:instruction float_stackdepth} {:instruction float_pop} {:instruction integer_rot} {:instruction float_rot} {:instruction float_min} {:instruction integer_pop} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_dec} {:instruction in1} {:instruction float_max} {:instruction -27} {:instruction integer_pop} {:instruction float_yank} {:instruction tagged_302} {:instruction float_pop} {:instruction integer_min} {:instruction float_dec} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_min} {:instruction -78} {:instruction float_flush} {:instruction integer_swap} {:instruction in2} {:instruction float_mod} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_sin} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_mult})
Best program: (float_yankdup integer_fromfloat integer_dup_times print_float float_mod integer_dup_items integer_fromfloat integer_swap float_stackdepth integer_stackdepth float_rot integer_swap integer_add in2 integer_swap float_dec 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod print_integer integer_swap print_float integer_dup in1 in1 integer_sub float_shove float_dup_times integer_dup_items float_max float_pop integer_sub float_stackdepth float_pop integer_rot float_rot float_min integer_pop float_cos integer_dec integer_dec in1 float_max -27 integer_pop float_yank tagged_302 float_pop integer_min float_dec float_shove float_frominteger integer_pop integer_min -78 float_flush integer_swap in2 float_mod integer_yank float_dup_times float_stackdepth float_sin integer_yankdup integer_shove float_mult)
Errors: [39.3542 12 64.8438 11 66.2619 12 1.5387 11 68.421 12 4.4494 11 38.7916 12 16.944 12 61.5604 13 11.4717 13 91.3738 13 4.577 11 49.4331 13 29.7145 12 68.253 11 21.4693 11 87.8426 13 3.7142 11 94.1581 12 30.7437 11 31.6892 12 74.5421 12 47.439 13 76.3905 13 58.2746 13]
Total: 1443.2514
Mean: 28.865028
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4883.731120199989
Median total errors in population: 1460.2514
Error averages by case: (184.4727237000009 12.267 199.99194270000118 12.349 183.1761042000018 10.544 160.65535260000132 11.934 205.77298970000106 11.275 164.09132260000075 11.826 149.7302671999984 10.765 152.9488102 10.797 179.8284711999982 11.128 176.25907509999772 11.228 209.5414770000008 11.693 162.70790329999963 10.783 177.02932449999795 10.945 176.16104100000084 11.875 199.89461099999846 10.414 162.84879599999854 12.087 220.098866100002 11.24 165.48410669999916 12.19 215.73224560000043 11.541 173.50611560000007 11.963 177.68783639999742 12.385 199.66909459999903 11.339 188.9669956000023 12.049 215.67820790000147 11.805 193.77043970000165 11.605)
Error minima by case: (0.2157 8 4.1562 8 0.0 0 1.5387 8 21.579 2 1.4494 8 3.0 2 5.944 1 0.0 0 11.4717 2 9.2086 2 4.577 7 12.6553 2 0.1446 8 2.2705 1 13.5307 9 44.0047 2 3.7142 8 19.0047 2 1.6327 9 10.6892 9 6.0047 1 7.9373 7 50.3905 2 24.0047 2)
Average genome size in population (length): 55.439
Average program size in population (points): 56.439
Average percent parens in population: 0.022
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.021
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 37
Genome diversity (% unique Plush genomes):	 0.717
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 37
Syntactic diversity (% unique Push programs):	 0.717
Total error diversity:				 0.14
Error (vector) diversity:			 0.15
Behavioral diversity:				 0.163
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 4201001
--- Timings ---
Current time: 1529615578577 milliseconds
Total Time:          10.7 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         3.8 seconds, 35.3%
Fitness Testing:      5.8 seconds, 54.4%
Report:               1.0 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Number IO problem report - generation 3
Test total error for best: 60399.514999999905
Test mean error for best: 30.19976
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 89.0          
Correct output: 24.1561588797  | Program output: 89.0          
Correct output: 63.2618741651  | Program output: -3.0          
Correct output: 81.4613344804  | Program output: 83.0          
Correct output: -116.4209784668 | Program output: -48.0         
Correct output: -80.5506083936 | Program output: -85.0         
Correct output: 41.7915986532  | Program output: 3.0           
Correct output: -6.9439752137  | Program output: 10.0          
Correct output: 58.5604070006  | Program output: -3.0          
Correct output: -105.4717093128 | Program output: -94.0         
Correct output: -65.3737650023 | Program output: 26.0          
Correct output: 80.422971733   | Program output: 85.0          
Correct output: -36.4331405664 | Program output: 13.0          
Correct output: 49.2855176563  | Program output: 79.0          
Correct output: 5.2530048743   | Program output: -63.0         
Correct output: -14.5307262538 | Program output: -36.0         
Correct output: 174.8425999229 | Program output: 87.0          
Correct output: 94.2858027683  | Program output: 98.0          
Correct output: -32.1580651662 | Program output: 62.0          
Correct output: 34.2563324554  | Program output: 65.0          
Correct output: -34.3108385906 | Program output: -66.0         
Correct output: -25.5420796562 | Program output: 49.0          
Correct output: 40.5609747923  | Program output: 88.0          
Correct output: -146.3905253753 | Program output: -70.0         
Correct output: 125.2745939078 | Program output: 67.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_mod} {:instruction integer_dup_items} {:instruction integer_fromfloat} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_swap} {:instruction print_float} {:instruction integer_dup} {:instruction float_cos} {:instruction in1} {:instruction integer_sub} {:instruction float_shove} {:instruction float_dup_times} {:instruction integer_dup_items} {:instruction float_max} {:instruction float_pop} {:instruction integer_sub} {:instruction float_stackdepth} {:instruction float_pop} {:instruction integer_rot} {:instruction float_rot} {:instruction float_min} {:instruction integer_pop} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_dec} {:instruction in1} {:instruction float_max} {:instruction -27} {:instruction integer_pop} {:instruction float_yank} {:instruction tagged_302} {:instruction float_pop} {:instruction integer_min} {:instruction float_dec} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_min} {:instruction -78} {:instruction float_flush} {:instruction integer_swap} {:instruction in2} {:instruction float_mod} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_sin} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_mult})
Best program: (float_yankdup integer_fromfloat integer_dup_times print_float float_mod integer_dup_items integer_fromfloat integer_swap float_stackdepth integer_stackdepth float_rot integer_swap integer_add in2 integer_swap float_dec 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub float_frominteger print_integer integer_swap print_float integer_dup float_cos in1 integer_sub float_shove float_dup_times integer_dup_items float_max float_pop integer_sub float_stackdepth float_pop integer_rot float_rot float_min integer_pop float_cos integer_dec integer_dec in1 float_max -27 integer_pop float_yank tagged_302 float_pop integer_min float_dec float_shove float_frominteger integer_pop integer_min -78 float_flush integer_swap in2 float_mod integer_yank float_dup_times float_stackdepth float_sin integer_yankdup integer_shove float_mult)
Errors: [39.3542 11 64.8438 12 66.2619 11 1.5387 10 68.421 12 4.4494 10 38.7916 12 16.944 12 61.5604 11 11.4717 12 91.3738 11 4.577 10 49.4331 11 29.7145 11 68.253 10 21.4693 11 87.8426 12 3.7142 10 94.1581 11 30.7437 11 31.6892 11 74.5421 12 47.439 11 76.3905 12 58.2746 12]
Total: 1422.2514
Mean: 28.445028
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4019.845488399979
Median total errors in population: 1451.2514
Error averages by case: (143.39717340000112 12.101 164.96137480000147 11.973 163.2222061000013 12.006 110.61560560000078 11.305 175.64263460000143 12.188 119.45516059999873 11.488 125.21934159999802 12.006 116.44720860000189 12.002 160.87733839999896 12.562 128.51138149999807 12.509 184.70388280000094 12.739 113.53982910000099 10.788 146.14989339999786 12.157 134.32648670000097 11.707 172.80661799999788 11.241 130.35927859999816 11.455 186.02534390000253 12.643 113.58123440000112 11.946 188.93923180000047 12.594 134.64577430000176 11.921 141.54891449999732 11.926 171.55112659999972 12.197 150.04031730000062 11.93 183.47164600000036 12.722 158.92648580000164 12.774)
Error minima by case: (13.3542 10 21.1562 10 1.0 1 1.5387 9 41.8386 3 1.4494 8 2.2084 2 4.944 2 1.0 1 11.4717 2 9.2086 2 4.577 9 9.4331 2 3.7145 10 4.253 2 5.5307 9 75.2338 3 3.7142 10 5.1581 2 4.7437 9 7.3108 10 1.4579 2 21.439 10 50.3905 3 48.0498 3)
Average genome size in population (length): 51.607
Average program size in population (points): 52.607
Average percent parens in population: 0.023
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.49025
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 95
Genome diversity (% unique Plush genomes):	 0.652
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 95
Syntactic diversity (% unique Push programs):	 0.652
Total error diversity:				 0.066
Error (vector) diversity:			 0.074
Behavioral diversity:				 0.083
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 5492767
--- Timings ---
Current time: 1529615581567 milliseconds
Total Time:          13.7 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         5.1 seconds, 37.6%
Fitness Testing:      7.0 seconds, 51.1%
Report:               1.4 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Number IO problem report - generation 4
Test total error for best: 60399.514999999905
Test mean error for best: 30.19976
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 89.0          
Correct output: 24.1561588797  | Program output: 89.0          
Correct output: 63.2618741651  | Program output: -3.0          
Correct output: 81.4613344804  | Program output: 83.0          
Correct output: -116.4209784668 | Program output: -48.0         
Correct output: -80.5506083936 | Program output: -85.0         
Correct output: 41.7915986532  | Program output: 3.0           
Correct output: -6.9439752137  | Program output: 10.0          
Correct output: 58.5604070006  | Program output: -3.0          
Correct output: -105.4717093128 | Program output: -94.0         
Correct output: -65.3737650023 | Program output: 26.0          
Correct output: 80.422971733   | Program output: 85.0          
Correct output: -36.4331405664 | Program output: 13.0          
Correct output: 49.2855176563  | Program output: 79.0          
Correct output: 5.2530048743   | Program output: -63.0         
Correct output: -14.5307262538 | Program output: -36.0         
Correct output: 174.8425999229 | Program output: 87.0          
Correct output: 94.2858027683  | Program output: 98.0          
Correct output: -32.1580651662 | Program output: 62.0          
Correct output: 34.2563324554  | Program output: 65.0          
Correct output: -34.3108385906 | Program output: -66.0         
Correct output: -25.5420796562 | Program output: 49.0          
Correct output: 40.5609747923  | Program output: 88.0          
Correct output: -146.3905253753 | Program output: -70.0         
Correct output: 125.2745939078 | Program output: 67.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_mod} {:instruction integer_dup_items} {:instruction integer_fromfloat} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_swap} {:instruction print_float} {:instruction integer_dup} {:instruction float_cos} {:instruction in1} {:instruction integer_sub} {:instruction float_shove} {:instruction float_dup_times} {:instruction integer_dup_items} {:instruction float_max} {:instruction float_pop} {:instruction integer_sub} {:instruction float_stackdepth} {:instruction float_pop} {:instruction integer_rot} {:instruction float_rot} {:instruction float_min} {:instruction integer_pop} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_dec} {:instruction in1} {:instruction float_max} {:instruction -27} {:instruction integer_pop} {:instruction float_yank} {:instruction tagged_302} {:instruction float_pop} {:instruction integer_min} {:instruction float_dec} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_min} {:instruction -78} {:instruction integer_shove} {:instruction integer_swap} {:instruction in2} {:instruction float_mod} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_sin} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_mult})
Best program: (float_yankdup integer_fromfloat integer_dup_times print_float float_mod integer_dup_items integer_fromfloat integer_swap float_stackdepth integer_stackdepth float_rot integer_swap integer_add in2 integer_swap float_dec 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub float_frominteger print_integer integer_swap print_float integer_dup float_cos in1 integer_sub float_shove float_dup_times integer_dup_items float_max float_pop integer_sub float_stackdepth float_pop integer_rot float_rot float_min integer_pop float_cos integer_dec integer_dec in1 float_max -27 integer_pop float_yank tagged_302 float_pop integer_min float_dec float_shove float_frominteger integer_pop integer_min -78 integer_shove integer_swap in2 float_mod integer_yank float_dup_times float_stackdepth float_sin integer_yankdup integer_shove float_mult)
Errors: [39.3542 11 64.8438 12 66.2619 11 1.5387 10 68.421 12 4.4494 10 38.7916 12 16.944 12 61.5604 11 11.4717 12 91.3738 11 4.577 10 49.4331 11 29.7145 11 68.253 10 21.4693 11 87.8426 12 3.7142 10 94.1581 11 30.7437 11 31.6892 11 74.5421 12 47.439 11 76.3905 12 58.2746 12]
Total: 1422.2514
Mean: 28.445028
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3252.108678699982
Median total errors in population: 1445.2514
Error averages by case: (116.11494600000105 12.095 136.6600531000014 11.584 120.40505579999864 11.959 85.50493290000016 11.145 145.9928806000014 12.097 87.51682979999896 11.44 96.25767369999815 11.957 85.76396410000171 11.921 119.69749460000122 12.666 97.47722909999825 12.73 154.09873570000096 12.75 87.70715740000043 10.989 115.966729799998 12.524 106.29969950000081 11.93 135.88749119999792 10.986 95.38887929999848 11.214 160.5013488000026 12.814 85.38680520000096 11.538 157.50900910000047 12.269 107.33202620000193 11.539 105.82814759999798 11.995 143.76575620000145 12.042 118.455390199999 12.381 151.4225190999987 12.738 135.06592370000155 12.799)
Error minima by case: (13.3542 10 18.1562 9 1.0 1 0.4613 9 42.421 3 0.5506 10 1.7916 2 3.944 2 1.0 1 9.4717 2 28.0 2 2.577 9 12.4331 2 3.7145 10 4.9659 2 3.8172 9 45.8426 3 1.7142 10 18.1581 2 4.7437 9 9.3108 9 1.4579 2 21.439 9 50.3905 3 36.2746 3)
Average genome size in population (length): 58.276
Average program size in population (points): 59.276
Average percent parens in population: 0.020
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 6.02775
Median age in population: 6.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 51
Genome diversity (% unique Plush genomes):	 0.731
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 51
Syntactic diversity (% unique Push programs):	 0.731
Total error diversity:				 0.072
Error (vector) diversity:			 0.077
Behavioral diversity:				 0.082
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 6950342
--- Timings ---
Current time: 1529615584621 milliseconds
Total Time:          16.7 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         6.5 seconds, 39.1%
Fitness Testing:      8.2 seconds, 49.2%
Report:               1.8 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Number IO problem report - generation 5
Test total error for best: 60399.514999999905
Test mean error for best: 30.19976
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 89.0          
Correct output: 24.1561588797  | Program output: 89.0          
Correct output: 63.2618741651  | Program output: -3.0          
Correct output: 81.4613344804  | Program output: 83.0          
Correct output: -116.4209784668 | Program output: -48.0         
Correct output: -80.5506083936 | Program output: -85.0         
Correct output: 41.7915986532  | Program output: 3.0           
Correct output: -6.9439752137  | Program output: 10.0          
Correct output: 58.5604070006  | Program output: -3.0          
Correct output: -105.4717093128 | Program output: -94.0         
Correct output: -65.3737650023 | Program output: 26.0          
Correct output: 80.422971733   | Program output: 85.0          
Correct output: -36.4331405664 | Program output: 13.0          
Correct output: 49.2855176563  | Program output: 79.0          
Correct output: 5.2530048743   | Program output: -63.0         
Correct output: -14.5307262538 | Program output: -36.0         
Correct output: 174.8425999229 | Program output: 87.0          
Correct output: 94.2858027683  | Program output: 98.0          
Correct output: -32.1580651662 | Program output: 62.0          
Correct output: 34.2563324554  | Program output: 65.0          
Correct output: -34.3108385906 | Program output: -66.0         
Correct output: -25.5420796562 | Program output: 49.0          
Correct output: 40.5609747923  | Program output: 88.0          
Correct output: -146.3905253753 | Program output: -70.0         
Correct output: 125.2745939078 | Program output: 67.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_mod} {:instruction integer_dup_items} {:instruction integer_fromfloat} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_swap} {:instruction print_float} {:instruction integer_dup} {:instruction float_cos} {:instruction in1} {:instruction integer_sub} {:instruction float_shove} {:instruction float_dup_times} {:instruction integer_dup_items} {:instruction float_max} {:instruction float_pop} {:instruction integer_sub} {:instruction float_stackdepth} {:instruction float_pop} {:instruction integer_rot} {:instruction float_rot} {:instruction float_min} {:instruction tagged_2} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_dec} {:instruction in1} {:instruction float_max} {:instruction -27} {:instruction integer_pop} {:instruction float_yank} {:instruction tagged_302} {:instruction float_pop} {:instruction integer_min} {:instruction float_dec} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_min} {:instruction -78} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_dup} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_sin} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_mult})
Best program: (float_yankdup integer_fromfloat integer_dup_times print_float float_mod integer_dup_items integer_fromfloat integer_swap float_stackdepth integer_stackdepth float_rot integer_swap integer_add in2 integer_swap float_dec 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub float_frominteger print_integer integer_swap print_float integer_dup float_cos in1 integer_sub float_shove float_dup_times integer_dup_items float_max float_pop integer_sub float_stackdepth float_pop integer_rot float_rot float_min tagged_2 float_cos integer_dec integer_dec in1 float_max -27 integer_pop float_yank tagged_302 float_pop integer_min float_dec float_shove float_frominteger integer_pop integer_min -78 float_flush integer_swap integer_sub integer_dup integer_yank float_dup_times float_stackdepth float_sin integer_yankdup integer_shove float_mult)
Errors: [39.3542 11 64.8438 12 66.2619 11 1.5387 10 68.421 12 4.4494 10 38.7916 12 16.944 12 61.5604 11 11.4717 12 91.3738 11 4.577 10 49.4331 11 29.7145 11 68.253 10 21.4693 11 87.8426 12 3.7142 10 94.1581 11 30.7437 11 31.6892 11 74.5421 12 47.439 11 76.3905 12 58.2746 12]
Total: 1422.2514
Mean: 28.445028
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2811.2365281999823
Median total errors in population: 1443.2514
Error averages by case: (96.88683410000105 12.043 117.45694140000138 11.429 107.31472569999855 11.968 66.38417029999917 10.969 125.53130500000141 11.968 66.82496769999923 11.035 82.48226159999805 12.007 67.53330470000148 11.993 104.6635597000013 12.432 75.9001153000002 12.79 140.36490520000098 12.7 68.81647069999929 10.775 98.84338939999886 12.69 89.01614450000079 11.838 117.8301656999979 10.973 76.37818769999862 11.033 144.79531940000263 12.794 68.92056370000064 11.32 142.48423170000046 12.062 88.8663629000006 11.382 87.11060219999949 11.736 126.04929370000235 12.107 102.21355889999901 12.248 133.14866769999765 12.791 117.55747930000098 12.78)
Error minima by case: (37.3542 10 18.1562 10 1.0 1 0.4613 9 20.421 3 0.5506 8 11.7916 2 3.944 4 1.0 1 9.4717 2 4.6262 4 2.577 9 9.3647 4 27.7145 10 4.253 2 3.8172 9 0.8426 3 1.7142 9 1.8419 4 28.2563 9 0.6892 8 19.4579 4 34.561 9 6.3905 3 8.7254 3)
Average genome size in population (length): 63.63
Average program size in population (points): 64.63
Average percent parens in population: 0.017
Minimum age in population: 5.0
Maximum age in population: 9.5
Average age in population: 7.4794375
Median age in population: 7.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.775
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.775
Total error diversity:				 0.066
Error (vector) diversity:			 0.071
Behavioral diversity:				 0.077
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 8541667
--- Timings ---
Current time: 1529615587768 milliseconds
Total Time:          19.8 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         7.9 seconds, 39.8%
Fitness Testing:      9.6 seconds, 48.2%
Report:               2.3 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Number IO problem report - generation 6
Test total error for best: 60399.514999999905
Test mean error for best: 30.19976
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 89.0          
Correct output: 24.1561588797  | Program output: 89.0          
Correct output: 63.2618741651  | Program output: -3.0          
Correct output: 81.4613344804  | Program output: 83.0          
Correct output: -116.4209784668 | Program output: -48.0         
Correct output: -80.5506083936 | Program output: -85.0         
Correct output: 41.7915986532  | Program output: 3.0           
Correct output: -6.9439752137  | Program output: 10.0          
Correct output: 58.5604070006  | Program output: -3.0          
Correct output: -105.4717093128 | Program output: -94.0         
Correct output: -65.3737650023 | Program output: 26.0          
Correct output: 80.422971733   | Program output: 85.0          
Correct output: -36.4331405664 | Program output: 13.0          
Correct output: 49.2855176563  | Program output: 79.0          
Correct output: 5.2530048743   | Program output: -63.0         
Correct output: -14.5307262538 | Program output: -36.0         
Correct output: 174.8425999229 | Program output: 87.0          
Correct output: 94.2858027683  | Program output: 98.0          
Correct output: -32.1580651662 | Program output: 62.0          
Correct output: 34.2563324554  | Program output: 65.0          
Correct output: -34.3108385906 | Program output: -66.0         
Correct output: -25.5420796562 | Program output: 49.0          
Correct output: 40.5609747923  | Program output: 88.0          
Correct output: -146.3905253753 | Program output: -70.0         
Correct output: 125.2745939078 | Program output: 67.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_mod} {:instruction integer_dup_items} {:instruction integer_fromfloat} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_swap} {:instruction print_float} {:instruction integer_dup} {:instruction float_cos} {:instruction in1} {:instruction integer_sub} {:instruction float_shove} {:instruction float_dup_times} {:instruction integer_dup_items} {:instruction float_max} {:instruction float_pop} {:instruction integer_sub} {:instruction float_stackdepth} {:instruction float_pop} {:instruction integer_rot} {:instruction float_rot} {:instruction float_min} {:instruction integer_pop} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_dec} {:instruction in1} {:instruction float_max} {:instruction -27} {:instruction integer_pop} {:instruction float_yank} {:instruction tagged_302} {:instruction float_pop} {:instruction integer_min} {:instruction float_dec} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_min} {:instruction -78} {:instruction integer_shove} {:instruction integer_swap} {:instruction in2} {:instruction float_mod} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_sin} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_mult})
Best program: (float_yankdup integer_fromfloat integer_dup_times print_float float_mod integer_dup_items integer_fromfloat float_yankdup float_stackdepth integer_stackdepth float_rot integer_swap integer_add in2 integer_swap float_dec 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub float_frominteger print_integer integer_swap print_float integer_dup float_cos in1 integer_sub float_shove float_dup_times integer_dup_items float_max float_pop integer_sub float_stackdepth float_pop integer_rot float_rot float_min integer_pop float_cos integer_dec integer_dec in1 float_max -27 integer_pop float_yank tagged_302 float_pop integer_min float_dec float_shove float_frominteger integer_pop integer_min -78 integer_shove integer_swap in2 float_mod integer_yank float_dup_times float_stackdepth float_sin integer_yankdup integer_shove float_mult)
Errors: [39.3542 11 64.8438 12 66.2619 11 1.5387 10 68.421 12 4.4494 10 38.7916 12 16.944 12 61.5604 11 11.4717 12 91.3738 11 4.577 10 49.4331 11 29.7145 11 68.253 10 21.4693 11 87.8426 12 3.7142 10 94.1581 11 30.7437 11 31.6892 11 74.5421 12 47.439 11 76.3905 12 58.2746 12]
Total: 1422.2514
Mean: 28.445028
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3670.273635299985
Median total errors in population: 1441.2514
Error averages by case: (131.87431450000108 11.831 151.6804966000014 11.809 140.92431549999935 11.818 100.54812400000033 10.68 164.25384470000145 11.758 105.35346329999885 10.672 111.60309479999795 11.959 98.15015310000184 11.957 137.5011598000009 11.494 117.71234389999827 12.396 172.086163200001 12.141 103.8472702000007 10.298 130.23107669999814 12.142 123.56085390000094 11.475 154.4287347999979 10.805 113.61676179999839 10.8 176.31346830000263 12.354 104.23435810000106 11.426 175.51874420000044 11.894 122.99193780000199 11.641 125.58095979999793 11.188 158.55095500000064 12.134 137.89747789999927 11.102 173.02391340000008 12.408 148.19365000000147 12.414)
Error minima by case: (32.7504 9 7.2608 9 1.0 1 0.4613 9 45.421 3 0.5506 8 5.0 2 0.056 2 1.0 1 9.4717 2 28.0 2 2.577 8 15.0 2 27.7145 10 4.253 2 4.5307 8 10.1574 3 1.7142 8 22.1581 2 17.361 9 10.6892 9 18.5421 2 23.6656 9 67.3905 3 36.2746 2)
Average genome size in population (length): 60.341
Average program size in population (points): 61.341
Average percent parens in population: 0.018
Minimum age in population: 6.375
Maximum age in population: 10.96875
Average age in population: 8.99834375
Median age in population: 9.03125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.732
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.732
Total error diversity:				 0.086
Error (vector) diversity:			 0.091
Behavioral diversity:				 0.095
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 10051642
--- Timings ---
Current time: 1529615590910 milliseconds
Total Time:          23.0 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         9.3 seconds, 40.2%
Fitness Testing:     10.9 seconds, 47.5%
Report:               2.7 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Number IO problem report - generation 7
Test total error for best: 60451.601799999895
Test mean error for best: 30.22580
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 87.0          
Correct output: 24.1561588797  | Program output: 87.0          
Correct output: 63.2618741651  | Program output: -5.0          
Correct output: 81.4613344804  | Program output: 81.0          
Correct output: -116.4209784668 | Program output: -50.0         
Correct output: -80.5506083936 | Program output: -87.0         
Correct output: 41.7915986532  | Program output: 1.0           
Correct output: -6.9439752137  | Program output: 8.0           
Correct output: 58.5604070006  | Program output: -5.0          
Correct output: -105.4717093128 | Program output: -96.0         
Correct output: -65.3737650023 | Program output: 24.0          
Correct output: 80.422971733   | Program output: 83.0          
Correct output: -36.4331405664 | Program output: 11.0          
Correct output: 49.2855176563  | Program output: 77.0          
Correct output: 5.2530048743   | Program output: -65.0         
Correct output: -14.5307262538 | Program output: -38.0         
Correct output: 174.8425999229 | Program output: 85.0          
Correct output: 94.2858027683  | Program output: 96.0          
Correct output: -32.1580651662 | Program output: 60.0          
Correct output: 34.2563324554  | Program output: 63.0          
Correct output: -34.3108385906 | Program output: -68.0         
Correct output: -25.5420796562 | Program output: 47.0          
Correct output: 40.5609747923  | Program output: 86.0          
Correct output: -146.3905253753 | Program output: -72.0         
Correct output: 125.2745939078 | Program output: 65.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_mod} {:instruction integer_dup_items} {:instruction integer_fromfloat} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_swap} {:instruction print_float} {:instruction integer_dup} {:instruction float_cos} {:instruction in1} {:instruction integer_sub} {:instruction float_shove} {:instruction float_dup_times} {:instruction integer_dup_items} {:instruction float_max} {:instruction float_pop} {:instruction integer_sub} {:instruction float_stackdepth} {:instruction float_pop} {:instruction integer_rot} {:instruction float_rot} {:instruction float_min} {:instruction print_float} {:instruction float_cos} {:instruction integer_dec} {:instruction float_stackdepth} {:instruction in1} {:instruction float_max} {:instruction -27} {:instruction integer_pop} {:instruction float_yank} {:instruction tagged_302} {:instruction float_pop} {:instruction integer_min} {:instruction float_dec} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_min} {:instruction -78} {:instruction float_flush} {:instruction integer_swap} {:instruction in2} {:instruction float_mod} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_sin} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_mult})
Best program: (float_yankdup float_yankdup integer_fromfloat integer_dup_times print_float float_mod integer_dup_items integer_fromfloat integer_swap float_stackdepth integer_stackdepth float_rot integer_swap integer_add in2 integer_swap float_dec 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mult float_pop float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub float_frominteger print_integer integer_swap print_float integer_dup float_cos in1 integer_sub float_shove float_dup_times integer_dup_items float_max float_pop integer_sub float_stackdepth float_pop integer_rot float_rot float_min print_float float_cos integer_dec float_stackdepth in1 float_max -27 integer_pop float_yank tagged_302 float_pop integer_min float_dec float_shove float_frominteger integer_pop integer_min -78 float_flush integer_swap in2 float_mod integer_yank float_dup_times float_stackdepth float_sin integer_yankdup integer_shove float_mult)
Errors: [37.3542 12 62.8438 11 68.2619 12 0.4613 9 66.421 12 6.4494 10 40.7916 11 14.944 12 63.5604 11 9.4717 12 89.3738 12 2.577 10 47.4331 12 27.7145 12 70.253 10 23.4693 11 89.8426 12 1.7142 10 92.1581 12 28.7437 11 33.6892 11 72.5421 12 45.439 11 74.3905 12 60.2746 11]
Total: 1411.174
Mean: 28.22348
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3694.663053499988
Median total errors in population: 1422.7514
Error averages by case: (132.03755840000102 11.477 151.78618680000127 11.892 143.32311289999967 11.379 102.15935960000073 10.551 167.87328080000128 11.998 112.89101359999893 10.541 104.53949249999816 11.844 91.58184580000166 11.914 139.00243480000043 11.2 122.29719519999797 12.202 170.63862700000095 11.595 104.69076640000102 10.206 122.80864979999804 11.571 123.42602930000076 11.435 161.16155919999804 10.341 121.49719349999847 11.091 178.68036560000257 12.213 105.53017190000091 10.674 175.31057910000044 11.398 122.62251080000206 11.366 132.41694429999768 11.354 157.0140519000006 12.017 138.18146269999974 11.226 177.25714460000037 12.204 150.03751700000154 12.209)
Error minima by case: (2.9058 10 18.1562 9 16.5219 3 0.4613 9 22.421 3 2.4494 8 0.2084 3 2.944 3 11.8204 3 7.4717 3 13.3738 4 0.577 8 10.4331 4 2.5455 10 4.253 4 4.5307 9 0.8426 3 0.2858 9 14.8419 4 12.4837 9 10.6892 8 15.5421 4 6.179 8 8.3905 3 8.7254 3)
Average genome size in population (length): 69.297
Average program size in population (points): 70.297
Average percent parens in population: 0.015
Minimum age in population: 8.0
Maximum age in population: 12.609375
Average age in population: 10.55971875
Median age in population: 10.609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 56
Genome diversity (% unique Plush genomes):	 0.762
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 56
Syntactic diversity (% unique Push programs):	 0.762
Total error diversity:				 0.093
Error (vector) diversity:			 0.098
Behavioral diversity:				 0.105
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 11784642
--- Timings ---
Current time: 1529615594226 milliseconds
Total Time:          26.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        10.6 seconds, 40.4%
Fitness Testing:     12.4 seconds, 47.3%
Report:               3.1 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Number IO problem report - generation 8
Test total error for best: 59392.18480000002
Test mean error for best: 29.69609
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 91.0279       
Correct output: 24.1561588797  | Program output: 91.0279       
Correct output: 63.2618741651  | Program output: -1.0187       
Correct output: 81.4613344804  | Program output: 85.0273       
Correct output: -116.4209784668 | Program output: -46.0142      
Correct output: -80.5506083936 | Program output: -83.0105      
Correct output: 41.7915986532  | Program output: 5.0193        
Correct output: -6.9439752137  | Program output: 12.0200       
Correct output: 58.5604070006  | Program output: -1.0187       
Correct output: -105.4717093128 | Program output: -92.096       
Correct output: -65.3737650023 | Program output: 28.0216       
Correct output: 80.422971733   | Program output: 87.0275       
Correct output: -36.4331405664 | Program output: 15.0203       
Correct output: 49.2855176563  | Program output: 81.0269       
Correct output: 5.2530048743   | Program output: -61.0127      
Correct output: -14.5307262538 | Program output: -34.0154      
Correct output: 174.8425999229 | Program output: 89.0277       
Correct output: 94.2858027683  | Program output: 100.0288      
Correct output: -32.1580651662 | Program output: 64.0252       
Correct output: 34.2563324554  | Program output: 67.0255       
Correct output: -34.3108385906 | Program output: -64.0124      
Correct output: -25.5420796562 | Program output: 51.0239       
Correct output: 40.5609747923  | Program output: 90.0278       
Correct output: -146.3905253753 | Program output: -68.0120      
Correct output: 125.2745939078 | Program output: 69.0257       
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_swap} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_yank} {:instruction float_mult} {:instruction integer_mod} {:instruction float_swap} {:instruction integer_rot} {:instruction integer_sub} {:instruction float_rot} {:instruction integer_inc} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_max} {:instruction float_frominteger} {:instruction -21} {:instruction float_sin} {:instruction integer_pop} {:instruction integer_yank} {:instruction float_div} {:instruction in2} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_flush} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_add} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_swap} {:instruction print_float} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_min} {:instruction -79})
Best program: (integer_swap integer_dup_times integer_add integer_yank float_mult integer_mod float_swap integer_rot integer_sub float_rot integer_inc integer_yankdup integer_dup_times float_dup_items float_max float_frominteger -21 float_sin integer_pop integer_yank float_div in2 integer_mult integer_shove float_frominteger in2 integer_sub integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth float_rot float_flush 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_rot integer_add tagged_920 integer_sub integer_mod print_integer integer_swap print_float integer_dup float_stackdepth float_yank float_max float_div float_frominteger integer_pop integer_min -79)
Errors: [41.3821 11 66.8717 10 64.2806 9 3.566 10 70.4068 10 2.4599 9 36.7723 9 18.964 11 59.5791 10 13.3757 11 93.3954 12 6.6045 8 51.4534 12 31.7414 10 66.2657 10 19.4847 9 85.8149 11 5.743 10 96.1833 10 32.7692 9 29.7016 10 76.566 11 49.4668 9 78.3785 11 56.2489 11]
Total: 1410.4755000000002
Mean: 28.20951
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3794.257876799985
Median total errors in population: 1422.2514
Error averages by case: (135.61609170000108 11.276 155.39602130000148 11.962 152.8272060000007 11.171 105.70864150000044 10.206 171.31852600000147 12.024 117.02958829999878 10.298 107.54016649999801 11.897 94.33500900000195 11.902 148.57234849999992 11.049 124.6802399999978 12.053 174.41297560000095 11.202 108.2429825000006 10.152 129.04848099999768 11.191 127.17367950000096 11.223 164.5347964999979 10.138 125.70471519999829 11.094 182.14199730000266 12.116 109.52088520000112 10.295 179.38150900000048 11.141 126.63033170000244 11.228 136.11532539999737 11.097 160.31264460000054 11.915 141.79189599999984 11.085 180.34639200000044 12.06 154.15442650000185 11.946)
Error minima by case: (35.3542 11 12.1562 10 20.2619 5 0.4613 9 64.421 6 2.4494 8 0.7916 4 1.056 6 15.5604 5 7.4717 6 37.3738 6 0.577 8 13.4331 6 25.7145 10 4.253 7 8.4693 9 0.8426 5 0.2858 9 9.1581 6 22.2563 9 11.3108 9 2.5421 5 28.561 8 72.3905 7 8.7254 5)
Average genome size in population (length): 71.302
Average program size in population (points): 72.302
Average percent parens in population: 0.014
Minimum age in population: 9.75
Maximum age in population: 14.0859375
Average age in population: 12.0588359375
Median age in population: 12.1015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 41
Genome diversity (% unique Plush genomes):	 0.819
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.819
Total error diversity:				 0.072
Error (vector) diversity:			 0.08
Behavioral diversity:				 0.084
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 13567367
--- Timings ---
Current time: 1529615597485 milliseconds
Total Time:          29.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        12.0 seconds, 40.4%
Fitness Testing:     13.9 seconds, 46.9%
Report:               3.6 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Number IO problem report - generation 9
Test total error for best: 59428.36060000003
Test mean error for best: 29.71418
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 89.0279       
Correct output: 24.1561588797  | Program output: 89.0279       
Correct output: 63.2618741651  | Program output: -3.0187       
Correct output: 81.4613344804  | Program output: 83.0273       
Correct output: -116.4209784668 | Program output: -48.0142      
Correct output: -80.5506083936 | Program output: -85.0105      
Correct output: 41.7915986532  | Program output: 3.0193        
Correct output: -6.9439752137  | Program output: 10.0200       
Correct output: 58.5604070006  | Program output: -3.0187       
Correct output: -105.4717093128 | Program output: -94.096       
Correct output: -65.3737650023 | Program output: 26.0216       
Correct output: 80.422971733   | Program output: 85.0275       
Correct output: -36.4331405664 | Program output: 13.0203       
Correct output: 49.2855176563  | Program output: 79.0269       
Correct output: 5.2530048743   | Program output: -63.0127      
Correct output: -14.5307262538 | Program output: -36.0154      
Correct output: 174.8425999229 | Program output: 87.0277       
Correct output: 94.2858027683  | Program output: 98.0288       
Correct output: -32.1580651662 | Program output: 62.0252       
Correct output: 34.2563324554  | Program output: 65.0255       
Correct output: -34.3108385906 | Program output: -66.0124      
Correct output: -25.5420796562 | Program output: 49.0239       
Correct output: 40.5609747923  | Program output: 88.0278       
Correct output: -146.3905253753 | Program output: -70.0120      
Correct output: 125.2745939078 | Program output: 67.0257       
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_mod} {:instruction integer_dup_items} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_flush} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_add} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_swap} {:instruction print_float} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_min} {:instruction -79})
Best program: (float_yankdup integer_fromfloat integer_dup_times print_float float_mod integer_dup_items integer_fromfloat integer_rot float_stackdepth integer_stackdepth float_rot integer_swap integer_add in2 integer_swap float_dec 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_shove float_frominteger in2 integer_sub integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth float_rot float_flush 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_rot integer_add tagged_920 integer_sub integer_mod print_integer integer_swap print_float integer_dup float_stackdepth float_yank float_max float_div float_frominteger integer_pop integer_min -79)
Errors: [39.3821 10 64.8717 10 66.2806 8 1.566 10 68.4068 11 4.4599 9 38.7723 9 16.964 11 61.5791 10 11.3757 11 91.3954 11 4.6045 8 49.4534 11 29.7414 10 68.2657 9 21.4847 10 87.8149 11 3.743 8 94.1833 9 30.7692 9 31.7016 11 74.566 11 47.4668 10 76.3785 11 58.2489 11]
Total: 1392.4755000000002
Mean: 27.84951
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3999.6260291999856
Median total errors in population: 1422.2514
Error averages by case: (143.63782470000095 11.367 163.25900510000127 11.843 161.4621508000007 11.199 113.79964030000066 10.215 178.94232340000133 11.972 127.90598369999893 10.27 116.82935089999808 11.786 104.63155750000182 11.882 157.26371129999936 11.008 135.62146149999813 11.953 180.37593030000096 11.24 116.37491990000098 10.117 137.52805759999814 11.314 134.85249710000085 11.296 174.07916709999785 10.194 134.32203009999847 11.054 188.3624013000025 12.169 117.50939120000105 10.344 186.02248610000044 11.227 133.7378369000015 11.205 146.0184433999975 11.064 166.77881950000005 11.916 149.71930530000034 11.052 188.6548393000004 12.04 160.28789490000167 11.922)
Error minima by case: (2.9058 9 12.1562 9 1.0 2 0.4613 8 19.421 4 0.5506 8 0.2084 3 1.056 3 1.0 2 7.4717 3 28.0 3 0.577 7 15.0 3 2.5455 9 3.253 3 4.5307 9 0.8426 4 0.2858 8 22.1581 3 12.4837 9 24.3108 9 15.5421 3 6.179 8 5.3905 4 8.7254 4)
Average genome size in population (length): 71.065
Average program size in population (points): 72.065
Average percent parens in population: 0.014
Minimum age in population: 11.234375
Maximum age in population: 15.4375
Average age in population: 13.64216015625
Median age in population: 13.697265625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.872
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.872
Total error diversity:				 0.104
Error (vector) diversity:			 0.113
Behavioral diversity:				 0.12
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 15344242
--- Timings ---
Current time: 1529615600725 milliseconds
Total Time:          32.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        13.3 seconds, 40.6%
Fitness Testing:     15.4 seconds, 46.8%
Report:               4.0 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Number IO problem report - generation 10
Test total error for best: 59428.36060000003
Test mean error for best: 29.71418
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 89.0279       
Correct output: 24.1561588797  | Program output: 89.0279       
Correct output: 63.2618741651  | Program output: -3.0187       
Correct output: 81.4613344804  | Program output: 83.0273       
Correct output: -116.4209784668 | Program output: -48.0142      
Correct output: -80.5506083936 | Program output: -85.0105      
Correct output: 41.7915986532  | Program output: 3.0193        
Correct output: -6.9439752137  | Program output: 10.0200       
Correct output: 58.5604070006  | Program output: -3.0187       
Correct output: -105.4717093128 | Program output: -94.096       
Correct output: -65.3737650023 | Program output: 26.0216       
Correct output: 80.422971733   | Program output: 85.0275       
Correct output: -36.4331405664 | Program output: 13.0203       
Correct output: 49.2855176563  | Program output: 79.0269       
Correct output: 5.2530048743   | Program output: -63.0127      
Correct output: -14.5307262538 | Program output: -36.0154      
Correct output: 174.8425999229 | Program output: 87.0277       
Correct output: 94.2858027683  | Program output: 98.0288       
Correct output: -32.1580651662 | Program output: 62.0252       
Correct output: 34.2563324554  | Program output: 65.0255       
Correct output: -34.3108385906 | Program output: -66.0124      
Correct output: -25.5420796562 | Program output: 49.0239       
Correct output: 40.5609747923  | Program output: 88.0278       
Correct output: -146.3905253753 | Program output: -70.0120      
Correct output: 125.2745939078 | Program output: 67.0257       
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_mod} {:instruction integer_dup_items} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_flush} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_add} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_dec} {:instruction in1} {:instruction float_max} {:instruction -27} {:instruction integer_pop} {:instruction float_yank} {:instruction tagged_302} {:instruction float_pop} {:instruction integer_min} {:instruction float_dec} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_min} {:instruction -78} {:instruction float_flush} {:instruction integer_swap} {:instruction float_div} {:instruction float_mod} {:instruction in1} {:instruction integer_inc} {:instruction tag_integer_969} {:instruction -78} {:instruction float_flush} {:instruction integer_swap} {:instruction in2} {:instruction float_mod} {:instruction integer_yank} {:instruction integer_inc} {:instruction float_frominteger} {:instruction float_sin} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_dec})
Best program: (float_yankdup integer_fromfloat integer_dup_times print_float float_mod integer_dup_items integer_fromfloat integer_rot float_stackdepth integer_stackdepth float_rot integer_swap integer_add in2 integer_swap float_dec 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_shove float_frominteger in2 integer_sub integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth float_rot float_flush 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_rot integer_add tagged_920 integer_sub integer_mod print_integer float_cos integer_dec integer_dec in1 float_max -27 integer_pop float_yank tagged_302 float_pop integer_min float_dec float_shove float_frominteger integer_pop integer_min -78 float_flush integer_swap float_div float_mod in1 integer_inc tag_integer_969 -78 float_flush integer_swap in2 float_mod integer_yank integer_inc float_frominteger float_sin integer_yankdup integer_shove float_dec)
Errors: [39.3821 10 64.8717 10 66.2806 8 1.566 10 68.4068 11 4.4599 9 38.7723 9 16.964 11 61.5791 10 11.3757 11 91.3954 11 4.6045 8 49.4534 11 29.7414 10 68.2657 9 21.4847 10 87.8149 11 3.743 8 94.1833 9 30.7692 9 31.7016 11 74.566 11 47.4668 10 76.3785 11 58.2489 11]
Total: 1392.4755000000002
Mean: 27.84951
Genome size: 87
Size: 88
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4075.4112731999876
Median total errors in population: 1422.2514
Error averages by case: (150.8205074000009 11.613 169.5551369000011 11.503 152.65219459999975 11.233 122.38978680000103 10.247 176.5957254000009 11.797 125.59739329999921 10.176 123.49092319999815 11.423 109.09471360000171 11.724 148.52427760000032 10.873 133.42121969999812 11.746 185.79661880000083 11.343 124.74837250000125 9.957 142.86666479999798 11.588 142.46315530000066 11.476 168.97127729999823 10.324 129.27263789999884 10.9 196.4304765000019 12.255 129.74775520000102 10.411 191.8456422000006 11.42 141.44122250000143 11.131 142.38262809999813 10.927 174.3449117000001 11.799 156.48984059999998 10.886 187.1314646000004 11.966 168.8427267000019 11.776)
Error minima by case: (35.3542 9 12.1562 9 1.0 1 0.3763 8 20.421 5 1.4494 8 0.6966 2 0.944 4 1.0 1 7.4717 4 6.3738 4 0.577 7 3.4331 4 25.7145 9 3.253 2 5.4693 7 0.1574 3 0.2858 8 9.1581 4 22.2563 9 11.3108 8 2.5421 4 28.561 8 6.3905 5 8.7254 3)
Average genome size in population (length): 70.549
Average program size in population (points): 71.549
Average percent parens in population: 0.014
Minimum age in population: 13.1484375
Maximum age in population: 17.056640625
Average age in population: 15.2266484375
Median age in population: 15.2626953125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.831
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.831
Total error diversity:				 0.149
Error (vector) diversity:			 0.162
Behavioral diversity:				 0.171
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 17108042
--- Timings ---
Current time: 1529615604157 milliseconds
Total Time:          36.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        14.7 seconds, 40.7%
Fitness Testing:     16.9 seconds, 46.8%
Report:               4.4 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Number IO problem report - generation 11
Test total error for best: 59428.36060000003
Test mean error for best: 29.71418
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 89.0279       
Correct output: 24.1561588797  | Program output: 89.0279       
Correct output: 63.2618741651  | Program output: -3.0187       
Correct output: 81.4613344804  | Program output: 83.0273       
Correct output: -116.4209784668 | Program output: -48.0142      
Correct output: -80.5506083936 | Program output: -85.0105      
Correct output: 41.7915986532  | Program output: 3.0193        
Correct output: -6.9439752137  | Program output: 10.0200       
Correct output: 58.5604070006  | Program output: -3.0187       
Correct output: -105.4717093128 | Program output: -94.096       
Correct output: -65.3737650023 | Program output: 26.0216       
Correct output: 80.422971733   | Program output: 85.0275       
Correct output: -36.4331405664 | Program output: 13.0203       
Correct output: 49.2855176563  | Program output: 79.0269       
Correct output: 5.2530048743   | Program output: -63.0127      
Correct output: -14.5307262538 | Program output: -36.0154      
Correct output: 174.8425999229 | Program output: 87.0277       
Correct output: 94.2858027683  | Program output: 98.0288       
Correct output: -32.1580651662 | Program output: 62.0252       
Correct output: 34.2563324554  | Program output: 65.0255       
Correct output: -34.3108385906 | Program output: -66.0124      
Correct output: -25.5420796562 | Program output: 49.0239       
Correct output: 40.5609747923  | Program output: 88.0278       
Correct output: -146.3905253753 | Program output: -70.0120      
Correct output: 125.2745939078 | Program output: 67.0257       
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_mod} {:instruction integer_dup_items} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_flush} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_add} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_swap} {:instruction print_float} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_min} {:instruction -78} {:instruction float_flush} {:instruction integer_swap} {:instruction float_mult} {:instruction float_mod} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_sin} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_yank})
Best program: (float_yankdup integer_fromfloat integer_dup_times print_float float_mod integer_dup_items integer_fromfloat integer_rot float_stackdepth integer_stackdepth float_rot integer_swap integer_add in2 integer_swap float_dec 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_mult integer_stackdepth tagged_920 integer_sub integer_shove float_frominteger in2 integer_sub integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth float_rot float_flush 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_rot integer_add tagged_920 integer_sub integer_mod print_integer integer_swap print_float integer_dup float_stackdepth float_yank float_max float_div float_frominteger integer_pop integer_pop integer_min -78 float_flush integer_swap float_mult float_mod integer_yank float_dup_times float_stackdepth float_sin integer_yankdup integer_shove float_yank)
Errors: [39.3821 10 64.8717 10 66.2806 8 1.566 10 68.4068 11 4.4599 9 38.7723 9 16.964 11 61.5791 10 11.3757 11 91.3954 11 4.6045 8 49.4534 11 29.7414 10 68.2657 9 21.4847 10 87.8149 11 3.743 8 94.1833 9 30.7692 9 31.7016 11 74.566 11 47.4668 10 76.3785 11 58.2489 11]
Total: 1392.4755000000002
Mean: 27.84951
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3883.54374359999
Median total errors in population: 1413.4755000000002
Error averages by case: (139.1922091000008 11.64 157.94875270000088 11.094 150.5824969999996 10.918 110.93641530000036 10.015 175.85550010000017 11.341 123.1690589999998 9.9 116.26515319999837 10.685 103.26847270000168 11.493 146.45928160000054 10.701 132.04526349999875 11.593 177.1430271000007 11.654 113.13278240000112 9.547 134.05483689999826 11.76 130.86542600000016 11.355 166.34117669999884 10.184 128.20229669999935 10.494 185.27052690000102 11.98 116.1062404000008 10.398 180.83008720000097 11.319 129.88677630000078 10.774 139.83297589999876 10.657 163.8181361000003 11.596 145.00560309999946 10.445 185.66556390000076 11.728 156.97568380000158 11.419)
Error minima by case: (14.6458 10 10.8438 9 1.0 1 0.3663 8 20.372 3 2.4494 8 0.2184 2 0.6776 2 1.0 1 7.4717 2 2.3581 2 0.577 7 12.4331 2 14.2855 8 4.2279 2 6.9092 8 0.7536 3 0.2858 8 8.1581 2 0.7437 9 2.3108 8 1.5421 2 5.561 8 6.3635 3 8.7944 3)
Average genome size in population (length): 68.805
Average program size in population (points): 69.805
Average percent parens in population: 0.015
Minimum age in population: 14.5
Maximum age in population: 18.5224609375
Average age in population: 16.6948974609375
Median age in population: 16.72216796875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.775
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.775
Total error diversity:				 0.161
Error (vector) diversity:			 0.186
Behavioral diversity:				 0.201
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 18828242
--- Timings ---
Current time: 1529615607434 milliseconds
Total Time:          39.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        16.0 seconds, 40.6%
Fitness Testing:     18.4 seconds, 46.5%
Report:               5.0 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Number IO problem report - generation 12
Test total error for best: 59834.49959999991
Test mean error for best: 29.91725
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 86.091        
Correct output: 24.1561588797  | Program output: 86.091        
Correct output: 63.2618741651  | Program output: -6.094        
Correct output: 81.4613344804  | Program output: 80.085        
Correct output: -116.4209784668 | Program output: -51.049       
Correct output: -80.5506083936 | Program output: -88.012       
Correct output: 41.7915986532  | Program output: 0.05          
Correct output: -6.9439752137  | Program output: 7.012         
Correct output: 58.5604070006  | Program output: -6.094        
Correct output: -105.4717093128 | Program output: -97.03        
Correct output: -65.3737650023 | Program output: 23.028        
Correct output: 80.422971733   | Program output: 82.087        
Correct output: -36.4331405664 | Program output: 10.015        
Correct output: 49.2855176563  | Program output: 76.081        
Correct output: 5.2530048743   | Program output: -66.034       
Correct output: -14.5307262538 | Program output: -39.061       
Correct output: 174.8425999229 | Program output: 84.089        
Correct output: 94.2858027683  | Program output: 95.05         
Correct output: -32.1580651662 | Program output: 59.064        
Correct output: 34.2563324554  | Program output: 62.067        
Correct output: -34.3108385906 | Program output: -69.031       
Correct output: -25.5420796562 | Program output: 46.051        
Correct output: 40.5609747923  | Program output: 85.090        
Correct output: -146.3905253753 | Program output: -73.027       
Correct output: 125.2745939078 | Program output: 64.069        
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_mod} {:instruction integer_dup_items} {:instruction integer_fromfloat} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_inc} {:instruction float_frominteger} {:instruction in2} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_flush} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_swap} {:instruction print_float} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_mod} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_sin} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_mult})
Best program: (float_yankdup integer_fromfloat integer_dup_times print_float float_mod integer_dup_items integer_fromfloat integer_swap float_stackdepth integer_stackdepth float_rot integer_swap integer_add in2 integer_swap float_dec 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_rot 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod float_inc float_frominteger in2 integer_sub integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth float_rot float_flush float_frominteger float_pop integer_mod print_integer integer_swap print_float integer_dup float_stackdepth float_mod integer_yank float_dup_times float_stackdepth float_sin integer_yankdup integer_shove float_mult)
Errors: [36.4452 12 61.9348 11 69.3559 11 1.3763 10 65.372 10 7.4614 10 41.7416 11 13.956 11 64.6544 11 8.4417 11 88.4018 11 1.664 9 46.4481 11 26.7955 10 71.287 10 24.5303 10 90.7536 11 0.7642 10 91.2221 11 27.8107 11 34.7202 10 71.5931 11 44.529 10 73.3635 10 61.2056 12]
Total: 1390.828
Mean: 27.81656
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3843.0568369999924
Median total errors in population: 1410.4755000000002
Error averages by case: (135.39557940000125 11.378 155.2009987000011 10.831 149.13044899999937 10.523 105.86531760000057 10.072 177.71154049999996 11.099 127.38499580000003 9.807 112.80203519999834 10.211 100.4180185000017 11.279 145.11536820000086 10.728 132.8316734999993 11.534 174.59225210000074 11.787 108.03978300000077 9.227 130.68003029999863 11.757 127.35440030000014 10.908 171.32634339999902 10.119 131.1195325999996 10.212 179.97339860000042 11.666 111.53054270000113 10.176 179.3610868000011 10.926 126.73322610000005 10.395 144.50176359999918 10.583 162.45649080000064 11.361 141.72943169999905 10.18 189.46341960000035 11.511 152.64515900000177 11.424)
Error minima by case: (36.3542 9 23.0592 9 29.7381 5 0.3663 8 20.421 7 2.4494 8 8.7487 5 0.056 6 34.4396 5 8.4417 6 20.6262 6 1.577 7 10.5669 6 26.7145 8 3.783 7 7.5307 7 0.8426 6 0.2858 8 8.1581 6 27.7437 8 10.3108 8 1.5421 6 38.1542 8 6.3905 7 3.2746 5)
Average genome size in population (length): 67.461
Average program size in population (points): 68.461
Average percent parens in population: 0.015
Minimum age in population: 15.5
Maximum age in population: 19.955078125
Average age in population: 18.10561279296875
Median age in population: 18.13818359375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.774
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.774
Total error diversity:				 0.193
Error (vector) diversity:			 0.212
Behavioral diversity:				 0.222
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 20515167
--- Timings ---
Current time: 1529615610717 milliseconds
Total Time:          42.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        17.4 seconds, 40.6%
Fitness Testing:     19.9 seconds, 46.4%
Report:               5.4 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Number IO problem report - generation 13
Test total error for best: 59570.77120000004
Test mean error for best: 29.78539
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 86.0279       
Correct output: 24.1561588797  | Program output: 86.0279       
Correct output: 63.2618741651  | Program output: -6.0187       
Correct output: 81.4613344804  | Program output: 80.0273       
Correct output: -116.4209784668 | Program output: -51.0142      
Correct output: -80.5506083936 | Program output: -88.0105      
Correct output: 41.7915986532  | Program output: 0.0193        
Correct output: -6.9439752137  | Program output: 7.0200        
Correct output: 58.5604070006  | Program output: -6.0187       
Correct output: -105.4717093128 | Program output: -97.096       
Correct output: -65.3737650023 | Program output: 23.0216       
Correct output: 80.422971733   | Program output: 82.0275       
Correct output: -36.4331405664 | Program output: 10.0203       
Correct output: 49.2855176563  | Program output: 76.0269       
Correct output: 5.2530048743   | Program output: -66.0127      
Correct output: -14.5307262538 | Program output: -39.0154      
Correct output: 174.8425999229 | Program output: 84.0277       
Correct output: 94.2858027683  | Program output: 95.0288       
Correct output: -32.1580651662 | Program output: 59.0252       
Correct output: 34.2563324554  | Program output: 62.0255       
Correct output: -34.3108385906 | Program output: -69.0124      
Correct output: -25.5420796562 | Program output: 46.0239       
Correct output: 40.5609747923  | Program output: 85.0278       
Correct output: -146.3905253753 | Program output: -73.0120      
Correct output: 125.2745939078 | Program output: 64.0257       
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_mod} {:instruction integer_dup_items} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_flush} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_add} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_min} {:instruction -78} {:instruction float_flush} {:instruction integer_swap} {:instruction float_mult} {:instruction float_mod} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_stackdepth})
Best program: (float_yankdup integer_fromfloat integer_dup_times print_float float_mod integer_dup_items integer_fromfloat integer_rot float_stackdepth integer_stackdepth float_rot integer_swap integer_add in2 integer_swap float_dec 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_shove float_frominteger in2 integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_shove float_frominteger in2 integer_sub integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth float_rot float_flush 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_rot integer_add tagged_920 integer_sub integer_mod print_integer integer_swap integer_add integer_dup float_stackdepth float_yank float_max float_div float_frominteger integer_pop integer_pop integer_min -78 float_flush integer_swap float_mult float_mod integer_yank float_dup_times float_stackdepth)
Errors: [36.3821 11 61.8717 10 69.2806 9 1.434 10 65.4068 10 7.4599 9 41.7723 9 13.964 11 64.5791 10 8.3757 11 88.3954 12 1.6045 8 46.4534 12 26.7414 11 71.2657 10 24.4847 10 90.8149 11 0.743 8 91.1833 10 27.7692 9 34.7016 11 71.566 11 44.4668 10 73.3785 11 61.2489 11]
Total: 1380.3435000000002
Mean: 27.60687
Genome size: 90
Size: 91
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3489.5812112000003
Median total errors in population: 1404.4864
Error averages by case: (119.83420410000103 11.07 139.4809395000012 10.831 144.15356309999922 10.197 90.39179070000068 10.23 165.49358020000003 11.047 113.59009290000014 9.647 99.18651529999887 9.939 81.76562870000065 10.872 140.03522680000074 10.765 119.61903069999909 11.19 158.33659280000043 11.407 92.61744750000081 9.051 113.03813019999889 11.388 111.31434559999983 10.504 159.23759979999966 9.84 120.5268186999997 10.201 168.4895463999998 11.459 97.25873780000092 9.773 162.95846120000132 10.475 110.58177889999943 10.404 131.56961719999927 10.474 145.57928580000126 10.929 125.9387456999987 10.133 174.8262820000005 11.14 139.27924960000155 11.512)
Error minima by case: (15.6179 9 9.8717 9 1.0 3 0.3655 8 20.372 5 2.4494 7 0.6966 3 2.932 4 1.0 3 6.4717 3 8.3738 4 0.423 7 5.4331 4 15.2586 8 2.253 4 7.5643 7 0.7536 5 0.2358 7 8.9059 4 0.2308 7 8.3108 8 2.5182 4 6.5332 8 6.3635 5 8.7944 5)
Average genome size in population (length): 67.633
Average program size in population (points): 68.633
Average percent parens in population: 0.015
Minimum age in population: 17.1181640625
Maximum age in population: 21.466552734375
Average age in population: 19.4797236328125
Median age in population: 19.4833984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.722
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.722
Total error diversity:				 0.217
Error (vector) diversity:			 0.235
Behavioral diversity:				 0.245
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 22206642
--- Timings ---
Current time: 1529615614060 milliseconds
Total Time:          46.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        18.7 seconds, 40.7%
Fitness Testing:     21.4 seconds, 46.4%
Report:               5.9 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Number IO problem report - generation 14
Test total error for best: 59570.77120000004
Test mean error for best: 29.78539
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 86.0279       
Correct output: 24.1561588797  | Program output: 86.0279       
Correct output: 63.2618741651  | Program output: -6.0187       
Correct output: 81.4613344804  | Program output: 80.0273       
Correct output: -116.4209784668 | Program output: -51.0142      
Correct output: -80.5506083936 | Program output: -88.0105      
Correct output: 41.7915986532  | Program output: 0.0193        
Correct output: -6.9439752137  | Program output: 7.0200        
Correct output: 58.5604070006  | Program output: -6.0187       
Correct output: -105.4717093128 | Program output: -97.096       
Correct output: -65.3737650023 | Program output: 23.0216       
Correct output: 80.422971733   | Program output: 82.0275       
Correct output: -36.4331405664 | Program output: 10.0203       
Correct output: 49.2855176563  | Program output: 76.0269       
Correct output: 5.2530048743   | Program output: -66.0127      
Correct output: -14.5307262538 | Program output: -39.0154      
Correct output: 174.8425999229 | Program output: 84.0277       
Correct output: 94.2858027683  | Program output: 95.0288       
Correct output: -32.1580651662 | Program output: 59.0252       
Correct output: 34.2563324554  | Program output: 62.0255       
Correct output: -34.3108385906 | Program output: -69.0124      
Correct output: -25.5420796562 | Program output: 46.0239       
Correct output: 40.5609747923  | Program output: 85.0278       
Correct output: -146.3905253753 | Program output: -73.0120      
Correct output: 125.2745939078 | Program output: 64.0257       
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_mod} {:instruction integer_dup_items} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_flush} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_add} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_min} {:instruction -78} {:instruction float_flush} {:instruction integer_swap} {:instruction float_mult} {:instruction float_mod} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_stackdepth})
Best program: (float_yankdup integer_fromfloat integer_dup_times print_float float_mod integer_dup_items integer_fromfloat integer_rot float_stackdepth integer_stackdepth float_rot integer_swap integer_add in2 integer_swap float_dec 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_shove float_frominteger in2 integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_shove float_frominteger in2 integer_sub integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth float_rot float_flush 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_rot integer_add tagged_920 integer_sub integer_mod print_integer integer_swap integer_add integer_dup float_stackdepth float_yank float_max float_div float_frominteger integer_pop integer_pop integer_min -78 float_flush integer_swap float_mult float_mod integer_yank float_dup_times float_stackdepth)
Errors: [36.3821 11 61.8717 10 69.2806 9 1.434 10 65.4068 10 7.4599 9 41.7723 9 13.964 11 64.5791 10 8.3757 11 88.3954 12 1.6045 8 46.4534 12 26.7414 11 71.2657 10 24.4847 10 90.8149 11 0.743 8 91.1833 10 27.7692 9 34.7016 11 71.566 11 44.4668 10 73.3785 11 61.2489 11]
Total: 1380.3435000000002
Mean: 27.60687
Genome size: 90
Size: 91
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3476.5467854999993
Median total errors in population: 1392.828
Error averages by case: (115.67149830000096 11.006 134.1966260000012 10.694 153.05311359999888 9.849 88.05928910000067 10.116 164.9597287999999 11.138 112.25394280000042 9.751 109.05203759999876 9.839 89.32392590000087 10.957 149.10385370000068 10.679 118.16823439999979 11.171 159.3163372000004 11.226 90.08821020000046 8.949 120.72143719999892 11.225 107.76007649999939 10.414 154.0259970000002 9.602 118.61060659999993 10.28 165.77280909999902 11.384 93.75534290000071 9.427 158.86816560000113 10.249 107.24040269999989 10.226 128.58606579999977 10.714 142.29351350000064 11.074 121.53762539999902 10.243 174.28096450000092 11.009 137.2389811000011 11.386)
Error minima by case: (2.9058 8 12.0592 9 1.0 4 0.3655 8 19.372 6 2.4494 8 4.9484 5 1.101 5 1.0 4 5.4417 4 22.6542 5 0.423 7 12.5819 5 2.5455 8 0.219 5 6.5187 8 9.2464 6 0.1907 7 24.0881 5 7.2563 8 12.7842 8 17.5101 5 6.179 8 5.3635 6 5.2746 6)
Average genome size in population (length): 73.33
Average program size in population (points): 74.33
Average percent parens in population: 0.014
Minimum age in population: 18.12109375
Maximum age in population: 23.1268310546875
Average age in population: 20.8854189453125
Median age in population: 20.94378662109375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.777
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.777
Total error diversity:				 0.223
Error (vector) diversity:			 0.238
Behavioral diversity:				 0.243
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 24040117
--- Timings ---
Current time: 1529615617529 milliseconds
Total Time:          49.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        20.1 seconds, 40.6%
Fitness Testing:     22.9 seconds, 46.3%
Report:               6.4 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Number IO problem report - generation 15
Test total error for best: 59570.77120000004
Test mean error for best: 29.78539
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 86.0279       
Correct output: 24.1561588797  | Program output: 86.0279       
Correct output: 63.2618741651  | Program output: -6.0187       
Correct output: 81.4613344804  | Program output: 80.0273       
Correct output: -116.4209784668 | Program output: -51.0142      
Correct output: -80.5506083936 | Program output: -88.0105      
Correct output: 41.7915986532  | Program output: 0.0193        
Correct output: -6.9439752137  | Program output: 7.0200        
Correct output: 58.5604070006  | Program output: -6.0187       
Correct output: -105.4717093128 | Program output: -97.096       
Correct output: -65.3737650023 | Program output: 23.0216       
Correct output: 80.422971733   | Program output: 82.0275       
Correct output: -36.4331405664 | Program output: 10.0203       
Correct output: 49.2855176563  | Program output: 76.0269       
Correct output: 5.2530048743   | Program output: -66.0127      
Correct output: -14.5307262538 | Program output: -39.0154      
Correct output: 174.8425999229 | Program output: 84.0277       
Correct output: 94.2858027683  | Program output: 95.0288       
Correct output: -32.1580651662 | Program output: 59.0252       
Correct output: 34.2563324554  | Program output: 62.0255       
Correct output: -34.3108385906 | Program output: -69.0124      
Correct output: -25.5420796562 | Program output: 46.0239       
Correct output: 40.5609747923  | Program output: 85.0278       
Correct output: -146.3905253753 | Program output: -73.0120      
Correct output: 125.2745939078 | Program output: 64.0257       
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_mod} {:instruction integer_dup_items} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_flush} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_add} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_stackdepth} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_min} {:instruction -78} {:instruction float_flush} {:instruction integer_swap} {:instruction tag_integer_585} {:instruction float_mod} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_stackdepth})
Best program: (float_yankdup integer_fromfloat integer_dup_times print_float float_mod integer_dup_items integer_fromfloat integer_rot float_stackdepth integer_stackdepth float_rot integer_swap integer_add in2 integer_swap float_dec 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_shove float_frominteger in2 integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_shove float_frominteger in2 integer_sub integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth float_rot float_flush 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_rot integer_add tagged_920 integer_sub integer_mod print_integer integer_swap integer_add integer_dup float_stackdepth float_yank float_stackdepth float_div float_frominteger integer_pop integer_pop integer_min -78 float_flush integer_swap tag_integer_585 float_mod integer_yank float_dup_times float_stackdepth)
Errors: [36.3821 11 61.8717 10 69.2806 9 1.434 10 65.4068 10 7.4599 9 41.7723 9 13.964 11 64.5791 10 8.3757 11 88.3954 12 1.6045 8 46.4534 12 26.7414 11 71.2657 10 24.4847 10 90.8149 11 0.743 8 91.1833 10 27.7692 9 34.7016 11 71.566 11 44.4668 10 73.3785 11 61.2489 11]
Total: 1380.3435000000002
Mean: 27.60687
Genome size: 90
Size: 91
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3378.917450699987
Median total errors in population: 1392.4755000000002
Error averages by case: (109.20344120000097 10.889 127.26699750000142 10.554 148.2483714999987 9.578 82.52129790000053 10.185 169.68401369999958 11.015 116.95353430000061 9.678 96.20537399999876 9.854 79.2454971000009 10.887 144.24020760000084 10.504 125.23512999999994 11.093 151.82199190000003 11.191 84.2333263000006 8.827 110.72070239999891 11.192 101.30223209999933 10.391 156.32222929999995 9.641 121.58637380000008 10.212 160.12952869999916 11.398 89.39632140000072 9.204 151.31144550000127 10.109 100.58588789999952 9.967 131.91134219999984 10.731 134.75060180000136 10.989 114.82320539999844 10.177 179.58709290000047 10.99 130.99030430000153 11.385)
Error minima by case: (4.3821 9 8.4597 8 1.0 3 0.3663 7 22.4068 3 1.5324 8 5.0 3 0.068 4 1.0 3 5.4417 3 12.6477 4 0.328 7 1.4128 4 4.7414 8 4.16 4 6.4697 7 0.7486 3 0.1908 8 2.8671 4 1.6405 8 0.7016 8 9.4818 4 7.9451 8 8.3785 3 8.2746 3)
Average genome size in population (length): 75.38
Average program size in population (points): 76.38
Average percent parens in population: 0.013
Minimum age in population: 19.12109375
Maximum age in population: 24.22430419921875
Average age in population: 22.26532794189453
Median age in population: 22.35708618164062
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.811
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.811
Total error diversity:				 0.237
Error (vector) diversity:			 0.25
Behavioral diversity:				 0.25
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 25924792
--- Timings ---
Current time: 1529615621034 milliseconds
Total Time:          53.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        21.5 seconds, 40.5%
Fitness Testing:     24.6 seconds, 46.3%
Report:               6.9 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Number IO problem report - generation 16
Test total error for best: 60317.7678
Test mean error for best: 30.15888
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 73.0279       
Correct output: 24.1561588797  | Program output: 73.0279       
Correct output: 63.2618741651  | Program output: -7.0187       
Correct output: 81.4613344804  | Program output: 67.0273       
Correct output: -116.4209784668 | Program output: -52.0142      
Correct output: -80.5506083936 | Program output: -89.0105      
Correct output: 41.7915986532  | Program output: -3.0193       
Correct output: -6.9439752137  | Program output: 2.0200        
Correct output: 58.5604070006  | Program output: -7.0187       
Correct output: -105.4717093128 | Program output: -98.096       
Correct output: -65.3737650023 | Program output: 10.0216       
Correct output: 80.422971733   | Program output: 69.0275       
Correct output: -36.4331405664 | Program output: -3.0203       
Correct output: 49.2855176563  | Program output: 63.0269       
Correct output: 5.2530048743   | Program output: -67.0127      
Correct output: -14.5307262538 | Program output: -40.0154      
Correct output: 174.8425999229 | Program output: 71.0277       
Correct output: 94.2858027683  | Program output: 82.0288       
Correct output: -32.1580651662 | Program output: 46.0252       
Correct output: 34.2563324554  | Program output: 49.0255       
Correct output: -34.3108385906 | Program output: -70.0124      
Correct output: -25.5420796562 | Program output: 33.0239       
Correct output: 40.5609747923  | Program output: 72.0278       
Correct output: -146.3905253753 | Program output: -74.0120      
Correct output: 125.2745939078 | Program output: 51.0257       
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_mod} {:instruction integer_dup_items} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction -8} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_flush} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_add} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_min} {:instruction -78} {:instruction float_flush} {:instruction integer_swap} {:instruction float_mult} {:instruction float_mod} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_stackdepth})
Best program: (float_yankdup integer_fromfloat integer_dup_times print_float float_mod integer_dup_items integer_fromfloat integer_rot float_stackdepth integer_stackdepth float_rot integer_swap integer_add in2 integer_swap float_dec 46.73998848521251 -8 float_pop float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_shove float_frominteger in2 integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_shove float_frominteger in2 integer_sub integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth float_rot float_flush 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_rot integer_add tagged_920 integer_sub integer_mod print_integer integer_swap integer_add integer_dup float_stackdepth float_yank float_max float_div float_frominteger integer_pop integer_pop integer_min -78 float_flush integer_swap float_mult float_mod integer_yank float_dup_times float_stackdepth)
Errors: [23.3821 11 48.8717 10 70.2806 9 14.434 11 64.4068 11 8.4599 9 44.8109 9 8.964 11 65.5791 10 7.3757 11 75.3954 12 11.3955 9 33.4128 10 13.7414 11 72.2657 10 25.4847 10 103.8149 11 12.257 9 78.1833 10 14.7692 9 35.7016 11 58.566 11 31.4668 10 72.3785 10 74.2489 11]
Total: 1325.6464999999998
Mean: 26.51293
Genome size: 90
Size: 91
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3302.4610918999956
Median total errors in population: 1390.828
Error averages by case: (109.37497890000077 11.3 127.74716900000135 10.592 143.26671129999872 10.176 82.83499290000069 10.007 161.10871550000024 10.868 110.04581270000044 9.821 92.07049869999908 10.073 75.02906160000035 10.827 139.2516308000005 10.585 114.40194559999948 11.034 149.98690010000053 11.173 83.93230660000037 8.943 106.40963439999884 11.345 101.17355089999911 10.451 150.58317859999994 9.88 115.73249109999982 10.202 161.58521409999926 11.556 86.40178630000042 9.357 151.1432980000008 10.567 100.15309080000019 10.094 125.73696279999969 10.496 134.16437810000076 10.97 114.11613079999887 10.232 170.78537560000146 10.784 132.59727670000083 11.495)
Error minima by case: (2.9058 9 14.1562 8 16.5219 7 0.3663 7 18.326 9 2.4494 8 2.7723 7 0.068 7 11.8204 7 4.4417 7 5.3458 8 0.328 8 1.5872 7 2.5455 9 4.194 8 6.4697 8 2.7476 8 0.1908 7 5.8671 8 8.2563 8 10.7016 8 17.4911 8 6.179 8 4.2955 9 6.8204 6)
Average genome size in population (length): 75.416
Average program size in population (points): 76.416
Average percent parens in population: 0.013
Minimum age in population: 20.60888671875
Maximum age in population: 25.55841064453125
Average age in population: 23.69156823730469
Median age in population: 23.71647644042969
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.793
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.793
Total error diversity:				 0.245
Error (vector) diversity:			 0.267
Behavioral diversity:				 0.269
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 27810592
--- Timings ---
Current time: 1529615624520 milliseconds
Total Time:          56.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        22.8 seconds, 40.3%
Fitness Testing:     26.2 seconds, 46.4%
Report:               7.4 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Number IO problem report - generation 17
Test total error for best: 60317.7678
Test mean error for best: 30.15888
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 73.0279       
Correct output: 24.1561588797  | Program output: 73.0279       
Correct output: 63.2618741651  | Program output: -7.0187       
Correct output: 81.4613344804  | Program output: 67.0273       
Correct output: -116.4209784668 | Program output: -52.0142      
Correct output: -80.5506083936 | Program output: -89.0105      
Correct output: 41.7915986532  | Program output: -3.0193       
Correct output: -6.9439752137  | Program output: 2.0200        
Correct output: 58.5604070006  | Program output: -7.0187       
Correct output: -105.4717093128 | Program output: -98.096       
Correct output: -65.3737650023 | Program output: 10.0216       
Correct output: 80.422971733   | Program output: 69.0275       
Correct output: -36.4331405664 | Program output: -3.0203       
Correct output: 49.2855176563  | Program output: 63.0269       
Correct output: 5.2530048743   | Program output: -67.0127      
Correct output: -14.5307262538 | Program output: -40.0154      
Correct output: 174.8425999229 | Program output: 71.0277       
Correct output: 94.2858027683  | Program output: 82.0288       
Correct output: -32.1580651662 | Program output: 46.0252       
Correct output: 34.2563324554  | Program output: 49.0255       
Correct output: -34.3108385906 | Program output: -70.0124      
Correct output: -25.5420796562 | Program output: 33.0239       
Correct output: 40.5609747923  | Program output: 72.0278       
Correct output: -146.3905253753 | Program output: -74.0120      
Correct output: 125.2745939078 | Program output: 51.0257       
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_mod} {:instruction integer_dup_items} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction -8} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_flush} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_add} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_min} {:instruction -78} {:instruction float_flush} {:instruction integer_swap} {:instruction float_mult} {:instruction float_mod} {:instruction integer_yank})
Best program: (float_yankdup integer_fromfloat integer_dup_times print_float float_mod integer_dup_items integer_fromfloat integer_rot float_stackdepth integer_stackdepth float_rot integer_swap integer_add in2 integer_swap float_dec 46.73998848521251 -8 float_pop float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_shove float_frominteger in2 integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_shove float_frominteger in2 integer_sub integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth float_rot float_flush 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_rot integer_add tagged_920 integer_sub integer_mod print_integer integer_swap integer_add integer_dup float_stackdepth float_yank float_max float_div float_frominteger integer_pop integer_pop integer_min -78 float_flush integer_swap float_mult float_mod integer_yank)
Errors: [23.3821 11 48.8717 10 70.2806 9 14.434 11 64.4068 11 8.4599 9 44.8109 9 8.964 11 65.5791 10 7.3757 11 75.3954 12 11.3955 9 33.4128 10 13.7414 11 72.2657 10 25.4847 10 103.8149 11 12.257 9 78.1833 10 14.7692 9 35.7016 11 58.566 11 31.4668 10 72.3785 10 74.2489 11]
Total: 1325.6464999999998
Mean: 26.51293
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3519.4296504999966
Median total errors in population: 1385.5229
Error averages by case: (116.6736711000008 11.312 136.04576720000114 10.485 153.56286459999876 10.19 89.53584600000012 9.976 168.53344869999992 10.878 119.69647890000054 9.731 105.34110729999911 9.796 83.02535410000063 10.758 149.53838160000066 10.535 124.75231349999983 11.05 157.9442572000001 11.423 90.05919110000042 8.854 114.6629223999988 11.524 108.26961529999926 10.596 163.00785850000005 9.909 125.86359799999993 10.226 168.91394299999928 11.598 93.1486711000004 9.229 160.0575970000011 10.671 107.58208040000002 10.05 136.5704786999997 10.585 142.76376590000095 10.959 122.74405039999893 10.243 178.27786270000138 10.789 140.08052580000123 11.411)
Error minima by case: (23.3821 9 3.9826 8 21.7381 7 0.3663 7 21.421 9 0.5401 8 8.2084 7 0.932 8 26.4396 7 2.4417 8 15.3522 8 0.328 6 12.4128 9 13.7414 8 3.747 8 5.4357 8 1.2444 8 0.1868 7 2.1581 8 14.0828 8 4.3108 8 5.5421 9 20.3875 8 8.3655 9 10.7924 7)
Average genome size in population (length): 77.148
Average program size in population (points): 78.148
Average percent parens in population: 0.013
Minimum age in population: 22.88429260253906
Maximum age in population: 27.37275695800781
Average age in population: 25.06538989257812
Median age in population: 25.111328125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 35
Genome diversity (% unique Plush genomes):	 0.796
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.796
Total error diversity:				 0.252
Error (vector) diversity:			 0.28
Behavioral diversity:				 0.282
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 29739392
--- Timings ---
Current time: 1529615628033 milliseconds
Total Time:          60.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        24.1 seconds, 40.2%
Fitness Testing:     27.9 seconds, 46.5%
Report:               7.9 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Number IO problem report - generation 18
Test total error for best: 60317.7678
Test mean error for best: 30.15888
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 73.0279       
Correct output: 24.1561588797  | Program output: 73.0279       
Correct output: 63.2618741651  | Program output: -7.0187       
Correct output: 81.4613344804  | Program output: 67.0273       
Correct output: -116.4209784668 | Program output: -52.0142      
Correct output: -80.5506083936 | Program output: -89.0105      
Correct output: 41.7915986532  | Program output: -3.0193       
Correct output: -6.9439752137  | Program output: 2.0200        
Correct output: 58.5604070006  | Program output: -7.0187       
Correct output: -105.4717093128 | Program output: -98.096       
Correct output: -65.3737650023 | Program output: 10.0216       
Correct output: 80.422971733   | Program output: 69.0275       
Correct output: -36.4331405664 | Program output: -3.0203       
Correct output: 49.2855176563  | Program output: 63.0269       
Correct output: 5.2530048743   | Program output: -67.0127      
Correct output: -14.5307262538 | Program output: -40.0154      
Correct output: 174.8425999229 | Program output: 71.0277       
Correct output: 94.2858027683  | Program output: 82.0288       
Correct output: -32.1580651662 | Program output: 46.0252       
Correct output: 34.2563324554  | Program output: 49.0255       
Correct output: -34.3108385906 | Program output: -70.0124      
Correct output: -25.5420796562 | Program output: 33.0239       
Correct output: 40.5609747923  | Program output: 72.0278       
Correct output: -146.3905253753 | Program output: -74.0120      
Correct output: 125.2745939078 | Program output: 51.0257       
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_mod} {:instruction integer_dup_items} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction -8} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_flush} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_add} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_min} {:instruction -78} {:instruction float_flush} {:instruction integer_swap} {:instruction float_mult} {:instruction float_mod} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_stackdepth})
Best program: (float_yankdup integer_fromfloat integer_dup_times print_float float_mod integer_dup_items integer_fromfloat integer_rot float_stackdepth integer_stackdepth float_rot integer_swap integer_add in2 integer_swap float_dec 46.73998848521251 -8 float_pop float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_shove float_frominteger in2 integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_shove float_frominteger in2 integer_sub integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth float_rot float_flush 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_rot integer_add tagged_920 integer_sub integer_mod print_integer integer_swap integer_add integer_dup float_stackdepth float_yank float_max float_div float_frominteger integer_pop integer_pop integer_min -78 float_flush integer_swap float_mult float_mod integer_yank float_dup_times float_stackdepth)
Errors: [23.3821 11 48.8717 10 70.2806 9 14.434 11 64.4068 11 8.4599 9 44.8109 9 8.964 11 65.5791 10 7.3757 11 75.3954 12 11.3955 9 33.4128 10 13.7414 11 72.2657 10 25.4847 10 103.8149 11 12.257 9 78.1833 10 14.7692 9 35.7016 11 58.566 11 31.4668 10 72.3785 10 74.2489 11]
Total: 1325.6464999999998
Mean: 26.51293
Genome size: 90
Size: 91
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3463.357582599999
Median total errors in population: 1382.3435000000002
Error averages by case: (111.45424240000101 11.215 129.9596923000014 10.383 160.52672009999884 9.901 86.19430319999933 10.269 168.14690489999924 10.755 119.46504430000061 9.504 107.13191339999878 9.434 81.81557320000125 10.7 156.47403100000116 10.36 121.4248919 11.073 152.6552122 11.694 86.23011670000045 8.717 113.68891979999918 11.623 103.20326179999945 10.849 161.05281109999993 10.007 125.30062290000016 10.185 165.51324309999922 11.46 93.68961800000028 8.851 153.21073470000107 10.513 102.2007217999994 9.849 135.51376979999992 10.626 136.12916020000128 10.835 117.18220649999868 10.112 177.6045395999997 10.87 136.6433277000015 11.161)
Error minima by case: (23.3542 9 18.1283 8 13.2432 7 0.3654 7 18.4068 9 2.4494 7 6.2584 7 0.068 8 8.5417 8 2.4417 8 8.3738 8 0.328 6 5.4331 8 13.7145 8 4.1571 8 5.4697 8 1.8149 8 0.1898 7 21.1329 8 14.7437 8 15.7202 8 14.5182 8 31.439 7 4.3785 9 6.7511 7)
Average genome size in population (length): 81.72
Average program size in population (points): 82.72
Average percent parens in population: 0.012
Minimum age in population: 23.887451171875
Maximum age in population: 28.64308166503906
Average age in population: 26.41492681121826
Median age in population: 26.46639251708984
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.816
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.816
Total error diversity:				 0.283
Error (vector) diversity:			 0.31
Behavioral diversity:				 0.31
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 31782567
--- Timings ---
Current time: 1529615631692 milliseconds
Total Time:          63.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        25.4 seconds, 40.0%
Fitness Testing:     29.7 seconds, 46.6%
Report:               8.4 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Number IO problem report - generation 19
Test total error for best: 60631.50220000003
Test mean error for best: 30.31575
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 71.0279       
Correct output: 24.1561588797  | Program output: 71.0279       
Correct output: 63.2618741651  | Program output: -9.0187       
Correct output: 81.4613344804  | Program output: 65.0273       
Correct output: -116.4209784668 | Program output: -54.0142      
Correct output: -80.5506083936 | Program output: -91.0105      
Correct output: 41.7915986532  | Program output: -5.0193       
Correct output: -6.9439752137  | Program output: 0.0200        
Correct output: 58.5604070006  | Program output: -9.0187       
Correct output: -105.4717093128 | Program output: -100.096      
Correct output: -65.3737650023 | Program output: 8.0216        
Correct output: 80.422971733   | Program output: 67.0275       
Correct output: -36.4331405664 | Program output: -5.0203       
Correct output: 49.2855176563  | Program output: 61.0269       
Correct output: 5.2530048743   | Program output: -69.0127      
Correct output: -14.5307262538 | Program output: -42.0154      
Correct output: 174.8425999229 | Program output: 69.0277       
Correct output: 94.2858027683  | Program output: 80.0288       
Correct output: -32.1580651662 | Program output: 44.0252       
Correct output: 34.2563324554  | Program output: 47.0255       
Correct output: -34.3108385906 | Program output: -72.0124      
Correct output: -25.5420796562 | Program output: 31.0239       
Correct output: 40.5609747923  | Program output: 70.0278       
Correct output: -146.3905253753 | Program output: -76.0120      
Correct output: 125.2745939078 | Program output: 49.0257       
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_mod} {:instruction integer_dup_items} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction -8} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_add} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_swap} {:instruction float_mult} {:instruction float_mod} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_stackdepth})
Best program: (float_yankdup integer_fromfloat integer_dup_times print_float float_mod integer_dup_items integer_fromfloat integer_rot float_stackdepth integer_stackdepth float_rot integer_swap integer_add in2 integer_swap float_dec 46.73998848521251 -8 float_pop float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_shove float_frominteger in2 integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_shove float_frominteger in2 integer_sub integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth integer_mult float_pop float_pop integer_stackdepth integer_sub integer_rot integer_add tagged_920 integer_sub integer_mod print_integer integer_swap integer_add integer_dup float_stackdepth float_yank float_max float_div float_frominteger integer_pop integer_pop integer_swap float_mult float_mod integer_yank float_dup_times float_stackdepth)
Errors: [21.3821 11 46.8717 10 72.2806 9 16.434 11 62.4068 11 10.4599 10 46.8109 9 6.964 11 67.5791 10 5.3757 9 73.3954 12 13.3955 9 31.4128 11 11.7414 11 74.2657 10 27.4847 10 105.8149 12 14.257 9 76.1833 10 12.7692 9 37.7016 11 56.566 11 29.4668 9 70.3785 10 76.2489 11]
Total: 1323.6464999999998
Mean: 26.47293
Genome size: 90
Size: 91
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3428.266446099992
Median total errors in population: 1380.3435000000002
Error averages by case: (112.30087270000082 11.187 130.56329270000126 10.294 153.408614099999 9.846 89.97704059999901 10.623 162.5872672999992 10.894 113.41615770000054 9.487 107.01436029999886 9.328 81.3902080000011 10.558 149.38883720000092 10.346 115.42451960000024 11.115 154.175905 11.783 89.0860349000004 8.729 112.02884309999939 11.553 104.38282239999974 10.855 155.46025409999987 10.164 119.36385930000017 10.219 168.9827311999993 11.587 90.29191669999986 8.699 154.53250710000094 10.56 103.67953169999944 9.777 130.30662239999992 10.642 137.8669388000015 10.763 117.9858384999987 10.119 173.1220968999999 10.725 140.4253738000018 11.251)
Error minima by case: (2.9058 10 18.1283 8 5.0678 8 0.3663 8 59.372 8 2.4494 7 3.9484 7 0.076 8 9.7693 8 2.4417 8 16.3522 8 0.335 6 12.5872 9 2.5455 8 2.2403 8 3.5156 8 3.8426 10 0.1868 6 14.1393 8 11.4837 8 11.0508 7 9.5233 8 5.179 8 67.3635 9 15.5346 9)
Average genome size in population (length): 81.499
Average program size in population (points): 82.499
Average percent parens in population: 0.012
Minimum age in population: 25.61982727050781
Maximum age in population: 29.86501693725586
Average age in population: 27.8057483253479
Median age in population: 27.83875846862793
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.81
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.81
Total error diversity:				 0.276
Error (vector) diversity:			 0.3
Behavioral diversity:				 0.3
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 33820517
--- Timings ---
Current time: 1529615635374 milliseconds
Total Time:          67.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.8 seconds, 39.8%
Fitness Testing:     31.5 seconds, 46.7%
Report:               9.0 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Number IO problem report - generation 20
Test total error for best: 60213.95499999999
Test mean error for best: 30.10698
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 73.0279       
Correct output: 24.1561588797  | Program output: 73.0279       
Correct output: 63.2618741651  | Program output: -3.0187       
Correct output: 81.4613344804  | Program output: 67.0273       
Correct output: -116.4209784668 | Program output: -48.0142      
Correct output: -80.5506083936 | Program output: -85.0105      
Correct output: 41.7915986532  | Program output: -3.0193       
Correct output: -6.9439752137  | Program output: 2.0200        
Correct output: 58.5604070006  | Program output: -3.0187       
Correct output: -105.4717093128 | Program output: -94.096       
Correct output: -65.3737650023 | Program output: 10.0216       
Correct output: 80.422971733   | Program output: 69.0275       
Correct output: -36.4331405664 | Program output: -3.0203       
Correct output: 49.2855176563  | Program output: 63.0269       
Correct output: 5.2530048743   | Program output: -63.0127      
Correct output: -14.5307262538 | Program output: -36.0154      
Correct output: 174.8425999229 | Program output: 71.0277       
Correct output: 94.2858027683  | Program output: 82.0288       
Correct output: -32.1580651662 | Program output: 46.0252       
Correct output: 34.2563324554  | Program output: 49.0255       
Correct output: -34.3108385906 | Program output: -66.0124      
Correct output: -25.5420796562 | Program output: 33.0239       
Correct output: 40.5609747923  | Program output: 72.0278       
Correct output: -146.3905253753 | Program output: -70.0120      
Correct output: 125.2745939078 | Program output: 51.0257       
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction -8} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_flush} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_add} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_swap} {:instruction integer_add} {:instruction -78} {:instruction float_flush} {:instruction integer_swap} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_sin} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_yank})
Best program: (float_yankdup integer_fromfloat float_rot integer_swap integer_add in2 integer_shove float_dec 46.73998848521251 integer_stackdepth float_rot integer_swap integer_add in2 integer_swap float_dec 46.73998848521251 -8 float_pop float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_shove float_frominteger in2 integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_shove float_frominteger in2 integer_sub integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth float_rot float_flush 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_rot integer_add tagged_920 integer_sub integer_mod print_integer integer_swap integer_add -78 float_flush integer_swap float_mult integer_dup integer_yank float_dup_times float_stackdepth float_sin integer_yankdup integer_shove float_yank)
Errors: [23.3821 11 48.8717 10 66.2806 8 14.434 11 68.4068 11 4.4599 9 44.8109 9 8.964 11 61.5791 10 11.3757 11 75.3954 12 11.3955 9 33.4128 10 13.7414 11 68.2657 9 21.4847 10 103.8149 11 12.257 9 78.1833 10 14.7692 9 31.7016 11 58.566 11 31.4668 10 76.3785 11 74.2489 11]
Total: 1312.6464999999998
Mean: 26.25293
Genome size: 85
Size: 86
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4023.265894099999
Median total errors in population: 1373.8961000000002
Error averages by case: (133.37102520000082 11.183 149.7303663000006 10.295 175.5774145999992 9.852 118.75979149999864 10.883 187.56256529999897 11.103 141.16340150000022 9.57 133.8554168999988 9.449 106.1155048000017 10.688 171.66106730000095 10.334 143.38614880000029 11.128 173.08174350000033 11.843 117.15243210000006 8.901 134.09099789999962 11.202 125.89621399999963 11.009 178.1930587999994 10.148 144.67688170000045 10.229 196.89862559999932 11.571 118.13037049999915 8.967 171.6394185000013 10.556 124.68197009999946 9.859 155.19976760000026 10.813 155.78564140000051 10.868 138.41159269999872 10.162 197.87870259999963 10.7 167.8517749000019 11.201)
Error minima by case: (4.6179 9 12.1283 8 4.7568 8 0.434 7 18.4068 8 1.4594 8 1.7916 8 0.0654 8 9.4583 8 1.3757 9 3.3522 9 0.329 7 0.4128 8 7.7414 9 2.2403 8 0.5153 7 4.8426 9 0.1907 5 16.0941 8 5.2563 7 20.2984 8 9.4911 9 2.5332 8 26.3785 8 13.7254 8)
Average genome size in population (length): 83.193
Average program size in population (points): 84.193
Average percent parens in population: 0.012
Minimum age in population: 27.15536499023438
Maximum age in population: 31.06249618530273
Average age in population: 29.17557912063599
Median age in population: 29.23658752441406
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.796
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.796
Total error diversity:				 0.306
Error (vector) diversity:			 0.354
Behavioral diversity:				 0.354
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 35901092
--- Timings ---
Current time: 1529615639031 milliseconds
Total Time:          71.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.2 seconds, 39.6%
Fitness Testing:     33.3 seconds, 46.8%
Report:               9.5 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Number IO problem report - generation 21
Test total error for best: 60000.804599999996
Test mean error for best: 30.00040
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 75.0279       
Correct output: 24.1561588797  | Program output: 75.0279       
Correct output: 63.2618741651  | Program output: -1.0187       
Correct output: 81.4613344804  | Program output: 69.0273       
Correct output: -116.4209784668 | Program output: -46.0142      
Correct output: -80.5506083936 | Program output: -83.0105      
Correct output: 41.7915986532  | Program output: -1.0193       
Correct output: -6.9439752137  | Program output: 4.0200        
Correct output: 58.5604070006  | Program output: -1.0187       
Correct output: -105.4717093128 | Program output: -92.096       
Correct output: -65.3737650023 | Program output: 12.0216       
Correct output: 80.422971733   | Program output: 71.0275       
Correct output: -36.4331405664 | Program output: -1.0203       
Correct output: 49.2855176563  | Program output: 65.0269       
Correct output: 5.2530048743   | Program output: -61.0127      
Correct output: -14.5307262538 | Program output: -34.0154      
Correct output: 174.8425999229 | Program output: 73.0277       
Correct output: 94.2858027683  | Program output: 84.0288       
Correct output: -32.1580651662 | Program output: 48.0252       
Correct output: 34.2563324554  | Program output: 51.0255       
Correct output: -34.3108385906 | Program output: -64.0124      
Correct output: -25.5420796562 | Program output: 35.0239       
Correct output: 40.5609747923  | Program output: 74.0278       
Correct output: -146.3905253753 | Program output: -68.0120      
Correct output: 125.2745939078 | Program output: 53.0257       
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_mod} {:instruction integer_dup_items} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_add} {:instruction in2} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction -8} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_flush} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_add} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_min} {:instruction -78} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_min} {:instruction -78} {:instruction float_frominteger} {:instruction integer_swap} {:instruction float_mult} {:instruction float_mod} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_stackdepth})
Best program: (float_yankdup integer_fromfloat integer_dup_times print_float float_mod integer_dup_items integer_fromfloat integer_rot float_stackdepth integer_stackdepth float_rot integer_swap integer_add in2 float_rot integer_swap integer_add in2 integer_swap float_dec 46.73998848521251 -8 float_pop float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_shove float_frominteger in2 integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod float_pop integer_stackdepth integer_sub integer_sub integer_shove float_frominteger in2 integer_sub integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth float_rot float_flush 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_rot integer_add tagged_920 integer_sub integer_mod print_integer integer_swap integer_add integer_dup float_stackdepth float_yank float_max float_div float_frominteger integer_pop integer_pop integer_min -78 float_stackdepth float_yank float_max float_div float_frominteger integer_pop integer_pop integer_min -78 float_frominteger integer_swap float_mult float_mod integer_yank float_dup_times float_stackdepth)
Errors: [25.3821 11 50.8717 10 64.2806 9 12.434 11 70.4068 10 2.4599 9 42.8109 8 10.964 11 59.5791 10 13.3757 11 77.3954 12 9.3955 9 35.4128 11 15.7414 11 66.2657 10 19.4847 9 101.8149 11 10.257 8 80.1833 10 16.7692 9 29.7016 10 60.566 10 33.4668 10 78.3785 11 72.2489 11]
Total: 1311.6464999999998
Mean: 26.23293
Genome size: 97
Size: 98
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3602.407956299997
Median total errors in population: 1347.5916
Error averages by case: (110.0951383000009 11.188 126.82305580000123 10.274 168.13347959999896 9.732 102.23024109999855 10.869 175.60919199999887 10.951 129.19853960000063 9.51 117.94119069999847 9.582 88.31515600000144 10.944 164.137204600001 10.332 132.8659241000005 11.036 149.01126509999926 11.822 100.27677789999964 9.184 111.03535360000058 10.678 102.2185852999994 11.108 165.10212249999978 10.077 130.97219440000035 10.201 181.73358799999903 11.343 107.70214059999911 9.436 148.24891560000114 10.468 100.6981678999992 9.792 141.978585 10.836 131.81020920000202 11.019 115.24242489999857 10.153 186.31400149999956 10.733 152.32450300000195 11.122)
Error minima by case: (4.3542 9 21.1283 8 1.0 3 0.434 8 16.4068 5 2.4494 8 5.0 4 0.924 4 1.0 3 1.3757 4 22.3522 4 0.3358 7 3.5669 4 5.2855 9 1.841 4 0.4467 8 2.8426 5 0.1908 7 14.1329 4 4.2563 8 17.2984 8 7.5182 4 12.439 8 2.3785 5 5.2746 5)
Average genome size in population (length): 87.566
Average program size in population (points): 88.566
Average percent parens in population: 0.011
Minimum age in population: 28.15536499023438
Maximum age in population: 32.62492656707764
Average age in population: 30.5770917673111
Median age in population: 30.61499834060669
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 29
Genome diversity (% unique Plush genomes):	 0.807
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.807
Total error diversity:				 0.325
Error (vector) diversity:			 0.368
Behavioral diversity:				 0.369
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 38091242
--- Timings ---
Current time: 1529615642861 milliseconds
Total Time:          74.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        29.5 seconds, 39.4%
Fitness Testing:     35.2 seconds, 47.0%
Report:              10.0 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Number IO problem report - generation 22
Test total error for best: 60173.95499999999
Test mean error for best: 30.08698
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 73.02790      
Correct output: 24.1561588797  | Program output: 73.02790      
Correct output: 63.2618741651  | Program output: -3.01870      
Correct output: 81.4613344804  | Program output: 67.02730      
Correct output: -116.4209784668 | Program output: -48.01420     
Correct output: -80.5506083936 | Program output: -85.01050     
Correct output: 41.7915986532  | Program output: -3.01930      
Correct output: -6.9439752137  | Program output: 2.02000       
Correct output: 58.5604070006  | Program output: -3.01870      
Correct output: -105.4717093128 | Program output: -94.0960      
Correct output: -65.3737650023 | Program output: 10.02160      
Correct output: 80.422971733   | Program output: 69.02750      
Correct output: -36.4331405664 | Program output: -3.02030      
Correct output: 49.2855176563  | Program output: 63.02690      
Correct output: 5.2530048743   | Program output: -63.01270     
Correct output: -14.5307262538 | Program output: -36.01540     
Correct output: 174.8425999229 | Program output: 71.02770      
Correct output: 94.2858027683  | Program output: 82.02880      
Correct output: -32.1580651662 | Program output: 46.02520      
Correct output: 34.2563324554  | Program output: 49.02550      
Correct output: -34.3108385906 | Program output: -66.01240     
Correct output: -25.5420796562 | Program output: 33.02390      
Correct output: 40.5609747923  | Program output: 72.02780      
Correct output: -146.3905253753 | Program output: -70.01200     
Correct output: 125.2745939078 | Program output: 51.02570      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction -8} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_inc} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_flush} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_add} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_max} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_min} {:instruction -78} {:instruction float_flush} {:instruction float_sin} {:instruction float_mult} {:instruction float_mod} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_stackdepth})
Best program: (float_yankdup integer_fromfloat integer_dup_times print_float float_stackdepth integer_stackdepth float_rot integer_swap integer_add in2 integer_swap integer_add in2 integer_swap float_dec 46.73998848521251 -8 float_pop float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_shove float_frominteger in2 integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_shove float_frominteger in2 integer_sub integer_yankdup integer_rot print_float float_inc 95 float_mod integer_stackdepth float_rot float_flush 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_rot integer_add tagged_920 integer_sub integer_mod print_integer integer_swap float_stackdepth integer_add integer_dup float_stackdepth print_integer float_max float_div float_frominteger integer_pop integer_pop integer_min -78 float_flush float_sin float_mult float_mod integer_yank float_dup_times float_stackdepth)
Errors: [23.3821 11 48.8717 10 66.2806 8 14.434 10 68.4068 11 4.4599 9 44.8109 9 8.964 11 61.5791 9 11.3757 11 75.3954 11 11.3955 9 33.4128 10 13.7414 11 68.2657 9 21.4847 10 103.8149 11 12.257 9 78.1833 11 14.7692 9 31.7016 10 58.566 11 31.4668 10 76.3785 11 74.2489 11]
Total: 1309.6464999999998
Mean: 26.19293
Genome size: 90
Size: 91
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3420.7327062999984
Median total errors in population: 1325.6464999999998
Error averages by case: (102.09131470000071 11.127 118.44928680000113 10.101 159.8438185999989 9.619 96.20163409999928 10.839 167.47666709999882 10.86 121.65757560000067 9.557 111.2086150999986 9.52 78.93810390000048 10.941 155.85924520000108 10.28 125.66002840000048 10.946 141.74948329999887 11.82 94.30902069999958 9.128 107.0752504000005 10.771 94.45192489999964 11.078 156.9624678000003 9.943 122.44545980000049 10.178 175.8322183999991 11.378 106.52730909999929 9.499 139.12447530000082 10.395 92.9848622999997 9.694 134.3232090000002 10.849 123.00938330000157 10.95 108.03918909999898 10.026 179.01846429999975 10.904 146.07869910000184 11.012)
Error minima by case: (2.9058 9 6.1283 8 2.2434 8 0.3673 8 16.421 8 0.4494 8 4.9484 8 0.067 8 2.5419 8 1.3757 8 9.3522 9 0.3955 7 6.3391 8 2.5455 9 0.2403 8 0.4875 7 3.8426 9 0.1918 7 11.8671 8 8.7692 8 15.2984 8 5.4818 9 6.179 8 2.3905 8 15.7254 7)
Average genome size in population (length): 90.648
Average program size in population (points): 91.648
Average percent parens in population: 0.011
Minimum age in population: 29.58347034454346
Maximum age in population: 33.83655881881714
Average age in population: 31.99127346467972
Median age in population: 32.02930641174316
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.823
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.823
Total error diversity:				 0.336
Error (vector) diversity:			 0.393
Behavioral diversity:				 0.394
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 40357742
--- Timings ---
Current time: 1529615646740 milliseconds
Total Time:          78.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        30.8 seconds, 39.2%
Fitness Testing:     37.2 seconds, 47.3%
Report:              10.6 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Number IO problem report - generation 23
Test total error for best: 60647.2712
Test mean error for best: 30.32364
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 70.0279       
Correct output: 24.1561588797  | Program output: 70.0279       
Correct output: 63.2618741651  | Program output: -6.0187       
Correct output: 81.4613344804  | Program output: 64.0273       
Correct output: -116.4209784668 | Program output: -51.0142      
Correct output: -80.5506083936 | Program output: -88.0105      
Correct output: 41.7915986532  | Program output: -6.0193       
Correct output: -6.9439752137  | Program output: -1.0200       
Correct output: 58.5604070006  | Program output: -6.0187       
Correct output: -105.4717093128 | Program output: -97.096       
Correct output: -65.3737650023 | Program output: 7.0216        
Correct output: 80.422971733   | Program output: 66.0275       
Correct output: -36.4331405664 | Program output: -6.0203       
Correct output: 49.2855176563  | Program output: 60.0269       
Correct output: 5.2530048743   | Program output: -66.0127      
Correct output: -14.5307262538 | Program output: -39.0154      
Correct output: 174.8425999229 | Program output: 68.0277       
Correct output: 94.2858027683  | Program output: 79.0288       
Correct output: -32.1580651662 | Program output: 43.0252       
Correct output: 34.2563324554  | Program output: 46.0255       
Correct output: -34.3108385906 | Program output: -69.0124      
Correct output: -25.5420796562 | Program output: 30.0239       
Correct output: 40.5609747923  | Program output: 69.0278       
Correct output: -146.3905253753 | Program output: -73.0120      
Correct output: 125.2745939078 | Program output: 48.0257       
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction -8} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_flush} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_add} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction float_mult})
Best program: (float_yankdup integer_fromfloat float_rot integer_swap integer_add in2 integer_shove float_dec 46.73998848521251 integer_stackdepth float_rot integer_swap integer_add in2 integer_swap float_dec 46.73998848521251 -8 float_pop float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_shove float_frominteger in2 integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_shove integer_stackdepth tagged_920 integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_shove float_frominteger in2 integer_sub integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth float_rot float_flush 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_rot integer_add tagged_920 integer_sub integer_mod print_integer integer_swap integer_add integer_dup float_stackdepth integer_swap float_mult)
Errors: [20.3821 11 45.8717 10 69.2806 9 17.434 11 65.4068 10 7.4599 9 47.8109 9 5.924 10 64.5791 10 8.3757 11 72.3954 12 14.3955 9 30.4128 10 10.7414 11 71.2657 10 24.4847 10 106.8149 12 15.257 9 75.1833 9 11.7692 8 34.7016 11 55.566 11 28.4668 10 73.3785 11 77.2489 11]
Total: 1308.6064999999999
Mean: 26.17213
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3122.5256422999996
Median total errors in population: 1324.6464999999998
Error averages by case: (91.60083980000084 11.102 108.10979930000116 10.103 147.37226179999874 9.554 85.62556699999931 10.748 154.71456269999877 10.889 105.46753680000079 9.506 103.68178259999844 9.466 68.09114180000017 10.896 143.2208373000013 10.216 108.92840350000048 10.816 128.95058549999828 11.75 83.73771949999956 9.1 94.33286000000048 10.859 82.63917289999952 11.087 144.6297249000006 9.812 109.0557291000005 10.115 167.63461429999876 11.416 94.55461409999913 9.422 128.52703170000075 10.366 81.52864999999971 9.596 120.27210670000026 10.742 110.72448910000162 10.866 97.59925859999886 9.993 164.62966289999952 10.97 136.549690400002 10.957)
Error minima by case: (0.3542 9 17.0622 8 0.8331 8 0.3673 8 25.421 9 0.4566 8 3.9484 8 0.076 9 5.5346 8 0.3757 8 9.6262 9 0.337 7 2.4331 8 0.7145 9 1.2403 8 0.509 7 2.8426 10 0.1948 6 6.8671 8 3.1623 8 17.2984 8 4.5182 8 5.179 7 24.6095 8 31.2746 10)
Average genome size in population (length): 90.924
Average program size in population (points): 91.924
Average percent parens in population: 0.011
Minimum age in population: 31.11192226409912
Maximum age in population: 35.24783110618591
Average age in population: 33.43442623567581
Median age in population: 33.45725238323212
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.855
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.855
Total error diversity:				 0.371
Error (vector) diversity:			 0.426
Behavioral diversity:				 0.426
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 42631142
--- Timings ---
Current time: 1529615650583 milliseconds
Total Time:          82.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        32.2 seconds, 39.0%
Fitness Testing:     39.2 seconds, 47.4%
Report:              11.1 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Number IO problem report - generation 24
Test total error for best: 60881.41600000002
Test mean error for best: 30.44071
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 69.0279       
Correct output: 24.1561588797  | Program output: 69.0279       
Correct output: 63.2618741651  | Program output: -8.0187       
Correct output: 81.4613344804  | Program output: 63.0273       
Correct output: -116.4209784668 | Program output: -53.0142      
Correct output: -80.5506083936 | Program output: -90.0105      
Correct output: 41.7915986532  | Program output: -7.0193       
Correct output: -6.9439752137  | Program output: -2.0200       
Correct output: 58.5604070006  | Program output: -8.0187       
Correct output: -105.4717093128 | Program output: -99.096       
Correct output: -65.3737650023 | Program output: 6.0216        
Correct output: 80.422971733   | Program output: 65.0275       
Correct output: -36.4331405664 | Program output: -7.0203       
Correct output: 49.2855176563  | Program output: 59.0269       
Correct output: 5.2530048743   | Program output: -68.0127      
Correct output: -14.5307262538 | Program output: -41.0154      
Correct output: 174.8425999229 | Program output: 67.0277       
Correct output: 94.2858027683  | Program output: 78.0288       
Correct output: -32.1580651662 | Program output: 42.0252       
Correct output: 34.2563324554  | Program output: 45.0255       
Correct output: -34.3108385906 | Program output: -71.0124      
Correct output: -25.5420796562 | Program output: 29.0239       
Correct output: 40.5609747923  | Program output: 68.0278       
Correct output: -146.3905253753 | Program output: -75.0120      
Correct output: 125.2745939078 | Program output: 47.0257       
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction integer_dup_items} {:instruction 46.73998848521251} {:instruction -8} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_div} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction float_flush} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_add} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_swap} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_stackdepth})
Best program: (float_yankdup integer_fromfloat integer_dup_times print_float float_stackdepth integer_stackdepth float_rot integer_swap integer_add in2 integer_swap integer_dup_items 46.73998848521251 -8 float_pop float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_shove float_frominteger in2 integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod float_div integer_stackdepth integer_sub tagged_920 integer_sub integer_mod float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth tagged_920 integer_sub integer_shove float_frominteger in2 integer_sub integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth float_flush float_flush 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_rot integer_add tagged_920 integer_sub integer_mod print_integer integer_swap integer_yank float_dup_times float_stackdepth)
Errors: [19.3821 10 44.8717 10 71.2806 9 18.434 11 63.4068 11 9.4599 9 48.8109 9 4.924 10 66.5791 9 6.3757 11 71.3954 11 15.3955 9 29.4128 11 9.7414 10 73.2657 10 26.4847 10 107.8149 11 16.257 9 74.1833 9 10.7692 8 36.7016 11 54.566 10 27.4668 10 71.3785 11 78.2489 11]
Total: 1306.6064999999999
Mean: 26.13213
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3417.4656818999983
Median total errors in population: 1321.6849499999998
Error averages by case: (103.99921310000067 11.105 120.86551720000104 10.116 158.54355169999894 9.416 96.9682251999994 10.69 166.20190969999888 10.895 114.91033650000077 9.416 113.94963749999872 9.428 81.16986360000061 10.914 154.45072300000112 10.229 118.84453340000054 10.902 142.040848899999 11.707 95.08142389999972 9.109 106.6149459000004 10.834 95.7392965999996 11.072 156.31828009999998 9.652 120.47373340000057 10.093 176.79236309999897 11.307 109.0249728999992 9.409 142.5617321000007 10.411 94.30051609999961 9.626 130.75919570000022 10.666 125.87327400000154 10.831 109.21774519999882 10.021 175.71926209999953 11.048 147.14058100000162 11.007)
Error minima by case: (3.9058 9 7.1283 8 0.0 3 0.3673 8 16.4068 5 0.4494 8 6.0 5 0.0738 5 0.0 3 1.3757 5 3.6478 5 0.3953 6 6.4331 5 3.5455 9 0.2403 4 0.4847 8 2.8149 5 0.1918 7 14.1329 5 7.7437 8 13.0508 8 7.5182 5 5.179 8 2.3785 6 6.7254 5)
Average genome size in population (length): 89.975
Average program size in population (points): 90.975
Average percent parens in population: 0.011
Minimum age in population: 32.11305522918701
Maximum age in population: 36.87184107303619
Average age in population: 34.99181070041656
Median age in population: 35.03331500291824
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.856
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.856
Total error diversity:				 0.374
Error (vector) diversity:			 0.446
Behavioral diversity:				 0.446
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 44880842
--- Timings ---
Current time: 1529615654449 milliseconds
Total Time:          86.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        33.6 seconds, 38.8%
Fitness Testing:     41.1 seconds, 47.6%
Report:              11.6 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Number IO problem report - generation 25
Test total error for best: 60412.7546
Test mean error for best: 30.20638
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 70.02790      
Correct output: 24.1561588797  | Program output: 70.02790      
Correct output: 63.2618741651  | Program output: -3.01870      
Correct output: 81.4613344804  | Program output: 64.02730      
Correct output: -116.4209784668 | Program output: -48.01420     
Correct output: -80.5506083936 | Program output: -85.01050     
Correct output: 41.7915986532  | Program output: -3.01930      
Correct output: -6.9439752137  | Program output: -1.02000      
Correct output: 58.5604070006  | Program output: -3.01870      
Correct output: -105.4717093128 | Program output: -94.0960      
Correct output: -65.3737650023 | Program output: 7.02160       
Correct output: 80.422971733   | Program output: 66.02750      
Correct output: -36.4331405664 | Program output: 5.02030       
Correct output: 49.2855176563  | Program output: 60.02690      
Correct output: 5.2530048743   | Program output: -63.01270     
Correct output: -14.5307262538 | Program output: -36.01540     
Correct output: 174.8425999229 | Program output: 68.02770      
Correct output: 94.2858027683  | Program output: 79.02880      
Correct output: -32.1580651662 | Program output: 43.02520      
Correct output: 34.2563324554  | Program output: 46.02550      
Correct output: -34.3108385906 | Program output: -66.01240     
Correct output: -25.5420796562 | Program output: 30.02390      
Correct output: 40.5609747923  | Program output: 69.02780      
Correct output: -146.3905253753 | Program output: -70.01200     
Correct output: 125.2745939078 | Program output: 48.02570      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction -8} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_inc} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_flush} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_add} {:instruction tagged_986} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_max} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_min} {:instruction -78} {:instruction float_flush} {:instruction float_rot} {:instruction float_mult} {:instruction float_mod} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_stackdepth})
Best program: (float_yankdup integer_fromfloat float_rot integer_swap integer_add in2 integer_shove float_dec 46.73998848521251 integer_stackdepth float_rot integer_swap integer_add in2 integer_swap float_dec 46.73998848521251 -8 float_pop float_pop integer_stackdepth integer_sub float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_shove float_frominteger in2 integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_shove float_frominteger in2 integer_sub integer_yankdup integer_rot print_float float_inc 95 float_mod integer_stackdepth float_rot float_flush 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_rot integer_add tagged_986 integer_sub integer_mod print_integer integer_swap float_stackdepth integer_add integer_dup float_stackdepth print_integer float_max float_div float_frominteger integer_pop integer_pop integer_min -78 float_flush float_rot float_mult float_mod integer_yank float_dup_times float_stackdepth)
Errors: [20.3821 11 45.8717 10 66.2806 8 17.434 10 68.4068 11 4.4599 9 44.8109 9 5.924 10 61.5791 9 11.3757 11 72.3954 11 14.3955 9 41.4534 12 10.7414 11 68.2657 9 21.4847 10 106.8149 12 15.257 9 75.1833 10 11.7692 8 31.7016 10 55.566 11 28.4668 10 76.3785 11 77.2489 11]
Total: 1305.6471
Mean: 26.112942
Genome size: 94
Size: 95
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3757.3071080999975
Median total errors in population: 1317.6466
Error averages by case: (121.31277230000093 11.161 138.27221550000115 10.158 164.8821588999989 9.445 112.32554059999876 10.659 178.92866459999868 10.938 128.2684443000007 9.455 122.75919919999842 9.476 95.45968250000105 10.959 160.82946630000123 10.18 134.54194040000075 11.033 155.13700589999888 11.677 111.60269149999958 9.186 120.04704870000066 10.885 111.9768564999995 11.092 168.20866569999995 9.707 131.60758140000038 10.047 193.57811979999906 11.376 122.47245759999915 9.422 155.50078290000118 10.542 108.0688336999994 9.71 142.9850822000002 10.562 139.9666925000016 10.894 127.39662929999855 10.114 189.32868059999973 11.184 160.9448952000023 11.043)
Error minima by case: (2.9058 10 6.1562 8 16.5219 8 0.3673 8 16.5916 9 0.4596 8 1.7916 8 0.0713 8 11.8204 8 1.3757 8 17.3738 9 0.329 7 3.4128 8 2.5455 9 0.7597 8 0.4847 8 2.8426 10 0.1918 7 13.1329 8 4.7437 8 4.2984 7 6.5182 9 6.179 8 11.3785 9 30.2746 9)
Average genome size in population (length): 90.471
Average program size in population (points): 91.471
Average percent parens in population: 0.011
Minimum age in population: 34.11506271362305
Maximum age in population: 38.32128041982651
Average age in population: 36.35983549356461
Median age in population: 36.33974525332451
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.86
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.86
Total error diversity:				 0.379
Error (vector) diversity:			 0.45
Behavioral diversity:				 0.45
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 47142892
--- Timings ---
Current time: 1529615658340 milliseconds
Total Time:          90.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        34.9 seconds, 38.7%
Fitness Testing:     43.1 seconds, 47.7%
Report:              12.2 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Number IO problem report - generation 26
Test total error for best: 60844.86440000001
Test mean error for best: 30.42243
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 69.0279       
Correct output: 24.1561588797  | Program output: 69.0279       
Correct output: 63.2618741651  | Program output: -7.0187       
Correct output: 81.4613344804  | Program output: 63.0273       
Correct output: -116.4209784668 | Program output: -52.0142      
Correct output: -80.5506083936 | Program output: -89.0105      
Correct output: 41.7915986532  | Program output: -7.0193       
Correct output: -6.9439752137  | Program output: -2.0200       
Correct output: 58.5604070006  | Program output: -7.0187       
Correct output: -105.4717093128 | Program output: -98.096       
Correct output: -65.3737650023 | Program output: 6.0216        
Correct output: 80.422971733   | Program output: 65.0275       
Correct output: -36.4331405664 | Program output: -7.0203       
Correct output: 49.2855176563  | Program output: 59.0269       
Correct output: 5.2530048743   | Program output: -67.0127      
Correct output: -14.5307262538 | Program output: -40.0154      
Correct output: 174.8425999229 | Program output: 67.0277       
Correct output: 94.2858027683  | Program output: 78.0288       
Correct output: -32.1580651662 | Program output: 42.0252       
Correct output: 34.2563324554  | Program output: 45.0255       
Correct output: -34.3108385906 | Program output: -70.0124      
Correct output: -25.5420796562 | Program output: 29.0239       
Correct output: 40.5609747923  | Program output: 68.0278       
Correct output: -146.3905253753 | Program output: -74.0120      
Correct output: 125.2745939078 | Program output: 47.0257       
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction -8} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_div} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction float_flush} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_add} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_swap} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_stackdepth})
Best program: (float_yankdup integer_fromfloat float_rot integer_swap integer_add in2 integer_shove float_dec 46.73998848521251 integer_stackdepth float_rot integer_swap integer_add in2 integer_swap float_dec 46.73998848521251 -8 float_pop float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_shove float_frominteger in2 integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod float_div integer_stackdepth integer_sub tagged_920 integer_sub integer_mod float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth tagged_920 integer_sub integer_shove float_frominteger in2 integer_sub integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth float_flush float_flush 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_rot integer_add tagged_920 integer_sub integer_mod print_integer integer_swap integer_yank float_dup_times float_stackdepth)
Errors: [19.3821 10 44.8717 10 70.2806 9 18.434 11 64.4068 11 8.4599 9 48.8109 9 4.924 10 65.5791 10 7.3757 11 71.3954 11 15.3955 9 29.4128 11 9.7414 10 72.2657 10 25.4847 10 107.8149 11 16.257 9 74.1833 9 10.7692 8 35.7016 11 54.566 10 27.4668 10 72.3785 10 78.2489 11]
Total: 1303.6064999999999
Mean: 26.07213
Genome size: 92
Size: 93
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4047.8574751999977
Median total errors in population: 1314.6464999999998
Error averages by case: (133.90991110000073 11.161 150.7777251000006 10.242 175.28313839999896 9.401 125.77866029999886 10.507 187.44123109999856 10.808 138.3011030000003 9.42 136.02427539999886 9.345 107.01439030000147 10.939 171.30066940000123 9.944 145.0397585000008 11.057 168.29515159999985 11.495 124.1392882999996 9.224 131.91606290000075 10.869 125.5456588999995 11.084 177.95362919999965 9.776 140.64447270000056 9.956 203.15922569999898 11.448 135.03049169999946 9.291 170.47952780000122 10.592 123.47238989999929 9.647 152.7363103000002 10.325 153.6053767000007 10.787 139.05906989999846 10.124 198.02263449999913 11.158 173.23132250000216 11.096)
Error minima by case: (2.9058 9 9.1283 9 16.5219 7 0.3673 7 21.4068 8 0.4599 7 1.7916 8 0.076 9 11.8204 8 0.3757 8 20.6478 9 0.329 7 5.4128 8 0.7145 8 0.841 7 0.5033 7 2.8426 9 0.257 7 13.1329 8 8.7692 8 18.7079 7 6.5182 9 6.179 8 10.3785 8 24.7511 9)
Average genome size in population (length): 92.46
Average program size in population (points): 93.46
Average percent parens in population: 0.011
Minimum age in population: 35.11506271362305
Maximum age in population: 39.82828950881958
Average age in population: 37.67726199391484
Median age in population: 37.70970718562603
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.859
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.859
Total error diversity:				 0.38
Error (vector) diversity:			 0.446
Behavioral diversity:				 0.447
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 49454642
--- Timings ---
Current time: 1529615662233 milliseconds
Total Time:          94.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        36.3 seconds, 38.5%
Fitness Testing:     45.1 seconds, 47.9%
Report:              12.7 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Number IO problem report - generation 27
Test total error for best: 60844.86440000001
Test mean error for best: 30.42243
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 69.0279       
Correct output: 24.1561588797  | Program output: 69.0279       
Correct output: 63.2618741651  | Program output: -7.0187       
Correct output: 81.4613344804  | Program output: 63.0273       
Correct output: -116.4209784668 | Program output: -52.0142      
Correct output: -80.5506083936 | Program output: -89.0105      
Correct output: 41.7915986532  | Program output: -7.0193       
Correct output: -6.9439752137  | Program output: -2.0200       
Correct output: 58.5604070006  | Program output: -7.0187       
Correct output: -105.4717093128 | Program output: -98.096       
Correct output: -65.3737650023 | Program output: 6.0216        
Correct output: 80.422971733   | Program output: 65.0275       
Correct output: -36.4331405664 | Program output: -7.0203       
Correct output: 49.2855176563  | Program output: 59.0269       
Correct output: 5.2530048743   | Program output: -67.0127      
Correct output: -14.5307262538 | Program output: -40.0154      
Correct output: 174.8425999229 | Program output: 67.0277       
Correct output: 94.2858027683  | Program output: 78.0288       
Correct output: -32.1580651662 | Program output: 42.0252       
Correct output: 34.2563324554  | Program output: 45.0255       
Correct output: -34.3108385906 | Program output: -70.0124      
Correct output: -25.5420796562 | Program output: 29.0239       
Correct output: 40.5609747923  | Program output: 68.0278       
Correct output: -146.3905253753 | Program output: -74.0120      
Correct output: 125.2745939078 | Program output: 47.0257       
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction -8} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_div} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction float_flush} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_add} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_swap} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_stackdepth})
Best program: (float_yankdup integer_fromfloat float_rot integer_swap integer_add in2 integer_shove float_dec 46.73998848521251 integer_stackdepth float_rot integer_swap integer_add in2 integer_swap float_dec 46.73998848521251 -8 float_pop float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_shove float_frominteger in2 integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod float_div integer_stackdepth integer_sub tagged_920 integer_sub integer_mod float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth tagged_920 integer_sub integer_shove float_frominteger in2 integer_sub integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth float_flush float_flush 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_rot integer_add tagged_920 integer_sub integer_mod print_integer integer_swap integer_yank float_dup_times float_stackdepth)
Errors: [19.3821 10 44.8717 10 70.2806 9 18.434 11 64.4068 11 8.4599 9 48.8109 9 4.924 10 65.5791 10 7.3757 11 71.3954 11 15.3955 9 29.4128 11 9.7414 10 72.2657 10 25.4847 10 107.8149 11 16.257 9 74.1833 9 10.7692 8 35.7016 11 54.566 10 27.4668 10 72.3785 10 78.2489 11]
Total: 1303.6064999999999
Mean: 26.07213
Genome size: 92
Size: 93
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4326.9939966
Median total errors in population: 1312.667
Error averages by case: (145.33521640000015 11.141 161.96310970000002 10.32 182.62126539999875 9.447 139.49252549999898 10.377 196.98798419999844 10.784 152.3769010999993 9.425 142.6497109999992 9.375 116.6662621000015 10.899 178.6202889000013 9.716 156.63511170000112 11.075 177.6359574000001 11.322 137.74221260000016 9.307 139.66919390000044 10.828 138.16679089999937 11.066 191.1940788999988 9.826 152.75835080000056 10.007 214.74332649999877 11.517 149.39551330000037 9.225 181.96710230000133 10.671 135.1357877999994 9.571 166.19504000000035 10.15 164.11186890000053 10.782 151.43181839999826 10.121 209.16754889999882 11.197 185.06703000000215 11.115)
Error minima by case: (7.4482 9 8.1283 8 6.1679 7 0.3673 8 15.4068 8 0.4566 7 1.7916 8 0.0744 9 1.4664 8 2.3757 8 19.3522 9 0.329 7 3.4128 8 7.7414 9 0.159 8 0.4847 7 5.1574 10 0.1918 7 13.1329 8 8.7692 8 18.2984 7 6.5182 9 16.533 8 1.3785 9 0.2489 8)
Average genome size in population (length): 94.007
Average program size in population (points): 95.007
Average percent parens in population: 0.011
Minimum age in population: 36.11506271362305
Maximum age in population: 40.95936463773251
Average age in population: 39.01290926131606
Median age in population: 39.01847833395004
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.858
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.858
Total error diversity:				 0.377
Error (vector) diversity:			 0.448
Behavioral diversity:				 0.448
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 51804942
--- Timings ---
Current time: 1529615666170 milliseconds
Total Time:          98.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        37.6 seconds, 38.3%
Fitness Testing:     47.2 seconds, 48.1%
Report:              13.2 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Number IO problem report - generation 28
Test total error for best: 60638.10399999999
Test mean error for best: 30.31905
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 69.02790      
Correct output: 24.1561588797  | Program output: 69.02790      
Correct output: 63.2618741651  | Program output: -3.01870      
Correct output: 81.4613344804  | Program output: 63.02730      
Correct output: -116.4209784668 | Program output: -48.01420     
Correct output: -80.5506083936 | Program output: -85.01050     
Correct output: 41.7915986532  | Program output: -5.01930      
Correct output: -6.9439752137  | Program output: -2.02000      
Correct output: 58.5604070006  | Program output: -3.01870      
Correct output: -105.4717093128 | Program output: -94.0960      
Correct output: -65.3737650023 | Program output: 6.02160       
Correct output: 80.422971733   | Program output: 65.02750      
Correct output: -36.4331405664 | Program output: 0.02030       
Correct output: 49.2855176563  | Program output: 59.02690      
Correct output: 5.2530048743   | Program output: -63.01270     
Correct output: -14.5307262538 | Program output: -36.01540     
Correct output: 174.8425999229 | Program output: 67.02770      
Correct output: 94.2858027683  | Program output: 78.02880      
Correct output: -32.1580651662 | Program output: 42.02520      
Correct output: 34.2563324554  | Program output: 45.02550      
Correct output: -34.3108385906 | Program output: -66.01240     
Correct output: -25.5420796562 | Program output: 29.02390      
Correct output: 40.5609747923  | Program output: 68.02780      
Correct output: -146.3905253753 | Program output: -70.01200     
Correct output: 125.2745939078 | Program output: 47.02570      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_add} {:instruction in2} {:instruction float_max} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction -8} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_1007} {:instruction integer_sub} {:instruction float_cos} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_flush} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_add} {:instruction tagged_938} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction float_sub} {:instruction integer_add} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_max} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_add} {:instruction integer_pop} {:instruction 98} {:instruction -78} {:instruction float_flush} {:instruction integer_swap} {:instruction float_mult} {:instruction float_mod} {:instruction integer_yank} {:instruction float_dup_times} {:instruction integer_yankdup})
Best program: (float_yankdup integer_fromfloat integer_dup_times print_float float_stackdepth integer_stackdepth float_rot integer_swap integer_add in2 float_max integer_add in2 integer_swap float_dec 46.73998848521251 -8 float_pop float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_shove float_frominteger in2 integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_1007 integer_sub float_cos integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_shove float_frominteger in2 integer_sub integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth float_rot float_flush 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_rot integer_add tagged_938 integer_sub integer_mod print_integer float_sub integer_add integer_dup float_stackdepth print_integer float_max float_div float_frominteger integer_add integer_pop 98 -78 float_flush integer_swap float_mult float_mod integer_yank float_dup_times integer_yankdup)
Errors: [19.3821 10 44.8717 10 66.2806 8 18.434 10 68.4068 11 4.4599 9 46.8109 9 4.924 10 61.5791 9 11.3757 11 71.3954 10 15.3955 9 36.4534 12 9.7414 10 68.2657 9 21.4847 10 107.8149 11 16.257 9 74.1833 10 10.7692 8 31.7016 10 54.566 10 27.4668 10 76.3785 11 78.2489 11]
Total: 1293.6471
Mean: 25.872942
Genome size: 96
Size: 97
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4152.887854799998
Median total errors in population: 1312.8537999999999
Error averages by case: (135.7099213000008 11.057 152.81937500000043 10.357 182.3463195999987 9.494 129.98950419999852 10.455 194.6945152999985 10.754 149.56069599999967 9.455 138.12336579999905 9.35 106.00799510000101 10.697 178.38765660000138 9.744 156.12642320000091 11.018 168.4482556 11.298 127.5277749999995 9.318 130.12149920000084 10.849 127.9420481999994 10.976 188.57417159999923 9.933 150.93595060000044 9.965 205.55531649999895 11.574 131.8335903999993 9.255 172.42824100000138 10.418 125.46022969999919 9.382 163.45680530000013 10.228 153.9742344000007 10.726 140.93797919999832 10.089 206.7234137999991 11.141 176.53157220000222 11.138)
Error minima by case: (2.9058 9 5.8717 8 1.0 3 0.3773 8 3.579 5 0.4494 8 1.7916 4 0.056 4 1.0 3 3.3757 4 4.6262 4 0.337 7 4.4128 4 2.5455 8 0.2248 4 0.5153 7 1.1574 4 0.2858 7 11.1329 4 7.8097 8 1.2984 6 4.5182 4 6.179 8 11.3785 5 28.2489 5)
Average genome size in population (length): 92.836
Average program size in population (points): 93.836
Average percent parens in population: 0.011
Minimum age in population: 38.38962456583977
Maximum age in population: 42.36025303602219
Average age in population: 40.48919952237606
Median age in population: 40.53637840598822
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 33
Genome diversity (% unique Plush genomes):	 0.845
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.845
Total error diversity:				 0.381
Error (vector) diversity:			 0.451
Behavioral diversity:				 0.451
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 54126542
--- Timings ---
Current time: 1529615670144 milliseconds
Total Time:         102.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        39.0 seconds, 38.2%
Fitness Testing:     49.2 seconds, 48.2%
Report:              13.8 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Number IO problem report - generation 29
Test total error for best: 60582.893599999996
Test mean error for best: 30.29145
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 69.02790      
Correct output: 24.1561588797  | Program output: 69.02790      
Correct output: 63.2618741651  | Program output: -1.01870      
Correct output: 81.4613344804  | Program output: 63.02730      
Correct output: -116.4209784668 | Program output: -46.01420     
Correct output: -80.5506083936 | Program output: -83.01050     
Correct output: 41.7915986532  | Program output: -2.01930      
Correct output: -6.9439752137  | Program output: 0.02000       
Correct output: 58.5604070006  | Program output: -1.01870      
Correct output: -105.4717093128 | Program output: -92.0960      
Correct output: -65.3737650023 | Program output: 6.02160       
Correct output: 80.422971733   | Program output: 65.02750      
Correct output: -36.4331405664 | Program output: 3.02030       
Correct output: 49.2855176563  | Program output: 59.02690      
Correct output: 5.2530048743   | Program output: -61.01270     
Correct output: -14.5307262538 | Program output: -34.01540     
Correct output: 174.8425999229 | Program output: 67.02770      
Correct output: 94.2858027683  | Program output: 78.02880      
Correct output: -32.1580651662 | Program output: 42.02520      
Correct output: 34.2563324554  | Program output: 45.02550      
Correct output: -34.3108385906 | Program output: -64.01240     
Correct output: -25.5420796562 | Program output: 29.02390      
Correct output: 40.5609747923  | Program output: 68.02780      
Correct output: -146.3905253753 | Program output: -68.01200     
Correct output: 125.2745939078 | Program output: 47.02570      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction -8} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_sin} {:instruction float_frominteger} {:instruction in2} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_flush} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_add} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_add} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_swap} {:instruction integer_add} {:instruction float_div} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_min} {:instruction -78} {:instruction float_flush} {:instruction integer_swap} {:instruction float_mult} {:instruction float_mod} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_stackdepth})
Best program: (float_yankdup integer_fromfloat float_rot float_frominteger integer_add in2 integer_shove float_dec 46.73998848521251 integer_stackdepth integer_add in2 integer_swap float_dec 46.73998848521251 -8 float_pop float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_shove float_frominteger in2 integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod float_pop integer_stackdepth integer_sub integer_sub float_sin float_frominteger in2 integer_sub integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth float_rot float_flush 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_rot integer_add tagged_920 integer_sub integer_mod print_integer integer_add integer_dup float_stackdepth float_yank float_max float_div integer_mod print_integer integer_swap integer_add float_div float_stackdepth float_yank float_max float_div float_frominteger integer_pop integer_pop integer_min -78 float_flush integer_swap float_mult float_mod integer_yank float_dup_times float_stackdepth)
Errors: [19.3821 10 44.8717 10 64.2806 9 18.434 10 70.4068 10 2.4599 9 43.8109 9 6.964 11 59.5791 9 13.3757 11 71.3954 10 15.3955 9 39.4534 11 9.7414 10 66.2657 10 19.4847 9 107.8149 11 16.257 9 74.1833 10 10.7692 8 29.7016 9 54.566 10 27.4668 10 78.3785 11 78.2489 11]
Total: 1288.6870999999999
Mean: 25.773743
Genome size: 99
Size: 100
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4400.746909499999
Median total errors in population: 1315.6464999999998
Error averages by case: (143.14405520000082 11.024 159.28152870000073 10.394 194.1889919999991 9.643 138.44446869999862 10.61 208.5397683999986 10.885 169.4039710999996 9.596 142.7489498999989 9.534 111.87764050000064 10.557 190.35726970000115 9.954 174.177526800001 11.043 171.87256899999986 11.363 136.91520179999986 9.447 135.7116861000004 10.977 134.08242439999952 10.966 204.7087239999987 10.032 165.80555370000044 10.163 213.70989979999888 11.695 147.04058489999971 9.463 176.00600710000114 10.253 130.56046019999897 9.396 181.0604629000002 10.516 158.17185770000094 10.765 147.97623769999834 10.189 221.5547467999989 11.168 182.5433224000022 11.23)
Error minima by case: (4.5585 9 6.1562 8 1.0 5 0.3673 8 6.4068 7 0.4599 8 1.7916 6 0.076 6 1.0 5 2.3757 4 17.3522 5 0.329 7 1.4128 6 4.1982 9 1.2345 6 0.4847 7 2.1574 7 0.257 7 10.1329 6 6.7692 8 3.2984 6 3.5182 6 4.5263 8 2.3785 7 9.2746 7)
Average genome size in population (length): 92.145
Average program size in population (points): 93.145
Average percent parens in population: 0.011
Minimum age in population: 39.66431187093258
Maximum age in population: 43.64039650931954
Average age in population: 41.86656812216714
Median age in population: 41.91893458738923
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.854
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.854
Total error diversity:				 0.382
Error (vector) diversity:			 0.468
Behavioral diversity:				 0.469
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 56430492
--- Timings ---
Current time: 1529615674087 milliseconds
Total Time:         106.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        40.4 seconds, 38.1%
Fitness Testing:     51.2 seconds, 48.3%
Report:              14.3 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Number IO problem report - generation 30
Test total error for best: 60582.893599999996
Test mean error for best: 30.29145
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 69.02790      
Correct output: 24.1561588797  | Program output: 69.02790      
Correct output: 63.2618741651  | Program output: -1.01870      
Correct output: 81.4613344804  | Program output: 63.02730      
Correct output: -116.4209784668 | Program output: -46.01420     
Correct output: -80.5506083936 | Program output: -83.01050     
Correct output: 41.7915986532  | Program output: -2.01930      
Correct output: -6.9439752137  | Program output: 0.02000       
Correct output: 58.5604070006  | Program output: -1.01870      
Correct output: -105.4717093128 | Program output: -92.0960      
Correct output: -65.3737650023 | Program output: 6.02160       
Correct output: 80.422971733   | Program output: 65.02750      
Correct output: -36.4331405664 | Program output: 3.02030       
Correct output: 49.2855176563  | Program output: 59.02690      
Correct output: 5.2530048743   | Program output: -61.01270     
Correct output: -14.5307262538 | Program output: -34.01540     
Correct output: 174.8425999229 | Program output: 67.02770      
Correct output: 94.2858027683  | Program output: 78.02880      
Correct output: -32.1580651662 | Program output: 42.02520      
Correct output: 34.2563324554  | Program output: 45.02550      
Correct output: -34.3108385906 | Program output: -64.01240     
Correct output: -25.5420796562 | Program output: 29.02390      
Correct output: 40.5609747923  | Program output: 68.02780      
Correct output: -146.3905253753 | Program output: -68.01200     
Correct output: 125.2745939078 | Program output: 47.02570      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction -8} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_sin} {:instruction float_frominteger} {:instruction in2} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_flush} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_add} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_add} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_swap} {:instruction integer_add} {:instruction float_div} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_min} {:instruction -78} {:instruction float_flush} {:instruction integer_swap} {:instruction float_mult} {:instruction float_mod} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_stackdepth})
Best program: (float_yankdup integer_fromfloat float_rot float_frominteger integer_add in2 integer_shove float_dec 46.73998848521251 integer_stackdepth integer_add in2 integer_swap float_dec 46.73998848521251 -8 float_pop float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_shove float_frominteger in2 integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod float_pop integer_stackdepth integer_sub integer_sub float_sin float_frominteger in2 integer_sub integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth float_rot float_flush 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_rot integer_add tagged_920 integer_sub integer_mod print_integer integer_add integer_dup float_stackdepth float_yank float_max float_div integer_mod print_integer integer_swap integer_add float_div float_stackdepth float_yank float_max float_div float_frominteger integer_pop integer_pop integer_min -78 float_flush integer_swap float_mult float_mod integer_yank float_dup_times float_stackdepth)
Errors: [19.3821 10 44.8717 10 64.2806 9 18.434 10 70.4068 10 2.4599 9 43.8109 9 6.964 11 59.5791 9 13.3757 11 71.3954 10 15.3955 9 39.4534 11 9.7414 10 66.2657 10 19.4847 9 107.8149 11 16.257 9 74.1833 10 10.7692 8 29.7016 9 54.566 10 27.4668 10 78.3785 11 78.2489 11]
Total: 1288.6870999999999
Mean: 25.773743
Genome size: 99
Size: 100
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4034.7058002999997
Median total errors in population: 1313.6671000000001
Error averages by case: (130.397744800001 10.92 146.95408630000054 10.332 177.634525699999 9.611 127.44911439999822 10.619 186.3752359999985 10.949 143.10775009999986 9.547 138.89924669999888 9.573 105.18098200000033 10.432 173.64295240000135 9.911 144.17404680000104 10.982 164.6155030999999 11.265 125.61799059999966 9.386 130.70256280000066 11.068 122.00350339999945 10.851 179.76282169999902 10.013 142.65539470000047 10.153 203.64370939999898 11.672 133.18515239999903 9.433 166.39781940000125 10.107 119.57321739999885 9.187 155.63066380000018 10.58 149.23695370000112 10.666 135.43248789999814 10.146 198.64150609999908 11.046 174.13982870000223 11.202)
Error minima by case: (5.9058 9 9.1283 8 19.5219 8 0.3673 8 16.4068 6 0.4599 7 1.7916 8 0.0726 5 14.8204 7 1.3757 4 4.6262 5 0.328 7 5.4128 5 4.7414 8 1.7597 8 0.4693 7 0.1851 9 0.1978 7 8.8671 5 2.6011 8 14.2923 8 2.4818 5 3.179 8 2.3785 6 9.7511 9)
Average genome size in population (length): 93.39
Average program size in population (points): 94.39
Average percent parens in population: 0.011
Minimum age in population: 40.94539771974087
Maximum age in population: 45.22903697565198
Average age in population: 43.14013404054381
Median age in population: 43.17969722487032
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.852
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.852
Total error diversity:				 0.396
Error (vector) diversity:			 0.483
Behavioral diversity:				 0.483
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 58765592
--- Timings ---
Current time: 1529615678083 milliseconds
Total Time:         110.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        41.7 seconds, 37.9%
Fitness Testing:     53.3 seconds, 48.5%
Report:              14.9 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Number IO problem report - generation 31
Test total error for best: 66307.03809999999
Test mean error for best: 33.15352
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 60.0830       
Correct output: 24.1561588797  | Program output: 60.0830       
Correct output: 63.2618741651  | Program output: -4.01820      
Correct output: 81.4613344804  | Program output: 54.0890       
Correct output: -116.4209784668 | Program output: -49.02260     
Correct output: -80.5506083936 | Program output: -86.02620     
Correct output: 41.7915986532  | Program output: 2.01740       
Correct output: -6.9439752137  | Program output: -3.01620      
Correct output: 58.5604070006  | Program output: -4.01820      
Correct output: -105.4717093128 | Program output: -95.02720     
Correct output: -65.3737650023 | Program output: -3.01460      
Correct output: 80.422971733   | Program output: 56.0870       
Correct output: -36.4331405664 | Program output: -2.01590      
Correct output: 49.2855176563  | Program output: 50.0930       
Correct output: 5.2530048743   | Program output: -64.02420     
Correct output: -14.5307262538 | Program output: -37.02120     
Correct output: 174.8425999229 | Program output: 58.0850       
Correct output: 94.2858027683  | Program output: 69.0740       
Correct output: -32.1580651662 | Program output: 33.01100      
Correct output: 34.2563324554  | Program output: 36.01070      
Correct output: -34.3108385906 | Program output: -67.02470     
Correct output: -25.5420796562 | Program output: 20.01230      
Correct output: 40.5609747923  | Program output: 59.0840       
Correct output: -146.3905253753 | Program output: -71.02500     
Correct output: 125.2745939078 | Program output: 38.01050      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction tag_float_338} {:instruction print_float} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction -8} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_dup_items} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_inc} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_flush} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_add} {:instruction tagged_986} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_max} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_min} {:instruction -78} {:instruction float_flush} {:instruction float_rot} {:instruction float_pop} {:instruction float_mod} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_stackdepth})
Best program: (float_yankdup integer_fromfloat tag_float_338 print_float float_stackdepth integer_stackdepth float_rot integer_swap integer_add in2 integer_swap integer_add in2 integer_swap float_dec 46.73998848521251 -8 float_pop float_pop integer_stackdepth integer_sub float_pop integer_stackdepth integer_dup_items integer_rot integer_stackdepth tagged_920 integer_sub integer_shove float_frominteger in2 integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_shove float_frominteger in2 integer_sub integer_yankdup integer_rot print_float float_inc 95 float_mod integer_stackdepth float_rot float_flush 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_rot integer_add tagged_986 integer_sub integer_mod print_integer integer_swap float_stackdepth integer_add integer_dup float_stackdepth print_integer float_max float_div float_frominteger integer_pop integer_pop integer_min -78 float_flush float_rot float_pop float_mod integer_yank float_dup_times float_stackdepth)
Errors: [10.4372 12 35.9268 11 67.2801 10 27.3723 11 67.3984 11 5.4756 10 39.7742 11 3.9278 10 62.5786 10 10.4445 10 62.3592 10 24.336 10 34.4172 10 0.8075 12 69.2772 10 22.4905 9 116.7576 12 25.2118 10 65.1691 10 1.7544 11 32.7139 10 45.5544 11 18.523 10 75.3655 10 87.2641 11]
Total: 1274.6169000000002
Mean: 25.492338
Genome size: 110
Size: 111
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4524.824057099999
Median total errors in population: 1309.6464999999998
Error averages by case: (153.21083260000034 10.83 169.88308319999996 10.342 195.22776469999897 9.616 149.497086199999 10.537 202.61844999999835 11.017 163.47796639999947 9.528 153.84697949999958 9.596 121.13827940000037 10.394 191.3255197000012 9.942 168.28730610000113 10.927 179.00370700000025 11.188 148.5987116000003 9.394 144.44457930000024 11.154 142.57396209999942 10.75 200.53569129999892 10.006 160.80328880000044 10.135 226.048928299999 11.667 159.22377500000042 9.432 185.11689200000131 10.087 139.43356409999907 9.147 175.82749590000006 10.534 167.26572680000018 10.537 158.25063839999805 10.16 215.84832289999895 10.951 194.25150580000218 11.213)
Error minima by case: (2.9058 9 0.8717 9 7.7571 7 0.3673 8 23.3866 8 0.4494 7 0.7916 8 0.076 8 11.8204 8 0.5283 8 4.6262 9 0.329 7 0.4128 8 0.8075 8 0.2403 8 0.4717 7 7.8242 10 0.1918 7 9.1329 8 1.7544 8 2.2984 8 2.5182 8 5.179 8 16.3905 8 21.7418 9)
Average genome size in population (length): 95.368
Average program size in population (points): 96.368
Average percent parens in population: 0.010
Minimum age in population: 42.03670892119408
Maximum age in population: 46.54312951955944
Average age in population: 44.50995102191623
Median age in population: 44.55839721113443
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.844
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.844
Total error diversity:				 0.383
Error (vector) diversity:			 0.483
Behavioral diversity:				 0.483
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 61150117
--- Timings ---
Current time: 1529615682207 milliseconds
Total Time:         114.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        43.1 seconds, 37.8%
Fitness Testing:     55.4 seconds, 48.6%
Report:              15.4 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Number IO problem report - generation 32
Test total error for best: 66307.03809999999
Test mean error for best: 33.15352
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 60.0830       
Correct output: 24.1561588797  | Program output: 60.0830       
Correct output: 63.2618741651  | Program output: -4.01820      
Correct output: 81.4613344804  | Program output: 54.0890       
Correct output: -116.4209784668 | Program output: -49.02260     
Correct output: -80.5506083936 | Program output: -86.02620     
Correct output: 41.7915986532  | Program output: 2.01740       
Correct output: -6.9439752137  | Program output: -3.01620      
Correct output: 58.5604070006  | Program output: -4.01820      
Correct output: -105.4717093128 | Program output: -95.02720     
Correct output: -65.3737650023 | Program output: -3.01460      
Correct output: 80.422971733   | Program output: 56.0870       
Correct output: -36.4331405664 | Program output: -2.01590      
Correct output: 49.2855176563  | Program output: 50.0930       
Correct output: 5.2530048743   | Program output: -64.02420     
Correct output: -14.5307262538 | Program output: -37.02120     
Correct output: 174.8425999229 | Program output: 58.0850       
Correct output: 94.2858027683  | Program output: 69.0740       
Correct output: -32.1580651662 | Program output: 33.01100      
Correct output: 34.2563324554  | Program output: 36.01070      
Correct output: -34.3108385906 | Program output: -67.02470     
Correct output: -25.5420796562 | Program output: 20.01230      
Correct output: 40.5609747923  | Program output: 59.0840       
Correct output: -146.3905253753 | Program output: -71.02500     
Correct output: 125.2745939078 | Program output: 38.01050      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction tag_float_338} {:instruction print_float} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction -8} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_dup_items} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_inc} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_flush} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_add} {:instruction tagged_986} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_max} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_min} {:instruction -78} {:instruction float_flush} {:instruction float_rot} {:instruction float_pop} {:instruction float_mod} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_stackdepth})
Best program: (float_yankdup integer_fromfloat tag_float_338 print_float float_stackdepth integer_stackdepth float_rot integer_swap integer_add in2 integer_swap integer_add in2 integer_swap float_dec 46.73998848521251 -8 float_pop float_pop integer_stackdepth integer_sub float_pop integer_stackdepth integer_dup_items integer_rot integer_stackdepth tagged_920 integer_sub integer_shove float_frominteger in2 integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_shove float_frominteger in2 integer_sub integer_yankdup integer_rot print_float float_inc 95 float_mod integer_stackdepth float_rot float_flush 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_rot integer_add tagged_986 integer_sub integer_mod print_integer integer_swap float_stackdepth integer_add integer_dup float_stackdepth print_integer float_max float_div float_frominteger integer_pop integer_pop integer_min -78 float_flush float_rot float_pop float_mod integer_yank float_dup_times float_stackdepth)
Errors: [10.4372 12 35.9268 11 67.2801 10 27.3723 11 67.3984 11 5.4756 10 39.7742 11 3.9278 10 62.5786 10 10.4445 10 62.3592 10 24.336 10 34.4172 10 0.8075 12 69.2772 10 22.4905 9 116.7576 12 25.2118 10 65.1691 10 1.7544 11 32.7139 10 45.5544 11 18.523 10 75.3655 10 87.2641 11]
Total: 1274.6169000000002
Mean: 25.492338
Genome size: 110
Size: 111
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4096.987779000002
Median total errors in population: 1307.7918
Error averages by case: (133.85423700000072 10.782 150.41666600000025 10.336 179.45332079999895 9.608 132.57961309999817 10.472 190.27536769999864 11.026 149.50569069999972 9.543 136.5315179999987 9.615 99.8753396000004 10.428 175.45234440000107 9.806 153.6913816000012 10.972 158.78502930000005 11.012 130.91817239999952 9.381 125.82909060000007 11.278 124.62731159999944 10.737 186.79873719999864 9.928 146.92939930000048 10.142 209.63483849999915 11.657 140.30135209999958 9.406 165.26280430000122 10.186 120.21297379999918 9.217 161.0031120000001 10.438 148.07833070000063 10.441 137.83818269999824 10.176 202.3793693999992 10.949 178.09859620000242 11.119)
Error minima by case: (2.9058 9 3.1283 8 15.2619 7 0.434 8 6.421 9 0.4598 8 1.7916 8 0.056 9 10.5604 6 1.3757 8 14.3522 8 0.3277 7 0.5872 8 0.7145 7 0.7848 8 0.4847 8 6.1574 10 0.1918 7 6.1329 8 1.7437 8 10.7016 8 3.5182 9 6.179 8 3.3905 9 12.2746 9)
Average genome size in population (length): 97.456
Average program size in population (points): 98.456
Average percent parens in population: 0.010
Minimum age in population: 43.4738087952137
Maximum age in population: 47.86543779121712
Average age in population: 45.76981728422875
Median age in population: 45.80094161699526
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.863
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.863
Total error diversity:				 0.409
Error (vector) diversity:			 0.52
Behavioral diversity:				 0.52
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 63587217
--- Timings ---
Current time: 1529615686332 milliseconds
Total Time:         118.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        44.5 seconds, 37.6%
Fitness Testing:     57.5 seconds, 48.6%
Report:              16.1 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Number IO problem report - generation 33
Test total error for best: 61809.49059999999
Test mean error for best: 30.90475
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 60.02790      
Correct output: 24.1561588797  | Program output: 60.02790      
Correct output: 63.2618741651  | Program output: -4.01870      
Correct output: 81.4613344804  | Program output: 54.02730      
Correct output: -116.4209784668 | Program output: -49.01420     
Correct output: -80.5506083936 | Program output: -86.01050     
Correct output: 41.7915986532  | Program output: -4.01930      
Correct output: -6.9439752137  | Program output: -7.02000      
Correct output: 58.5604070006  | Program output: -4.01870      
Correct output: -105.4717093128 | Program output: -95.0960      
Correct output: -65.3737650023 | Program output: -3.02160      
Correct output: 80.422971733   | Program output: 56.02750      
Correct output: -36.4331405664 | Program output: -4.02030      
Correct output: 49.2855176563  | Program output: 50.02690      
Correct output: 5.2530048743   | Program output: -64.01270     
Correct output: -14.5307262538 | Program output: -37.01540     
Correct output: 174.8425999229 | Program output: 58.02770      
Correct output: 94.2858027683  | Program output: 69.02880      
Correct output: -32.1580651662 | Program output: 33.02520      
Correct output: 34.2563324554  | Program output: 36.02550      
Correct output: -34.3108385906 | Program output: -67.01240     
Correct output: -25.5420796562 | Program output: 20.02390      
Correct output: 40.5609747923  | Program output: 59.02780      
Correct output: -146.3905253753 | Program output: -71.01200     
Correct output: 125.2745939078 | Program output: 38.02570      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction -8} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_stackdepth} {:instruction integer_mod} {:instruction float_pop} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_sub} {:instruction float_dup} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_inc} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_flush} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_add} {:instruction tagged_986} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_max} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_min} {:instruction -78} {:instruction float_flush} {:instruction float_rot} {:instruction float_mult} {:instruction float_mod} {:instruction integer_yank} {:instruction float_dup} {:instruction float_stackdepth})
Best program: (float_yankdup integer_fromfloat float_rot float_frominteger integer_add in2 integer_shove float_dec 46.73998848521251 integer_stackdepth integer_add in2 integer_swap float_dec 46.73998848521251 -8 float_pop float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_shove float_frominteger in2 integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_stackdepth integer_mod float_pop float_swap integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth float_min integer_sub float_dup integer_stackdepth tagged_920 integer_sub integer_mod float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_shove float_frominteger in2 integer_sub integer_yankdup integer_rot print_float float_inc 95 float_mod integer_stackdepth float_rot float_flush 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_rot integer_add tagged_986 integer_sub integer_mod print_integer float_rot float_stackdepth integer_add integer_dup float_stackdepth print_integer float_max float_stackdepth float_frominteger integer_pop integer_pop integer_min -78 float_flush float_rot float_mult float_mod integer_yank float_dup float_stackdepth)
Errors: [10.3821 11 35.8717 10 67.2806 9 27.434 10 67.4068 11 5.4599 9 45.8109 9 0.076 10 62.5791 9 10.3757 10 62.3522 10 24.3955 9 32.4128 11 0.7414 11 69.2657 10 22.4847 10 116.8149 12 25.257 9 65.1833 10 1.7692 8 32.7016 10 45.566 10 18.4668 10 75.3785 11 87.2489 11]
Total: 1262.7152999999998
Mean: 25.254307
Genome size: 115
Size: 116
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4201.502827400001
Median total errors in population: 1305.6471
Error averages by case: (136.93487320000077 10.803 153.16083360000061 10.385 181.9533643999991 9.599 136.6605120999989 10.323 194.82717759999863 10.921 150.3004712000002 9.534 141.45555819999862 9.631 107.41389340000067 10.547 177.90537320000115 9.68 156.08701090000073 10.993 166.17389049999963 10.812 134.93489009999973 9.389 134.64052819999964 11.316 128.3132943999995 10.752 187.81553349999896 9.936 148.81769590000042 10.05 214.2582409999989 11.637 145.8449210999995 9.42 172.01284580000112 10.326 124.89552159999931 9.264 163.2363411000002 10.18 153.870762800001 10.396 141.17256339999864 10.14 207.1744114999989 11.082 183.4013187000018 11.125)
Error minima by case: (1.5518 9 0.1562 8 1.0 4 0.3673 8 17.4068 6 0.4494 8 1.7916 5 0.056 5 1.0 4 2.3757 5 5.6478 5 0.329 7 1.3391 5 0.7145 8 1.2403 5 0.4847 7 3.1851 6 0.1918 7 11.1329 5 0.1623 7 0.7016 7 0.4818 5 5.179 8 3.3785 6 9.2746 6)
Average genome size in population (length): 98.844
Average program size in population (points): 99.844
Average percent parens in population: 0.010
Minimum age in population: 44.4738087952137
Maximum age in population: 49.11947115254588
Average age in population: 47.03065685678856
Median age in population: 47.0676419637166
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.866
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.866
Total error diversity:				 0.45
Error (vector) diversity:			 0.546
Behavioral diversity:				 0.546
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 66058942
--- Timings ---
Current time: 1529615690526 milliseconds
Total Time:         122.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        45.8 seconds, 37.4%
Fitness Testing:     59.7 seconds, 48.7%
Report:              16.8 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Number IO problem report - generation 34
Test total error for best: 61591.68559999997
Test mean error for best: 30.79584
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 61.02790      
Correct output: 24.1561588797  | Program output: 61.02790      
Correct output: 63.2618741651  | Program output: -1.01870      
Correct output: 81.4613344804  | Program output: 55.02730      
Correct output: -116.4209784668 | Program output: -46.01420     
Correct output: -80.5506083936 | Program output: -83.01050     
Correct output: 41.7915986532  | Program output: -12.01930     
Correct output: -6.9439752137  | Program output: -6.02000      
Correct output: 58.5604070006  | Program output: -1.01870      
Correct output: -105.4717093128 | Program output: -92.0960      
Correct output: -65.3737650023 | Program output: 8.02160       
Correct output: 80.422971733   | Program output: 57.02750      
Correct output: -36.4331405664 | Program output: -3.02030      
Correct output: 49.2855176563  | Program output: 51.02690      
Correct output: 5.2530048743   | Program output: -61.01270     
Correct output: -14.5307262538 | Program output: -34.01540     
Correct output: 174.8425999229 | Program output: 59.02770      
Correct output: 94.2858027683  | Program output: 70.02880      
Correct output: -32.1580651662 | Program output: 34.02520      
Correct output: 34.2563324554  | Program output: 37.02550      
Correct output: -34.3108385906 | Program output: -64.01240     
Correct output: -25.5420796562 | Program output: 21.02390      
Correct output: 40.5609747923  | Program output: 60.02780      
Correct output: -146.3905253753 | Program output: -68.01200     
Correct output: 125.2745939078 | Program output: 39.02570      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction -8} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_sin} {:instruction float_frominteger} {:instruction in2} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_dup_times} {:instruction float_flush} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_add} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_add} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_swap} {:instruction integer_add} {:instruction float_div} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_min} {:instruction -78} {:instruction float_flush} {:instruction integer_swap} {:instruction float_mult} {:instruction float_mod} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_stackdepth})
Best program: (float_yankdup integer_fromfloat float_rot float_frominteger integer_add in2 integer_shove float_dec 46.73998848521251 integer_stackdepth integer_add in2 integer_swap float_dec 46.73998848521251 -8 float_pop float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_shove float_frominteger in2 integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod float_pop integer_stackdepth integer_sub integer_sub float_sin float_frominteger in2 integer_sub integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth float_dup_times float_flush 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_rot integer_add tagged_920 integer_sub integer_mod print_integer integer_add integer_dup float_stackdepth float_yank float_max float_div integer_mod print_integer integer_swap integer_add float_div float_stackdepth float_yank float_max float_div float_frominteger integer_pop integer_pop integer_min -78 float_flush integer_swap float_mult float_mod integer_yank float_dup_times float_stackdepth)
Errors: [11.3821 11 36.8717 9 64.2806 9 26.434 10 70.4068 10 2.4599 9 53.8109 9 0.924 9 59.5791 9 13.3757 11 73.3954 11 23.3955 9 33.4128 10 1.7414 11 66.2657 10 19.4847 9 115.8149 12 24.257 9 66.1833 10 2.7692 8 29.7016 9 46.566 10 19.4668 9 78.3785 11 86.2489 11]
Total: 1271.6064999999999
Mean: 25.43213
Genome size: 111
Size: 112
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4316.136324499999
Median total errors in population: 1307.6581
Error averages by case: (147.46983029999984 10.804 160.98106179999982 10.446 177.15435389999897 9.666 149.32478349999954 10.291 194.25632179999855 10.794 147.83075409999935 9.59 148.4669356999999 9.683 115.89386620000109 10.633 173.07133150000115 9.62 154.38143620000127 11.009 172.86638390000027 10.723 147.7027894000009 9.399 141.29302189999973 11.162 138.9154213999993 10.774 182.19973009999862 9.874 145.82047350000042 9.966 226.73939199999907 11.674 156.118931800001 9.447 174.37137940000142 10.351 134.24073189999922 9.346 159.1459580000002 9.955 158.29463100000038 10.36 151.42671109999816 10.164 205.8413663999986 11.161 194.3367277000021 11.1)
Error minima by case: (8.3542 8 0.8717 8 1.8321 7 0.3693 8 16.4068 9 0.4599 8 0.7916 8 0.056 9 1.4396 7 0.3757 8 1.3538 9 0.3955 7 0.5872 9 0.2586 8 0.159 8 0.4847 7 10.8426 10 0.1908 6 4.8671 8 0.1623 7 4.2617 7 1.4481 9 15.5332 8 2.3741 9 38.7254 9)
Average genome size in population (length): 99.696
Average program size in population (points): 100.696
Average percent parens in population: 0.010
Minimum age in population: 45.4738087952137
Maximum age in population: 50.31040446518455
Average age in population: 48.36788448693603
Median age in population: 48.41715850611217
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.88
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.88
Total error diversity:				 0.467
Error (vector) diversity:			 0.545
Behavioral diversity:				 0.545
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 68551867
--- Timings ---
Current time: 1529615694653 milliseconds
Total Time:         126.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        47.2 seconds, 37.3%
Fitness Testing:     61.8 seconds, 48.8%
Report:              17.4 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Number IO problem report - generation 35
Test total error for best: 61591.68559999997
Test mean error for best: 30.79584
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 61.02790      
Correct output: 24.1561588797  | Program output: 61.02790      
Correct output: 63.2618741651  | Program output: -1.01870      
Correct output: 81.4613344804  | Program output: 55.02730      
Correct output: -116.4209784668 | Program output: -46.01420     
Correct output: -80.5506083936 | Program output: -83.01050     
Correct output: 41.7915986532  | Program output: -12.01930     
Correct output: -6.9439752137  | Program output: -6.02000      
Correct output: 58.5604070006  | Program output: -1.01870      
Correct output: -105.4717093128 | Program output: -92.0960      
Correct output: -65.3737650023 | Program output: 8.02160       
Correct output: 80.422971733   | Program output: 57.02750      
Correct output: -36.4331405664 | Program output: -3.02030      
Correct output: 49.2855176563  | Program output: 51.02690      
Correct output: 5.2530048743   | Program output: -61.01270     
Correct output: -14.5307262538 | Program output: -34.01540     
Correct output: 174.8425999229 | Program output: 59.02770      
Correct output: 94.2858027683  | Program output: 70.02880      
Correct output: -32.1580651662 | Program output: 34.02520      
Correct output: 34.2563324554  | Program output: 37.02550      
Correct output: -34.3108385906 | Program output: -64.01240     
Correct output: -25.5420796562 | Program output: 21.02390      
Correct output: 40.5609747923  | Program output: 60.02780      
Correct output: -146.3905253753 | Program output: -68.01200     
Correct output: 125.2745939078 | Program output: 39.02570      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction -8} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_sin} {:instruction float_frominteger} {:instruction in2} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_dup_times} {:instruction float_flush} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_add} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_add} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_swap} {:instruction integer_add} {:instruction float_div} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_min} {:instruction -78} {:instruction float_flush} {:instruction integer_swap} {:instruction float_mult} {:instruction float_mod} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_stackdepth})
Best program: (float_yankdup integer_fromfloat float_rot float_frominteger integer_add in2 integer_shove float_dec float_dup_times integer_stackdepth integer_add in2 integer_swap float_dec 46.73998848521251 -8 float_pop float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_shove float_frominteger in2 integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod float_pop integer_stackdepth integer_sub integer_sub float_sin float_frominteger in2 integer_sub integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth float_dup_times float_flush 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_rot integer_add tagged_920 integer_sub integer_mod print_integer integer_add integer_dup float_stackdepth float_yank float_max float_div integer_mod print_integer integer_swap integer_add float_div float_stackdepth float_yank float_max float_div float_frominteger integer_pop integer_pop integer_min -78 float_flush integer_swap float_mult float_mod integer_yank float_dup_times float_stackdepth)
Errors: [11.3821 11 36.8717 9 64.2806 9 26.434 10 70.4068 10 2.4599 9 53.8109 9 0.924 9 59.5791 9 13.3757 11 73.3954 11 23.3955 9 33.4128 10 1.7414 11 66.2657 10 19.4847 9 115.8149 12 24.257 9 66.1833 10 2.7692 8 29.7016 9 46.566 10 19.4668 9 78.3785 11 86.2489 11]
Total: 1271.6064999999999
Mean: 25.43213
Genome size: 111
Size: 112
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4837.855844899995
Median total errors in population: 1303.4375999999997
Error averages by case: (164.9071443999998 10.889 179.00472499999967 10.445 202.02941859999905 9.699 167.33100910000007 10.311 221.01941489999862 10.8 179.30468449999907 9.596 161.59788260000033 9.7 129.96602120000105 10.659 198.06605440000124 9.694 187.35266160000154 11.009 186.26315500000013 10.826 165.77723020000118 9.46 155.14014869999966 11.013 156.11489339999952 10.821 211.86828009999832 9.936 174.31411880000056 9.922 242.66019029999896 11.714 178.93008380000126 9.552 191.3345919000015 10.303 150.75847819999967 9.394 189.05348920000029 9.979 173.06369420000004 10.412 168.9965265999983 10.216 234.28785789999853 11.227 209.97809030000192 11.159)
Error minima by case: (3.9058 8 0.0702 8 30.7381 8 0.3673 8 3.579 9 0.4599 8 0.7814 8 0.056 8 28.5604 7 0.3757 8 7.6478 8 0.329 7 0.4128 7 0.2086 8 0.2164 7 0.4847 7 3.1574 9 0.1868 6 0.8671 8 0.2308 7 4.3108 7 0.5182 8 0.561 8 3.3785 9 12.7254 9)
Average genome size in population (length): 100.293
Average program size in population (points): 101.293
Average percent parens in population: 0.010
Minimum age in population: 47.37875251518562
Maximum age in population: 51.58291400817689
Average age in population: 49.71762483495189
Median age in population: 49.74430722181569
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.893
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.893
Total error diversity:				 0.474
Error (vector) diversity:			 0.555
Behavioral diversity:				 0.555
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 71060167
--- Timings ---
Current time: 1529615698798 milliseconds
Total Time:         130.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        48.6 seconds, 37.2%
Fitness Testing:     63.9 seconds, 48.9%
Report:              18.1 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Number IO problem report - generation 36
Test total error for best: 62146.05979999995
Test mean error for best: 31.07303
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 55.02790      
Correct output: 24.1561588797  | Program output: 55.02790      
Correct output: 63.2618741651  | Program output: -1.01870      
Correct output: 81.4613344804  | Program output: 49.02730      
Correct output: -116.4209784668 | Program output: -46.01420     
Correct output: -80.5506083936 | Program output: -83.01050     
Correct output: 41.7915986532  | Program output: -5.01930      
Correct output: -6.9439752137  | Program output: -6.02000      
Correct output: 58.5604070006  | Program output: -1.01870      
Correct output: -105.4717093128 | Program output: -92.0960      
Correct output: -65.3737650023 | Program output: 2.02160       
Correct output: 80.422971733   | Program output: 51.02750      
Correct output: -36.4331405664 | Program output: -3.02030      
Correct output: 49.2855176563  | Program output: 45.02690      
Correct output: 5.2530048743   | Program output: -61.01270     
Correct output: -14.5307262538 | Program output: -34.01540     
Correct output: 174.8425999229 | Program output: 53.02770      
Correct output: 94.2858027683  | Program output: 64.02880      
Correct output: -32.1580651662 | Program output: 28.02520      
Correct output: 34.2563324554  | Program output: 31.02550      
Correct output: -34.3108385906 | Program output: -64.01240     
Correct output: -25.5420796562 | Program output: 15.02390      
Correct output: 40.5609747923  | Program output: 54.02780      
Correct output: -146.3905253753 | Program output: -68.01200     
Correct output: 125.2745939078 | Program output: 33.02570      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction -8} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_sin} {:instruction float_frominteger} {:instruction in2} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_dup_times} {:instruction float_flush} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_add} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_add} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_swap} {:instruction integer_add} {:instruction float_div} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_min} {:instruction -78} {:instruction float_mod} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_stackdepth})
Best program: (float_yankdup integer_fromfloat float_rot float_frominteger integer_add in2 integer_shove float_dec 46.73998848521251 integer_stackdepth integer_add in2 integer_swap float_dec 46.73998848521251 -8 float_pop float_pop integer_stackdepth integer_sub integer_stackdepth integer_sub integer_stackdepth integer_sub integer_rot integer_shove float_frominteger in2 integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod float_pop integer_stackdepth integer_sub integer_sub float_sin float_frominteger in2 integer_sub integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth float_dup_times float_flush 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_rot integer_add tagged_920 integer_sub integer_mod print_integer integer_add integer_dup float_stackdepth float_yank float_max float_div integer_mod print_integer integer_swap integer_add float_div float_stackdepth float_yank float_max float_div float_frominteger integer_pop integer_pop integer_min -78 float_mod integer_yank float_dup_times float_stackdepth)
Errors: [5.3821 11 30.8717 10 64.2806 9 32.434 10 70.4068 10 2.4599 9 46.8109 9 0.924 9 59.5791 9 13.3757 11 67.3954 11 29.3955 9 33.4128 10 4.2586 10 66.2657 10 19.4847 9 121.8149 12 30.257 8 60.1833 11 3.2308 8 29.7016 9 40.566 10 13.4668 10 78.3785 11 92.2489 11]
Total: 1262.5853
Mean: 25.251705
Genome size: 109
Size: 110
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4595.804054199997
Median total errors in population: 1296.30805
Error averages by case: (150.03949169999993 11.084 163.8416901999997 10.401 202.29389259999908 9.658 155.30779969999975 10.38 214.8294056999987 10.92 169.64345379999946 9.641 157.40528520000004 9.74 122.38975650000067 10.434 198.32582680000127 9.719 175.57852110000135 10.849 175.82085560000002 10.859 154.489716600001 9.468 147.62948869999985 10.893 141.1196725999995 10.957 204.55031159999842 9.83 168.7165838000005 9.992 233.5106402999991 11.858 163.012233700001 9.484 178.10931440000132 10.217 137.27722339999954 9.364 180.8576209000003 10.085 161.77239870000002 10.373 153.09630219999846 10.18 225.42107709999877 11.13 202.13449130000245 11.115)
Error minima by case: (0.9811 9 0.8717 8 1.0 4 0.5387 7 10.4068 6 0.4599 8 1.7916 5 0.056 5 1.0 4 0.3757 5 4.6262 5 0.329 7 0.5669 5 0.1925 8 0.2289 5 0.4847 8 73.8149 6 0.1918 7 2.8671 5 0.2273 7 2.2984 7 0.4971 5 0.561 8 2.3785 6 30.2584 6)
Average genome size in population (length): 102.061
Average program size in population (points): 103.061
Average percent parens in population: 0.010
Minimum age in population: 48.80399699648842
Maximum age in population: 53.09074771619635
Average age in population: 51.10084692560264
Median age in population: 51.14266981661785
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.889
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.889
Total error diversity:				 0.488
Error (vector) diversity:			 0.562
Behavioral diversity:				 0.562
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 73612492
--- Timings ---
Current time: 1529615703011 milliseconds
Total Time:         134.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.9 seconds, 37.0%
Fitness Testing:     66.2 seconds, 49.1%
Report:              18.7 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Number IO problem report - generation 37
Test total error for best: 62146.05979999995
Test mean error for best: 31.07303
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 55.02790      
Correct output: 24.1561588797  | Program output: 55.02790      
Correct output: 63.2618741651  | Program output: -1.01870      
Correct output: 81.4613344804  | Program output: 49.02730      
Correct output: -116.4209784668 | Program output: -46.01420     
Correct output: -80.5506083936 | Program output: -83.01050     
Correct output: 41.7915986532  | Program output: -5.01930      
Correct output: -6.9439752137  | Program output: -6.02000      
Correct output: 58.5604070006  | Program output: -1.01870      
Correct output: -105.4717093128 | Program output: -92.0960      
Correct output: -65.3737650023 | Program output: 2.02160       
Correct output: 80.422971733   | Program output: 51.02750      
Correct output: -36.4331405664 | Program output: -3.02030      
Correct output: 49.2855176563  | Program output: 45.02690      
Correct output: 5.2530048743   | Program output: -61.01270     
Correct output: -14.5307262538 | Program output: -34.01540     
Correct output: 174.8425999229 | Program output: 53.02770      
Correct output: 94.2858027683  | Program output: 64.02880      
Correct output: -32.1580651662 | Program output: 28.02520      
Correct output: 34.2563324554  | Program output: 31.02550      
Correct output: -34.3108385906 | Program output: -64.01240     
Correct output: -25.5420796562 | Program output: 15.02390      
Correct output: 40.5609747923  | Program output: 54.02780      
Correct output: -146.3905253753 | Program output: -68.01200     
Correct output: 125.2745939078 | Program output: 33.02570      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction -8} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_sin} {:instruction float_frominteger} {:instruction in2} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_dup_times} {:instruction float_flush} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_add} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_add} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_swap} {:instruction integer_add} {:instruction float_div} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_min} {:instruction -78} {:instruction float_mod} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_stackdepth})
Best program: (float_yankdup integer_fromfloat float_rot float_frominteger integer_add in2 integer_shove float_dec 46.73998848521251 integer_stackdepth integer_add in2 integer_swap float_dec 46.73998848521251 -8 float_pop float_pop integer_stackdepth integer_sub integer_stackdepth integer_sub integer_stackdepth integer_sub integer_rot integer_shove float_frominteger in2 integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod float_pop integer_stackdepth integer_sub integer_sub float_sin float_frominteger in2 integer_sub integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth float_dup_times float_flush 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_rot integer_add tagged_920 integer_sub integer_mod print_integer integer_add integer_dup float_stackdepth float_yank float_max float_div integer_mod print_integer integer_swap integer_add float_div float_stackdepth float_yank float_max float_div float_frominteger integer_pop integer_pop integer_min -78 float_mod integer_yank float_dup_times float_stackdepth)
Errors: [5.3821 11 30.8717 10 64.2806 9 32.434 10 70.4068 10 2.4599 9 46.8109 9 0.924 9 59.5791 9 13.3757 11 67.3954 11 29.3955 9 33.4128 10 4.2586 10 66.2657 10 19.4847 9 121.8149 12 30.257 8 60.1833 11 3.2308 8 29.7016 9 40.566 10 13.4668 10 78.3785 11 92.2489 11]
Total: 1262.5853
Mean: 25.251705
Genome size: 109
Size: 110
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4985.434534699999
Median total errors in population: 1306.5916
Error averages by case: (170.93002409999963 11.171 183.22097299999993 10.369 207.20830819999924 9.71 178.92949080000002 10.362 224.62966249999906 11.018 178.6535514999998 9.692 174.92984770000038 9.791 142.84392040000034 10.373 203.35778020000106 9.719 185.7277992000011 10.819 191.6053721999998 10.849 177.22456030000157 9.518 164.8395023999997 10.82 161.43804699999947 11.041 209.7138902999988 9.855 177.19986970000053 10.047 254.06179909999926 11.935 188.15413680000108 9.527 195.56729280000107 10.211 157.3215296000002 9.583 188.15613750000028 10.134 179.76558989999972 10.421 174.5701359999983 10.156 234.91966149999885 11.068 221.15365200000215 11.123)
Error minima by case: (1.3821 9 0.1283 8 0.0 4 0.434 7 11.4068 6 0.4599 8 1.7732 6 0.056 6 0.0 4 1.3757 6 4.6478 6 0.33 7 0.4128 6 0.1915 8 0.2164 5 0.4846 8 10.8276 6 0.1918 7 1.1329 6 0.2308 7 5.2855 6 0.4818 6 10.4668 8 1.3785 7 4.2489 6)
Average genome size in population (length): 103.378
Average program size in population (points): 104.378
Average percent parens in population: 0.010
Minimum age in population: 50.07085873978212
Maximum age in population: 54.57160550427216
Average age in population: 52.477220185265
Median age in population: 52.52982359669113
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.888
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.888
Total error diversity:				 0.539
Error (vector) diversity:			 0.63
Behavioral diversity:				 0.63
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 76197242
--- Timings ---
Current time: 1529615707224 milliseconds
Total Time:         139.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.3 seconds, 36.8%
Fitness Testing:     68.5 seconds, 49.2%
Report:              19.3 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Number IO problem report - generation 38
Test total error for best: 62146.05979999995
Test mean error for best: 31.07303
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 55.02790      
Correct output: 24.1561588797  | Program output: 55.02790      
Correct output: 63.2618741651  | Program output: -1.01870      
Correct output: 81.4613344804  | Program output: 49.02730      
Correct output: -116.4209784668 | Program output: -46.01420     
Correct output: -80.5506083936 | Program output: -83.01050     
Correct output: 41.7915986532  | Program output: -5.01930      
Correct output: -6.9439752137  | Program output: -6.02000      
Correct output: 58.5604070006  | Program output: -1.01870      
Correct output: -105.4717093128 | Program output: -92.0960      
Correct output: -65.3737650023 | Program output: 2.02160       
Correct output: 80.422971733   | Program output: 51.02750      
Correct output: -36.4331405664 | Program output: -3.02030      
Correct output: 49.2855176563  | Program output: 45.02690      
Correct output: 5.2530048743   | Program output: -61.01270     
Correct output: -14.5307262538 | Program output: -34.01540     
Correct output: 174.8425999229 | Program output: 53.02770      
Correct output: 94.2858027683  | Program output: 64.02880      
Correct output: -32.1580651662 | Program output: 28.02520      
Correct output: 34.2563324554  | Program output: 31.02550      
Correct output: -34.3108385906 | Program output: -64.01240     
Correct output: -25.5420796562 | Program output: 15.02390      
Correct output: 40.5609747923  | Program output: 54.02780      
Correct output: -146.3905253753 | Program output: -68.01200     
Correct output: 125.2745939078 | Program output: 33.02570      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction -8} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_sin} {:instruction float_frominteger} {:instruction in2} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_dup_times} {:instruction float_flush} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_add} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_add} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_swap} {:instruction integer_add} {:instruction float_div} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction float_frominteger})
Best program: (float_yankdup integer_fromfloat float_rot float_frominteger integer_add in2 integer_shove float_dec 46.73998848521251 integer_stackdepth integer_add in2 integer_swap float_dec 46.73998848521251 -8 float_pop float_pop integer_stackdepth integer_sub integer_stackdepth integer_sub integer_stackdepth integer_sub integer_rot integer_shove float_frominteger in2 integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod float_pop integer_stackdepth integer_sub integer_sub float_sin float_frominteger in2 integer_sub integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth float_dup_times float_flush 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_rot integer_add tagged_920 integer_sub integer_mod print_integer integer_add integer_dup float_stackdepth float_yank float_max float_div integer_mod print_integer integer_swap integer_add float_div float_stackdepth float_yank float_max float_div float_frominteger)
Errors: [5.3821 11 30.8717 10 64.2806 9 32.434 10 70.4068 10 2.4599 9 46.8109 9 0.924 9 59.5791 9 13.3757 11 67.3954 11 29.3955 9 33.4128 10 4.2586 10 66.2657 10 19.4847 9 121.8149 12 30.257 8 60.1833 11 3.2308 8 29.7016 9 40.566 10 13.4668 10 78.3785 11 92.2489 11]
Total: 1262.5853
Mean: 25.251705
Genome size: 101
Size: 102
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 5021.497346399999
Median total errors in population: 1306.4331
Error averages by case: (173.57308489999974 11.208 186.0049814999999 10.41 205.53143479999943 9.827 182.5839490999998 10.3 220.22072159999897 10.979 177.23032389999932 9.674 174.99267690000033 9.837 149.16226320000035 10.325 201.58687710000083 9.638 183.1404976000014 10.773 196.42433909999923 10.73 180.88114890000128 9.53 168.60368300000002 10.749 166.24327689999964 11.013 208.63325959999892 9.87 173.6795382000005 9.967 257.5723946999992 11.929 189.79444910000092 9.526 198.7912117000013 10.287 161.81722720000016 9.634 187.07406830000028 9.953 182.63837750000013 10.47 177.19513559999854 10.029 232.3269907999995 11.048 226.95943520000174 11.13)
Error minima by case: (2.3823 4 2.8938 4 14.2432 7 0.3713 6 5.327 7 0.4599 6 1.7916 6 0.056 8 9.5417 7 0.3737 7 11.3522 8 0.329 6 0.4128 8 0.1925 5 0.747 8 0.4847 6 72.815 6 0.1918 3 5.1329 8 0.1927 5 11.2984 6 0.4725 8 10.467 5 3.6215 8 31.2746 7)
Average genome size in population (length): 105.881
Average program size in population (points): 106.881
Average percent parens in population: 0.009
Minimum age in population: 51.23285918089096
Maximum age in population: 55.91955230638268
Average age in population: 53.78500708452999
Median age in population: 53.85570273935809
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.9
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.9
Total error diversity:				 0.522
Error (vector) diversity:			 0.611
Behavioral diversity:				 0.611
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 78844792
--- Timings ---
Current time: 1529615711437 milliseconds
Total Time:         143.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.6 seconds, 36.7%
Fitness Testing:     70.7 seconds, 49.3%
Report:              19.9 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Number IO problem report - generation 39
Test total error for best: 62146.05979999995
Test mean error for best: 31.07303
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 55.02790      
Correct output: 24.1561588797  | Program output: 55.02790      
Correct output: 63.2618741651  | Program output: -1.01870      
Correct output: 81.4613344804  | Program output: 49.02730      
Correct output: -116.4209784668 | Program output: -46.01420     
Correct output: -80.5506083936 | Program output: -83.01050     
Correct output: 41.7915986532  | Program output: -5.01930      
Correct output: -6.9439752137  | Program output: -6.02000      
Correct output: 58.5604070006  | Program output: -1.01870      
Correct output: -105.4717093128 | Program output: -92.0960      
Correct output: -65.3737650023 | Program output: 2.02160       
Correct output: 80.422971733   | Program output: 51.02750      
Correct output: -36.4331405664 | Program output: -3.02030      
Correct output: 49.2855176563  | Program output: 45.02690      
Correct output: 5.2530048743   | Program output: -61.01270     
Correct output: -14.5307262538 | Program output: -34.01540     
Correct output: 174.8425999229 | Program output: 53.02770      
Correct output: 94.2858027683  | Program output: 64.02880      
Correct output: -32.1580651662 | Program output: 28.02520      
Correct output: 34.2563324554  | Program output: 31.02550      
Correct output: -34.3108385906 | Program output: -64.01240     
Correct output: -25.5420796562 | Program output: 15.02390      
Correct output: 40.5609747923  | Program output: 54.02780      
Correct output: -146.3905253753 | Program output: -68.01200     
Correct output: 125.2745939078 | Program output: 33.02570      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction -8} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_sin} {:instruction float_frominteger} {:instruction in2} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_dup_times} {:instruction float_flush} {:instruction 46.73998848521251} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_dup_times} {:instruction float_flush} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_add} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_add} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_yank} {:instruction integer_shove} {:instruction float_div} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_swap} {:instruction integer_add} {:instruction float_div} {:instruction float_mult} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_min} {:instruction -78} {:instruction float_flush} {:instruction integer_swap} {:instruction float_mult} {:instruction float_mod} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_stackdepth})
Best program: (float_yankdup integer_fromfloat float_rot float_frominteger integer_add in2 integer_shove float_dec 46.73998848521251 integer_stackdepth integer_add in2 integer_swap float_dec 46.73998848521251 -8 float_pop float_pop integer_stackdepth integer_sub integer_stackdepth integer_sub integer_stackdepth integer_sub integer_rot integer_shove float_frominteger in2 integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod float_pop integer_stackdepth integer_sub integer_sub float_sin float_frominteger in2 integer_sub integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth float_dup_times float_flush 46.73998848521251 float_mod integer_stackdepth float_dup_times float_flush 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_rot integer_add tagged_920 integer_sub integer_mod print_integer integer_add integer_dup float_stackdepth float_yank integer_shove float_div integer_mod print_integer integer_swap integer_add float_div float_mult float_yank float_max float_div float_frominteger integer_pop integer_pop integer_min -78 float_flush integer_swap float_mult float_mod integer_yank float_dup_times float_stackdepth)
Errors: [5.3821 11 30.8717 10 64.2806 9 32.434 10 70.4068 10 2.4599 9 46.8109 9 0.924 9 59.5791 9 13.3757 11 67.3954 11 29.3955 9 33.4128 10 4.2586 10 66.2657 10 19.4847 9 121.8149 12 30.257 8 60.1833 11 3.2308 8 29.7016 9 40.566 10 13.4668 10 78.3785 11 92.2489 11]
Total: 1262.5853
Mean: 25.251705
Genome size: 117
Size: 118
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 4933.987956199999
Median total errors in population: 1328.4549500000003
Error averages by case: (164.39990439999963 11.169 177.1514263999998 10.394 204.57804449999935 9.858 173.93277720000054 10.194 225.43017779999903 10.928 182.6878024999994 9.611 170.4804658000006 9.758 140.89681010000018 10.174 200.6408072000006 9.511 191.60820170000093 10.736 191.31163209999943 10.675 172.23321060000103 9.531 163.22207199999946 10.713 157.1766222999997 10.871 214.12325529999873 9.928 178.15483060000054 9.93 249.60337669999905 11.943 185.8179996000013 9.51 190.35901930000085 10.309 152.01035609999994 9.51 192.4743167000003 9.804 174.61647789999964 10.464 168.12266939999895 10.019 237.68683869999893 10.991 217.56586130000164 11.172)
Error minima by case: (0.3821 9 0.8717 8 3.2432 7 0.3673 8 23.579 6 0.0 3 1.7916 4 0.056 4 1.4583 7 0.3757 5 1.6478 4 0.329 7 1.4128 5 0.1915 8 0.158 8 0.0 3 17.8149 9 0.1868 7 0.937 5 0.1612 7 0.0 3 0.4756 5 0.528 8 6.3905 5 11.7511 9)
Average genome size in population (length): 106.863
Average program size in population (points): 107.863
Average percent parens in population: 0.009
Minimum age in population: 52.23285918089096
Maximum age in population: 57.06797746655502
Average age in population: 55.07156027844295
Median age in population: 55.10882630272863
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.876
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.876
Total error diversity:				 0.536
Error (vector) diversity:			 0.62
Behavioral diversity:				 0.621
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 81517117
--- Timings ---
Current time: 1529615715771 milliseconds
Total Time:         147.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.0 seconds, 36.6%
Fitness Testing:     73.1 seconds, 49.5%
Report:              20.5 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Number IO problem report - generation 40
Test total error for best: 61657.44999999996
Test mean error for best: 30.82872
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 59.02790      
Correct output: 24.1561588797  | Program output: 59.02790      
Correct output: 63.2618741651  | Program output: -1.01870      
Correct output: 81.4613344804  | Program output: 53.02730      
Correct output: -116.4209784668 | Program output: -46.01420     
Correct output: -80.5506083936 | Program output: -83.01050     
Correct output: 41.7915986532  | Program output: -1.01930      
Correct output: -6.9439752137  | Program output: -2.02000      
Correct output: 58.5604070006  | Program output: -1.01870      
Correct output: -105.4717093128 | Program output: -92.0960      
Correct output: -65.3737650023 | Program output: 6.02160       
Correct output: 80.422971733   | Program output: 55.02750      
Correct output: -36.4331405664 | Program output: -2.02030      
Correct output: 49.2855176563  | Program output: 49.02690      
Correct output: 5.2530048743   | Program output: -61.01270     
Correct output: -14.5307262538 | Program output: -34.01540     
Correct output: 174.8425999229 | Program output: 57.02770      
Correct output: 94.2858027683  | Program output: 68.02880      
Correct output: -32.1580651662 | Program output: 32.02520      
Correct output: 34.2563324554  | Program output: 35.02550      
Correct output: -34.3108385906 | Program output: -64.01240     
Correct output: -25.5420796562 | Program output: 19.02390      
Correct output: 40.5609747923  | Program output: 58.02780      
Correct output: -146.3905253753 | Program output: -68.01200     
Correct output: 125.2745939078 | Program output: 37.02570      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction integer_dup_items} {:instruction float_flush} {:instruction -8} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_908} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_pop} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_sin} {:instruction float_frominteger} {:instruction in2} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_dup_times} {:instruction float_flush} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_add} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_add} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_swap} {:instruction integer_add} {:instruction float_div} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_min} {:instruction -78} {:instruction float_flush} {:instruction integer_swap} {:instruction float_mult} {:instruction float_frominteger} {:instruction float_tan} {:instruction float_dup_times} {:instruction float_stackdepth})
Best program: (float_yankdup integer_fromfloat integer_dup_times print_float float_stackdepth integer_stackdepth float_rot integer_swap integer_add in2 integer_swap integer_dup_items float_flush -8 float_pop float_pop integer_stackdepth integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_908 integer_sub integer_shove float_frominteger in2 integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod float_pop float_inc integer_sub integer_sub float_sin float_frominteger in2 integer_sub integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth float_dup_times float_flush 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_rot integer_add tagged_920 integer_sub integer_mod print_integer integer_add integer_dup float_stackdepth float_yank float_max float_div integer_mod print_integer integer_swap integer_add float_div float_stackdepth float_yank float_max float_div float_frominteger integer_pop integer_pop integer_min -78 float_flush integer_swap float_mult float_frominteger float_tan float_dup_times float_stackdepth)
Errors: [9.3821 10 34.8717 10 64.2806 9 28.434 10 70.4068 10 2.4599 9 42.8109 8 4.924 10 59.5791 9 13.3757 11 71.3954 10 25.3955 9 34.4128 11 0.2586 9 66.2657 10 19.4847 9 117.8149 11 26.257 9 64.1833 9 0.7692 8 29.7016 9 44.566 11 17.4668 10 78.3785 11 88.2489 11]
Total: 1258.1236999999999
Mean: 25.162474
Genome size: 113
Size: 114
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4456.312076500002
Median total errors in population: 1301.60285
Error averages by case: (145.16274640000012 11.163 157.63433260000022 10.467 189.77839479999915 9.909 157.69551279999973 10.242 208.9565224999992 10.863 162.9119357999993 9.643 148.30978439999961 9.779 113.20382600000015 10.08 185.72570490000066 9.583 171.738076400001 10.719 167.3549188999993 10.718 155.86783380000085 9.574 137.1765250000002 10.644 139.75214429999983 10.756 195.46914869999927 9.952 160.40342940000033 9.922 236.17504079999932 11.903 165.3541734000012 9.603 169.20505160000118 10.364 132.48398029999979 9.582 173.26298140000011 9.705 151.89051600000093 10.545 148.77611549999878 9.999 220.81857859999926 11.017 203.2568022000016 11.216)
Error minima by case: (0.6179 9 0.9378 8 6.7381 7 0.4509 7 55.4021 9 0.4494 7 1.7916 8 0.056 8 4.8204 7 0.5283 8 0.3522 7 0.3319 7 0.4128 8 0.1915 8 0.7597 8 0.4347 7 54.8426 10 0.1907 7 0.8671 8 0.1612 7 9.2983 6 0.525 9 4.528 7 63.3716 8 5.2746 8)
Average genome size in population (length): 106.82
Average program size in population (points): 107.82
Average percent parens in population: 0.009
Minimum age in population: 53.70480809894798
Maximum age in population: 58.50913384420346
Average age in population: 56.41904091806373
Median age in population: 56.44665021562923
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.863
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.863
Total error diversity:				 0.575
Error (vector) diversity:			 0.636
Behavioral diversity:				 0.636
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 84188092
--- Timings ---
Current time: 1529615720076 milliseconds
Total Time:         152.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.4 seconds, 36.4%
Fitness Testing:     75.4 seconds, 49.6%
Report:              21.1 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Number IO problem report - generation 41
Test total error for best: 61657.44999999996
Test mean error for best: 30.82872
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 59.02790      
Correct output: 24.1561588797  | Program output: 59.02790      
Correct output: 63.2618741651  | Program output: -1.01870      
Correct output: 81.4613344804  | Program output: 53.02730      
Correct output: -116.4209784668 | Program output: -46.01420     
Correct output: -80.5506083936 | Program output: -83.01050     
Correct output: 41.7915986532  | Program output: -1.01930      
Correct output: -6.9439752137  | Program output: -2.02000      
Correct output: 58.5604070006  | Program output: -1.01870      
Correct output: -105.4717093128 | Program output: -92.0960      
Correct output: -65.3737650023 | Program output: 6.02160       
Correct output: 80.422971733   | Program output: 55.02750      
Correct output: -36.4331405664 | Program output: -2.02030      
Correct output: 49.2855176563  | Program output: 49.02690      
Correct output: 5.2530048743   | Program output: -61.01270     
Correct output: -14.5307262538 | Program output: -34.01540     
Correct output: 174.8425999229 | Program output: 57.02770      
Correct output: 94.2858027683  | Program output: 68.02880      
Correct output: -32.1580651662 | Program output: 32.02520      
Correct output: 34.2563324554  | Program output: 35.02550      
Correct output: -34.3108385906 | Program output: -64.01240     
Correct output: -25.5420796562 | Program output: 19.02390      
Correct output: 40.5609747923  | Program output: 58.02780      
Correct output: -146.3905253753 | Program output: -68.01200     
Correct output: 125.2745939078 | Program output: 37.02570      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction integer_dup_items} {:instruction float_flush} {:instruction -8} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_908} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_pop} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_sin} {:instruction float_frominteger} {:instruction in2} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_dup_times} {:instruction float_flush} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_add} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_add} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_max} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_min} {:instruction -78} {:instruction float_flush} {:instruction float_rot} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_yank} {:instruction float_inc} {:instruction float_stackdepth})
Best program: (float_yankdup integer_fromfloat integer_dup_times print_float float_stackdepth integer_stackdepth float_rot integer_swap integer_add in2 integer_swap integer_dup_items float_flush -8 float_pop float_pop integer_stackdepth integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_908 integer_sub integer_shove float_frominteger in2 integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod float_pop float_inc integer_sub integer_sub float_sin float_frominteger in2 integer_sub integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth float_dup_times float_flush 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_rot integer_add tagged_920 integer_sub integer_mod print_integer integer_add integer_dup float_stackdepth float_yank float_max float_div float_stackdepth print_integer float_max float_div float_frominteger integer_pop integer_pop integer_min -78 float_flush float_rot integer_inc float_mod integer_yank float_inc float_stackdepth)
Errors: [9.3821 10 34.8717 10 64.2806 9 28.434 10 70.4068 10 2.4599 9 42.8109 8 4.924 10 59.5791 9 13.3757 11 71.3954 10 25.3955 9 34.4128 11 0.2586 9 66.2657 10 19.4847 9 117.8149 11 26.257 9 64.1833 9 0.7692 8 29.7016 9 44.566 11 17.4668 10 78.3785 11 88.2489 11]
Total: 1258.1236999999999
Mean: 25.162474
Genome size: 108
Size: 109
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4989.065611100003
Median total errors in population: 1367.6871
Error averages by case: (163.42557670000016 11.125 175.31463690000018 10.508 213.85077619999916 9.949 177.84195010000013 10.294 230.81949049999895 10.733 189.87332499999928 9.627 168.7425949999999 9.831 135.92373460000022 10.034 209.94383390000075 9.631 198.22467440000145 10.778 187.19263049999975 10.847 176.1826873000008 9.548 157.90782910000024 10.703 158.52985629999978 10.689 218.2035329999991 9.974 182.01212060000054 9.938 254.25019699999908 11.796 190.67325970000078 9.495 186.35877100000127 10.514 153.49728109999992 9.555 197.0757884000002 9.667 171.46119000000047 10.504 166.8682835999986 10.067 245.20976429999868 11.113 221.645825900002 11.116)
Error minima by case: (0.6179 9 0.0602 9 16.5219 7 0.3672 8 7.6688 8 0.4494 7 1.7916 8 0.056 8 11.8204 7 0.3757 7 1.3522 9 0.3955 7 0.6599 8 0.1904 8 1.159 8 0.4847 8 15.8426 10 0.1908 7 0.1329 8 0.1612 7 3.7016 6 1.4818 8 1.467 8 0.301 7 6.2746 9)
Average genome size in population (length): 107.268
Average program size in population (points): 108.268
Average percent parens in population: 0.009
Minimum age in population: 55.42255781551466
Maximum age in population: 60.01413384754869
Average age in population: 57.74458474107092
Median age in population: 57.76789679325975
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 33
Genome diversity (% unique Plush genomes):	 0.889
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.889
Total error diversity:				 0.565
Error (vector) diversity:			 0.638
Behavioral diversity:				 0.638
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 86870392
--- Timings ---
Current time: 1529615724394 milliseconds
Total Time:         156.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.8 seconds, 36.3%
Fitness Testing:     77.7 seconds, 49.7%
Report:              21.7 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Number IO problem report - generation 42
Test total error for best: 66374.32719999996
Test mean error for best: 33.18716
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 59.089180     
Correct output: 24.1561588797  | Program output: 59.089180     
Correct output: 63.2618741651  | Program output: -4.090160     
Correct output: 81.4613344804  | Program output: 53.089240     
Correct output: -116.4209784668 | Program output: -49.090600    
Correct output: -80.5506083936 | Program output: -86.090960    
Correct output: 41.7915986532  | Program output: 2.090080      
Correct output: -6.9439752137  | Program output: -4.089970     
Correct output: 58.5604070006  | Program output: -4.090160     
Correct output: -105.4717093128 | Program output: -95.091060    
Correct output: -65.3737650023 | Program output: -4.089810     
Correct output: 80.422971733   | Program output: 55.089220     
Correct output: -36.4331405664 | Program output: -3.089940     
Correct output: 49.2855176563  | Program output: 49.089280     
Correct output: 5.2530048743   | Program output: -64.090760    
Correct output: -14.5307262538 | Program output: -37.090460    
Correct output: 174.8425999229 | Program output: 57.089200     
Correct output: 94.2858027683  | Program output: 68.089090     
Correct output: -32.1580651662 | Program output: 32.089450     
Correct output: 34.2563324554  | Program output: 35.089420     
Correct output: -34.3108385906 | Program output: -67.090810    
Correct output: -25.5420796562 | Program output: 19.089580     
Correct output: 40.5609747923  | Program output: 58.089190     
Correct output: -146.3905253753 | Program output: -71.090840    
Correct output: 125.2745939078 | Program output: 37.089400     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction tag_float_338} {:instruction print_float} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction -8} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_dup_items} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_inc} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_flush} {:instruction integer_dup_times} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_add} {:instruction tagged_986} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction print_integer} {:instruction float_max} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_min} {:instruction -78} {:instruction float_flush} {:instruction float_rot} {:instruction float_pop} {:instruction float_yankdup} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_stackdepth})
Best program: (float_yankdup integer_fromfloat tag_float_338 print_float float_stackdepth integer_stackdepth float_rot integer_swap integer_add in2 integer_swap integer_add in2 integer_swap float_dec 46.73998848521251 -8 float_pop float_pop integer_stackdepth integer_sub float_pop integer_stackdepth integer_dup_items integer_rot integer_stackdepth tagged_920 integer_sub integer_shove float_frominteger in2 integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod float_pop integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod integer_dec integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 tagged_920 integer_sub integer_stackdepth integer_sub integer_shove float_frominteger in2 integer_sub integer_yankdup integer_rot print_float float_inc 95 float_mod integer_stackdepth float_rot float_flush integer_dup_times integer_mult float_pop float_pop integer_stackdepth integer_sub integer_rot integer_add tagged_986 integer_sub integer_mod print_integer integer_swap float_stackdepth integer_add integer_dup float_stackdepth print_integer float_max float_div float_frominteger integer_pop integer_pop integer_min -78 float_flush float_rot float_pop float_yankdup integer_yank float_dup_times float_stackdepth)
Errors: [9.4434 10 34.933 10 67.352 10 28.3721 10 67.3304 10 5.5404 8 39.7015 10 2.854 9 62.6506 9 10.3806 10 61.284 11 25.3338 10 33.3432 9 0.1962 9 69.3438 10 22.5597 10 117.7534 10 26.1967 10 64.2475 9 0.8331 10 32.78 9 44.6317 10 17.5282 10 75.2997 11 88.1852 11]
Total: 1253.0741999999998
Mean: 25.061483
Genome size: 111
Size: 112
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4138.019116300003
Median total errors in population: 1288.7193499999998
Error averages by case: (129.19342280000063 11.16 141.3666153000003 10.466 180.43591159999895 9.88 145.16826429999938 10.18 196.627685099999 10.55 148.40984829999985 9.575 138.89040089999904 9.714 105.82129420000011 9.973 176.34561000000093 9.513 158.56888820000106 10.823 157.5246466999996 10.883 143.35725110000052 9.513 127.85638280000065 10.575 123.59312759999992 10.599 178.0773623999995 10.018 145.14622190000037 9.834 225.29098709999914 11.816 158.62887610000044 9.311 153.96988720000084 10.651 118.85163640000015 9.403 156.89877120000028 9.545 138.7521948000012 10.457 132.71576419999863 10.116 208.23046559999895 11.137 191.55660050000208 11.049)
Error minima by case: (0.3821 9 2.1283 8 1.0 4 0.434 7 9.4068 6 0.4599 8 1.7916 5 0.056 5 1.0 4 0.3757 4 5.6262 5 0.339 7 0.4128 5 0.1915 8 0.159 5 0.4717 6 1.823 6 0.1918 7 0.0641 5 0.1612 7 4.7016 6 0.4818 5 2.4668 7 4.6215 6 7.7448 6)
Average genome size in population (length): 107.025
Average program size in population (points): 108.025
Average percent parens in population: 0.009
Minimum age in population: 56.59985596109982
Maximum age in population: 61.03583580373515
Average age in population: 59.14882020468763
Median age in population: 59.18859580355593
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 31
Genome diversity (% unique Plush genomes):	 0.87
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.87
Total error diversity:				 0.506
Error (vector) diversity:			 0.555
Behavioral diversity:				 0.555
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 89546017
--- Timings ---
Current time: 1529615728835 milliseconds
Total Time:         160.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.2 seconds, 36.2%
Fitness Testing:     80.0 seconds, 49.8%
Report:              22.3 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Number IO problem report - generation 43
Test total error for best: 61721.858999999975
Test mean error for best: 30.86093
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 57.02790      
Correct output: 24.1561588797  | Program output: 57.02790      
Correct output: 63.2618741651  | Program output: 1.01870       
Correct output: 81.4613344804  | Program output: 51.02730      
Correct output: -116.4209784668 | Program output: -44.01420     
Correct output: -80.5506083936 | Program output: -81.01050     
Correct output: 41.7915986532  | Program output: -3.01930      
Correct output: -6.9439752137  | Program output: -4.02000      
Correct output: 58.5604070006  | Program output: 1.01870       
Correct output: -105.4717093128 | Program output: -90.0960      
Correct output: -65.3737650023 | Program output: 4.02160       
Correct output: 80.422971733   | Program output: 53.02750      
Correct output: -36.4331405664 | Program output: -1.02030      
Correct output: 49.2855176563  | Program output: 47.02690      
Correct output: 5.2530048743   | Program output: -59.01270     
Correct output: -14.5307262538 | Program output: -32.01540     
Correct output: 174.8425999229 | Program output: 55.02770      
Correct output: 94.2858027683  | Program output: 66.02880      
Correct output: -32.1580651662 | Program output: 30.02520      
Correct output: 34.2563324554  | Program output: 33.02550      
Correct output: -34.3108385906 | Program output: -62.01240     
Correct output: -25.5420796562 | Program output: 17.02390      
Correct output: 40.5609747923  | Program output: 56.02780      
Correct output: -146.3905253753 | Program output: -66.01200     
Correct output: 125.2745939078 | Program output: 35.02570      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction -8} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction integer_sub} {:instruction float_sin} {:instruction float_frominteger} {:instruction in2} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_dup_times} {:instruction float_flush} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_add} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_add} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_swap} {:instruction integer_add} {:instruction float_div} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_min} {:instruction -78} {:instruction float_mod} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_stackdepth})
Best program: (float_yankdup integer_fromfloat float_rot float_frominteger integer_add in2 integer_shove float_dec 46.73998848521251 integer_stackdepth integer_add in2 integer_swap float_dec 46.73998848521251 -8 float_pop float_pop integer_stackdepth integer_sub integer_stackdepth integer_sub integer_stackdepth integer_sub integer_rot integer_shove float_frominteger in2 integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod float_pop integer_stackdepth integer_add integer_sub float_sin float_frominteger in2 integer_sub integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth float_dup_times float_flush 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_add float_pop integer_sub integer_mod print_integer integer_sub integer_mod print_integer integer_add integer_dup float_stackdepth float_yank float_max float_div integer_mod print_integer integer_swap integer_add float_div float_stackdepth float_yank float_max float_div float_frominteger integer_pop integer_pop integer_min -78 float_mod integer_yank float_dup_times float_stackdepth)
Errors: [7.3821 11 32.8717 10 62.2432 9 30.434 9 72.4068 11 0.4599 9 44.8109 9 2.924 10 57.5417 9 15.3757 10 69.3954 11 27.3955 9 35.4128 11 2.2586 10 64.2657 9 17.4847 10 119.8149 12 28.257 9 62.1833 10 1.2308 8 27.7016 10 42.566 11 15.4668 10 80.3785 10 90.2489 10]
Total: 1257.5104999999999
Mean: 25.15021
Genome size: 111
Size: 112
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4534.727275699998
Median total errors in population: 1291.3303999999998
Error averages by case: (143.3132761000003 11.166 155.65199980000017 10.413 197.787253699999 9.794 158.67918760000015 10.189 214.1756278999986 10.553 166.96219389999902 9.598 154.1409731000001 9.712 121.61739310000016 9.971 193.80978610000108 9.567 177.02895710000095 10.946 174.3249833 10.973 156.79218620000103 9.532 143.2595122000001 10.539 139.75513360000014 10.6 198.48433669999892 10.009 164.6419600000006 9.765 236.54631549999934 11.894 167.23707080000105 9.199 169.18069970000082 10.749 135.06175360000026 9.335 177.26534830000034 9.56 153.97068650000028 10.479 146.66990949999865 10.132 225.97098139999875 11.23 205.42575000000187 11.069)
Error minima by case: (0.3821 8 0.8717 8 1.0 5 0.3703 7 3.579 7 0.4599 8 1.7916 6 0.067 6 1.0 5 0.3777 6 11.2798 6 0.3955 7 0.5872 6 0.1945 9 0.2213 6 0.4717 7 5.1763 7 0.2858 7 0.1329 6 0.2308 7 3.2984 6 0.5182 6 0.4668 8 11.3711 7 0.7254 7)
Average genome size in population (length): 106.428
Average program size in population (points): 107.428
Average percent parens in population: 0.009
Minimum age in population: 57.59985596109982
Maximum age in population: 62.57070940060589
Average age in population: 60.44871157102198
Median age in population: 60.52571240811176
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.877
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.877
Total error diversity:				 0.439
Error (vector) diversity:			 0.487
Behavioral diversity:				 0.487
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 92207417
--- Timings ---
Current time: 1529615733122 milliseconds
Total Time:         165.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.5 seconds, 36.1%
Fitness Testing:     82.3 seconds, 49.9%
Report:              23.1 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Number IO problem report - generation 44
Test total error for best: 61721.858999999975
Test mean error for best: 30.86093
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 57.02790      
Correct output: 24.1561588797  | Program output: 57.02790      
Correct output: 63.2618741651  | Program output: 1.01870       
Correct output: 81.4613344804  | Program output: 51.02730      
Correct output: -116.4209784668 | Program output: -44.01420     
Correct output: -80.5506083936 | Program output: -81.01050     
Correct output: 41.7915986532  | Program output: -3.01930      
Correct output: -6.9439752137  | Program output: -4.02000      
Correct output: 58.5604070006  | Program output: 1.01870       
Correct output: -105.4717093128 | Program output: -90.0960      
Correct output: -65.3737650023 | Program output: 4.02160       
Correct output: 80.422971733   | Program output: 53.02750      
Correct output: -36.4331405664 | Program output: -1.02030      
Correct output: 49.2855176563  | Program output: 47.02690      
Correct output: 5.2530048743   | Program output: -59.01270     
Correct output: -14.5307262538 | Program output: -32.01540     
Correct output: 174.8425999229 | Program output: 55.02770      
Correct output: 94.2858027683  | Program output: 66.02880      
Correct output: -32.1580651662 | Program output: 30.02520      
Correct output: 34.2563324554  | Program output: 33.02550      
Correct output: -34.3108385906 | Program output: -62.01240     
Correct output: -25.5420796562 | Program output: 17.02390      
Correct output: 40.5609747923  | Program output: 56.02780      
Correct output: -146.3905253753 | Program output: -66.01200     
Correct output: 125.2745939078 | Program output: 35.02570      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction -8} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction integer_sub} {:instruction float_sin} {:instruction float_frominteger} {:instruction in2} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_dup_times} {:instruction float_flush} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction float_swap} {:instruction integer_add} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_add} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_swap} {:instruction integer_add} {:instruction float_div} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction float_frominteger})
Best program: (float_yankdup integer_fromfloat float_rot float_frominteger integer_add in2 integer_shove float_dec 46.73998848521251 integer_stackdepth integer_add in2 integer_swap float_dec 46.73998848521251 -8 float_pop float_pop integer_stackdepth integer_sub integer_stackdepth integer_sub integer_stackdepth integer_sub integer_rot integer_shove float_frominteger in2 integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod float_pop integer_stackdepth integer_add integer_sub float_sin float_frominteger in2 integer_sub integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth float_dup_times float_flush 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub float_swap integer_add tagged_920 integer_sub integer_mod print_integer integer_add integer_dup float_stackdepth float_yank float_max float_div integer_mod print_integer integer_swap integer_add float_div float_stackdepth float_yank float_max float_div float_frominteger)
Errors: [7.3821 11 32.8717 10 62.2432 9 30.434 9 72.4068 11 0.4599 9 44.8109 9 2.924 10 57.5417 9 15.3757 10 69.3954 11 27.3955 9 35.4128 11 2.2586 10 64.2657 9 17.4847 10 119.8149 12 28.257 9 62.1833 10 1.2308 8 27.7016 10 42.566 11 15.4668 10 80.3785 10 90.2489 10]
Total: 1257.5104999999999
Mean: 25.15021
Genome size: 101
Size: 102
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3872.6848720999997
Median total errors in population: 1290.3930999999998
Error averages by case: (117.97402300000088 11.103 130.5834562000011 10.358 170.30397699999875 9.687 133.80210019999797 10.188 186.76836539999874 10.557 137.29232350000052 9.571 128.6962990999983 9.575 91.50985669999994 9.986 166.19486650000115 9.532 148.04210740000116 10.874 149.5622625999987 10.889 132.70516909999964 9.49 115.11199030000098 10.548 113.21755760000006 10.505 168.76492419999977 9.961 134.97568530000058 9.734 214.14486989999915 11.846 145.95102619999972 9.209 144.56713900000122 10.585 108.76733530000011 9.157 147.17176280000032 9.655 128.8775645000019 10.531 121.62272949999836 10.11 198.57338919999884 11.181 181.6570916000023 11.015)
Error minima by case: (0.6179 9 0.1283 8 1.0 4 0.4508 8 7.327 6 0.4594 8 1.7916 5 0.056 5 0.3173 4 0.3777 5 12.3522 5 0.3955 7 0.4128 5 0.1915 8 0.7597 5 0.4367 7 5.1851 6 0.1908 7 0.1261 5 0.1623 7 3.2984 7 0.4579 5 0.4573 8 2.6215 6 15.2489 6)
Average genome size in population (length): 106.17
Average program size in population (points): 107.17
Average percent parens in population: 0.009
Minimum age in population: 59.43238224323386
Maximum age in population: 63.73898267219658
Average age in population: 61.83633306580942
Median age in population: 61.87511064738089
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.887
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.887
Total error diversity:				 0.448
Error (vector) diversity:			 0.485
Behavioral diversity:				 0.485
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 94862042
--- Timings ---
Current time: 1529615737404 milliseconds
Total Time:         169.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.9 seconds, 35.9%
Fitness Testing:     84.7 seconds, 50.0%
Report:              23.7 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Number IO problem report - generation 45
Test total error for best: 61721.858999999975
Test mean error for best: 30.86093
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 57.02790      
Correct output: 24.1561588797  | Program output: 57.02790      
Correct output: 63.2618741651  | Program output: 1.01870       
Correct output: 81.4613344804  | Program output: 51.02730      
Correct output: -116.4209784668 | Program output: -44.01420     
Correct output: -80.5506083936 | Program output: -81.01050     
Correct output: 41.7915986532  | Program output: -3.01930      
Correct output: -6.9439752137  | Program output: -4.02000      
Correct output: 58.5604070006  | Program output: 1.01870       
Correct output: -105.4717093128 | Program output: -90.0960      
Correct output: -65.3737650023 | Program output: 4.02160       
Correct output: 80.422971733   | Program output: 53.02750      
Correct output: -36.4331405664 | Program output: -1.02030      
Correct output: 49.2855176563  | Program output: 47.02690      
Correct output: 5.2530048743   | Program output: -59.01270     
Correct output: -14.5307262538 | Program output: -32.01540     
Correct output: 174.8425999229 | Program output: 55.02770      
Correct output: 94.2858027683  | Program output: 66.02880      
Correct output: -32.1580651662 | Program output: 30.02520      
Correct output: 34.2563324554  | Program output: 33.02550      
Correct output: -34.3108385906 | Program output: -62.01240     
Correct output: -25.5420796562 | Program output: 17.02390      
Correct output: 40.5609747923  | Program output: 56.02780      
Correct output: -146.3905253753 | Program output: -66.01200     
Correct output: 125.2745939078 | Program output: 35.02570      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_dec} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction -8} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction integer_sub} {:instruction float_sin} {:instruction float_frominteger} {:instruction in2} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_dup_times} {:instruction float_flush} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_add} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_add} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_swap} {:instruction integer_add} {:instruction float_div} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_min} {:instruction float_dup} {:instruction float_mod} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_stackdepth})
Best program: (float_yankdup integer_fromfloat float_rot float_frominteger integer_add in2 integer_shove float_dec in1 integer_stackdepth integer_add in2 integer_swap float_dec 46.73998848521251 -8 float_pop float_pop integer_stackdepth integer_sub integer_stackdepth integer_sub integer_stackdepth integer_sub integer_rot integer_shove float_frominteger in2 integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod float_pop integer_stackdepth integer_add integer_sub float_sin float_frominteger in2 integer_sub integer_yankdup print_float float_shove 95 float_mod integer_stackdepth float_dup_times float_flush 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_rot integer_add tagged_920 integer_sub integer_mod print_integer integer_add integer_dup float_stackdepth float_yank float_max float_div integer_mod print_integer integer_swap integer_add float_div float_stackdepth float_yank float_max float_div float_frominteger integer_pop integer_pop integer_min float_dup float_mod integer_yank float_dup_times float_stackdepth)
Errors: [7.3821 11 32.8717 10 62.2432 9 30.434 9 72.4068 11 0.4599 9 44.8109 9 2.924 10 57.5417 9 15.3757 10 69.3954 11 27.3955 9 35.4128 11 2.2586 10 64.2657 9 17.4847 10 119.8149 12 28.257 9 62.1833 10 1.2308 8 27.7016 10 42.566 11 15.4668 10 80.3785 10 90.2489 10]
Total: 1257.5104999999999
Mean: 25.15021
Genome size: 108
Size: 109
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4061.9226041999987
Median total errors in population: 1286.82965
Error averages by case: (126.23820700000066 11.027 139.16008360000072 10.384 178.40293779999874 9.679 141.51741379999896 10.177 193.41605209999895 10.621 145.79524479999998 9.532 137.5774422999989 9.53 101.82125949999997 10.133 174.32289690000127 9.547 155.9708723000008 10.832 155.81855259999938 10.766 139.6436764000002 9.494 124.13903950000066 10.681 120.6759173 10.43 177.55561949999947 9.883 143.17521850000045 9.795 221.39935979999916 11.766 147.54367409999972 9.413 150.65875280000085 10.299 115.84129289999987 9.134 156.1864147000003 9.716 135.20819190000122 10.652 129.95796839999883 10.106 205.40784259999901 11.145 188.75267310000206 10.994)
Error minima by case: (0.3821 9 0.8621 8 1.0 4 0.566 8 6.4068 6 0.4494 8 1.7916 5 0.076 5 1.0 4 0.3757 5 8.3332 5 0.3955 7 0.4181 5 0.1915 7 0.2403 5 0.4847 7 7.1574 6 0.7842 8 0.1329 5 0.1613 7 0.7016 7 0.4699 5 3.4668 8 3.6215 6 4.249 6)
Average genome size in population (length): 105.736
Average program size in population (points): 106.736
Average percent parens in population: 0.009
Minimum age in population: 60.89963983443704
Maximum age in population: 65.17768416796764
Average age in population: 63.24979877139064
Median age in population: 63.30472473040399
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.889
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.889
Total error diversity:				 0.493
Error (vector) diversity:			 0.545
Behavioral diversity:				 0.545
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 97505667
--- Timings ---
Current time: 1529615741748 milliseconds
Total Time:         173.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.3 seconds, 35.9%
Fitness Testing:     87.0 seconds, 50.1%
Report:              24.2 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Number IO problem report - generation 46
Test total error for best: 61721.858999999975
Test mean error for best: 30.86093
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 57.02790      
Correct output: 24.1561588797  | Program output: 57.02790      
Correct output: 63.2618741651  | Program output: 1.01870       
Correct output: 81.4613344804  | Program output: 51.02730      
Correct output: -116.4209784668 | Program output: -44.01420     
Correct output: -80.5506083936 | Program output: -81.01050     
Correct output: 41.7915986532  | Program output: -3.01930      
Correct output: -6.9439752137  | Program output: -4.02000      
Correct output: 58.5604070006  | Program output: 1.01870       
Correct output: -105.4717093128 | Program output: -90.0960      
Correct output: -65.3737650023 | Program output: 4.02160       
Correct output: 80.422971733   | Program output: 53.02750      
Correct output: -36.4331405664 | Program output: -1.02030      
Correct output: 49.2855176563  | Program output: 47.02690      
Correct output: 5.2530048743   | Program output: -59.01270     
Correct output: -14.5307262538 | Program output: -32.01540     
Correct output: 174.8425999229 | Program output: 55.02770      
Correct output: 94.2858027683  | Program output: 66.02880      
Correct output: -32.1580651662 | Program output: 30.02520      
Correct output: 34.2563324554  | Program output: 33.02550      
Correct output: -34.3108385906 | Program output: -62.01240     
Correct output: -25.5420796562 | Program output: 17.02390      
Correct output: 40.5609747923  | Program output: 56.02780      
Correct output: -146.3905253753 | Program output: -66.01200     
Correct output: 125.2745939078 | Program output: 35.02570      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_dec} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction -8} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction integer_sub} {:instruction float_sin} {:instruction float_frominteger} {:instruction in2} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_dup_times} {:instruction float_flush} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_add} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_add} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_swap} {:instruction integer_add} {:instruction float_div} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_min} {:instruction -78} {:instruction float_mod} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_stackdepth})
Best program: (float_yankdup integer_fromfloat float_rot float_frominteger integer_add in2 integer_shove float_dec in1 integer_stackdepth integer_add in2 integer_swap float_dec 46.73998848521251 -8 float_pop float_pop integer_stackdepth integer_sub integer_stackdepth integer_sub integer_stackdepth integer_sub integer_rot integer_shove float_frominteger in2 integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod float_pop integer_stackdepth integer_add integer_sub float_sin float_frominteger in2 integer_sub integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth float_dup_times float_flush 46.73998848521251 integer_mult float_pop float_pop float_pop integer_stackdepth integer_sub integer_rot integer_add tagged_920 integer_sub integer_mod print_integer integer_add integer_dup float_stackdepth float_yank float_max float_div integer_mod print_integer integer_swap integer_add float_div float_stackdepth float_yank float_max float_div float_frominteger integer_pop integer_pop integer_min -78 float_mod integer_yank float_dup_times float_stackdepth)
Errors: [7.3821 11 32.8717 10 62.2432 9 30.434 9 72.4068 11 0.4599 9 44.8109 9 2.924 10 57.5417 9 15.3757 10 69.3954 11 27.3955 9 35.4128 11 2.2586 10 64.2657 9 17.4847 10 119.8149 12 28.257 9 62.1833 10 1.2308 8 27.7016 10 42.566 11 15.4668 10 80.3785 10 90.2489 10]
Total: 1257.5104999999999
Mean: 25.15021
Genome size: 110
Size: 111
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4547.1047355
Median total errors in population: 1365.6471000000001
Error averages by case: (143.29805340000027 10.992 155.1573405000003 10.427 201.70371539999857 9.719 156.22634129999938 10.106 222.40199259999892 10.809 174.75274659999897 9.647 146.97469699999945 9.489 115.6505261000002 10.352 197.79818660000123 9.571 183.74610440000149 10.769 170.7706804999996 10.731 154.40940370000106 9.485 138.7115125000006 10.86 137.4340516 10.413 204.00619009999824 9.873 172.14623210000056 9.962 233.44771529999923 11.772 160.6811121000007 9.554 168.24010930000128 10.178 133.2199257999998 9.235 184.2429900000004 9.856 152.247297100001 10.774 146.73570499999832 10.127 233.89896469999806 11.119 202.47614180000218 10.907)
Error minima by case: (0.3821 9 0.1283 8 1.0 4 0.3673 8 46.0 6 0.4566 8 1.7916 5 0.0739 5 1.0 4 0.3757 5 13.3522 5 0.329 7 0.4129 5 0.1915 7 0.2342 5 0.4847 7 14.1574 6 0.1918 7 1.0641 5 0.2308 6 4.2177 7 0.4481 5 0.4764 7 45.3785 6 14.2489 6)
Average genome size in population (length): 106.101
Average program size in population (points): 107.101
Average percent parens in population: 0.009
Minimum age in population: 62.27417162884171
Maximum age in population: 66.44142177067184
Average age in population: 64.60722608807649
Median age in population: 64.6375602879587
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.887
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.887
Total error diversity:				 0.501
Error (vector) diversity:			 0.547
Behavioral diversity:				 0.547
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 100158792
--- Timings ---
Current time: 1529615746044 milliseconds
Total Time:         177.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.6 seconds, 35.8%
Fitness Testing:     89.3 seconds, 50.2%
Report:              24.8 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Number IO problem report - generation 47
Test total error for best: 61721.858999999975
Test mean error for best: 30.86093
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 57.02790      
Correct output: 24.1561588797  | Program output: 57.02790      
Correct output: 63.2618741651  | Program output: 1.01870       
Correct output: 81.4613344804  | Program output: 51.02730      
Correct output: -116.4209784668 | Program output: -44.01420     
Correct output: -80.5506083936 | Program output: -81.01050     
Correct output: 41.7915986532  | Program output: -3.01930      
Correct output: -6.9439752137  | Program output: -4.02000      
Correct output: 58.5604070006  | Program output: 1.01870       
Correct output: -105.4717093128 | Program output: -90.0960      
Correct output: -65.3737650023 | Program output: 4.02160       
Correct output: 80.422971733   | Program output: 53.02750      
Correct output: -36.4331405664 | Program output: -1.02030      
Correct output: 49.2855176563  | Program output: 47.02690      
Correct output: 5.2530048743   | Program output: -59.01270     
Correct output: -14.5307262538 | Program output: -32.01540     
Correct output: 174.8425999229 | Program output: 55.02770      
Correct output: 94.2858027683  | Program output: 66.02880      
Correct output: -32.1580651662 | Program output: 30.02520      
Correct output: 34.2563324554  | Program output: 33.02550      
Correct output: -34.3108385906 | Program output: -62.01240     
Correct output: -25.5420796562 | Program output: 17.02390      
Correct output: 40.5609747923  | Program output: 56.02780      
Correct output: -146.3905253753 | Program output: -66.01200     
Correct output: 125.2745939078 | Program output: 35.02570      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_dec} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction -8} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction integer_sub} {:instruction float_sin} {:instruction float_frominteger} {:instruction in2} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_dup_times} {:instruction float_flush} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_add} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_add} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_swap} {:instruction integer_add} {:instruction float_div} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction integer_add} {:instruction float_div} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_min} {:instruction -78} {:instruction float_mod} {:instruction integer_yank} {:instruction integer_dup_items} {:instruction float_stackdepth})
Best program: (float_yankdup integer_fromfloat float_rot float_frominteger integer_add in2 integer_shove float_dec in1 integer_stackdepth integer_add in2 integer_swap float_dec 46.73998848521251 -8 float_pop float_pop integer_stackdepth integer_sub integer_stackdepth integer_sub integer_stackdepth integer_sub integer_rot integer_shove float_frominteger in2 integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod float_pop integer_stackdepth integer_add integer_sub float_sin float_frominteger in2 integer_sub integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth float_dup_times float_flush 46.73998848521251 integer_mult float_pop float_pop float_pop integer_stackdepth integer_sub integer_rot integer_add tagged_920 integer_sub integer_mod print_integer integer_add integer_dup float_stackdepth float_yank float_max float_div integer_mod print_integer integer_swap integer_add float_div float_stackdepth float_yank float_max integer_add float_div float_stackdepth float_yank float_max float_div float_frominteger integer_pop integer_pop integer_min -78 float_mod integer_yank integer_dup_items float_stackdepth)
Errors: [7.3821 11 32.8717 10 62.2432 9 30.434 9 72.4068 11 0.4599 9 44.8109 9 2.924 10 57.5417 9 15.3757 10 69.3954 11 27.3955 9 35.4128 11 2.2586 10 64.2657 9 17.4847 10 119.8149 12 28.257 9 62.1833 10 1.2308 8 27.7016 10 42.566 11 15.4668 10 80.3785 10 90.2489 10]
Total: 1257.5104999999999
Mean: 25.15021
Genome size: 115
Size: 116
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3997.380101000002
Median total errors in population: 1287.8948999999998
Error averages by case: (123.6763945000008 11.032 136.02350360000088 10.432 176.39424709999864 9.704 137.32573989999875 9.983 194.08665159999885 10.877 144.17638970000013 9.57 129.79898809999816 9.53 101.94567530000015 10.388 172.30394250000126 9.489 154.03581400000112 10.616 153.83408429999946 10.844 135.46604289999988 9.47 120.61446000000075 10.983 117.56847710000004 10.454 177.7805136999995 9.722 142.91253400000053 10.096 217.69565469999915 11.797 137.33250459999942 9.544 149.05400180000095 10.213 112.75034590000011 9.206 155.4542670000004 9.958 132.91928320000173 10.827 127.22134649999882 10.132 205.73611219999924 10.923 184.71312680000239 10.77)
Error minima by case: (0.3821 9 0.8717 8 1.0 4 0.434 7 26.4068 6 0.4494 8 1.7916 5 0.076 5 1.0 4 0.3757 5 12.3522 5 0.329 7 0.3391 5 0.1915 8 0.2403 5 0.4847 7 5.1851 6 0.1918 8 0.8671 5 0.2306 7 1.7016 7 0.4819 5 2.4668 8 12.3785 6 28.2489 6)
Average genome size in population (length): 104.712
Average program size in population (points): 105.712
Average percent parens in population: 0.010
Minimum age in population: 63.30361942864351
Maximum age in population: 67.75077768675743
Average age in population: 65.97610103356205
Median age in population: 66.0093151796947
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.887
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.887
Total error diversity:				 0.45
Error (vector) diversity:			 0.484
Behavioral diversity:				 0.484
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 102776867
--- Timings ---
Current time: 1529615750320 milliseconds
Total Time:         182.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.0 seconds, 35.7%
Fitness Testing:     91.6 seconds, 50.3%
Report:              25.5 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Number IO problem report - generation 48
Test total error for best: 61721.858999999975
Test mean error for best: 30.86093
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 57.02790      
Correct output: 24.1561588797  | Program output: 57.02790      
Correct output: 63.2618741651  | Program output: 1.01870       
Correct output: 81.4613344804  | Program output: 51.02730      
Correct output: -116.4209784668 | Program output: -44.01420     
Correct output: -80.5506083936 | Program output: -81.01050     
Correct output: 41.7915986532  | Program output: -3.01930      
Correct output: -6.9439752137  | Program output: -4.02000      
Correct output: 58.5604070006  | Program output: 1.01870       
Correct output: -105.4717093128 | Program output: -90.0960      
Correct output: -65.3737650023 | Program output: 4.02160       
Correct output: 80.422971733   | Program output: 53.02750      
Correct output: -36.4331405664 | Program output: -1.02030      
Correct output: 49.2855176563  | Program output: 47.02690      
Correct output: 5.2530048743   | Program output: -59.01270     
Correct output: -14.5307262538 | Program output: -32.01540     
Correct output: 174.8425999229 | Program output: 55.02770      
Correct output: 94.2858027683  | Program output: 66.02880      
Correct output: -32.1580651662 | Program output: 30.02520      
Correct output: 34.2563324554  | Program output: 33.02550      
Correct output: -34.3108385906 | Program output: -62.01240     
Correct output: -25.5420796562 | Program output: 17.02390      
Correct output: 40.5609747923  | Program output: 56.02780      
Correct output: -146.3905253753 | Program output: -66.01200     
Correct output: 125.2745939078 | Program output: 35.02570      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_dec} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction -8} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction integer_sub} {:instruction float_sin} {:instruction float_frominteger} {:instruction in2} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_dup_times} {:instruction float_flush} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_add} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_add} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_swap} {:instruction integer_add} {:instruction float_div} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_min} {:instruction -78} {:instruction float_mod} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_stackdepth})
Best program: (float_yankdup integer_fromfloat float_rot float_frominteger integer_add in2 integer_shove float_dec in1 integer_stackdepth integer_add in2 integer_swap float_dec 46.73998848521251 -8 float_pop float_pop integer_stackdepth integer_sub integer_stackdepth integer_sub integer_stackdepth integer_sub integer_rot integer_shove float_frominteger in2 integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod float_pop integer_stackdepth integer_add integer_sub float_sin float_frominteger in2 integer_sub integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth float_dup_times float_flush 46.73998848521251 integer_mult float_pop float_pop float_pop integer_stackdepth integer_sub integer_rot integer_add tagged_920 integer_sub integer_mod print_integer integer_add integer_dup float_stackdepth float_yank float_max float_div integer_mod print_integer integer_swap integer_add float_div float_stackdepth float_yank float_max float_div float_frominteger integer_pop float_stackdepth float_yank float_max float_div float_frominteger integer_pop integer_pop integer_min -78 float_mod integer_yank float_dup_times float_stackdepth)
Errors: [7.3821 11 32.8717 10 62.2432 9 30.434 9 72.4068 11 0.4599 9 44.8109 9 2.924 10 57.5417 9 15.3757 10 69.3954 11 27.3955 9 35.4128 11 2.2586 10 64.2657 9 17.4847 10 119.8149 12 28.257 9 62.1833 10 1.2308 8 27.7016 10 42.566 11 15.4668 10 80.3785 10 90.2489 10]
Total: 1257.5104999999999
Mean: 25.15021
Genome size: 116
Size: 117
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3955.731308800002
Median total errors in population: 1292.8721999999998
Error averages by case: (125.79445380000081 11.114 137.04884900000098 10.458 168.69274459999852 9.712 141.09348509999876 9.826 188.05061689999906 10.99 139.6432369000004 9.573 130.3358363999982 9.638 96.96329380000009 10.414 164.5692308000011 9.483 152.23676480000083 10.541 151.77129339999928 10.947 139.32912410000023 9.484 121.32333330000091 10.989 118.99233270000003 10.545 169.37683069999957 9.581 134.43775050000062 10.199 221.114540999999 11.923 141.1674739999994 9.575 146.58900210000104 10.317 113.65588360000027 9.195 148.6915045000005 10.075 131.29693760000166 10.849 128.92523509999856 10.156 200.90791029999895 10.784 186.7146438000021 10.641)
Error minima by case: (1.3821 9 0.1283 7 10.756 8 0.434 8 7.327 9 0.4494 8 0.7916 8 0.056 9 15.4575 8 0.4717 8 1.7202 8 0.329 7 0.4128 8 0.1915 8 0.7597 8 0.4847 8 5.1574 10 0.1918 7 0.0641 8 0.1903 7 4.3108 7 0.4818 8 0.5332 8 0.3718 8 36.7254 9)
Average genome size in population (length): 104.778
Average program size in population (points): 105.778
Average percent parens in population: 0.009
Minimum age in population: 64.89937832396095
Maximum age in population: 69.26136720439416
Average age in population: 67.32101744548775
Median age in population: 67.38463916611545
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.893
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.893
Total error diversity:				 0.427
Error (vector) diversity:			 0.462
Behavioral diversity:				 0.462
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 105396967
--- Timings ---
Current time: 1529615754615 milliseconds
Total Time:         186.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.4 seconds, 35.6%
Fitness Testing:     93.9 seconds, 50.4%
Report:              26.1 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Number IO problem report - generation 49
Test total error for best: 61721.858999999975
Test mean error for best: 30.86093
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 57.02790      
Correct output: 24.1561588797  | Program output: 57.02790      
Correct output: 63.2618741651  | Program output: 1.01870       
Correct output: 81.4613344804  | Program output: 51.02730      
Correct output: -116.4209784668 | Program output: -44.01420     
Correct output: -80.5506083936 | Program output: -81.01050     
Correct output: 41.7915986532  | Program output: -3.01930      
Correct output: -6.9439752137  | Program output: -4.02000      
Correct output: 58.5604070006  | Program output: 1.01870       
Correct output: -105.4717093128 | Program output: -90.0960      
Correct output: -65.3737650023 | Program output: 4.02160       
Correct output: 80.422971733   | Program output: 53.02750      
Correct output: -36.4331405664 | Program output: -1.02030      
Correct output: 49.2855176563  | Program output: 47.02690      
Correct output: 5.2530048743   | Program output: -59.01270     
Correct output: -14.5307262538 | Program output: -32.01540     
Correct output: 174.8425999229 | Program output: 55.02770      
Correct output: 94.2858027683  | Program output: 66.02880      
Correct output: -32.1580651662 | Program output: 30.02520      
Correct output: 34.2563324554  | Program output: 33.02550      
Correct output: -34.3108385906 | Program output: -62.01240     
Correct output: -25.5420796562 | Program output: 17.02390      
Correct output: 40.5609747923  | Program output: 56.02780      
Correct output: -146.3905253753 | Program output: -66.01200     
Correct output: 125.2745939078 | Program output: 35.02570      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction in2} {:instruction integer_shove} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction -8} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction integer_sub} {:instruction float_sin} {:instruction float_frominteger} {:instruction in2} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_dup_times} {:instruction float_flush} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction float_swap} {:instruction integer_add} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_add} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_swap} {:instruction integer_add} {:instruction float_div} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_min} {:instruction -78} {:instruction float_mod} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_stackdepth})
Best program: (float_yankdup integer_fromfloat float_rot float_frominteger integer_add in2 in2 integer_shove float_dec 46.73998848521251 integer_stackdepth integer_add in2 integer_swap float_dec 46.73998848521251 -8 float_pop float_pop integer_stackdepth integer_sub integer_stackdepth integer_sub integer_stackdepth integer_sub integer_rot integer_shove float_frominteger in2 integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod float_pop integer_stackdepth integer_add integer_sub float_sin float_frominteger in2 integer_sub integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth float_dup_times float_flush 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub float_swap integer_add tagged_920 integer_sub integer_mod print_integer integer_add integer_dup float_stackdepth float_yank float_max float_div integer_mod print_integer integer_swap integer_add float_div integer_pop integer_pop integer_min -78 float_mod integer_yank float_dup_times float_stackdepth)
Errors: [7.3821 11 32.8717 10 62.2432 9 30.434 9 72.4068 11 0.4599 9 44.8109 9 2.924 10 57.5417 9 15.3757 10 69.3954 11 27.3955 9 35.4128 11 2.2586 10 64.2657 9 17.4847 10 119.8149 12 28.257 9 62.1833 10 1.2308 8 27.7016 10 42.566 11 15.4668 10 80.3785 10 90.2489 10]
Total: 1257.5104999999999
Mean: 25.15021
Genome size: 105
Size: 106
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4332.2334973
Median total errors in population: 1280.6592999999998
Error averages by case: (136.33016550000065 11.156 148.85966210000063 10.51 188.09115409999876 9.712 151.23754669999923 9.755 209.75220769999865 11.039 159.09600919999943 9.577 146.56640179999917 9.678 111.01197490000021 10.392 184.1239490000009 9.488 169.9805431000013 10.456 167.94574999999938 11.036 149.3895835000007 9.475 137.06705060000084 10.998 131.29061850000008 10.575 191.4935045999992 9.518 158.23246480000043 10.269 229.18042199999888 11.971 144.40268339999975 9.581 161.3430601000012 10.356 125.85155560000065 9.197 170.1330342000005 10.12 146.13608870000115 10.856 139.9954391999985 10.161 220.6469871999985 10.66 197.00664080000206 10.533)
Error minima by case: (0.6179 9 1.8622 8 1.0 4 0.3673 8 9.327 6 0.4494 7 1.7916 5 0.056 5 1.0 4 0.6243 5 13.2788 5 0.336 7 0.3391 5 0.1905 8 0.747 5 0.5153 8 7.1851 6 0.1918 7 0.0641 5 0.1623 7 6.7016 7 0.4818 5 2.4668 8 0.3785 6 31.2746 6)
Average genome size in population (length): 105.298
Average program size in population (points): 106.298
Average percent parens in population: 0.009
Minimum age in population: 65.89937832396095
Maximum age in population: 70.6921865579474
Average age in population: 68.61812727536264
Median age in population: 68.66541787356049
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.898
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.898
Total error diversity:				 0.389
Error (vector) diversity:			 0.421
Behavioral diversity:				 0.421
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 108029692
--- Timings ---
Current time: 1529615758825 milliseconds
Total Time:         190.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.7 seconds, 35.5%
Fitness Testing:     96.2 seconds, 50.4%
Report:              26.7 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Number IO problem report - generation 50
Test total error for best: 61721.858999999975
Test mean error for best: 30.86093
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 57.02790      
Correct output: 24.1561588797  | Program output: 57.02790      
Correct output: 63.2618741651  | Program output: 1.01870       
Correct output: 81.4613344804  | Program output: 51.02730      
Correct output: -116.4209784668 | Program output: -44.01420     
Correct output: -80.5506083936 | Program output: -81.01050     
Correct output: 41.7915986532  | Program output: -3.01930      
Correct output: -6.9439752137  | Program output: -4.02000      
Correct output: 58.5604070006  | Program output: 1.01870       
Correct output: -105.4717093128 | Program output: -90.0960      
Correct output: -65.3737650023 | Program output: 4.02160       
Correct output: 80.422971733   | Program output: 53.02750      
Correct output: -36.4331405664 | Program output: -1.02030      
Correct output: 49.2855176563  | Program output: 47.02690      
Correct output: 5.2530048743   | Program output: -59.01270     
Correct output: -14.5307262538 | Program output: -32.01540     
Correct output: 174.8425999229 | Program output: 55.02770      
Correct output: 94.2858027683  | Program output: 66.02880      
Correct output: -32.1580651662 | Program output: 30.02520      
Correct output: 34.2563324554  | Program output: 33.02550      
Correct output: -34.3108385906 | Program output: -62.01240     
Correct output: -25.5420796562 | Program output: 17.02390      
Correct output: 40.5609747923  | Program output: 56.02780      
Correct output: -146.3905253753 | Program output: -66.01200     
Correct output: 125.2745939078 | Program output: 35.02570      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction -8} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction integer_sub} {:instruction float_sin} {:instruction float_frominteger} {:instruction in2} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_dup_times} {:instruction float_flush} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_add} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_add} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_inc} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_min} {:instruction -78} {:instruction float_mod} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_stackdepth})
Best program: (float_yankdup integer_fromfloat integer_add in2 integer_shove float_dec 46.73998848521251 integer_stackdepth integer_add in2 integer_swap float_dec 46.73998848521251 -8 float_pop float_pop integer_stackdepth integer_sub integer_stackdepth integer_sub integer_stackdepth integer_sub integer_rot integer_shove float_frominteger in2 integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod float_pop integer_stackdepth integer_add integer_sub float_sin float_frominteger in2 integer_sub integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth float_dup_times float_flush 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_add float_pop integer_sub integer_mod print_integer integer_sub integer_mod print_integer integer_add integer_dup float_stackdepth float_yank float_max float_div integer_mod print_integer integer_swap integer_add integer_inc float_stackdepth float_yank float_max float_div float_frominteger integer_pop integer_pop integer_min -78 float_mod integer_yank float_dup_times float_stackdepth)
Errors: [7.3821 11 32.8717 10 62.2432 9 30.434 9 72.4068 11 0.4599 9 44.8109 9 2.924 10 57.5417 9 15.3757 10 69.3954 11 27.3955 9 35.4128 11 2.2586 10 64.2657 9 17.4847 10 119.8149 12 28.257 9 62.1833 10 1.2308 8 27.7016 10 42.566 11 15.4668 10 80.3785 10 90.2489 10]
Total: 1257.5104999999999
Mean: 25.15021
Genome size: 109
Size: 110
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4184.8418084999985
Median total errors in population: 1286.73715
Error averages by case: (130.70141230000075 11.166 143.17189450000077 10.426 180.1391582999985 9.743 146.733275999999 9.746 198.8212070999987 11.043 149.250007 9.528 143.90997999999885 9.714 110.33508950000027 10.412 176.05825630000106 9.497 159.481280800001 10.394 160.5547571999995 11.049 144.64445700000024 9.488 129.1974460000009 11.016 127.36654980000009 10.59 182.25948119999947 9.526 147.5549335000006 10.241 225.7939860999989 11.984 146.5243755999997 9.552 158.29143540000118 10.381 122.7878341000005 9.197 160.45647750000043 10.101 142.60205750000145 10.857 135.3799900999985 10.146 211.5084563999989 10.652 194.3210093000019 10.548)
Error minima by case: (1.3776 9 0.1283 7 18.243 8 0.434 8 7.327 9 0.4494 6 1.7916 8 0.068 8 13.5415 7 0.4528 8 8.3038 9 0.329 7 0.4128 8 0.1905 8 0.7597 8 0.4847 8 53.8149 10 0.257 7 0.1329 8 0.1623 7 2.7016 7 0.4481 8 2.52 8 1.2965 8 24.2489 9)
Average genome size in population (length): 104.946
Average program size in population (points): 105.946
Average percent parens in population: 0.009
Minimum age in population: 66.89937832396095
Maximum age in population: 72.12965918796041
Average age in population: 69.89811234105412
Median age in population: 69.92052250783269
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.914
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.914
Total error diversity:				 0.402
Error (vector) diversity:			 0.438
Behavioral diversity:				 0.438
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 110653692
--- Timings ---
Current time: 1529615763074 milliseconds
Total Time:         194.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.1 seconds, 35.4%
Fitness Testing:     98.4 seconds, 50.5%
Report:              27.3 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Number IO problem report - generation 51
Test total error for best: 60592.43099999997
Test mean error for best: 30.29622
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 57.02790      
Correct output: 24.1561588797  | Program output: 57.02790      
Correct output: 63.2618741651  | Program output: -12.01870     
Correct output: 81.4613344804  | Program output: 51.02730      
Correct output: -116.4209784668 | Program output: -51.01420     
Correct output: -80.5506083936 | Program output: -80.01050     
Correct output: 41.7915986532  | Program output: -3.01930      
Correct output: -6.9439752137  | Program output: -4.02000      
Correct output: 58.5604070006  | Program output: -17.01870     
Correct output: -105.4717093128 | Program output: -104.0960     
Correct output: -65.3737650023 | Program output: 4.02160       
Correct output: 80.422971733   | Program output: 53.02750      
Correct output: -36.4331405664 | Program output: -1.02030      
Correct output: 49.2855176563  | Program output: 47.02690      
Correct output: 5.2530048743   | Program output: -73.01270     
Correct output: -14.5307262538 | Program output: -14.01540     
Correct output: 174.8425999229 | Program output: 55.02770      
Correct output: 94.2858027683  | Program output: 66.02880      
Correct output: -32.1580651662 | Program output: 30.02520      
Correct output: 34.2563324554  | Program output: 33.02550      
Correct output: -34.3108385906 | Program output: -34.01240     
Correct output: -25.5420796562 | Program output: 17.02390      
Correct output: 40.5609747923  | Program output: 56.02780      
Correct output: -146.3905253753 | Program output: -59.01200     
Correct output: 125.2745939078 | Program output: 35.02570      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction -8} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_944} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_tan} {:instruction float_sin} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction in2} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_dup_times} {:instruction float_flush} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_add} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_add} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_swap} {:instruction integer_add} {:instruction float_div} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_min} {:instruction -78} {:instruction float_mod} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_stackdepth})
Best program: (float_yankdup integer_fromfloat float_rot float_frominteger integer_add in2 integer_shove float_dec in1 integer_fromfloat integer_add in2 integer_swap float_dec 46.73998848521251 -8 float_pop float_pop integer_stackdepth integer_sub integer_stackdepth integer_sub integer_stackdepth integer_sub integer_rot integer_shove float_frominteger in2 integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_944 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod float_pop integer_stackdepth integer_add float_tan float_sin float_frominteger float_frominteger in2 integer_sub integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth float_dup_times float_flush 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_rot integer_add tagged_920 integer_sub integer_mod print_integer integer_add integer_dup float_stackdepth float_yank float_max float_div integer_mod print_integer integer_swap integer_add float_div float_stackdepth float_yank float_max float_div float_frominteger integer_pop integer_pop integer_min -78 float_mod integer_yank float_dup_times float_stackdepth)
Errors: [7.3821 11 32.8717 10 75.2806 10 30.434 9 65.4068 10 0.5401 8 44.8109 9 2.924 10 75.5791 10 1.3757 9 69.3954 11 27.3955 9 35.4128 11 2.2586 10 78.2657 9 0.5153 8 119.8149 12 28.257 9 62.1833 10 1.2308 8 0.2984 8 42.566 11 15.4668 10 87.3785 11 90.2489 10]
Total: 1240.2929
Mean: 24.805859
Genome size: 110
Size: 111
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4235.995281800002
Median total errors in population: 1287.1997499999998
Error averages by case: (133.3171838000006 11.165 144.46897390000075 10.49 184.3383955999986 9.701 148.88006119999935 9.758 203.46451799999875 11.007 154.41810569999907 9.589 142.56443429999925 9.724 111.1475956000002 10.415 180.33301590000102 9.462 165.33663730000148 10.424 161.73582099999962 10.996 147.06194450000103 9.494 132.263543900001 10.957 128.32061860000005 10.629 183.4014453999989 9.517 152.06315050000066 10.262 228.03564349999914 11.98 146.80221580000017 9.635 155.04429550000145 10.343 123.22772690000053 9.226 163.8006232000004 10.117 140.68586880000126 10.843 136.53818149999836 10.164 216.25363049999845 10.716 195.32565090000224 10.552)
Error minima by case: (0.6179 9 1.0622 8 1.0 4 1.3673 7 9.327 6 0.4494 7 1.7916 5 0.0746 5 1.0 4 0.4528 5 1.6424 5 0.329 7 0.4128 5 0.1915 9 0.2213 5 0.4367 8 19.8149 6 0.257 7 0.1329 5 0.1623 7 0.2984 7 0.4818 5 0.561 8 0.6215 6 9.7511 6)
Average genome size in population (length): 105.367
Average program size in population (points): 106.367
Average percent parens in population: 0.009
Minimum age in population: 68.82092011695666
Maximum age in population: 73.54065909792044
Average age in population: 71.20438837815085
Median age in population: 71.23329469886174
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.906
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.906
Total error diversity:				 0.4
Error (vector) diversity:			 0.439
Behavioral diversity:				 0.439
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 113288467
--- Timings ---
Current time: 1529615767382 milliseconds
Total Time:         199.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        70.4 seconds, 35.3%
Fitness Testing:    100.7 seconds, 50.6%
Report:              28.0 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Number IO problem report - generation 52
Test total error for best: 60592.43099999997
Test mean error for best: 30.29622
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 57.02790      
Correct output: 24.1561588797  | Program output: 57.02790      
Correct output: 63.2618741651  | Program output: -12.01870     
Correct output: 81.4613344804  | Program output: 51.02730      
Correct output: -116.4209784668 | Program output: -51.01420     
Correct output: -80.5506083936 | Program output: -80.01050     
Correct output: 41.7915986532  | Program output: -3.01930      
Correct output: -6.9439752137  | Program output: -4.02000      
Correct output: 58.5604070006  | Program output: -17.01870     
Correct output: -105.4717093128 | Program output: -104.0960     
Correct output: -65.3737650023 | Program output: 4.02160       
Correct output: 80.422971733   | Program output: 53.02750      
Correct output: -36.4331405664 | Program output: -1.02030      
Correct output: 49.2855176563  | Program output: 47.02690      
Correct output: 5.2530048743   | Program output: -73.01270     
Correct output: -14.5307262538 | Program output: -14.01540     
Correct output: 174.8425999229 | Program output: 55.02770      
Correct output: 94.2858027683  | Program output: 66.02880      
Correct output: -32.1580651662 | Program output: 30.02520      
Correct output: 34.2563324554  | Program output: 33.02550      
Correct output: -34.3108385906 | Program output: -34.01240     
Correct output: -25.5420796562 | Program output: 17.02390      
Correct output: 40.5609747923  | Program output: 56.02780      
Correct output: -146.3905253753 | Program output: -59.01200     
Correct output: 125.2745939078 | Program output: 35.02570      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction -8} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_944} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_tan} {:instruction float_sin} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction in2} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_dup_times} {:instruction float_flush} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_add} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_add} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_swap} {:instruction integer_add} {:instruction float_div} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_min} {:instruction -78} {:instruction float_mod} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_stackdepth})
Best program: (float_yankdup integer_fromfloat float_rot float_frominteger integer_add in2 integer_shove float_dec in1 integer_fromfloat integer_add in2 integer_swap float_dec 46.73998848521251 -8 float_pop float_pop integer_stackdepth integer_sub integer_stackdepth integer_sub integer_stackdepth integer_sub integer_rot integer_shove float_frominteger in2 integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_944 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod float_pop integer_stackdepth integer_add float_tan float_sin float_frominteger float_frominteger in2 integer_sub integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth float_dup_times float_flush 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_rot integer_add tagged_920 integer_sub integer_mod print_integer integer_add integer_dup float_stackdepth float_yank float_max float_div integer_mod print_integer integer_swap integer_add float_div float_stackdepth float_yank float_max float_div float_frominteger integer_pop integer_pop integer_min -78 float_mod integer_yank float_dup_times float_stackdepth)
Errors: [7.3821 11 32.8717 10 75.2806 10 30.434 9 65.4068 10 0.5401 8 44.8109 9 2.924 10 75.5791 10 1.3757 9 69.3954 11 27.3955 9 35.4128 11 2.2586 10 78.2657 9 0.5153 8 119.8149 12 28.257 9 62.1833 10 1.2308 8 0.2984 8 42.566 11 15.4668 10 87.3785 11 90.2489 10]
Total: 1240.2929
Mean: 24.805859
Genome size: 110
Size: 111
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4088.508431700001
Median total errors in population: 1324.8436000000002
Error averages by case: (129.5635677000007 11.132 141.12266550000086 10.444 171.5524202999986 9.695 144.98013669999918 9.746 196.21339909999892 11.022 146.89514700000004 9.587 136.3976330999985 9.676 103.34914320000009 10.448 167.4912903000011 9.481 160.13710440000122 10.364 157.9663438999992 11.039 143.1948321000005 9.475 127.17915000000093 11.014 125.25383290000006 10.584 176.00866519999948 9.526 142.56638360000065 10.256 224.20476629999894 12.006 142.46598739999965 9.559 151.4590703000009 10.355 118.74795730000028 9.216 154.52010820000044 10.127 136.96463150000145 10.862 134.0025841999986 10.149 208.65709709999888 10.659 190.6245144000021 10.568)
Error minima by case: (1.3821 9 1.8717 8 19.1679 7 0.434 8 7.327 8 0.4494 7 1.7916 8 0.056 9 14.4664 8 0.3757 8 12.6478 9 0.329 7 0.4128 8 0.1915 7 0.158 8 0.4367 7 23.8426 10 0.257 7 0.1329 8 0.1623 7 0.2984 7 0.4452 8 2.4667 8 2.7035 8 25.7254 9)
Average genome size in population (length): 105.239
Average program size in population (points): 106.239
Average percent parens in population: 0.009
Minimum age in population: 69.82092011695666
Maximum age in population: 74.40932885946553
Average age in population: 72.51296497987096
Median age in population: 72.55706417765373
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.936
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.936
Total error diversity:				 0.399
Error (vector) diversity:			 0.439
Behavioral diversity:				 0.439
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 115919592
--- Timings ---
Current time: 1529615771682 milliseconds
Total Time:         203.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.8 seconds, 35.3%
Fitness Testing:    103.0 seconds, 50.6%
Report:              28.6 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Number IO problem report - generation 53
Test total error for best: 40117.60210000007
Test mean error for best: 20.05880
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 34.0740       
Correct output: 24.1561588797  | Program output: 59.0740       
Correct output: 63.2618741651  | Program output: 64.01880      
Correct output: 81.4613344804  | Program output: 65.0800       
Correct output: -116.4209784668 | Program output: -115.01880    
Correct output: -80.5506083936 | Program output: -80.01880     
Correct output: 41.7915986532  | Program output: -10.01600     
Correct output: -6.9439752137  | Program output: -1.01530      
Correct output: 58.5604070006  | Program output: 59.01880      
Correct output: -105.4717093128 | Program output: -104.01880    
Correct output: -65.3737650023 | Program output: 2.01370       
Correct output: 80.422971733   | Program output: 70.0780       
Correct output: -36.4331405664 | Program output: 0.01500       
Correct output: 49.2855176563  | Program output: 24.0840       
Correct output: 5.2530048743   | Program output: 6.01880       
Correct output: -14.5307262538 | Program output: -14.01880     
Correct output: 174.8425999229 | Program output: 54.0760       
Correct output: 94.2858027683  | Program output: 82.0650       
Correct output: -32.1580651662 | Program output: 41.01010      
Correct output: 34.2563324554  | Program output: 25.0980       
Correct output: -34.3108385906 | Program output: -34.01880     
Correct output: -25.5420796562 | Program output: 34.01140      
Correct output: 40.5609747923  | Program output: 42.0750       
Correct output: -146.3905253753 | Program output: -145.01880    
Correct output: 125.2745939078 | Program output: 43.0960       
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction -8} {:instruction float_pop} {:instruction in2} {:instruction integer_swap} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction -8} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction integer_sub} {:instruction float_sin} {:instruction float_frominteger} {:instruction in2} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_dup_times} {:instruction float_flush} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction float_swap} {:instruction integer_add} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_add} {:instruction float_div} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_max} {:instruction float_div} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_swap} {:instruction integer_add} {:instruction float_div} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction float_frominteger})
Best program: (float_yankdup integer_fromfloat float_rot float_frominteger integer_add in2 integer_shove float_dec in1 integer_fromfloat integer_add in2 integer_swap float_dec 46.73998848521251 -8 float_pop in2 integer_swap float_dec 46.73998848521251 -8 float_pop float_pop integer_stackdepth integer_sub integer_stackdepth integer_sub integer_stackdepth integer_sub integer_rot integer_shove float_frominteger in2 integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod float_pop integer_stackdepth integer_add integer_sub float_sin float_frominteger in2 integer_sub integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth float_dup_times float_flush 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub float_swap integer_add tagged_920 integer_sub integer_mod print_integer integer_add float_div float_stackdepth float_max float_max float_div integer_mod print_integer integer_swap integer_add float_div float_stackdepth float_yank float_max float_div float_frominteger)
Errors: [15.5718 10 34.9178 11 0.7569 9 16.3813 10 1.4022 9 0.5318 8 51.8076 10 5.9287 9 0.4584 9 1.4529 9 67.3875 10 10.345 9 36.4481 11 25.2015 11 0.7658 9 0.5119 9 120.7666 12 12.2208 10 73.1682 11 9.1583 11 0.292 6 59.5535 12 1.514 9 1.3717 10 82.1786 11]
Total: 875.0929000000002
Mean: 17.501858
Genome size: 107
Size: 108
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3819.0647627
Median total errors in population: 1271.45185
Error averages by case: (112.98359490000061 11.111 126.41301200000095 10.437 171.27492599999863 9.648 128.2040531999985 9.685 189.202187799999 10.956 138.96045980000028 9.485 124.63007269999845 9.596 92.85258600000007 10.376 167.3550619000011 9.527 151.03070700000075 10.366 146.0745682999992 11.107 126.21047839999962 9.419 115.46342470000029 10.996 107.82682610000018 10.552 172.63350719999966 9.488 136.41855570000052 10.181 209.26426089999893 11.982 130.4452265999991 9.562 141.06272670000075 10.344 103.30266290000012 9.136 149.4708431000004 10.052 125.72624660000137 10.878 116.93863029999908 10.086 202.06675339999913 10.659 177.082390500002 10.542)
Error minima by case: (0.4482 9 0.8717 8 0.7569 8 0.434 8 1.4022 8 0.4494 8 1.7916 8 0.0719 7 0.4584 8 0.3777 7 13.2798 9 0.329 7 0.4128 7 0.1915 9 0.2403 8 0.4727 7 5.1574 10 0.257 7 1.1329 8 0.1623 7 0.2828 6 0.4579 8 1.514 8 0.7035 9 1.8194 9)
Average genome size in population (length): 105.822
Average program size in population (points): 106.822
Average percent parens in population: 0.009
Minimum age in population: 71.53818853006536
Maximum age in population: 75.70045342586214
Average age in population: 73.7344535653047
Median age in population: 73.75891898377999
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.909
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.909
Total error diversity:				 0.381
Error (vector) diversity:			 0.412
Behavioral diversity:				 0.412
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 118565692
--- Timings ---
Current time: 1529615775923 milliseconds
Total Time:         207.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        73.2 seconds, 35.2%
Fitness Testing:    105.2 seconds, 50.6%
Report:              29.3 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Number IO problem report - generation 54
Test total error for best: 19091.490200000007
Test mean error for best: 9.54575
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 41.0188       
Correct output: 24.1561588797  | Program output: 16.0188       
Correct output: 63.2618741651  | Program output: 54.0188       
Correct output: 81.4613344804  | Program output: 73.0188       
Correct output: -116.4209784668 | Program output: -125.0188     
Correct output: -80.5506083936 | Program output: -90.0188      
Correct output: 41.7915986532  | Program output: 32.0188       
Correct output: -6.9439752137  | Program output: -15.0188      
Correct output: 58.5604070006  | Program output: 49.0188       
Correct output: -105.4717093128 | Program output: -114.0188     
Correct output: -65.3737650023 | Program output: -74.0188      
Correct output: 80.422971733   | Program output: 72.0188       
Correct output: -36.4331405664 | Program output: -45.0188      
Correct output: 49.2855176563  | Program output: 41.0188       
Correct output: 5.2530048743   | Program output: -4.0188       
Correct output: -14.5307262538 | Program output: -24.0188      
Correct output: 174.8425999229 | Program output: 165.0188      
Correct output: 94.2858027683  | Program output: 86.0188       
Correct output: -32.1580651662 | Program output: -41.0188      
Correct output: 34.2563324554  | Program output: 26.0188       
Correct output: -34.3108385906 | Program output: -44.0188      
Correct output: -25.5420796562 | Program output: -34.0188      
Correct output: 40.5609747923  | Program output: 32.0188       
Correct output: -146.3905253753 | Program output: -155.0188     
Correct output: 125.2745939078 | Program output: 116.0188      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction -8} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction integer_sub} {:instruction float_sin} {:instruction float_frominteger} {:instruction in2} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_dup_times} {:instruction float_flush} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction float_swap} {:instruction integer_add} {:instruction tagged_920} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_swap} {:instruction integer_add} {:instruction float_div} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_min} {:instruction -78} {:instruction float_mod} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_stackdepth})
Best program: (float_yankdup integer_fromfloat float_rot float_frominteger integer_add in2 integer_shove float_dec in1 integer_fromfloat integer_add in2 integer_swap float_dec 46.73998848521251 -8 float_pop float_pop integer_stackdepth integer_sub integer_stackdepth integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod float_pop integer_stackdepth integer_add integer_sub float_sin float_frominteger in2 integer_sub integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth float_dup_times float_flush 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub float_swap integer_add tagged_920 integer_mod print_integer integer_swap integer_add float_div float_stackdepth float_yank float_max float_div float_frominteger integer_pop integer_pop integer_min -78 float_mod integer_yank float_dup_times float_stackdepth)
Errors: [8.627 9 8.1374 9 9.2431 10 8.4425 10 8.5978 9 9.4682 9 9.7728 10 8.0748 11 9.5416 11 8.5471 9 8.645 11 8.4042 10 8.5857 11 8.2667 10 9.2718 10 9.4881 9 9.8238 12 8.267 10 8.8607 10 8.2375 11 9.708 8 8.4767 11 8.5422 11 8.6283 11 9.2558 11]
Total: 473.91380000000004
Mean: 9.478276
Genome size: 93
Size: 94
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4511.048152199996
Median total errors in population: 1366.8551
Error averages by case: (146.8814484000002 11.099 157.88837870000043 10.483 193.66123679999873 9.78 161.7509446999999 9.847 209.04615939999871 10.905 160.79044329999994 9.44 149.58451019999958 9.762 127.44953210000001 10.399 190.05698260000077 9.691 171.7880135000012 10.299 174.0580918999998 11.075 159.94319040000101 9.498 144.61539520000048 10.945 142.08229900000006 10.607 194.91651269999875 9.573 159.9708353000003 10.106 239.98792219999908 11.961 163.02334440000038 9.678 168.78142940000123 10.325 135.79632850000036 9.392 169.48087630000035 9.912 154.09368990000073 10.875 149.9494320999986 10.153 221.23074539999865 10.769 207.0634098000018 10.583)
Error minima by case: (1.3821 9 0.8717 8 0.1679 7 0.434 8 1.4022 8 0.4494 7 1.7916 8 0.0719 8 0.4584 8 0.3757 8 0.3206 8 0.3283 7 0.4126 8 0.1915 8 0.1583 7 0.4366 7 9.7486 7 0.1918 7 0.1329 8 0.1623 7 0.2167 6 0.4818 8 1.4669 8 1.2965 8 9.1806 9)
Average genome size in population (length): 106.629
Average program size in population (points): 107.629
Average percent parens in population: 0.009
Minimum age in population: 72.53818853006536
Maximum age in population: 77.14293209520378
Average age in population: 75.15048992569183
Median age in population: 75.20905637172402
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.923
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.923
Total error diversity:				 0.443
Error (vector) diversity:			 0.489
Behavioral diversity:				 0.49
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 121232192
--- Timings ---
Current time: 1529615780167 milliseconds
Total Time:         212.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        74.6 seconds, 35.2%
Fitness Testing:    107.5 seconds, 50.7%
Report:              29.9 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
;;******************************
;; -*- Number IO problem report - generation 55
Test total error for best: 14816.92620000002
Test mean error for best: 7.40846
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 45.0188       
Correct output: 24.1561588797  | Program output: 20.0188       
Correct output: 63.2618741651  | Program output: 58.0188       
Correct output: 81.4613344804  | Program output: 77.0188       
Correct output: -116.4209784668 | Program output: -121.0188     
Correct output: -80.5506083936 | Program output: -86.0188      
Correct output: 41.7915986532  | Program output: 36.0188       
Correct output: -6.9439752137  | Program output: -11.0188      
Correct output: 58.5604070006  | Program output: 53.0188       
Correct output: -105.4717093128 | Program output: -110.0188     
Correct output: -65.3737650023 | Program output: -70.0188      
Correct output: 80.422971733   | Program output: 76.0188       
Correct output: -36.4331405664 | Program output: -41.0188      
Correct output: 49.2855176563  | Program output: 45.0188       
Correct output: 5.2530048743   | Program output: 0.0188        
Correct output: -14.5307262538 | Program output: -20.0188      
Correct output: 174.8425999229 | Program output: 169.0188      
Correct output: 94.2858027683  | Program output: 90.0188       
Correct output: -32.1580651662 | Program output: -37.0188      
Correct output: 34.2563324554  | Program output: 30.0188       
Correct output: -34.3108385906 | Program output: -40.0188      
Correct output: -25.5420796562 | Program output: -30.0188      
Correct output: 40.5609747923  | Program output: 36.0188       
Correct output: -146.3905253753 | Program output: -151.0188     
Correct output: 125.2745939078 | Program output: 120.0188      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction -8} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction integer_sub} {:instruction float_swap} {:instruction float_frominteger} {:instruction in2} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_dup_times} {:instruction float_flush} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction float_swap} {:instruction integer_add} {:instruction tagged_920} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_swap} {:instruction integer_add} {:instruction float_div} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_min} {:instruction -78} {:instruction float_mod} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_stackdepth})
Best program: (float_yankdup integer_fromfloat float_rot float_frominteger integer_add in2 integer_shove float_dec in1 integer_fromfloat integer_add in2 integer_swap float_dec 46.73998848521251 -8 float_pop float_pop integer_stackdepth integer_sub integer_stackdepth integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth float_frominteger integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod float_pop integer_stackdepth integer_add integer_sub float_swap float_frominteger in2 integer_sub integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth float_dup_times float_flush 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub float_swap integer_add tagged_920 integer_mod print_integer integer_swap integer_add float_div float_stackdepth float_yank float_max float_div float_frominteger integer_pop integer_pop integer_min -78 float_mod integer_yank float_dup_times float_stackdepth)
Errors: [4.627 9 4.1374 8 5.2431 10 4.4425 10 4.5978 9 5.4682 9 5.7728 10 4.0748 11 5.5416 10 4.5471 9 4.645 11 4.4042 10 4.5857 10 4.2667 10 5.2342 9 5.4881 10 5.8238 12 4.267 9 4.8607 9 4.2375 11 5.708 9 4.4767 11 4.5422 11 4.6283 11 5.2558 10]
Total: 368.8762000000001
Mean: 7.377524
Genome size: 93
Size: 94
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4189.010955399999
Median total errors in population: 1342.6889500000002
Error averages by case: (135.1551403000003 11.012 146.93069060000033 10.495 180.27549529999885 9.94 148.97126859999943 9.962 194.56856779999916 10.692 152.2025158999998 9.413 136.86119819999902 9.775 105.16814770000012 10.385 176.5677134000008 9.89 160.7002265000005 10.111 161.62338899999958 11.126 148.12942510000025 9.496 128.99863560000037 10.903 130.84044740000013 10.557 182.61804629999943 9.611 142.53097340000025 9.841 226.21647269999903 11.928 153.33189089999976 9.7 157.66584700000084 10.294 125.13043700000026 9.474 153.44221740000032 9.662 142.96252670000118 10.789 138.13163749999902 10.118 210.0418325999991 10.904 193.2612125000015 10.607)
Error minima by case: (0.4502 9 0.9398 8 0.1678 4 0.434 8 0.3269 6 0.4494 7 0.7734 5 0.056 5 0.4583 4 0.3757 5 0.3579 5 0.329 7 0.4128 5 0.1915 8 0.1589 5 0.4366 6 0.7446 6 0.257 7 0.1458 5 0.1623 7 0.2167 6 0.4579 5 0.4669 8 0.2955 6 0.2628 6)
Average genome size in population (length): 107.86
Average program size in population (points): 108.86
Average percent parens in population: 0.009
Minimum age in population: 73.53818853006536
Maximum age in population: 78.53580714812989
Average age in population: 76.44676607504049
Median age in population: 76.50462561373337
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.894
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.894
Total error diversity:				 0.516
Error (vector) diversity:			 0.557
Behavioral diversity:				 0.56
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 123929117
--- Timings ---
Current time: 1529615784409 milliseconds
Total Time:         216.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        75.9 seconds, 35.1%
Fitness Testing:    109.9 seconds, 50.8%
Report:              30.4 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
;;******************************
;; -*- Number IO problem report - generation 56
Test total error for best: 12801.430999999993
Test mean error for best: 6.40072
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 47.0940       
Correct output: 24.1561588797  | Program output: 22.0940       
Correct output: 63.2618741651  | Program output: 60.0940       
Correct output: 81.4613344804  | Program output: 79.0940       
Correct output: -116.4209784668 | Program output: -119.0940     
Correct output: -80.5506083936 | Program output: -84.0940      
Correct output: 41.7915986532  | Program output: 38.0940       
Correct output: -6.9439752137  | Program output: -9.0940       
Correct output: 58.5604070006  | Program output: 55.0940       
Correct output: -105.4717093128 | Program output: -108.0940     
Correct output: -65.3737650023 | Program output: -68.0940      
Correct output: 80.422971733   | Program output: 78.0940       
Correct output: -36.4331405664 | Program output: -39.0940      
Correct output: 49.2855176563  | Program output: 47.0940       
Correct output: 5.2530048743   | Program output: 2.0940        
Correct output: -14.5307262538 | Program output: -18.0940      
Correct output: 174.8425999229 | Program output: 171.0940      
Correct output: 94.2858027683  | Program output: 92.0940       
Correct output: -32.1580651662 | Program output: -35.0940      
Correct output: 34.2563324554  | Program output: 32.0940       
Correct output: -34.3108385906 | Program output: -38.0940      
Correct output: -25.5420796562 | Program output: -28.0940      
Correct output: 40.5609747923  | Program output: 38.0940       
Correct output: -146.3905253753 | Program output: -149.0940     
Correct output: 125.2745939078 | Program output: 122.0940      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_stackdepth} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction in2} {:instruction integer_swap} {:instruction float_dec} {:instruction 46.73998848521251} {:instruction -8} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_tan} {:instruction float_sin} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction in2} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_dup_times} {:instruction float_flush} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_add} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_add} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_swap} {:instruction integer_add} {:instruction float_div} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_min} {:instruction -78} {:instruction float_mod} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_stackdepth})
Best program: (float_yankdup integer_fromfloat float_rot float_frominteger integer_add in2 integer_shove float_dec integer_yankdup integer_stackdepth float_yankdup integer_fromfloat float_rot float_frominteger integer_add in2 integer_shove float_dec in1 integer_fromfloat integer_add in2 integer_swap float_dec 46.73998848521251 -8 float_pop float_pop integer_stackdepth integer_sub integer_stackdepth integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod float_pop integer_stackdepth integer_add float_tan float_sin float_frominteger float_frominteger in2 integer_sub integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth float_dup_times float_flush 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_rot integer_add tagged_920 integer_sub integer_mod print_integer integer_add integer_dup float_stackdepth float_yank float_max float_div integer_mod print_integer integer_swap integer_add float_div float_stackdepth float_yank float_max float_div float_frominteger integer_pop integer_pop integer_min -78 float_mod integer_yank float_dup_times float_stackdepth)
Errors: [2.5518 10 2.0622 11 3.1679 10 2.3673 10 2.673 8 3.5434 9 3.6976 11 2.15 10 3.4664 9 2.6223 9 2.7202 10 2.329 10 2.6609 9 2.1915 11 3.159 9 3.5633 10 3.7486 10 2.1918 10 2.9359 10 2.1623 10 3.7832 9 2.5519 9 2.467 9 2.7035 10 3.1806 9]
Total: 312.6506
Mean: 6.253012
Genome size: 105
Size: 106
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3924.622140299998
Median total errors in population: 1270.4594
Error averages by case: (121.51202250000046 11.004 133.23285370000067 10.557 177.68194739999916 10.153 134.55178599999869 10.014 184.7763864999991 10.468 144.8286012 9.148 132.65628859999885 9.861 95.64281020000021 10.397 174.56667850000073 9.97 150.44738700000045 9.813 152.99746769999928 11.041 132.6488757999998 9.507 121.0532274000002 10.924 116.74494970000013 10.637 173.06857179999983 9.684 134.89093029999992 9.462 212.85272519999933 11.879 135.00491759999937 9.77 146.83974410000076 10.321 111.29711440000015 9.578 141.83727230000008 9.181 133.08051990000143 10.798 124.41108099999902 10.006 200.36618879999924 10.976 181.82179270000168 10.661)
Error minima by case: (0.3542 9 0.8438 8 0.1669 3 0.3673 8 0.326 5 0.4494 7 0.6976 4 0.0759 4 0.4396 3 0.3757 4 0.2798 4 0.329 7 0.3341 4 0.1915 7 0.158 4 0.4357 6 0.7446 5 0.1868 7 0.0641 4 0.1623 7 0.2158 6 0.4481 4 0.439 7 0.2955 5 0.1806 5)
Average genome size in population (length): 107.971
Average program size in population (points): 108.971
Average percent parens in population: 0.009
Minimum age in population: 74.69805747418344
Maximum age in population: 79.89348891645608
Average age in population: 77.79981642276645
Median age in population: 77.82517980100387
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.884
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.884
Total error diversity:				 0.527
Error (vector) diversity:			 0.564
Behavioral diversity:				 0.565
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 126629317
--- Timings ---
Current time: 1529615788755 milliseconds
Total Time:         220.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        77.3 seconds, 35.0%
Fitness Testing:    112.2 seconds, 50.9%
Report:              31.0 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
;;******************************
;; -*- Number IO problem report - generation 57
Test total error for best: 8991.113200000005
Test mean error for best: 4.49556
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 50.0940       
Correct output: 24.1561588797  | Program output: 25.0940       
Correct output: 63.2618741651  | Program output: 63.0940       
Correct output: 81.4613344804  | Program output: 82.0940       
Correct output: -116.4209784668 | Program output: -116.0940     
Correct output: -80.5506083936 | Program output: -81.0940      
Correct output: 41.7915986532  | Program output: 41.0940       
Correct output: -6.9439752137  | Program output: -6.0940       
Correct output: 58.5604070006  | Program output: 58.0940       
Correct output: -105.4717093128 | Program output: -105.0940     
Correct output: -65.3737650023 | Program output: -65.0940      
Correct output: 80.422971733   | Program output: 81.0940       
Correct output: -36.4331405664 | Program output: -36.0940      
Correct output: 49.2855176563  | Program output: 50.0940       
Correct output: 5.2530048743   | Program output: 5.0940        
Correct output: -14.5307262538 | Program output: -15.0940      
Correct output: 174.8425999229 | Program output: 174.0940      
Correct output: 94.2858027683  | Program output: 95.0940       
Correct output: -32.1580651662 | Program output: -32.0940      
Correct output: 34.2563324554  | Program output: 35.0940       
Correct output: -34.3108385906 | Program output: -35.0940      
Correct output: -25.5420796562 | Program output: -25.0940      
Correct output: 40.5609747923  | Program output: 41.0940       
Correct output: -146.3905253753 | Program output: -146.0940     
Correct output: 125.2745939078 | Program output: 125.0940      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_cos} {:instruction integer_shove} {:instruction float_dec} {:instruction in1} {:instruction in2} {:instruction integer_shove} {:instruction float_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_944} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_dup_times} {:instruction float_flush} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_add} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_add} {:instruction integer_mod} {:instruction print_integer} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_add} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_swap} {:instruction integer_add} {:instruction float_div} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_min} {:instruction -78} {:instruction float_mod} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_stackdepth})
Best program: (float_yankdup integer_fromfloat float_rot float_frominteger integer_add float_cos integer_shove float_dec in1 in2 integer_shove float_dec in1 integer_fromfloat integer_add in2 integer_shove float_frominteger in2 integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_944 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth float_dup_times float_flush 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_add float_pop integer_sub integer_mod print_integer integer_sub integer_mod print_integer integer_add integer_mod print_integer tagged_920 integer_sub integer_mod print_integer integer_add integer_dup float_stackdepth float_yank float_max float_div integer_mod print_integer integer_swap integer_add float_div float_stackdepth float_yank float_max float_div float_frominteger integer_pop integer_pop integer_min -78 float_mod integer_yank float_dup_times float_stackdepth)
Errors: [0.4482 11 0.9378 11 0.1679 9 0.6327 9 0.327 7 0.5434 9 0.6976 9 0.85 9 0.4664 8 0.3777 8 0.2798 9 0.671 9 0.3391 8 0.8085 12 0.159 8 0.5633 10 0.7486 9 0.8082 10 0.0641 9 0.8377 10 0.7832 9 0.4481 8 0.533 8 0.2965 9 0.1806 8]
Total: 238.9694
Mean: 4.779388
Genome size: 101
Size: 102
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4201.725146499999
Median total errors in population: 1285.13695
Error averages by case: (139.37286370000027 11.028 146.71343280000016 10.698 173.65321439999957 10.407 148.2660088999992 10.18 192.13137579999938 10.464 160.97626770000016 9.36 137.92238329999927 10.179 115.02394130000042 10.492 172.12952170000054 9.973 169.73064140000056 9.998 163.4349676999999 10.895 147.9996250000003 9.695 134.06887250000003 10.949 135.32221049999976 10.838 170.89553449999968 9.788 145.01778620000002 9.745 216.6938552000001 11.782 154.0159376 9.977 158.7611121000009 10.496 128.88607380000016 10.062 152.8441691000002 9.24 147.4448866000008 10.764 139.86379779999896 10.043 206.12232129999956 11.031 185.59534560000162 10.755)
Error minima by case: (0.3542 8 0.0612 8 0.1669 7 0.3673 8 0.326 7 0.4494 7 0.6976 7 0.056 8 0.4396 6 0.375 7 0.2798 7 0.329 7 0.3391 8 0.1905 8 0.1104 7 0.4367 7 0.7446 8 0.1918 7 0.0641 7 0.1613 7 0.2158 6 0.4481 7 0.439 8 0.2955 8 0.1806 7)
Average genome size in population (length): 107.263
Average program size in population (points): 108.263
Average percent parens in population: 0.009
Minimum age in population: 77.02856189075037
Maximum age in population: 81.30248745775792
Average age in population: 79.28276811518995
Median age in population: 79.28784138232794
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.903
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.903
Total error diversity:				 0.598
Error (vector) diversity:			 0.637
Behavioral diversity:				 0.639
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 129311492
--- Timings ---
Current time: 1529615793037 milliseconds
Total Time:         225.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        78.7 seconds, 35.0%
Fitness Testing:    114.6 seconds, 50.9%
Report:              31.6 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
;;******************************
;; -*- Number IO problem report - generation 58
Test total error for best: 8991.113200000005
Test mean error for best: 4.49556
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 50.0940       
Correct output: 24.1561588797  | Program output: 25.0940       
Correct output: 63.2618741651  | Program output: 63.0940       
Correct output: 81.4613344804  | Program output: 82.0940       
Correct output: -116.4209784668 | Program output: -116.0940     
Correct output: -80.5506083936 | Program output: -81.0940      
Correct output: 41.7915986532  | Program output: 41.0940       
Correct output: -6.9439752137  | Program output: -6.0940       
Correct output: 58.5604070006  | Program output: 58.0940       
Correct output: -105.4717093128 | Program output: -105.0940     
Correct output: -65.3737650023 | Program output: -65.0940      
Correct output: 80.422971733   | Program output: 81.0940       
Correct output: -36.4331405664 | Program output: -36.0940      
Correct output: 49.2855176563  | Program output: 50.0940       
Correct output: 5.2530048743   | Program output: 5.0940        
Correct output: -14.5307262538 | Program output: -15.0940      
Correct output: 174.8425999229 | Program output: 174.0940      
Correct output: 94.2858027683  | Program output: 95.0940       
Correct output: -32.1580651662 | Program output: -32.0940      
Correct output: 34.2563324554  | Program output: 35.0940       
Correct output: -34.3108385906 | Program output: -35.0940      
Correct output: -25.5420796562 | Program output: -25.0940      
Correct output: 40.5609747923  | Program output: 41.0940       
Correct output: -146.3905253753 | Program output: -146.0940     
Correct output: 125.2745939078 | Program output: 125.0940      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_cos} {:instruction integer_shove} {:instruction float_dec} {:instruction in1} {:instruction in2} {:instruction integer_shove} {:instruction float_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_944} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_dup_times} {:instruction float_flush} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_add} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_add} {:instruction integer_mod} {:instruction print_integer} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_add} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_swap} {:instruction integer_add} {:instruction float_div} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_min} {:instruction -78} {:instruction float_mod} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_stackdepth})
Best program: (float_yankdup integer_fromfloat float_rot float_frominteger integer_add float_cos integer_shove float_dec in1 in2 integer_shove float_dec in1 integer_fromfloat integer_add in2 integer_shove float_frominteger in2 integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_944 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth float_dup_times float_flush 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_add float_pop integer_sub integer_mod print_integer integer_sub integer_mod print_integer integer_add integer_mod print_integer tagged_920 integer_sub integer_mod print_integer integer_add integer_dup float_stackdepth float_yank float_max float_div integer_mod print_integer integer_swap integer_add float_div float_stackdepth float_yank float_max float_div float_frominteger integer_pop integer_pop integer_min -78 float_mod integer_yank float_dup_times float_stackdepth)
Errors: [0.4482 11 0.9378 11 0.1679 9 0.6327 9 0.327 7 0.5434 9 0.6976 9 0.85 9 0.4664 8 0.3777 8 0.2798 9 0.671 9 0.3391 8 0.8085 12 0.159 8 0.5633 10 0.7486 9 0.8082 10 0.0641 9 0.8377 10 0.7832 9 0.4481 8 0.533 8 0.2965 9 0.1806 8]
Total: 238.9694
Mean: 4.779388
Genome size: 101
Size: 102
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4871.233972599999
Median total errors in population: 1240.2929
Error averages by case: (170.8308436 10.939 172.83688900000007 10.762 195.91123280000008 10.671 175.92893260000045 10.322 218.15246770000022 10.363 199.15106149999968 9.687 164.07073980000038 10.473 153.70111159999996 10.591 194.71245990000008 10.118 207.9087721000002 10.297 183.59218180000047 10.743 175.19799460000033 9.891 164.76724539999967 10.656 168.1522952999996 11.044 187.15529829999963 9.833 180.29937690000003 10.168 217.6087493000002 11.562 179.88146440000048 10.26 180.02400580000045 10.464 163.66294109999967 10.626 188.72062600000044 9.587 171.67695760000012 10.604 169.3377179999997 10.041 230.2193053 11.075 196.21730220000097 10.739)
Error minima by case: (0.3542 9 0.8438 8 0.1679 3 0.3813 8 0.327 5 0.4556 6 0.2277 4 0.056 4 0.4396 3 0.3757 4 0.2798 4 0.345 7 0.3351 4 0.1915 8 0.159 4 0.4367 7 0.7446 5 0.2208 8 0.0641 4 0.2308 7 0.2158 6 0.4481 4 0.439 8 0.2965 5 0.1806 5)
Average genome size in population (length): 104.157
Average program size in population (points): 105.157
Average percent parens in population: 0.010
Minimum age in population: 78.02856189075037
Maximum age in population: 82.53296089539774
Average age in population: 80.68877980745035
Median age in population: 80.68118953098049
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.882
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.882
Total error diversity:				 0.589
Error (vector) diversity:			 0.642
Behavioral diversity:				 0.643
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 131915742
--- Timings ---
Current time: 1529615797269 milliseconds
Total Time:         229.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        80.1 seconds, 34.9%
Fitness Testing:    116.9 seconds, 51.0%
Report:              32.2 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
;;******************************
;; -*- Number IO problem report - generation 59
Test total error for best: 9115.392799999996
Test mean error for best: 4.55770
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 50.096        
Correct output: 24.1561588797  | Program output: 25.096        
Correct output: 63.2618741651  | Program output: 63.096        
Correct output: 81.4613344804  | Program output: 82.096        
Correct output: -116.4209784668 | Program output: -116.096      
Correct output: -80.5506083936 | Program output: -81.096       
Correct output: 41.7915986532  | Program output: 41.096        
Correct output: -6.9439752137  | Program output: -6.096        
Correct output: 58.5604070006  | Program output: 58.096        
Correct output: -105.4717093128 | Program output: -105.096      
Correct output: -65.3737650023 | Program output: -65.096       
Correct output: 80.422971733   | Program output: 81.096        
Correct output: -36.4331405664 | Program output: -36.096       
Correct output: 49.2855176563  | Program output: 50.096        
Correct output: 5.2530048743   | Program output: 5.096         
Correct output: -14.5307262538 | Program output: -15.096       
Correct output: 174.8425999229 | Program output: 174.096       
Correct output: 94.2858027683  | Program output: 95.096        
Correct output: -32.1580651662 | Program output: -32.096       
Correct output: 34.2563324554  | Program output: 35.096        
Correct output: -34.3108385906 | Program output: -35.096       
Correct output: -25.5420796562 | Program output: -25.096       
Correct output: 40.5609747923  | Program output: 41.096        
Correct output: -146.3905253753 | Program output: -146.096      
Correct output: 125.2745939078 | Program output: 125.096       
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_dec} {:instruction integer_add} {:instruction float_cos} {:instruction integer_shove} {:instruction float_dec} {:instruction in1} {:instruction in2} {:instruction integer_shove} {:instruction float_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_944} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_dup_times} {:instruction float_flush} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction 99.25312086608173} {:instruction integer_mod} {:instruction print_integer} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_add} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_swap} {:instruction integer_add} {:instruction float_div} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_min} {:instruction -78} {:instruction float_mod} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_stackdepth})
Best program: (float_yankdup integer_fromfloat float_rot integer_dec integer_add float_cos integer_shove float_dec in1 in2 integer_shove float_dec in1 integer_fromfloat integer_add in2 integer_shove float_frominteger in2 integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_944 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth float_dup_times float_flush 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_fromfloat integer_add float_pop integer_sub integer_mod print_integer integer_sub integer_mod print_integer 99.25312086608173 integer_mod print_integer tagged_920 integer_sub integer_mod print_integer integer_add integer_dup float_stackdepth float_yank float_max float_div integer_mod print_integer integer_swap integer_add float_div float_stackdepth float_yank float_max float_div float_frominteger integer_pop integer_pop integer_min -78 float_mod integer_yank float_dup_times float_stackdepth)
Errors: [0.4502 11 0.9398 10 0.1659 9 0.6347 11 0.325 7 0.5454 8 0.6956 8 0.848 9 0.4644 8 0.3757 8 0.2778 9 0.673 9 0.3371 8 0.8105 11 0.157 9 0.5653 9 0.7466 9 0.8102 9 0.0621 8 0.8397 10 0.7852 8 0.4461 7 0.535 9 0.2945 9 0.1786 9]
Total: 234.9634
Mean: 4.699268
Genome size: 101
Size: 102
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3422.0429854999993
Median total errors in population: 525.3386000000002
Error averages by case: (116.6647438999996 10.703 115.41635889999989 10.706 133.65223789999985 10.697 118.68416359999954 10.418 152.89887510000023 10.113 140.36809809999957 9.639 110.31153779999937 10.568 105.92718319999967 10.698 132.2485622000006 9.821 146.57542049999998 10.323 126.92787279999982 10.743 118.61551329999972 9.929 115.22990050000038 10.426 114.75275989999976 10.966 128.85118409999944 9.673 125.41257349999941 10.4 146.6875647000008 11.42 120.8478662 10.267 122.56979739999973 10.223 111.26519559999986 10.69 131.5792441000003 9.917 118.15381480000053 10.404 115.69785650000026 9.962 160.1852937000004 10.959 132.28536720000156 10.569)
Error minima by case: (0.3542 8 0.0802 7 0.1659 3 0.3673 7 0.325 5 0.4494 8 0.2084 4 0.056 4 0.4396 3 0.3757 4 0.2778 4 0.329 7 0.3351 4 0.1995 8 0.157 4 0.4357 7 0.1574 5 0.1918 7 0.0621 4 0.2061 8 0.2168 6 0.4461 4 0.439 7 0.2945 5 0.1776 5)
Average genome size in population (length): 100.687
Average program size in population (points): 101.687
Average percent parens in population: 0.010
Minimum age in population: 79.28042736272184
Maximum age in population: 84.30969569974908
Average age in population: 82.1330064388471
Median age in population: 82.20975353949405
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.879
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.879
Total error diversity:				 0.53
Error (vector) diversity:			 0.559
Behavioral diversity:				 0.559
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 134433067
--- Timings ---
Current time: 1529615801472 milliseconds
Total Time:         233.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        81.4 seconds, 34.9%
Fitness Testing:    119.1 seconds, 51.0%
Report:              32.7 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
;;******************************
;; -*- Number IO problem report - generation 60
Test total error for best: 8961.486599999997
Test mean error for best: 4.48074
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 50.0279       
Correct output: 24.1561588797  | Program output: 25.0279       
Correct output: 63.2618741651  | Program output: 63.0187       
Correct output: 81.4613344804  | Program output: 82.0273       
Correct output: -116.4209784668 | Program output: -116.0142     
Correct output: -80.5506083936 | Program output: -81.0105      
Correct output: 41.7915986532  | Program output: 41.0193       
Correct output: -6.9439752137  | Program output: -6.0200       
Correct output: 58.5604070006  | Program output: 58.0187       
Correct output: -105.4717093128 | Program output: -105.096      
Correct output: -65.3737650023 | Program output: -65.0216      
Correct output: 80.422971733   | Program output: 81.0275       
Correct output: -36.4331405664 | Program output: -36.0203      
Correct output: 49.2855176563  | Program output: 50.0269       
Correct output: 5.2530048743   | Program output: 5.0127        
Correct output: -14.5307262538 | Program output: -15.0154      
Correct output: 174.8425999229 | Program output: 174.0277      
Correct output: 94.2858027683  | Program output: 95.0288       
Correct output: -32.1580651662 | Program output: -32.0252      
Correct output: 34.2563324554  | Program output: 35.0255       
Correct output: -34.3108385906 | Program output: -35.0124      
Correct output: -25.5420796562 | Program output: -25.0239      
Correct output: 40.5609747923  | Program output: 41.0278       
Correct output: -146.3905253753 | Program output: -146.0120     
Correct output: 125.2745939078 | Program output: 125.0257      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_rot} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_stackdepth} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_944} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction tag_float_817} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction float_max} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_tan} {:instruction float_sin} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction in2} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction in2} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_dup_times} {:instruction float_flush} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_add} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_add} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_swap} {:instruction integer_add} {:instruction float_div} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction float_frominteger} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_min} {:instruction -78})
Best program: (float_yankdup integer_fromfloat float_rot float_frominteger float_rot float_yankdup integer_fromfloat float_rot float_frominteger integer_add in2 integer_shove float_dec integer_yankdup integer_stackdepth float_yankdup integer_fromfloat float_rot float_frominteger integer_add in2 integer_shove float_dec in1 integer_fromfloat integer_add integer_rot integer_stackdepth tagged_944 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 tag_float_817 integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot float_max integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod float_pop integer_stackdepth integer_add float_tan float_sin float_frominteger float_frominteger in2 integer_sub integer_yankdup integer_flush in2 integer_sub integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth float_dup_times float_flush 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_rot integer_add tagged_920 integer_sub integer_mod print_integer integer_add integer_dup float_stackdepth float_yank float_max float_div integer_mod print_integer integer_swap integer_add float_div float_stackdepth float_yank float_max float_div float_frominteger float_div float_frominteger integer_pop integer_pop integer_min -78)
Errors: [0.3821 11 0.8717 9 0.2432 7 0.566 10 0.4068 8 0.4599 9 0.7723 7 0.924 9 0.5417 8 0.3757 8 0.3522 9 0.6045 8 0.4128 9 0.7414 11 0.2403 8 0.4847 9 0.8149 9 0.743 8 0.1329 7 0.7692 8 0.7016 10 0.5182 8 0.4668 9 0.3785 8 0.2489 8]
Total: 228.15330000000003
Mean: 4.563066
Genome size: 108
Size: 109
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3370.6443409999993
Median total errors in population: 426.8386000000001
Error averages by case: (115.12270519999952 10.795 113.51749449999971 10.669 126.74950069999954 10.448 117.9460832999997 10.45 155.23625400000012 9.898 142.6290540999997 9.631 101.22530969999927 10.385 99.17980809999997 10.515 125.52211140000064 9.597 149.8544205000002 10.103 123.60109710000009 10.536 117.97953029999972 9.901 110.11696890000033 10.17 113.35910019999979 11.042 127.78747609999952 9.441 125.69311599999929 10.41 143.46432560000082 11.088 118.79910459999981 10.127 120.05387849999984 10.023 109.21113300000012 10.541 133.42139880000022 9.934 115.75919840000007 10.135 114.87114710000016 9.875 162.5325614999999 10.699 130.3525634000015 10.246)
Error minima by case: (0.3542 5 0.0783 7 0.0 2 0.3891 6 0.3249 4 0.4494 5 0.3024 3 0.056 3 0.0 2 0.3756 3 0.2777 3 0.328 6 0.337 3 0.2171 6 0.1569 3 0.4367 8 0.2514 4 0.1918 6 0.062 3 0.2012 5 0.2168 6 0.446 3 0.439 7 0.2944 4 0.1785 4)
Average genome size in population (length): 98.834
Average program size in population (points): 99.834
Average percent parens in population: 0.010
Minimum age in population: 81.30256276036393
Maximum age in population: 85.54820051401516
Average age in population: 83.55894376405374
Median age in population: 83.62187223558477
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.881
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.881
Total error diversity:				 0.487
Error (vector) diversity:			 0.518
Behavioral diversity:				 0.519
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 136904717
--- Timings ---
Current time: 1529615805610 milliseconds
Total Time:         237.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        82.8 seconds, 34.9%
Fitness Testing:    121.3 seconds, 51.1%
Report:              33.3 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
;;******************************
;; -*- Number IO problem report - generation 61
Test total error for best: 8721.408299999994
Test mean error for best: 4.36070
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 50.095960     
Correct output: 24.1561588797  | Program output: 25.095960     
Correct output: 63.2618741651  | Program output: 63.095960     
Correct output: 81.4613344804  | Program output: 82.095960     
Correct output: -116.4209784668 | Program output: -116.095960   
Correct output: -80.5506083936 | Program output: -81.095960    
Correct output: 41.7915986532  | Program output: 41.095960     
Correct output: -6.9439752137  | Program output: -6.095960     
Correct output: 58.5604070006  | Program output: 58.095960     
Correct output: -105.4717093128 | Program output: -105.095960   
Correct output: -65.3737650023 | Program output: -65.095960    
Correct output: 80.422971733   | Program output: 81.095960     
Correct output: -36.4331405664 | Program output: -36.095960    
Correct output: 49.2855176563  | Program output: 50.095960     
Correct output: 5.2530048743   | Program output: 5.095960      
Correct output: -14.5307262538 | Program output: -15.095960    
Correct output: 174.8425999229 | Program output: 174.095960    
Correct output: 94.2858027683  | Program output: 95.095960     
Correct output: -32.1580651662 | Program output: -32.095960    
Correct output: 34.2563324554  | Program output: 35.095960     
Correct output: -34.3108385906 | Program output: -35.095960    
Correct output: -25.5420796562 | Program output: -25.095960    
Correct output: 40.5609747923  | Program output: 41.095960     
Correct output: -146.3905253753 | Program output: -146.095960   
Correct output: 125.2745939078 | Program output: 125.095960    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_cos} {:instruction integer_shove} {:instruction float_dec} {:instruction in1} {:instruction in2} {:instruction integer_shove} {:instruction float_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_944} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_dup_times} {:instruction float_flush} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_add} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction integer_mod} {:instruction print_integer} {:instruction tagged_920} {:instruction float_mult} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_add} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_swap} {:instruction integer_add} {:instruction float_div} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_min} {:instruction -78} {:instruction float_mod} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_stackdepth})
Best program: (float_yankdup integer_fromfloat float_rot float_frominteger integer_add float_cos integer_shove float_dec in1 in2 integer_shove float_dec in1 integer_fromfloat integer_add in2 integer_shove float_frominteger in2 integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_944 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth float_dup_times float_flush 46.73998848521251 integer_mult float_pop float_pop integer_yankdup integer_sub integer_add float_pop integer_sub integer_mod print_integer integer_sub float_mult integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth integer_add integer_mod print_integer tagged_920 float_mult integer_mod print_integer integer_add integer_dup float_stackdepth float_yank float_max float_div integer_mod print_integer integer_swap integer_add float_div float_stackdepth float_yank float_max float_div float_frominteger integer_pop integer_pop integer_min -78 float_mod integer_yank float_dup_times float_stackdepth)
Errors: [0.4502 10 0.9398 10 0.1659 9 0.6346 10 0.325 7 0.5454 9 0.6956 6 0.848 8 0.4644 8 0.3757 8 0.2778 8 0.673 9 0.3372 8 0.8104 10 0.157 9 0.5652 10 0.7466 8 0.8102 9 0.0621 7 0.8396 11 0.7851 8 0.4461 7 0.535 8 0.2946 8 0.1786 7]
Total: 224.96309999999997
Mean: 4.499262
Genome size: 107
Size: 108
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3657.9510725000005
Median total errors in population: 327.9326000000001
Error averages by case: (126.30409629999966 11.077 125.92747459999966 10.714 144.4361851000002 9.797 126.9489785000001 10.347 160.55354300000008 9.074 152.52371719999942 9.582 123.54318399999964 9.831 118.27541220000046 9.827 143.55128950000065 9.218 158.9479747000002 9.379 134.1432007000003 9.846 127.11208190000015 9.673 125.79745939999971 9.478 123.82247969999982 11.414 141.6234981000002 8.989 143.05195529999943 10.257 147.30530780000095 10.297 126.69229499999992 10.101 133.54753360000038 9.653 121.03769460000026 10.405 148.11786670000083 9.677 129.07854539999954 9.378 125.96312279999974 9.54 165.86856049999946 10.057 136.52561590000167 9.641)
Error minima by case: (0.3542 6 0.0622 6 0.0 1 0.3673 6 0.324 3 0.4494 4 0.2277 3 0.056 3 0.0 1 0.3747 3 0.2768 3 0.329 6 0.3361 3 0.1915 6 0.156 2 0.4366 5 0.1574 3 0.1918 6 0.0611 3 0.1623 6 0.2168 5 0.4451 3 0.439 6 0.2935 4 0.1776 3)
Average genome size in population (length): 99.857
Average program size in population (points): 100.857
Average percent parens in population: 0.010
Minimum age in population: 82.38838749356005
Maximum age in population: 87.11253298973503
Average age in population: 84.83932677118183
Median age in population: 84.8485148835594
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.876
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.876
Total error diversity:				 0.44
Error (vector) diversity:			 0.471
Behavioral diversity:				 0.473
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 139401992
--- Timings ---
Current time: 1529615809704 milliseconds
Total Time:         241.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        84.2 seconds, 34.8%
Fitness Testing:    123.4 seconds, 51.1%
Report:              33.9 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
;;******************************
;; -*- Number IO problem report - generation 62
Test total error for best: 8732.408299999994
Test mean error for best: 4.36620
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 50.09596      
Correct output: 24.1561588797  | Program output: 25.09596      
Correct output: 63.2618741651  | Program output: 63.09596      
Correct output: 81.4613344804  | Program output: 82.09596      
Correct output: -116.4209784668 | Program output: -116.09596    
Correct output: -80.5506083936 | Program output: -81.09596     
Correct output: 41.7915986532  | Program output: 41.09596      
Correct output: -6.9439752137  | Program output: -6.09596      
Correct output: 58.5604070006  | Program output: 58.09596      
Correct output: -105.4717093128 | Program output: -105.09596    
Correct output: -65.3737650023 | Program output: -65.09596     
Correct output: 80.422971733   | Program output: 81.09596      
Correct output: -36.4331405664 | Program output: -36.09596     
Correct output: 49.2855176563  | Program output: 50.09596      
Correct output: 5.2530048743   | Program output: 5.09596       
Correct output: -14.5307262538 | Program output: -15.09596     
Correct output: 174.8425999229 | Program output: 174.09596     
Correct output: 94.2858027683  | Program output: 95.09596      
Correct output: -32.1580651662 | Program output: -32.09596     
Correct output: 34.2563324554  | Program output: 35.09596      
Correct output: -34.3108385906 | Program output: -35.09596     
Correct output: -25.5420796562 | Program output: -25.09596     
Correct output: 40.5609747923  | Program output: 41.09596      
Correct output: -146.3905253753 | Program output: -146.09596    
Correct output: 125.2745939078 | Program output: 125.09596     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_rot} {:instruction integer_dec} {:instruction integer_add} {:instruction float_cos} {:instruction integer_shove} {:instruction float_dec} {:instruction in1} {:instruction in2} {:instruction integer_shove} {:instruction float_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction tagged_944} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_dup_times} {:instruction float_flush} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_add} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction integer_mod} {:instruction print_integer} {:instruction tagged_920} {:instruction float_mult} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_add} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction integer_mod})
Best program: (float_rot integer_dec integer_add float_cos integer_shove float_dec in1 in2 integer_shove float_dec in1 integer_fromfloat integer_add in2 integer_shove float_frominteger in2 integer_stackdepth integer_sub integer_stackdepth tagged_944 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth float_dup_times float_flush 46.73998848521251 integer_mult float_pop float_pop integer_yankdup integer_sub integer_add float_pop integer_sub integer_mod print_integer integer_sub float_mult integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth integer_add integer_mod print_integer tagged_920 float_mult integer_mod print_integer integer_add integer_dup float_stackdepth float_yank float_max float_div integer_mod)
Errors: [0.4502 10 0.9398 9 0.1659 9 0.6346 11 0.325 7 0.5454 8 0.6956 6 0.848 8 0.4644 8 0.3757 8 0.2778 9 0.673 9 0.3372 8 0.8104 10 0.157 9 0.5652 9 0.7466 8 0.8102 9 0.0621 7 0.8396 10 0.7851 7 0.4461 7 0.535 8 0.2946 8 0.1786 8]
Total: 222.96309999999997
Mean: 4.459262
Genome size: 87
Size: 88
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3152.1793405000003
Median total errors in population: 240.9694
Error averages by case: (106.42043630000006 11.242 108.06231989999975 10.743 125.22992450000037 9.218 103.55036330000051 10.106 140.21529670000044 8.272 134.84824449999934 9.454 110.80508950000001 9.033 95.89857410000042 9.153 124.83690470000063 8.612 145.4064712999995 8.667 110.29424900000002 9.255 103.69420540000046 9.313 102.53563189999934 8.81 103.9941618000001 11.628 130.78792070000011 8.569 129.3675564999991 9.993 115.36903080000089 9.579 108.18849750000011 9.983 113.07279440000084 9.176 102.44845739999977 10.369 134.68944530000078 9.442 108.23000269999983 8.611 105.48428549999998 9.13 145.0638004999991 9.357 106.93367630000114 9.037)
Error minima by case: (0.3542 2 0.0612 2 0.0 2 0.3663 2 0.323 2 0.4494 2 0.2084 2 0.056 1 0.0 2 0.3737 2 0.2758 2 0.328 2 0.3351 1 0.1905 2 0.155 1 0.4337 1 0.1574 2 0.1908 2 0.0601 2 0.1613 2 0.115 2 0.4441 1 0.439 2 0.2925 3 0.1766 2)
Average genome size in population (length): 99.494
Average program size in population (points): 100.494
Average percent parens in population: 0.010
Minimum age in population: 83.79161361980326
Maximum age in population: 88.36051199313697
Average age in population: 86.21034148722408
Median age in population: 86.23234520807846
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.899
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.899
Total error diversity:				 0.348
Error (vector) diversity:			 0.37
Behavioral diversity:				 0.372
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 141890317
--- Timings ---
Current time: 1529615813696 milliseconds
Total Time:         245.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        85.5 seconds, 34.8%
Fitness Testing:    125.5 seconds, 51.1%
Report:              34.5 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
;;******************************
;; -*- Number IO problem report - generation 63
Test total error for best: 8732.408299999994
Test mean error for best: 4.36620
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 50.09596      
Correct output: 24.1561588797  | Program output: 25.09596      
Correct output: 63.2618741651  | Program output: 63.09596      
Correct output: 81.4613344804  | Program output: 82.09596      
Correct output: -116.4209784668 | Program output: -116.09596    
Correct output: -80.5506083936 | Program output: -81.09596     
Correct output: 41.7915986532  | Program output: 41.09596      
Correct output: -6.9439752137  | Program output: -6.09596      
Correct output: 58.5604070006  | Program output: 58.09596      
Correct output: -105.4717093128 | Program output: -105.09596    
Correct output: -65.3737650023 | Program output: -65.09596     
Correct output: 80.422971733   | Program output: 81.09596      
Correct output: -36.4331405664 | Program output: -36.09596     
Correct output: 49.2855176563  | Program output: 50.09596      
Correct output: 5.2530048743   | Program output: 5.09596       
Correct output: -14.5307262538 | Program output: -15.09596     
Correct output: 174.8425999229 | Program output: 174.09596     
Correct output: 94.2858027683  | Program output: 95.09596      
Correct output: -32.1580651662 | Program output: -32.09596     
Correct output: 34.2563324554  | Program output: 35.09596      
Correct output: -34.3108385906 | Program output: -35.09596     
Correct output: -25.5420796562 | Program output: -25.09596     
Correct output: 40.5609747923  | Program output: 41.09596      
Correct output: -146.3905253753 | Program output: -146.09596    
Correct output: 125.2745939078 | Program output: 125.09596     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_rot} {:instruction integer_dec} {:instruction integer_add} {:instruction float_cos} {:instruction integer_shove} {:instruction float_dec} {:instruction in1} {:instruction in2} {:instruction integer_shove} {:instruction float_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction tagged_944} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_dup_times} {:instruction float_flush} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_add} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction integer_mod} {:instruction print_integer} {:instruction tagged_920} {:instruction float_mult} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_add} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction integer_mod})
Best program: (float_rot integer_dec integer_add float_cos integer_shove float_dec in1 in2 integer_shove float_dec in1 integer_fromfloat integer_add in2 integer_shove float_frominteger in2 integer_stackdepth integer_sub integer_stackdepth tagged_944 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth float_dup_times float_flush 46.73998848521251 integer_mult float_pop float_pop integer_yankdup integer_sub integer_add float_pop integer_sub integer_mod print_integer integer_sub float_mult integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth integer_add integer_mod print_integer tagged_920 float_mult integer_mod print_integer integer_add integer_dup float_stackdepth float_yank float_max float_div integer_mod)
Errors: [0.4502 10 0.9398 9 0.1659 9 0.6346 11 0.325 7 0.5454 8 0.6956 6 0.848 8 0.4644 8 0.3757 8 0.2778 9 0.673 9 0.3372 8 0.8104 10 0.157 9 0.5652 9 0.7466 8 0.8102 9 0.0621 7 0.8396 10 0.7851 7 0.4461 7 0.535 8 0.2946 8 0.1786 8]
Total: 222.96309999999997
Mean: 4.459262
Genome size: 87
Size: 88
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4178.1462505
Median total errors in population: 237.23365
Error averages by case: (149.7286706000007 11.439 150.90829699999998 10.633 165.25797570000043 9.038 145.9222701000001 10.2 176.7704902 8.479 175.83457440000055 9.349 155.40884880000064 8.633 140.52550739999975 8.871 165.05857049999943 8.458 178.67139460000004 8.558 153.15617229999995 8.937 145.08986740000026 9.206 147.41079310000003 8.878 146.1016446000008 11.458 171.08627950000078 8.52 170.38237829999957 9.689 153.65608960000003 9.531 148.3215027000003 9.766 153.45220850000027 8.894 145.25060239999965 10.37 173.83811779999957 9.35 151.97100720000003 8.491 149.06164830000046 9.446 181.41875939999974 9.024 149.78158010000064 8.863)
Error minima by case: (0.3542 5 0.0612 7 0.0 1 0.3663 5 0.3229 3 0.4494 3 0.2267 3 0.0656 3 0.0 1 0.3736 3 0.2757 3 0.328 5 0.335 3 0.1905 5 0.1549 2 0.4346 6 0.1763 3 0.1898 5 0.06 3 0.1613 5 0.2147 4 0.444 3 0.439 7 0.2924 4 0.1765 3)
Average genome size in population (length): 99.961
Average program size in population (points): 100.961
Average percent parens in population: 0.010
Minimum age in population: 84.79161361980326
Maximum age in population: 89.32792290344646
Average age in population: 87.58776027212558
Median age in population: 87.66194927066891
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.901
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.901
Total error diversity:				 0.376
Error (vector) diversity:			 0.414
Behavioral diversity:				 0.416
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 144392167
--- Timings ---
Current time: 1529615817775 milliseconds
Total Time:         249.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        86.9 seconds, 34.8%
Fitness Testing:    127.7 seconds, 51.1%
Report:              35.0 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 64
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 64
;;******************************
;; -*- Number IO problem report - generation 64
Test total error for best: 8704.668900000011
Test mean error for best: 4.35233
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 50.073950     
Correct output: 24.1561588797  | Program output: 25.073950     
Correct output: 63.2618741651  | Program output: 63.073950     
Correct output: 81.4613344804  | Program output: 82.073950     
Correct output: -116.4209784668 | Program output: -116.073950   
Correct output: -80.5506083936 | Program output: -81.073950    
Correct output: 41.7915986532  | Program output: 41.073950     
Correct output: -6.9439752137  | Program output: -6.073950     
Correct output: 58.5604070006  | Program output: 58.073950     
Correct output: -105.4717093128 | Program output: -105.073950   
Correct output: -65.3737650023 | Program output: -65.073950    
Correct output: 80.422971733   | Program output: 81.073950     
Correct output: -36.4331405664 | Program output: -36.073950    
Correct output: 49.2855176563  | Program output: 50.073950     
Correct output: 5.2530048743   | Program output: 5.073950      
Correct output: -14.5307262538 | Program output: -15.073950    
Correct output: 174.8425999229 | Program output: 174.073950    
Correct output: 94.2858027683  | Program output: 95.073950     
Correct output: -32.1580651662 | Program output: -32.073950    
Correct output: 34.2563324554  | Program output: 35.073950     
Correct output: -34.3108385906 | Program output: -35.073950    
Correct output: -25.5420796562 | Program output: -25.073950    
Correct output: 40.5609747923  | Program output: 41.073950     
Correct output: -146.3905253753 | Program output: -146.073950   
Correct output: 125.2745939078 | Program output: 125.073950    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_cos} {:instruction integer_shove} {:instruction float_dec} {:instruction in1} {:instruction in2} {:instruction integer_shove} {:instruction float_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_944} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_dup_times} {:instruction float_flush} {:instruction integer_sub} {:instruction integer_add} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_pop} {:instruction integer_sub} {:instruction 73} {:instruction print_integer} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_mod} {:instruction print_integer} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_add} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_swap} {:instruction integer_add} {:instruction float_div} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_min} {:instruction float_dup_times} {:instruction float_stackdepth})
Best program: (float_yankdup integer_fromfloat float_rot float_frominteger integer_add float_cos integer_shove float_dec in1 in2 integer_shove float_dec in1 integer_fromfloat integer_add in2 integer_shove float_frominteger in2 integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_944 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth float_dup_times float_flush integer_sub integer_add float_pop integer_sub integer_add float_pop integer_sub 73 print_integer print_integer integer_sub integer_mod print_integer integer_add integer_mod integer_mod print_integer tagged_920 integer_sub integer_mod print_integer integer_add integer_dup float_stackdepth float_yank float_max float_div integer_mod print_integer integer_swap integer_add float_div float_stackdepth float_yank float_max float_div float_frominteger integer_pop integer_pop integer_min float_dup_times float_stackdepth)
Errors: [0.4282 11 0.9178 10 0.1879 8 0.6126 9 0.347 8 0.5233 8 0.7176 8 0.87 7 0.4865 8 0.3978 8 0.2998 6 0.651 9 0.3592 8 0.7884 11 0.1791 9 0.5432 8 0.7686 9 0.7881 10 0.0841 9 0.8176 9 0.7631 7 0.4681 7 0.513 8 0.3166 7 0.2006 7]
Total: 222.02920000000003
Mean: 4.440584
Genome size: 98
Size: 99
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3723.7218082000004
Median total errors in population: 232.96639999999996
Error averages by case: (132.18476950000067 11.215 132.76933479999965 10.383 151.76370230000052 8.896 130.20592490000024 10.024 156.75090489999974 8.539 155.30150430000037 9.27 133.36828960000008 8.46 125.15104819999965 8.772 151.5414417999998 8.524 158.43950659999996 8.558 134.26201229999944 8.757 127.9990875 9.064 127.84854460000001 8.907 128.45534910000055 11.083 149.9207440000006 8.437 149.42156040000012 9.446 140.36816899999977 9.433 132.19046000000012 9.398 134.1774397999995 8.785 126.24222309999953 10.117 155.11523329999966 9.195 132.44598540000047 8.56 130.16953570000015 9.34 161.85514800000018 8.767 135.07888910000037 8.765)
Error minima by case: (0.3542 3 0.0602 3 0.0 2 0.3653 3 0.324 3 0.4494 3 0.2084 3 0.0656 2 0.0 2 0.3747 3 0.2768 3 0.327 3 0.3362 2 0.1895 3 0.156 2 0.4346 2 0.1574 3 0.1898 3 0.0611 3 0.1603 3 0.2147 3 0.4451 2 0.439 3 0.2936 4 0.1776 3)
Average genome size in population (length): 100.001
Average program size in population (points): 101.001
Average percent parens in population: 0.010
Minimum age in population: 86.45729599882567
Maximum age in population: 90.84718830721822
Average age in population: 88.93631228652993
Median age in population: 88.98805460322467
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.863
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.863
Total error diversity:				 0.393
Error (vector) diversity:			 0.436
Behavioral diversity:				 0.437
--- Run Statistics ---
Number of program evaluations used so far: 65000
Number of point (instruction) evaluations so far: 146898992
--- Timings ---
Current time: 1529615821831 milliseconds
Total Time:         253.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        88.2 seconds, 34.8%
Fitness Testing:    129.9 seconds, 51.2%
Report:              35.6 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 65
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 65
;;******************************
;; -*- Number IO problem report - generation 65
Test total error for best: 8681.604399999995
Test mean error for best: 4.34080
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 50.027196     
Correct output: 24.1561588797  | Program output: 25.027196     
Correct output: 63.2618741651  | Program output: 63.017996     
Correct output: 81.4613344804  | Program output: 82.026596     
Correct output: -116.4209784668 | Program output: -116.013496   
Correct output: -80.5506083936 | Program output: -81.09796     
Correct output: 41.7915986532  | Program output: 41.018596     
Correct output: -6.9439752137  | Program output: -6.019296     
Correct output: 58.5604070006  | Program output: 58.017996     
Correct output: -105.4717093128 | Program output: -105.08896    
Correct output: -65.3737650023 | Program output: -65.020896    
Correct output: 80.422971733   | Program output: 81.026796     
Correct output: -36.4331405664 | Program output: -36.019596    
Correct output: 49.2855176563  | Program output: 50.026196     
Correct output: 5.2530048743   | Program output: 5.011996      
Correct output: -14.5307262538 | Program output: -15.014696    
Correct output: 174.8425999229 | Program output: 174.026996    
Correct output: 94.2858027683  | Program output: 95.028096     
Correct output: -32.1580651662 | Program output: -32.024496    
Correct output: 34.2563324554  | Program output: 35.024796     
Correct output: -34.3108385906 | Program output: -35.011696    
Correct output: -25.5420796562 | Program output: -25.023196    
Correct output: 40.5609747923  | Program output: 41.027096     
Correct output: -146.3905253753 | Program output: -146.011296   
Correct output: 125.2745939078 | Program output: 125.024996    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_div} {:instruction float_rot} {:instruction integer_dup_times} {:instruction integer_add} {:instruction float_cos} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_944} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction float_mod} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_dup_times} {:instruction float_flush} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_add} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_add} {:instruction integer_mod} {:instruction 95} {:instruction float_sub} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction integer_mod} {:instruction print_integer} {:instruction tagged_920} {:instruction float_mult} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_add} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_swap} {:instruction integer_add} {:instruction float_div} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop})
Best program: (float_yankdup integer_div float_rot integer_dup_times integer_add float_cos integer_shove integer_fromfloat float_rot float_frominteger integer_add in2 integer_shove float_dec in1 integer_fromfloat integer_add in2 integer_shove float_frominteger in2 integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_944 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_rot float_mod integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth float_dup_times float_flush 46.73998848521251 integer_mult float_pop float_pop integer_stackdepth integer_sub integer_add float_pop integer_sub integer_mod print_integer integer_sub integer_mod print_integer integer_add integer_mod 95 float_sub integer_stackdepth integer_add integer_mod print_integer tagged_920 float_mult integer_mod print_integer integer_add integer_dup integer_dup_times float_yank float_max float_div integer_mod print_integer integer_swap integer_add float_div float_stackdepth float_yank float_max float_div float_frominteger integer_pop)
Errors: [0.3814 10 0.871 9 0.2439 7 0.5653 11 0.4075 7 0.5474 8 0.773 7 0.9247 8 0.5424 7 0.3827 9 0.3529 9 0.6038 8 0.4135 7 0.7407 10 0.241 9 0.484 9 0.8156 7 0.7423 8 0.1336 8 0.7685 9 0.7009 8 0.5189 7 0.4661 8 0.3792 9 0.2496 7]
Total: 219.2499
Mean: 4.384998
Genome size: 101
Size: 102
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3857.3329359000018
Median total errors in population: 229.1959
Error averages by case: (140.56809410000068 11.076 142.09577659999923 10.522 146.75986470000066 8.96 138.7844622 10.194 158.09215869999971 8.416 155.75714050000056 9.398 133.87791640000015 8.172 136.16621849999962 8.697 147.29250099999973 8.509 161.48194290000055 8.624 142.52497629999942 8.658 138.92975279999968 9.253 137.33959120000003 8.75 138.81925140000052 11.108 151.2512802000005 8.705 151.5730597999999 9.656 146.62963019999984 9.323 139.45076960000094 9.69 142.86994969999918 8.613 136.79390160000025 10.151 154.34945519999957 9.235 141.17965560000047 8.336 139.5714223000007 9.163 161.42469859999986 8.85 143.0954658000003 8.595)
Error minima by case: (0.3542 4 0.0597 7 0.0 3 0.3649 4 0.324 4 0.4494 4 0.2277 3 0.0843 3 0.0 3 0.3737 4 0.2768 3 0.3265 4 0.3362 3 0.1891 4 0.156 4 0.4348 6 0.1851 3 0.1894 4 0.0611 3 0.1599 4 0.2149 4 0.4451 3 0.439 7 0.2936 5 0.1776 3)
Average genome size in population (length): 100.924
Average program size in population (points): 101.924
Average percent parens in population: 0.010
Minimum age in population: 88.36596210301455
Maximum age in population: 92.01328957941637
Average age in population: 90.37926093703854
Median age in population: 90.4320187307408
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.858
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.858
Total error diversity:				 0.37
Error (vector) diversity:			 0.412
Behavioral diversity:				 0.413
--- Run Statistics ---
Number of program evaluations used so far: 66000
Number of point (instruction) evaluations so far: 149430542
--- Timings ---
Current time: 1529615825996 milliseconds
Total Time:         257.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        89.6 seconds, 34.7%
Fitness Testing:    132.1 seconds, 51.2%
Report:              36.1 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 65
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 66
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 66
;;******************************
;; -*- Number IO problem report - generation 66
Test total error for best: 3000.0
Test mean error for best: 1.50000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 49.6457774688096
Correct output: 24.1561588797  | Program output: 24.1561588797096
Correct output: 63.2618741651  | Program output: 63.2618741651096
Correct output: 81.4613344804  | Program output: 81.4613344804096
Correct output: -116.4209784668 | Program output: -116.4209784668096
Correct output: -80.5506083936 | Program output: -80.5506083936096
Correct output: 41.7915986532  | Program output: 41.7915986532096
Correct output: -6.9439752137  | Program output: -6.9439752137096
Correct output: 58.5604070006  | Program output: 58.5604070006096
Correct output: -105.4717093128 | Program output: -105.4717093128096
Correct output: -65.3737650023 | Program output: -65.3737650023096
Correct output: 80.422971733   | Program output: 80.422971733096
Correct output: -36.4331405664 | Program output: -36.4331405664096
Correct output: 49.2855176563  | Program output: 49.2855176563096
Correct output: 5.2530048743   | Program output: 5.2530048743096
Correct output: -14.5307262538 | Program output: -14.5307262538096
Correct output: 174.8425999229 | Program output: 174.8425999229096
Correct output: 94.2858027683  | Program output: 94.2858027683096
Correct output: -32.1580651662 | Program output: -32.1580651662096
Correct output: 34.2563324554  | Program output: 34.2563324554096
Correct output: -34.3108385906 | Program output: -34.3108385906096
Correct output: -25.5420796562 | Program output: -25.5420796562096
Correct output: 40.5609747923  | Program output: 40.5609747923096
Correct output: -146.3905253753 | Program output: -146.3905253753096
Correct output: 125.2745939078 | Program output: 125.2745939078096
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_dec} {:instruction in1} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_stackdepth} {:instruction float_add} {:instruction integer_stackdepth} {:instruction tagged_944} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_add} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_mod} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction integer_mod} {:instruction print_integer} {:instruction tagged_920} {:instruction float_mult} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_add} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction integer_mod})
Best program: (float_yankdup integer_fromfloat float_rot float_frominteger integer_add in2 integer_shove float_dec in1 integer_shove float_frominteger in2 integer_stackdepth float_add integer_stackdepth tagged_944 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth float_dup_times integer_fromfloat 46.73998848521251 integer_mult float_pop float_pop integer_yankdup integer_sub integer_add float_pop integer_sub integer_mod print_integer integer_sub float_mult integer_yankdup float_mod print_float float_shove 95 float_mod integer_stackdepth integer_add integer_mod print_integer tagged_920 float_mult integer_mod print_integer integer_add integer_dup float_stackdepth float_yank float_max float_div integer_mod)
Errors: [0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3]
Total: 75.0
Mean: 1.5
Genome size: 82
Size: 83
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3018.9486197999995
Median total errors in population: 226.96280000000002
Error averages by case: (111.53927600000087 10.858 112.29994579999902 10.34 109.05060950000087 8.973 106.63763200000032 10.566 122.1183647999994 8.078 118.4627853000009 9.247 102.4605176000005 7.554 102.20312339999973 8.499 108.85660259999938 8.246 126.71103360000056 8.493 111.31347159999981 8.681 106.63489089999956 9.261 104.94198089999959 8.643 107.60336370000066 10.882 114.03105600000089 8.845 112.98612589999942 9.701 115.21857689999966 8.928 106.90978000000106 9.724 112.08377309999949 8.19 106.72861100000065 10.406 119.36691899999867 8.925 109.89424280000043 7.868 108.07354330000086 8.902 125.58787149999915 8.702 110.3875225999999 8.335)
Error minima by case: (0.0 3 0.0 3 0.0 2 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 2 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3)
Average genome size in population (length): 99.204
Average program size in population (points): 100.204
Average percent parens in population: 0.010
Minimum age in population: 89.66868235648185
Maximum age in population: 93.4739983059432
Average age in population: 91.77604917649441
Median age in population: 91.83888107504896
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 40
Genome diversity (% unique Plush genomes):	 0.861
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.861
Total error diversity:				 0.347
Error (vector) diversity:			 0.369
Behavioral diversity:				 0.369
--- Run Statistics ---
Number of program evaluations used so far: 67000
Number of point (instruction) evaluations so far: 151914467
--- Timings ---
Current time: 1529615830098 milliseconds
Total Time:         262.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        91.0 seconds, 34.7%
Fitness Testing:    134.2 seconds, 51.2%
Report:              36.7 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 66
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 67
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 67
;;******************************
;; -*- Number IO problem report - generation 67
Test total error for best: 3000.0
Test mean error for best: 1.50000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 49.6457774688096
Correct output: 24.1561588797  | Program output: 24.1561588797096
Correct output: 63.2618741651  | Program output: 63.2618741651096
Correct output: 81.4613344804  | Program output: 81.4613344804096
Correct output: -116.4209784668 | Program output: -116.4209784668096
Correct output: -80.5506083936 | Program output: -80.5506083936096
Correct output: 41.7915986532  | Program output: 41.7915986532096
Correct output: -6.9439752137  | Program output: -6.9439752137096
Correct output: 58.5604070006  | Program output: 58.5604070006096
Correct output: -105.4717093128 | Program output: -105.4717093128096
Correct output: -65.3737650023 | Program output: -65.3737650023096
Correct output: 80.422971733   | Program output: 80.422971733096
Correct output: -36.4331405664 | Program output: -36.4331405664096
Correct output: 49.2855176563  | Program output: 49.2855176563096
Correct output: 5.2530048743   | Program output: 5.2530048743096
Correct output: -14.5307262538 | Program output: -14.5307262538096
Correct output: 174.8425999229 | Program output: 174.8425999229096
Correct output: 94.2858027683  | Program output: 94.2858027683096
Correct output: -32.1580651662 | Program output: -32.1580651662096
Correct output: 34.2563324554  | Program output: 34.2563324554096
Correct output: -34.3108385906 | Program output: -34.3108385906096
Correct output: -25.5420796562 | Program output: -25.5420796562096
Correct output: 40.5609747923  | Program output: 40.5609747923096
Correct output: -146.3905253753 | Program output: -146.3905253753096
Correct output: 125.2745939078 | Program output: 125.2745939078096
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_dec} {:instruction in1} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_stackdepth} {:instruction float_add} {:instruction integer_stackdepth} {:instruction tagged_944} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_add} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_mod} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction integer_mod} {:instruction float_min} {:instruction tagged_920} {:instruction float_mult} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_add} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction integer_mod})
Best program: (float_yankdup integer_fromfloat float_rot float_frominteger integer_add in2 integer_shove float_dec in1 integer_shove float_frominteger in2 integer_stackdepth float_add integer_stackdepth tagged_944 float_yank integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth float_dup_times integer_fromfloat 46.73998848521251 integer_mult float_pop float_pop integer_yankdup integer_sub integer_add float_pop integer_sub integer_mod print_integer integer_sub float_mult integer_yankdup float_mod print_float float_shove 95 float_mod integer_stackdepth integer_add integer_mod float_min tagged_920 float_mult integer_mod print_integer integer_add integer_dup float_stackdepth float_yank float_max float_div integer_mod)
Errors: [0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3]
Total: 75.0
Mean: 1.5
Genome size: 82
Size: 83
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3113.9300171999994
Median total errors in population: 223.2499
Error averages by case: (109.36232240000089 10.753 110.57667919999852 10.024 119.53129170000138 8.904 105.33444590000038 10.748 131.48779349999944 7.985 126.59744300000105 8.928 110.83569150000109 7.339 101.97670879999951 8.289 119.78582019999912 8.095 131.93146450000063 8.428 112.99096539999972 8.831 106.1519737999995 9.059 105.4368445999995 8.694 108.41415140000092 10.701 122.67349320000123 8.74 122.87846179999939 9.531 117.00174959999941 8.848 109.25919020000111 9.658 113.41546129999944 8.14 108.42550360000072 10.419 128.3159647999986 8.651 112.50156690000031 7.807 107.5416487000009 8.812 134.13544019999907 8.479 113.18594099999973 8.319)
Error minima by case: (0.0 3 0.0 3 0.0 1 0.0 3 0.0 3 0.0 3 0.0 2 0.0 2 0.0 1 0.0 2 0.0 2 0.0 3 0.0 2 0.0 3 0.0 2 0.0 3 0.0 3 0.0 3 0.0 2 0.0 3 0.0 3 0.0 2 0.0 3 0.0 3 0.0 3)
Average genome size in population (length): 95.247
Average program size in population (points): 96.247
Average percent parens in population: 0.011
Minimum age in population: 90.66868235648185
Maximum age in population: 95.00308843855797
Average age in population: 93.18599166929651
Median age in population: 93.26327983944417
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 47
Genome diversity (% unique Plush genomes):	 0.852
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.852
Total error diversity:				 0.303
Error (vector) diversity:			 0.325
Behavioral diversity:				 0.325
--- Run Statistics ---
Number of program evaluations used so far: 68000
Number of point (instruction) evaluations so far: 154299008
--- Timings ---
Current time: 1529615834133 milliseconds
Total Time:         266.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        92.3 seconds, 34.7%
Fitness Testing:    136.3 seconds, 51.2%
Report:              37.3 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 67
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 68
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 68
;;******************************
;; -*- Number IO problem report - generation 68
Test total error for best: 2000.0
Test mean error for best: 1.00000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 49.645777468896
Correct output: 24.1561588797  | Program output: 24.156158879796
Correct output: 63.2618741651  | Program output: 63.261874165196
Correct output: 81.4613344804  | Program output: 81.461334480496
Correct output: -116.4209784668 | Program output: -116.420978466896
Correct output: -80.5506083936 | Program output: -80.550608393696
Correct output: 41.7915986532  | Program output: 41.791598653296
Correct output: -6.9439752137  | Program output: -6.943975213796
Correct output: 58.5604070006  | Program output: 58.560407000696
Correct output: -105.4717093128 | Program output: -105.471709312896
Correct output: -65.3737650023 | Program output: -65.373765002396
Correct output: 80.422971733   | Program output: 80.42297173396
Correct output: -36.4331405664 | Program output: -36.433140566496
Correct output: 49.2855176563  | Program output: 49.285517656396
Correct output: 5.2530048743   | Program output: 5.253004874396
Correct output: -14.5307262538 | Program output: -14.530726253896
Correct output: 174.8425999229 | Program output: 174.842599922996
Correct output: 94.2858027683  | Program output: 94.285802768396
Correct output: -32.1580651662 | Program output: -32.158065166296
Correct output: 34.2563324554  | Program output: 34.256332455496
Correct output: -34.3108385906 | Program output: -34.310838590696
Correct output: -25.5420796562 | Program output: -25.542079656296
Correct output: 40.5609747923  | Program output: 40.560974792396
Correct output: -146.3905253753 | Program output: -146.390525375396
Correct output: 125.2745939078 | Program output: 125.274593907896
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_dec} {:instruction in1} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_stackdepth} {:instruction float_add} {:instruction integer_stackdepth} {:instruction tagged_944} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_add} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_mod} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction integer_mod} {:instruction print_integer} {:instruction tagged_920} {:instruction float_mult} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_add} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction integer_mod})
Best program: (float_yankdup integer_fromfloat float_rot float_frominteger integer_add in2 integer_shove float_dec in1 integer_shove float_frominteger in2 integer_stackdepth float_add integer_stackdepth tagged_944 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod integer_yankdup integer_rot print_float float_shove 95 float_mod float_frominteger float_dup_times integer_fromfloat 46.73998848521251 integer_mult float_pop float_pop integer_yankdup integer_sub integer_add float_pop integer_sub integer_mod print_integer integer_sub float_mult integer_yankdup float_mod print_float float_shove 95 float_mod integer_stackdepth integer_add integer_mod print_integer tagged_920 float_mult integer_mod print_integer integer_add integer_dup float_stackdepth float_yank float_max float_div integer_mod)
Errors: [0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2]
Total: 50.0
Mean: 1.0
Genome size: 82
Size: 83
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3974.8568470999994
Median total errors in population: 222.96309999999997
Error averages by case: (142.81664889999993 10.696 143.43120579999928 9.986 155.83963810000074 8.823 139.48882969999949 10.435 170.80558190000042 8.255 164.93985450000037 8.957 139.83923140000064 7.808 137.84237149999927 8.117 154.65510719999963 7.97 173.78890420000013 8.48 146.6769446 8.574 141.7484586 8.636 138.26644700000014 8.838 141.65637340000086 10.604 159.9466091000007 8.371 160.57476699999978 9.38 148.0898406999995 9.103 138.20508500000014 9.495 145.5661385999999 8.554 141.58609129999982 10.339 163.98040979999962 9.047 144.87925510000002 7.973 140.6361614000004 8.572 172.64316379999988 8.217 143.5257284999999 8.198)
Error minima by case: (0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2)
Average genome size in population (length): 98.626
Average program size in population (points): 99.626
Average percent parens in population: 0.010
Minimum age in population: 92.2031980957164
Maximum age in population: 96.8274100112527
Average age in population: 94.65457774566991
Median age in population: 94.67645276216906
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.877
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.877
Total error diversity:				 0.344
Error (vector) diversity:			 0.39
Behavioral diversity:				 0.393
--- Run Statistics ---
Number of program evaluations used so far: 69000
Number of point (instruction) evaluations so far: 156767508
--- Timings ---
Current time: 1529615838269 milliseconds
Total Time:         270.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        93.7 seconds, 34.7%
Fitness Testing:    138.5 seconds, 51.3%
Report:              37.9 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 68
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 69
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 69
;;******************************
;; -*- Number IO problem report - generation 69
Test total error for best: 1000.0
Test mean error for best: 0.50000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 49.64577746880
Correct output: 24.1561588797  | Program output: 24.15615887970
Correct output: 63.2618741651  | Program output: 63.26187416510
Correct output: 81.4613344804  | Program output: 81.46133448040
Correct output: -116.4209784668 | Program output: -116.42097846680
Correct output: -80.5506083936 | Program output: -80.55060839360
Correct output: 41.7915986532  | Program output: 41.79159865320
Correct output: -6.9439752137  | Program output: -6.94397521370
Correct output: 58.5604070006  | Program output: 58.56040700060
Correct output: -105.4717093128 | Program output: -105.47170931280
Correct output: -65.3737650023 | Program output: -65.37376500230
Correct output: 80.422971733   | Program output: 80.4229717330 
Correct output: -36.4331405664 | Program output: -36.43314056640
Correct output: 49.2855176563  | Program output: 49.28551765630
Correct output: 5.2530048743   | Program output: 5.25300487430 
Correct output: -14.5307262538 | Program output: -14.53072625380
Correct output: 174.8425999229 | Program output: 174.84259992290
Correct output: 94.2858027683  | Program output: 94.28580276830
Correct output: -32.1580651662 | Program output: -32.15806516620
Correct output: 34.2563324554  | Program output: 34.25633245540
Correct output: -34.3108385906 | Program output: -34.31083859060
Correct output: -25.5420796562 | Program output: -25.54207965620
Correct output: 40.5609747923  | Program output: 40.56097479230
Correct output: -146.3905253753 | Program output: -146.39052537530
Correct output: 125.2745939078 | Program output: 125.27459390780
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_dec} {:instruction in1} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_stackdepth} {:instruction float_add} {:instruction integer_stackdepth} {:instruction tagged_944} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_add} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_mod} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction integer_mod} {:instruction float_min} {:instruction tagged_920} {:instruction float_mult} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_add} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction integer_mod})
Best program: (float_yankdup integer_fromfloat float_rot float_frominteger integer_add in2 integer_shove float_dec in1 integer_shove float_frominteger in2 integer_stackdepth float_add integer_stackdepth tagged_944 float_yank integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_mod integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth float_dup_times integer_fromfloat 46.73998848521251 integer_mult float_pop float_pop integer_yankdup integer_sub integer_add float_pop integer_sub integer_mod print_integer integer_sub float_mult integer_yankdup float_mod print_float float_shove 95 float_mod integer_stackdepth integer_add integer_mod float_min tagged_920 float_mult integer_mod float_dec integer_add integer_dup float_stackdepth float_yank float_max float_div integer_mod)
Errors: [0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1]
Total: 25.0
Mean: 0.5
Genome size: 82
Size: 83
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4428.3615055
Median total errors in population: 221.96410000000003
Error averages by case: (163.2855827000001 10.18 163.99593690000023 9.59 168.1197692000006 8.371 158.04218149999957 10.087 191.13208360000027 7.939 177.87862209999957 8.784 154.0035402000004 7.713 162.26805989999932 7.822 166.9449120000004 7.579 190.26674550000047 8.231 170.3111672000001 8.379 161.40957150000008 8.359 169.62590499999985 8.513 161.4518171000011 10.053 172.53024640000018 7.691 175.8701966000001 9.168 157.86395569999922 8.693 159.4047212999995 9.049 169.1310905000001 8.283 162.41703409999914 9.945 179.10902599999963 8.962 168.84250930000007 7.52 162.20741149999958 8.138 192.66478670000095 7.847 154.66663299999948 8.022)
Error minima by case: (0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1)
Average genome size in population (length): 94.227
Average program size in population (points): 95.227
Average percent parens in population: 0.011
Minimum age in population: 93.68398781773762
Maximum age in population: 98.13543688249761
Average age in population: 96.10875179372702
Median age in population: 96.13587044581293
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.883
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.883
Total error diversity:				 0.338
Error (vector) diversity:			 0.367
Behavioral diversity:				 0.386
--- Run Statistics ---
Number of program evaluations used so far: 70000
Number of point (instruction) evaluations so far: 159124158
--- Timings ---
Current time: 1529615842342 milliseconds
Total Time:         274.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        95.1 seconds, 34.7%
Fitness Testing:    140.7 seconds, 51.3%
Report:              38.4 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 69
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 70
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 70
;;******************************
;; -*- Number IO problem report - generation 70
Test total error for best: 1000.0
Test mean error for best: 0.50000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 49.64577746880
Correct output: 24.1561588797  | Program output: 24.15615887970
Correct output: 63.2618741651  | Program output: 63.26187416510
Correct output: 81.4613344804  | Program output: 81.46133448040
Correct output: -116.4209784668 | Program output: -116.42097846680
Correct output: -80.5506083936 | Program output: -80.55060839360
Correct output: 41.7915986532  | Program output: 41.79159865320
Correct output: -6.9439752137  | Program output: -6.94397521370
Correct output: 58.5604070006  | Program output: 58.56040700060
Correct output: -105.4717093128 | Program output: -105.47170931280
Correct output: -65.3737650023 | Program output: -65.37376500230
Correct output: 80.422971733   | Program output: 80.4229717330 
Correct output: -36.4331405664 | Program output: -36.43314056640
Correct output: 49.2855176563  | Program output: 49.28551765630
Correct output: 5.2530048743   | Program output: 5.25300487430 
Correct output: -14.5307262538 | Program output: -14.53072625380
Correct output: 174.8425999229 | Program output: 174.84259992290
Correct output: 94.2858027683  | Program output: 94.28580276830
Correct output: -32.1580651662 | Program output: -32.15806516620
Correct output: 34.2563324554  | Program output: 34.25633245540
Correct output: -34.3108385906 | Program output: -34.31083859060
Correct output: -25.5420796562 | Program output: -25.54207965620
Correct output: 40.5609747923  | Program output: 40.56097479230
Correct output: -146.3905253753 | Program output: -146.39052537530
Correct output: 125.2745939078 | Program output: 125.27459390780
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_dec} {:instruction in1} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_stackdepth} {:instruction float_add} {:instruction integer_stackdepth} {:instruction tagged_944} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction float_yankdup} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction 46.73998848521251} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_add} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_mod} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction integer_mod} {:instruction print_integer} {:instruction tagged_920} {:instruction float_frominteger} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_add} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction integer_mod})
Best program: (float_yankdup integer_fromfloat float_rot float_frominteger integer_add in2 integer_shove float_dec in1 integer_shove float_frominteger in2 integer_stackdepth float_add integer_stackdepth tagged_944 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub float_yankdup integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth integer_yankdup integer_rot print_float float_shove 95 float_mod integer_stackdepth float_dup_times integer_fromfloat 46.73998848521251 integer_mult float_pop float_pop integer_yankdup integer_sub integer_add float_mult integer_yankdup float_mod print_float float_shove 95 float_mod integer_stackdepth integer_add integer_mod print_integer tagged_920 float_frominteger integer_mod print_integer integer_add integer_dup float_stackdepth float_yank float_max float_div integer_mod)
Errors: [0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1]
Total: 25.0
Mean: 0.5
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4748.788477500001
Median total errors in population: 218.96410000000003
Error averages by case: (176.7907136000005 8.687 177.1680896000006 8.406 169.73809970000056 7.26 180.3941126000003 8.748 206.36346089999978 6.984 187.3014966999989 7.734 162.20396199999965 6.973 187.04610679999993 7.005 169.67325290000082 6.503 209.34800110000054 7.267 189.3803025999997 7.465 180.80149580000005 7.662 185.20870269999944 7.381 181.05781660000125 8.834 175.71527209999985 6.706 180.0745996000003 8.129 168.92037389999916 7.505 179.1837020999993 8.086 187.99955849999975 7.267 180.2545259999994 8.709 185.38314739999967 7.862 187.05573600000048 6.559 176.57933549999902 7.28 209.64548620000076 7.107 166.17312659999948 7.209)
Error minima by case: (0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1)
Average genome size in population (length): 88.662
Average program size in population (points): 89.662
Average percent parens in population: 0.011
Minimum age in population: 94.98974356834145
Maximum age in population: 99.3836583074116
Average age in population: 97.54533091299845
Median age in population: 97.59719342945817
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.844
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.844
Total error diversity:				 0.29
Error (vector) diversity:			 0.309
Behavioral diversity:				 0.357
--- Run Statistics ---
Number of program evaluations used so far: 71000
Number of point (instruction) evaluations so far: 161341233
--- Timings ---
Current time: 1529615846348 milliseconds
Total Time:         278.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        96.5 seconds, 34.7%
Fitness Testing:    142.8 seconds, 51.3%
Report:              39.0 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 70
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 71
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 71
;;******************************
;; -*- Number IO problem report - generation 71
Test total error for best: 0.0
Test mean error for best: 0.00000
Test Case    0 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    1 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    2 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    3 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    4 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    5 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    6 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    7 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    8 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    9 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   10 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   11 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   12 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   13 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   14 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   15 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   16 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   17 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   18 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   19 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   20 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   21 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   22 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   23 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   24 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   25 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   26 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   27 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   28 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   29 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   30 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   31 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   32 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   33 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   34 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   35 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   36 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   37 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   38 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   39 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   40 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   41 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   42 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   43 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   44 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   45 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   46 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   47 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   48 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   49 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   50 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   51 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   52 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   53 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   54 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   55 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   56 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   57 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   58 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   59 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   60 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   61 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   62 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   63 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   64 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   65 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   66 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   67 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   68 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   69 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   70 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   71 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   72 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   73 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   74 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   75 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   76 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   77 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   78 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   79 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   80 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   81 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   82 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   83 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   84 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   85 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   86 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   87 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   88 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   89 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   90 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   91 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   92 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   93 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   94 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   95 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   96 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   97 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   98 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   99 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  100 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  101 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  102 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  103 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  104 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  105 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  106 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  107 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  108 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  109 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  110 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  111 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  112 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  113 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  114 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  115 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  116 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  117 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  118 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  119 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  120 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  121 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  122 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  123 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  124 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  125 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  126 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  127 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  128 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  129 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  130 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  131 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  132 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  133 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  134 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  135 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  136 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  137 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  138 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  139 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  140 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  141 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  142 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  143 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  144 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  145 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  146 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  147 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  148 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  149 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  150 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  151 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  152 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  153 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  154 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  155 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  156 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  157 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  158 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  159 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  160 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  161 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  162 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  163 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  164 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  165 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  166 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  167 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  168 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  169 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  170 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  171 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  172 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  173 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  174 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  175 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  176 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  177 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  178 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  179 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  180 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  181 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  182 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  183 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  184 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  185 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  186 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  187 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  188 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  189 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  190 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  191 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  192 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  193 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  194 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  195 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  196 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  197 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  198 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  199 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  200 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  201 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  202 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  203 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  204 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  205 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  206 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  207 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  208 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  209 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  210 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  211 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  212 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  213 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  214 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  215 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  216 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  217 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  218 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  219 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  220 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  221 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  222 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  223 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  224 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  225 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  226 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  227 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  228 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  229 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  230 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  231 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  232 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  233 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  234 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  235 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  236 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  237 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  238 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  239 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  240 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  241 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  242 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  243 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  244 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  245 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  246 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  247 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  248 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  249 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  250 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  251 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  252 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  253 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  254 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  255 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  256 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  257 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  258 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  259 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  260 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  261 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  262 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  263 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  264 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  265 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  266 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  267 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  268 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  269 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  270 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  271 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  272 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  273 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  274 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  275 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  276 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  277 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  278 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  279 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  280 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  281 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  282 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  283 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  284 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  285 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  286 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  287 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  288 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  289 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  290 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  291 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  292 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  293 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  294 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  295 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  296 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  297 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  298 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  299 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  300 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  301 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  302 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  303 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  304 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  305 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  306 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  307 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  308 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  309 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  310 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  311 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  312 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  313 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  314 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  315 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  316 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  317 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  318 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  319 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  320 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  321 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  322 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  323 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  324 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  325 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  326 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  327 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  328 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  329 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  330 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  331 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  332 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  333 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  334 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  335 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  336 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  337 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  338 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  339 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  340 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  341 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  342 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  343 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  344 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  345 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  346 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  347 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  348 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  349 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  350 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  351 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  352 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  353 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  354 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  355 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  356 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  357 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  358 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  359 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  360 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  361 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  362 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  363 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  364 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  365 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  366 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  367 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  368 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  369 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  370 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  371 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  372 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  373 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  374 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  375 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  376 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  377 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  378 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  379 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  380 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  381 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  382 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  383 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  384 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  385 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  386 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  387 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  388 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  389 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  390 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  391 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  392 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  393 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  394 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  395 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  396 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  397 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  398 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  399 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  400 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  401 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  402 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  403 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  404 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  405 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  406 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  407 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  408 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  409 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  410 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  411 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  412 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  413 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  414 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  415 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  416 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  417 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  418 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  419 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  420 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  421 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  422 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  423 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  424 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  425 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  426 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  427 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  428 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  429 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  430 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  431 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  432 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  433 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  434 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  435 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  436 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  437 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  438 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  439 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  440 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  441 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  442 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  443 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  444 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  445 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  446 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  447 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  448 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  449 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  450 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  451 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  452 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  453 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  454 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  455 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  456 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  457 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  458 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  459 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  460 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  461 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  462 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  463 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  464 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  465 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  466 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  467 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  468 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  469 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  470 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  471 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  472 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  473 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  474 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  475 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  476 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  477 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  478 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  479 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  480 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  481 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  482 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  483 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  484 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  485 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  486 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  487 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  488 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  489 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  490 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  491 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  492 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  493 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  494 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  495 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  496 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  497 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  498 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  499 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  500 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  501 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  502 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  503 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  504 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  505 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  506 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  507 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  508 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  509 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  510 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  511 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  512 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  513 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  514 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  515 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  516 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  517 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  518 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  519 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  520 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  521 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  522 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  523 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  524 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  525 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  526 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  527 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  528 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  529 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  530 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  531 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  532 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  533 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  534 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  535 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  536 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  537 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  538 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  539 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  540 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  541 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  542 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  543 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  544 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  545 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  546 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  547 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  548 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  549 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  550 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  551 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  552 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  553 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  554 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  555 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  556 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  557 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  558 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  559 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  560 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  561 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  562 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  563 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  564 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  565 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  566 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  567 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  568 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  569 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  570 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  571 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  572 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  573 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  574 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  575 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  576 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  577 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  578 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  579 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  580 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  581 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  582 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  583 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  584 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  585 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  586 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  587 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  588 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  589 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  590 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  591 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  592 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  593 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  594 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  595 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  596 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  597 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  598 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  599 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  600 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  601 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  602 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  603 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  604 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  605 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  606 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  607 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  608 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  609 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  610 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  611 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  612 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  613 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  614 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  615 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  616 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  617 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  618 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  619 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  620 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  621 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  622 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  623 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  624 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  625 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  626 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  627 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  628 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  629 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  630 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  631 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  632 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  633 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  634 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  635 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  636 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  637 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  638 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  639 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  640 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  641 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  642 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  643 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  644 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  645 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  646 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  647 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  648 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  649 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  650 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  651 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  652 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  653 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  654 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  655 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  656 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  657 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  658 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  659 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  660 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  661 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  662 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  663 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  664 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  665 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  666 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  667 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  668 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  669 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  670 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  671 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  672 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  673 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  674 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  675 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  676 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  677 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  678 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  679 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  680 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  681 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  682 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  683 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  684 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  685 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  686 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  687 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  688 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  689 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  690 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  691 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  692 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  693 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  694 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  695 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  696 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  697 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  698 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  699 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  700 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  701 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  702 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  703 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  704 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  705 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  706 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  707 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  708 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  709 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  710 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  711 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  712 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  713 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  714 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  715 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  716 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  717 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  718 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  719 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  720 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  721 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  722 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  723 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  724 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  725 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  726 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  727 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  728 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  729 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  730 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  731 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  732 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  733 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  734 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  735 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  736 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  737 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  738 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  739 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  740 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  741 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  742 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  743 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  744 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  745 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  746 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  747 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  748 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  749 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  750 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  751 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  752 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  753 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  754 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  755 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  756 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  757 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  758 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  759 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  760 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  761 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  762 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  763 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  764 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  765 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  766 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  767 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  768 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  769 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  770 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  771 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  772 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  773 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  774 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  775 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  776 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  777 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  778 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  779 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  780 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  781 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  782 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  783 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  784 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  785 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  786 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  787 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  788 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  789 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  790 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  791 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  792 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  793 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  794 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  795 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  796 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  797 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  798 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  799 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  800 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  801 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  802 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  803 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  804 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  805 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  806 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  807 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  808 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  809 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  810 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  811 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  812 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  813 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  814 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  815 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  816 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  817 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  818 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  819 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  820 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  821 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  822 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  823 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  824 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  825 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  826 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  827 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  828 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  829 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  830 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  831 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  832 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  833 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  834 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  835 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  836 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  837 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  838 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  839 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  840 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  841 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  842 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  843 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  844 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  845 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  846 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  847 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  848 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  849 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  850 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  851 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  852 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  853 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  854 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  855 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  856 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  857 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  858 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  859 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  860 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  861 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  862 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  863 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  864 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  865 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  866 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  867 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  868 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  869 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  870 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  871 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  872 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  873 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  874 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  875 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  876 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  877 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  878 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  879 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  880 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  881 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  882 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  883 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  884 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  885 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  886 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  887 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  888 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  889 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  890 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  891 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  892 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  893 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  894 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  895 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  896 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  897 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  898 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  899 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  900 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  901 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  902 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  903 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  904 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  905 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  906 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  907 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  908 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  909 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  910 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  911 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  912 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  913 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  914 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  915 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  916 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  917 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  918 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  919 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  920 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  921 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  922 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  923 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  924 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  925 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  926 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  927 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  928 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  929 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  930 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  931 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  932 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  933 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  934 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  935 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  936 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  937 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  938 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  939 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  940 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  941 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  942 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  943 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  944 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  945 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  946 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  947 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  948 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  949 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  950 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  951 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  952 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  953 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  954 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  955 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  956 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  957 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  958 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  959 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  960 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  961 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  962 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  963 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  964 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  965 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  966 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  967 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  968 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  969 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  970 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  971 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  972 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  973 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  974 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  975 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  976 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  977 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  978 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  979 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  980 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  981 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  982 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  983 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  984 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  985 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  986 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  987 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  988 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  989 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  990 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  991 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  992 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  993 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  994 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  995 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  996 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  997 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  998 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  999 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 49.6457774688 
Correct output: 24.1561588797  | Program output: 24.1561588797 
Correct output: 63.2618741651  | Program output: 63.2618741651 
Correct output: 81.4613344804  | Program output: 81.4613344804 
Correct output: -116.4209784668 | Program output: -116.4209784668
Correct output: -80.5506083936 | Program output: -80.5506083936
Correct output: 41.7915986532  | Program output: 41.7915986532 
Correct output: -6.9439752137  | Program output: -6.9439752137 
Correct output: 58.5604070006  | Program output: 58.5604070006 
Correct output: -105.4717093128 | Program output: -105.4717093128
Correct output: -65.3737650023 | Program output: -65.3737650023
Correct output: 80.422971733   | Program output: 80.422971733  
Correct output: -36.4331405664 | Program output: -36.4331405664
Correct output: 49.2855176563  | Program output: 49.2855176563 
Correct output: 5.2530048743   | Program output: 5.2530048743  
Correct output: -14.5307262538 | Program output: -14.5307262538
Correct output: 174.8425999229 | Program output: 174.8425999229
Correct output: 94.2858027683  | Program output: 94.2858027683 
Correct output: -32.1580651662 | Program output: -32.1580651662
Correct output: 34.2563324554  | Program output: 34.2563324554 
Correct output: -34.3108385906 | Program output: -34.3108385906
Correct output: -25.5420796562 | Program output: -25.5420796562
Correct output: 40.5609747923  | Program output: 40.5609747923 
Correct output: -146.3905253753 | Program output: -146.3905253753
Correct output: 125.2745939078 | Program output: 125.2745939078
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_dec} {:instruction in1} {:instruction integer_shove} {:instruction float_frominteger} {:instruction in2} {:instruction integer_stackdepth} {:instruction float_add} {:instruction integer_stackdepth} {:instruction tagged_944} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction tagged_944} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction float_swap} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tagged_920} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction print_float} {:instruction float_pop} {:instruction float_pop} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_add} {:instruction float_pop} {:instruction float_dup_items} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_mod} {:instruction integer_sub} {:instruction integer_add} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_mod} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction 95} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction integer_mod})
Best program: (float_yankdup integer_fromfloat float_rot float_frominteger integer_add in2 integer_shove float_dec in1 integer_shove float_frominteger in2 integer_stackdepth float_add integer_stackdepth tagged_944 integer_sub integer_stackdepth tagged_944 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth float_swap integer_rot integer_stackdepth tagged_920 integer_sub integer_mod integer_yankdup integer_rot print_float float_pop float_pop integer_yankdup integer_sub integer_add float_pop float_dup_items integer_mod print_integer integer_sub float_mult integer_yankdup float_mod integer_sub integer_add float_pop integer_sub integer_mod print_integer integer_sub float_mult integer_yankdup float_mod print_float float_shove 95 float_mod integer_stackdepth integer_add integer_mod integer_rot print_float float_shove 95 float_mod integer_stackdepth integer_add integer_mod)
Errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
Total: 0.0
Mean: 0.0
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4544.176796199999
Median total errors in population: 75.0
Error averages by case: (168.42569969999997 5.536 169.29303959999993 5.504 162.0636608000001 4.882 172.04468479999994 5.56 194.45060130000005 4.988 185.2398769999998 5.195 158.5333162 4.858 180.4795229999999 4.924 160.8007565000002 4.68 195.2360723 5.032 191.05349019999997 5.091 174.53924870000006 5.204 174.0069183999999 5.038 173.23519410000026 5.617 163.1078862999999 4.833 180.70665140000008 5.336 173.95774599999993 5.117 173.7804447999999 5.426 187.58909809999994 5.037 173.4256793999999 5.573 186.40822629999994 5.259 187.30696340000011 4.859 161.78404879999985 5.128 196.85879650000012 5.115 171.00917259999989 5.048)
Error minima by case: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
Average genome size in population (length): 85.418
Average program size in population (points): 86.418
Average percent parens in population: 0.012
Minimum age in population: 96.22683670943174
Maximum age in population: 100.6511192104572
Average age in population: 98.89109231324527
Median age in population: 98.90256951872729
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.819
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.819
Total error diversity:				 0.263
Error (vector) diversity:			 0.271
Behavioral diversity:				 0.362
--- Run Statistics ---
Number of program evaluations used so far: 72000
Number of point (instruction) evaluations so far: 163476958
--- Timings ---
Current time: 1529615850404 milliseconds
Total Time:         282.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        97.8 seconds, 34.6%
Fitness Testing:    144.9 seconds, 51.3%
Report:              39.5 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 71
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 71
Successful program: (float_yankdup integer_fromfloat float_rot float_frominteger integer_add in2 integer_shove float_dec in1 integer_shove float_frominteger in2 integer_stackdepth float_add integer_stackdepth tagged_944 integer_sub integer_stackdepth tagged_944 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth float_swap integer_rot integer_stackdepth tagged_920 integer_sub integer_mod integer_yankdup integer_rot print_float float_pop float_pop integer_yankdup integer_sub integer_add float_pop float_dup_items integer_mod print_integer integer_sub float_mult integer_yankdup float_mod integer_sub integer_add float_pop integer_sub integer_mod print_integer integer_sub float_mult integer_yankdup float_mod print_float float_shove 95 float_mod integer_stackdepth integer_add integer_mod integer_rot print_float float_shove 95 float_mod integer_stackdepth integer_add integer_mod)
Errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
Total error: 0.0
History: null
Size: 84


Auto-simplifying with starting size: 84
step: 0
program: (float_yankdup integer_fromfloat float_rot float_frominteger integer_add in2 integer_shove float_dec in1 integer_shove float_frominteger in2 integer_stackdepth float_add integer_stackdepth tagged_944 integer_sub integer_stackdepth tagged_944 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth tagged_920 integer_sub integer_stackdepth integer_sub integer_rot integer_stackdepth integer_sub integer_rot integer_stackdepth float_swap integer_rot integer_stackdepth tagged_920 integer_sub integer_mod integer_yankdup integer_rot print_float float_pop float_pop integer_yankdup integer_sub integer_add float_pop float_dup_items integer_mod print_integer integer_sub float_mult integer_yankdup float_mod integer_sub integer_add float_pop integer_sub integer_mod print_integer integer_sub float_mult integer_yankdup float_mod print_float float_shove 95 float_mod integer_stackdepth integer_add integer_mod integer_rot print_float float_shove 95 float_mod integer_stackdepth integer_add integer_mod)
errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
total: 0.0
size: 84

step: 500
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 1000
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 1500
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 2000
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 2500
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 3000
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 3500
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 4000
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 4500
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 5000
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Number IO problem report - generation 71
Test total error for best: 0.0
Test mean error for best: 0.00000
Test Case    0 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    1 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    2 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    3 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    4 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    5 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    6 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    7 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    8 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    9 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   10 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   11 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   12 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   13 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   14 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   15 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   16 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   17 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   18 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   19 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   20 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   21 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   22 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   23 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   24 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   25 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   26 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   27 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   28 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   29 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   30 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   31 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   32 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   33 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   34 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   35 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   36 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   37 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   38 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   39 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   40 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   41 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   42 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   43 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   44 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   45 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   46 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   47 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   48 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   49 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   50 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   51 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   52 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   53 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   54 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   55 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   56 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   57 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   58 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   59 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   60 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   61 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   62 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   63 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   64 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   65 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   66 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   67 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   68 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   69 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   70 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   71 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   72 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   73 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   74 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   75 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   76 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   77 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   78 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   79 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   80 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   81 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   82 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   83 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   84 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   85 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   86 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   87 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   88 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   89 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   90 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   91 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   92 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   93 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   94 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   95 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   96 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   97 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   98 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   99 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  100 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  101 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  102 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  103 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  104 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  105 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  106 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  107 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  108 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  109 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  110 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  111 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  112 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  113 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  114 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  115 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  116 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  117 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  118 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  119 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  120 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  121 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  122 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  123 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  124 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  125 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  126 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  127 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  128 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  129 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  130 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  131 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  132 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  133 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  134 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  135 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  136 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  137 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  138 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  139 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  140 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  141 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  142 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  143 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  144 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  145 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  146 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  147 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  148 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  149 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  150 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  151 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  152 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  153 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  154 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  155 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  156 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  157 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  158 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  159 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  160 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  161 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  162 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  163 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  164 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  165 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  166 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  167 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  168 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  169 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  170 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  171 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  172 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  173 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  174 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  175 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  176 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  177 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  178 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  179 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  180 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  181 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  182 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  183 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  184 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  185 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  186 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  187 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  188 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  189 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  190 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  191 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  192 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  193 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  194 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  195 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  196 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  197 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  198 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  199 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  200 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  201 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  202 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  203 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  204 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  205 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  206 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  207 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  208 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  209 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  210 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  211 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  212 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  213 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  214 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  215 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  216 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  217 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  218 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  219 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  220 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  221 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  222 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  223 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  224 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  225 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  226 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  227 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  228 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  229 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  230 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  231 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  232 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  233 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  234 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  235 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  236 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  237 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  238 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  239 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  240 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  241 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  242 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  243 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  244 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  245 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  246 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  247 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  248 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  249 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  250 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  251 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  252 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  253 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  254 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  255 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  256 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  257 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  258 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  259 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  260 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  261 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  262 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  263 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  264 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  265 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  266 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  267 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  268 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  269 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  270 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  271 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  272 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  273 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  274 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  275 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  276 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  277 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  278 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  279 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  280 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  281 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  282 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  283 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  284 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  285 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  286 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  287 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  288 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  289 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  290 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  291 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  292 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  293 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  294 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  295 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  296 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  297 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  298 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  299 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  300 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  301 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  302 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  303 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  304 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  305 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  306 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  307 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  308 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  309 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  310 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  311 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  312 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  313 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  314 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  315 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  316 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  317 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  318 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  319 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  320 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  321 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  322 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  323 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  324 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  325 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  326 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  327 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  328 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  329 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  330 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  331 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  332 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  333 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  334 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  335 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  336 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  337 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  338 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  339 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  340 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  341 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  342 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  343 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  344 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  345 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  346 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  347 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  348 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  349 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  350 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  351 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  352 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  353 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  354 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  355 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  356 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  357 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  358 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  359 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  360 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  361 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  362 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  363 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  364 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  365 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  366 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  367 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  368 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  369 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  370 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  371 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  372 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  373 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  374 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  375 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  376 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  377 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  378 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  379 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  380 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  381 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  382 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  383 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  384 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  385 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  386 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  387 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  388 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  389 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  390 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  391 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  392 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  393 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  394 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  395 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  396 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  397 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  398 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  399 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  400 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  401 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  402 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  403 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  404 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  405 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  406 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  407 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  408 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  409 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  410 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  411 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  412 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  413 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  414 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  415 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  416 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  417 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  418 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  419 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  420 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  421 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  422 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  423 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  424 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  425 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  426 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  427 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  428 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  429 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  430 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  431 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  432 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  433 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  434 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  435 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  436 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  437 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  438 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  439 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  440 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  441 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  442 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  443 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  444 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  445 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  446 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  447 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  448 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  449 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  450 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  451 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  452 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  453 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  454 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  455 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  456 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  457 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  458 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  459 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  460 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  461 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  462 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  463 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  464 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  465 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  466 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  467 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  468 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  469 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  470 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  471 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  472 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  473 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  474 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  475 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  476 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  477 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  478 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  479 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  480 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  481 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  482 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  483 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  484 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  485 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  486 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  487 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  488 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  489 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  490 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  491 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  492 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  493 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  494 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  495 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  496 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  497 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  498 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  499 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  500 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  501 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  502 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  503 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  504 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  505 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  506 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  507 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  508 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  509 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  510 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  511 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  512 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  513 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  514 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  515 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  516 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  517 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  518 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  519 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  520 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  521 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  522 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  523 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  524 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  525 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  526 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  527 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  528 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  529 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  530 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  531 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  532 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  533 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  534 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  535 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  536 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  537 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  538 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  539 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  540 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  541 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  542 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  543 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  544 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  545 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  546 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  547 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  548 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  549 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  550 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  551 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  552 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  553 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  554 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  555 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  556 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  557 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  558 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  559 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  560 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  561 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  562 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  563 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  564 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  565 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  566 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  567 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  568 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  569 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  570 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  571 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  572 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  573 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  574 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  575 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  576 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  577 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  578 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  579 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  580 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  581 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  582 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  583 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  584 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  585 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  586 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  587 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  588 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  589 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  590 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  591 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  592 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  593 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  594 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  595 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  596 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  597 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  598 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  599 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  600 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  601 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  602 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  603 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  604 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  605 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  606 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  607 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  608 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  609 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  610 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  611 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  612 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  613 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  614 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  615 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  616 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  617 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  618 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  619 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  620 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  621 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  622 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  623 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  624 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  625 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  626 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  627 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  628 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  629 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  630 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  631 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  632 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  633 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  634 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  635 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  636 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  637 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  638 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  639 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  640 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  641 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  642 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  643 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  644 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  645 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  646 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  647 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  648 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  649 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  650 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  651 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  652 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  653 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  654 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  655 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  656 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  657 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  658 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  659 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  660 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  661 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  662 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  663 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  664 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  665 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  666 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  667 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  668 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  669 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  670 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  671 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  672 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  673 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  674 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  675 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  676 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  677 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  678 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  679 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  680 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  681 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  682 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  683 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  684 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  685 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  686 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  687 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  688 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  689 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  690 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  691 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  692 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  693 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  694 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  695 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  696 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  697 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  698 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  699 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  700 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  701 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  702 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  703 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  704 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  705 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  706 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  707 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  708 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  709 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  710 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  711 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  712 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  713 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  714 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  715 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  716 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  717 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  718 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  719 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  720 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  721 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  722 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  723 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  724 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  725 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  726 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  727 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  728 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  729 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  730 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  731 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  732 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  733 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  734 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  735 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  736 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  737 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  738 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  739 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  740 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  741 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  742 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  743 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  744 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  745 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  746 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  747 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  748 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  749 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  750 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  751 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  752 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  753 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  754 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  755 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  756 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  757 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  758 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  759 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  760 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  761 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  762 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  763 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  764 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  765 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  766 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  767 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  768 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  769 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  770 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  771 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  772 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  773 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  774 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  775 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  776 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  777 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  778 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  779 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  780 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  781 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  782 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  783 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  784 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  785 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  786 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  787 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  788 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  789 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  790 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  791 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  792 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  793 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  794 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  795 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  796 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  797 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  798 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  799 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  800 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  801 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  802 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  803 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  804 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  805 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  806 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  807 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  808 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  809 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  810 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  811 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  812 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  813 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  814 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  815 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  816 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  817 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  818 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  819 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  820 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  821 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  822 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  823 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  824 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  825 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  826 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  827 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  828 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  829 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  830 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  831 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  832 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  833 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  834 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  835 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  836 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  837 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  838 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  839 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  840 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  841 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  842 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  843 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  844 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  845 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  846 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  847 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  848 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  849 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  850 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  851 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  852 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  853 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  854 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  855 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  856 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  857 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  858 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  859 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  860 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  861 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  862 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  863 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  864 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  865 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  866 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  867 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  868 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  869 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  870 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  871 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  872 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  873 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  874 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  875 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  876 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  877 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  878 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  879 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  880 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  881 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  882 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  883 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  884 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  885 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  886 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  887 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  888 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  889 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  890 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  891 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  892 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  893 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  894 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  895 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  896 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  897 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  898 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  899 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  900 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  901 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  902 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  903 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  904 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  905 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  906 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  907 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  908 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  909 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  910 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  911 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  912 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  913 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  914 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  915 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  916 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  917 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  918 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  919 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  920 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  921 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  922 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  923 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  924 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  925 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  926 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  927 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  928 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  929 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  930 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  931 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  932 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  933 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  934 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  935 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  936 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  937 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  938 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  939 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  940 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  941 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  942 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  943 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  944 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  945 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  946 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  947 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  948 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  949 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  950 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  951 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  952 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  953 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  954 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  955 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  956 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  957 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  958 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  959 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  960 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  961 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  962 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  963 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  964 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  965 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  966 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  967 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  968 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  969 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  970 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  971 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  972 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  973 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  974 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  975 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  976 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  977 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  978 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  979 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  980 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  981 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  982 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  983 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  984 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  985 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  986 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  987 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  988 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  989 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  990 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  991 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  992 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  993 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  994 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  995 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  996 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  997 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  998 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  999 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 49.6457774688  | Program output: 49.6457774688 
Correct output: 24.1561588797  | Program output: 24.1561588797 
Correct output: 63.2618741651  | Program output: 63.2618741651 
Correct output: 81.4613344804  | Program output: 81.4613344804 
Correct output: -116.4209784668 | Program output: -116.4209784668
Correct output: -80.5506083936 | Program output: -80.5506083936
Correct output: 41.7915986532  | Program output: 41.7915986532 
Correct output: -6.9439752137  | Program output: -6.9439752137 
Correct output: 58.5604070006  | Program output: 58.5604070006 
Correct output: -105.4717093128 | Program output: -105.4717093128
Correct output: -65.3737650023 | Program output: -65.3737650023
Correct output: 80.422971733   | Program output: 80.422971733  
Correct output: -36.4331405664 | Program output: -36.4331405664
Correct output: 49.2855176563  | Program output: 49.2855176563 
Correct output: 5.2530048743   | Program output: 5.2530048743  
Correct output: -14.5307262538 | Program output: -14.5307262538
Correct output: 174.8425999229 | Program output: 174.8425999229
Correct output: 94.2858027683  | Program output: 94.2858027683 
Correct output: -32.1580651662 | Program output: -32.1580651662
Correct output: 34.2563324554  | Program output: 34.2563324554 
Correct output: -34.3108385906 | Program output: -34.3108385906
Correct output: -25.5420796562 | Program output: -25.5420796562
Correct output: 40.5609747923  | Program output: 40.5609747923 
Correct output: -146.3905253753 | Program output: -146.3905253753
Correct output: 125.2745939078 | Program output: 125.2745939078
;;******************************
