Command line args: clojush.problems.software.number-io :parent-selection :tournament :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
epigenetic-markers = []
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :tournament
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
report-simplifications = 0
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [[87.56099788351293 56] 143.56099788351293]
Train Case:   1 | Input/Output: [[-47.20162877099021 -94] -141.20162877099023]
Train Case:   2 | Input/Output: [[13.384481346087739 10] 23.38448134608774]
Train Case:   3 | Input/Output: [[-7.618133742519987 99] 91.38186625748001]
Train Case:   4 | Input/Output: [[29.099128749949216 -23] 6.099128749949216]
Train Case:   5 | Input/Output: [[15.607886572317867 75] 90.60788657231787]
Train Case:   6 | Input/Output: [[-71.35584960644381 55] -16.35584960644381]
Train Case:   7 | Input/Output: [[5.232005880688433 80] 85.23200588068843]
Train Case:   8 | Input/Output: [[27.29195098380393 -56] -28.70804901619607]
Train Case:   9 | Input/Output: [[-58.484482746569455 48] -10.484482746569455]
Train Case:  10 | Input/Output: [[21.59192739499609 -81] -59.40807260500391]
Train Case:  11 | Input/Output: [[44.12284026240226 15] 59.12284026240226]
Train Case:  12 | Input/Output: [[-35.199800281615936 -97] -132.19980028161592]
Train Case:  13 | Input/Output: [[-74.99493204780272 -54] -128.9949320478027]
Train Case:  14 | Input/Output: [[-38.0962956201891 -40] -78.0962956201891]
Train Case:  15 | Input/Output: [[40.08064835104773 -76] -35.91935164895227]
Train Case:  16 | Input/Output: [[-19.040031169447346 -37] -56.040031169447346]
Train Case:  17 | Input/Output: [[93.43024816066679 44] 137.4302481606668]
Train Case:  18 | Input/Output: [[-9.227227347837342 42] 32.77277265216266]
Train Case:  19 | Input/Output: [[-99.64975615608095 73] -26.649756156080954]
Train Case:  20 | Input/Output: [[91.39271169959412 4] 95.39271169959412]
Train Case:  21 | Input/Output: [[30.11932546049266 -96] -65.88067453950734]
Train Case:  22 | Input/Output: [[35.78392855345692 13] 48.78392855345692]
Train Case:  23 | Input/Output: [[82.73508632110534 94] 176.73508632110534]
Train Case:  24 | Input/Output: [[-77.97103921146157 -10] -87.97103921146157]
Test Case:   0 | Input/Output: [[-71.36436383641443 81] 9.635636163585573]
Test Case:   1 | Input/Output: [[-73.71464677123613 -99] -172.71464677123612]
Test Case:   2 | Input/Output: [[-11.726674349603883 21] 9.273325650396117]
Test Case:   3 | Input/Output: [[11.737522739336285 12] 23.737522739336285]
Test Case:   4 | Input/Output: [[-50.11625234078652 99] 48.88374765921348]
Test Case:   5 | Input/Output: [[-19.887910575640234 -5] -24.887910575640234]
Test Case:   6 | Input/Output: [[-67.15005636396465 -57] -124.15005636396465]
Test Case:   7 | Input/Output: [[12.74609360778787 -13] -0.25390639221213007]
Test Case:   8 | Input/Output: [[-8.517904290417633 67] 58.48209570958237]
Test Case:   9 | Input/Output: [[39.74429802660251 -46] -6.255701973397493]
Test Case:  10 | Input/Output: [[-77.00950753703724 -74] -151.00950753703722]
Test Case:  11 | Input/Output: [[-14.890384248270223 -82] -96.89038424827022]
Test Case:  12 | Input/Output: [[63.56942055568865 -75] -11.430579444311348]
Test Case:  13 | Input/Output: [[67.58281343394842 -55] 12.582813433948417]
Test Case:  14 | Input/Output: [[68.42858628989097 57] 125.42858628989097]
Test Case:  15 | Input/Output: [[81.9178140421885 -93] -11.082185957811504]
Test Case:  16 | Input/Output: [[53.49120940019429 -5] 48.49120940019429]
Test Case:  17 | Input/Output: [[81.69062958933384 53] 134.69062958933384]
Test Case:  18 | Input/Output: [[5.75282720527737 0] 5.75282720527737]
Test Case:  19 | Input/Output: [[-90.35899925547481 98] 7.641000744525186]
Test Case:  20 | Input/Output: [[-79.10496588230968 2] -77.10496588230968]
Test Case:  21 | Input/Output: [[10.583027287443088 22] 32.58302728744309]
Test Case:  22 | Input/Output: [[-23.31879839940403 -69] -92.31879839940403]
Test Case:  23 | Input/Output: [[3.5260529652388044 72] 75.5260529652388]
Test Case:  24 | Input/Output: [[64.06528307379452 -60] 4.065283073794518]
Test Case:  25 | Input/Output: [[81.61180142854107 41] 122.61180142854107]
Test Case:  26 | Input/Output: [[77.03401811237904 100] 177.03401811237904]
Test Case:  27 | Input/Output: [[-58.302742797317045 -45] -103.30274279731705]
Test Case:  28 | Input/Output: [[44.203762434524236 -60] -15.796237565475764]
Test Case:  29 | Input/Output: [[-20.8263758232859 2] -18.8263758232859]
Test Case:  30 | Input/Output: [[12.787932626751925 -84] -71.21206737324808]
Test Case:  31 | Input/Output: [[38.74589766345184 10] 48.74589766345184]
Test Case:  32 | Input/Output: [[-4.125456951139213 25] 20.874543048860787]
Test Case:  33 | Input/Output: [[9.643239272929051 -39] -29.35676072707095]
Test Case:  34 | Input/Output: [[97.4934898348562 87] 184.4934898348562]
Test Case:  35 | Input/Output: [[35.49929562719035 85] 120.49929562719035]
Test Case:  36 | Input/Output: [[-76.15709321761743 54] -22.15709321761743]
Test Case:  37 | Input/Output: [[97.97802384904566 12] 109.97802384904566]
Test Case:  38 | Input/Output: [[65.17405915008936 95] 160.17405915008936]
Test Case:  39 | Input/Output: [[94.46529196835866 62] 156.46529196835866]
Test Case:  40 | Input/Output: [[-38.481224502734214 18] -20.481224502734214]
Test Case:  41 | Input/Output: [[7.167077877039233 80] 87.16707787703923]
Test Case:  42 | Input/Output: [[-16.41493589799809 86] 69.58506410200191]
Test Case:  43 | Input/Output: [[-88.71826898068038 -28] -116.71826898068038]
Test Case:  44 | Input/Output: [[61.23532944178501 -31] 30.235329441785012]
Test Case:  45 | Input/Output: [[38.27725533127304 79] 117.27725533127304]
Test Case:  46 | Input/Output: [[1.941775260276657 34] 35.94177526027666]
Test Case:  47 | Input/Output: [[-72.78996864568418 35] -37.78996864568418]
Test Case:  48 | Input/Output: [[65.88921615337372 -73] -7.110783846626276]
Test Case:  49 | Input/Output: [[45.68319175823035 64] 109.68319175823035]
Test Case:  50 | Input/Output: [[96.86113196153883 -2] 94.86113196153883]
Test Case:  51 | Input/Output: [[60.685536208888806 82] 142.6855362088888]
Test Case:  52 | Input/Output: [[91.94132688669572 75] 166.94132688669572]
Test Case:  53 | Input/Output: [[50.85198511447081 99] 149.8519851144708]
Test Case:  54 | Input/Output: [[-44.75523172583675 -36] -80.75523172583675]
Test Case:  55 | Input/Output: [[73.45623402481664 21] 94.45623402481664]
Test Case:  56 | Input/Output: [[32.241354706101646 -93] -60.758645293898354]
Test Case:  57 | Input/Output: [[5.571008851920482 29] 34.57100885192048]
Test Case:  58 | Input/Output: [[20.232165655555434 100] 120.23216565555543]
Test Case:  59 | Input/Output: [[42.22469212319169 63] 105.22469212319169]
Test Case:  60 | Input/Output: [[-1.3466987946411138 68] 66.65330120535889]
Test Case:  61 | Input/Output: [[-20.764315426928007 62] 41.23568457307199]
Test Case:  62 | Input/Output: [[-27.343513823868037 8] -19.343513823868037]
Test Case:  63 | Input/Output: [[28.840468597126375 24] 52.840468597126375]
Test Case:  64 | Input/Output: [[-46.49820383171954 -16] -62.49820383171954]
Test Case:  65 | Input/Output: [[3.3840290261726267 9] 12.384029026172627]
Test Case:  66 | Input/Output: [[22.821553880347594 -87] -64.1784461196524]
Test Case:  67 | Input/Output: [[80.04495805496686 -42] 38.044958054966855]
Test Case:  68 | Input/Output: [[39.68927661467251 -11] 28.689276614672508]
Test Case:  69 | Input/Output: [[-87.60392458934847 96] 8.396075410651534]
Test Case:  70 | Input/Output: [[-3.7191613841319793 68] 64.28083861586802]
Test Case:  71 | Input/Output: [[5.755065741646547 80] 85.75506574164655]
Test Case:  72 | Input/Output: [[11.516674773177527 56] 67.51667477317753]
Test Case:  73 | Input/Output: [[80.38999977634953 44] 124.38999977634953]
Test Case:  74 | Input/Output: [[55.46177109307166 2] 57.46177109307166]
Test Case:  75 | Input/Output: [[41.04921427675862 -32] 9.049214276758619]
Test Case:  76 | Input/Output: [[-4.994124976523224 86] 81.00587502347678]
Test Case:  77 | Input/Output: [[81.51356605669412 97] 178.51356605669412]
Test Case:  78 | Input/Output: [[-1.759667468169141 84] 82.24033253183086]
Test Case:  79 | Input/Output: [[-0.03139159996857188 39] 38.96860840003143]
Test Case:  80 | Input/Output: [[67.29125003290201 -84] -16.708749967097987]
Test Case:  81 | Input/Output: [[2.406414242685173 15] 17.406414242685173]
Test Case:  82 | Input/Output: [[-56.514354477573825 -65] -121.51435447757382]
Test Case:  83 | Input/Output: [[46.87442786869991 -35] 11.874427868699911]
Test Case:  84 | Input/Output: [[93.02975961006197 78] 171.02975961006197]
Test Case:  85 | Input/Output: [[70.05014047622154 16] 86.05014047622154]
Test Case:  86 | Input/Output: [[4.726508751824568 -92] -87.27349124817543]
Test Case:  87 | Input/Output: [[-16.85745974457693 -13] -29.85745974457693]
Test Case:  88 | Input/Output: [[-76.91962101457939 -54] -130.91962101457938]
Test Case:  89 | Input/Output: [[72.65533957569949 -47] 25.655339575699486]
Test Case:  90 | Input/Output: [[-20.957572744531447 12] -8.957572744531447]
Test Case:  91 | Input/Output: [[-99.64890052525284 -92] -191.64890052525283]
Test Case:  92 | Input/Output: [[9.366077688628337 -42] -32.63392231137166]
Test Case:  93 | Input/Output: [[93.0613882857368 -28] 65.0613882857368]
Test Case:  94 | Input/Output: [[-48.81874354534597 20] -28.818743545345967]
Test Case:  95 | Input/Output: [[96.35700475649293 -12] 84.35700475649293]
Test Case:  96 | Input/Output: [[-96.73999367891717 -61] -157.7399936789172]
Test Case:  97 | Input/Output: [[-32.94951535064159 -2] -34.94951535064159]
Test Case:  98 | Input/Output: [[-34.3375751034511 -17] -51.3375751034511]
Test Case:  99 | Input/Output: [[-88.39897401219883 28] -60.398974012198835]
Test Case: 100 | Input/Output: [[-48.084403655827465 -18] -66.08440365582746]
Test Case: 101 | Input/Output: [[65.99351810927521 -8] 57.993518109275215]
Test Case: 102 | Input/Output: [[43.896059312347575 -65] -21.103940687652425]
Test Case: 103 | Input/Output: [[86.08969740288089 59] 145.0896974028809]
Test Case: 104 | Input/Output: [[97.14706205453939 53] 150.1470620545394]
Test Case: 105 | Input/Output: [[37.37165826223338 42] 79.37165826223338]
Test Case: 106 | Input/Output: [[-48.46976095304563 89] 40.53023904695437]
Test Case: 107 | Input/Output: [[-85.92629782865289 51] -34.92629782865289]
Test Case: 108 | Input/Output: [[-60.403298626367665 54] -6.403298626367665]
Test Case: 109 | Input/Output: [[-25.56159640556237 -47] -72.56159640556237]
Test Case: 110 | Input/Output: [[41.63583432798339 -62] -20.36416567201661]
Test Case: 111 | Input/Output: [[-40.06920440116368 -72] -112.06920440116369]
Test Case: 112 | Input/Output: [[11.527198609170156 77] 88.52719860917016]
Test Case: 113 | Input/Output: [[-37.03835978077492 -90] -127.03835978077493]
Test Case: 114 | Input/Output: [[-39.301453492928 9] -30.301453492927998]
Test Case: 115 | Input/Output: [[-83.59644364551563 -28] -111.59644364551563]
Test Case: 116 | Input/Output: [[-94.22618758325498 73] -21.226187583254983]
Test Case: 117 | Input/Output: [[20.54151686377203 90] 110.54151686377203]
Test Case: 118 | Input/Output: [[75.85525286836551 -39] 36.85525286836551]
Test Case: 119 | Input/Output: [[-47.95389808020447 42] -5.953898080204468]
Test Case: 120 | Input/Output: [[-63.84964916513489 94] 30.150350834865108]
Test Case: 121 | Input/Output: [[-23.251817395827175 31] 7.7481826041728254]
Test Case: 122 | Input/Output: [[30.91688949123514 96] 126.91688949123514]
Test Case: 123 | Input/Output: [[-77.00764916305307 79] 1.992350836946926]
Test Case: 124 | Input/Output: [[-18.851311448643756 -11] -29.851311448643756]
Test Case: 125 | Input/Output: [[-6.934333813488379 71] 64.06566618651162]
Test Case: 126 | Input/Output: [[42.71883695181572 15] 57.71883695181572]
Test Case: 127 | Input/Output: [[-12.266988457779519 -29] -41.26698845777952]
Test Case: 128 | Input/Output: [[88.99105109435058 -8] 80.99105109435058]
Test Case: 129 | Input/Output: [[-42.09378564218604 -14] -56.09378564218604]
Test Case: 130 | Input/Output: [[-88.4937553249318 75] -13.493755324931797]
Test Case: 131 | Input/Output: [[-72.53896912570536 -98] -170.53896912570536]
Test Case: 132 | Input/Output: [[46.69107979132167 -80] -33.30892020867833]
Test Case: 133 | Input/Output: [[-72.22802057689788 2] -70.22802057689788]
Test Case: 134 | Input/Output: [[20.812507903170868 34] 54.81250790317087]
Test Case: 135 | Input/Output: [[60.46876183960228 42] 102.46876183960228]
Test Case: 136 | Input/Output: [[2.0821765030588466 -96] -93.91782349694115]
Test Case: 137 | Input/Output: [[-28.129250415974184 -49] -77.12925041597418]
Test Case: 138 | Input/Output: [[13.151300708498596 12] 25.151300708498596]
Test Case: 139 | Input/Output: [[18.940808266566762 -2] 16.940808266566762]
Test Case: 140 | Input/Output: [[17.037299148942537 -18] -0.9627008510574626]
Test Case: 141 | Input/Output: [[54.75221731540344 30] 84.75221731540344]
Test Case: 142 | Input/Output: [[-74.9393614412738 -53] -127.9393614412738]
Test Case: 143 | Input/Output: [[94.18754313247743 -82] 12.18754313247743]
Test Case: 144 | Input/Output: [[87.0454310613444 -71] 16.045431061344402]
Test Case: 145 | Input/Output: [[50.54533350906428 -99] -48.45466649093572]
Test Case: 146 | Input/Output: [[-24.511250688182983 -52] -76.51125068818298]
Test Case: 147 | Input/Output: [[74.9179309748016 21] 95.9179309748016]
Test Case: 148 | Input/Output: [[-44.470305688650825 -71] -115.47030568865083]
Test Case: 149 | Input/Output: [[70.07222257318216 -37] 33.07222257318216]
Test Case: 150 | Input/Output: [[-48.23129261356722 -15] -63.23129261356722]
Test Case: 151 | Input/Output: [[-26.608844190112578 84] 57.39115580988742]
Test Case: 152 | Input/Output: [[-8.985101811394387 -38] -46.98510181139439]
Test Case: 153 | Input/Output: [[41.663791037393935 48] 89.66379103739393]
Test Case: 154 | Input/Output: [[33.993924423292896 72] 105.9939244232929]
Test Case: 155 | Input/Output: [[-27.493165858338344 7] -20.493165858338344]
Test Case: 156 | Input/Output: [[-99.73998843665402 75] -24.739988436654016]
Test Case: 157 | Input/Output: [[74.62976355637875 67] 141.62976355637875]
Test Case: 158 | Input/Output: [[-7.2338872211219325 -3] -10.233887221121932]
Test Case: 159 | Input/Output: [[-34.598332783790624 73] 38.401667216209376]
Test Case: 160 | Input/Output: [[7.131406565759832 -93] -85.86859343424017]
Test Case: 161 | Input/Output: [[-35.42768353755939 -58] -93.42768353755939]
Test Case: 162 | Input/Output: [[-56.65107697342491 -84] -140.6510769734249]
Test Case: 163 | Input/Output: [[65.50936255177601 -88] -22.490637448223993]
Test Case: 164 | Input/Output: [[98.92042310766666 85] 183.92042310766666]
Test Case: 165 | Input/Output: [[67.41148140001451 -58] 9.411481400014509]
Test Case: 166 | Input/Output: [[-35.34372368775793 92] 56.65627631224207]
Test Case: 167 | Input/Output: [[11.439098386710938 -1] 10.439098386710938]
Test Case: 168 | Input/Output: [[-75.10592430396134 -34] -109.10592430396134]
Test Case: 169 | Input/Output: [[45.36834420638243 -12] 33.36834420638243]
Test Case: 170 | Input/Output: [[-3.128798635871661 84] 80.87120136412834]
Test Case: 171 | Input/Output: [[-62.593674150808035 80] 17.406325849191965]
Test Case: 172 | Input/Output: [[-29.085090607473035 -62] -91.08509060747303]
Test Case: 173 | Input/Output: [[33.97902053815707 -13] 20.979020538157073]
Test Case: 174 | Input/Output: [[95.07504605755017 -44] 51.07504605755017]
Test Case: 175 | Input/Output: [[26.720451759604074 97] 123.72045175960407]
Test Case: 176 | Input/Output: [[-48.290851208256 61] 12.709148791744]
Test Case: 177 | Input/Output: [[-82.6931552082998 21] -61.6931552082998]
Test Case: 178 | Input/Output: [[48.24078976873014 93] 141.24078976873014]
Test Case: 179 | Input/Output: [[-88.21972919052249 47] -41.219729190522486]
Test Case: 180 | Input/Output: [[-40.614563620371925 -27] -67.61456362037192]
Test Case: 181 | Input/Output: [[-65.29290098745656 -25] -90.29290098745656]
Test Case: 182 | Input/Output: [[-48.816069502534965 -89] -137.81606950253496]
Test Case: 183 | Input/Output: [[-26.90228606999763 -22] -48.90228606999763]
Test Case: 184 | Input/Output: [[64.52049615177006 -72] -7.479503848229939]
Test Case: 185 | Input/Output: [[25.829053074395716 -4] 21.829053074395716]
Test Case: 186 | Input/Output: [[77.3512937135277 15] 92.3512937135277]
Test Case: 187 | Input/Output: [[55.36428744789464 92] 147.36428744789464]
Test Case: 188 | Input/Output: [[4.399077168870733 33] 37.39907716887073]
Test Case: 189 | Input/Output: [[16.145901353385057 88] 104.14590135338506]
Test Case: 190 | Input/Output: [[-12.21881752911078 80] 67.78118247088922]
Test Case: 191 | Input/Output: [[5.51156361487935 -15] -9.48843638512065]
Test Case: 192 | Input/Output: [[60.31223852716113 70] 130.31223852716113]
Test Case: 193 | Input/Output: [[39.8690856371536 -41] -1.1309143628463971]
Test Case: 194 | Input/Output: [[98.51641512092087 25] 123.51641512092087]
Test Case: 195 | Input/Output: [[59.05795151873491 -33] 26.05795151873491]
Test Case: 196 | Input/Output: [[-42.91793984094432 48] 5.082060159055679]
Test Case: 197 | Input/Output: [[-6.746933674140905 39] 32.253066325859095]
Test Case: 198 | Input/Output: [[88.8080557443034 34] 122.8080557443034]
Test Case: 199 | Input/Output: [[-6.413867965770862 42] 35.58613203422914]
Test Case: 200 | Input/Output: [[-51.07377474840953 25] -26.073774748409527]
Test Case: 201 | Input/Output: [[-98.50215543813852 -55] -153.50215543813852]
Test Case: 202 | Input/Output: [[-33.40305280884199 75] 41.59694719115801]
Test Case: 203 | Input/Output: [[-90.34897836637046 -95] -185.34897836637046]
Test Case: 204 | Input/Output: [[-11.942437163249139 65] 53.05756283675086]
Test Case: 205 | Input/Output: [[-10.816047003470388 -58] -68.81604700347039]
Test Case: 206 | Input/Output: [[-5.197874283215583 -87] -92.19787428321558]
Test Case: 207 | Input/Output: [[-42.18203930214373 -44] -86.18203930214372]
Test Case: 208 | Input/Output: [[-66.93855621606758 22] -44.93855621606758]
Test Case: 209 | Input/Output: [[-48.16328438462711 -53] -101.1632843846271]
Test Case: 210 | Input/Output: [[-22.4985164080274 -11] -33.4985164080274]
Test Case: 211 | Input/Output: [[32.593058125425586 -63] -30.406941874574414]
Test Case: 212 | Input/Output: [[46.68463609489439 9] 55.68463609489439]
Test Case: 213 | Input/Output: [[-28.92166257536377 -30] -58.92166257536377]
Test Case: 214 | Input/Output: [[29.56535756067649 -6] 23.56535756067649]
Test Case: 215 | Input/Output: [[-57.13806913711635 39] -18.138069137116346]
Test Case: 216 | Input/Output: [[-21.667327286371062 -93] -114.66732728637106]
Test Case: 217 | Input/Output: [[61.300704314513126 -98] -36.699295685486874]
Test Case: 218 | Input/Output: [[87.28810781671726 88] 175.28810781671726]
Test Case: 219 | Input/Output: [[47.23201774346646 59] 106.23201774346646]
Test Case: 220 | Input/Output: [[-16.375164735476687 90] 73.62483526452331]
Test Case: 221 | Input/Output: [[33.632288414876655 -68] -34.367711585123345]
Test Case: 222 | Input/Output: [[-68.46566897565303 43] -25.46566897565303]
Test Case: 223 | Input/Output: [[6.806193143627553 -6] 0.8061931436275529]
Test Case: 224 | Input/Output: [[-33.66613400003102 -96] -129.66613400003104]
Test Case: 225 | Input/Output: [[21.84754310147123 -81] -59.15245689852877]
Test Case: 226 | Input/Output: [[74.41255975408149 80] 154.41255975408149]
Test Case: 227 | Input/Output: [[-5.70428424635891 11] 5.29571575364109]
Test Case: 228 | Input/Output: [[-73.805402058728 29] -44.805402058728006]
Test Case: 229 | Input/Output: [[48.35939304143943 -72] -23.640606958560568]
Test Case: 230 | Input/Output: [[-74.66150358583717 39] -35.66150358583717]
Test Case: 231 | Input/Output: [[-57.71167788595577 -62] -119.71167788595577]
Test Case: 232 | Input/Output: [[-28.74343448919359 57] 28.25656551080641]
Test Case: 233 | Input/Output: [[14.648542527980382 34] 48.64854252798038]
Test Case: 234 | Input/Output: [[-88.95147125838764 87] -1.9514712583876417]
Test Case: 235 | Input/Output: [[-26.305971204885424 -68] -94.30597120488542]
Test Case: 236 | Input/Output: [[33.16732145074633 -36] -2.8326785492536715]
Test Case: 237 | Input/Output: [[-44.45559137863286 0] -44.45559137863286]
Test Case: 238 | Input/Output: [[-51.822043860223175 47] -4.822043860223175]
Test Case: 239 | Input/Output: [[27.28618784407422 50] 77.28618784407422]
Test Case: 240 | Input/Output: [[-12.210241026610518 58] 45.78975897338948]
Test Case: 241 | Input/Output: [[-25.933517949100462 -15] -40.93351794910046]
Test Case: 242 | Input/Output: [[73.75512627414679 54] 127.75512627414679]
Test Case: 243 | Input/Output: [[-97.60606601618261 50] -47.60606601618261]
Test Case: 244 | Input/Output: [[27.438009784709422 7] 34.43800978470942]
Test Case: 245 | Input/Output: [[-70.1913680056385 54] -16.191368005638495]
Test Case: 246 | Input/Output: [[-3.427429474816421 64] 60.57257052518358]
Test Case: 247 | Input/Output: [[30.53434912885382 47] 77.53434912885382]
Test Case: 248 | Input/Output: [[-58.603168281110165 18] -40.603168281110165]
Test Case: 249 | Input/Output: [[-52.86529572249019 -28] -80.86529572249019]
Test Case: 250 | Input/Output: [[73.21443439804233 -7] 66.21443439804233]
Test Case: 251 | Input/Output: [[9.203209400623763 12] 21.203209400623763]
Test Case: 252 | Input/Output: [[-10.191511323958153 43] 32.80848867604185]
Test Case: 253 | Input/Output: [[-82.10663892893334 -28] -110.10663892893334]
Test Case: 254 | Input/Output: [[-59.39529490725193 57] -2.3952949072519303]
Test Case: 255 | Input/Output: [[17.853585224622904 24] 41.853585224622904]
Test Case: 256 | Input/Output: [[-71.79082765287129 -9] -80.79082765287129]
Test Case: 257 | Input/Output: [[-66.29454078370189 -58] -124.29454078370189]
Test Case: 258 | Input/Output: [[-47.23650857178454 66] 18.76349142821546]
Test Case: 259 | Input/Output: [[25.98945285082725 -26] -0.010547149172751347]
Test Case: 260 | Input/Output: [[-33.21974163850345 68] 34.78025836149655]
Test Case: 261 | Input/Output: [[-96.7543926209069 39] -57.7543926209069]
Test Case: 262 | Input/Output: [[-70.55282021938159 -58] -128.5528202193816]
Test Case: 263 | Input/Output: [[91.75226320214858 -31] 60.75226320214858]
Test Case: 264 | Input/Output: [[-28.07810940532478 -54] -82.07810940532478]
Test Case: 265 | Input/Output: [[-81.455980465059 65] -16.455980465059]
Test Case: 266 | Input/Output: [[-23.683152533429094 15] -8.683152533429094]
Test Case: 267 | Input/Output: [[-88.49273961616714 41] -47.49273961616714]
Test Case: 268 | Input/Output: [[-98.52652589196327 62] -36.526525891963274]
Test Case: 269 | Input/Output: [[-96.51289574472656 -99] -195.51289574472656]
Test Case: 270 | Input/Output: [[14.421082911588172 36] 50.42108291158817]
Test Case: 271 | Input/Output: [[93.87249684435409 -5] 88.87249684435409]
Test Case: 272 | Input/Output: [[-50.83107454532669 77] 26.168925454673307]
Test Case: 273 | Input/Output: [[-30.847986813140622 39] 8.152013186859378]
Test Case: 274 | Input/Output: [[-4.922391625988894 26] 21.077608374011106]
Test Case: 275 | Input/Output: [[8.316148580377686 59] 67.31614858037769]
Test Case: 276 | Input/Output: [[81.84176324913557 -11] 70.84176324913557]
Test Case: 277 | Input/Output: [[9.682493671555108 -44] -34.31750632844489]
Test Case: 278 | Input/Output: [[32.2673857825086 -16] 16.267385782508597]
Test Case: 279 | Input/Output: [[46.952701407822076 50] 96.95270140782208]
Test Case: 280 | Input/Output: [[83.78835794330709 -8] 75.78835794330709]
Test Case: 281 | Input/Output: [[-45.28770791231083 99] 53.71229208768917]
Test Case: 282 | Input/Output: [[72.14235260293842 88] 160.14235260293842]
Test Case: 283 | Input/Output: [[7.177129699032122 63] 70.17712969903212]
Test Case: 284 | Input/Output: [[87.5994535216052 5] 92.5994535216052]
Test Case: 285 | Input/Output: [[-4.148907853715983 -1] -5.148907853715983]
Test Case: 286 | Input/Output: [[-36.19771540929555 16] -20.197715409295547]
Test Case: 287 | Input/Output: [[93.95841264112889 99] 192.9584126411289]
Test Case: 288 | Input/Output: [[-2.9596002341344416 25] 22.04039976586556]
Test Case: 289 | Input/Output: [[-30.818756033774577 88] 57.18124396622542]
Test Case: 290 | Input/Output: [[-10.881339068700967 90] 79.11866093129903]
Test Case: 291 | Input/Output: [[7.9950029025261955 89] 96.9950029025262]
Test Case: 292 | Input/Output: [[83.22706506790348 -23] 60.22706506790348]
Test Case: 293 | Input/Output: [[56.9123700089892 80] 136.9123700089892]
Test Case: 294 | Input/Output: [[72.8204016973819 -38] 34.8204016973819]
Test Case: 295 | Input/Output: [[-22.66335097392303 -91] -113.66335097392303]
Test Case: 296 | Input/Output: [[-69.81143079179397 30] -39.81143079179397]
Test Case: 297 | Input/Output: [[-72.11200973678665 -66] -138.11200973678666]
Test Case: 298 | Input/Output: [[95.17666353388708 29] 124.17666353388708]
Test Case: 299 | Input/Output: [[-25.50392805766748 52] 26.49607194233252]
Test Case: 300 | Input/Output: [[-58.24402627908161 45] -13.24402627908161]
Test Case: 301 | Input/Output: [[57.14667668717027 -43] 14.14667668717027]
Test Case: 302 | Input/Output: [[-81.61020159119374 54] -27.610201591193743]
Test Case: 303 | Input/Output: [[56.01357923905198 -32] 24.013579239051978]
Test Case: 304 | Input/Output: [[68.22149853729525 44] 112.22149853729525]
Test Case: 305 | Input/Output: [[-8.446509441786915 48] 39.553490558213085]
Test Case: 306 | Input/Output: [[40.77990202833607 -25] 15.779902028336068]
Test Case: 307 | Input/Output: [[-36.4718279907686 -54] -90.4718279907686]
Test Case: 308 | Input/Output: [[97.23361392893389 -15] 82.23361392893389]
Test Case: 309 | Input/Output: [[38.434719417784805 -32] 6.434719417784805]
Test Case: 310 | Input/Output: [[60.78092870234505 57] 117.78092870234505]
Test Case: 311 | Input/Output: [[14.43150171618997 -8] 6.43150171618997]
Test Case: 312 | Input/Output: [[-87.20997752846635 72] -15.209977528466354]
Test Case: 313 | Input/Output: [[-37.61465591673976 -9] -46.61465591673976]
Test Case: 314 | Input/Output: [[84.92751554811514 57] 141.92751554811514]
Test Case: 315 | Input/Output: [[-96.52836395504221 57] -39.52836395504221]
Test Case: 316 | Input/Output: [[-77.34753563546468 -33] -110.34753563546468]
Test Case: 317 | Input/Output: [[52.883041555759945 -91] -38.116958444240055]
Test Case: 318 | Input/Output: [[-29.82664047119674 7] -22.82664047119674]
Test Case: 319 | Input/Output: [[-47.69563821544931 -14] -61.69563821544931]
Test Case: 320 | Input/Output: [[-0.7320632044622357 -38] -38.732063204462236]
Test Case: 321 | Input/Output: [[70.02451287670436 -92] -21.975487123295636]
Test Case: 322 | Input/Output: [[-82.41916400048441 32] -50.419164000484415]
Test Case: 323 | Input/Output: [[-7.059984305660109 67] 59.94001569433989]
Test Case: 324 | Input/Output: [[42.94841898734404 59] 101.94841898734404]
Test Case: 325 | Input/Output: [[-23.71938598812828 35] 11.28061401187172]
Test Case: 326 | Input/Output: [[-61.4953028660139 -87] -148.4953028660139]
Test Case: 327 | Input/Output: [[33.53508928147818 80] 113.53508928147818]
Test Case: 328 | Input/Output: [[78.20430682881707 -21] 57.20430682881707]
Test Case: 329 | Input/Output: [[17.094082644281315 -5] 12.094082644281315]
Test Case: 330 | Input/Output: [[80.62778568812396 -65] 15.627785688123964]
Test Case: 331 | Input/Output: [[10.390371238572556 86] 96.39037123857256]
Test Case: 332 | Input/Output: [[-85.62081991309394 76] -9.62081991309394]
Test Case: 333 | Input/Output: [[73.26482318794706 91] 164.26482318794706]
Test Case: 334 | Input/Output: [[25.97573521494813 91] 116.97573521494813]
Test Case: 335 | Input/Output: [[-34.28440258698184 34] -0.28440258698184095]
Test Case: 336 | Input/Output: [[93.05530195822277 -58] 35.05530195822277]
Test Case: 337 | Input/Output: [[-45.581144913588375 -91] -136.5811449135884]
Test Case: 338 | Input/Output: [[2.381195257602002 -83] -80.618804742398]
Test Case: 339 | Input/Output: [[22.93185458040425 -42] -19.06814541959575]
Test Case: 340 | Input/Output: [[-26.89737791988003 -100] -126.89737791988003]
Test Case: 341 | Input/Output: [[76.86955064256335 -12] 64.86955064256335]
Test Case: 342 | Input/Output: [[-92.93140090328826 23] -69.93140090328826]
Test Case: 343 | Input/Output: [[-69.41038979147046 27] -42.410389791470465]
Test Case: 344 | Input/Output: [[32.82334989257575 -3] 29.82334989257575]
Test Case: 345 | Input/Output: [[-55.47495771105233 -36] -91.47495771105233]
Test Case: 346 | Input/Output: [[-37.01361014025664 -6] -43.01361014025664]
Test Case: 347 | Input/Output: [[-2.660127631432914 -23] -25.660127631432914]
Test Case: 348 | Input/Output: [[91.05550457408276 51] 142.05550457408276]
Test Case: 349 | Input/Output: [[-28.187241082788034 -8] -36.187241082788034]
Test Case: 350 | Input/Output: [[38.1418430703078 52] 90.1418430703078]
Test Case: 351 | Input/Output: [[-73.66684156371667 -97] -170.66684156371667]
Test Case: 352 | Input/Output: [[-86.30150016599838 86] -0.3015001659983767]
Test Case: 353 | Input/Output: [[-2.4478391963512536 -52] -54.447839196351254]
Test Case: 354 | Input/Output: [[-72.5639127484837 -26] -98.5639127484837]
Test Case: 355 | Input/Output: [[-38.18280476337426 -17] -55.18280476337426]
Test Case: 356 | Input/Output: [[37.51365990762088 33] 70.51365990762088]
Test Case: 357 | Input/Output: [[-93.64002734559924 48] -45.640027345599236]
Test Case: 358 | Input/Output: [[88.45939618940264 11] 99.45939618940264]
Test Case: 359 | Input/Output: [[-71.80303904914449 25] -46.80303904914449]
Test Case: 360 | Input/Output: [[65.31861109056334 6] 71.31861109056334]
Test Case: 361 | Input/Output: [[-36.96952478062441 19] -17.96952478062441]
Test Case: 362 | Input/Output: [[-85.74849048411448 -42] -127.74849048411448]
Test Case: 363 | Input/Output: [[41.78399843728624 21] 62.78399843728624]
Test Case: 364 | Input/Output: [[39.28779869115826 85] 124.28779869115826]
Test Case: 365 | Input/Output: [[-7.69319527577899 17] 9.30680472422101]
Test Case: 366 | Input/Output: [[-94.4821367464096 4] -90.4821367464096]
Test Case: 367 | Input/Output: [[-54.15005857565984 -76] -130.15005857565984]
Test Case: 368 | Input/Output: [[47.0577350260792 -90] -42.9422649739208]
Test Case: 369 | Input/Output: [[-24.54939505808808 62] 37.45060494191192]
Test Case: 370 | Input/Output: [[-70.74449587391459 47] -23.744495873914587]
Test Case: 371 | Input/Output: [[36.55353519107891 92] 128.5535351910789]
Test Case: 372 | Input/Output: [[42.08311750534938 77] 119.08311750534938]
Test Case: 373 | Input/Output: [[87.05006968551663 50] 137.05006968551663]
Test Case: 374 | Input/Output: [[57.557014436782424 -2] 55.557014436782424]
Test Case: 375 | Input/Output: [[-32.013662515570445 93] 60.986337484429555]
Test Case: 376 | Input/Output: [[-44.32701892018971 -19] -63.32701892018971]
Test Case: 377 | Input/Output: [[65.09060071894672 -79] -13.909399281053282]
Test Case: 378 | Input/Output: [[30.70774498981436 -32] -1.2922550101856416]
Test Case: 379 | Input/Output: [[-56.529140852240744 -100] -156.52914085224074]
Test Case: 380 | Input/Output: [[-93.60289530007763 48] -45.602895300077634]
Test Case: 381 | Input/Output: [[66.38163114514273 79] 145.38163114514273]
Test Case: 382 | Input/Output: [[63.69803469886895 -29] 34.69803469886895]
Test Case: 383 | Input/Output: [[83.94033607177343 18] 101.94033607177343]
Test Case: 384 | Input/Output: [[22.66942065730069 86] 108.66942065730069]
Test Case: 385 | Input/Output: [[-96.81648140027438 -99] -195.81648140027437]
Test Case: 386 | Input/Output: [[3.247148291017183 -6] -2.752851708982817]
Test Case: 387 | Input/Output: [[45.66803239446111 98] 143.6680323944611]
Test Case: 388 | Input/Output: [[85.14783312378796 -76] 9.147833123787962]
Test Case: 389 | Input/Output: [[-23.22480693020144 -4] -27.22480693020144]
Test Case: 390 | Input/Output: [[80.49450547592463 93] 173.49450547592463]
Test Case: 391 | Input/Output: [[88.01323341823331 98] 186.0132334182333]
Test Case: 392 | Input/Output: [[-23.895480225406047 50] 26.104519774593953]
Test Case: 393 | Input/Output: [[98.86679046410202 -21] 77.86679046410202]
Test Case: 394 | Input/Output: [[92.12319180582111 39] 131.1231918058211]
Test Case: 395 | Input/Output: [[-4.040924644542599 50] 45.9590753554574]
Test Case: 396 | Input/Output: [[27.23601908477535 -84] -56.76398091522465]
Test Case: 397 | Input/Output: [[55.00876771620909 3] 58.00876771620909]
Test Case: 398 | Input/Output: [[3.645565501618492 -41] -37.35443449838151]
Test Case: 399 | Input/Output: [[58.02319941126132 -91] -32.97680058873868]
Test Case: 400 | Input/Output: [[53.28561373610384 -51] 2.2856137361038407]
Test Case: 401 | Input/Output: [[53.24126510869539 30] 83.24126510869539]
Test Case: 402 | Input/Output: [[-28.641304612047975 23] -5.641304612047975]
Test Case: 403 | Input/Output: [[30.914764431878808 -72] -41.08523556812119]
Test Case: 404 | Input/Output: [[-23.19943984831039 -76] -99.19943984831039]
Test Case: 405 | Input/Output: [[44.56848328219107 37] 81.56848328219107]
Test Case: 406 | Input/Output: [[-77.0216504525945 95] 17.9783495474055]
Test Case: 407 | Input/Output: [[21.125544948061602 -69] -47.8744550519384]
Test Case: 408 | Input/Output: [[69.72005291599703 -26] 43.72005291599703]
Test Case: 409 | Input/Output: [[90.94502566267909 -70] 20.945025662679086]
Test Case: 410 | Input/Output: [[43.91395346841887 57] 100.91395346841887]
Test Case: 411 | Input/Output: [[67.59766151790029 -58] 9.597661517900292]
Test Case: 412 | Input/Output: [[64.3947840649156 64] 128.3947840649156]
Test Case: 413 | Input/Output: [[41.68721870260936 21] 62.68721870260936]
Test Case: 414 | Input/Output: [[-97.6780476077372 -29] -126.6780476077372]
Test Case: 415 | Input/Output: [[-64.77892136400718 21] -43.778921364007175]
Test Case: 416 | Input/Output: [[-21.09784484083781 -20] -41.09784484083781]
Test Case: 417 | Input/Output: [[97.93208890059765 0] 97.93208890059765]
Test Case: 418 | Input/Output: [[-83.80797881578201 -89] -172.807978815782]
Test Case: 419 | Input/Output: [[64.837042532026 3] 67.837042532026]
Test Case: 420 | Input/Output: [[-59.731408576743036 -51] -110.73140857674304]
Test Case: 421 | Input/Output: [[-42.25306962204329 -93] -135.25306962204328]
Test Case: 422 | Input/Output: [[42.67555480871158 -66] -23.32444519128842]
Test Case: 423 | Input/Output: [[-77.15743773850159 -75] -152.15743773850159]
Test Case: 424 | Input/Output: [[72.02199414017144 68] 140.02199414017144]
Test Case: 425 | Input/Output: [[-90.60893035765949 43] -47.60893035765949]
Test Case: 426 | Input/Output: [[-11.29974517029369 60] 48.70025482970631]
Test Case: 427 | Input/Output: [[-7.2113857573259565 11] 3.7886142426740435]
Test Case: 428 | Input/Output: [[50.98069736317743 33] 83.98069736317743]
Test Case: 429 | Input/Output: [[-38.294271069521415 -55] -93.29427106952141]
Test Case: 430 | Input/Output: [[35.930786395870825 67] 102.93078639587083]
Test Case: 431 | Input/Output: [[83.91726510978535 59] 142.91726510978535]
Test Case: 432 | Input/Output: [[2.359685594900924 66] 68.35968559490092]
Test Case: 433 | Input/Output: [[-42.10184273560855 36] -6.10184273560855]
Test Case: 434 | Input/Output: [[64.5496181161603 97] 161.5496181161603]
Test Case: 435 | Input/Output: [[91.20634780704046 62] 153.20634780704046]
Test Case: 436 | Input/Output: [[-59.65272257743983 -59] -118.65272257743983]
Test Case: 437 | Input/Output: [[-31.534474777829672 98] 66.46552522217033]
Test Case: 438 | Input/Output: [[-72.44713541756704 -85] -157.44713541756704]
Test Case: 439 | Input/Output: [[-62.03245104649105 -25] -87.03245104649105]
Test Case: 440 | Input/Output: [[90.06742131336034 38] 128.06742131336034]
Test Case: 441 | Input/Output: [[-52.00779915110145 -66] -118.00779915110145]
Test Case: 442 | Input/Output: [[-7.813829825144111 -2] -9.813829825144111]
Test Case: 443 | Input/Output: [[35.91924461138612 23] 58.91924461138612]
Test Case: 444 | Input/Output: [[28.433922158631674 -89] -60.566077841368326]
Test Case: 445 | Input/Output: [[-28.385675501847544 -12] -40.385675501847544]
Test Case: 446 | Input/Output: [[-21.427595880432392 88] 66.57240411956761]
Test Case: 447 | Input/Output: [[-98.74539373124757 37] -61.745393731247574]
Test Case: 448 | Input/Output: [[-28.07642099894676 5] -23.07642099894676]
Test Case: 449 | Input/Output: [[-57.45368611013586 92] 34.54631388986414]
Test Case: 450 | Input/Output: [[94.67207458038646 55] 149.67207458038646]
Test Case: 451 | Input/Output: [[41.65817042061224 -85] -43.34182957938776]
Test Case: 452 | Input/Output: [[-45.002846976651625 90] 44.997153023348375]
Test Case: 453 | Input/Output: [[78.6001451737533 -74] 4.600145173753305]
Test Case: 454 | Input/Output: [[-77.30477923089609 -14] -91.30477923089609]
Test Case: 455 | Input/Output: [[-20.725601192309995 -35] -55.725601192309995]
Test Case: 456 | Input/Output: [[-56.78566169261898 -49] -105.78566169261899]
Test Case: 457 | Input/Output: [[19.23982288992363 -8] 11.23982288992363]
Test Case: 458 | Input/Output: [[-90.1899916965059 8] -82.1899916965059]
Test Case: 459 | Input/Output: [[32.752159704377306 -85] -52.247840295622694]
Test Case: 460 | Input/Output: [[20.405161057723433 22] 42.40516105772343]
Test Case: 461 | Input/Output: [[86.5032465274819 52] 138.5032465274819]
Test Case: 462 | Input/Output: [[30.8144527923983 85] 115.8144527923983]
Test Case: 463 | Input/Output: [[-89.59372287933203 6] -83.59372287933203]
Test Case: 464 | Input/Output: [[-55.15748231379334 6] -49.15748231379334]
Test Case: 465 | Input/Output: [[-56.99635918958184 41] -15.996359189581838]
Test Case: 466 | Input/Output: [[5.454048011630206 3] 8.454048011630206]
Test Case: 467 | Input/Output: [[-90.93210071672468 30] -60.932100716724676]
Test Case: 468 | Input/Output: [[-54.6727153441736 -27] -81.6727153441736]
Test Case: 469 | Input/Output: [[59.593322571920254 93] 152.59332257192025]
Test Case: 470 | Input/Output: [[12.834403159809725 -26] -13.165596840190275]
Test Case: 471 | Input/Output: [[23.8398150248496 81] 104.8398150248496]
Test Case: 472 | Input/Output: [[-85.94987826735255 88] 2.0501217326474546]
Test Case: 473 | Input/Output: [[99.23624076131986 -3] 96.23624076131986]
Test Case: 474 | Input/Output: [[88.66305616838443 21] 109.66305616838443]
Test Case: 475 | Input/Output: [[41.336142639202166 47] 88.33614263920217]
Test Case: 476 | Input/Output: [[-96.50766472656088 5] -91.50766472656088]
Test Case: 477 | Input/Output: [[39.341595600620565 80] 119.34159560062056]
Test Case: 478 | Input/Output: [[70.72183839130301 -99] -28.27816160869699]
Test Case: 479 | Input/Output: [[-54.12676978311537 97] 42.87323021688463]
Test Case: 480 | Input/Output: [[83.2818871057346 34] 117.2818871057346]
Test Case: 481 | Input/Output: [[27.133912234518505 27] 54.133912234518505]
Test Case: 482 | Input/Output: [[-98.85157750199257 -62] -160.85157750199255]
Test Case: 483 | Input/Output: [[-10.811654203762629 -10] -20.81165420376263]
Test Case: 484 | Input/Output: [[-47.278519446802704 38] -9.278519446802704]
Test Case: 485 | Input/Output: [[92.78209705480461 -93] -0.21790294519539088]
Test Case: 486 | Input/Output: [[-9.119022390227599 85] 75.8809776097724]
Test Case: 487 | Input/Output: [[-1.4260247713393284 48] 46.57397522866067]
Test Case: 488 | Input/Output: [[-39.84397167498188 -45] -84.84397167498187]
Test Case: 489 | Input/Output: [[-60.75982763516406 28] -32.75982763516406]
Test Case: 490 | Input/Output: [[-63.58221518374849 22] -41.58221518374849]
Test Case: 491 | Input/Output: [[-99.91390364602233 -4] -103.91390364602233]
Test Case: 492 | Input/Output: [[-68.07864582238112 90] 21.92135417761888]
Test Case: 493 | Input/Output: [[-21.259964429005507 28] 6.740035570994493]
Test Case: 494 | Input/Output: [[-50.90698304531838 71] 20.093016954681623]
Test Case: 495 | Input/Output: [[-81.00400979572464 -85] -166.00400979572464]
Test Case: 496 | Input/Output: [[62.74115790525914 57] 119.74115790525914]
Test Case: 497 | Input/Output: [[-24.89782477040407 -48] -72.89782477040407]
Test Case: 498 | Input/Output: [[-49.15684740002715 14] -35.15684740002715]
Test Case: 499 | Input/Output: [[-49.05405598120696 92] 42.94594401879304]
Test Case: 500 | Input/Output: [[-23.24579843681221 76] 52.75420156318779]
Test Case: 501 | Input/Output: [[-82.27403528033466 -87] -169.27403528033466]
Test Case: 502 | Input/Output: [[-55.961749255482744 94] 38.038250744517256]
Test Case: 503 | Input/Output: [[5.6456410630376155 -52] -46.354358936962385]
Test Case: 504 | Input/Output: [[20.062783208159615 1] 21.062783208159615]
Test Case: 505 | Input/Output: [[-76.82884021069556 -87] -163.82884021069555]
Test Case: 506 | Input/Output: [[-88.18877929603397 -25] -113.18877929603397]
Test Case: 507 | Input/Output: [[89.71042449450363 -56] 33.71042449450363]
Test Case: 508 | Input/Output: [[37.861589289519316 -81] -43.138410710480684]
Test Case: 509 | Input/Output: [[13.15208813676901 69] 82.15208813676901]
Test Case: 510 | Input/Output: [[62.4258258969482 -52] 10.425825896948197]
Test Case: 511 | Input/Output: [[24.77279129974137 -70] -45.22720870025863]
Test Case: 512 | Input/Output: [[51.003858681443006 -60] -8.996141318556994]
Test Case: 513 | Input/Output: [[-80.06434294644768 -84] -164.06434294644768]
Test Case: 514 | Input/Output: [[-28.412473617764647 49] 20.587526382235353]
Test Case: 515 | Input/Output: [[22.781063463527218 -88] -65.21893653647278]
Test Case: 516 | Input/Output: [[84.7425507243467 39] 123.7425507243467]
Test Case: 517 | Input/Output: [[-71.32421648850895 -59] -130.32421648850897]
Test Case: 518 | Input/Output: [[-2.214470875475925 17] 14.785529124524075]
Test Case: 519 | Input/Output: [[-90.12711577026826 9] -81.12711577026826]
Test Case: 520 | Input/Output: [[32.0401449445385 -26] 6.040144944538497]
Test Case: 521 | Input/Output: [[-92.58867076524946 63] -29.58867076524946]
Test Case: 522 | Input/Output: [[-41.258881114301225 -59] -100.25888111430123]
Test Case: 523 | Input/Output: [[-4.764664595331297 29] 24.235335404668703]
Test Case: 524 | Input/Output: [[22.52051235057175 -36] -13.47948764942825]
Test Case: 525 | Input/Output: [[20.7537459239239 59] 79.7537459239239]
Test Case: 526 | Input/Output: [[-96.35059127345565 81] -15.350591273455649]
Test Case: 527 | Input/Output: [[-84.35242147107866 4] -80.35242147107866]
Test Case: 528 | Input/Output: [[-79.23045530194895 50] -29.23045530194895]
Test Case: 529 | Input/Output: [[21.858470401318925 -22] -0.14152959868107473]
Test Case: 530 | Input/Output: [[70.81098714159631 -61] 9.810987141596314]
Test Case: 531 | Input/Output: [[-62.499049837790864 31] -31.499049837790864]
Test Case: 532 | Input/Output: [[27.21458926834856 14] 41.21458926834856]
Test Case: 533 | Input/Output: [[89.81064903817372 -49] 40.81064903817372]
Test Case: 534 | Input/Output: [[-98.38976877320822 52] -46.38976877320822]
Test Case: 535 | Input/Output: [[74.70943670497417 -88] -13.290563295025834]
Test Case: 536 | Input/Output: [[-27.314965824729697 90] 62.6850341752703]
Test Case: 537 | Input/Output: [[-69.6535505170619 10] -59.6535505170619]
Test Case: 538 | Input/Output: [[-47.68442808345279 -80] -127.68442808345279]
Test Case: 539 | Input/Output: [[-54.389527278215844 -6] -60.389527278215844]
Test Case: 540 | Input/Output: [[84.36195226870055 13] 97.36195226870055]
Test Case: 541 | Input/Output: [[-55.10768851291861 81] 25.892311487081393]
Test Case: 542 | Input/Output: [[-30.653578425670958 97] 66.34642157432904]
Test Case: 543 | Input/Output: [[17.059758181784844 83] 100.05975818178484]
Test Case: 544 | Input/Output: [[-69.84322807316978 0] -69.84322807316978]
Test Case: 545 | Input/Output: [[78.77375074653773 72] 150.77375074653773]
Test Case: 546 | Input/Output: [[38.264635949476514 61] 99.26463594947651]
Test Case: 547 | Input/Output: [[80.93399391855692 41] 121.93399391855692]
Test Case: 548 | Input/Output: [[-56.46814284499768 48] -8.46814284499768]
Test Case: 549 | Input/Output: [[30.669532455397842 0] 30.669532455397842]
Test Case: 550 | Input/Output: [[5.570950911083244 -86] -80.42904908891676]
Test Case: 551 | Input/Output: [[-7.222930039259239 26] 18.77706996074076]
Test Case: 552 | Input/Output: [[-28.422164233765287 45] 16.577835766234713]
Test Case: 553 | Input/Output: [[-77.90759778426606 -86] -163.90759778426604]
Test Case: 554 | Input/Output: [[8.264852581200444 -30] -21.735147418799556]
Test Case: 555 | Input/Output: [[25.9677958242913 7] 32.9677958242913]
Test Case: 556 | Input/Output: [[-23.210305401292388 91] 67.78969459870761]
Test Case: 557 | Input/Output: [[60.58345784641418 46] 106.58345784641418]
Test Case: 558 | Input/Output: [[90.43377908509129 -55] 35.43377908509129]
Test Case: 559 | Input/Output: [[-87.68366563114151 42] -45.68366563114151]
Test Case: 560 | Input/Output: [[-26.50770028294771 -61] -87.50770028294771]
Test Case: 561 | Input/Output: [[-31.388385210302957 -75] -106.38838521030296]
Test Case: 562 | Input/Output: [[-11.843278920863298 38] 26.1567210791367]
Test Case: 563 | Input/Output: [[-40.77868856414353 -56] -96.77868856414352]
Test Case: 564 | Input/Output: [[37.324464944739475 14] 51.324464944739475]
Test Case: 565 | Input/Output: [[65.87093702825163 33] 98.87093702825163]
Test Case: 566 | Input/Output: [[-2.158961499402068 -26] -28.158961499402068]
Test Case: 567 | Input/Output: [[3.465135319644503 -85] -81.5348646803555]
Test Case: 568 | Input/Output: [[21.868121115776958 -11] 10.868121115776958]
Test Case: 569 | Input/Output: [[-36.02999396439135 -48] -84.02999396439135]
Test Case: 570 | Input/Output: [[96.0566660854681 88] 184.0566660854681]
Test Case: 571 | Input/Output: [[1.3386900522302625 28] 29.338690052230262]
Test Case: 572 | Input/Output: [[-25.244026710507313 -24] -49.24402671050731]
Test Case: 573 | Input/Output: [[-78.6519153407764 33] -45.6519153407764]
Test Case: 574 | Input/Output: [[-79.61559939676212 -97] -176.61559939676212]
Test Case: 575 | Input/Output: [[-72.19376144563807 81] 8.806238554361926]
Test Case: 576 | Input/Output: [[99.13135000557548 2] 101.13135000557548]
Test Case: 577 | Input/Output: [[-0.5161880060570638 75] 74.48381199394294]
Test Case: 578 | Input/Output: [[60.803544251943066 22] 82.80354425194307]
Test Case: 579 | Input/Output: [[59.73716411566346 44] 103.73716411566346]
Test Case: 580 | Input/Output: [[32.64625340845538 -17] 15.64625340845538]
Test Case: 581 | Input/Output: [[21.80781439134678 71] 92.80781439134678]
Test Case: 582 | Input/Output: [[41.49907056877015 62] 103.49907056877015]
Test Case: 583 | Input/Output: [[-6.033035066874518 -69] -75.03303506687452]
Test Case: 584 | Input/Output: [[80.49672839617506 21] 101.49672839617506]
Test Case: 585 | Input/Output: [[-60.86764933635847 47] -13.867649336358468]
Test Case: 586 | Input/Output: [[-90.00248456094803 -55] -145.00248456094803]
Test Case: 587 | Input/Output: [[-80.5155380546882 -47] -127.5155380546882]
Test Case: 588 | Input/Output: [[57.669859651466794 -74] -16.330140348533206]
Test Case: 589 | Input/Output: [[-82.56012458199969 -70] -152.56012458199967]
Test Case: 590 | Input/Output: [[65.51249020551032 42] 107.51249020551032]
Test Case: 591 | Input/Output: [[-6.330207607398549 97] 90.66979239260145]
Test Case: 592 | Input/Output: [[37.18264871989595 20] 57.18264871989595]
Test Case: 593 | Input/Output: [[32.542415702472226 -55] -22.457584297527774]
Test Case: 594 | Input/Output: [[97.1165784581735 57] 154.1165784581735]
Test Case: 595 | Input/Output: [[-74.53630513532173 -55] -129.53630513532173]
Test Case: 596 | Input/Output: [[34.736320787199986 -94] -59.263679212800014]
Test Case: 597 | Input/Output: [[-49.872251979596946 54] 4.127748020403054]
Test Case: 598 | Input/Output: [[-54.24737903966235 37] -17.24737903966235]
Test Case: 599 | Input/Output: [[21.281996129588848 58] 79.28199612958885]
Test Case: 600 | Input/Output: [[-96.7408540239476 30] -66.7408540239476]
Test Case: 601 | Input/Output: [[-95.0494557781789 -77] -172.0494557781789]
Test Case: 602 | Input/Output: [[-27.252273554323864 71] 43.747726445676136]
Test Case: 603 | Input/Output: [[76.65499923530422 -77] -0.3450007646957829]
Test Case: 604 | Input/Output: [[72.38792905431569 -2] 70.38792905431569]
Test Case: 605 | Input/Output: [[-41.71302722524335 62] 20.28697277475665]
Test Case: 606 | Input/Output: [[-61.20473881095159 -57] -118.2047388109516]
Test Case: 607 | Input/Output: [[45.31264446428463 74] 119.31264446428463]
Test Case: 608 | Input/Output: [[71.46020632226976 -49] 22.460206322269755]
Test Case: 609 | Input/Output: [[71.75569608304826 71] 142.75569608304826]
Test Case: 610 | Input/Output: [[-68.47595574358047 -16] -84.47595574358047]
Test Case: 611 | Input/Output: [[-69.6945238319581 -98] -167.6945238319581]
Test Case: 612 | Input/Output: [[-46.916226616581035 4] -42.916226616581035]
Test Case: 613 | Input/Output: [[-35.646719454634535 -38] -73.64671945463454]
Test Case: 614 | Input/Output: [[47.353178846161825 -90] -42.646821153838175]
Test Case: 615 | Input/Output: [[19.72933101129999 -9] 10.72933101129999]
Test Case: 616 | Input/Output: [[84.441271110672 -90] -5.558728889327995]
Test Case: 617 | Input/Output: [[82.15983265131538 -28] 54.159832651315384]
Test Case: 618 | Input/Output: [[-56.156723686647084 48] -8.156723686647084]
Test Case: 619 | Input/Output: [[-62.16643939589219 -21] -83.16643939589218]
Test Case: 620 | Input/Output: [[-63.85703145413184 15] -48.85703145413184]
Test Case: 621 | Input/Output: [[28.04637369231787 -42] -13.953626307682129]
Test Case: 622 | Input/Output: [[88.38621987850112 16] 104.38621987850112]
Test Case: 623 | Input/Output: [[-88.86576151614469 -22] -110.86576151614469]
Test Case: 624 | Input/Output: [[-29.674295452952904 -4] -33.674295452952904]
Test Case: 625 | Input/Output: [[27.798106643273712 34] 61.79810664327371]
Test Case: 626 | Input/Output: [[68.8905643997152 -69] -0.10943560028479737]
Test Case: 627 | Input/Output: [[65.87557537731871 26] 91.87557537731871]
Test Case: 628 | Input/Output: [[-56.235686477859744 -72] -128.23568647785976]
Test Case: 629 | Input/Output: [[58.98483340721663 58] 116.98483340721663]
Test Case: 630 | Input/Output: [[-42.24964579212376 7] -35.24964579212376]
Test Case: 631 | Input/Output: [[-47.04398405403203 -94] -141.04398405403202]
Test Case: 632 | Input/Output: [[-6.678968674953168 -41] -47.67896867495317]
Test Case: 633 | Input/Output: [[-99.50563249703104 -83] -182.50563249703106]
Test Case: 634 | Input/Output: [[-44.37888296535088 -52] -96.37888296535088]
Test Case: 635 | Input/Output: [[54.470868924929704 -27] 27.470868924929704]
Test Case: 636 | Input/Output: [[46.49191334408451 87] 133.4919133440845]
Test Case: 637 | Input/Output: [[25.065372869262333 -20] 5.065372869262333]
Test Case: 638 | Input/Output: [[19.51723090205877 -17] 2.5172309020587704]
Test Case: 639 | Input/Output: [[-61.0918408597924 -13] -74.0918408597924]
Test Case: 640 | Input/Output: [[-20.016827630174248 -99] -119.01682763017425]
Test Case: 641 | Input/Output: [[-5.720685661430423 -14] -19.720685661430423]
Test Case: 642 | Input/Output: [[70.45436425373722 50] 120.45436425373722]
Test Case: 643 | Input/Output: [[26.63582507264202 57] 83.63582507264202]
Test Case: 644 | Input/Output: [[98.99146705184253 -50] 48.991467051842534]
Test Case: 645 | Input/Output: [[-88.34391640585748 -55] -143.3439164058575]
Test Case: 646 | Input/Output: [[51.88775266729567 -76] -24.112247332704328]
Test Case: 647 | Input/Output: [[-27.467912983703997 -78] -105.467912983704]
Test Case: 648 | Input/Output: [[-8.699645811626127 14] 5.300354188373873]
Test Case: 649 | Input/Output: [[33.36344321322585 -82] -48.63655678677415]
Test Case: 650 | Input/Output: [[85.54323147443299 -46] 39.543231474432986]
Test Case: 651 | Input/Output: [[46.372811943250724 42] 88.37281194325072]
Test Case: 652 | Input/Output: [[72.72297851204718 66] 138.72297851204718]
Test Case: 653 | Input/Output: [[45.93574584164938 30] 75.93574584164938]
Test Case: 654 | Input/Output: [[-48.74646941585672 56] 7.253530584143277]
Test Case: 655 | Input/Output: [[-42.4009578622645 -24] -66.4009578622645]
Test Case: 656 | Input/Output: [[-27.460468890805643 50] 22.539531109194357]
Test Case: 657 | Input/Output: [[67.28713937725522 -100] -32.712860622744785]
Test Case: 658 | Input/Output: [[94.3038038885359 47] 141.3038038885359]
Test Case: 659 | Input/Output: [[-63.37063190880128 42] -21.37063190880128]
Test Case: 660 | Input/Output: [[-73.22250611044585 24] -49.22250611044585]
Test Case: 661 | Input/Output: [[-80.18763958237255 -94] -174.18763958237255]
Test Case: 662 | Input/Output: [[2.069921423344482 -43] -40.93007857665552]
Test Case: 663 | Input/Output: [[78.1944761643733 -24] 54.1944761643733]
Test Case: 664 | Input/Output: [[-48.11533672330766 11] -37.11533672330766]
Test Case: 665 | Input/Output: [[97.03622084497565 12] 109.03622084497565]
Test Case: 666 | Input/Output: [[-4.471319795800937 51] 46.52868020419906]
Test Case: 667 | Input/Output: [[-90.10199267685239 89] -1.1019926768523902]
Test Case: 668 | Input/Output: [[-15.195510491713947 -25] -40.19551049171395]
Test Case: 669 | Input/Output: [[68.01277740026137 89] 157.01277740026137]
Test Case: 670 | Input/Output: [[-90.76403534817767 -58] -148.76403534817769]
Test Case: 671 | Input/Output: [[79.4936170112943 -8] 71.4936170112943]
Test Case: 672 | Input/Output: [[89.51358436616215 -82] 7.513584366162149]
Test Case: 673 | Input/Output: [[13.52484389594008 -57] -43.47515610405992]
Test Case: 674 | Input/Output: [[-3.6145383769665216 89] 85.38546162303348]
Test Case: 675 | Input/Output: [[-67.05514238747183 23] -44.05514238747183]
Test Case: 676 | Input/Output: [[-37.29833389678816 57] 19.701666103211842]
Test Case: 677 | Input/Output: [[32.893754415161055 52] 84.89375441516106]
Test Case: 678 | Input/Output: [[-55.51834305515686 -39] -94.51834305515686]
Test Case: 679 | Input/Output: [[-28.70772507482458 -44] -72.70772507482458]
Test Case: 680 | Input/Output: [[-69.7943007591352 17] -52.7943007591352]
Test Case: 681 | Input/Output: [[12.784998973936752 6] 18.78499897393675]
Test Case: 682 | Input/Output: [[-58.027114707454345 -60] -118.02711470745434]
Test Case: 683 | Input/Output: [[-66.0953878292166 87] 20.904612170783395]
Test Case: 684 | Input/Output: [[-89.41632031584945 97] 7.583679684150553]
Test Case: 685 | Input/Output: [[-24.853835831527846 -85] -109.85383583152785]
Test Case: 686 | Input/Output: [[2.492261758545908 41] 43.49226175854591]
Test Case: 687 | Input/Output: [[95.26647259376156 -12] 83.26647259376156]
Test Case: 688 | Input/Output: [[-84.83143678160765 -90] -174.83143678160764]
Test Case: 689 | Input/Output: [[19.55487930039071 8] 27.55487930039071]
Test Case: 690 | Input/Output: [[53.19481915104015 3] 56.19481915104015]
Test Case: 691 | Input/Output: [[-35.187427494427496 -20] -55.187427494427496]
Test Case: 692 | Input/Output: [[-26.554060239934955 46] 19.445939760065045]
Test Case: 693 | Input/Output: [[71.48307875695096 29] 100.48307875695096]
Test Case: 694 | Input/Output: [[-20.670011898984583 9] -11.670011898984583]
Test Case: 695 | Input/Output: [[-30.710559573031418 -70] -100.71055957303142]
Test Case: 696 | Input/Output: [[-87.69770507148407 -20] -107.69770507148407]
Test Case: 697 | Input/Output: [[84.8795480304274 37] 121.8795480304274]
Test Case: 698 | Input/Output: [[10.340536435147854 -65] -54.659463564852146]
Test Case: 699 | Input/Output: [[-8.571895694706598 81] 72.4281043052934]
Test Case: 700 | Input/Output: [[-40.2774241082992 -9] -49.2774241082992]
Test Case: 701 | Input/Output: [[49.28694834875952 72] 121.28694834875952]
Test Case: 702 | Input/Output: [[-35.330942924348975 78] 42.669057075651025]
Test Case: 703 | Input/Output: [[12.115551173028408 88] 100.11555117302841]
Test Case: 704 | Input/Output: [[-31.329294864010322 -91] -122.32929486401032]
Test Case: 705 | Input/Output: [[29.956999268163685 4] 33.956999268163685]
Test Case: 706 | Input/Output: [[-93.90300155567233 56] -37.90300155567233]
Test Case: 707 | Input/Output: [[11.952039345232706 -29] -17.047960654767294]
Test Case: 708 | Input/Output: [[82.39903887923049 24] 106.39903887923049]
Test Case: 709 | Input/Output: [[11.915902389959257 -14] -2.084097610040743]
Test Case: 710 | Input/Output: [[20.102572648271646 91] 111.10257264827165]
Test Case: 711 | Input/Output: [[-47.57436342782413 -43] -90.57436342782412]
Test Case: 712 | Input/Output: [[-41.756755465484204 47] 5.243244534515796]
Test Case: 713 | Input/Output: [[39.45021963269099 46] 85.45021963269099]
Test Case: 714 | Input/Output: [[54.79301040060139 -28] 26.79301040060139]
Test Case: 715 | Input/Output: [[8.790294519175546 -27] -18.209705480824454]
Test Case: 716 | Input/Output: [[85.86446052178582 9] 94.86446052178582]
Test Case: 717 | Input/Output: [[-84.09266476821311 -31] -115.09266476821311]
Test Case: 718 | Input/Output: [[91.08302162291281 80] 171.0830216229128]
Test Case: 719 | Input/Output: [[41.976608924157716 -63] -21.023391075842284]
Test Case: 720 | Input/Output: [[-28.4601947479929 24] -4.460194747992901]
Test Case: 721 | Input/Output: [[-96.34170917747949 66] -30.341709177479487]
Test Case: 722 | Input/Output: [[94.85786265813562 3] 97.85786265813562]
Test Case: 723 | Input/Output: [[-62.69777908709513 1] -61.69777908709513]
Test Case: 724 | Input/Output: [[87.98944479936236 6] 93.98944479936236]
Test Case: 725 | Input/Output: [[67.72438334832626 72] 139.72438334832626]
Test Case: 726 | Input/Output: [[96.68717993540125 -30] 66.68717993540125]
Test Case: 727 | Input/Output: [[14.988418587224842 -30] -15.011581412775158]
Test Case: 728 | Input/Output: [[-34.88465899114476 -89] -123.88465899114476]
Test Case: 729 | Input/Output: [[-56.053855771318474 68] 11.946144228681526]
Test Case: 730 | Input/Output: [[44.3883903279677 -5] 39.3883903279677]
Test Case: 731 | Input/Output: [[92.05271770758324 -15] 77.05271770758324]
Test Case: 732 | Input/Output: [[-87.61524358359955 -49] -136.61524358359955]
Test Case: 733 | Input/Output: [[-60.172383195826896 39] -21.172383195826896]
Test Case: 734 | Input/Output: [[-66.28358820005133 -69] -135.28358820005133]
Test Case: 735 | Input/Output: [[2.6078089186214015 -25] -22.3921910813786]
Test Case: 736 | Input/Output: [[66.78449284994613 6] 72.78449284994613]
Test Case: 737 | Input/Output: [[52.06198724538734 -44] 8.061987245387343]
Test Case: 738 | Input/Output: [[47.35781308026037 76] 123.35781308026037]
Test Case: 739 | Input/Output: [[13.745185595884294 -26] -12.254814404115706]
Test Case: 740 | Input/Output: [[-11.962776155869022 -96] -107.96277615586902]
Test Case: 741 | Input/Output: [[43.45585719096755 49] 92.45585719096755]
Test Case: 742 | Input/Output: [[-74.78566893742133 12] -62.785668937421335]
Test Case: 743 | Input/Output: [[-62.556471764227894 96] 33.443528235772106]
Test Case: 744 | Input/Output: [[7.101571531342316 50] 57.101571531342316]
Test Case: 745 | Input/Output: [[-37.97115886112277 48] 10.028841138877233]
Test Case: 746 | Input/Output: [[-79.81079385261371 22] -57.81079385261371]
Test Case: 747 | Input/Output: [[-73.69435705037739 -52] -125.69435705037739]
Test Case: 748 | Input/Output: [[-17.05719702490171 -87] -104.05719702490171]
Test Case: 749 | Input/Output: [[-26.77747820059662 -71] -97.77747820059662]
Test Case: 750 | Input/Output: [[-97.06035802266872 60] -37.06035802266872]
Test Case: 751 | Input/Output: [[4.023750376166689 87] 91.02375037616669]
Test Case: 752 | Input/Output: [[91.80575469307314 -80] 11.80575469307314]
Test Case: 753 | Input/Output: [[-41.24072155034815 34] -7.240721550348148]
Test Case: 754 | Input/Output: [[-72.61887441223315 71] -1.6188744122331542]
Test Case: 755 | Input/Output: [[-81.70561034740673 7] -74.70561034740673]
Test Case: 756 | Input/Output: [[36.94201537507777 60] 96.94201537507777]
Test Case: 757 | Input/Output: [[-33.81150707892593 99] 65.18849292107407]
Test Case: 758 | Input/Output: [[-4.4921319827207356 75] 70.50786801727926]
Test Case: 759 | Input/Output: [[-21.801641424346172 -50] -71.80164142434617]
Test Case: 760 | Input/Output: [[-7.541189223239385 -18] -25.541189223239385]
Test Case: 761 | Input/Output: [[55.9903305598296 -21] 34.9903305598296]
Test Case: 762 | Input/Output: [[-53.85142638445557 25] -28.85142638445557]
Test Case: 763 | Input/Output: [[37.518190768494605 -99] -61.481809231505395]
Test Case: 764 | Input/Output: [[4.464385756635096 10] 14.464385756635096]
Test Case: 765 | Input/Output: [[-95.38487664683171 6] -89.38487664683171]
Test Case: 766 | Input/Output: [[94.15499464699121 53] 147.1549946469912]
Test Case: 767 | Input/Output: [[-75.18655963658483 -92] -167.18655963658483]
Test Case: 768 | Input/Output: [[59.007591118047486 -58] 1.0075911180474861]
Test Case: 769 | Input/Output: [[-43.903301354919776 -96] -139.9033013549198]
Test Case: 770 | Input/Output: [[-47.01955211385882 32] -15.019552113858822]
Test Case: 771 | Input/Output: [[65.61281830566824 -18] 47.61281830566824]
Test Case: 772 | Input/Output: [[9.4156408183226 -54] -44.5843591816774]
Test Case: 773 | Input/Output: [[-62.196849562835624 -35] -97.19684956283562]
Test Case: 774 | Input/Output: [[-14.64619391613688 49] 34.35380608386312]
Test Case: 775 | Input/Output: [[71.41956204232929 -54] 17.41956204232929]
Test Case: 776 | Input/Output: [[-66.90776953291461 92] 25.092230467085386]
Test Case: 777 | Input/Output: [[-69.39256504773556 3] -66.39256504773556]
Test Case: 778 | Input/Output: [[47.02157328724422 9] 56.02157328724422]
Test Case: 779 | Input/Output: [[54.86314868889883 5] 59.86314868889883]
Test Case: 780 | Input/Output: [[79.86004969046812 -35] 44.86004969046812]
Test Case: 781 | Input/Output: [[-13.794557203003961 66] 52.20544279699604]
Test Case: 782 | Input/Output: [[20.231389454638716 0] 20.231389454638716]
Test Case: 783 | Input/Output: [[64.0311935578377 25] 89.0311935578377]
Test Case: 784 | Input/Output: [[34.56660677714487 56] 90.56660677714487]
Test Case: 785 | Input/Output: [[75.44947239042608 20] 95.44947239042608]
Test Case: 786 | Input/Output: [[90.35498187359693 -29] 61.35498187359693]
Test Case: 787 | Input/Output: [[38.51097276632106 -81] -42.48902723367894]
Test Case: 788 | Input/Output: [[73.6090229308409 -98] -24.390977069159106]
Test Case: 789 | Input/Output: [[-57.06627150067718 -2] -59.06627150067718]
Test Case: 790 | Input/Output: [[73.84157706031607 64] 137.84157706031607]
Test Case: 791 | Input/Output: [[32.84977498257297 -88] -55.15022501742703]
Test Case: 792 | Input/Output: [[-20.656245382288276 -16] -36.656245382288276]
Test Case: 793 | Input/Output: [[41.171325413078364 78] 119.17132541307836]
Test Case: 794 | Input/Output: [[-16.05967829561827 -46] -62.05967829561827]
Test Case: 795 | Input/Output: [[-55.480567296862105 11] -44.480567296862105]
Test Case: 796 | Input/Output: [[34.98060750144049 -96] -61.01939249855951]
Test Case: 797 | Input/Output: [[77.05957420951569 -13] 64.05957420951569]
Test Case: 798 | Input/Output: [[-51.659133805219604 -70] -121.6591338052196]
Test Case: 799 | Input/Output: [[95.51332348972971 84] 179.51332348972971]
Test Case: 800 | Input/Output: [[58.65791005002265 -29] 29.65791005002265]
Test Case: 801 | Input/Output: [[76.8074012059931 -78] -1.1925987940068978]
Test Case: 802 | Input/Output: [[-32.105118482317636 -49] -81.10511848231764]
Test Case: 803 | Input/Output: [[85.04701460936118 36] 121.04701460936118]
Test Case: 804 | Input/Output: [[-53.270862816497335 49] -4.270862816497335]
Test Case: 805 | Input/Output: [[-38.81914711737788 82] 43.18085288262212]
Test Case: 806 | Input/Output: [[-34.81671863879856 -7] -41.81671863879856]
Test Case: 807 | Input/Output: [[-92.12423780731416 19] -73.12423780731416]
Test Case: 808 | Input/Output: [[-33.07698325079855 22] -11.076983250798548]
Test Case: 809 | Input/Output: [[-44.225423553170096 14] -30.225423553170096]
Test Case: 810 | Input/Output: [[32.7140692077962 -99] -66.2859307922038]
Test Case: 811 | Input/Output: [[65.07706568917055 93] 158.07706568917055]
Test Case: 812 | Input/Output: [[-70.72147243894915 -4] -74.72147243894915]
Test Case: 813 | Input/Output: [[62.44402921470845 74] 136.44402921470845]
Test Case: 814 | Input/Output: [[68.72103406582488 -55] 13.721034065824881]
Test Case: 815 | Input/Output: [[-51.52676695826563 29] -22.526766958265632]
Test Case: 816 | Input/Output: [[8.486299692461643 -14] -5.5137003075383575]
Test Case: 817 | Input/Output: [[-5.682123658867042 48] 42.31787634113296]
Test Case: 818 | Input/Output: [[-52.19575708787516 42] -10.195757087875158]
Test Case: 819 | Input/Output: [[6.856949414758333 35] 41.85694941475833]
Test Case: 820 | Input/Output: [[75.4278349175919 27] 102.4278349175919]
Test Case: 821 | Input/Output: [[-96.91306472724668 39] -57.91306472724668]
Test Case: 822 | Input/Output: [[25.962784564817312 29] 54.96278456481731]
Test Case: 823 | Input/Output: [[11.715094191746061 -50] -38.28490580825394]
Test Case: 824 | Input/Output: [[80.43906096128282 98] 178.43906096128282]
Test Case: 825 | Input/Output: [[12.152338670613275 74] 86.15233867061328]
Test Case: 826 | Input/Output: [[-92.38849282370451 -13] -105.38849282370451]
Test Case: 827 | Input/Output: [[-96.752994303659 -88] -184.752994303659]
Test Case: 828 | Input/Output: [[-16.372030066495213 -69] -85.37203006649521]
Test Case: 829 | Input/Output: [[-70.4402404603449 34] -36.440240460344896]
Test Case: 830 | Input/Output: [[-92.94460531257786 44] -48.94460531257786]
Test Case: 831 | Input/Output: [[-50.646874730008484 21] -29.646874730008484]
Test Case: 832 | Input/Output: [[-8.311435643100836 -16] -24.311435643100836]
Test Case: 833 | Input/Output: [[-51.44441590595967 -72] -123.44441590595967]
Test Case: 834 | Input/Output: [[-89.55874012094762 -5] -94.55874012094762]
Test Case: 835 | Input/Output: [[-6.757761581694723 -75] -81.75776158169472]
Test Case: 836 | Input/Output: [[9.695107938391345 -77] -67.30489206160865]
Test Case: 837 | Input/Output: [[-86.79887348395272 -50] -136.79887348395272]
Test Case: 838 | Input/Output: [[13.941482750822345 81] 94.94148275082235]
Test Case: 839 | Input/Output: [[-60.08458884084937 -34] -94.08458884084936]
Test Case: 840 | Input/Output: [[-49.595643756333494 21] -28.595643756333494]
Test Case: 841 | Input/Output: [[36.00990058889349 -81] -44.99009941110651]
Test Case: 842 | Input/Output: [[-20.090822702524207 27] 6.909177297475793]
Test Case: 843 | Input/Output: [[-90.08805063580796 75] -15.08805063580796]
Test Case: 844 | Input/Output: [[70.38536373637879 -85] -14.614636263621207]
Test Case: 845 | Input/Output: [[-25.114142858514427 -91] -116.11414285851443]
Test Case: 846 | Input/Output: [[13.704399305277292 87] 100.70439930527729]
Test Case: 847 | Input/Output: [[-5.257417074824232 77] 71.74258292517577]
Test Case: 848 | Input/Output: [[-15.18079487453474 -16] -31.18079487453474]
Test Case: 849 | Input/Output: [[-83.28240151697631 25] -58.28240151697631]
Test Case: 850 | Input/Output: [[3.8682139964589624 -76] -72.13178600354104]
Test Case: 851 | Input/Output: [[-86.72399967086004 90] 3.2760003291399613]
Test Case: 852 | Input/Output: [[38.81761138968989 -65] -26.182388610310113]
Test Case: 853 | Input/Output: [[9.886918119338148 -47] -37.11308188066185]
Test Case: 854 | Input/Output: [[-46.12758163322772 -73] -119.12758163322772]
Test Case: 855 | Input/Output: [[-29.841214089078008 -59] -88.84121408907801]
Test Case: 856 | Input/Output: [[-66.06256866023676 69] 2.9374313397632363]
Test Case: 857 | Input/Output: [[56.868877611408095 56] 112.8688776114081]
Test Case: 858 | Input/Output: [[91.38873811693495 -71] 20.388738116934945]
Test Case: 859 | Input/Output: [[-2.0276327088046173 -36] -38.02763270880462]
Test Case: 860 | Input/Output: [[57.80326497338396 84] 141.80326497338396]
Test Case: 861 | Input/Output: [[-96.84075826346279 83] -13.840758263462789]
Test Case: 862 | Input/Output: [[-80.7504734575097 92] 11.249526542490301]
Test Case: 863 | Input/Output: [[17.249706540407786 95] 112.24970654040779]
Test Case: 864 | Input/Output: [[-38.87765428990022 -4] -42.87765428990022]
Test Case: 865 | Input/Output: [[3.3767531097621486 77] 80.37675310976215]
Test Case: 866 | Input/Output: [[-91.41678803794404 -33] -124.41678803794404]
Test Case: 867 | Input/Output: [[49.16104475405032 -78] -28.838955245949677]
Test Case: 868 | Input/Output: [[-64.62298670412272 53] -11.622986704122724]
Test Case: 869 | Input/Output: [[-90.89060050535885 22] -68.89060050535885]
Test Case: 870 | Input/Output: [[76.83906605197811 -63] 13.839066051978108]
Test Case: 871 | Input/Output: [[-48.00604707004956 95] 46.99395292995044]
Test Case: 872 | Input/Output: [[-40.89972727024917 -27] -67.89972727024917]
Test Case: 873 | Input/Output: [[94.31539916463927 -84] 10.315399164639274]
Test Case: 874 | Input/Output: [[15.72094257151575 9] 24.72094257151575]
Test Case: 875 | Input/Output: [[-28.690472063871937 -97] -125.69047206387194]
Test Case: 876 | Input/Output: [[-3.9918464608265793 27] 23.00815353917342]
Test Case: 877 | Input/Output: [[63.08540921722391 -7] 56.08540921722391]
Test Case: 878 | Input/Output: [[34.17179208288462 50] 84.17179208288462]
Test Case: 879 | Input/Output: [[-53.4243567571304 43] -10.424356757130397]
Test Case: 880 | Input/Output: [[-32.17341042592605 2] -30.17341042592605]
Test Case: 881 | Input/Output: [[-50.724602005200346 68] 17.275397994799654]
Test Case: 882 | Input/Output: [[85.77769508899118 37] 122.77769508899118]
Test Case: 883 | Input/Output: [[41.6165259534246 83] 124.6165259534246]
Test Case: 884 | Input/Output: [[-19.071217731729533 14] -5.071217731729533]
Test Case: 885 | Input/Output: [[46.2663675217282 -57] -10.733632478271801]
Test Case: 886 | Input/Output: [[63.120783308889315 -34] 29.120783308889315]
Test Case: 887 | Input/Output: [[68.77453590700566 -81] -12.225464092994343]
Test Case: 888 | Input/Output: [[-33.387035138170546 -23] -56.387035138170546]
Test Case: 889 | Input/Output: [[45.689333363146204 -49] -3.310666636853796]
Test Case: 890 | Input/Output: [[-14.834114244672577 90] 75.16588575532742]
Test Case: 891 | Input/Output: [[-42.37630200776141 -74] -116.37630200776141]
Test Case: 892 | Input/Output: [[73.20936925575131 24] 97.20936925575131]
Test Case: 893 | Input/Output: [[9.804966942764096 3] 12.804966942764096]
Test Case: 894 | Input/Output: [[-58.41010771086867 -92] -150.41010771086866]
Test Case: 895 | Input/Output: [[-31.50625466426837 -86] -117.50625466426837]
Test Case: 896 | Input/Output: [[34.051806058930424 -27] 7.051806058930424]
Test Case: 897 | Input/Output: [[73.86767831823073 -20] 53.86767831823073]
Test Case: 898 | Input/Output: [[-13.405554415044179 37] 23.59444558495582]
Test Case: 899 | Input/Output: [[-92.93241186783861 99] 6.06758813216139]
Test Case: 900 | Input/Output: [[44.83562656953785 -34] 10.835626569537851]
Test Case: 901 | Input/Output: [[75.40568046350725 98] 173.40568046350725]
Test Case: 902 | Input/Output: [[95.4943689313306 -45] 50.4943689313306]
Test Case: 903 | Input/Output: [[49.97455132882067 70] 119.97455132882067]
Test Case: 904 | Input/Output: [[-40.75265479860046 43] 2.24734520139954]
Test Case: 905 | Input/Output: [[-7.004891484874932 23] 15.995108515125068]
Test Case: 906 | Input/Output: [[-44.85189451245033 -17] -61.85189451245033]
Test Case: 907 | Input/Output: [[-64.26091343803915 -31] -95.26091343803915]
Test Case: 908 | Input/Output: [[-13.960560328119527 88] 74.03943967188047]
Test Case: 909 | Input/Output: [[3.5180495511683887 45] 48.51804955116839]
Test Case: 910 | Input/Output: [[84.2145195516905 13] 97.2145195516905]
Test Case: 911 | Input/Output: [[-72.58442704856776 -69] -141.58442704856776]
Test Case: 912 | Input/Output: [[91.68543720223587 65] 156.68543720223587]
Test Case: 913 | Input/Output: [[25.191262413020766 -41] -15.808737586979234]
Test Case: 914 | Input/Output: [[-1.7543582238914297 -46] -47.75435822389143]
Test Case: 915 | Input/Output: [[-51.9100525584864 -12] -63.9100525584864]
Test Case: 916 | Input/Output: [[64.67423860384542 27] 91.67423860384542]
Test Case: 917 | Input/Output: [[-74.86178175086712 53] -21.861781750867124]
Test Case: 918 | Input/Output: [[-94.56433017068517 -56] -150.56433017068517]
Test Case: 919 | Input/Output: [[-64.2899479369836 -1] -65.2899479369836]
Test Case: 920 | Input/Output: [[86.55197387338234 23] 109.55197387338234]
Test Case: 921 | Input/Output: [[-5.041883005297379 72] 66.95811699470262]
Test Case: 922 | Input/Output: [[5.890354947824974 -33] -27.109645052175026]
Test Case: 923 | Input/Output: [[-70.93574193685919 -75] -145.9357419368592]
Test Case: 924 | Input/Output: [[88.81277908377868 -55] 33.81277908377868]
Test Case: 925 | Input/Output: [[34.62968010707539 -25] 9.629680107075387]
Test Case: 926 | Input/Output: [[-52.09040571765573 -1] -53.09040571765573]
Test Case: 927 | Input/Output: [[32.42253554399056 91] 123.42253554399056]
Test Case: 928 | Input/Output: [[18.831647925109138 -30] -11.168352074890862]
Test Case: 929 | Input/Output: [[-29.08261845696269 -74] -103.08261845696269]
Test Case: 930 | Input/Output: [[26.605101986771444 96] 122.60510198677144]
Test Case: 931 | Input/Output: [[-99.75599091593061 4] -95.75599091593061]
Test Case: 932 | Input/Output: [[90.9482861155949 89] 179.9482861155949]
Test Case: 933 | Input/Output: [[68.58100513863553 -10] 58.58100513863553]
Test Case: 934 | Input/Output: [[77.90256833080113 -75] 2.902568330801131]
Test Case: 935 | Input/Output: [[60.76013318604362 81] 141.76013318604362]
Test Case: 936 | Input/Output: [[-75.93704558366248 -69] -144.9370455836625]
Test Case: 937 | Input/Output: [[97.567090228007 -95] 2.567090228007004]
Test Case: 938 | Input/Output: [[-13.497998060126903 -75] -88.4979980601269]
Test Case: 939 | Input/Output: [[36.330769197683935 -49] -12.669230802316065]
Test Case: 940 | Input/Output: [[-97.50798189946512 -51] -148.5079818994651]
Test Case: 941 | Input/Output: [[26.763132181429256 -70] -43.236867818570744]
Test Case: 942 | Input/Output: [[37.92646080940821 15] 52.92646080940821]
Test Case: 943 | Input/Output: [[-65.6044899216579 90] 24.3955100783421]
Test Case: 944 | Input/Output: [[-48.84234895975577 -82] -130.84234895975578]
Test Case: 945 | Input/Output: [[-4.848369633565966 -16] -20.848369633565966]
Test Case: 946 | Input/Output: [[47.38845144701659 -54] -6.6115485529834075]
Test Case: 947 | Input/Output: [[77.55849670152989 85] 162.5584967015299]
Test Case: 948 | Input/Output: [[-37.10394941340771 -18] -55.10394941340771]
Test Case: 949 | Input/Output: [[54.08830821861932 88] 142.08830821861932]
Test Case: 950 | Input/Output: [[-10.832322295031886 -22] -32.83232229503189]
Test Case: 951 | Input/Output: [[6.574145635860916 96] 102.57414563586092]
Test Case: 952 | Input/Output: [[94.18051217300169 86] 180.1805121730017]
Test Case: 953 | Input/Output: [[42.12044476690875 -16] 26.120444766908747]
Test Case: 954 | Input/Output: [[-54.80082239876572 82] 27.199177601234283]
Test Case: 955 | Input/Output: [[72.98672918556494 -12] 60.98672918556494]
Test Case: 956 | Input/Output: [[-63.27714708585963 -64] -127.27714708585964]
Test Case: 957 | Input/Output: [[-33.390308074081915 30] -3.390308074081915]
Test Case: 958 | Input/Output: [[92.74198380321704 -41] 51.74198380321704]
Test Case: 959 | Input/Output: [[95.82680776672922 -29] 66.82680776672922]
Test Case: 960 | Input/Output: [[88.89959585881425 66] 154.89959585881425]
Test Case: 961 | Input/Output: [[62.661636115170325 -88] -25.338363884829675]
Test Case: 962 | Input/Output: [[-94.5332026133013 -13] -107.5332026133013]
Test Case: 963 | Input/Output: [[33.20089882348657 83] 116.20089882348657]
Test Case: 964 | Input/Output: [[63.760981839536726 93] 156.76098183953673]
Test Case: 965 | Input/Output: [[-45.23238832689642 -83] -128.23238832689643]
Test Case: 966 | Input/Output: [[63.653518455003194 -8] 55.653518455003194]
Test Case: 967 | Input/Output: [[78.7988467422611 -81] -2.201153257738895]
Test Case: 968 | Input/Output: [[73.70846766063866 -25] 48.70846766063866]
Test Case: 969 | Input/Output: [[-30.572028150021453 -82] -112.57202815002145]
Test Case: 970 | Input/Output: [[-9.869783560130955 -2] -11.869783560130955]
Test Case: 971 | Input/Output: [[-92.06631446946439 52] -40.06631446946439]
Test Case: 972 | Input/Output: [[67.58418631144667 72] 139.58418631144667]
Test Case: 973 | Input/Output: [[-40.84395923275361 57] 16.156040767246388]
Test Case: 974 | Input/Output: [[65.75071901725394 92] 157.75071901725394]
Test Case: 975 | Input/Output: [[67.51444870625275 -12] 55.51444870625275]
Test Case: 976 | Input/Output: [[4.936987881015199 -13] -8.063012118984801]
Test Case: 977 | Input/Output: [[7.342134274629771 43] 50.34213427462977]
Test Case: 978 | Input/Output: [[36.77770700666915 22] 58.77770700666915]
Test Case: 979 | Input/Output: [[-33.30902184453382 -72] -105.30902184453382]
Test Case: 980 | Input/Output: [[-40.098925404046405 -55] -95.09892540404641]
Test Case: 981 | Input/Output: [[99.36366012185087 -40] 59.36366012185087]
Test Case: 982 | Input/Output: [[54.86762243105164 90] 144.86762243105164]
Test Case: 983 | Input/Output: [[-73.4431614109359 37] -36.4431614109359]
Test Case: 984 | Input/Output: [[1.3050419313047996 38] 39.3050419313048]
Test Case: 985 | Input/Output: [[-0.8467522201472661 -50] -50.846752220147266]
Test Case: 986 | Input/Output: [[-64.46364631708215 -7] -71.46364631708215]
Test Case: 987 | Input/Output: [[-94.19602767012896 -22] -116.19602767012896]
Test Case: 988 | Input/Output: [[19.028253801945766 -76] -56.971746198054234]
Test Case: 989 | Input/Output: [[56.24583669054181 -96] -39.75416330945819]
Test Case: 990 | Input/Output: [[-40.36784754726583 76] 35.63215245273417]
Test Case: 991 | Input/Output: [[80.37238753900942 -74] 6.372387539009424]
Test Case: 992 | Input/Output: [[-36.19711469409257 82] 45.80288530590743]
Test Case: 993 | Input/Output: [[40.33273990717413 79] 119.33273990717413]
Test Case: 994 | Input/Output: [[-29.975539002224025 75] 45.024460997775975]
Test Case: 995 | Input/Output: [[-71.30665622409944 75] 3.6933437759005585]
Test Case: 996 | Input/Output: [[94.4419324723952 -59] 35.441932472395195]
Test Case: 997 | Input/Output: [[66.05584001817931 -53] 13.05584001817931]
Test Case: 998 | Input/Output: [[-84.40906199649545 52] -32.40906199649545]
Test Case: 999 | Input/Output: [[74.8801134541003 -71] 3.8801134541002966]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove vector_boolean_pushall zip_insert_left_fromcode exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup vector_integer_butlast vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse exec_k vector_integer_yank float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times genome_dup return_code_pop char_swap integer_max return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank zip_shove vector_integer_flush vector_integer_subvec vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean integer_min exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add code_stackdepth exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse integer_swap string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.11.1-1-SNAPSHOTHash of last Git commit = 8a64f874173fae27ed1a77827849de0fade43c2b
GitHub link = https://github.com/lspector/Clojush/commit/8a64f874173fae27ed1a77827849de0fade43c2b
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = []
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :tournament
pop-when-tagging = true
population-size = 1000
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
random-screen = false
random-seed = 36 42 -84 -10 -16 85 77 55 117 -107 55 -48 120 -112 -35 9
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Number IO problem report - generation 0
Test total error for best: 61697.45370000005
Test mean error for best: 30.84873
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 56.0          
Correct output: -141.201628771 | Program output: -94.0         
Correct output: 23.3844813461  | Program output: 10.0          
Correct output: 91.3818662575  | Program output: 99.0          
Correct output: 6.0991287499   | Program output: -23.0         
Correct output: 90.6078865723  | Program output: 75.0          
Correct output: -16.3558496064 | Program output: 55.0          
Correct output: 85.2320058807  | Program output: 80.0          
Correct output: -28.7080490162 | Program output: -56.0         
Correct output: -10.4844827466 | Program output: 48.0          
Correct output: -59.408072605  | Program output: -81.0         
Correct output: 59.1228402624  | Program output: 15.0          
Correct output: -132.1998002816 | Program output: -97.0         
Correct output: -128.9949320478 | Program output: -54.0         
Correct output: -78.0962956202 | Program output: -40.0         
Correct output: -35.919351649  | Program output: -76.0         
Correct output: -56.0400311694 | Program output: -37.0         
Correct output: 137.4302481607 | Program output: 44.0          
Correct output: 32.7727726522  | Program output: 42.0          
Correct output: -26.6497561561 | Program output: 73.0          
Correct output: 95.3927116996  | Program output: 4.0           
Correct output: -65.8806745395 | Program output: -96.0         
Correct output: 48.7839285535  | Program output: 13.0          
Correct output: 176.7350863211 | Program output: 94.0          
Correct output: -87.9710392115 | Program output: -10.0         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_div} {:instruction float_pop} {:instruction tagged_349} {:instruction float_max} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_sin} {:instruction float_max} {:instruction in2} {:instruction float_max} {:instruction integer_shove} {:instruction integer_div} {:instruction float_sub} {:instruction integer_div} {:instruction float_stackdepth} {:instruction integer_add} {:instruction float_stackdepth} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_flush} {:instruction integer_sub} {:instruction float_stackdepth} {:instruction integer_sub} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction -87.46358223605336} {:instruction integer_div} {:instruction float_dup} {:instruction float_add} {:instruction integer_div} {:instruction -44} {:instruction float_mod} {:instruction float_shove} {:instruction integer_pop} {:instruction tag_float_613} {:instruction in2} {:instruction integer_mult} {:instruction float_mod} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_mult} {:instruction print_float} {:instruction float_sub} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction float_swap} {:instruction float_pop} {:instruction tag_float_918} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_min} {:instruction integer_add} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction tag_float_175} {:instruction float_add} {:instruction float_sub} {:instruction float_rot} {:instruction float_rot})
Best program: (integer_dup_times float_mult float_yankdup float_div float_pop tagged_349 float_max integer_dup float_yankdup float_sin float_max in2 float_max integer_shove integer_div float_sub integer_div float_stackdepth integer_add float_stackdepth float_dec integer_dup_items integer_sub integer_mult integer_flush integer_sub float_stackdepth integer_sub integer_dup integer_dup_items -87.46358223605336 integer_div float_dup float_add integer_div -44 float_mod float_shove integer_pop tag_float_613 in2 integer_mult float_mod float_frominteger integer_add float_mult print_float float_sub integer_mult float_pop integer_dup float_swap float_pop tag_float_918 integer_dup_items integer_swap float_min integer_add float_rot float_div float_pop float_yank tag_float_175 float_add float_sub float_rot float_rot)
Errors: [87.561 12 47.2016 10 13.3845 12 7.6181 11 29.0991 11 15.6079 11 71.3558 11 5.232 10 27.292 11 58.4845 12 21.5919 10 44.1228 11 35.1998 12 74.9949 12 38.0963 11 40.0806 11 19.04 11 93.4302 11 9.2272 11 99.6498 13 91.3927 12 30.1193 11 35.7839 12 82.7351 12 77.971 11]
Total: 1438.2720000000004
Mean: 28.76544
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 18296.7595123
Median total errors in population: 25340.0
Error averages by case: (731.3983155999981 13.428 739.8031175999997 13.326 700.1933275999999 12.655 721.4321355999995 13.13 708.6425469999994 11.874 717.6722139999987 12.558 707.0943097000011 13.279 717.0366606999996 12.541 714.920491699999 13.788 705.3559958000009 13.273 722.1177700999999 13.004 706.8542021000015 12.609 738.5790933999979 14.135 732.9204198000009 14.197 723.2373253999979 13.257 717.2713747000007 13.051 717.2555458999999 13.318 729.8283309999985 13.348 705.2873840999996 13.2 708.9010216000014 13.447 707.0456866000003 12.652 724.6384885999988 13.872 706.5912685999999 12.738 739.1735709000008 13.483 724.1119142000014 13.234)
Error minima by case: (0.4305 3 28.7984 2 0.3845 1 0.3819 9 2.0991 2 0.3921 2 0.3927 2 2.232 1 1.292 8 0.89 2 3.9203 7 1.1213 2 21.0861 2 17.8812 3 0.0963 1 1.9194 8 0.5523 2 0.5698 2 0.1916 8 0.6498 2 0.1513 1 0.0373 8 0.7839 2 9.0974 3 3.1255 1)
Average genome size in population (length): 49.096
Average program size in population (points): 50.096
Average percent parens in population: 0.044
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 1
Genome diversity (% unique Plush genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.301
Error (vector) diversity:			 0.328
Behavioral diversity:				 0.35
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 1231416
--- Timings ---
Current time: 1529614890153 milliseconds
Total Time:           3.5 seconds
Initialization:       0.1 seconds,  3.2%
Reproduction:         0.5 seconds, 15.3%
Fitness Testing:      2.9 seconds, 81.5%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Number IO problem report - generation 1
Test total error for best: 61697.45370000005
Test mean error for best: 30.84873
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 56.0          
Correct output: -141.201628771 | Program output: -94.0         
Correct output: 23.3844813461  | Program output: 10.0          
Correct output: 91.3818662575  | Program output: 99.0          
Correct output: 6.0991287499   | Program output: -23.0         
Correct output: 90.6078865723  | Program output: 75.0          
Correct output: -16.3558496064 | Program output: 55.0          
Correct output: 85.2320058807  | Program output: 80.0          
Correct output: -28.7080490162 | Program output: -56.0         
Correct output: -10.4844827466 | Program output: 48.0          
Correct output: -59.408072605  | Program output: -81.0         
Correct output: 59.1228402624  | Program output: 15.0          
Correct output: -132.1998002816 | Program output: -97.0         
Correct output: -128.9949320478 | Program output: -54.0         
Correct output: -78.0962956202 | Program output: -40.0         
Correct output: -35.919351649  | Program output: -76.0         
Correct output: -56.0400311694 | Program output: -37.0         
Correct output: 137.4302481607 | Program output: 44.0          
Correct output: 32.7727726522  | Program output: 42.0          
Correct output: -26.6497561561 | Program output: 73.0          
Correct output: 95.3927116996  | Program output: 4.0           
Correct output: -65.8806745395 | Program output: -96.0         
Correct output: 48.7839285535  | Program output: 13.0          
Correct output: 176.7350863211 | Program output: 94.0          
Correct output: -87.9710392115 | Program output: -10.0         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_div} {:instruction tagged_313} {:instruction tagged_349} {:instruction float_max} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_sin} {:instruction float_max} {:instruction in2} {:instruction float_max} {:instruction integer_shove} {:instruction integer_div} {:instruction float_sub} {:instruction integer_div} {:instruction float_stackdepth} {:instruction integer_add} {:instruction float_stackdepth} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_flush} {:instruction integer_sub} {:instruction float_stackdepth} {:instruction integer_sub} {:instruction float_rot} {:instruction integer_dup_items} {:instruction -87.46358223605336} {:instruction integer_div} {:instruction float_dup} {:instruction float_add} {:instruction integer_div} {:instruction -44} {:instruction float_mod} {:instruction float_shove} {:instruction integer_pop} {:instruction tag_float_613} {:instruction in2} {:instruction integer_mult} {:instruction float_mod} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_mult} {:instruction print_float} {:instruction float_sub} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction float_swap} {:instruction float_pop} {:instruction tag_float_918} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_min} {:instruction integer_add} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction tag_float_175} {:instruction float_add} {:instruction float_sub} {:instruction float_rot} {:instruction float_rot})
Best program: (integer_dup_times float_mult float_yankdup float_div tagged_313 tagged_349 float_max integer_dup float_yankdup float_sin float_max in2 float_max integer_shove integer_div float_sub integer_div float_stackdepth integer_add float_stackdepth float_dec integer_dup_items integer_sub integer_mult integer_flush integer_sub float_stackdepth integer_sub float_rot integer_dup_items -87.46358223605336 integer_div float_dup float_add integer_div -44 float_mod float_shove integer_pop tag_float_613 in2 integer_mult float_mod float_frominteger integer_add float_mult print_float float_sub integer_mult float_pop integer_dup float_swap float_pop tag_float_918 integer_dup_items integer_swap float_min integer_add float_rot float_div float_pop float_yank tag_float_175 float_add float_sub float_rot float_rot)
Errors: [87.561 12 47.2016 10 13.3845 12 7.6181 11 29.0991 11 15.6079 11 71.3558 11 5.232 10 27.292 11 58.4845 12 21.5919 10 44.1228 11 35.1998 12 74.9949 12 38.0963 11 40.0806 11 19.04 11 93.4302 11 9.2272 11 99.6498 13 91.3927 12 30.1193 11 35.7839 12 82.7351 12 77.971 11]
Total: 1438.2720000000004
Mean: 28.76544
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 6595.199717599998
Median total errors in population: 2161.5818000000004
Error averages by case: (284.17858359999707 11.215 295.7999524999984 10.887 210.11253009999763 10.564 259.2522963000004 12.107 221.3751993999998 9.872 251.93006030000092 10.354 232.39622719999852 10.879 248.88789479999835 10.254 234.88776670000064 12.483 226.6759654999991 10.799 253.07695220000014 11.868 229.52672260000185 10.53 291.7028042000007 11.578 285.30908019999845 11.832 255.13573090000148 10.825 244.6473312000007 12.061 242.507416500001 10.848 279.998260800001 11.018 223.62242600000033 12.21 243.83510720000245 11.254 247.7442353999988 10.627 261.08064870000067 12.699 226.27445270000106 10.802 305.4831286999982 11.465 260.08094389999826 10.647)
Error minima by case: (0.4305 3 30.0879 2 1.3845 1 0.3819 9 2.0991 2 0.3921 2 0.3927 2 3.232 1 1.292 8 0.89 2 0.5919 7 3.1228 2 21.0861 2 17.8812 3 0.0963 1 1.9194 8 0.5523 2 5.7002 2 0.1916 8 0.6498 2 0.1513 1 0.0373 8 0.7839 2 9.0974 3 2.029 1)
Average genome size in population (length): 57.517
Average program size in population (points): 58.517
Average percent parens in population: 0.022
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.512
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.777
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.777
Total error diversity:				 0.29
Error (vector) diversity:			 0.307
Behavioral diversity:				 0.333
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 2674944
--- Timings ---
Current time: 1529614895623 milliseconds
Total Time:           9.3 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         3.9 seconds, 41.7%
Fitness Testing:      4.6 seconds, 49.4%
Report:               0.7 seconds,  7.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Number IO problem report - generation 2
Test total error for best: 61731.45370000004
Test mean error for best: 30.86573
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 57.0          
Correct output: -141.201628771 | Program output: -93.0         
Correct output: 23.3844813461  | Program output: 11.0          
Correct output: 91.3818662575  | Program output: 100.0         
Correct output: 6.0991287499   | Program output: -22.0         
Correct output: 90.6078865723  | Program output: 76.0          
Correct output: -16.3558496064 | Program output: 56.0          
Correct output: 85.2320058807  | Program output: 81.0          
Correct output: -28.7080490162 | Program output: -55.0         
Correct output: -10.4844827466 | Program output: 49.0          
Correct output: -59.408072605  | Program output: -80.0         
Correct output: 59.1228402624  | Program output: 16.0          
Correct output: -132.1998002816 | Program output: -96.0         
Correct output: -128.9949320478 | Program output: -53.0         
Correct output: -78.0962956202 | Program output: -39.0         
Correct output: -35.919351649  | Program output: -75.0         
Correct output: -56.0400311694 | Program output: -36.0         
Correct output: 137.4302481607 | Program output: 45.0          
Correct output: 32.7727726522  | Program output: 43.0          
Correct output: -26.6497561561 | Program output: 74.0          
Correct output: 95.3927116996  | Program output: 5.0           
Correct output: -65.8806745395 | Program output: -95.0         
Correct output: 48.7839285535  | Program output: 14.0          
Correct output: 176.7350863211 | Program output: 95.0          
Correct output: -87.9710392115 | Program output: -9.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction integer_sub} {:instruction integer_dup_items} {:instruction float_yank} {:instruction integer_min} {:instruction integer_flush} {:instruction float_mult} {:instruction float_shove} {:instruction float_tan} {:instruction integer_dec} {:instruction float_max} {:instruction -80} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction integer_dup} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction -6} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_cos} {:instruction in2} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction integer_stackdepth} {:instruction print_float} {:instruction integer_mult} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction float_swap} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction tag_integer_113} {:instruction integer_yankdup} {:instruction integer_max} {:instruction float_dup} {:instruction integer_dup_items} {:instruction float_tan} {:instruction float_stackdepth} {:instruction integer_dup_times} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_dec})
Best program: (float_dup integer_sub integer_dup_items float_yank integer_min integer_flush float_mult float_shove float_tan integer_dec float_max -80 float_rot -83 integer_div 53.660195741514 integer_dup float_max float_dup_items integer_dup_times float_dup integer_rot float_swap float_yankdup -6 42.446747745532946 float_yank float_cos in2 integer_inc float_frominteger integer_dup_items integer_stackdepth print_float integer_mult integer_dup_items integer_sub float_swap float_stackdepth integer_dec tag_integer_113 integer_yankdup integer_max float_dup integer_dup_items float_tan float_stackdepth integer_dup_times integer_swap integer_dup_times float_dup_items integer_shove float_yankdup float_yankdup integer_dec)
Errors: [86.561 12 48.2016 11 12.3845 12 8.6181 12 28.0991 11 14.6079 11 72.3558 11 4.232 10 26.292 11 59.4845 13 20.5919 9 43.1228 11 36.1998 12 75.9949 12 39.0963 11 39.0806 10 20.04 10 92.4302 12 10.2272 12 100.6498 13 90.3927 11 29.1193 10 34.7839 12 81.7351 12 78.971 11]
Total: 1435.2720000000004
Mean: 28.70544
Genome size: 55
Size: 56
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 4454.111243499996
Median total errors in population: 1467.2720000000004
Error averages by case: (194.69745949999802 10.388 185.43675220000017 10.244 130.06297100000003 9.931 156.75879230000078 11.853 148.03432260000073 9.315 153.76945060000122 9.463 178.4711531999991 10.151 147.95718460000086 9.188 156.40584019999937 12.373 169.01422859999997 10.197 160.8844701999997 11.431 152.69060850000005 10.012 178.76809510000086 10.997 191.38328669999913 11.237 163.43236280000147 10.107 169.265101599999 11.625 150.39141969999955 10.236 195.0186898000012 10.217 139.9717724999987 11.806 200.0486575000025 10.848 167.11795429999842 10.353 169.7443358000001 12.397 145.92778539999955 10.107 203.91648279999907 11.442 179.45206599999923 9.572)
Error minima by case: (31.561 3 46.7984 2 3.3845 1 7.6181 8 2.2009 2 14.6079 2 0.3927 2 4.232 1 1.292 9 0.89 2 0.5919 8 8.6375 2 35.1998 2 20.9949 3 1.9037 1 9.9194 8 17.8866 2 43.0 2 3.2272 9 0.6498 2 3.0 1 4.1193 9 1.7014 2 11.2649 3 2.029 1)
Average genome size in population (length): 49.716
Average program size in population (points): 50.716
Average percent parens in population: 0.027
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.0395
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 42
Genome diversity (% unique Plush genomes):	 0.648
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.648
Total error diversity:				 0.121
Error (vector) diversity:			 0.125
Behavioral diversity:				 0.139
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 3921733
--- Timings ---
Current time: 1529614899011 milliseconds
Total Time:          12.6 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         5.4 seconds, 42.8%
Fitness Testing:      5.9 seconds, 47.0%
Report:               1.2 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Number IO problem report - generation 3
Test total error for best: 61481.453700000035
Test mean error for best: 30.74073
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 56.00         
Correct output: -141.201628771 | Program output: -94.00        
Correct output: 23.3844813461  | Program output: 10.00         
Correct output: 91.3818662575  | Program output: 99.00         
Correct output: 6.0991287499   | Program output: -23.00        
Correct output: 90.6078865723  | Program output: 75.00         
Correct output: -16.3558496064 | Program output: 55.00         
Correct output: 85.2320058807  | Program output: 80.00         
Correct output: -28.7080490162 | Program output: -56.00        
Correct output: -10.4844827466 | Program output: 48.00         
Correct output: -59.408072605  | Program output: -81.00        
Correct output: 59.1228402624  | Program output: 15.00         
Correct output: -132.1998002816 | Program output: -97.00        
Correct output: -128.9949320478 | Program output: -54.00        
Correct output: -78.0962956202 | Program output: -40.00        
Correct output: -35.919351649  | Program output: -76.00        
Correct output: -56.0400311694 | Program output: -37.00        
Correct output: 137.4302481607 | Program output: 44.00         
Correct output: 32.7727726522  | Program output: 42.00         
Correct output: -26.6497561561 | Program output: 73.00         
Correct output: 95.3927116996  | Program output: 4.00          
Correct output: -65.8806745395 | Program output: -96.00        
Correct output: 48.7839285535  | Program output: 13.00         
Correct output: 176.7350863211 | Program output: 94.00         
Correct output: -87.9710392115 | Program output: -10.00        
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_div} {:instruction float_pop} {:instruction tagged_349} {:instruction float_max} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_sin} {:instruction float_max} {:instruction in2} {:instruction float_max} {:instruction integer_shove} {:instruction integer_div} {:instruction float_sub} {:instruction integer_div} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_shove} {:instruction float_swap} {:instruction integer_dup_items} {:instruction float_shove} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_max} {:instruction integer_dup} {:instruction integer_shove} {:instruction float_cos} {:instruction integer_add} {:instruction float_dup_items} {:instruction tag_integer_779} {:instruction integer_rot} {:instruction float_yankdup} {:instruction -44} {:instruction float_mod} {:instruction float_shove} {:instruction integer_pop} {:instruction tag_float_613} {:instruction in2} {:instruction integer_mult} {:instruction float_mod} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_mult} {:instruction print_float} {:instruction float_sub} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction float_swap} {:instruction float_pop} {:instruction tag_float_918} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction tag_float_175} {:instruction float_mod} {:instruction float_sub} {:instruction float_min} {:instruction print_integer} {:instruction float_rot})
Best program: (integer_dup_times float_mult float_yankdup float_div float_pop tagged_349 float_max integer_dup float_yankdup float_sin float_max in2 float_max integer_shove integer_div float_sub integer_div float_stackdepth float_sub integer_shove float_swap integer_dup_items float_shove integer_pop integer_pop integer_max integer_dup integer_shove float_cos integer_add float_dup_items tag_integer_779 integer_rot float_yankdup -44 float_mod float_shove integer_pop tag_float_613 in2 integer_mult float_mod float_frominteger integer_add float_mult print_float float_sub integer_mult float_pop integer_dup float_swap float_pop tag_float_918 integer_dup_items integer_swap float_min float_stackdepth float_rot float_div float_pop float_yank tag_float_175 float_mod float_sub float_min print_integer float_rot)
Errors: [87.561 12 47.2016 10 13.3845 12 7.6181 11 29.0991 11 15.6079 11 71.3558 11 5.232 9 27.292 10 58.4845 12 21.5919 9 44.1228 11 35.1998 11 74.9949 12 38.0963 10 40.0806 11 19.04 10 93.4302 11 9.2272 11 99.6498 13 91.3927 12 30.1193 11 35.7839 12 82.7351 12 77.971 11]
Total: 1432.2720000000004
Mean: 28.64544
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 4283.6024741000165
Median total errors in population: 1456.2720000000004
Error averages by case: (195.65916389999714 12.145 164.5800389000003 11.767 127.3253178000001 12.059 125.7035717000026 11.902 146.6441785000018 11.069 132.46768640000175 11.147 179.45972879999914 11.874 123.39522020000236 10.929 146.25155599999974 11.995 168.26333900000006 12.144 141.57039549999956 10.905 155.500645 11.77 154.12060700000143 12.927 188.4624109999992 12.925 156.0951436000019 11.924 157.35319279999888 11.197 139.45610979999827 11.894 200.62970140000184 11.936 126.04059889999797 11.921 204.05768380000362 13.044 174.6820538999976 12.62 148.9966576000009 11.909 147.81916159999935 12.104 192.08185229999927 13.413 188.17045869999905 11.296)
Error minima by case: (86.561 7 33.7255 7 12.3845 6 6.6181 10 0.4007 7 14.6079 7 2.8423 7 4.232 5 26.292 10 3.7811 7 20.5919 9 19.1228 7 34.1998 8 38.9949 9 11.9037 7 35.9194 10 18.04 8 92.4302 7 7.2272 10 9.9699 7 50.3927 5 24.1193 10 8.7839 7 81.7351 7 2.029 6)
Average genome size in population (length): 47.118
Average program size in population (points): 48.118
Average percent parens in population: 0.029
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.56025
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 60
Genome diversity (% unique Plush genomes):	 0.627
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 60
Syntactic diversity (% unique Push programs):	 0.627
Total error diversity:				 0.051
Error (vector) diversity:			 0.054
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 5102283
--- Timings ---
Current time: 1529614902671 milliseconds
Total Time:          16.3 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         7.3 seconds, 44.6%
Fitness Testing:      7.3 seconds, 44.6%
Report:               1.6 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Number IO problem report - generation 4
Test total error for best: 61481.453700000035
Test mean error for best: 30.74073
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 56.00         
Correct output: -141.201628771 | Program output: -94.00        
Correct output: 23.3844813461  | Program output: 10.00         
Correct output: 91.3818662575  | Program output: 99.00         
Correct output: 6.0991287499   | Program output: -23.00        
Correct output: 90.6078865723  | Program output: 75.00         
Correct output: -16.3558496064 | Program output: 55.00         
Correct output: 85.2320058807  | Program output: 80.00         
Correct output: -28.7080490162 | Program output: -56.00        
Correct output: -10.4844827466 | Program output: 48.00         
Correct output: -59.408072605  | Program output: -81.00        
Correct output: 59.1228402624  | Program output: 15.00         
Correct output: -132.1998002816 | Program output: -97.00        
Correct output: -128.9949320478 | Program output: -54.00        
Correct output: -78.0962956202 | Program output: -40.00        
Correct output: -35.919351649  | Program output: -76.00        
Correct output: -56.0400311694 | Program output: -37.00        
Correct output: 137.4302481607 | Program output: 44.00         
Correct output: 32.7727726522  | Program output: 42.00         
Correct output: -26.6497561561 | Program output: 73.00         
Correct output: 95.3927116996  | Program output: 4.00          
Correct output: -65.8806745395 | Program output: -96.00        
Correct output: 48.7839285535  | Program output: 13.00         
Correct output: 176.7350863211 | Program output: 94.00         
Correct output: -87.9710392115 | Program output: -10.00        
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_div} {:instruction float_pop} {:instruction tagged_349} {:instruction float_max} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_sin} {:instruction float_max} {:instruction in2} {:instruction float_max} {:instruction integer_shove} {:instruction integer_div} {:instruction float_sub} {:instruction integer_div} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_shove} {:instruction float_swap} {:instruction integer_dup_items} {:instruction float_shove} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_max} {:instruction integer_dup} {:instruction integer_shove} {:instruction float_cos} {:instruction integer_add} {:instruction float_dup_items} {:instruction tag_integer_779} {:instruction integer_rot} {:instruction float_yankdup} {:instruction -44} {:instruction float_mod} {:instruction float_shove} {:instruction integer_pop} {:instruction tag_float_613} {:instruction in2} {:instruction integer_mult} {:instruction float_mod} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_mult} {:instruction print_float} {:instruction float_sub} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction float_swap} {:instruction float_pop} {:instruction tag_float_918} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction tag_float_175} {:instruction float_mod} {:instruction float_sub} {:instruction float_min} {:instruction print_integer} {:instruction float_rot})
Best program: (integer_dup_times float_mult float_yankdup float_div float_pop tagged_349 float_max integer_dup float_yankdup float_sin float_max in2 float_max integer_shove integer_div float_sub integer_div float_stackdepth float_sub integer_shove float_swap integer_dup_items float_shove integer_pop integer_pop integer_max integer_dup integer_shove float_cos integer_add float_dup_items tag_integer_779 integer_rot float_yankdup -44 float_mod float_shove integer_pop tag_float_613 in2 integer_mult float_mod float_frominteger integer_add float_mult print_float float_sub integer_mult float_pop integer_dup float_swap float_pop tag_float_918 integer_dup_items integer_swap float_min float_stackdepth float_rot float_div float_pop float_yank tag_float_175 float_mod float_sub float_min print_integer float_rot)
Errors: [87.561 12 47.2016 10 13.3845 12 7.6181 11 29.0991 11 15.6079 11 71.3558 11 5.232 9 27.292 10 58.4845 12 21.5919 9 44.1228 11 35.1998 11 74.9949 12 38.0963 10 40.0806 11 19.04 10 93.4302 11 9.2272 11 99.6498 13 91.3927 12 30.1193 11 35.7839 12 82.7351 12 77.971 11]
Total: 1432.2720000000004
Mean: 28.64544
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3722.221717700014
Median total errors in population: 1438.2720000000004
Error averages by case: (175.90428179999827 12.128 143.50915490000028 10.892 101.47003270000009 12.048 105.35651800000178 11.514 120.93880380000222 11.071 111.6139018000016 11.114 157.1321364000001 11.358 101.90408510000198 10.483 122.02567630000087 11.483 145.83821950000174 12.265 118.15005059999959 10.312 130.97227779999832 11.277 132.89423140000127 12.441 166.9439085999998 12.427 133.27921700000155 11.429 133.3344894000008 11.098 115.80920269999824 11.285 180.74108630000177 11.538 103.42624459999895 11.564 182.01856900000274 13.026 163.73563539999776 12.009 126.06397060000175 11.298 122.70632829999846 12.119 172.95807549999986 12.381 163.62162019999988 11.314)
Error minima by case: (31.561 6 33.7255 6 3.3845 5 6.6181 10 4.0125 7 14.6079 5 10.3558 6 4.232 3 22.708 10 4.4845 6 7.8726 8 5.3216 6 34.1998 6 45.9322 7 10.8156 6 29.9194 8 11.2407 6 49.4302 6 8.2272 9 20.6498 6 41.4421 4 1.4 7 5.2225 5 11.2649 6 20.6904 5)
Average genome size in population (length): 61.044
Average program size in population (points): 62.044
Average percent parens in population: 0.018
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 6.08075
Median age in population: 6.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.713
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.713
Total error diversity:				 0.051
Error (vector) diversity:			 0.053
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 6628908
--- Timings ---
Current time: 1529614906357 milliseconds
Total Time:          19.9 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         9.0 seconds, 45.1%
Fitness Testing:      8.8 seconds, 43.9%
Report:               2.1 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Number IO problem report - generation 5
Test total error for best: 61517.453700000035
Test mean error for best: 30.75873
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 57.00         
Correct output: -141.201628771 | Program output: -93.00        
Correct output: 23.3844813461  | Program output: 11.00         
Correct output: 91.3818662575  | Program output: 100.00        
Correct output: 6.0991287499   | Program output: -22.00        
Correct output: 90.6078865723  | Program output: 76.00         
Correct output: -16.3558496064 | Program output: 56.00         
Correct output: 85.2320058807  | Program output: 81.00         
Correct output: -28.7080490162 | Program output: -55.00        
Correct output: -10.4844827466 | Program output: 49.00         
Correct output: -59.408072605  | Program output: -80.00        
Correct output: 59.1228402624  | Program output: 16.00         
Correct output: -132.1998002816 | Program output: -96.00        
Correct output: -128.9949320478 | Program output: -53.00        
Correct output: -78.0962956202 | Program output: -39.00        
Correct output: -35.919351649  | Program output: -75.00        
Correct output: -56.0400311694 | Program output: -36.00        
Correct output: 137.4302481607 | Program output: 45.00         
Correct output: 32.7727726522  | Program output: 43.00         
Correct output: -26.6497561561 | Program output: 74.00         
Correct output: 95.3927116996  | Program output: 5.00          
Correct output: -65.8806745395 | Program output: -95.00        
Correct output: 48.7839285535  | Program output: 14.00         
Correct output: 176.7350863211 | Program output: 95.00         
Correct output: -87.9710392115 | Program output: -9.00         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_div} {:instruction float_pop} {:instruction tagged_349} {:instruction float_max} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_sin} {:instruction float_max} {:instruction float_sub} {:instruction integer_div} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_shove} {:instruction float_swap} {:instruction integer_dup_items} {:instruction float_shove} {:instruction float_dup} {:instruction integer_pop} {:instruction integer_max} {:instruction integer_dup} {:instruction integer_shove} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_dec} {:instruction float_tan} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_max} {:instruction integer_dup} {:instruction integer_add} {:instruction integer_dec} {:instruction in1} {:instruction integer_swap} {:instruction float_tan} {:instruction in1} {:instruction in2} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_sub} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction float_swap} {:instruction float_pop} {:instruction tag_float_918} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction tag_float_175} {:instruction float_mod} {:instruction float_sub} {:instruction float_min} {:instruction print_integer} {:instruction float_rot})
Best program: (integer_dup_times float_mult float_yankdup float_div float_pop tagged_349 float_max integer_dup float_yankdup float_sin float_max float_sub integer_div float_stackdepth float_sub integer_shove float_swap integer_dup_items float_shove float_dup integer_pop integer_max integer_dup integer_shove float_max float_dup_items integer_dup_items float_frominteger integer_flush integer_dec float_tan float_div float_frominteger integer_max integer_dup integer_add integer_dec in1 integer_swap float_tan in1 in2 integer_inc float_frominteger integer_dup_items print_float float_sub integer_mult float_pop integer_dup float_swap float_pop tag_float_918 integer_dup_items integer_swap float_min float_stackdepth float_rot float_div float_pop float_yank tag_float_175 float_mod float_sub float_min print_integer float_rot)
Errors: [86.561 12 48.2016 11 12.3845 12 8.6181 12 28.0991 11 14.6079 11 72.3558 11 4.232 9 26.292 10 59.4845 13 20.5919 9 43.1228 11 36.1998 11 75.9949 12 39.0963 10 39.0806 10 20.04 9 92.4302 11 10.2272 12 100.6498 13 90.3927 11 29.1193 10 34.7839 12 81.7351 12 78.971 11]
Total: 1429.2720000000004
Mean: 28.58544
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3622.3873585000138
Median total errors in population: 1438.2720000000004
Error averages by case: (171.59994379999802 12.075 139.8663578000003 10.735 95.08442920000009 11.977 101.70505560000177 11.629 116.46806420000227 11.066 107.50318880000158 11.081 154.17099290000013 11.163 97.70511700000199 10.206 120.07234090000087 11.198 142.84823140000123 12.487 115.94487949999959 9.804 124.78758779999846 11.087 129.51726750000114 12.133 163.90212780000004 12.11 129.90198040000152 11.087 131.4973081000007 10.71 112.95688179999817 10.663 176.32809360000158 11.591 99.87576219999876 11.617 179.26410550000287 12.948 162.27080199999781 11.533 124.14284650000192 10.791 116.41202759999832 12.01 167.82752769999985 12.053 155.86343890000026 11.117)
Error minima by case: (56.0 3 33.7255 2 5.2205 1 6.6181 9 4.0991 2 14.6079 2 11.3558 2 4.232 1 23.708 9 5.4845 2 20.5919 8 5.4626 2 34.1998 2 41.5313 3 9.3673 1 30.9194 9 18.04 2 44.0 2 4.1677 9 21.6498 2 4.0 1 21.5829 9 4.8763 2 11.4582 3 0.5075 1)
Average genome size in population (length): 63.813
Average program size in population (points): 64.813
Average percent parens in population: 0.016
Minimum age in population: 5.0
Maximum age in population: 9.5
Average age in population: 7.701625
Median age in population: 7.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 32
Genome diversity (% unique Plush genomes):	 0.76
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.76
Total error diversity:				 0.067
Error (vector) diversity:			 0.069
Behavioral diversity:				 0.072
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 8224583
--- Timings ---
Current time: 1529614910332 milliseconds
Total Time:          24.0 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        11.0 seconds, 45.7%
Fitness Testing:     10.3 seconds, 42.9%
Report:               2.6 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Number IO problem report - generation 6
Test total error for best: 61280.85369999996
Test mean error for best: 30.64043
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 57.02         
Correct output: -141.201628771 | Program output: -93.02        
Correct output: 23.3844813461  | Program output: 11.02         
Correct output: 91.3818662575  | Program output: 100.02        
Correct output: 6.0991287499   | Program output: -22.02        
Correct output: 90.6078865723  | Program output: 76.02         
Correct output: -16.3558496064 | Program output: 56.02         
Correct output: 85.2320058807  | Program output: 81.02         
Correct output: -28.7080490162 | Program output: -55.02        
Correct output: -10.4844827466 | Program output: 49.02         
Correct output: -59.408072605  | Program output: -80.02        
Correct output: 59.1228402624  | Program output: 16.02         
Correct output: -132.1998002816 | Program output: -96.02        
Correct output: -128.9949320478 | Program output: -53.02        
Correct output: -78.0962956202 | Program output: -39.02        
Correct output: -35.919351649  | Program output: -75.02        
Correct output: -56.0400311694 | Program output: -36.02        
Correct output: 137.4302481607 | Program output: 45.02         
Correct output: 32.7727726522  | Program output: 43.02         
Correct output: -26.6497561561 | Program output: 74.02         
Correct output: 95.3927116996  | Program output: 5.02          
Correct output: -65.8806745395 | Program output: -95.02        
Correct output: 48.7839285535  | Program output: 14.02         
Correct output: 176.7350863211 | Program output: 95.02         
Correct output: -87.9710392115 | Program output: -9.02         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_div} {:instruction float_pop} {:instruction tagged_349} {:instruction float_max} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_sin} {:instruction float_max} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 93} {:instruction integer_yank} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction float_dup_items} {:instruction integer_fromfloat} {:instruction float_sin} {:instruction float_add} {:instruction integer_dup_items} {:instruction float_min} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction float_add} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction -6} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_cos} {:instruction in2} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction integer_stackdepth} {:instruction print_float} {:instruction integer_mult} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction float_swap} {:instruction float_shove} {:instruction float_frominteger} {:instruction float_swap} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction float_swap} {:instruction float_pop} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction tag_float_175} {:instruction float_mod} {:instruction float_sub} {:instruction float_min} {:instruction print_integer} {:instruction float_rot})
Best program: (integer_dup_times float_mult float_yankdup float_div float_pop tagged_349 float_max integer_dup float_yankdup float_sin float_max in1 float_mod float_tan 93 integer_yank integer_sub integer_mod integer_mod float_yankdup integer_stackdepth integer_flush float_dup_items integer_fromfloat float_sin float_add integer_dup_items float_min float_rot -83 integer_div 53.660195741514 float_add float_max float_dup_items integer_dup_times float_dup integer_rot float_swap float_dup integer_rot float_swap float_yankdup -6 42.446747745532946 float_yank float_cos in2 integer_inc float_frominteger integer_dup_items integer_stackdepth print_float integer_mult integer_dup_items integer_sub float_swap float_shove float_frominteger float_swap integer_mult float_pop integer_dup float_swap float_pop float_dup integer_dup_items integer_swap float_min float_stackdepth float_rot float_div float_pop float_yank tag_float_175 float_mod float_sub float_min print_integer float_rot)
Errors: [86.541 12 48.1816 10 12.3645 12 8.6381 11 28.1191 11 14.5879 10 72.3758 11 4.212 10 26.312 10 59.5045 12 20.6119 9 43.1028 10 36.1798 11 75.9749 12 39.0763 10 39.1006 10 20.02 10 92.4102 11 10.2472 11 100.6698 13 90.3727 10 29.1393 10 34.7639 11 81.7151 11 78.951 10]
Total: 1421.172
Mean: 28.42344
Genome size: 80
Size: 81
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3483.9626021000154
Median total errors in population: 1435.2720000000004
Error averages by case: (165.79361749999845 12.1 132.28333380000032 11.028 96.3383161000001 12.028 95.2238757000021 11.91 110.44123700000269 11.084 100.74421420000165 11.081 149.63000820000062 11.136 91.4528330000023 10.073 109.78165450000095 11.067 138.08135400000216 12.799 105.67137679999954 9.373 124.2702370999983 11.096 121.43120160000129 12.038 156.29607200000038 12.18 122.12505080000166 10.983 121.25502470000086 10.403 104.61645809999783 10.254 170.74393150000176 11.879 94.95659069999866 11.91 174.92834250000266 13.004 164.37708469999765 11.286 113.450800100002 10.474 116.4357250999981 12.048 162.6735182000004 12.079 156.49774420000028 11.15)
Error minima by case: (54.561 3 46.2016 2 10.0 1 2.3819 10 5.0171 2 1.6079 2 10.3558 2 3.768 1 22.708 9 4.4845 2 20.5919 8 5.4626 2 34.1998 2 54.0 3 37.0963 1 29.9194 9 18.04 2 44.0 2 8.2272 9 20.6498 2 4.0 1 29.1193 9 4.8763 2 81.7151 3 10.0 1)
Average genome size in population (length): 61.822
Average program size in population (points): 62.822
Average percent parens in population: 0.016
Minimum age in population: 6.875
Maximum age in population: 11.03125
Average age in population: 9.30175
Median age in population: 9.359375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 31
Genome diversity (% unique Plush genomes):	 0.767
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.767
Total error diversity:				 0.061
Error (vector) diversity:			 0.066
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 9770408
--- Timings ---
Current time: 1529614913902 milliseconds
Total Time:          27.5 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        12.6 seconds, 45.7%
Fitness Testing:     11.8 seconds, 42.8%
Report:               3.1 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Number IO problem report - generation 7
Test total error for best: 60925.95369999995
Test mean error for best: 30.46298
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 57.075        
Correct output: -141.201628771 | Program output: -93.075       
Correct output: 23.3844813461  | Program output: 11.075        
Correct output: 91.3818662575  | Program output: 100.075       
Correct output: 6.0991287499   | Program output: -22.075       
Correct output: 90.6078865723  | Program output: 76.075        
Correct output: -16.3558496064 | Program output: 56.075        
Correct output: 85.2320058807  | Program output: 81.075        
Correct output: -28.7080490162 | Program output: -55.075       
Correct output: -10.4844827466 | Program output: 49.075        
Correct output: -59.408072605  | Program output: -80.075       
Correct output: 59.1228402624  | Program output: 16.075        
Correct output: -132.1998002816 | Program output: -96.075       
Correct output: -128.9949320478 | Program output: -53.075       
Correct output: -78.0962956202 | Program output: -39.075       
Correct output: -35.919351649  | Program output: -75.075       
Correct output: -56.0400311694 | Program output: -36.075       
Correct output: 137.4302481607 | Program output: 45.075        
Correct output: 32.7727726522  | Program output: 43.075        
Correct output: -26.6497561561 | Program output: 74.075        
Correct output: 95.3927116996  | Program output: 5.075         
Correct output: -65.8806745395 | Program output: -95.075       
Correct output: 48.7839285535  | Program output: 14.075        
Correct output: 176.7350863211 | Program output: 95.075        
Correct output: -87.9710392115 | Program output: -9.075        
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 93} {:instruction integer_yank} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_flush} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_sub} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction -87.46358223605336} {:instruction integer_div} {:instruction integer_div} {:instruction float_max} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction 12.307124631169899} {:instruction float_sin} {:instruction float_mod} {:instruction integer_pop} {:instruction float_min} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction integer_dup} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction -6} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_cos} {:instruction in2} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction integer_stackdepth} {:instruction print_float} {:instruction integer_mult} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction float_swap} {:instruction float_shove} {:instruction float_frominteger} {:instruction float_swap} {:instruction 75} {:instruction float_min} {:instruction print_integer} {:instruction float_rot})
Best program: (float_yankdup in1 float_mod float_tan 93 integer_yank integer_sub integer_mod integer_flush integer_sub float_mult integer_sub integer_dup integer_dup_items -87.46358223605336 integer_div integer_div float_max float_stackdepth integer_pop 12.307124631169899 float_sin float_mod integer_pop float_min float_rot -83 integer_div 53.660195741514 integer_dup float_max float_dup_items integer_dup_times float_dup integer_rot float_swap float_yankdup -6 42.446747745532946 float_yank float_cos in2 integer_inc float_frominteger integer_dup_items integer_stackdepth print_float integer_mult integer_dup_items integer_sub float_swap float_shove float_frominteger float_swap 75 float_min print_integer float_rot)
Errors: [86.486 10 48.1266 10 12.3095 12 8.6931 10 28.1741 11 14.5329 9 72.4308 11 4.157 9 26.367 11 59.5595 12 20.6669 8 43.0478 11 36.1248 12 75.9199 11 39.0213 10 39.1556 9 19.965 10 92.3552 12 10.3022 10 100.7248 11 90.3177 10 29.1943 8 34.7089 11 81.6601 12 78.896 10]
Total: 1412.8970000000002
Mean: 28.25794
Genome size: 58
Size: 59
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2849.7955792000153
Median total errors in population: 1432.2720000000004
Error averages by case: (144.10893959999993 12.082 107.8910664000003 10.638 66.4584106000001 12.026 71.90584840000045 11.527 83.02797390000116 11.038 77.57421200000128 11.059 123.86858360000159 11.154 68.51487580000163 9.668 84.40174700000088 10.657 112.06132370000172 12.428 80.16852879999958 9.36 97.13130999999858 11.066 96.92269780000099 11.627 131.7136801000019 12.159 96.33359480000085 10.605 95.47822660000078 10.773 78.27870959999932 10.238 149.02558050000164 11.47 69.5020786000001 11.529 149.50057480000098 13.024 137.32605429999782 11.623 88.41552920000068 10.838 88.57923969999914 12.03 141.98384350000114 12.049 127.81794990000186 11.137)
Error minima by case: (56.0 4 47.1916 3 5.2152 2 7.6181 10 5.0171 3 14.5329 3 15.8343 3 4.157 2 15.292 9 9.5307 3 15.4081 8 5.4626 3 35.1898 3 46.9949 4 3.9037 2 8.0806 9 12.04 3 44.0 3 9.2272 10 17.3502 3 4.0 2 16.1193 8 4.8763 3 81.6601 4 5.971 2)
Average genome size in population (length): 65.551
Average program size in population (points): 66.551
Average percent parens in population: 0.015
Minimum age in population: 7.875
Maximum age in population: 12.65625
Average age in population: 10.8718125
Median age in population: 10.921875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 43
Genome diversity (% unique Plush genomes):	 0.775
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.775
Total error diversity:				 0.053
Error (vector) diversity:			 0.053
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 11409433
--- Timings ---
Current time: 1529614917572 milliseconds
Total Time:          31.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.3 seconds, 45.7%
Fitness Testing:     13.3 seconds, 42.7%
Report:               3.5 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Number IO problem report - generation 8
Test total error for best: 60787.95369999995
Test mean error for best: 30.39398
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 57.0750       
Correct output: -141.201628771 | Program output: -93.0750      
Correct output: 23.3844813461  | Program output: 11.0750       
Correct output: 91.3818662575  | Program output: 100.0750      
Correct output: 6.0991287499   | Program output: -22.0750      
Correct output: 90.6078865723  | Program output: 76.0750       
Correct output: -16.3558496064 | Program output: 56.0750       
Correct output: 85.2320058807  | Program output: 81.0750       
Correct output: -28.7080490162 | Program output: -55.0750      
Correct output: -10.4844827466 | Program output: 49.0750       
Correct output: -59.408072605  | Program output: -80.0750      
Correct output: 59.1228402624  | Program output: 16.0750       
Correct output: -132.1998002816 | Program output: -96.0750      
Correct output: -128.9949320478 | Program output: -53.0750      
Correct output: -78.0962956202 | Program output: -39.0750      
Correct output: -35.919351649  | Program output: -75.0750      
Correct output: -56.0400311694 | Program output: -36.0750      
Correct output: 137.4302481607 | Program output: 45.0750       
Correct output: 32.7727726522  | Program output: 43.0750       
Correct output: -26.6497561561 | Program output: 74.0750       
Correct output: 95.3927116996  | Program output: 5.0750        
Correct output: -65.8806745395 | Program output: -95.0750      
Correct output: 48.7839285535  | Program output: 14.0750       
Correct output: 176.7350863211 | Program output: 95.0750       
Correct output: -87.9710392115 | Program output: -9.0750       
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 93} {:instruction integer_yank} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_flush} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_sub} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction -87.46358223605336} {:instruction integer_div} {:instruction integer_div} {:instruction float_max} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction 12.307124631169899} {:instruction float_sin} {:instruction float_mod} {:instruction integer_pop} {:instruction float_min} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction integer_dup} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction -6} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_cos} {:instruction in2} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction integer_stackdepth} {:instruction print_float} {:instruction integer_mult} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_frominteger} {:instruction float_swap} {:instruction 75} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction float_swap} {:instruction float_pop} {:instruction tag_float_918} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_min} {:instruction integer_add} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction tag_float_175} {:instruction float_add} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction tag_float_175} {:instruction float_mod} {:instruction float_sub} {:instruction float_min} {:instruction print_integer} {:instruction float_rot})
Best program: (float_yankdup in1 float_mod float_tan 93 integer_yank integer_sub integer_mod integer_flush integer_sub float_mult integer_sub integer_dup integer_dup_items -87.46358223605336 integer_div integer_div float_max float_stackdepth integer_pop 12.307124631169899 float_sin float_mod integer_pop float_min float_rot -83 integer_div 53.660195741514 integer_dup float_max float_dup_items integer_dup_times float_dup integer_rot float_swap float_yankdup -6 42.446747745532946 float_yank float_cos in2 integer_inc float_frominteger integer_dup_items integer_stackdepth print_float integer_mult integer_dup_items integer_sub integer_dup_times float_shove float_frominteger float_swap 75 float_min print_integer integer_mult float_pop integer_dup float_swap float_pop tag_float_918 integer_dup_items integer_swap float_min integer_add float_rot float_div float_pop float_yank tag_float_175 float_add float_stackdepth float_rot float_div float_pop float_yank tag_float_175 float_mod float_sub float_min print_integer float_rot)
Errors: [86.486 11 48.1266 10 12.3095 12 8.6931 11 28.1741 11 14.5329 9 72.4308 10 4.157 8 26.367 10 59.5595 12 20.6669 8 43.0478 11 36.1248 12 75.9199 12 39.0213 9 39.1556 9 19.965 9 92.3552 11 10.3022 10 100.7248 11 90.3177 10 29.1943 8 34.7089 11 81.6601 11 78.896 10]
Total: 1408.8970000000002
Mean: 28.17794
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2417.309633200015
Median total errors in population: 1432.2720000000004
Error averages by case: (127.41263820000121 12.026 93.6267370000003 10.435 45.2831579000001 11.946 53.45077919999979 11.397 66.46049709999977 10.959 59.84454930000097 10.965 105.44235320000095 11.093 50.255370100000974 9.313 68.22229050000065 10.26 93.58142220000099 12.291 65.09088399999972 9.244 77.45035019999894 11.01 82.38336430000068 11.228 117.51564140000156 12.092 81.44097029999996 10.267 80.10902500000056 10.751 63.085628200000585 9.943 132.21425130000125 11.088 50.96958640000046 11.423 131.36315929999935 12.938 116.87634509999816 11.601 73.13535929999973 10.835 68.38272520000038 11.979 125.37567810000189 11.95 110.27587040000124 11.027)
Error minima by case: (56.0 4 33.7255 3 10.0 2 7.6181 10 4.0991 3 14.5329 3 15.3877 3 4.157 2 15.292 9 9.5163 3 15.4081 8 5.3221 3 35.1898 3 45.9322 4 34.0963 2 8.0806 9 12.04 3 44.0 3 9.2272 9 17.3502 3 4.0 2 21.8807 8 5.2157 3 81.6601 4 10.0 2)
Average genome size in population (length): 69.079
Average program size in population (points): 70.079
Average percent parens in population: 0.014
Minimum age in population: 9.546875
Maximum age in population: 14.359375
Average age in population: 12.4301640625
Median age in population: 12.453125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.787
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.787
Total error diversity:				 0.053
Error (vector) diversity:			 0.055
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 13136458
--- Timings ---
Current time: 1529614921418 milliseconds
Total Time:          35.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        15.8 seconds, 45.2%
Fitness Testing:     15.1 seconds, 43.2%
Report:               3.9 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Number IO problem report - generation 9
Test total error for best: 60787.95369999995
Test mean error for best: 30.39398
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 57.0750       
Correct output: -141.201628771 | Program output: -93.0750      
Correct output: 23.3844813461  | Program output: 11.0750       
Correct output: 91.3818662575  | Program output: 100.0750      
Correct output: 6.0991287499   | Program output: -22.0750      
Correct output: 90.6078865723  | Program output: 76.0750       
Correct output: -16.3558496064 | Program output: 56.0750       
Correct output: 85.2320058807  | Program output: 81.0750       
Correct output: -28.7080490162 | Program output: -55.0750      
Correct output: -10.4844827466 | Program output: 49.0750       
Correct output: -59.408072605  | Program output: -80.0750      
Correct output: 59.1228402624  | Program output: 16.0750       
Correct output: -132.1998002816 | Program output: -96.0750      
Correct output: -128.9949320478 | Program output: -53.0750      
Correct output: -78.0962956202 | Program output: -39.0750      
Correct output: -35.919351649  | Program output: -75.0750      
Correct output: -56.0400311694 | Program output: -36.0750      
Correct output: 137.4302481607 | Program output: 45.0750       
Correct output: 32.7727726522  | Program output: 43.0750       
Correct output: -26.6497561561 | Program output: 74.0750       
Correct output: 95.3927116996  | Program output: 5.0750        
Correct output: -65.8806745395 | Program output: -95.0750      
Correct output: 48.7839285535  | Program output: 14.0750       
Correct output: 176.7350863211 | Program output: 95.0750       
Correct output: -87.9710392115 | Program output: -9.0750       
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_sub} {:instruction float_mod} {:instruction float_tan} {:instruction 93} {:instruction integer_yank} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_flush} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_sub} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction -87.46358223605336} {:instruction integer_div} {:instruction integer_div} {:instruction float_max} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction 12.307124631169899} {:instruction float_sin} {:instruction float_mod} {:instruction integer_pop} {:instruction float_min} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction integer_dup} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction integer_min} {:instruction -6} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_cos} {:instruction in2} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction integer_stackdepth} {:instruction print_float} {:instruction integer_mult} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_frominteger} {:instruction float_swap} {:instruction 75} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction float_swap} {:instruction float_pop} {:instruction tag_float_918} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_min} {:instruction integer_add} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction tag_float_175} {:instruction float_add} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction tag_float_175} {:instruction float_mod} {:instruction float_sub} {:instruction float_min} {:instruction print_integer} {:instruction float_rot})
Best program: (float_yankdup float_sub float_mod float_tan 93 integer_yank integer_sub integer_mod integer_flush integer_sub float_mult integer_sub integer_dup integer_dup_items -87.46358223605336 integer_div integer_div float_max float_stackdepth integer_pop 12.307124631169899 float_sin float_mod integer_pop float_min float_rot -83 integer_div 53.660195741514 integer_dup float_max float_dup_items integer_dup_times float_dup integer_rot float_swap integer_min -6 42.446747745532946 float_yank float_cos in2 integer_inc float_frominteger integer_dup_items integer_stackdepth print_float integer_mult integer_dup_items integer_sub integer_dup_times float_shove float_frominteger float_swap 75 float_min print_integer integer_mult float_pop integer_dup float_swap float_pop tag_float_918 integer_dup_items integer_swap float_min integer_add float_rot float_div float_pop float_yank tag_float_175 float_add float_stackdepth float_rot float_div float_pop float_yank tag_float_175 float_mod float_sub float_min print_integer float_rot)
Errors: [86.486 11 48.1266 10 12.3095 12 8.6931 11 28.1741 11 14.5329 9 72.4308 10 4.157 8 26.367 10 59.5595 12 20.6669 8 43.0478 11 36.1248 12 75.9199 12 39.0213 9 39.1556 9 19.965 9 92.3552 11 10.3022 10 100.7248 11 90.3177 10 29.1943 8 34.7089 11 81.6601 11 78.896 10]
Total: 1408.8970000000002
Mean: 28.17794
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3350.4908194000154
Median total errors in population: 1429.2720000000004
Error averages by case: (161.97069329999925 12.039 128.87757990000046 10.784 88.77149480000031 11.84 92.1018399000011 11.823 102.91884790000164 11.078 96.68031140000042 10.92 143.86028050000004 11.114 86.52039310000104 9.633 103.61854230000061 10.34 132.47619240000122 12.756 100.02469549999967 9.267 118.01935339999896 10.992 118.04858040000012 11.344 152.36411400000014 12.113 117.76352060000085 10.434 115.0671699000005 10.075 99.92027699999878 9.58 166.76350900000077 11.224 90.16466559999948 11.855 168.90619160000142 12.782 159.7929430999987 10.902 107.650858900001 10.279 109.92990949999903 11.943 159.32572440000004 11.792 151.24813100000003 10.796)
Error minima by case: (68.3374 5 47.1916 5 12.3095 4 7.0481 9 1.9009 6 14.5329 5 10.3458 5 4.157 2 6.4582 8 4.4745 5 8.2572 8 16.1007 5 35.1898 5 45.9949 6 2.9037 5 12.0346 8 19.03 5 62.2067 5 5.2792 10 20.6398 5 20.1691 3 5.139 8 12.54 4 11.4582 5 4.971 4)
Average genome size in population (length): 70.291
Average program size in population (points): 71.291
Average percent parens in population: 0.014
Minimum age in population: 11.890625
Maximum age in population: 15.76171875
Average age in population: 14.01721875
Median age in population: 14.076171875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.761
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.761
Total error diversity:				 0.079
Error (vector) diversity:			 0.087
Behavioral diversity:				 0.089
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 14893758
--- Timings ---
Current time: 1529614925210 milliseconds
Total Time:          38.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        17.4 seconds, 44.9%
Fitness Testing:     16.8 seconds, 43.3%
Report:               4.5 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Number IO problem report - generation 10
Test total error for best: 60696.955700000086
Test mean error for best: 30.34848
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 57.0751       
Correct output: -141.201628771 | Program output: -93.0751      
Correct output: 23.3844813461  | Program output: 11.0751       
Correct output: 91.3818662575  | Program output: 100.0751      
Correct output: 6.0991287499   | Program output: -22.0751      
Correct output: 90.6078865723  | Program output: 76.0751       
Correct output: -16.3558496064 | Program output: 56.0751       
Correct output: 85.2320058807  | Program output: 81.0751       
Correct output: -28.7080490162 | Program output: -55.0751      
Correct output: -10.4844827466 | Program output: 49.0751       
Correct output: -59.408072605  | Program output: -80.0751      
Correct output: 59.1228402624  | Program output: 16.0751       
Correct output: -132.1998002816 | Program output: -96.0751      
Correct output: -128.9949320478 | Program output: -53.0751      
Correct output: -78.0962956202 | Program output: -39.0751      
Correct output: -35.919351649  | Program output: -75.0751      
Correct output: -56.0400311694 | Program output: -36.0751      
Correct output: 137.4302481607 | Program output: 45.0751       
Correct output: 32.7727726522  | Program output: 43.0751       
Correct output: -26.6497561561 | Program output: 74.0751       
Correct output: 95.3927116996  | Program output: 5.0751        
Correct output: -65.8806745395 | Program output: -95.0751      
Correct output: 48.7839285535  | Program output: 14.0751       
Correct output: 176.7350863211 | Program output: 95.0751       
Correct output: -87.9710392115 | Program output: -9.0751       
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_div} {:instruction float_pop} {:instruction in1} {:instruction float_max} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_sin} {:instruction float_max} {:instruction in2} {:instruction float_max} {:instruction integer_shove} {:instruction float_sub} {:instruction integer_div} {:instruction float_stackdepth} {:instruction integer_add} {:instruction float_min} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_flush} {:instruction integer_sub} {:instruction float_stackdepth} {:instruction integer_sub} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction -87.46358223605336} {:instruction integer_div} {:instruction float_dup} {:instruction float_add} {:instruction in1} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction -6} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_cos} {:instruction -6} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_cos} {:instruction in2} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction integer_stackdepth} {:instruction print_float} {:instruction integer_mult} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_frominteger} {:instruction float_swap} {:instruction 75} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction float_swap} {:instruction float_pop} {:instruction tag_float_918} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_min} {:instruction integer_add} {:instruction float_rot} {:instruction float_div} {:instruction integer_swap} {:instruction float_yank} {:instruction tag_float_175} {:instruction float_add} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction tag_float_175} {:instruction float_mod} {:instruction float_sub} {:instruction float_min} {:instruction print_integer} {:instruction float_rot})
Best program: (integer_dup_times float_mult float_yankdup float_div float_pop in1 float_max integer_dup float_yankdup float_max integer_dup float_yankdup float_sin float_max in2 float_max integer_shove float_sub integer_div float_stackdepth integer_add float_min float_dec integer_dup_items integer_sub integer_mult integer_flush integer_sub float_stackdepth integer_sub integer_dup integer_dup_items -87.46358223605336 integer_div float_dup float_add in1 float_dup integer_rot float_swap float_dup integer_rot float_swap float_yankdup -6 42.446747745532946 float_yank float_cos -6 42.446747745532946 float_yank float_cos in2 integer_inc float_frominteger integer_dup_items integer_stackdepth print_float integer_mult integer_dup_items integer_sub integer_dup_times float_shove float_frominteger float_swap 75 float_min print_integer integer_mult float_pop integer_dup float_swap float_pop tag_float_918 integer_dup_items integer_swap float_min integer_add float_rot float_div integer_swap float_yank tag_float_175 float_add float_stackdepth float_rot float_div float_pop float_yank tag_float_175 float_mod float_sub float_min print_integer float_rot)
Errors: [86.4859 11 48.1265 9 12.3094 11 8.6932 11 28.1742 11 14.5328 9 72.4309 11 4.1569 9 26.3671 10 59.5596 12 20.667 9 43.0477 11 36.1247 11 75.9198 12 39.0212 10 39.1557 8 19.9649 9 92.3551 11 10.3023 10 100.7249 10 90.3176 9 29.1944 8 34.7088 11 81.66 11 78.8959 10]
Total: 1406.8965
Mean: 28.13793
Genome size: 95
Size: 96
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2975.0689021000057
Median total errors in population: 1424.222
Error averages by case: (144.0628618000003 11.843 116.4064245000005 10.456 72.02880960000039 11.68 77.17500969999995 11.494 89.9280420000008 11.0 78.1885466999998 10.488 126.4768253999998 11.063 71.84213940000039 9.885 93.05860170000037 10.447 114.87115670000043 12.472 86.2837326000001 9.21 101.16418099999943 10.732 105.42605359999945 11.434 140.45672860000025 12.027 104.19323580000008 10.509 100.87693230000023 9.853 86.22756679999935 9.807 151.46692099999999 11.296 72.8633061000001 11.504 151.85948660000042 12.451 143.31748810000053 10.406 98.08718770000027 10.076 93.1114967 11.591 143.0202896000004 11.412 139.1208781 10.419)
Error minima by case: (56.0 4 47.1266 3 10.0 2 7.6181 9 1.0991 3 13.6079 2 10.3558 2 3.232 1 22.708 9 4.4845 2 19.5919 8 5.3216 3 35.1248 3 54.0 3 38.0213 2 29.9194 8 18.965 3 44.0 3 9.2272 9 20.6498 2 4.0 2 28.1193 8 3.935 3 80.7351 3 10.0 1)
Average genome size in population (length): 71.464
Average program size in population (points): 72.464
Average percent parens in population: 0.014
Minimum age in population: 13.328125
Maximum age in population: 17.505859375
Average age in population: 15.458421875
Median age in population: 15.5029296875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 37
Genome diversity (% unique Plush genomes):	 0.748
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 37
Syntactic diversity (% unique Push programs):	 0.748
Total error diversity:				 0.101
Error (vector) diversity:			 0.107
Behavioral diversity:				 0.107
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 16680433
--- Timings ---
Current time: 1529614929191 milliseconds
Total Time:          42.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        19.0 seconds, 44.6%
Fitness Testing:     18.5 seconds, 43.4%
Report:               5.0 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Number IO problem report - generation 11
Test total error for best: 60822.97370000001
Test mean error for best: 30.41149
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 57.0760       
Correct output: -141.201628771 | Program output: -93.0760      
Correct output: 23.3844813461  | Program output: 11.0760       
Correct output: 91.3818662575  | Program output: 100.0760      
Correct output: 6.0991287499   | Program output: -22.0760      
Correct output: 90.6078865723  | Program output: 76.0760       
Correct output: -16.3558496064 | Program output: 56.0760       
Correct output: 85.2320058807  | Program output: 81.0760       
Correct output: -28.7080490162 | Program output: -55.0760      
Correct output: -10.4844827466 | Program output: 49.0760       
Correct output: -59.408072605  | Program output: -80.0760      
Correct output: 59.1228402624  | Program output: 16.0760       
Correct output: -132.1998002816 | Program output: -96.0760      
Correct output: -128.9949320478 | Program output: -53.0760      
Correct output: -78.0962956202 | Program output: -39.0760      
Correct output: -35.919351649  | Program output: -75.0760      
Correct output: -56.0400311694 | Program output: -36.0760      
Correct output: 137.4302481607 | Program output: 45.0760       
Correct output: 32.7727726522  | Program output: 43.0760       
Correct output: -26.6497561561 | Program output: 74.0760       
Correct output: 95.3927116996  | Program output: 5.0760        
Correct output: -65.8806745395 | Program output: -95.0760      
Correct output: 48.7839285535  | Program output: 14.0760       
Correct output: 176.7350863211 | Program output: 95.0760       
Correct output: -87.9710392115 | Program output: -9.0760       
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction float_dup_items} {:instruction integer_fromfloat} {:instruction float_sin} {:instruction float_add} {:instruction integer_dup_items} {:instruction float_min} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction float_add} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction -6} {:instruction 42.446747745532946} {:instruction integer_shove} {:instruction float_cos} {:instruction in2} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction -6} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_cos} {:instruction in2} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction integer_stackdepth} {:instruction print_float} {:instruction integer_mult} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_frominteger} {:instruction float_swap} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction float_swap} {:instruction float_pop} {:instruction tag_float_918} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_min} {:instruction integer_add} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction tag_float_175} {:instruction float_add} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction tag_float_175} {:instruction float_mod} {:instruction float_sub} {:instruction float_min} {:instruction print_integer} {:instruction float_rot})
Best program: (float_yankdup in1 float_mod float_tan 93 integer_dup_times integer_sub integer_mod integer_mod float_yankdup integer_stackdepth integer_flush float_dup_items integer_fromfloat float_sin float_add integer_dup_items float_min float_rot -83 integer_div 53.660195741514 float_add float_max float_dup_items integer_dup_times float_dup integer_rot float_swap float_yankdup -6 42.446747745532946 integer_shove float_cos in2 integer_rot float_swap float_yankdup -6 42.446747745532946 float_yank float_cos in2 integer_inc float_frominteger integer_dup_items integer_stackdepth print_float integer_mult integer_dup_items integer_sub integer_dup_times float_shove float_frominteger float_swap 76 float_min print_integer integer_mult float_pop integer_dup float_swap float_pop tag_float_918 integer_dup_items integer_swap float_min integer_add float_rot float_div float_pop float_yank tag_float_175 float_add float_stackdepth float_rot float_div float_pop float_yank tag_float_175 float_mod float_sub float_min print_integer float_rot)
Errors: [86.485 11 48.1256 10 12.3085 11 8.6941 11 28.1751 11 14.5319 9 72.4318 10 4.156 9 26.368 10 59.5605 11 20.6679 7 43.0468 10 36.1238 12 75.9189 12 39.0203 9 39.1566 9 19.964 9 92.3542 10 10.3032 10 100.7258 11 90.3167 9 29.1953 9 34.7079 12 81.6591 11 78.895 10]
Total: 1405.8920000000003
Mean: 28.11784
Genome size: 85
Size: 86
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2943.6758523000153
Median total errors in population: 1416.9719999999998
Error averages by case: (143.22326560000064 11.223 114.617033700001 10.309 72.98300980000101 11.939 74.60481919999916 10.909 88.58564010000006 11.05 76.89660469999968 9.816 127.72752340000027 10.927 67.70825240000002 9.479 89.41314829999966 10.666 116.10408490000086 12.186 85.07052029999946 8.798 100.94311039999955 10.833 103.54586860000049 11.807 138.47188729999922 11.785 103.17801669999928 10.147 101.12590759999959 9.661 85.17951909999886 9.916 149.2574667000008 11.52 72.28868059999955 10.795 153.3688669 11.964 144.13627880000087 10.318 92.98250320000076 9.251 93.43481069999957 11.293 141.45144749999935 11.579 138.8805857999991 10.326)
Error minima by case: (56.0 3 47.1266 2 8.3845 1 7.6381 8 2.0991 2 13.6079 2 10.2808 2 4.152 1 22.633 9 4.4095 2 20.5919 7 5.4626 2 35.1248 2 54.0 3 38.0213 1 29.8444 8 18.965 2 44.0 2 9.2472 9 20.5748 2 4.0 1 29.1193 7 4.8763 2 18.3399 3 10.0 1)
Average genome size in population (length): 70.48
Average program size in population (points): 71.48
Average percent parens in population: 0.014
Minimum age in population: 14.6875
Maximum age in population: 18.708984375
Average age in population: 16.8520546875
Median age in population: 16.85791015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.737
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.737
Total error diversity:				 0.096
Error (vector) diversity:			 0.105
Behavioral diversity:				 0.106
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 18442458
--- Timings ---
Current time: 1529614933307 milliseconds
Total Time:          46.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        20.6 seconds, 44.0%
Fitness Testing:     20.3 seconds, 43.5%
Report:               5.7 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Number IO problem report - generation 12
Test total error for best: 60825.25870000001
Test mean error for best: 30.41263
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 58.0760       
Correct output: -141.201628771 | Program output: -92.0760      
Correct output: 23.3844813461  | Program output: 12.0760       
Correct output: 91.3818662575  | Program output: 101.0760      
Correct output: 6.0991287499   | Program output: -21.0760      
Correct output: 90.6078865723  | Program output: 77.0760       
Correct output: -16.3558496064 | Program output: 57.0760       
Correct output: 85.2320058807  | Program output: 82.0760       
Correct output: -28.7080490162 | Program output: -54.0760      
Correct output: -10.4844827466 | Program output: 50.0760       
Correct output: -59.408072605  | Program output: -79.0760      
Correct output: 59.1228402624  | Program output: 17.0760       
Correct output: -132.1998002816 | Program output: -95.0760      
Correct output: -128.9949320478 | Program output: -52.0760      
Correct output: -78.0962956202 | Program output: -38.0760      
Correct output: -35.919351649  | Program output: -74.0760      
Correct output: -56.0400311694 | Program output: -35.0760      
Correct output: 137.4302481607 | Program output: 46.0760       
Correct output: 32.7727726522  | Program output: 44.0760       
Correct output: -26.6497561561 | Program output: 75.0760       
Correct output: 95.3927116996  | Program output: 6.0760        
Correct output: -65.8806745395 | Program output: -94.0760      
Correct output: 48.7839285535  | Program output: 15.0760       
Correct output: 176.7350863211 | Program output: 96.0760       
Correct output: -87.9710392115 | Program output: -8.0760       
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction float_dup_items} {:instruction integer_fromfloat} {:instruction float_sin} {:instruction float_add} {:instruction integer_dup_items} {:instruction float_mod} {:instruction integer_pop} {:instruction float_min} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction integer_dup} {:instruction float_max} {:instruction float_dup_items} {:instruction 53.660195741514} {:instruction float_add} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_cos} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction integer_stackdepth} {:instruction print_float} {:instruction integer_mult} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_frominteger} {:instruction float_swap} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction float_swap} {:instruction float_pop} {:instruction tag_float_918} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_min} {:instruction integer_add} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction tag_float_175} {:instruction float_add} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction tag_float_175} {:instruction float_mod} {:instruction float_sub} {:instruction float_min} {:instruction print_integer} {:instruction float_rot})
Best program: (float_yankdup in1 float_mod float_tan 93 integer_dup_times integer_sub integer_mod integer_mod float_yankdup integer_stackdepth integer_flush float_dup_items integer_fromfloat float_sin float_add integer_dup_items float_mod integer_pop float_min float_rot -83 integer_div 53.660195741514 integer_dup float_max float_dup_items 53.660195741514 float_add float_max float_dup_items integer_dup_times float_dup integer_rot float_swap float_dup integer_rot float_swap float_yankdup float_cos in2 integer_inc integer_inc float_frominteger integer_dup_items integer_stackdepth print_float integer_mult integer_dup_items integer_sub integer_dup_times float_shove float_frominteger float_swap 76 float_min print_integer integer_mult float_pop integer_dup float_swap float_pop tag_float_918 integer_dup_items integer_swap float_min integer_add float_rot float_div float_pop float_yank tag_float_175 float_add float_stackdepth float_rot float_div float_pop float_yank tag_float_175 float_mod float_sub float_min print_integer float_rot)
Errors: [85.485 11 49.1256 10 11.3085 11 9.6941 11 27.1751 10 13.5319 9 73.4318 11 3.156 9 25.368 10 60.5605 10 19.6679 6 42.0468 10 37.1238 12 76.9189 11 40.0203 8 38.1566 10 20.964 10 91.3542 10 11.3032 10 101.7258 11 89.3167 10 28.1953 10 33.7079 12 80.6591 10 79.895 9]
Total: 1400.8920000000003
Mean: 28.01784
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2568.490974300014
Median total errors in population: 1408.8970000000002
Error averages by case: (127.32857170000104 10.845 101.75847360000147 10.244 56.96155810000048 12.057 56.971971599999414 10.784 75.5403221999992 11.101 60.84872789999919 9.313 113.28670490000091 10.623 51.39661699999962 8.762 75.80694459999916 10.621 101.22110910000146 12.088 72.53582809999877 8.413 84.61597270000013 11.125 90.52076650000056 12.139 125.26073109999831 11.828 89.01651069999903 9.688 88.03219369999904 9.352 70.85792379999876 9.675 132.15716650000175 11.453 55.69674299999918 10.275 139.74275459999924 11.196 128.23311639999952 10.227 80.78467940000098 8.501 77.0164805999993 11.135 124.95656009999834 11.511 124.75954639999819 10.227)
Error minima by case: (13.514 6 47.1259 5 10.0 4 7.6931 8 5.0639 5 13.5319 5 10.2808 5 3.156 4 0.0826 9 4.4095 5 19.6679 6 5.3216 5 35.1241 5 41.5313 6 3.9787 4 5.1119 8 18.9643 5 7.6448 5 9.3022 8 20.5748 5 4.0 4 16.1943 7 4.8763 5 18.3399 6 0.5075 4)
Average genome size in population (length): 77.017
Average program size in population (points): 78.017
Average percent parens in population: 0.013
Minimum age in population: 15.998046875
Maximum age in population: 20.30322265625
Average age in population: 18.32514453125
Median age in population: 18.34716796875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.83
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.83
Total error diversity:				 0.079
Error (vector) diversity:			 0.085
Behavioral diversity:				 0.085
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 20367933
--- Timings ---
Current time: 1529614937485 milliseconds
Total Time:          51.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        22.1 seconds, 43.4%
Fitness Testing:     22.3 seconds, 43.8%
Report:               6.4 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Number IO problem report - generation 13
Test total error for best: 60595.96899999995
Test mean error for best: 30.29798
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 57.075760     
Correct output: -141.201628771 | Program output: -93.075760    
Correct output: 23.3844813461  | Program output: 11.075760     
Correct output: 91.3818662575  | Program output: 100.075760    
Correct output: 6.0991287499   | Program output: -22.075760    
Correct output: 90.6078865723  | Program output: 76.075760     
Correct output: -16.3558496064 | Program output: 56.075760     
Correct output: 85.2320058807  | Program output: 81.075760     
Correct output: -28.7080490162 | Program output: -55.075760    
Correct output: -10.4844827466 | Program output: 49.075760     
Correct output: -59.408072605  | Program output: -80.075760    
Correct output: 59.1228402624  | Program output: 16.075760     
Correct output: -132.1998002816 | Program output: -96.075760    
Correct output: -128.9949320478 | Program output: -53.075760    
Correct output: -78.0962956202 | Program output: -39.075760    
Correct output: -35.919351649  | Program output: -75.075760    
Correct output: -56.0400311694 | Program output: -36.075760    
Correct output: 137.4302481607 | Program output: 45.075760     
Correct output: 32.7727726522  | Program output: 43.075760     
Correct output: -26.6497561561 | Program output: 74.075760     
Correct output: 95.3927116996  | Program output: 5.075760      
Correct output: -65.8806745395 | Program output: -95.075760    
Correct output: 48.7839285535  | Program output: 14.075760     
Correct output: 176.7350863211 | Program output: 95.075760     
Correct output: -87.9710392115 | Program output: -9.075760     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction float_div} {:instruction float_pop} {:instruction tagged_349} {:instruction float_max} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction -87.46358223605336} {:instruction integer_div} {:instruction integer_div} {:instruction float_max} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction 12.307124631169899} {:instruction float_sin} {:instruction float_mod} {:instruction integer_pop} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction 12.307124631169899} {:instruction float_sin} {:instruction float_mod} {:instruction integer_pop} {:instruction float_min} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction float_yank} {:instruction float_cos} {:instruction in2} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction integer_stackdepth} {:instruction print_float} {:instruction integer_mult} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_frominteger} {:instruction float_swap} {:instruction 75} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction float_swap} {:instruction float_pop} {:instruction tag_float_918} {:instruction integer_dup_items} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_frominteger} {:instruction float_swap} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction tag_float_175} {:instruction float_add} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction tag_float_409} {:instruction float_yank} {:instruction tag_float_175} {:instruction float_mod} {:instruction float_sub} {:instruction float_min} {:instruction print_integer} {:instruction float_rot})
Best program: (float_yankdup in1 float_mod float_div float_pop tagged_349 float_max integer_dup float_yankdup integer_dup_items -87.46358223605336 integer_div integer_div float_max float_stackdepth integer_pop 12.307124631169899 float_sin float_mod integer_pop float_stackdepth integer_pop 12.307124631169899 float_sin float_mod integer_pop float_min float_rot -83 integer_div float_yank float_cos in2 integer_inc float_frominteger integer_dup_items integer_stackdepth print_float integer_mult integer_dup_items integer_sub integer_dup_times float_shove float_frominteger float_swap 75 float_min print_integer integer_mult float_pop integer_dup float_swap float_pop tag_float_918 integer_dup_items integer_dup_times float_shove float_frominteger float_swap 76 float_min print_integer integer_mult float_pop tag_float_175 float_add float_stackdepth float_rot float_div tag_float_409 float_yank tag_float_175 float_mod float_sub float_min print_integer float_rot)
Errors: [86.4852 11 48.1259 10 12.3087 11 8.6939 11 28.1749 11 14.5321 8 72.4316 9 4.1562 8 26.3677 10 59.5602 11 20.6677 7 43.0471 11 36.124 12 75.9192 12 39.0205 9 39.1564 8 19.9643 9 92.3545 10 10.303 9 100.7255 10 90.317 9 29.1951 8 34.7082 11 81.6593 11 78.8953 11]
Total: 1399.8935
Mean: 27.99787
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2928.3662862000137
Median total errors in population: 1408.8970000000002
Error averages by case: (141.59750380000102 11.063 114.65958600000111 10.132 73.13855470000073 11.875 72.39740949999944 10.961 89.03296299999963 11.058 76.8863014000001 9.187 129.02327120000137 10.438 67.62030120000037 8.637 89.26060129999966 10.319 117.00645390000135 11.98 85.938392199999 8.394 101.04320749999987 11.037 103.50061670000123 11.997 138.22124279999923 12.033 102.33854879999869 9.48 101.50534559999954 9.209 84.21765479999907 9.418 146.57316930000056 11.148 72.1042455999998 10.19 155.38367709999937 11.022 142.18909920000044 10.036 94.20784340000077 8.492 93.4522428999988 11.155 138.32093799999913 11.261 138.00511629999906 10.22)
Error minima by case: (56.0 6 47.1259 5 10.0 4 7.6931 8 5.0241 5 13.5319 5 10.2808 5 3.156 4 22.633 9 4.4095 5 19.6669 6 5.4626 5 35.1241 5 45.9199 6 3.9787 4 29.8444 8 18.9643 5 44.0 5 9.3022 8 20.5748 5 4.0 4 16.1943 7 4.8763 5 80.6591 6 2.029 4)
Average genome size in population (length): 84.928
Average program size in population (points): 85.928
Average percent parens in population: 0.012
Minimum age in population: 17.59765625
Maximum age in population: 21.763427734375
Average age in population: 19.85623095703125
Median age in population: 19.91845703125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.85
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.85
Total error diversity:				 0.091
Error (vector) diversity:			 0.098
Behavioral diversity:				 0.099
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 22491308
--- Timings ---
Current time: 1529614941782 milliseconds
Total Time:          55.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        23.7 seconds, 42.9%
Fitness Testing:     24.5 seconds, 44.2%
Report:               7.0 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Number IO problem report - generation 14
Test total error for best: 60601.258700000006
Test mean error for best: 30.30063
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 58.07601      
Correct output: -141.201628771 | Program output: -92.07601     
Correct output: 23.3844813461  | Program output: 12.07601      
Correct output: 91.3818662575  | Program output: 101.07601     
Correct output: 6.0991287499   | Program output: -21.07601     
Correct output: 90.6078865723  | Program output: 77.07601      
Correct output: -16.3558496064 | Program output: 57.07601      
Correct output: 85.2320058807  | Program output: 82.07601      
Correct output: -28.7080490162 | Program output: -54.07601     
Correct output: -10.4844827466 | Program output: 50.07601      
Correct output: -59.408072605  | Program output: -79.07601     
Correct output: 59.1228402624  | Program output: 17.07601      
Correct output: -132.1998002816 | Program output: -95.07601     
Correct output: -128.9949320478 | Program output: -52.07601     
Correct output: -78.0962956202 | Program output: -38.07601     
Correct output: -35.919351649  | Program output: -74.07601     
Correct output: -56.0400311694 | Program output: -35.07601     
Correct output: 137.4302481607 | Program output: 46.07601      
Correct output: 32.7727726522  | Program output: 44.07601      
Correct output: -26.6497561561 | Program output: 75.07601      
Correct output: 95.3927116996  | Program output: 6.07601       
Correct output: -65.8806745395 | Program output: -94.07601     
Correct output: 48.7839285535  | Program output: 15.07601      
Correct output: 176.7350863211 | Program output: 96.07601      
Correct output: -87.9710392115 | Program output: -8.07601      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction float_dup_items} {:instruction integer_fromfloat} {:instruction float_sin} {:instruction float_add} {:instruction integer_dup_items} {:instruction float_mod} {:instruction integer_pop} {:instruction float_min} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction integer_dup} {:instruction float_max} {:instruction float_dup_items} {:instruction 53.660195741514} {:instruction float_add} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_cos} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction integer_stackdepth} {:instruction print_float} {:instruction integer_mult} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_frominteger} {:instruction float_swap} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction float_swap} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction integer_swap} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction tag_float_175} {:instruction float_mod} {:instruction float_sub} {:instruction float_min} {:instruction print_integer} {:instruction float_sub} {:instruction float_min} {:instruction print_integer} {:instruction float_rot})
Best program: (float_yankdup in1 float_mod float_tan 93 integer_dup_times integer_sub integer_mod integer_mod float_sin integer_stackdepth integer_flush float_dup_items integer_fromfloat float_sin float_add integer_dup_items float_mod integer_pop float_min float_rot -83 integer_div 53.660195741514 integer_dup float_max float_dup_items 53.660195741514 float_add float_max float_dup_items integer_dup_times float_dup integer_rot float_swap float_dup integer_rot float_swap float_yankdup float_cos in2 integer_inc integer_inc float_frominteger integer_dup_items integer_stackdepth print_float integer_mult integer_dup_items integer_sub integer_dup_times float_shove float_frominteger float_swap 76 float_min print_integer integer_mult float_pop integer_dup float_swap float_stackdepth float_rot float_div float_pop float_yank integer_swap float_min float_stackdepth float_rot float_div float_pop float_yank tag_float_175 float_mod float_sub float_min print_integer float_sub float_min print_integer float_rot)
Errors: [85.485 11 49.1256 9 11.3085 11 9.6941 11 27.1751 10 13.5319 9 73.4319 11 3.156 9 25.368 9 60.5605 11 19.6679 6 42.0468 10 37.1238 11 76.9189 11 40.0203 8 38.1567 10 20.964 9 91.3542 10 11.3032 10 101.7258 10 89.3167 10 28.1953 10 33.7079 12 80.6591 9 79.895 8]
Total: 1394.8922000000002
Mean: 27.897844
Genome size: 82
Size: 83
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3101.5376426000157
Median total errors in population: 1406.8965
Error averages by case: (148.17755459999975 11.111 121.73989219999983 10.026 81.12445589999966 11.471 78.39324069999951 10.97 95.99357869999906 11.03 83.4507057000004 9.188 135.4274619000015 10.703 74.14686400000089 9.16 95.98656770000079 10.359 123.64526970000105 11.66 92.57410750000008 8.236 108.45175039999914 10.794 110.55975450000072 11.885 145.7490048000004 12.026 110.04066200000005 9.603 107.73263880000067 9.187 91.8382673000008 9.536 153.3200223000001 10.913 79.2747169999999 10.16 161.18551499999904 10.846 150.48594629999945 9.668 100.55200000000035 8.885 100.9270443999987 11.467 144.31305440000054 11.235 146.05656680000047 10.272)
Error minima by case: (68.561 6 47.1256 6 3.3845 5 7.6941 9 4.4562 7 13.5311 5 10.2807 6 3.1552 3 14.3671 8 4.4094 6 16.333 6 5.4626 6 35.1238 6 74.9189 7 35.0212 6 7.1557 8 12.9649 6 62.4302 6 9.3032 8 16.4253 6 20.3927 4 22.8056 7 4.8763 5 80.6583 6 44.8959 5)
Average genome size in population (length): 85.238
Average program size in population (points): 86.238
Average percent parens in population: 0.012
Minimum age in population: 19.0703125
Maximum age in population: 23.3043212890625
Average age in population: 21.50664965820312
Median age in population: 21.56536865234375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.836
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.836
Total error diversity:				 0.117
Error (vector) diversity:			 0.127
Behavioral diversity:				 0.127
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 24622533
--- Timings ---
Current time: 1529614945959 milliseconds
Total Time:          59.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        25.4 seconds, 42.6%
Fitness Testing:     26.5 seconds, 44.5%
Report:               7.6 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Number IO problem report - generation 15
Test total error for best: 60601.258700000006
Test mean error for best: 30.30063
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 58.07601      
Correct output: -141.201628771 | Program output: -92.07601     
Correct output: 23.3844813461  | Program output: 12.07601      
Correct output: 91.3818662575  | Program output: 101.07601     
Correct output: 6.0991287499   | Program output: -21.07601     
Correct output: 90.6078865723  | Program output: 77.07601      
Correct output: -16.3558496064 | Program output: 57.07601      
Correct output: 85.2320058807  | Program output: 82.07601      
Correct output: -28.7080490162 | Program output: -54.07601     
Correct output: -10.4844827466 | Program output: 50.07601      
Correct output: -59.408072605  | Program output: -79.07601     
Correct output: 59.1228402624  | Program output: 17.07601      
Correct output: -132.1998002816 | Program output: -95.07601     
Correct output: -128.9949320478 | Program output: -52.07601     
Correct output: -78.0962956202 | Program output: -38.07601     
Correct output: -35.919351649  | Program output: -74.07601     
Correct output: -56.0400311694 | Program output: -35.07601     
Correct output: 137.4302481607 | Program output: 46.07601      
Correct output: 32.7727726522  | Program output: 44.07601      
Correct output: -26.6497561561 | Program output: 75.07601      
Correct output: 95.3927116996  | Program output: 6.07601       
Correct output: -65.8806745395 | Program output: -94.07601     
Correct output: 48.7839285535  | Program output: 15.07601      
Correct output: 176.7350863211 | Program output: 96.07601      
Correct output: -87.9710392115 | Program output: -8.07601      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction float_dup_items} {:instruction integer_fromfloat} {:instruction float_sin} {:instruction float_add} {:instruction integer_dup_items} {:instruction float_mod} {:instruction integer_pop} {:instruction float_min} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction integer_dup} {:instruction float_max} {:instruction float_dup_items} {:instruction 53.660195741514} {:instruction float_add} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_cos} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction integer_stackdepth} {:instruction print_float} {:instruction integer_mult} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_frominteger} {:instruction float_swap} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction float_swap} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction integer_swap} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction tag_float_175} {:instruction float_mod} {:instruction float_sub} {:instruction float_min} {:instruction print_integer} {:instruction float_sub} {:instruction float_min} {:instruction print_integer} {:instruction float_rot})
Best program: (float_yankdup in1 float_mod float_tan 93 integer_dup_times integer_sub integer_mod integer_mod float_sin integer_stackdepth integer_flush float_dup_items integer_fromfloat float_sin float_add integer_dup_items float_mod integer_pop float_min float_rot -83 integer_div 53.660195741514 integer_dup float_max float_dup_items 53.660195741514 float_add float_max float_dup_items integer_dup_times float_dup integer_rot float_swap float_dup integer_rot float_swap float_yankdup float_cos in2 integer_inc integer_inc float_frominteger integer_dup_items integer_stackdepth print_float integer_mult integer_dup_items integer_sub integer_dup_times float_shove float_frominteger float_swap 76 float_min print_integer integer_mult float_pop integer_dup float_swap float_stackdepth float_rot float_div float_pop float_yank integer_swap float_min float_stackdepth float_rot float_div float_pop float_yank tag_float_175 float_mod float_sub float_min print_integer float_sub float_min print_integer float_rot)
Errors: [85.485 11 49.1256 9 11.3085 11 9.6941 11 27.1751 10 13.5319 9 73.4319 11 3.156 9 25.368 9 60.5605 11 19.6679 6 42.0468 10 37.1238 11 76.9189 11 40.0203 8 38.1567 10 20.964 9 91.3542 10 11.3032 10 101.7258 10 89.3167 10 28.1953 10 33.7079 12 80.6591 9 79.895 8]
Total: 1394.8922000000002
Mean: 27.897844
Genome size: 82
Size: 83
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3121.8515971000024
Median total errors in population: 1405.8920000000003
Error averages by case: (149.37765439999933 11.176 122.28601489999946 10.133 81.51934879999956 11.251 81.13503539999928 10.971 95.77202149999871 10.856 84.99110950000048 9.119 137.58096580000102 10.672 75.79746280000082 9.341 96.08390060000113 10.274 125.71629480000209 11.058 92.91378590000016 7.491 108.8905538999988 10.497 111.22215930000057 11.973 145.62513120000014 11.808 110.01740429999998 9.195 108.1875686000008 9.499 91.96901930000162 9.639 154.27023770000042 10.534 81.09987229999949 10.079 163.59606179999827 10.897 151.13272279999896 9.644 101.114519300001 9.421 101.38894579999888 11.807 146.33659520000012 10.897 145.38421120000032 10.211)
Error minima by case: (36.2406 10 47.1249 7 10.3085 9 7.6931 8 2.0231 9 12.5319 7 10.2798 7 2.156 8 5.0953 8 4.4085 7 0.5919 6 5.3212 9 35.123 7 46.9189 8 3.9797 6 2.116 8 3.96 7 30.1099 9 9.3022 8 7.1536 7 11.9277 8 5.8807 7 4.8763 10 68.4322 9 3.029 6)
Average genome size in population (length): 85.467
Average program size in population (points): 86.467
Average percent parens in population: 0.012
Minimum age in population: 20.759521484375
Maximum age in population: 24.72564697265625
Average age in population: 22.960419921875
Median age in population: 23.00143432617188
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.854
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.854
Total error diversity:				 0.138
Error (vector) diversity:			 0.151
Behavioral diversity:				 0.151
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 26759333
--- Timings ---
Current time: 1529614950318 milliseconds
Total Time:          63.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        27.0 seconds, 42.4%
Fitness Testing:     28.6 seconds, 44.8%
Report:               8.1 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Number IO problem report - generation 16
Test total error for best: 60601.258700000006
Test mean error for best: 30.30063
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 58.07601      
Correct output: -141.201628771 | Program output: -92.07601     
Correct output: 23.3844813461  | Program output: 12.07601      
Correct output: 91.3818662575  | Program output: 101.07601     
Correct output: 6.0991287499   | Program output: -21.07601     
Correct output: 90.6078865723  | Program output: 77.07601      
Correct output: -16.3558496064 | Program output: 57.07601      
Correct output: 85.2320058807  | Program output: 82.07601      
Correct output: -28.7080490162 | Program output: -54.07601     
Correct output: -10.4844827466 | Program output: 50.07601      
Correct output: -59.408072605  | Program output: -79.07601     
Correct output: 59.1228402624  | Program output: 17.07601      
Correct output: -132.1998002816 | Program output: -95.07601     
Correct output: -128.9949320478 | Program output: -52.07601     
Correct output: -78.0962956202 | Program output: -38.07601     
Correct output: -35.919351649  | Program output: -74.07601     
Correct output: -56.0400311694 | Program output: -35.07601     
Correct output: 137.4302481607 | Program output: 46.07601      
Correct output: 32.7727726522  | Program output: 44.07601      
Correct output: -26.6497561561 | Program output: 75.07601      
Correct output: 95.3927116996  | Program output: 6.07601       
Correct output: -65.8806745395 | Program output: -94.07601     
Correct output: 48.7839285535  | Program output: 15.07601      
Correct output: 176.7350863211 | Program output: 96.07601      
Correct output: -87.9710392115 | Program output: -8.07601      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction float_dup_items} {:instruction integer_fromfloat} {:instruction float_sin} {:instruction float_add} {:instruction integer_dup_items} {:instruction float_mod} {:instruction integer_pop} {:instruction float_min} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction integer_dup} {:instruction float_max} {:instruction float_dup_items} {:instruction 53.660195741514} {:instruction float_add} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_cos} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction integer_stackdepth} {:instruction print_float} {:instruction integer_mult} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_frominteger} {:instruction float_swap} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction float_swap} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction integer_swap} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction tag_float_175} {:instruction float_mod} {:instruction float_sub} {:instruction float_min} {:instruction print_integer} {:instruction float_sub} {:instruction float_min} {:instruction print_integer} {:instruction float_rot})
Best program: (float_yankdup in1 float_mod float_tan 93 integer_dup_times integer_sub integer_mod integer_mod float_sin integer_stackdepth integer_flush float_dup_items integer_fromfloat float_sin float_add integer_dup_items float_mod integer_pop float_min float_rot -83 integer_div 53.660195741514 integer_dup float_max float_dup_items 53.660195741514 float_add float_max float_dup_items integer_dup_times float_dup integer_rot float_swap float_dup integer_rot float_swap float_yankdup float_cos in2 integer_inc integer_inc float_frominteger integer_dup_items integer_stackdepth print_float integer_mult integer_dup_items integer_sub integer_dup_times float_shove float_frominteger float_swap 76 float_min print_integer integer_mult float_pop integer_dup float_swap float_stackdepth float_rot float_div float_pop float_yank integer_swap float_min float_stackdepth float_rot float_div float_pop float_yank tag_float_175 float_mod float_sub float_min print_integer float_sub float_min print_integer float_rot)
Errors: [85.485 11 49.1256 9 11.3085 11 9.6941 11 27.1751 10 13.5319 9 73.4319 11 3.156 9 25.368 9 60.5605 11 19.6679 6 42.0468 10 37.1238 11 76.9189 11 40.0203 8 38.1567 10 20.964 9 91.3542 10 11.3032 10 101.7258 10 89.3167 10 28.1953 10 33.7079 12 80.6591 9 79.895 8]
Total: 1394.8922000000002
Mean: 27.897844
Genome size: 82
Size: 83
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3088.332824000003
Median total errors in population: 1400.8920000000003
Error averages by case: (148.37004539999904 11.229 120.89853179999945 10.249 80.60977909999953 11.27 79.58347449999928 11.092 94.61631989999884 10.763 83.58413499999978 8.939 135.91860220000072 10.518 74.35912960000019 9.114 94.79596170000124 10.312 124.23136660000237 10.842 91.36988320000047 7.288 107.657183099999 10.755 109.84644070000024 12.119 144.39072780000055 11.745 108.93802299999986 9.045 106.59949780000129 9.547 91.01865750000171 9.881 153.2591283 10.428 79.8448034999997 9.94 161.64322799999906 10.757 149.54610649999935 9.854 99.39826820000037 9.513 100.06291059999865 11.683 145.39131789999985 10.813 144.3883021000006 10.315)
Error minima by case: (17.4196 8 47.1259 7 10.0 6 7.6939 9 4.9283 7 12.5319 7 13.3096 7 2.156 6 24.292 8 7.3116 7 6.0045 6 5.3207 7 35.124 7 41.5313 8 3.9797 6 17.4842 8 2.6699 7 23.5503 7 9.303 8 20.8971 7 4.0 6 12.4771 7 4.3666 7 15.7545 8 0.5075 6)
Average genome size in population (length): 83.86
Average program size in population (points): 84.86
Average percent parens in population: 0.012
Minimum age in population: 21.7769775390625
Maximum age in population: 26.24887084960938
Average age in population: 24.39786880493164
Median age in population: 24.45138549804688
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.833
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.833
Total error diversity:				 0.142
Error (vector) diversity:			 0.149
Behavioral diversity:				 0.149
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 28855983
--- Timings ---
Current time: 1529614954882 milliseconds
Total Time:          68.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.7 seconds, 42.0%
Fitness Testing:     30.8 seconds, 45.1%
Report:               8.7 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Number IO problem report - generation 17
Test total error for best: 60604.330499999975
Test mean error for best: 30.30217
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 58.078760     
Correct output: -141.201628771 | Program output: -92.078760    
Correct output: 23.3844813461  | Program output: 12.078760     
Correct output: 91.3818662575  | Program output: 101.078760    
Correct output: 6.0991287499   | Program output: -21.078760    
Correct output: 90.6078865723  | Program output: 77.078760     
Correct output: -16.3558496064 | Program output: 57.078760     
Correct output: 85.2320058807  | Program output: 82.078760     
Correct output: -28.7080490162 | Program output: -54.078760    
Correct output: -10.4844827466 | Program output: 50.078760     
Correct output: -59.408072605  | Program output: -79.078760    
Correct output: 59.1228402624  | Program output: 17.078760     
Correct output: -132.1998002816 | Program output: -95.078760    
Correct output: -128.9949320478 | Program output: -52.078760    
Correct output: -78.0962956202 | Program output: -38.078760    
Correct output: -35.919351649  | Program output: -74.078760    
Correct output: -56.0400311694 | Program output: -35.078760    
Correct output: 137.4302481607 | Program output: 46.078760     
Correct output: 32.7727726522  | Program output: 44.078760     
Correct output: -26.6497561561 | Program output: 75.078760     
Correct output: 95.3927116996  | Program output: 6.078760      
Correct output: -65.8806745395 | Program output: -94.078760    
Correct output: 48.7839285535  | Program output: 15.078760     
Correct output: 176.7350863211 | Program output: 96.078760     
Correct output: -87.9710392115 | Program output: -8.078760     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_yankdup} {:instruction float_div} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction in1} {:instruction integer_yankdup} {:instruction float_tan} {:instruction 93} {:instruction integer_yank} {:instruction float_dup_items} {:instruction integer_mod} {:instruction integer_flush} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction float_add} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_cos} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction integer_stackdepth} {:instruction print_float} {:instruction integer_mult} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_frominteger} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_shove} {:instruction float_frominteger} {:instruction float_swap} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction float_swap} {:instruction float_pop} {:instruction tag_float_918} {:instruction tag_float_918} {:instruction float_swap} {:instruction float_shove} {:instruction float_frominteger} {:instruction float_swap} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction float_swap} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction tag_float_175} {:instruction float_mod} {:instruction float_sub} {:instruction float_min} {:instruction print_integer} {:instruction float_rot})
Best program: (integer_dup_times float_dup_times float_yankdup float_div float_yankdup float_yankdup in1 integer_yankdup float_tan 93 integer_yank float_dup_items integer_mod integer_flush integer_mod float_yankdup integer_stackdepth integer_flush float_add float_max float_dup_items integer_dup_times float_dup integer_rot float_swap float_dup integer_rot float_swap float_yankdup float_cos in2 integer_inc integer_inc float_frominteger integer_dup_items integer_stackdepth print_float integer_mult integer_dup_items integer_sub integer_dup_times float_shove float_frominteger float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap float_shove float_frominteger float_swap 76 float_min print_integer integer_mult float_pop integer_dup float_swap float_pop tag_float_918 tag_float_918 float_swap float_shove float_frominteger float_swap integer_mult float_pop integer_dup float_swap float_pop float_dup integer_swap integer_swap float_min float_stackdepth float_rot float_div float_pop float_yank tag_float_175 float_mod float_sub float_min print_integer float_rot)
Errors: [85.4822 10 49.1229 9 11.3057 10 9.6969 10 27.1779 10 13.5291 8 73.4346 10 3.1532 9 25.3707 10 60.5632 9 19.6707 6 42.0441 10 37.121 11 76.9162 11 40.0175 8 38.1594 10 20.9613 10 91.3515 9 11.306 9 101.7285 11 89.314 10 28.1981 10 33.7052 11 80.6563 11 79.8923 10]
Total: 1391.8785000000005
Mean: 27.83757
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3326.274429600004
Median total errors in population: 1399.8935
Error averages by case: (156.16092989999902 11.221 131.7726156999994 10.133 89.21429859999958 11.194 88.37652459999924 11.051 106.8328123999991 10.954 91.87473999999898 8.618 143.43207740000017 10.148 82.72872179999955 8.92 106.55339660000129 10.298 131.88933720000216 10.946 102.94833780000066 7.454 116.26612449999965 10.961 120.81980290000016 12.1 155.3066045000006 11.961 120.4290458999994 9.144 118.06836640000157 9.219 102.84144650000175 9.754 161.09644419999924 10.396 88.2894298999998 9.618 168.70258479999958 10.389 158.11770049999987 9.687 110.6960669999995 9.206 108.86412109999863 11.46 153.04523879999954 10.861 155.64266060000085 10.612)
Error minima by case: (2.3398 7 47.1249 7 10.0 5 3.7251 9 5.0171 7 4.4991 6 12.2798 6 2.1552 5 24.292 8 6.4085 6 18.5919 5 5.4626 6 35.123 7 41.5313 8 3.9795 6 31.8434 8 18.9633 7 9.6602 6 9.303 8 22.5738 6 0.2858 4 16.1951 8 4.6199 6 40.3398 7 0.5075 5)
Average genome size in population (length): 84.099
Average program size in population (points): 85.099
Average percent parens in population: 0.012
Minimum age in population: 23.390869140625
Maximum age in population: 28.15779113769531
Average age in population: 25.88866841125488
Median age in population: 25.94110870361328
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.858
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.858
Total error diversity:				 0.136
Error (vector) diversity:			 0.148
Behavioral diversity:				 0.149
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 30958508
--- Timings ---
Current time: 1529614959322 milliseconds
Total Time:          72.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.2 seconds, 41.5%
Fitness Testing:     33.1 seconds, 45.5%
Report:               9.4 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Number IO problem report - generation 18
Test total error for best: 60588.15039999996
Test mean error for best: 30.29408
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 59.075760     
Correct output: -141.201628771 | Program output: -91.075760    
Correct output: 23.3844813461  | Program output: 13.075760     
Correct output: 91.3818662575  | Program output: 102.075760    
Correct output: 6.0991287499   | Program output: -20.075760    
Correct output: 90.6078865723  | Program output: 78.075760     
Correct output: -16.3558496064 | Program output: 58.075760     
Correct output: 85.2320058807  | Program output: 83.075760     
Correct output: -28.7080490162 | Program output: -53.075760    
Correct output: -10.4844827466 | Program output: 51.075760     
Correct output: -59.408072605  | Program output: -78.075760    
Correct output: 59.1228402624  | Program output: 18.075760     
Correct output: -132.1998002816 | Program output: -94.075760    
Correct output: -128.9949320478 | Program output: -51.075760    
Correct output: -78.0962956202 | Program output: -37.075760    
Correct output: -35.919351649  | Program output: -73.075760    
Correct output: -56.0400311694 | Program output: -34.075760    
Correct output: 137.4302481607 | Program output: 47.075760     
Correct output: 32.7727726522  | Program output: 45.075760     
Correct output: -26.6497561561 | Program output: 76.075760     
Correct output: 95.3927116996  | Program output: 7.075760      
Correct output: -65.8806745395 | Program output: -93.075760    
Correct output: 48.7839285535  | Program output: 16.075760     
Correct output: 176.7350863211 | Program output: 97.075760     
Correct output: -87.9710392115 | Program output: -7.075760     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_yank} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction float_dup_items} {:instruction integer_fromfloat} {:instruction float_sin} {:instruction 93} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction float_dup_items} {:instruction 9.78584428433635} {:instruction float_sin} {:instruction float_add} {:instruction integer_dup_items} {:instruction float_mod} {:instruction integer_pop} {:instruction float_min} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction float_cos} {:instruction in2} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction integer_dup} {:instruction float_max} {:instruction float_dup_items} {:instruction 53.660195741514} {:instruction float_add} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_cos} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction print_float} {:instruction integer_mult} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_yank} {:instruction float_shove} {:instruction float_frominteger} {:instruction float_swap} {:instruction 75} {:instruction float_min} {:instruction print_integer} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_frominteger} {:instruction float_swap} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction tag_float_175} {:instruction integer_swap} {:instruction float_min} {:instruction integer_add} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction tag_float_175} {:instruction float_tan} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction integer_dup_times} {:instruction tag_float_175} {:instruction float_mod} {:instruction float_sub} {:instruction float_min} {:instruction print_integer} {:instruction float_rot})
Best program: (float_yankdup in1 float_mod float_tan 93 integer_dup_times integer_sub integer_mod float_yank float_sin integer_stackdepth integer_flush float_dup_items integer_fromfloat float_sin 93 integer_dup_times integer_sub integer_mod integer_mod float_yankdup integer_stackdepth integer_flush float_dup_items 9.78584428433635 float_sin float_add integer_dup_items float_mod integer_pop float_min float_rot -83 integer_div 53.660195741514 float_cos in2 float_rot -83 integer_div 53.660195741514 integer_dup float_max float_dup_items 53.660195741514 float_add float_max float_dup_items integer_dup_times float_dup integer_rot float_swap float_dup integer_rot float_swap float_yankdup float_cos in2 integer_inc integer_inc integer_inc float_frominteger integer_dup_items integer_stackdepth integer_stackdepth print_float integer_mult integer_dup_items integer_dup_items integer_sub integer_yank float_shove float_frominteger float_swap 75 float_min print_integer integer_dup_items integer_sub integer_dup_times float_shove float_frominteger float_swap 76 float_min print_integer integer_mult tag_float_175 integer_swap float_min integer_add float_rot float_div float_pop float_yank tag_float_175 float_tan float_stackdepth float_rot float_div float_pop integer_dup_times tag_float_175 float_mod float_sub float_min print_integer float_rot)
Errors: [84.4852 11 50.1259 9 10.3087 10 10.6939 11 26.1749 10 12.5321 8 74.4316 10 2.1562 8 24.3677 10 61.5602 10 18.6677 7 41.0471 11 38.124 12 77.9192 12 41.0205 9 37.1564 9 21.9643 10 90.3545 9 12.303 9 102.7255 9 88.317 10 27.1951 9 32.7082 11 79.6593 10 80.8953 10]
Total: 1390.8935000000001
Mean: 27.81787
Genome size: 108
Size: 109
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3229.505304600003
Median total errors in population: 1397.8887000000002
Error averages by case: (153.63149389999973 11.21 126.53527299999931 9.849 85.62247339999973 11.131 85.69142059999966 10.821 100.87497559999947 10.669 88.8132104999995 8.804 141.66097859999982 10.879 79.6235707 9.264 100.68050080000104 10.168 129.9566177000016 10.665 97.04777170000015 7.151 113.13606339999967 10.639 115.57592200000053 11.903 150.1915260000001 11.571 115.30995389999943 8.762 112.48480360000084 9.911 97.59802470000129 10.052 158.5156096999998 10.381 86.0307233999997 9.776 167.31854259999918 10.384 155.26741149999972 10.075 104.99531350000034 9.863 105.65236489999906 11.721 150.76833939999972 10.293 150.6594195000006 9.921)
Error minima by case: (35.1505 8 48.1229 8 9.3085 9 3.7251 9 4.0234 9 4.4991 8 15.3877 9 1.156 7 23.368 9 9.5163 9 17.6679 5 5.4626 9 36.121 10 45.9192 10 2.9805 7 34.9194 7 19.9613 8 29.0197 9 10.2272 8 25.6816 9 0.2858 9 15.1961 8 4.8763 10 37.9057 8 4.8953 7)
Average genome size in population (length): 86.066
Average program size in population (points): 87.066
Average percent parens in population: 0.012
Minimum age in population: 24.99053955078125
Maximum age in population: 29.07015991210938
Average age in population: 27.23382877349854
Median age in population: 27.28578948974609
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.846
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.846
Total error diversity:				 0.155
Error (vector) diversity:			 0.169
Behavioral diversity:				 0.169
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 33110283
--- Timings ---
Current time: 1529614963740 milliseconds
Total Time:          77.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        31.9 seconds, 41.3%
Fitness Testing:     35.2 seconds, 45.6%
Report:              10.0 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Number IO problem report - generation 19
Test total error for best: 60591.216399999976
Test mean error for best: 30.29561
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 59.078760     
Correct output: -141.201628771 | Program output: -91.078760    
Correct output: 23.3844813461  | Program output: 13.078760     
Correct output: 91.3818662575  | Program output: 102.078760    
Correct output: 6.0991287499   | Program output: -20.078760    
Correct output: 90.6078865723  | Program output: 78.078760     
Correct output: -16.3558496064 | Program output: 58.078760     
Correct output: 85.2320058807  | Program output: 83.078760     
Correct output: -28.7080490162 | Program output: -53.078760    
Correct output: -10.4844827466 | Program output: 51.078760     
Correct output: -59.408072605  | Program output: -78.078760    
Correct output: 59.1228402624  | Program output: 18.078760     
Correct output: -132.1998002816 | Program output: -94.078760    
Correct output: -128.9949320478 | Program output: -51.078760    
Correct output: -78.0962956202 | Program output: -37.078760    
Correct output: -35.919351649  | Program output: -73.078760    
Correct output: -56.0400311694 | Program output: -34.078760    
Correct output: 137.4302481607 | Program output: 47.078760     
Correct output: 32.7727726522  | Program output: 45.078760     
Correct output: -26.6497561561 | Program output: 76.078760     
Correct output: 95.3927116996  | Program output: 7.078760      
Correct output: -65.8806745395 | Program output: -93.078760    
Correct output: 48.7839285535  | Program output: 16.078760     
Correct output: 176.7350863211 | Program output: 97.078760     
Correct output: -87.9710392115 | Program output: -7.078760     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_mod} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction float_dup_items} {:instruction integer_fromfloat} {:instruction float_sin} {:instruction float_add} {:instruction integer_dup_items} {:instruction float_mod} {:instruction integer_pop} {:instruction float_min} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction integer_dup} {:instruction float_max} {:instruction float_dup_items} {:instruction 53.660195741514} {:instruction float_add} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_cos} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction float_inc} {:instruction print_float} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_shove} {:instruction float_frominteger} {:instruction float_swap} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction float_swap} {:instruction float_pop} {:instruction tag_float_918} {:instruction tag_float_918} {:instruction float_swap} {:instruction float_shove} {:instruction float_frominteger} {:instruction float_swap} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction float_swap} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction tag_float_175} {:instruction float_mod} {:instruction float_sub} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction tag_float_175} {:instruction float_mod} {:instruction float_sub} {:instruction float_min} {:instruction print_integer} {:instruction float_rot})
Best program: (float_yankdup in1 float_mod float_tan 93 integer_dup_times integer_sub integer_stackdepth integer_mod float_sin integer_stackdepth integer_flush float_dup_items integer_fromfloat float_sin float_add integer_dup_items float_mod integer_pop float_min float_rot -83 integer_div 53.660195741514 integer_dup float_max float_dup_items 53.660195741514 float_add float_max float_dup_items integer_dup_times float_dup integer_rot float_swap float_dup integer_rot float_swap float_yankdup float_cos in2 integer_inc integer_inc float_frominteger integer_dup_items float_inc print_float float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap float_shove float_frominteger float_swap 76 float_min print_integer integer_mult float_pop integer_dup float_swap float_pop tag_float_918 tag_float_918 float_swap float_shove float_frominteger float_swap integer_mult float_pop integer_dup float_swap float_pop float_dup integer_swap integer_swap float_min float_stackdepth float_rot float_div float_pop float_yank tag_float_175 float_mod float_sub float_rot float_div float_pop float_yank tag_float_175 float_mod float_sub float_min print_integer float_rot)
Errors: [84.4822 10 50.1229 8 10.3057 9 10.6969 11 26.1779 9 12.5291 8 74.4346 10 2.1532 9 24.3707 10 61.5632 9 18.6707 7 41.0441 10 38.121 11 77.9162 12 41.0175 9 37.1594 10 21.9613 10 90.3515 8 12.306 9 102.7285 10 88.314 10 27.1981 10 32.7052 11 79.6563 11 80.8923 10]
Total: 1387.8785000000005
Mean: 27.75757
Genome size: 99
Size: 100
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3171.013520000004
Median total errors in population: 1394.8928500000002
Error averages by case: (151.1511360999994 11.15 124.95767369999959 9.697 83.19718229999955 11.135 82.49799649999953 10.81 99.1135675999991 10.45 85.69440080000017 8.95 139.31662849999944 11.102 76.3714811000004 9.253 98.53120880000087 9.902 127.63128220000195 10.781 94.56577360000031 6.878 110.78162359999898 10.452 113.94156100000032 11.623 148.3799345000004 11.424 113.60816279999997 8.586 110.18000020000126 10.123 95.85444880000114 9.957 156.1781185000002 10.218 83.48655389999973 9.952 164.9065240999987 10.402 152.6662512999991 10.253 103.32286490000044 10.105 103.28123199999911 11.752 148.02546410000014 9.951 149.18344910000056 9.283)
Error minima by case: (20.8493 9 47.1256 8 10.3057 9 7.6942 8 2.0234 8 12.5291 6 15.3559 9 2.1532 8 24.292 8 9.4845 9 18.5919 5 5.4626 9 35.1238 10 45.9182 10 4.9805 6 34.9194 8 18.964 8 14.7185 8 9.3032 8 25.6498 8 11.9277 9 17.1961 8 4.6199 10 54.0234 8 4.8943 8)
Average genome size in population (length): 84.898
Average program size in population (points): 85.898
Average percent parens in population: 0.012
Minimum age in population: 26.03536987304688
Maximum age in population: 30.48159027099609
Average age in population: 28.61123524856567
Median age in population: 28.64460754394531
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 50
Genome diversity (% unique Plush genomes):	 0.8
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.8
Total error diversity:				 0.151
Error (vector) diversity:			 0.164
Behavioral diversity:				 0.164
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 35232783
--- Timings ---
Current time: 1529614968272 milliseconds
Total Time:          81.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        33.4 seconds, 41.0%
Fitness Testing:     37.4 seconds, 45.8%
Report:              10.6 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Number IO problem report - generation 20
Test total error for best: 60591.216399999976
Test mean error for best: 30.29561
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 59.078760     
Correct output: -141.201628771 | Program output: -91.078760    
Correct output: 23.3844813461  | Program output: 13.078760     
Correct output: 91.3818662575  | Program output: 102.078760    
Correct output: 6.0991287499   | Program output: -20.078760    
Correct output: 90.6078865723  | Program output: 78.078760     
Correct output: -16.3558496064 | Program output: 58.078760     
Correct output: 85.2320058807  | Program output: 83.078760     
Correct output: -28.7080490162 | Program output: -53.078760    
Correct output: -10.4844827466 | Program output: 51.078760     
Correct output: -59.408072605  | Program output: -78.078760    
Correct output: 59.1228402624  | Program output: 18.078760     
Correct output: -132.1998002816 | Program output: -94.078760    
Correct output: -128.9949320478 | Program output: -51.078760    
Correct output: -78.0962956202 | Program output: -37.078760    
Correct output: -35.919351649  | Program output: -73.078760    
Correct output: -56.0400311694 | Program output: -34.078760    
Correct output: 137.4302481607 | Program output: 47.078760     
Correct output: 32.7727726522  | Program output: 45.078760     
Correct output: -26.6497561561 | Program output: 76.078760     
Correct output: 95.3927116996  | Program output: 7.078760      
Correct output: -65.8806745395 | Program output: -93.078760    
Correct output: 48.7839285535  | Program output: 16.078760     
Correct output: 176.7350863211 | Program output: 97.078760     
Correct output: -87.9710392115 | Program output: -7.078760     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_mod} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction float_dup_items} {:instruction integer_fromfloat} {:instruction float_sin} {:instruction float_add} {:instruction integer_dup_items} {:instruction float_mod} {:instruction integer_pop} {:instruction float_min} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction integer_dup} {:instruction float_max} {:instruction float_dup_items} {:instruction 53.660195741514} {:instruction float_add} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_cos} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction float_inc} {:instruction print_float} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_shove} {:instruction float_frominteger} {:instruction float_swap} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction float_swap} {:instruction float_pop} {:instruction tag_float_918} {:instruction tag_float_918} {:instruction float_swap} {:instruction float_shove} {:instruction float_frominteger} {:instruction float_swap} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction float_swap} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction tag_float_175} {:instruction float_mod} {:instruction float_sub} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction tag_float_175} {:instruction float_mod} {:instruction float_sub} {:instruction float_min} {:instruction print_integer} {:instruction float_rot})
Best program: (float_yankdup in1 float_mod float_tan 93 integer_dup_times integer_sub integer_stackdepth integer_mod float_sin integer_stackdepth integer_flush float_dup_items integer_fromfloat float_sin float_add integer_dup_items float_mod integer_pop float_min float_rot -83 integer_div 53.660195741514 integer_dup float_max float_dup_items 53.660195741514 float_add float_max float_dup_items integer_dup_times float_dup integer_rot float_swap float_dup integer_rot float_swap float_yankdup float_cos in2 integer_inc integer_inc float_frominteger integer_dup_items float_inc print_float float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap float_shove float_frominteger float_swap 76 float_min print_integer integer_mult float_pop integer_dup float_swap float_pop tag_float_918 tag_float_918 float_swap float_shove float_frominteger float_swap integer_mult float_pop integer_dup float_swap float_pop float_dup integer_swap integer_swap float_min float_stackdepth float_rot float_div float_pop float_yank tag_float_175 float_mod float_sub float_rot float_div float_pop float_yank tag_float_175 float_mod float_sub float_min print_integer float_rot)
Errors: [84.4822 10 50.1229 8 10.3057 9 10.6969 11 26.1779 9 12.5291 8 74.4346 10 2.1532 9 24.3707 10 61.5632 9 18.6707 7 41.0441 10 38.121 11 77.9162 12 41.0175 9 37.1594 10 21.9613 10 90.3515 8 12.306 9 102.7285 10 88.314 10 27.1981 10 32.7052 11 79.6563 11 80.8923 10]
Total: 1387.8785000000005
Mean: 27.75757
Genome size: 99
Size: 100
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3596.9219971999973
Median total errors in population: 1394.8922000000002
Error averages by case: (166.96309939999955 11.063 142.63839029999943 9.489 100.46058629999945 10.97 100.1256828999995 10.747 116.26356219999913 10.386 102.84654969999974 8.824 155.92346959999946 11.205 93.41725970000027 9.545 115.83967910000099 10.159 144.4610331000007 10.608 112.1191636000002 7.255 127.34453739999967 10.324 131.81210190000044 11.646 165.5193283999997 11.66 131.25518939999998 8.824 127.27710500000072 10.327 113.73447710000147 10.219 171.89239249999954 10.117 101.08182449999923 9.833 181.02059619999795 10.417 168.22820389999984 10.295 120.75420360000062 10.243 120.01556149999897 11.692 163.77958679999986 10.257 166.4284131000008 9.615)
Error minima by case: (36.2406 9 47.1256 7 10.3057 9 7.6942 8 4.0204 8 11.5319 7 14.9025 7 2.1532 4 5.0953 8 9.0311 7 18.5919 5 5.1843 8 35.1238 10 74.9189 8 38.0203 7 2.116 8 18.964 8 30.1099 8 9.3032 8 7.1536 7 11.9277 8 27.1193 8 3.8763 9 69.4147 7 54.1677 6)
Average genome size in population (length): 86.009
Average program size in population (points): 87.009
Average percent parens in population: 0.012
Minimum age in population: 27.62519836425781
Maximum age in population: 32.03435516357422
Average age in population: 30.2777170009613
Median age in population: 30.33965110778809
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.868
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.868
Total error diversity:				 0.178
Error (vector) diversity:			 0.198
Behavioral diversity:				 0.199
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 37383058
--- Timings ---
Current time: 1529614973045 milliseconds
Total Time:          86.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        35.1 seconds, 40.6%
Fitness Testing:     39.8 seconds, 46.0%
Report:              11.4 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Number IO problem report - generation 21
Test total error for best: 60533.21659999998
Test mean error for best: 30.26661
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 59.078762     
Correct output: -141.201628771 | Program output: -91.078762    
Correct output: 23.3844813461  | Program output: 13.078762     
Correct output: 91.3818662575  | Program output: 102.078762    
Correct output: 6.0991287499   | Program output: -20.078762    
Correct output: 90.6078865723  | Program output: 78.078762     
Correct output: -16.3558496064 | Program output: 58.078762     
Correct output: 85.2320058807  | Program output: 83.078762     
Correct output: -28.7080490162 | Program output: -53.078762    
Correct output: -10.4844827466 | Program output: 51.078762     
Correct output: -59.408072605  | Program output: -78.078762    
Correct output: 59.1228402624  | Program output: 18.078762     
Correct output: -132.1998002816 | Program output: -94.078762    
Correct output: -128.9949320478 | Program output: -51.078762    
Correct output: -78.0962956202 | Program output: -37.078762    
Correct output: -35.919351649  | Program output: -73.078762    
Correct output: -56.0400311694 | Program output: -34.078762    
Correct output: 137.4302481607 | Program output: 47.078762     
Correct output: 32.7727726522  | Program output: 45.078762     
Correct output: -26.6497561561 | Program output: 76.078762     
Correct output: 95.3927116996  | Program output: 7.078762      
Correct output: -65.8806745395 | Program output: -93.078762    
Correct output: 48.7839285535  | Program output: 16.078762     
Correct output: 176.7350863211 | Program output: 97.078762     
Correct output: -87.9710392115 | Program output: -7.078762     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction integer_mod} {:instruction integer_flush} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_dup} {:instruction integer_flush} {:instruction integer_div} {:instruction integer_div} {:instruction float_max} {:instruction float_stackdepth} {:instruction integer_div} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction 12.307124631169899} {:instruction float_sin} {:instruction float_max} {:instruction float_dup_items} {:instruction 53.660195741514} {:instruction integer_div} {:instruction float_max} {:instruction float_rot} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_cos} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction float_inc} {:instruction print_float} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_shove} {:instruction float_frominteger} {:instruction float_swap} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction float_swap} {:instruction float_pop} {:instruction tag_float_918} {:instruction tag_float_918} {:instruction float_swap} {:instruction float_shove} {:instruction float_frominteger} {:instruction float_swap} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction float_swap} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction tag_float_175} {:instruction float_mod} {:instruction float_sub} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction tag_float_175} {:instruction float_mod} {:instruction float_sub} {:instruction float_min} {:instruction print_integer} {:instruction float_rot})
Best program: (float_yankdup in1 float_mod float_tan 93 integer_dup_times float_yankdup integer_mod integer_mod float_yankdup integer_stackdepth integer_mod integer_flush integer_sub integer_inc integer_sub integer_dup float_dup integer_flush integer_div integer_div float_max float_stackdepth integer_div integer_dup float_stackdepth integer_pop 12.307124631169899 float_sin float_max float_dup_items 53.660195741514 integer_div float_max float_rot integer_dup_times float_dup integer_rot float_swap float_dup integer_rot integer_dup_times float_dup integer_rot float_swap float_dup integer_rot float_swap float_yankdup float_cos in2 integer_inc integer_inc float_frominteger integer_dup_items float_inc print_float float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap float_shove float_frominteger float_swap 76 float_min print_integer integer_mult float_pop integer_dup float_swap float_pop tag_float_918 tag_float_918 float_swap float_shove float_frominteger float_swap integer_mult float_pop integer_dup float_swap float_pop float_dup integer_swap integer_swap float_min float_stackdepth float_rot float_div float_pop float_yank tag_float_175 float_mod float_sub float_rot float_div float_pop float_yank tag_float_175 float_mod float_sub float_min print_integer float_rot)
Errors: [84.4822 10 50.1229 8 10.3057 9 10.6969 10 26.1779 9 12.5291 7 74.4346 11 2.1532 9 24.3707 9 61.5632 9 18.6707 8 41.0441 9 38.121 11 77.9162 12 41.0175 9 37.1594 10 21.9613 10 90.3515 9 12.306 8 102.7285 10 88.3139 10 27.1981 10 32.7052 10 79.6563 10 80.8923 9]
Total: 1382.8784000000005
Mean: 27.657568
Genome size: 109
Size: 110
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3692.686718900002
Median total errors in population: 1391.8890000000001
Error averages by case: (171.49495149999956 10.922 144.95351039999971 9.407 105.51342419999916 10.505 106.28578989999934 10.756 118.13085169999911 10.388 108.48055919999892 8.6 160.7112649999996 10.879 99.50555689999956 9.419 117.96996850000095 10.436 149.34858340000125 10.195 114.5663590000007 7.578 132.31791289999987 10.566 134.1664526999999 11.812 168.2337196000013 11.906 133.9066678999999 9.192 129.40309640000112 10.254 116.43806580000079 10.472 176.36340389999862 9.767 106.66712389999927 9.658 185.57312949999888 10.313 172.45167170000065 10.344 122.25405509999901 10.149 124.98985309999854 11.431 168.38186670000047 10.735 168.70088000000234 10.194)
Error minima by case: (17.4196 8 48.1229 7 8.9323 6 8.6944 8 1.0234 7 12.5269 6 15.3572 7 2.151 6 24.292 8 9.4858 7 18.5919 6 5.4626 7 36.121 7 47.9162 8 2.9825 6 34.0182 8 19.9613 7 23.5503 7 9.674 8 25.6504 7 3.7054 6 15.1981 8 4.8763 7 12.9962 8 6.8923 6)
Average genome size in population (length): 90.774
Average program size in population (points): 91.774
Average percent parens in population: 0.011
Minimum age in population: 29.39309501647949
Maximum age in population: 33.71882247924805
Average age in population: 31.90724695110321
Median age in population: 31.95658159255981
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.867
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.867
Total error diversity:				 0.198
Error (vector) diversity:			 0.217
Behavioral diversity:				 0.217
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 39652697
--- Timings ---
Current time: 1529614977750 milliseconds
Total Time:          91.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        36.6 seconds, 40.2%
Fitness Testing:     42.3 seconds, 46.4%
Report:              12.2 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Number IO problem report - generation 22
Test total error for best: 60549.33069999998
Test mean error for best: 30.27467
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 58.078762     
Correct output: -141.201628771 | Program output: -92.078762    
Correct output: 23.3844813461  | Program output: 12.078762     
Correct output: 91.3818662575  | Program output: 101.078762    
Correct output: 6.0991287499   | Program output: -21.078762    
Correct output: 90.6078865723  | Program output: 77.078762     
Correct output: -16.3558496064 | Program output: 57.078762     
Correct output: 85.2320058807  | Program output: 82.078762     
Correct output: -28.7080490162 | Program output: -54.078762    
Correct output: -10.4844827466 | Program output: 50.078762     
Correct output: -59.408072605  | Program output: -79.078762    
Correct output: 59.1228402624  | Program output: 17.078762     
Correct output: -132.1998002816 | Program output: -95.078762    
Correct output: -128.9949320478 | Program output: -52.078762    
Correct output: -78.0962956202 | Program output: -38.078762    
Correct output: -35.919351649  | Program output: -74.078762    
Correct output: -56.0400311694 | Program output: -35.078762    
Correct output: 137.4302481607 | Program output: 46.078762     
Correct output: 32.7727726522  | Program output: 44.078762     
Correct output: -26.6497561561 | Program output: 75.078762     
Correct output: 95.3927116996  | Program output: 6.078762      
Correct output: -65.8806745395 | Program output: -94.078762    
Correct output: 48.7839285535  | Program output: 15.078762     
Correct output: 176.7350863211 | Program output: 96.078762     
Correct output: -87.9710392115 | Program output: -8.078762     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_yankdup} {:instruction float_div} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction in1} {:instruction integer_yankdup} {:instruction float_tan} {:instruction 93} {:instruction integer_yank} {:instruction float_dup_items} {:instruction integer_mod} {:instruction integer_flush} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction float_add} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_cos} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction integer_stackdepth} {:instruction print_float} {:instruction integer_mult} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_frominteger} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_shove} {:instruction float_swap} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction float_swap} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction integer_swap} {:instruction float_min} {:instruction float_stackdepth} {:instruction tag_float_918} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_min} {:instruction integer_add} {:instruction float_rot} {:instruction float_div} {:instruction integer_min} {:instruction float_yank} {:instruction float_sub} {:instruction float_min} {:instruction print_integer} {:instruction float_rot})
Best program: (integer_dup_times float_dup_times float_yankdup float_div float_yankdup float_yankdup in1 integer_yankdup float_tan 93 integer_yank float_dup_items integer_mod integer_flush integer_mod float_yankdup integer_stackdepth integer_flush float_add float_max float_dup_items integer_dup_times float_dup integer_rot float_swap float_dup integer_rot float_swap float_yankdup float_cos in2 integer_inc integer_inc float_frominteger integer_dup_items integer_stackdepth print_float integer_mult integer_dup_items integer_sub integer_dup_times float_dup float_frominteger float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap float_shove float_swap 76 float_min print_integer integer_mult float_pop integer_dup float_swap float_stackdepth float_rot float_div float_pop float_yank integer_swap float_min float_stackdepth tag_float_918 integer_dup_items integer_swap float_min integer_add float_rot float_div integer_min float_yank float_sub float_min print_integer float_rot)
Errors: [85.4822 10 49.1229 9 11.3057 10 9.6969 9 27.1779 10 13.5291 7 73.4346 11 3.1532 9 25.3707 9 60.5632 9 19.6707 7 42.0441 9 37.121 11 76.9162 11 40.0175 8 38.1594 10 20.9613 10 91.3515 10 11.306 8 101.7285 11 89.3139 10 28.1981 10 33.7052 10 80.6563 10 79.8923 9]
Total: 1386.8784000000005
Mean: 27.737568
Genome size: 81
Size: 82
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3426.3121026000044
Median total errors in population: 1390.8935000000001
Error averages by case: (160.32130179999876 10.974 136.70782860000025 9.322 92.887498799999 10.355 94.09129569999932 10.919 108.57920589999908 10.29 95.94353639999883 8.554 149.3809220999997 10.794 86.75314389999956 9.12 108.29335640000072 10.381 137.8558356000021 10.254 104.72128900000118 7.775 120.19798649999925 10.762 125.78666969999928 11.92 159.5050189000018 12.094 124.75911229999979 9.519 119.816801600002 10.054 107.10938530000111 10.456 165.28982569999914 9.64 94.44983639999933 9.584 174.62794939999907 10.019 160.82372060000046 10.38 113.4084179999986 9.917 112.73840159999806 11.302 157.08526110000037 10.644 160.0385013000017 10.111)
Error minima by case: (2.3398 9 47.1259 7 6.6943 8 7.6939 8 3.0234 9 11.5321 7 15.3877 9 1.1562 8 23.3677 9 9.5163 9 17.6677 6 4.3212 8 35.124 9 45.9189 9 2.9825 7 34.0182 8 18.9643 8 9.6602 8 2.694 8 25.6816 8 11.9277 9 15.1981 9 4.8763 9 40.3398 9 4.895 8)
Average genome size in population (length): 93.184
Average program size in population (points): 94.184
Average percent parens in population: 0.011
Minimum age in population: 30.8772144317627
Maximum age in population: 35.1838231086731
Average age in population: 33.32526858234406
Median age in population: 33.32580327987671
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.849
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.849
Total error diversity:				 0.177
Error (vector) diversity:			 0.2
Behavioral diversity:				 0.2
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 41982475
--- Timings ---
Current time: 1529614982071 milliseconds
Total Time:          95.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        38.2 seconds, 39.9%
Fitness Testing:     44.5 seconds, 46.6%
Report:              12.8 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Number IO problem report - generation 23
Test total error for best: 60533.21659999998
Test mean error for best: 30.26661
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 59.078762     
Correct output: -141.201628771 | Program output: -91.078762    
Correct output: 23.3844813461  | Program output: 13.078762     
Correct output: 91.3818662575  | Program output: 102.078762    
Correct output: 6.0991287499   | Program output: -20.078762    
Correct output: 90.6078865723  | Program output: 78.078762     
Correct output: -16.3558496064 | Program output: 58.078762     
Correct output: 85.2320058807  | Program output: 83.078762     
Correct output: -28.7080490162 | Program output: -53.078762    
Correct output: -10.4844827466 | Program output: 51.078762     
Correct output: -59.408072605  | Program output: -78.078762    
Correct output: 59.1228402624  | Program output: 18.078762     
Correct output: -132.1998002816 | Program output: -94.078762    
Correct output: -128.9949320478 | Program output: -51.078762    
Correct output: -78.0962956202 | Program output: -37.078762    
Correct output: -35.919351649  | Program output: -73.078762    
Correct output: -56.0400311694 | Program output: -34.078762    
Correct output: 137.4302481607 | Program output: 47.078762     
Correct output: 32.7727726522  | Program output: 45.078762     
Correct output: -26.6497561561 | Program output: 76.078762     
Correct output: 95.3927116996  | Program output: 7.078762      
Correct output: -65.8806745395 | Program output: -93.078762    
Correct output: 48.7839285535  | Program output: 16.078762     
Correct output: 176.7350863211 | Program output: 97.078762     
Correct output: -87.9710392115 | Program output: -7.078762     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction integer_dup} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction integer_mod} {:instruction integer_flush} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_dup} {:instruction integer_flush} {:instruction integer_div} {:instruction integer_div} {:instruction float_max} {:instruction float_stackdepth} {:instruction integer_div} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction 12.307124631169899} {:instruction float_sin} {:instruction float_max} {:instruction float_dup_items} {:instruction 53.660195741514} {:instruction float_add} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_cos} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction float_inc} {:instruction print_float} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_shove} {:instruction float_frominteger} {:instruction float_swap} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction float_swap} {:instruction float_pop} {:instruction tag_float_918} {:instruction tag_float_918} {:instruction float_swap} {:instruction float_shove} {:instruction float_frominteger} {:instruction float_min} {:instruction float_dup} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction tag_float_175} {:instruction float_mod} {:instruction float_sub} {:instruction float_min} {:instruction print_integer} {:instruction float_rot})
Best program: (float_yankdup in1 float_mod integer_dup 93 integer_dup_times float_yankdup integer_mod integer_mod float_yankdup integer_stackdepth integer_mod integer_flush integer_sub integer_inc integer_sub integer_dup float_dup integer_flush integer_div integer_div float_max float_stackdepth integer_div integer_dup float_stackdepth integer_pop 12.307124631169899 float_sin float_max float_dup_items 53.660195741514 float_add float_max float_dup_items integer_dup_times float_dup float_dup integer_rot float_swap float_dup integer_rot float_swap float_yankdup float_cos in2 integer_inc integer_inc float_frominteger integer_dup_items float_inc print_float float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap float_shove float_frominteger float_swap 76 float_min print_integer integer_mult float_pop integer_dup float_swap float_pop tag_float_918 tag_float_918 float_swap float_shove float_frominteger float_min float_dup integer_swap integer_swap float_min float_stackdepth float_rot float_div float_pop float_yank tag_float_175 float_mod float_sub float_min print_integer float_rot)
Errors: [84.4822 10 50.1229 8 10.3057 9 10.6969 10 26.1779 9 12.5291 7 74.4346 11 2.1532 9 24.3707 9 61.5632 9 18.6707 8 41.0441 9 38.121 11 77.9162 12 41.0175 9 37.1594 10 21.9613 10 90.3515 9 12.306 8 102.7285 10 88.3139 10 27.1981 10 32.7052 10 79.6563 10 80.8923 9]
Total: 1382.8784000000005
Mean: 27.657568
Genome size: 92
Size: 93
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3180.7659493999986
Median total errors in population: 1389.8922000000002
Error averages by case: (151.88568739999926 10.649 125.99559130000068 8.94 82.59136309999923 10.104 84.13202829999969 10.877 98.43428859999916 9.958 86.65413269999944 8.574 139.74714779999883 10.931 77.40384940000014 9.431 98.22627920000029 10.429 128.11263220000075 10.081 94.67737050000089 7.899 110.29676309999932 10.494 115.05013429999951 11.617 149.4651984000019 12.064 114.49605100000049 9.7 109.94988030000093 10.437 96.81208520000023 10.495 156.68667959999985 9.364 84.63413649999902 9.627 165.25954749999838 10.253 152.12897400000023 10.413 102.58366159999879 10.174 102.73600459999827 11.297 148.44964940000094 10.916 149.6108134000019 10.022)
Error minima by case: (17.4196 9 48.1229 7 7.3057 8 3.4777 8 3.0204 8 4.2517 7 2.721 9 0.8468 8 9.6312 8 8.5923 8 5.7482 5 3.3212 8 36.121 10 48.9162 10 1.9797 7 16.8425 8 2.4736 8 23.5503 8 9.674 8 7.5729 8 0.5332 9 12.2208 7 4.8763 9 15.7545 9 7.8923 8)
Average genome size in population (length): 90.874
Average program size in population (points): 91.874
Average percent parens in population: 0.011
Minimum age in population: 32.71685028076172
Maximum age in population: 36.48466873168945
Average age in population: 34.66056310534477
Median age in population: 34.70750939846039
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.847
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.847
Total error diversity:				 0.193
Error (vector) diversity:			 0.22
Behavioral diversity:				 0.22
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 44254425
--- Timings ---
Current time: 1529614986890 milliseconds
Total Time:         100.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        39.9 seconds, 39.8%
Fitness Testing:     46.9 seconds, 46.8%
Report:              13.3 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Number IO problem report - generation 24
Test total error for best: 60533.21659999998
Test mean error for best: 30.26661
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 59.078762     
Correct output: -141.201628771 | Program output: -91.078762    
Correct output: 23.3844813461  | Program output: 13.078762     
Correct output: 91.3818662575  | Program output: 102.078762    
Correct output: 6.0991287499   | Program output: -20.078762    
Correct output: 90.6078865723  | Program output: 78.078762     
Correct output: -16.3558496064 | Program output: 58.078762     
Correct output: 85.2320058807  | Program output: 83.078762     
Correct output: -28.7080490162 | Program output: -53.078762    
Correct output: -10.4844827466 | Program output: 51.078762     
Correct output: -59.408072605  | Program output: -78.078762    
Correct output: 59.1228402624  | Program output: 18.078762     
Correct output: -132.1998002816 | Program output: -94.078762    
Correct output: -128.9949320478 | Program output: -51.078762    
Correct output: -78.0962956202 | Program output: -37.078762    
Correct output: -35.919351649  | Program output: -73.078762    
Correct output: -56.0400311694 | Program output: -34.078762    
Correct output: 137.4302481607 | Program output: 47.078762     
Correct output: 32.7727726522  | Program output: 45.078762     
Correct output: -26.6497561561 | Program output: 76.078762     
Correct output: 95.3927116996  | Program output: 7.078762      
Correct output: -65.8806745395 | Program output: -93.078762    
Correct output: 48.7839285535  | Program output: 16.078762     
Correct output: 176.7350863211 | Program output: 97.078762     
Correct output: -87.9710392115 | Program output: -7.078762     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_mod} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction float_dup_items} {:instruction integer_fromfloat} {:instruction float_sin} {:instruction float_add} {:instruction integer_dup_items} {:instruction float_mod} {:instruction integer_pop} {:instruction float_min} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 54.446085003980116} {:instruction integer_dup} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction integer_dup} {:instruction float_max} {:instruction float_dup_items} {:instruction 53.660195741514} {:instruction float_add} {:instruction float_max} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_cos} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction float_inc} {:instruction print_float} {:instruction in1} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_shove} {:instruction float_frominteger} {:instruction float_swap} {:instruction 76} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction float_swap} {:instruction float_shove} {:instruction float_frominteger} {:instruction float_swap} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction float_swap} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction tag_float_175} {:instruction float_mod} {:instruction float_sub} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction tag_float_175} {:instruction float_mod} {:instruction float_sub} {:instruction float_min} {:instruction print_integer} {:instruction float_rot})
Best program: (float_yankdup in1 float_mod float_tan 93 integer_dup_times integer_sub integer_stackdepth integer_mod float_sin integer_stackdepth integer_flush float_dup_items integer_fromfloat float_sin float_add integer_dup_items float_mod integer_pop float_min float_rot -83 integer_div 54.446085003980116 integer_dup float_rot -83 integer_div 53.660195741514 integer_dup float_max float_dup_items 53.660195741514 float_add float_max float_dup integer_rot float_swap float_dup integer_rot float_swap float_yankdup float_cos in2 integer_inc integer_inc float_frominteger integer_dup_items float_inc print_float in1 float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap float_shove float_frominteger float_swap 76 76 float_min print_integer integer_mult float_pop integer_dup float_swap float_shove float_frominteger float_swap integer_mult float_pop integer_dup float_swap float_pop float_dup integer_swap integer_swap float_min float_stackdepth float_rot float_div float_pop float_yank tag_float_175 float_mod float_sub float_rot float_div float_pop float_yank tag_float_175 float_mod float_sub float_min print_integer float_rot)
Errors: [84.4822 10 50.1229 8 10.3057 9 10.6969 10 26.1779 9 12.5291 7 74.4346 11 2.1532 9 24.3707 9 61.5632 9 18.6707 8 41.0441 9 38.121 11 77.9162 12 41.0175 9 37.1594 10 21.9613 10 90.3515 9 12.306 8 102.7285 10 88.3139 10 27.1981 10 32.7052 10 79.6563 10 80.8923 9]
Total: 1382.8784000000005
Mean: 27.657568
Genome size: 100
Size: 101
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3110.3425103999994
Median total errors in population: 1387.8785000000005
Error averages by case: (147.08701489999916 10.403 124.01182330000121 8.678 80.16802409999868 9.659 82.01162560000002 10.971 94.80969719999929 9.629 83.04556679999985 8.439 138.91236379999813 10.734 74.00605660000049 9.453 95.26642909999963 10.4 127.09121670000071 9.66 92.09873640000113 7.756 107.07576289999946 10.35 112.99563289999938 11.394 147.24022920000297 12.142 111.7855401000012 9.675 107.32172100000057 10.468 93.84972999999957 10.442 151.92055019999987 8.949 82.30851579999855 9.553 164.8277669999982 10.342 148.803562 10.366 100.24345819999895 10.309 99.71679199999825 11.166 144.5290679000015 11.149 147.00062670000295 10.128)
Error minima by case: (17.4196 9 48.1229 7 1.4211 8 8.6969 8 2.0204 8 9.5291 7 15.3911 9 0.1538 7 21.3707 8 9.5197 8 15.6707 4 3.6768 9 36.121 9 46.9162 10 1.9825 7 33.3469 8 19.9613 9 23.5503 8 9.674 8 25.685 8 11.9277 8 14.1981 8 4.8763 9 14.7545 9 5.8923 8)
Average genome size in population (length): 93.531
Average program size in population (points): 94.531
Average percent parens in population: 0.011
Minimum age in population: 33.86935424804688
Maximum age in population: 37.92345130443573
Average age in population: 35.98102775156498
Median age in population: 36.01537853479385
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.881
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.881
Total error diversity:				 0.147
Error (vector) diversity:			 0.172
Behavioral diversity:				 0.174
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 46592850
--- Timings ---
Current time: 1529614991724 milliseconds
Total Time:         105.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        41.5 seconds, 39.4%
Fitness Testing:     49.6 seconds, 47.1%
Report:              14.0 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Number IO problem report - generation 25
Test total error for best: 60691.55729999997
Test mean error for best: 30.34578
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 61.078762     
Correct output: -141.201628771 | Program output: -89.078762    
Correct output: 23.3844813461  | Program output: 15.078762     
Correct output: 91.3818662575  | Program output: 104.078762    
Correct output: 6.0991287499   | Program output: -18.078762    
Correct output: 90.6078865723  | Program output: 80.078762     
Correct output: -16.3558496064 | Program output: 60.078762     
Correct output: 85.2320058807  | Program output: 85.078762     
Correct output: -28.7080490162 | Program output: -51.078762    
Correct output: -10.4844827466 | Program output: 53.078762     
Correct output: -59.408072605  | Program output: -76.078762    
Correct output: 59.1228402624  | Program output: 20.078762     
Correct output: -132.1998002816 | Program output: -92.078762    
Correct output: -128.9949320478 | Program output: -49.078762    
Correct output: -78.0962956202 | Program output: -35.078762    
Correct output: -35.919351649  | Program output: -71.078762    
Correct output: -56.0400311694 | Program output: -32.078762    
Correct output: 137.4302481607 | Program output: 49.078762     
Correct output: 32.7727726522  | Program output: 47.078762     
Correct output: -26.6497561561 | Program output: 78.078762     
Correct output: 95.3927116996  | Program output: 9.078762      
Correct output: -65.8806745395 | Program output: -91.078762    
Correct output: 48.7839285535  | Program output: 18.078762     
Correct output: 176.7350863211 | Program output: 99.078762     
Correct output: -87.9710392115 | Program output: -5.078762     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction integer_dup} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_swap} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup} {:instruction float_swap} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction tag_float_175} {:instruction float_mod} {:instruction float_sub} {:instruction float_max} {:instruction print_integer} {:instruction float_rot})
Best program: (float_yankdup in1 float_mod float_tan 93 integer_dup_times float_yankdup integer_mod integer_mod float_yankdup float_rot -83 integer_div 53.660195741514 integer_dup float_max float_dup_items integer_dup_times float_dup integer_rot float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger integer_dup_items print_float float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove float_frominteger float_swap 76 float_min print_integer integer_mult float_pop integer_dup float_swap integer_dup float_swap float_pop float_dup integer_swap integer_swap float_min float_stackdepth float_rot float_div float_pop float_yank tag_float_175 float_mod float_sub float_max print_integer float_rot)
Errors: [82.4822 10 52.1229 9 8.3057 10 12.6969 10 24.1779 10 10.5291 6 76.4346 11 0.1532 8 22.3707 9 63.5632 10 16.6707 8 39.0441 9 40.121 10 79.9162 12 43.0175 9 35.1594 10 23.9613 10 88.3515 10 14.306 8 104.7285 11 86.3139 9 25.1981 10 30.7052 9 77.6563 11 82.8923 10]
Total: 1379.8784000000005
Mean: 27.597569
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3186.794422
Median total errors in population: 1387.8785000000005
Error averages by case: (150.781399599999 10.374 126.28647840000102 8.723 82.93782909999905 9.628 85.03644349999975 10.807 99.83559099999914 9.607 85.84498519999985 8.277 140.0058459999984 10.737 77.57268010000045 9.355 100.23533029999965 10.165 128.39453150000088 9.582 95.28822870000091 7.664 110.57966649999948 10.175 115.27596089999946 11.244 150.22726330000268 12.038 115.33454410000111 9.532 110.84557650000082 10.419 97.75555649999927 10.337 156.72042579999942 9.067 84.61569239999884 9.412 165.45760749999855 10.349 152.21733820000046 10.306 104.03428169999876 10.244 103.04844019999855 11.015 147.49148260000123 10.983 150.91224240000258 10.019)
Error minima by case: (18.4196 9 48.1229 7 8.3057 8 8.6969 8 3.935 8 10.5291 6 16.3558 9 0.1532 8 22.3701 7 9.619 8 16.6701 5 5.4626 8 36.121 9 45.9162 9 2.9825 7 34.0182 9 19.9613 9 24.5503 8 9.674 8 26.6498 9 2.6534 8 15.1981 8 4.8763 9 14.7545 9 4.8923 8)
Average genome size in population (length): 93.457
Average program size in population (points): 94.457
Average percent parens in population: 0.011
Minimum age in population: 34.95642638206482
Maximum age in population: 39.59908580780029
Average age in population: 37.44746528935432
Median age in population: 37.50892513990402
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.895
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.895
Total error diversity:				 0.153
Error (vector) diversity:			 0.175
Behavioral diversity:				 0.175
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 48929325
--- Timings ---
Current time: 1529614996000 milliseconds
Total Time:         109.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        42.9 seconds, 39.2%
Fitness Testing:     51.8 seconds, 47.3%
Report:              14.6 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Number IO problem report - generation 26
Test total error for best: 60691.55729999997
Test mean error for best: 30.34578
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 61.078762     
Correct output: -141.201628771 | Program output: -89.078762    
Correct output: 23.3844813461  | Program output: 15.078762     
Correct output: 91.3818662575  | Program output: 104.078762    
Correct output: 6.0991287499   | Program output: -18.078762    
Correct output: 90.6078865723  | Program output: 80.078762     
Correct output: -16.3558496064 | Program output: 60.078762     
Correct output: 85.2320058807  | Program output: 85.078762     
Correct output: -28.7080490162 | Program output: -51.078762    
Correct output: -10.4844827466 | Program output: 53.078762     
Correct output: -59.408072605  | Program output: -76.078762    
Correct output: 59.1228402624  | Program output: 20.078762     
Correct output: -132.1998002816 | Program output: -92.078762    
Correct output: -128.9949320478 | Program output: -49.078762    
Correct output: -78.0962956202 | Program output: -35.078762    
Correct output: -35.919351649  | Program output: -71.078762    
Correct output: -56.0400311694 | Program output: -32.078762    
Correct output: 137.4302481607 | Program output: 49.078762     
Correct output: 32.7727726522  | Program output: 47.078762     
Correct output: -26.6497561561 | Program output: 78.078762     
Correct output: 95.3927116996  | Program output: 9.078762      
Correct output: -65.8806745395 | Program output: -91.078762    
Correct output: 48.7839285535  | Program output: 18.078762     
Correct output: 176.7350863211 | Program output: 99.078762     
Correct output: -87.9710392115 | Program output: -5.078762     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction integer_dup} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_swap} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup} {:instruction float_swap} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction tag_float_175} {:instruction float_mod} {:instruction float_sub} {:instruction float_max} {:instruction print_integer} {:instruction float_rot})
Best program: (float_yankdup in1 float_mod float_tan 93 integer_dup_times float_yankdup integer_mod integer_mod float_yankdup float_rot -83 integer_div 53.660195741514 integer_dup float_max float_dup_items integer_dup_times float_dup integer_rot float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger integer_dup_items print_float float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove float_frominteger float_swap 76 float_min print_integer integer_mult float_pop integer_dup float_swap integer_dup float_swap float_pop float_dup integer_swap integer_swap float_min float_stackdepth float_rot float_div float_pop float_yank tag_float_175 float_mod float_sub float_max print_integer float_rot)
Errors: [82.4822 10 52.1229 9 8.3057 10 12.6969 10 24.1779 10 10.5291 6 76.4346 11 0.1532 8 22.3707 9 63.5632 10 16.6707 8 39.0441 9 40.121 10 79.9162 12 43.0175 9 35.1594 10 23.9613 10 88.3515 10 14.306 8 104.7285 11 86.3139 9 25.1981 10 30.7052 9 77.6563 11 82.8923 10]
Total: 1379.8784000000005
Mean: 27.597569
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3399.3319084000004
Median total errors in population: 1387.8785000000005
Error averages by case: (157.40721169999927 10.544 137.9248060000005 8.965 90.21733799999879 9.731 91.54054049999965 10.729 109.70802209999897 9.849 93.45179289999993 8.272 146.48115399999844 10.969 84.27604170000029 9.43 109.65525369999988 9.917 134.9556508000009 9.632 106.34954330000092 7.818 117.54534719999961 10.015 126.99296589999973 11.201 161.277412600003 12.035 126.34640060000098 9.572 121.13449960000068 10.47 108.67701849999911 10.325 162.38552779999947 9.501 91.7397346999987 9.391 171.7039900999986 10.471 158.61065570000036 10.313 114.0640141999986 10.331 110.08021369999858 10.979 154.11700280000122 10.79 161.42777030000286 10.012)
Error minima by case: (1.3398 9 48.1209 7 8.3057 8 2.05 9 0.5519 8 10.5291 6 15.3877 8 0.1532 7 17.5189 7 9.5163 8 8.6832 5 4.5881 8 36.119 9 40.9162 9 3.9825 7 27.7991 9 19.9593 8 10.6602 8 6.7085 7 25.6816 8 3.0 7 15.3292 8 4.8763 8 38.9057 8 0.1077 9)
Average genome size in population (length): 91.476
Average program size in population (points): 92.476
Average percent parens in population: 0.011
Minimum age in population: 35.95642638206482
Maximum age in population: 41.05819654464722
Average age in population: 38.88350227820873
Median age in population: 38.93179413676262
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.849
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.849
Total error diversity:				 0.192
Error (vector) diversity:			 0.235
Behavioral diversity:				 0.235
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 51216275
--- Timings ---
Current time: 1529615000711 milliseconds
Total Time:         114.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        44.6 seconds, 39.1%
Fitness Testing:     54.2 seconds, 47.5%
Report:              15.2 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Number IO problem report - generation 27
Test total error for best: 60691.55729999997
Test mean error for best: 30.34578
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 61.078762     
Correct output: -141.201628771 | Program output: -89.078762    
Correct output: 23.3844813461  | Program output: 15.078762     
Correct output: 91.3818662575  | Program output: 104.078762    
Correct output: 6.0991287499   | Program output: -18.078762    
Correct output: 90.6078865723  | Program output: 80.078762     
Correct output: -16.3558496064 | Program output: 60.078762     
Correct output: 85.2320058807  | Program output: 85.078762     
Correct output: -28.7080490162 | Program output: -51.078762    
Correct output: -10.4844827466 | Program output: 53.078762     
Correct output: -59.408072605  | Program output: -76.078762    
Correct output: 59.1228402624  | Program output: 20.078762     
Correct output: -132.1998002816 | Program output: -92.078762    
Correct output: -128.9949320478 | Program output: -49.078762    
Correct output: -78.0962956202 | Program output: -35.078762    
Correct output: -35.919351649  | Program output: -71.078762    
Correct output: -56.0400311694 | Program output: -32.078762    
Correct output: 137.4302481607 | Program output: 49.078762     
Correct output: 32.7727726522  | Program output: 47.078762     
Correct output: -26.6497561561 | Program output: 78.078762     
Correct output: 95.3927116996  | Program output: 9.078762      
Correct output: -65.8806745395 | Program output: -91.078762    
Correct output: 48.7839285535  | Program output: 18.078762     
Correct output: 176.7350863211 | Program output: 99.078762     
Correct output: -87.9710392115 | Program output: -5.078762     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction integer_dup} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_swap} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup} {:instruction float_swap} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction tag_float_175} {:instruction float_mod} {:instruction float_sub} {:instruction float_max} {:instruction print_integer} {:instruction float_rot})
Best program: (float_yankdup in1 float_mod float_tan 93 integer_dup_times float_yankdup integer_mod integer_mod float_yankdup float_rot -83 integer_div 53.660195741514 integer_dup float_max float_dup_items integer_dup_times float_dup integer_rot float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger integer_dup_items print_float float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove float_frominteger float_swap 76 float_min print_integer integer_mult float_pop integer_dup float_swap integer_dup float_swap float_pop float_dup integer_swap integer_swap float_min float_stackdepth float_rot float_div float_pop float_yank tag_float_175 float_mod float_sub float_max print_integer float_rot)
Errors: [82.4822 10 52.1229 9 8.3057 10 12.6969 10 24.1779 10 10.5291 6 76.4346 11 0.1532 8 22.3707 9 63.5632 10 16.6707 8 39.0441 9 40.121 10 79.9162 12 43.0175 9 35.1594 10 23.9613 10 88.3515 10 14.306 8 104.7285 11 86.3139 9 25.1981 10 30.7052 9 77.6563 11 82.8923 10]
Total: 1379.8784000000005
Mean: 27.597569
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3273.295075500001
Median total errors in population: 1385.8785000000005
Error averages by case: (153.32012409999928 10.509 131.4433233000007 8.725 86.22500569999909 9.515 88.79567229999996 10.682 103.08171789999946 9.75 89.25985390000001 8.128 143.7278601999988 11.08 80.15107980000026 9.339 103.16029909999986 9.663 132.10987260000078 9.544 99.78309190000066 8.015 113.22296489999981 9.788 120.51703779999978 11.1 154.62119030000238 12.077 119.58752220000083 9.665 114.8565044000005 10.443 101.97146979999947 10.23 158.1557109999994 9.489 88.30044749999905 9.226 169.1924774999989 10.346 154.45484180000008 10.269 107.66787349999908 10.31 105.862338399999 10.772 150.44051040000096 10.55 154.36128520000221 9.81)
Error minima by case: (15.5178 6 49.0458 5 8.3057 4 1.2959 9 1.9796 5 10.5291 5 15.5404 5 0.1532 4 22.37 7 10.4845 5 16.6699 5 5.4626 5 35.7036 5 45.9162 6 1.9825 4 34.0182 9 20.6544 5 9.6485 5 9.674 7 25.8955 5 4.0 4 14.1981 9 4.8763 5 0.7351 6 4.8923 4)
Average genome size in population (length): 89.726
Average program size in population (points): 90.726
Average percent parens in population: 0.011
Minimum age in population: 37.64763593673706
Maximum age in population: 42.34604853391647
Average age in population: 40.36143926271796
Median age in population: 40.41325884312391
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.829
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.829
Total error diversity:				 0.172
Error (vector) diversity:			 0.207
Behavioral diversity:				 0.208
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 53459500
--- Timings ---
Current time: 1529615005175 milliseconds
Total Time:         118.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        46.2 seconds, 38.9%
Fitness Testing:     56.6 seconds, 47.7%
Report:              15.9 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Number IO problem report - generation 28
Test total error for best: 60691.55729999997
Test mean error for best: 30.34578
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 61.078762     
Correct output: -141.201628771 | Program output: -89.078762    
Correct output: 23.3844813461  | Program output: 15.078762     
Correct output: 91.3818662575  | Program output: 104.078762    
Correct output: 6.0991287499   | Program output: -18.078762    
Correct output: 90.6078865723  | Program output: 80.078762     
Correct output: -16.3558496064 | Program output: 60.078762     
Correct output: 85.2320058807  | Program output: 85.078762     
Correct output: -28.7080490162 | Program output: -51.078762    
Correct output: -10.4844827466 | Program output: 53.078762     
Correct output: -59.408072605  | Program output: -76.078762    
Correct output: 59.1228402624  | Program output: 20.078762     
Correct output: -132.1998002816 | Program output: -92.078762    
Correct output: -128.9949320478 | Program output: -49.078762    
Correct output: -78.0962956202 | Program output: -35.078762    
Correct output: -35.919351649  | Program output: -71.078762    
Correct output: -56.0400311694 | Program output: -32.078762    
Correct output: 137.4302481607 | Program output: 49.078762     
Correct output: 32.7727726522  | Program output: 47.078762     
Correct output: -26.6497561561 | Program output: 78.078762     
Correct output: 95.3927116996  | Program output: 9.078762      
Correct output: -65.8806745395 | Program output: -91.078762    
Correct output: 48.7839285535  | Program output: 18.078762     
Correct output: 176.7350863211 | Program output: 99.078762     
Correct output: -87.9710392115 | Program output: -5.078762     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction integer_dup} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_swap} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup} {:instruction float_swap} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction tag_float_175} {:instruction float_mod} {:instruction float_sub} {:instruction float_max} {:instruction print_integer} {:instruction float_rot})
Best program: (float_yankdup in1 float_mod float_tan 93 integer_dup_times float_yankdup integer_mod integer_mod float_yankdup float_rot -83 integer_div 53.660195741514 integer_dup float_max float_dup_items integer_dup_times float_dup integer_rot float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger integer_dup_items print_float float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove float_frominteger float_swap 76 float_min print_integer integer_mult float_pop integer_dup float_swap integer_dup float_swap float_pop float_dup integer_swap integer_swap float_min float_stackdepth float_rot float_div float_pop float_yank tag_float_175 float_mod float_sub float_max print_integer float_rot)
Errors: [82.4822 10 52.1229 9 8.3057 10 12.6969 10 24.1779 10 10.5291 6 76.4346 11 0.1532 8 22.3707 9 63.5632 10 16.6707 8 39.0441 9 40.121 10 79.9162 12 43.0175 9 35.1594 10 23.9613 10 88.3515 10 14.306 8 104.7285 11 86.3139 9 25.1981 10 30.7052 9 77.6563 11 82.8923 10]
Total: 1379.8784000000005
Mean: 27.597569
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3665.0969088000043
Median total errors in population: 1383.8684999999998
Error averages by case: (167.93455989999916 10.481 146.8609748999996 8.771 102.04304999999907 9.585 104.8496080999993 10.79 118.7304763999988 9.751 104.89211669999997 8.049 159.99111619999988 11.208 95.59943780000044 9.34 118.5160361999997 9.775 148.5317434000012 9.684 114.89262330000064 8.348 128.88487259999962 9.819 136.10803599999997 11.059 170.00372430000274 12.171 135.7493359000007 9.842 130.06800490000091 10.491 118.44561759999883 10.357 172.83309279999833 9.593 105.32117279999899 9.227 185.11993459999854 10.428 169.63459780000096 10.295 122.65950189999852 10.403 121.57550769999875 10.705 164.7974140000013 10.659 170.3773530000027 9.846)
Error minima by case: (2.3398 9 48.1229 7 8.3057 8 2.05 9 1.0204 8 10.5291 5 5.2771 9 0.1532 7 17.5189 7 0.5943 8 8.6832 4 4.4626 8 36.121 8 45.9949 9 2.9819 8 24.8406 9 19.9613 8 9.6602 8 6.7085 7 15.571 8 11.9277 8 15.1975 9 5.6622 8 0.7351 9 2.029 8)
Average genome size in population (length): 87.672
Average program size in population (points): 88.672
Average percent parens in population: 0.011
Minimum age in population: 39.56685566902161
Maximum age in population: 43.73128396272659
Average age in population: 41.83293539703637
Median age in population: 41.84028607979417
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.848
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.848
Total error diversity:				 0.181
Error (vector) diversity:			 0.212
Behavioral diversity:				 0.212
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 55651550
--- Timings ---
Current time: 1529615009471 milliseconds
Total Time:         123.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        47.8 seconds, 38.9%
Fitness Testing:     58.7 seconds, 47.7%
Report:              16.4 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Number IO problem report - generation 29
Test total error for best: 60691.55729999997
Test mean error for best: 30.34578
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 61.078762     
Correct output: -141.201628771 | Program output: -89.078762    
Correct output: 23.3844813461  | Program output: 15.078762     
Correct output: 91.3818662575  | Program output: 104.078762    
Correct output: 6.0991287499   | Program output: -18.078762    
Correct output: 90.6078865723  | Program output: 80.078762     
Correct output: -16.3558496064 | Program output: 60.078762     
Correct output: 85.2320058807  | Program output: 85.078762     
Correct output: -28.7080490162 | Program output: -51.078762    
Correct output: -10.4844827466 | Program output: 53.078762     
Correct output: -59.408072605  | Program output: -76.078762    
Correct output: 59.1228402624  | Program output: 20.078762     
Correct output: -132.1998002816 | Program output: -92.078762    
Correct output: -128.9949320478 | Program output: -49.078762    
Correct output: -78.0962956202 | Program output: -35.078762    
Correct output: -35.919351649  | Program output: -71.078762    
Correct output: -56.0400311694 | Program output: -32.078762    
Correct output: 137.4302481607 | Program output: 49.078762     
Correct output: 32.7727726522  | Program output: 47.078762     
Correct output: -26.6497561561 | Program output: 78.078762     
Correct output: 95.3927116996  | Program output: 9.078762      
Correct output: -65.8806745395 | Program output: -91.078762    
Correct output: 48.7839285535  | Program output: 18.078762     
Correct output: 176.7350863211 | Program output: 99.078762     
Correct output: -87.9710392115 | Program output: -5.078762     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_mod} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_dec} {:instruction integer_div} {:instruction 53.660195741514} {:instruction integer_dup} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_swap} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup} {:instruction float_swap} {:instruction float_cos} {:instruction float_dup} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction tag_float_175} {:instruction float_mod} {:instruction float_sub} {:instruction float_max} {:instruction print_integer} {:instruction float_rot})
Best program: (float_yankdup in1 float_mod float_tan 93 integer_dup_times integer_sub integer_stackdepth integer_mod integer_mod integer_mod float_yankdup float_rot float_dec integer_div 53.660195741514 integer_dup float_max float_dup_items integer_dup_times float_dup integer_rot float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger integer_dup_items print_float float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove float_frominteger float_swap 76 float_min print_integer integer_mult float_pop integer_dup float_swap integer_dup float_swap float_cos float_dup integer_swap integer_swap float_min float_stackdepth float_rot float_div float_pop float_yank tag_float_175 float_mod float_sub float_max print_integer float_rot)
Errors: [82.4822 10 52.1229 9 8.3057 10 12.6969 10 24.1779 10 10.5291 6 76.4346 11 0.1532 8 22.3707 9 63.5632 10 16.6707 8 39.0441 9 40.121 10 79.9162 12 43.0175 9 35.1594 10 23.9613 10 88.3515 10 14.306 8 104.7285 11 86.3139 9 25.1981 10 30.7052 9 77.6563 11 82.8923 10]
Total: 1379.8784000000005
Mean: 27.597569
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3748.273574200009
Median total errors in population: 1382.8784000000005
Error averages by case: (171.13755479999952 10.496 150.34126910000012 9.055 104.93094979999938 9.807 107.52804639999984 10.951 122.82277139999931 10.11 107.78463310000001 8.01 162.86598219999948 11.22 98.76439810000022 9.004 122.5864843999997 9.716 151.41845760000132 9.932 118.9451863000004 8.219 131.57558370000004 9.851 139.64565190000044 10.774 173.51856620000237 12.029 139.53414850000038 9.985 134.1061197000006 10.556 122.27126769999907 10.255 175.95497039999861 9.809 108.01179449999937 9.394 187.96540829999842 10.637 172.3036987000005 10.112 126.69356189999905 10.422 124.29004579999912 10.612 168.16234320000143 10.887 173.20268050000226 10.069)
Error minima by case: (36.2406 9 47.2016 7 8.3037 8 7.6181 9 0.0204 7 10.5271 6 13.2053 9 0.1512 6 0.8531 7 9.4845 8 16.5919 4 3.5019 8 35.1998 9 47.9162 9 0.9818 8 6.3582 8 19.04 8 30.1099 8 9.2272 8 2.9114 8 3.7054 8 13.1974 8 5.1042 8 37.9057 9 2.029 8)
Average genome size in population (length): 86.096
Average program size in population (points): 87.096
Average percent parens in population: 0.012
Minimum age in population: 40.97306951135397
Maximum age in population: 45.34722001105547
Average age in population: 43.30042965337634
Median age in population: 43.32323828339577
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.849
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.849
Total error diversity:				 0.178
Error (vector) diversity:			 0.206
Behavioral diversity:				 0.208
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 57804125
--- Timings ---
Current time: 1529615013914 milliseconds
Total Time:         127.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.4 seconds, 38.8%
Fitness Testing:     60.9 seconds, 47.8%
Report:              16.9 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Number IO problem report - generation 30
Test total error for best: 60691.55729999997
Test mean error for best: 30.34578
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 61.078762     
Correct output: -141.201628771 | Program output: -89.078762    
Correct output: 23.3844813461  | Program output: 15.078762     
Correct output: 91.3818662575  | Program output: 104.078762    
Correct output: 6.0991287499   | Program output: -18.078762    
Correct output: 90.6078865723  | Program output: 80.078762     
Correct output: -16.3558496064 | Program output: 60.078762     
Correct output: 85.2320058807  | Program output: 85.078762     
Correct output: -28.7080490162 | Program output: -51.078762    
Correct output: -10.4844827466 | Program output: 53.078762     
Correct output: -59.408072605  | Program output: -76.078762    
Correct output: 59.1228402624  | Program output: 20.078762     
Correct output: -132.1998002816 | Program output: -92.078762    
Correct output: -128.9949320478 | Program output: -49.078762    
Correct output: -78.0962956202 | Program output: -35.078762    
Correct output: -35.919351649  | Program output: -71.078762    
Correct output: -56.0400311694 | Program output: -32.078762    
Correct output: 137.4302481607 | Program output: 49.078762     
Correct output: 32.7727726522  | Program output: 47.078762     
Correct output: -26.6497561561 | Program output: 78.078762     
Correct output: 95.3927116996  | Program output: 9.078762      
Correct output: -65.8806745395 | Program output: -91.078762    
Correct output: 48.7839285535  | Program output: 18.078762     
Correct output: 176.7350863211 | Program output: 99.078762     
Correct output: -87.9710392115 | Program output: -5.078762     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction integer_dup} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_swap} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup} {:instruction float_swap} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction tag_float_175} {:instruction float_mod} {:instruction float_sub} {:instruction float_max} {:instruction print_integer} {:instruction float_rot})
Best program: (float_yankdup in1 float_mod float_tan 93 integer_dup_times float_yankdup integer_mod integer_mod float_yankdup float_rot -83 integer_div 53.660195741514 integer_dup float_max float_dup_items integer_dup_times float_dup integer_rot float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger integer_dup_items print_float float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove float_frominteger float_swap 76 float_min print_integer integer_mult float_pop integer_dup float_swap integer_dup float_swap float_pop float_dup integer_swap integer_swap float_min float_stackdepth float_rot float_div float_pop float_yank tag_float_175 float_mod float_sub float_max print_integer float_rot)
Errors: [82.4822 10 52.1229 9 8.3057 10 12.6969 10 24.1779 10 10.5291 6 76.4346 11 0.1532 8 22.3707 9 63.5632 10 16.6707 8 39.0441 9 40.121 10 79.9162 12 43.0175 9 35.1594 10 23.9613 10 88.3515 10 14.306 8 104.7285 11 86.3139 9 25.1981 10 30.7052 9 77.6563 11 82.8923 10]
Total: 1379.8784000000005
Mean: 27.597569
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3667.452331399997
Median total errors in population: 1382.8784000000005
Error averages by case: (167.57658300000017 10.458 148.3975022000004 9.455 101.38564079999988 10.218 106.23141200000038 11.059 118.11610000000005 10.652 104.12702850000004 7.752 160.16808420000035 11.303 95.09886010000031 8.307 118.06890159999948 9.626 148.88036040000134 10.388 114.60189279999977 8.06 127.66030640000065 9.795 137.66479310000074 10.115 171.40181970000145 11.642 137.1494783000006 10.133 129.34774040000022 10.545 119.89492299999925 10.003 172.34436339999843 10.235 105.7338815000003 9.5 184.909993699998 11.032 167.77050450000064 9.665 122.20908739999985 10.373 120.3583807999998 10.327 164.77988560000162 11.247 171.31380800000136 10.371)
Error minima by case: (17.5171 8 31.8764 7 7.3057 6 4.7251 9 0.0211 7 5.4991 6 7.7222 7 0.1512 6 21.3701 7 10.5197 7 15.6701 4 5.0448 7 36.1216 7 4.0831 8 0.0182 6 34.1588 9 19.9619 7 11.6478 7 9.674 7 20.5718 7 0.7142 6 10.1974 8 4.8763 7 22.343 8 0.5075 6)
Average genome size in population (length): 83.369
Average program size in population (points): 84.369
Average percent parens in population: 0.012
Minimum age in population: 42.80115482211113
Maximum age in population: 46.93777021579444
Average age in population: 44.82513139590062
Median age in population: 44.86489817406982
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 50
Genome diversity (% unique Plush genomes):	 0.817
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.817
Total error diversity:				 0.192
Error (vector) diversity:			 0.217
Behavioral diversity:				 0.217
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 59888375
--- Timings ---
Current time: 1529615018445 milliseconds
Total Time:         131.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.1 seconds, 38.7%
Fitness Testing:     63.2 seconds, 47.9%
Report:              17.5 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Number IO problem report - generation 31
Test total error for best: 60827.37849999997
Test mean error for best: 30.41369
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 63.078762     
Correct output: -141.201628771 | Program output: -87.078762    
Correct output: 23.3844813461  | Program output: 17.078762     
Correct output: 91.3818662575  | Program output: 106.078762    
Correct output: 6.0991287499   | Program output: -16.078762    
Correct output: 90.6078865723  | Program output: 82.078762     
Correct output: -16.3558496064 | Program output: 62.078762     
Correct output: 85.2320058807  | Program output: 87.078762     
Correct output: -28.7080490162 | Program output: -49.078762    
Correct output: -10.4844827466 | Program output: 55.078762     
Correct output: -59.408072605  | Program output: -74.078762    
Correct output: 59.1228402624  | Program output: 22.078762     
Correct output: -132.1998002816 | Program output: -90.078762    
Correct output: -128.9949320478 | Program output: -47.078762    
Correct output: -78.0962956202 | Program output: -33.078762    
Correct output: -35.919351649  | Program output: -69.078762    
Correct output: -56.0400311694 | Program output: -30.078762    
Correct output: 137.4302481607 | Program output: 51.078762     
Correct output: 32.7727726522  | Program output: 49.078762     
Correct output: -26.6497561561 | Program output: 80.078762     
Correct output: 95.3927116996  | Program output: 11.078762     
Correct output: -65.8806745395 | Program output: -89.078762    
Correct output: 48.7839285535  | Program output: 20.078762     
Correct output: 176.7350863211 | Program output: 101.078762    
Correct output: -87.9710392115 | Program output: -3.078762     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction 14.354813298606842} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_dup} {:instruction integer_inc} {:instruction integer_swap} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction tag_float_175} {:instruction float_mod} {:instruction float_sub} {:instruction float_max} {:instruction print_integer} {:instruction float_rot})
Best program: (float_yankdup in1 float_mod float_tan 93 integer_dup_times float_yankdup integer_mod integer_mod float_yankdup float_rot -83 integer_div 53.660195741514 14.354813298606842 float_max float_dup_items integer_dup_times float_dup integer_rot float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger integer_dup_items print_float float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove print_integer float_swap 76 float_min print_integer integer_mult float_pop integer_dup float_swap integer_dup integer_dup float_pop float_dup integer_inc integer_swap float_min float_stackdepth float_rot float_div float_pop float_yank tag_float_175 float_mod float_sub float_max print_integer float_rot)
Errors: [80.4822 9 54.1229 9 6.3057 10 14.6969 10 22.1779 9 8.5291 7 78.4346 11 1.8468 9 20.3707 9 65.5632 10 14.6707 8 37.0441 9 42.121 11 81.9162 12 45.0175 9 33.1594 10 25.9613 10 86.3515 10 16.306 8 106.7285 11 84.3139 10 23.1981 10 28.7052 10 75.6563 10 84.8923 10]
Total: 1379.5720000000003
Mean: 27.59144
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2865.5619658999954
Median total errors in population: 1380.882
Error averages by case: (137.14076479999963 10.391 116.81311840000122 9.498 67.15979479999952 10.35 72.40386770000033 10.875 85.30642239999993 10.607 70.51774079999963 7.293 128.96352859999868 11.288 61.04925040000017 8.303 85.10139429999982 9.7 117.23455060000072 10.453 81.35015120000038 8.262 94.88433240000003 9.811 105.67107110000008 10.122 140.9276115000016 11.774 105.5161362000011 10.001 96.79414840000005 10.535 87.60813199999986 10.216 142.13802669999953 10.339 72.32608459999933 9.221 154.657043099998 11.147 138.26001629999888 9.497 89.21553719999967 10.4 87.12525429999924 10.011 134.2091271000015 11.447 141.07286100000152 10.575)
Error minima by case: (67.561 9 48.2016 7 3.3057 9 8.6181 9 0.0204 7 5.5291 6 16.3911 9 0.1512 7 17.3707 7 10.5197 8 11.6707 5 4.6768 7 36.1998 8 45.9169 9 1.9825 8 30.1594 8 20.04 9 61.4302 8 9.674 7 26.685 9 19.3927 8 14.1981 9 4.8763 9 72.6563 9 4.893 9)
Average genome size in population (length): 78.169
Average program size in population (points): 79.169
Average percent parens in population: 0.013
Minimum age in population: 43.85303303599358
Maximum age in population: 48.07402984704822
Average age in population: 46.2746870824825
Median age in population: 46.28617367474362
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 95
Genome diversity (% unique Plush genomes):	 0.776
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 95
Syntactic diversity (% unique Push programs):	 0.776
Total error diversity:				 0.159
Error (vector) diversity:			 0.179
Behavioral diversity:				 0.179
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 61842600
--- Timings ---
Current time: 1529615022882 milliseconds
Total Time:         136.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.8 seconds, 38.7%
Fitness Testing:     65.3 seconds, 47.9%
Report:              18.2 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Number IO problem report - generation 32
Test total error for best: 60827.37849999997
Test mean error for best: 30.41369
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 63.078762     
Correct output: -141.201628771 | Program output: -87.078762    
Correct output: 23.3844813461  | Program output: 17.078762     
Correct output: 91.3818662575  | Program output: 106.078762    
Correct output: 6.0991287499   | Program output: -16.078762    
Correct output: 90.6078865723  | Program output: 82.078762     
Correct output: -16.3558496064 | Program output: 62.078762     
Correct output: 85.2320058807  | Program output: 87.078762     
Correct output: -28.7080490162 | Program output: -49.078762    
Correct output: -10.4844827466 | Program output: 55.078762     
Correct output: -59.408072605  | Program output: -74.078762    
Correct output: 59.1228402624  | Program output: 22.078762     
Correct output: -132.1998002816 | Program output: -90.078762    
Correct output: -128.9949320478 | Program output: -47.078762    
Correct output: -78.0962956202 | Program output: -33.078762    
Correct output: -35.919351649  | Program output: -69.078762    
Correct output: -56.0400311694 | Program output: -30.078762    
Correct output: 137.4302481607 | Program output: 51.078762     
Correct output: 32.7727726522  | Program output: 49.078762     
Correct output: -26.6497561561 | Program output: 80.078762     
Correct output: 95.3927116996  | Program output: 11.078762     
Correct output: -65.8806745395 | Program output: -89.078762    
Correct output: 48.7839285535  | Program output: 20.078762     
Correct output: 176.7350863211 | Program output: 101.078762    
Correct output: -87.9710392115 | Program output: -3.078762     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction 14.354813298606842} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_cos} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_dup} {:instruction integer_inc} {:instruction integer_swap} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction tag_float_175} {:instruction float_mod} {:instruction float_sub} {:instruction float_max} {:instruction print_integer} {:instruction float_rot})
Best program: (float_yankdup in1 float_mod float_tan 93 integer_dup_times float_yankdup integer_mod integer_mod float_yankdup float_rot -83 integer_div 53.660195741514 14.354813298606842 float_max float_dup_items integer_dup_times float_dup integer_rot float_cos float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger integer_dup_items print_float float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove print_integer float_swap 76 float_min print_integer integer_mult float_pop integer_dup float_swap integer_dup integer_dup float_pop float_dup integer_inc integer_swap float_min float_stackdepth float_rot float_div float_pop float_yank tag_float_175 float_mod float_sub float_max print_integer float_rot)
Errors: [80.4822 9 54.1229 9 6.3057 10 14.6969 10 22.1779 9 8.5291 7 78.4346 11 1.8468 9 20.3707 9 65.5632 10 14.6707 8 37.0441 9 42.121 11 81.9162 12 45.0175 9 33.1594 10 25.9613 10 86.3515 10 16.306 8 106.7285 11 84.3139 10 23.1981 10 28.7052 10 75.6563 10 84.8923 10]
Total: 1379.5720000000003
Mean: 27.59144
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2650.585565900007
Median total errors in population: 1379.8784000000005
Error averages by case: (128.92616379999905 10.353 107.17621630000126 9.393 59.66672099999896 10.267 63.68189470000111 10.677 76.38593680000011 10.346 61.71562479999972 6.999 122.60936439999738 11.27 52.14530010000045 8.512 75.16984969999962 9.755 110.6872757000008 10.384 71.38775560000099 8.459 86.49201889999947 9.822 95.89891429999952 10.273 131.7682927000027 11.991 96.03551000000127 9.804 87.04802979999991 10.465 77.8195307000002 10.393 134.01838280000115 10.351 63.87874309999872 8.908 148.6959167999982 11.075 130.0127125999978 9.458 79.3723478999999 10.366 79.64225519999854 9.779 126.73488950000149 11.466 132.42191870000264 10.628)
Error minima by case: (40.1143 9 48.1229 8 5.3057 8 8.6968 9 3.0204 8 7.5291 5 16.3911 9 0.152 7 14.8684 8 9.9056 8 13.6707 6 3.3239 8 36.1211 8 48.9162 9 1.9825 8 7.3661 8 19.9613 9 45.9835 8 9.674 7 26.685 9 19.3927 8 14.1981 9 2.7052 9 35.2883 8 7.8923 9)
Average genome size in population (length): 73.496
Average program size in population (points): 74.496
Average percent parens in population: 0.014
Minimum age in population: 45.3535754904151
Maximum age in population: 49.79024560237303
Average age in population: 47.7190519415033
Median age in population: 47.76408031256869
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 109
Genome diversity (% unique Plush genomes):	 0.744
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 109
Syntactic diversity (% unique Push programs):	 0.744
Total error diversity:				 0.13
Error (vector) diversity:			 0.146
Behavioral diversity:				 0.146
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 63680000
--- Timings ---
Current time: 1529615027061 milliseconds
Total Time:         140.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.3 seconds, 38.6%
Fitness Testing:     67.6 seconds, 48.0%
Report:              18.8 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Number IO problem report - generation 33
Test total error for best: 61112.493899999965
Test mean error for best: 30.55625
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 66.078762     
Correct output: -141.201628771 | Program output: -84.078762    
Correct output: 23.3844813461  | Program output: 20.078762     
Correct output: 91.3818662575  | Program output: 109.078762    
Correct output: 6.0991287499   | Program output: -13.078762    
Correct output: 90.6078865723  | Program output: 85.078762     
Correct output: -16.3558496064 | Program output: 65.078762     
Correct output: 85.2320058807  | Program output: 90.078762     
Correct output: -28.7080490162 | Program output: -46.078762    
Correct output: -10.4844827466 | Program output: 58.078762     
Correct output: -59.408072605  | Program output: -71.078762    
Correct output: 59.1228402624  | Program output: 25.078762     
Correct output: -132.1998002816 | Program output: -87.078762    
Correct output: -128.9949320478 | Program output: -44.078762    
Correct output: -78.0962956202 | Program output: -30.078762    
Correct output: -35.919351649  | Program output: -66.078762    
Correct output: -56.0400311694 | Program output: -27.078762    
Correct output: 137.4302481607 | Program output: 54.078762     
Correct output: 32.7727726522  | Program output: 52.078762     
Correct output: -26.6497561561 | Program output: 83.078762     
Correct output: 95.3927116996  | Program output: 14.078762     
Correct output: -65.8806745395 | Program output: -86.078762    
Correct output: 48.7839285535  | Program output: 23.078762     
Correct output: 176.7350863211 | Program output: 104.078762    
Correct output: -87.9710392115 | Program output: 0.078762      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 93} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction integer_dup} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction integer_shove} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction float_frominteger} {:instruction print_integer} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup} {:instruction float_swap} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction tag_float_175} {:instruction float_mod} {:instruction float_sub} {:instruction float_max} {:instruction print_integer} {:instruction float_rot})
Best program: (float_yankdup float_yankdup in1 float_mod float_tan 93 integer_mod integer_mod float_yankdup float_rot -83 integer_div 53.660195741514 integer_dup float_max float_dup_items integer_dup_times float_dup integer_rot float_swap float_yankdup integer_shove 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger integer_dup_items print_float float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove float_frominteger print_integer 76 float_min print_integer integer_mult float_pop integer_dup float_swap integer_dup float_swap float_pop float_dup integer_swap integer_swap float_min float_stackdepth float_rot float_div float_pop float_yank tag_float_175 float_mod float_sub float_max print_integer float_rot)
Errors: [77.4822 10 57.1229 8 3.3057 9 17.6969 10 19.1779 10 5.5291 7 81.4346 11 4.8468 10 17.3707 9 68.5632 10 11.6707 8 34.0441 9 45.121 11 84.9162 12 48.0175 9 30.1594 10 28.9613 10 83.3515 10 19.306 7 109.7285 11 81.3139 10 20.1981 10 25.7052 10 72.6563 10 88.0498 11]
Total: 1377.7295000000006
Mean: 27.55459
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2822.684278200007
Median total errors in population: 1379.8784000000005
Error averages by case: (134.812003699999 10.405 116.33246560000109 9.492 64.92794089999919 10.327 71.2529280000006 10.75 82.5130031 10.387 68.2170686999998 7.121 127.95550339999768 11.35 58.87063530000039 8.712 82.63550819999965 9.868 116.22809900000074 10.449 79.2412495000009 8.618 92.20077569999935 9.911 105.19332239999943 10.452 140.18336150000272 12.146 104.57133550000115 9.883 94.36099989999997 10.567 86.51154040000017 10.535 139.71125570000046 10.452 71.08234019999881 8.966 153.59859469999842 11.137 135.29598789999847 9.578 87.16150649999962 10.484 84.49529309999872 9.887 132.2185142000013 11.527 139.3700451000026 10.739)
Error minima by case: (67.561 9 47.1229 7 0.596 8 7.6969 8 1.0204 8 5.5291 5 10.8019 9 0.1531 7 13.48 9 10.2341 9 11.6707 7 4.6768 8 35.121 9 45.9162 9 0.0175 7 6.2687 8 13.852 8 61.4302 9 9.306 7 3.0958 9 19.3927 8 12.1981 9 4.6622 8 72.6563 10 4.8923 9)
Average genome size in population (length): 72.832
Average program size in population (points): 73.832
Average percent parens in population: 0.014
Minimum age in population: 46.46427173539996
Maximum age in population: 51.51365039381199
Average age in population: 49.13411783601646
Median age in population: 49.16656125651207
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 81
Genome diversity (% unique Plush genomes):	 0.783
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 81
Syntactic diversity (% unique Push programs):	 0.783
Total error diversity:				 0.129
Error (vector) diversity:			 0.149
Behavioral diversity:				 0.15
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 65500800
--- Timings ---
Current time: 1529615030865 milliseconds
Total Time:         144.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.7 seconds, 38.6%
Fitness Testing:     69.4 seconds, 48.1%
Report:              19.2 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Number IO problem report - generation 34
Test total error for best: 61011.51939999997
Test mean error for best: 30.50576
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 65.078762     
Correct output: -141.201628771 | Program output: -85.078762    
Correct output: 23.3844813461  | Program output: 19.078762     
Correct output: 91.3818662575  | Program output: 108.078762    
Correct output: 6.0991287499   | Program output: -14.078762    
Correct output: 90.6078865723  | Program output: 84.078762     
Correct output: -16.3558496064 | Program output: 64.078762     
Correct output: 85.2320058807  | Program output: 89.078762     
Correct output: -28.7080490162 | Program output: -47.078762    
Correct output: -10.4844827466 | Program output: 57.078762     
Correct output: -59.408072605  | Program output: -72.078762    
Correct output: 59.1228402624  | Program output: 24.078762     
Correct output: -132.1998002816 | Program output: -88.078762    
Correct output: -128.9949320478 | Program output: -45.078762    
Correct output: -78.0962956202 | Program output: -31.078762    
Correct output: -35.919351649  | Program output: -67.078762    
Correct output: -56.0400311694 | Program output: -28.078762    
Correct output: 137.4302481607 | Program output: 53.078762     
Correct output: 32.7727726522  | Program output: 51.078762     
Correct output: -26.6497561561 | Program output: 82.078762     
Correct output: 95.3927116996  | Program output: 13.078762     
Correct output: -65.8806745395 | Program output: -87.078762    
Correct output: 48.7839285535  | Program output: 22.078762     
Correct output: 176.7350863211 | Program output: 103.078762    
Correct output: -87.9710392115 | Program output: -1.078762     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction integer_dup} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup} {:instruction float_swap} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction tag_float_175} {:instruction float_mod} {:instruction float_sub} {:instruction float_max} {:instruction print_integer} {:instruction float_rot})
Best program: (float_yankdup in1 float_mod float_tan 93 integer_dup_times float_yankdup integer_mod integer_mod float_yankdup integer_mod integer_mod float_yankdup float_rot -83 integer_div 53.660195741514 integer_dup float_max float_dup_items integer_dup_times float_dup float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger integer_dup_items print_float float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove integer_swap float_cos print_integer float_swap 76 float_min print_integer integer_mult float_pop integer_dup float_swap integer_dup float_swap float_pop float_dup integer_swap integer_swap float_min float_stackdepth float_rot float_div float_pop float_yank tag_float_175 float_mod float_sub float_max print_integer float_rot)
Errors: [78.4822 10 56.1229 9 4.3057 10 16.6969 10 20.1779 10 6.5291 7 80.4346 11 3.8468 9 18.3707 9 67.5632 10 12.6707 8 35.0441 9 44.121 11 83.9162 12 47.0175 9 31.1594 10 27.9613 10 84.3515 9 18.306 8 108.7285 10 82.3139 10 21.1981 10 26.7052 10 73.6563 10 86.8923 10]
Total: 1377.5720000000003
Mean: 27.55144
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2767.121730400006
Median total errors in population: 1379.8784000000005
Error averages by case: (132.64878159999896 10.323 113.58779200000114 9.452 61.747634899999156 10.323 70.46134510000054 10.755 80.36010029999997 10.302 65.84507319999979 7.206 125.71904979999758 11.361 57.818608000000374 8.796 81.22780479999963 9.857 113.90536430000083 10.427 76.66090210000094 8.614 89.44502779999937 9.912 102.48216359999941 10.561 137.3540267000028 12.148 101.88407320000123 9.859 92.17169080000023 10.563 83.97093829999989 10.529 138.39495870000061 10.447 68.61242219999883 8.935 151.61570349999832 11.113 132.51476769999823 9.675 85.65792769999965 10.48 81.60363379999858 9.982 130.32857330000135 11.418 137.36336700000265 10.702)
Error minima by case: (67.561 9 49.1229 7 3.3057 8 9.6969 9 4.2186 7 5.5291 5 12.0037 9 0.1522 7 0.3485 9 10.5197 8 8.3293 6 3.6768 8 37.121 7 36.9873 8 1.9825 6 6.2687 8 13.852 7 61.4302 9 5.694 7 1.7098 9 19.3927 8 0.1981 9 4.8763 8 72.6563 9 4.0366 6)
Average genome size in population (length): 72.982
Average program size in population (points): 73.982
Average percent parens in population: 0.014
Minimum age in population: 47.90567345358431
Maximum age in population: 52.67325123923365
Average age in population: 50.60144134229096
Median age in population: 50.67925349442521
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 47
Genome diversity (% unique Plush genomes):	 0.815
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.815
Total error diversity:				 0.135
Error (vector) diversity:			 0.146
Behavioral diversity:				 0.146
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 67325350
--- Timings ---
Current time: 1529615035135 milliseconds
Total Time:         148.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.4 seconds, 38.6%
Fitness Testing:     71.3 seconds, 48.0%
Report:              19.7 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Number IO problem report - generation 35
Test total error for best: 61011.51939999997
Test mean error for best: 30.50576
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 65.078762     
Correct output: -141.201628771 | Program output: -85.078762    
Correct output: 23.3844813461  | Program output: 19.078762     
Correct output: 91.3818662575  | Program output: 108.078762    
Correct output: 6.0991287499   | Program output: -14.078762    
Correct output: 90.6078865723  | Program output: 84.078762     
Correct output: -16.3558496064 | Program output: 64.078762     
Correct output: 85.2320058807  | Program output: 89.078762     
Correct output: -28.7080490162 | Program output: -47.078762    
Correct output: -10.4844827466 | Program output: 57.078762     
Correct output: -59.408072605  | Program output: -72.078762    
Correct output: 59.1228402624  | Program output: 24.078762     
Correct output: -132.1998002816 | Program output: -88.078762    
Correct output: -128.9949320478 | Program output: -45.078762    
Correct output: -78.0962956202 | Program output: -31.078762    
Correct output: -35.919351649  | Program output: -67.078762    
Correct output: -56.0400311694 | Program output: -28.078762    
Correct output: 137.4302481607 | Program output: 53.078762     
Correct output: 32.7727726522  | Program output: 51.078762     
Correct output: -26.6497561561 | Program output: 82.078762     
Correct output: 95.3927116996  | Program output: 13.078762     
Correct output: -65.8806745395 | Program output: -87.078762    
Correct output: 48.7839285535  | Program output: 22.078762     
Correct output: 176.7350863211 | Program output: 103.078762    
Correct output: -87.9710392115 | Program output: -1.078762     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction integer_dup} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup} {:instruction float_swap} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction tag_float_175} {:instruction float_mod} {:instruction float_sub} {:instruction float_max} {:instruction print_integer} {:instruction float_rot})
Best program: (float_yankdup in1 float_mod float_tan 93 integer_dup_times float_yankdup integer_mod integer_mod float_yankdup integer_mod integer_mod float_yankdup float_rot -83 integer_div 53.660195741514 integer_dup float_max float_dup_items integer_dup_times float_dup float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger integer_dup_items print_float float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove integer_swap float_cos print_integer float_swap 76 float_min print_integer integer_mult float_pop integer_dup float_swap integer_dup float_swap float_pop float_dup integer_swap integer_swap float_min float_stackdepth float_rot float_div float_pop float_yank tag_float_175 float_mod float_sub float_max print_integer float_rot)
Errors: [78.4822 10 56.1229 9 4.3057 10 16.6969 10 20.1779 10 6.5291 7 80.4346 11 3.8468 9 18.3707 9 67.5632 10 12.6707 8 35.0441 9 44.121 11 83.9162 12 47.0175 9 31.1594 10 27.9613 10 84.3515 9 18.306 8 108.7285 10 82.3139 10 21.1981 10 26.7052 10 73.6563 10 86.8923 10]
Total: 1377.5720000000003
Mean: 27.55144
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2936.521402800005
Median total errors in population: 1379.8784000000005
Error averages by case: (138.61768019999886 10.008 120.16465460000117 9.373 69.06131489999888 10.264 76.85020449999982 10.683 87.57309969999902 10.006 72.37622899999974 7.385 133.2753683999974 11.27 64.44270830000008 8.995 87.38745959999959 9.789 121.51367310000103 10.383 83.41880300000106 8.501 96.8925154999993 9.831 109.02329389999933 10.71 144.54103600000315 12.178 109.36711290000135 9.792 99.10884080000079 10.459 91.40543179999915 10.442 143.6982406000004 10.343 76.33326499999855 8.895 159.11026779999835 11.108 139.6923694999986 9.864 91.2895979999987 10.382 89.11097249999831 10.193 135.3074106000014 11.116 144.3248526000029 10.665)
Error minima by case: (17.5178 8 49.1229 7 2.3057 8 6.6971 9 3.0204 8 4.5291 5 15.2583 9 0.1532 7 16.3707 8 9.5662 9 10.6707 6 5.4626 8 37.121 8 49.9161 9 0.9825 8 29.1594 8 20.9613 9 11.6485 8 8.674 7 25.792 9 2.6862 8 11.1981 8 4.8763 8 22.3437 9 8.8923 9)
Average genome size in population (length): 73.303
Average program size in population (points): 74.303
Average percent parens in population: 0.014
Minimum age in population: 48.90567345358431
Maximum age in population: 53.995245248836
Average age in population: 52.09427696389449
Median age in population: 52.09929340760573
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 40
Genome diversity (% unique Plush genomes):	 0.792
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.792
Total error diversity:				 0.136
Error (vector) diversity:			 0.16
Behavioral diversity:				 0.16
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 69157925
--- Timings ---
Current time: 1529615039550 milliseconds
Total Time:         153.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.0 seconds, 38.5%
Fitness Testing:     73.5 seconds, 48.1%
Report:              20.4 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Number IO problem report - generation 36
Test total error for best: 61445.57389999995
Test mean error for best: 30.72279
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.078762     
Correct output: -141.201628771 | Program output: -81.078762    
Correct output: 23.3844813461  | Program output: 23.078762     
Correct output: 91.3818662575  | Program output: 112.078762    
Correct output: 6.0991287499   | Program output: -10.078762    
Correct output: 90.6078865723  | Program output: 88.078762     
Correct output: -16.3558496064 | Program output: 68.078762     
Correct output: 85.2320058807  | Program output: 93.078762     
Correct output: -28.7080490162 | Program output: -43.078762    
Correct output: -10.4844827466 | Program output: 61.078762     
Correct output: -59.408072605  | Program output: -68.078762    
Correct output: 59.1228402624  | Program output: 28.078762     
Correct output: -132.1998002816 | Program output: -84.078762    
Correct output: -128.9949320478 | Program output: -41.078762    
Correct output: -78.0962956202 | Program output: -27.078762    
Correct output: -35.919351649  | Program output: -63.078762    
Correct output: -56.0400311694 | Program output: -24.078762    
Correct output: 137.4302481607 | Program output: 57.078762     
Correct output: 32.7727726522  | Program output: 55.078762     
Correct output: -26.6497561561 | Program output: 86.078762     
Correct output: 95.3927116996  | Program output: 17.078762     
Correct output: -65.8806745395 | Program output: -83.078762    
Correct output: 48.7839285535  | Program output: 26.078762     
Correct output: 176.7350863211 | Program output: 107.078762    
Correct output: -87.9710392115 | Program output: 3.078762      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction 14.354813298606842} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_dec} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_dup} {:instruction integer_inc} {:instruction integer_swap} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction integer_rot} {:instruction float_mod} {:instruction float_sub} {:instruction float_max} {:instruction print_integer} {:instruction float_rot})
Best program: (float_yankdup in1 float_mod float_tan 93 integer_dup_times float_yankdup integer_mod integer_mod float_yankdup float_rot -83 integer_div 53.660195741514 14.354813298606842 float_max float_dup_items integer_dup_times float_dup integer_rot float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger integer_dup_items print_float float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove print_integer float_dec 76 float_min print_integer integer_mult float_pop integer_dup float_swap integer_dup integer_dup float_pop float_dup integer_inc integer_swap float_min float_stackdepth float_rot float_div float_pop float_yank integer_rot float_mod float_sub float_max print_integer float_rot)
Errors: [74.4822 10 60.1229 8 0.3057 8 20.6969 9 16.1779 9 2.5291 7 84.4346 11 7.8468 10 14.3707 9 71.5632 9 8.6707 8 31.0441 9 48.121 11 87.9162 12 51.0175 9 27.1594 10 31.9613 10 80.3515 9 22.306 8 112.7285 10 78.3139 10 17.1981 10 22.7052 10 69.6563 10 91.0498 11]
Total: 1369.7295000000006
Mean: 27.39459
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2979.993772200003
Median total errors in population: 1379.8784000000005
Error averages by case: (139.35661609999892 9.755 124.06348110000137 9.43 70.02671249999888 10.26 79.78870900000057 10.702 87.35393430000008 9.753 73.4197879999998 7.827 135.7746143999973 11.308 67.25108889999969 9.488 87.33020559999964 9.817 124.15444750000101 10.416 83.90264810000122 8.571 97.23320189999937 9.858 113.0058614999994 11.178 147.71854290000303 12.302 112.3604325000013 9.828 98.96317060000021 10.53 94.4753388999996 10.498 144.2156959000005 10.381 79.54327969999832 8.894 161.19560429999828 11.102 139.67196709999862 10.292 91.74981799999946 10.447 89.54021719999817 10.583 136.76634110000148 10.751 146.4220551000026 10.739)
Error minima by case: (45.4822 7 48.1229 6 0.3057 5 6.6969 8 0.0204 6 2.5291 6 13.0037 6 0.1532 5 0.6515 8 9.0311 6 5.3293 6 5.4626 6 36.121 6 47.9162 7 1.0175 5 6.5598 8 1.9613 6 39.3515 6 7.3832 7 2.7098 6 2.6861 5 11.1981 9 0.2948 6 69.6563 7 6.8923 5)
Average genome size in population (length): 73.748
Average program size in population (points): 74.748
Average percent parens in population: 0.013
Minimum age in population: 50.34815143560991
Maximum age in population: 55.53230272213113
Average age in population: 53.57719027477285
Median age in population: 53.62194925150834
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 53
Genome diversity (% unique Plush genomes):	 0.764
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 53
Syntactic diversity (% unique Push programs):	 0.764
Total error diversity:				 0.161
Error (vector) diversity:			 0.181
Behavioral diversity:				 0.181
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 71001625
--- Timings ---
Current time: 1529615043567 milliseconds
Total Time:         157.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.5 seconds, 38.5%
Fitness Testing:     75.5 seconds, 48.1%
Report:              21.1 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Number IO problem report - generation 37
Test total error for best: 61445.57389999995
Test mean error for best: 30.72279
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.078762     
Correct output: -141.201628771 | Program output: -81.078762    
Correct output: 23.3844813461  | Program output: 23.078762     
Correct output: 91.3818662575  | Program output: 112.078762    
Correct output: 6.0991287499   | Program output: -10.078762    
Correct output: 90.6078865723  | Program output: 88.078762     
Correct output: -16.3558496064 | Program output: 68.078762     
Correct output: 85.2320058807  | Program output: 93.078762     
Correct output: -28.7080490162 | Program output: -43.078762    
Correct output: -10.4844827466 | Program output: 61.078762     
Correct output: -59.408072605  | Program output: -68.078762    
Correct output: 59.1228402624  | Program output: 28.078762     
Correct output: -132.1998002816 | Program output: -84.078762    
Correct output: -128.9949320478 | Program output: -41.078762    
Correct output: -78.0962956202 | Program output: -27.078762    
Correct output: -35.919351649  | Program output: -63.078762    
Correct output: -56.0400311694 | Program output: -24.078762    
Correct output: 137.4302481607 | Program output: 57.078762     
Correct output: 32.7727726522  | Program output: 55.078762     
Correct output: -26.6497561561 | Program output: 86.078762     
Correct output: 95.3927116996  | Program output: 17.078762     
Correct output: -65.8806745395 | Program output: -83.078762    
Correct output: 48.7839285535  | Program output: 26.078762     
Correct output: 176.7350863211 | Program output: 107.078762    
Correct output: -87.9710392115 | Program output: 3.078762      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction 14.354813298606842} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_sub} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_max} {:instruction print_integer} {:instruction float_rot})
Best program: (float_yankdup in1 float_mod float_tan 93 integer_dup_times float_yankdup integer_mod integer_mod float_yankdup float_rot -83 integer_div 53.660195741514 14.354813298606842 float_max float_dup_items integer_dup_times float_dup integer_rot float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger integer_dup_items print_float float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove print_integer float_cos print_integer float_swap 76 float_min print_integer integer_mult float_pop integer_dup float_swap integer_dup integer_sub float_pop float_dup integer_swap integer_swap float_min float_stackdepth float_rot float_div float_pop float_yank float_max print_integer float_rot)
Errors: [74.4822 10 60.1229 8 0.3057 8 20.6969 9 16.1779 9 2.5291 7 84.4346 11 7.8468 10 14.3707 9 71.5632 9 8.6707 8 31.0441 9 48.121 11 87.9162 12 51.0175 9 27.1594 10 31.9613 10 80.3515 9 22.306 8 112.7285 10 78.3139 10 17.1981 10 22.7052 10 69.6563 10 91.0498 11]
Total: 1369.7295000000006
Mean: 27.39459
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2900.6258103000027
Median total errors in population: 1379.5720000000003
Error averages by case: (137.45498539999895 9.804 119.26666030000102 9.334 66.90624179999912 10.153 81.05505350000028 10.649 80.53124560000003 9.868 71.27163829999978 7.905 133.45433779999763 11.314 68.58566109999961 9.73 84.65332079999962 9.749 121.80651560000081 10.386 78.32198010000091 8.563 94.02074469999934 9.868 108.14253789999944 11.312 142.09587440000274 12.365 107.40662800000122 9.821 94.3314074000001 10.529 89.43951299999979 10.521 145.02779370000016 10.318 76.81328399999877 8.781 158.9261330999986 11.009 135.9710894999984 10.393 88.12500729999961 10.439 86.31057369999859 10.676 135.02193410000126 10.6 140.7606492000018 10.838)
Error minima by case: (43.4822 8 47.1229 7 0.3055 7 6.6969 8 1.0204 8 0.4709 6 16.6145 9 0.1532 8 11.3707 8 9.9056 8 5.6707 6 5.4626 8 35.121 9 45.9162 10 0.0175 7 24.1594 8 17.0387 9 37.3515 8 8.2206 7 26.9084 8 2.6861 8 7.1981 9 4.8763 9 66.6563 9 4.8923 9)
Average genome size in population (length): 74.794
Average program size in population (points): 75.794
Average percent parens in population: 0.013
Minimum age in population: 51.34815143560991
Maximum age in population: 56.68252460438816
Average age in population: 54.92400387929952
Median age in population: 54.9804876874914
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 32
Genome diversity (% unique Plush genomes):	 0.748
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.748
Total error diversity:				 0.172
Error (vector) diversity:			 0.202
Behavioral diversity:				 0.203
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 72871475
--- Timings ---
Current time: 1529615047656 milliseconds
Total Time:         161.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.1 seconds, 38.5%
Fitness Testing:     77.4 seconds, 48.0%
Report:              21.6 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Number IO problem report - generation 38
Test total error for best: 61445.57389999995
Test mean error for best: 30.72279
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.078762     
Correct output: -141.201628771 | Program output: -81.078762    
Correct output: 23.3844813461  | Program output: 23.078762     
Correct output: 91.3818662575  | Program output: 112.078762    
Correct output: 6.0991287499   | Program output: -10.078762    
Correct output: 90.6078865723  | Program output: 88.078762     
Correct output: -16.3558496064 | Program output: 68.078762     
Correct output: 85.2320058807  | Program output: 93.078762     
Correct output: -28.7080490162 | Program output: -43.078762    
Correct output: -10.4844827466 | Program output: 61.078762     
Correct output: -59.408072605  | Program output: -68.078762    
Correct output: 59.1228402624  | Program output: 28.078762     
Correct output: -132.1998002816 | Program output: -84.078762    
Correct output: -128.9949320478 | Program output: -41.078762    
Correct output: -78.0962956202 | Program output: -27.078762    
Correct output: -35.919351649  | Program output: -63.078762    
Correct output: -56.0400311694 | Program output: -24.078762    
Correct output: 137.4302481607 | Program output: 57.078762     
Correct output: 32.7727726522  | Program output: 55.078762     
Correct output: -26.6497561561 | Program output: 86.078762     
Correct output: 95.3927116996  | Program output: 17.078762     
Correct output: -65.8806745395 | Program output: -83.078762    
Correct output: 48.7839285535  | Program output: 26.078762     
Correct output: 176.7350863211 | Program output: 107.078762    
Correct output: -87.9710392115 | Program output: 3.078762      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction integer_min} {:instruction integer_yank} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction 14.354813298606842} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_dup} {:instruction integer_inc} {:instruction integer_swap} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction tag_float_175} {:instruction float_mod} {:instruction float_sub} {:instruction float_max} {:instruction float_mod} {:instruction float_sub} {:instruction float_max} {:instruction print_integer} {:instruction float_rot})
Best program: (float_yankdup in1 integer_min integer_yank 93 integer_dup_times float_yankdup integer_mod integer_mod float_yankdup float_rot -83 integer_div 53.660195741514 14.354813298606842 float_max float_dup_items integer_dup_times float_dup integer_rot float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger integer_dup_items print_float float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove print_integer float_swap 76 float_min print_integer integer_mult float_pop integer_dup float_swap integer_dup integer_dup float_pop float_dup integer_inc integer_swap float_min float_stackdepth float_rot float_div float_pop float_yank tag_float_175 float_mod float_sub float_max float_mod float_sub float_max print_integer float_rot)
Errors: [74.4822 10 60.1229 8 0.3057 8 20.6969 9 16.1779 9 2.5291 7 84.4346 11 7.8468 10 14.3707 9 71.5632 9 8.6707 8 31.0441 9 48.121 11 87.9162 12 51.0175 9 27.1594 10 31.9613 10 80.3515 9 22.306 8 112.7285 10 78.3139 10 17.1981 10 22.7052 10 69.6563 10 91.0498 11]
Total: 1369.7295000000006
Mean: 27.39459
Genome size: 82
Size: 83
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2990.8334963000025
Median total errors in population: 1379.5720000000003
Error averages by case: (138.872940899999 10.244 125.34655810000118 9.221 68.46643939999912 9.859 83.6151514999998 10.581 84.81557519999949 10.205 72.86495339999978 8.047 137.61486199999814 11.33 72.0342138999996 10.068 86.61951999999961 9.905 126.02276800000091 10.329 82.00639050000078 8.582 95.61185659999938 9.996 114.29481519999936 11.366 148.1822717000028 12.349 113.88588010000119 9.863 97.22406210000041 10.587 96.01151419999933 10.576 144.68564170000025 10.216 81.35446129999882 8.848 163.0499659999984 10.868 139.0975048999989 10.467 90.78719149999907 10.496 87.92677489999855 10.815 135.38578330000132 10.616 148.43839990000063 11.184)
Error minima by case: (50.4821 8 47.1229 7 0.3057 6 1.6971 8 0.0204 7 0.4709 6 14.9025 7 0.1532 6 10.3707 8 9.0311 7 4.6707 6 5.4626 7 35.121 7 50.9162 8 0.0175 6 6.2687 8 13.0387 7 44.0 7 8.674 6 15.5383 7 2.3138 6 3.1981 8 3.8763 7 65.6563 8 9.8923 6)
Average genome size in population (length): 76.855
Average program size in population (points): 77.855
Average percent parens in population: 0.013
Minimum age in population: 53.59483959298814
Maximum age in population: 58.16057604656817
Average age in population: 56.37598049249169
Median age in population: 56.43507577927812
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 31
Genome diversity (% unique Plush genomes):	 0.783
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.783
Total error diversity:				 0.172
Error (vector) diversity:			 0.196
Behavioral diversity:				 0.196
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 74792850
--- Timings ---
Current time: 1529615051869 milliseconds
Total Time:         165.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.8 seconds, 38.6%
Fitness Testing:     79.4 seconds, 48.0%
Report:              22.1 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Number IO problem report - generation 39
Test total error for best: 61445.57389999995
Test mean error for best: 30.72279
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.078762     
Correct output: -141.201628771 | Program output: -81.078762    
Correct output: 23.3844813461  | Program output: 23.078762     
Correct output: 91.3818662575  | Program output: 112.078762    
Correct output: 6.0991287499   | Program output: -10.078762    
Correct output: 90.6078865723  | Program output: 88.078762     
Correct output: -16.3558496064 | Program output: 68.078762     
Correct output: 85.2320058807  | Program output: 93.078762     
Correct output: -28.7080490162 | Program output: -43.078762    
Correct output: -10.4844827466 | Program output: 61.078762     
Correct output: -59.408072605  | Program output: -68.078762    
Correct output: 59.1228402624  | Program output: 28.078762     
Correct output: -132.1998002816 | Program output: -84.078762    
Correct output: -128.9949320478 | Program output: -41.078762    
Correct output: -78.0962956202 | Program output: -27.078762    
Correct output: -35.919351649  | Program output: -63.078762    
Correct output: -56.0400311694 | Program output: -24.078762    
Correct output: 137.4302481607 | Program output: 57.078762     
Correct output: 32.7727726522  | Program output: 55.078762     
Correct output: -26.6497561561 | Program output: 86.078762     
Correct output: 95.3927116996  | Program output: 17.078762     
Correct output: -65.8806745395 | Program output: -83.078762    
Correct output: 48.7839285535  | Program output: 26.078762     
Correct output: 176.7350863211 | Program output: 107.078762    
Correct output: -87.9710392115 | Program output: 3.078762      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction 14.354813298606842} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_sub} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_max} {:instruction print_integer} {:instruction float_rot})
Best program: (float_yankdup in1 float_mod float_tan 93 integer_dup_times float_yankdup integer_mod integer_mod float_yankdup float_rot -83 integer_div 53.660195741514 14.354813298606842 float_max float_dup_items integer_dup_times float_dup integer_rot float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger integer_dup_items print_float float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove print_integer float_cos print_integer float_swap 76 float_min print_integer integer_mult float_pop integer_dup float_swap integer_dup integer_sub float_pop float_dup integer_swap integer_swap float_min float_stackdepth float_rot float_div float_pop float_yank float_max print_integer float_rot)
Errors: [74.4822 10 60.1229 8 0.3057 8 20.6969 9 16.1779 9 2.5291 7 84.4346 11 7.8468 10 14.3707 9 71.5632 9 8.6707 8 31.0441 9 48.121 11 87.9162 12 51.0175 9 27.1594 10 31.9613 10 80.3515 9 22.306 8 112.7285 10 78.3139 10 17.1981 10 22.7052 10 69.6563 10 91.0498 11]
Total: 1369.7295000000006
Mean: 27.39459
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3020.661930300001
Median total errors in population: 1377.5720000000003
Error averages by case: (138.00355709999886 10.401 128.44251510000126 9.063 68.50635419999907 9.281 86.30121579999953 10.255 83.83813289999934 10.141 72.2006331999998 8.074 143.06644789999805 11.155 73.74172799999954 10.246 84.52821679999963 9.969 131.41501650000097 9.899 80.93669850000099 8.233 95.64791799999935 10.012 117.38122809999939 11.313 152.40249450000317 12.16 117.23736960000129 9.648 96.2239208000001 10.461 99.26953799999947 10.452 142.93153490000037 9.94 86.46088479999842 8.998 168.5742846999983 10.619 138.3302568999989 10.333 88.79474679999915 10.398 87.91675119999826 10.855 135.1623798000015 10.386 149.64910619999975 11.407)
Error minima by case: (46.4821 8 48.1229 7 0.3047 6 5.6971 9 0.0204 7 0.4682 5 12.0037 7 0.1532 6 0.3485 7 9.9056 7 0.6707 6 4.9559 7 36.121 7 54.0 8 7.0175 6 7.5598 8 15.036 7 40.3513 7 8.674 7 1.7098 7 1.6862 6 5.1953 9 0.7052 7 58.6563 8 10.0 6)
Average genome size in population (length): 79.108
Average program size in population (points): 80.108
Average percent parens in population: 0.013
Minimum age in population: 54.88471064291662
Maximum age in population: 59.80197793786283
Average age in population: 57.95144300959492
Median age in population: 58.00617214177328
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.798
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.798
Total error diversity:				 0.177
Error (vector) diversity:			 0.202
Behavioral diversity:				 0.203
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 76770550
--- Timings ---
Current time: 1529615056327 milliseconds
Total Time:         169.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.4 seconds, 38.5%
Fitness Testing:     81.6 seconds, 48.1%
Report:              22.7 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Number IO problem report - generation 40
Test total error for best: 61445.57389999995
Test mean error for best: 30.72279
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.078762     
Correct output: -141.201628771 | Program output: -81.078762    
Correct output: 23.3844813461  | Program output: 23.078762     
Correct output: 91.3818662575  | Program output: 112.078762    
Correct output: 6.0991287499   | Program output: -10.078762    
Correct output: 90.6078865723  | Program output: 88.078762     
Correct output: -16.3558496064 | Program output: 68.078762     
Correct output: 85.2320058807  | Program output: 93.078762     
Correct output: -28.7080490162 | Program output: -43.078762    
Correct output: -10.4844827466 | Program output: 61.078762     
Correct output: -59.408072605  | Program output: -68.078762    
Correct output: 59.1228402624  | Program output: 28.078762     
Correct output: -132.1998002816 | Program output: -84.078762    
Correct output: -128.9949320478 | Program output: -41.078762    
Correct output: -78.0962956202 | Program output: -27.078762    
Correct output: -35.919351649  | Program output: -63.078762    
Correct output: -56.0400311694 | Program output: -24.078762    
Correct output: 137.4302481607 | Program output: 57.078762     
Correct output: 32.7727726522  | Program output: 55.078762     
Correct output: -26.6497561561 | Program output: 86.078762     
Correct output: 95.3927116996  | Program output: 17.078762     
Correct output: -65.8806745395 | Program output: -83.078762    
Correct output: 48.7839285535  | Program output: 26.078762     
Correct output: 176.7350863211 | Program output: 107.078762    
Correct output: -87.9710392115 | Program output: 3.078762      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_mod} {:instruction print_integer} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction 14.354813298606842} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction print_integer} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_sub} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_max} {:instruction print_integer} {:instruction float_rot})
Best program: (float_yankdup in1 float_mod float_tan 93 integer_dup_times float_yankdup integer_mod integer_mod print_integer float_rot -83 integer_div 53.660195741514 14.354813298606842 float_max float_dup_items integer_dup_times float_dup integer_rot float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger integer_dup_items print_float float_swap 78 float_min print_integer integer_mult float_dup print_integer integer_swap integer_shove print_integer float_cos print_integer float_swap 76 float_min print_integer integer_mult float_pop integer_dup float_swap integer_dup integer_sub float_pop float_dup integer_swap integer_swap float_min float_stackdepth float_rot float_div float_pop float_yank float_max print_integer float_rot)
Errors: [74.4822 10 60.1229 8 0.3057 8 20.6969 9 16.1779 9 2.5291 7 84.4346 11 7.8468 10 14.3707 9 71.5632 9 8.6707 8 31.0441 9 48.121 11 87.9162 12 51.0175 9 27.1594 10 31.9613 10 80.3515 9 22.306 8 112.7285 10 78.3139 10 17.1981 10 22.7052 10 69.6563 10 91.0498 11]
Total: 1369.7295000000006
Mean: 27.39459
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2962.3385798999884
Median total errors in population: 1374.7296000000006
Error averages by case: (134.49507419999892 10.478 127.25726300000127 9.034 65.66971949999896 9.0 83.68964989999985 10.054 82.05613619999963 10.025 68.72254699999976 8.075 140.29075119999794 11.256 72.07271349999961 10.495 82.01257189999961 9.993 128.64709940000134 9.7 78.51712790000106 8.293 92.50219429999932 10.043 116.1794898999994 11.363 151.05958510000332 12.093 115.70151040000128 9.624 93.66555600000032 10.535 97.78607599999913 10.517 139.37777730000064 9.977 83.59245559999843 9.064 165.77349569999836 10.694 134.9573538999983 10.407 86.36779349999928 10.455 84.82960879999834 10.855 131.8026356000014 10.421 151.2023940999988 11.659)
Error minima by case: (46.4821 8 47.1229 6 0.3047 6 5.6971 8 2.0204 7 0.4709 5 11.0902 7 0.1533 6 0.3485 8 5.2188 7 0.6707 6 5.4626 7 35.121 7 54.0 8 4.0175 6 7.5598 8 18.0387 7 40.3513 7 1.306 7 1.7098 7 1.6862 6 7.1981 9 3.2948 7 29.3256 8 10.0 6)
Average genome size in population (length): 79.742
Average program size in population (points): 80.742
Average percent parens in population: 0.012
Minimum age in population: 56.94734851607427
Maximum age in population: 61.46127898748273
Average age in population: 59.53646432192979
Median age in population: 59.57828906702707
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.795
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.795
Total error diversity:				 0.167
Error (vector) diversity:			 0.191
Behavioral diversity:				 0.191
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 78764100
--- Timings ---
Current time: 1529615060274 milliseconds
Total Time:         173.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.8 seconds, 38.4%
Fitness Testing:     83.6 seconds, 48.1%
Report:              23.3 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Number IO problem report - generation 41
Test total error for best: 61445.57389999995
Test mean error for best: 30.72279
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.078762     
Correct output: -141.201628771 | Program output: -81.078762    
Correct output: 23.3844813461  | Program output: 23.078762     
Correct output: 91.3818662575  | Program output: 112.078762    
Correct output: 6.0991287499   | Program output: -10.078762    
Correct output: 90.6078865723  | Program output: 88.078762     
Correct output: -16.3558496064 | Program output: 68.078762     
Correct output: 85.2320058807  | Program output: 93.078762     
Correct output: -28.7080490162 | Program output: -43.078762    
Correct output: -10.4844827466 | Program output: 61.078762     
Correct output: -59.408072605  | Program output: -68.078762    
Correct output: 59.1228402624  | Program output: 28.078762     
Correct output: -132.1998002816 | Program output: -84.078762    
Correct output: -128.9949320478 | Program output: -41.078762    
Correct output: -78.0962956202 | Program output: -27.078762    
Correct output: -35.919351649  | Program output: -63.078762    
Correct output: -56.0400311694 | Program output: -24.078762    
Correct output: 137.4302481607 | Program output: 57.078762     
Correct output: 32.7727726522  | Program output: 55.078762     
Correct output: -26.6497561561 | Program output: 86.078762     
Correct output: 95.3927116996  | Program output: 17.078762     
Correct output: -65.8806745395 | Program output: -83.078762    
Correct output: 48.7839285535  | Program output: 26.078762     
Correct output: 176.7350863211 | Program output: 107.078762    
Correct output: -87.9710392115 | Program output: 3.078762      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_yankdup} {:instruction -24} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction 14.354813298606842} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup} {:instruction float_pop} {:instruction float_dup} {:instruction integer_inc} {:instruction integer_swap} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction tag_float_175} {:instruction float_mod} {:instruction float_sub} {:instruction float_max} {:instruction print_integer} {:instruction float_rot})
Best program: (float_yankdup in1 float_mod float_tan 93 integer_dup_times float_yankdup integer_mod integer_mod float_yankdup -24 -83 integer_div 53.660195741514 14.354813298606842 float_max float_dup_items integer_dup_times float_dup integer_rot float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger integer_dup_items print_float float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove print_integer float_cos print_integer float_swap 76 float_min print_integer integer_mult float_pop integer_dup float_swap integer_dup float_pop float_dup integer_inc integer_swap float_min float_stackdepth float_rot float_div float_pop float_yank tag_float_175 float_mod float_sub float_max print_integer float_rot)
Errors: [74.4822 10 60.1229 8 0.3057 8 20.6969 9 16.1779 9 2.5291 7 84.4346 11 7.8468 10 14.3707 9 71.5632 9 8.6707 8 31.0441 9 48.121 11 87.9162 12 51.0175 9 27.1594 10 31.9613 10 80.3515 9 22.306 8 112.7285 10 78.3139 10 17.1981 10 22.7052 10 69.6563 10 91.0498 11]
Total: 1369.7295000000006
Mean: 27.39459
Genome size: 80
Size: 81
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3210.995579399994
Median total errors in population: 1371.7295000000006
Error averages by case: (144.42666129999884 10.54 137.66080670000073 8.945 75.50926039999939 8.903 96.53486889999917 10.008 89.23853709999914 9.881 79.20407079999976 8.073 151.56402069999885 11.424 83.0929878999996 10.586 89.83464199999966 9.931 140.07040500000105 9.706 86.63541550000078 8.592 102.58401889999934 9.996 126.69705229999943 11.406 161.13315720000278 12.239 126.07900410000134 9.818 101.39021690000065 10.642 108.22084189999902 10.631 149.26532769999986 9.917 95.95484389999876 9.025 176.7122661999985 10.581 144.209174199999 10.55 94.439401999999 10.549 94.86881589999861 10.811 141.76527410000114 10.605 158.8525077999993 11.693)
Error minima by case: (63.4822 9 48.1229 7 0.3055 7 8.6969 9 1.9796 8 0.5291 5 12.0037 9 0.1532 8 0.3485 7 9.5163 7 0.6707 6 5.4626 8 36.121 9 75.9162 9 39.0175 8 1.1586 8 18.962 8 61.4302 8 8.674 7 1.7098 8 19.3927 9 6.1981 9 4.2948 9 58.6563 8 50.893 9)
Average genome size in population (length): 79.562
Average program size in population (points): 80.562
Average percent parens in population: 0.012
Minimum age in population: 58.22720082333399
Maximum age in population: 62.73255803094162
Average age in population: 61.04868738899515
Median age in population: 61.10003886347795
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.781
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.781
Total error diversity:				 0.158
Error (vector) diversity:			 0.181
Behavioral diversity:				 0.182
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 80753150
--- Timings ---
Current time: 1529615064650 milliseconds
Total Time:         178.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.3 seconds, 38.3%
Fitness Testing:     85.9 seconds, 48.2%
Report:              23.9 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Number IO problem report - generation 42
Test total error for best: 61445.57389999995
Test mean error for best: 30.72279
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.078762     
Correct output: -141.201628771 | Program output: -81.078762    
Correct output: 23.3844813461  | Program output: 23.078762     
Correct output: 91.3818662575  | Program output: 112.078762    
Correct output: 6.0991287499   | Program output: -10.078762    
Correct output: 90.6078865723  | Program output: 88.078762     
Correct output: -16.3558496064 | Program output: 68.078762     
Correct output: 85.2320058807  | Program output: 93.078762     
Correct output: -28.7080490162 | Program output: -43.078762    
Correct output: -10.4844827466 | Program output: 61.078762     
Correct output: -59.408072605  | Program output: -68.078762    
Correct output: 59.1228402624  | Program output: 28.078762     
Correct output: -132.1998002816 | Program output: -84.078762    
Correct output: -128.9949320478 | Program output: -41.078762    
Correct output: -78.0962956202 | Program output: -27.078762    
Correct output: -35.919351649  | Program output: -63.078762    
Correct output: -56.0400311694 | Program output: -24.078762    
Correct output: 137.4302481607 | Program output: 57.078762     
Correct output: 32.7727726522  | Program output: 55.078762     
Correct output: -26.6497561561 | Program output: 86.078762     
Correct output: 95.3927116996  | Program output: 17.078762     
Correct output: -65.8806745395 | Program output: -83.078762    
Correct output: 48.7839285535  | Program output: 26.078762     
Correct output: 176.7350863211 | Program output: 107.078762    
Correct output: -87.9710392115 | Program output: 3.078762      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction 14.354813298606842} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_dec} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_dup} {:instruction integer_inc} {:instruction integer_swap} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction tag_float_175} {:instruction float_mod} {:instruction float_sub} {:instruction float_max} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_max} {:instruction print_integer} {:instruction float_rot})
Best program: (float_yankdup in1 float_mod float_tan 93 integer_dup_times float_yankdup integer_mod integer_mod float_yankdup float_rot -83 integer_div 53.660195741514 14.354813298606842 float_max float_dup_items integer_dup_times float_dup integer_rot float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger integer_dup_items print_float float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove print_integer float_dec 76 float_min print_integer integer_mult integer_mult float_pop integer_dup float_swap integer_dup integer_dup float_pop float_dup integer_inc integer_swap float_min float_stackdepth float_rot float_div float_pop float_yank tag_float_175 float_mod float_sub float_max float_rot float_div float_pop float_yank float_max print_integer float_rot)
Errors: [74.4822 10 60.1229 8 0.3057 8 20.6969 9 16.1779 9 2.5291 7 84.4346 11 7.8468 10 14.3707 9 71.5632 9 8.6707 8 31.0441 9 48.121 11 87.9162 12 51.0175 9 27.1594 10 31.9613 10 80.3515 9 22.306 8 112.7285 10 78.3139 10 17.1981 10 22.7052 10 69.6563 10 91.0498 11]
Total: 1369.7295000000006
Mean: 27.39459
Genome size: 85
Size: 86
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2864.0706501999935
Median total errors in population: 1372.7295000000006
Error averages by case: (130.04779859999897 10.533 125.6442402000012 8.877 60.63960919999934 8.839 80.63408960000007 10.013 76.94538380000007 9.814 64.22454079999976 8.064 134.9286811999975 11.422 69.11373439999957 10.556 78.77340709999959 9.989 123.36842090000088 9.697 75.159097900001 8.729 87.10406799999937 10.008 114.56947549999944 11.456 148.61281100000295 12.389 112.7039780000013 9.942 89.40395070000018 10.712 94.59904419999954 10.69 135.6056629000009 9.792 78.95917579999859 9.059 160.17715519999842 10.462 129.66712559999814 10.534 84.00752739999962 10.601 79.49274539999847 10.824 128.22505590000134 10.718 146.03287089999853 11.711)
Error minima by case: (43.4822 8 47.1229 7 0.3047 6 5.3031 8 1.0204 7 0.4709 5 9.1974 7 0.8468 6 0.3485 8 8.0688 7 0.6701 6 5.4626 7 35.121 7 40.3137 8 6.0175 6 7.5598 8 16.0387 7 37.3515 7 8.674 7 1.7098 7 1.6861 6 6.1981 9 4.8763 7 58.6563 8 0.7102 6)
Average genome size in population (length): 79.582
Average program size in population (points): 80.582
Average percent parens in population: 0.012
Minimum age in population: 60.22754722217633
Maximum age in population: 64.35883059471917
Average age in population: 62.4648017627582
Median age in population: 62.50175726198177
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.819
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.819
Total error diversity:				 0.148
Error (vector) diversity:			 0.168
Behavioral diversity:				 0.168
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 82742700
--- Timings ---
Current time: 1529615068790 milliseconds
Total Time:         182.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.8 seconds, 38.3%
Fitness Testing:     87.9 seconds, 48.2%
Report:              24.5 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Number IO problem report - generation 43
Test total error for best: 61445.57389999995
Test mean error for best: 30.72279
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.078762     
Correct output: -141.201628771 | Program output: -81.078762    
Correct output: 23.3844813461  | Program output: 23.078762     
Correct output: 91.3818662575  | Program output: 112.078762    
Correct output: 6.0991287499   | Program output: -10.078762    
Correct output: 90.6078865723  | Program output: 88.078762     
Correct output: -16.3558496064 | Program output: 68.078762     
Correct output: 85.2320058807  | Program output: 93.078762     
Correct output: -28.7080490162 | Program output: -43.078762    
Correct output: -10.4844827466 | Program output: 61.078762     
Correct output: -59.408072605  | Program output: -68.078762    
Correct output: 59.1228402624  | Program output: 28.078762     
Correct output: -132.1998002816 | Program output: -84.078762    
Correct output: -128.9949320478 | Program output: -41.078762    
Correct output: -78.0962956202 | Program output: -27.078762    
Correct output: -35.919351649  | Program output: -63.078762    
Correct output: -56.0400311694 | Program output: -24.078762    
Correct output: 137.4302481607 | Program output: 57.078762     
Correct output: 32.7727726522  | Program output: 55.078762     
Correct output: -26.6497561561 | Program output: 86.078762     
Correct output: 95.3927116996  | Program output: 17.078762     
Correct output: -65.8806745395 | Program output: -83.078762    
Correct output: 48.7839285535  | Program output: 26.078762     
Correct output: 176.7350863211 | Program output: 107.078762    
Correct output: -87.9710392115 | Program output: 3.078762      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction 14.354813298606842} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction 14.354813298606842} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_dec} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_dup} {:instruction integer_inc} {:instruction integer_swap} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_mod} {:instruction float_sub} {:instruction float_max} {:instruction print_integer})
Best program: (float_yankdup in1 float_mod float_tan 93 integer_dup_times float_yankdup integer_mod integer_mod float_yankdup float_rot -83 integer_div 53.660195741514 14.354813298606842 float_max float_dup_items integer_dup_times 14.354813298606842 float_max float_dup_items integer_dup_times float_dup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger integer_dup_items print_float float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove print_integer float_dec 76 float_min print_integer integer_mult float_pop integer_dup float_swap integer_dup integer_dup float_pop float_dup integer_inc integer_swap float_min float_stackdepth float_mod float_sub float_max print_integer)
Errors: [74.4822 10 60.1229 8 0.3057 8 20.6969 9 16.1779 9 2.5291 7 84.4346 11 7.8468 10 14.3707 9 71.5632 9 8.6707 8 31.0441 9 48.121 11 87.9162 12 51.0175 9 27.1594 10 31.9613 10 80.3515 9 22.306 8 112.7285 10 78.3139 10 17.1981 10 22.7052 10 69.6563 10 91.0498 11]
Total: 1369.7295000000006
Mean: 27.39459
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2745.709800299993
Median total errors in population: 1371.1181000000006
Error averages by case: (126.51928179999894 10.414 119.42060760000113 8.673 55.99359179999951 8.679 75.6837840000004 9.879 72.30312110000025 9.659 59.86837929999981 7.942 131.47649089999774 11.329 63.959189399999595 10.474 72.57892769999965 9.866 119.75509310000072 9.583 69.3762245000006 8.574 83.37932729999942 9.867 108.28995359999941 11.303 143.1884258000027 12.311 107.48106930000112 9.817 84.3017610999998 10.539 89.34363989999967 10.535 131.35027210000106 9.663 74.98464709999894 8.954 157.1225240999984 10.363 126.92704539999839 10.427 77.29760770000001 10.461 75.59732999999883 10.721 124.26831720000129 10.615 142.99418849999844 11.601)
Error minima by case: (17.4822 8 32.8771 7 0.3045 7 7.6969 8 4.9796 8 0.4709 5 14.3158 9 0.1532 8 6.3707 8 9.5184 8 0.6707 6 5.4626 8 35.121 9 34.9162 9 4.9825 8 8.1594 8 4.0387 8 32.3513 8 9.306 7 17.429 8 9.6862 9 9.1981 9 0.2948 9 25.3437 9 4.8923 9)
Average genome size in population (length): 79.685
Average program size in population (points): 80.685
Average percent parens in population: 0.012
Minimum age in population: 61.22754722217633
Maximum age in population: 66.03482619070178
Average age in population: 63.9209458364987
Median age in population: 63.92862473586399
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.844
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.844
Total error diversity:				 0.148
Error (vector) diversity:			 0.162
Behavioral diversity:				 0.163
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 84734825
--- Timings ---
Current time: 1529615072816 milliseconds
Total Time:         186.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.4 seconds, 38.3%
Fitness Testing:     89.9 seconds, 48.2%
Report:              25.0 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Number IO problem report - generation 44
Test total error for best: 61445.57389999995
Test mean error for best: 30.72279
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.078762     
Correct output: -141.201628771 | Program output: -81.078762    
Correct output: 23.3844813461  | Program output: 23.078762     
Correct output: 91.3818662575  | Program output: 112.078762    
Correct output: 6.0991287499   | Program output: -10.078762    
Correct output: 90.6078865723  | Program output: 88.078762     
Correct output: -16.3558496064 | Program output: 68.078762     
Correct output: 85.2320058807  | Program output: 93.078762     
Correct output: -28.7080490162 | Program output: -43.078762    
Correct output: -10.4844827466 | Program output: 61.078762     
Correct output: -59.408072605  | Program output: -68.078762    
Correct output: 59.1228402624  | Program output: 28.078762     
Correct output: -132.1998002816 | Program output: -84.078762    
Correct output: -128.9949320478 | Program output: -41.078762    
Correct output: -78.0962956202 | Program output: -27.078762    
Correct output: -35.919351649  | Program output: -63.078762    
Correct output: -56.0400311694 | Program output: -24.078762    
Correct output: 137.4302481607 | Program output: 57.078762     
Correct output: 32.7727726522  | Program output: 55.078762     
Correct output: -26.6497561561 | Program output: 86.078762     
Correct output: 95.3927116996  | Program output: 17.078762     
Correct output: -65.8806745395 | Program output: -83.078762    
Correct output: 48.7839285535  | Program output: 26.078762     
Correct output: 176.7350863211 | Program output: 107.078762    
Correct output: -87.9710392115 | Program output: 3.078762      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction 14.354813298606842} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_sub} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_max} {:instruction print_integer} {:instruction float_rot})
Best program: (float_yankdup in1 float_mod float_tan 93 integer_dup_times float_yankdup integer_mod integer_mod float_yankdup float_rot -83 integer_div 53.660195741514 14.354813298606842 float_max float_dup_items integer_dup_times float_dup integer_rot float_yankdup float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger integer_dup_items print_float float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove print_integer float_cos print_integer float_swap 76 float_min print_integer integer_mult float_pop integer_dup float_swap integer_dup integer_sub float_pop float_dup integer_swap integer_swap float_min float_stackdepth float_rot float_div float_pop float_yank float_max print_integer float_rot)
Errors: [74.4822 10 60.1229 8 0.3057 8 20.6969 9 16.1779 9 2.5291 7 84.4346 11 7.8468 10 14.3707 9 71.5632 9 8.6707 8 31.0441 9 48.121 11 87.9162 12 51.0175 9 27.1594 10 31.9613 10 80.3515 9 22.306 8 112.7285 10 78.3139 10 17.1981 10 22.7052 10 69.6563 10 91.0498 11]
Total: 1369.7295000000006
Mean: 27.39459
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2884.2841081999923
Median total errors in population: 1371.7295000000006
Error averages by case: (132.250675499999 10.419 124.59390870000114 8.7 62.74189399999962 8.66 81.8485768000001 9.891 76.59691250000007 9.649 66.0769106999998 7.926 138.06808699999797 11.273 70.22162939999956 10.477 77.53595399999962 9.867 126.42264300000096 9.591 74.38404850000082 8.544 89.54828109999934 9.858 113.49214789999947 11.325 148.18689270000277 12.317 112.56868750000126 9.801 89.18463169999976 10.557 94.45143519999976 10.561 137.05549320000085 9.619 81.54752009999882 8.934 163.53537479999844 10.359 132.24371849999812 10.418 82.25201659999999 10.469 81.89696219999873 10.733 129.92841060000126 10.583 145.50829599999847 11.612)
Error minima by case: (41.4822 8 51.1229 7 0.3007 6 2.6969 8 2.0211 8 0.4709 6 3.2771 9 0.1532 8 4.3707 8 0.563 8 0.3293 6 5.4626 8 39.121 9 57.9162 10 7.0175 8 17.1594 8 7.0387 9 35.3515 8 9.674 7 13.571 8 1.314 8 2.8019 9 4.8763 9 59.6563 8 16.8923 7)
Average genome size in population (length): 79.594
Average program size in population (points): 80.594
Average percent parens in population: 0.012
Minimum age in population: 63.04563935256556
Maximum age in population: 67.26668688211271
Average age in population: 65.32562817569958
Median age in population: 65.37349570033786
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.856
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.856
Total error diversity:				 0.146
Error (vector) diversity:			 0.161
Behavioral diversity:				 0.162
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 86724700
--- Timings ---
Current time: 1529615077061 milliseconds
Total Time:         190.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        73.1 seconds, 38.4%
Fitness Testing:     91.9 seconds, 48.2%
Report:              25.5 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Number IO problem report - generation 45
Test total error for best: 61445.57389999995
Test mean error for best: 30.72279
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.078762     
Correct output: -141.201628771 | Program output: -81.078762    
Correct output: 23.3844813461  | Program output: 23.078762     
Correct output: 91.3818662575  | Program output: 112.078762    
Correct output: 6.0991287499   | Program output: -10.078762    
Correct output: 90.6078865723  | Program output: 88.078762     
Correct output: -16.3558496064 | Program output: 68.078762     
Correct output: 85.2320058807  | Program output: 93.078762     
Correct output: -28.7080490162 | Program output: -43.078762    
Correct output: -10.4844827466 | Program output: 61.078762     
Correct output: -59.408072605  | Program output: -68.078762    
Correct output: 59.1228402624  | Program output: 28.078762     
Correct output: -132.1998002816 | Program output: -84.078762    
Correct output: -128.9949320478 | Program output: -41.078762    
Correct output: -78.0962956202 | Program output: -27.078762    
Correct output: -35.919351649  | Program output: -63.078762    
Correct output: -56.0400311694 | Program output: -24.078762    
Correct output: 137.4302481607 | Program output: 57.078762     
Correct output: 32.7727726522  | Program output: 55.078762     
Correct output: -26.6497561561 | Program output: 86.078762     
Correct output: 95.3927116996  | Program output: 17.078762     
Correct output: -65.8806745395 | Program output: -83.078762    
Correct output: 48.7839285535  | Program output: 26.078762     
Correct output: 176.7350863211 | Program output: 107.078762    
Correct output: -87.9710392115 | Program output: 3.078762      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction 14.354813298606842} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_dec} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction in2} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_sub} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction integer_rot} {:instruction float_sin} {:instruction float_sub} {:instruction float_max} {:instruction print_integer})
Best program: (float_yankdup in1 float_mod float_tan 93 integer_dup_times float_yankdup integer_mod integer_mod float_yankdup float_rot -83 integer_div 53.660195741514 14.354813298606842 float_max float_dup_items integer_dup_times float_dup integer_rot float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger integer_dup_items print_float float_swap 78 float_min print_integer integer_dec float_dup integer_dup_items integer_dup_items integer_swap integer_shove integer_mod float_cos print_integer float_swap 76 float_min print_integer integer_mult float_pop in2 float_swap integer_dup integer_sub float_pop float_dup integer_swap integer_swap float_min float_stackdepth float_rot float_div float_pop integer_rot float_sin float_sub float_max print_integer)
Errors: [74.4822 10 60.1229 8 0.3057 8 20.6969 9 16.1779 9 2.5291 7 84.4346 11 7.8468 10 14.3707 9 71.5632 9 8.6707 8 31.0441 9 48.121 11 87.9162 12 51.0175 9 27.1594 10 31.9613 10 80.3515 9 22.306 8 112.7285 10 78.3139 10 17.1981 10 22.7052 10 69.6563 10 91.0498 11]
Total: 1369.7295000000006
Mean: 27.39459
Genome size: 80
Size: 81
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2980.2883345999912
Median total errors in population: 1374.7296000000006
Error averages by case: (133.8755035999989 10.439 130.72688690000123 8.744 64.48401739999869 8.685 83.77962039999983 9.925 83.63503709999954 9.686 68.09784239999978 7.961 139.43577859999746 11.325 72.19531209999957 10.484 84.04190559999964 9.872 127.84836120000145 9.623 80.98457510000112 8.619 91.18864729999939 9.908 119.7237177999994 11.37 154.01736220000356 12.36 118.6965728000013 9.835 95.63404720000057 10.597 100.76431639999885 10.581 138.61487010000113 9.683 83.12995859999837 8.962 164.7837039999984 10.347 134.31973109999794 10.433 88.78900169999896 10.523 83.50355979999827 10.717 131.68907570000133 10.589 153.47192949999865 11.589)
Error minima by case: (49.4821 9 47.1229 7 0.3047 6 2.6971 9 0.0204 7 0.4709 5 14.3158 9 0.8468 8 3.6318 8 10.7432 8 0.3293 6 5.4626 8 35.121 9 54.0 10 4.0175 7 2.8406 8 14.0387 8 40.3515 8 8.674 7 6.429 8 0.314 8 4.1981 9 4.8763 9 60.6563 9 10.0 8)
Average genome size in population (length): 79.519
Average program size in population (points): 80.519
Average percent parens in population: 0.012
Minimum age in population: 64.04563935256556
Maximum age in population: 68.75240880456886
Average age in population: 66.77163919686954
Median age in population: 66.79636591148682
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.876
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.876
Total error diversity:				 0.149
Error (vector) diversity:			 0.172
Behavioral diversity:				 0.173
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 88712700
--- Timings ---
Current time: 1529615081432 milliseconds
Total Time:         195.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        74.7 seconds, 38.3%
Fitness Testing:     94.2 seconds, 48.3%
Report:              26.0 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Number IO problem report - generation 46
Test total error for best: 61445.57389999995
Test mean error for best: 30.72279
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.078762     
Correct output: -141.201628771 | Program output: -81.078762    
Correct output: 23.3844813461  | Program output: 23.078762     
Correct output: 91.3818662575  | Program output: 112.078762    
Correct output: 6.0991287499   | Program output: -10.078762    
Correct output: 90.6078865723  | Program output: 88.078762     
Correct output: -16.3558496064 | Program output: 68.078762     
Correct output: 85.2320058807  | Program output: 93.078762     
Correct output: -28.7080490162 | Program output: -43.078762    
Correct output: -10.4844827466 | Program output: 61.078762     
Correct output: -59.408072605  | Program output: -68.078762    
Correct output: 59.1228402624  | Program output: 28.078762     
Correct output: -132.1998002816 | Program output: -84.078762    
Correct output: -128.9949320478 | Program output: -41.078762    
Correct output: -78.0962956202 | Program output: -27.078762    
Correct output: -35.919351649  | Program output: -63.078762    
Correct output: -56.0400311694 | Program output: -24.078762    
Correct output: 137.4302481607 | Program output: 57.078762     
Correct output: 32.7727726522  | Program output: 55.078762     
Correct output: -26.6497561561 | Program output: 86.078762     
Correct output: 95.3927116996  | Program output: 17.078762     
Correct output: -65.8806745395 | Program output: -83.078762    
Correct output: 48.7839285535  | Program output: 26.078762     
Correct output: 176.7350863211 | Program output: 107.078762    
Correct output: -87.9710392115 | Program output: 3.078762      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 52.468716265615015} {:instruction 14.354813298606842} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_swap} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup} {:instruction float_swap} {:instruction float_swap} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction integer_rot} {:instruction float_mod} {:instruction float_sub} {:instruction float_max} {:instruction print_integer} {:instruction float_rot})
Best program: (float_yankdup in1 float_mod float_tan 93 integer_dup_times float_yankdup integer_mod integer_mod float_yankdup float_rot -83 integer_div 52.468716265615015 14.354813298606842 float_max float_dup_items integer_dup_times float_dup integer_rot float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger integer_dup_items print_float float_swap 78 float_min print_integer print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove float_frominteger float_swap 76 float_min print_integer integer_mult float_pop integer_dup float_swap integer_dup float_swap float_swap float_pop float_dup integer_swap integer_swap float_min float_stackdepth float_rot float_div float_pop float_rot float_div float_pop float_yank integer_rot float_mod float_sub float_max print_integer float_rot)
Errors: [74.4822 10 60.1229 8 0.3057 8 20.6969 9 16.1779 9 2.5291 7 84.4346 11 7.8468 10 14.3707 9 71.5632 9 8.6707 8 31.0441 9 48.121 11 87.9162 12 51.0175 9 27.1594 10 31.9613 10 80.3515 9 22.306 8 112.7285 10 78.3139 10 17.1981 10 22.7052 10 69.6563 10 91.0498 11]
Total: 1369.7295000000006
Mean: 27.39459
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2661.173510199992
Median total errors in population: 1369.7295000000006
Error averages by case: (120.91272379999899 10.366 118.76990850000121 8.625 50.821158699999685 8.573 70.94879570000056 9.823 70.46503080000043 9.594 53.960145599999805 7.841 128.2653043999975 11.252 58.16048729999955 10.384 70.69939609999956 9.779 116.44789540000076 9.513 67.3846526000007 8.502 78.02605389999933 9.777 107.56311319999945 11.266 142.7057503000029 12.276 106.83576370000128 9.746 82.47959179999971 10.485 88.64061229999986 10.456 125.84039860000108 9.583 70.82939679999889 8.833 154.09975359999837 10.266 121.81055679999818 10.347 75.33179080000022 10.401 70.26986829999882 10.64 118.31994990000135 10.513 141.23541129999813 11.509)
Error minima by case: (61.4822 8 48.1229 7 0.3047 7 8.6969 9 3.1603 8 0.4709 5 11.834 9 0.1532 8 0.3485 8 5.9627 8 0.6707 6 5.4626 8 36.121 9 50.4625 10 0.4361 8 7.5598 8 14.0387 8 55.3515 8 9.674 7 22.1279 8 13.3139 8 4.1981 9 3.5492 9 59.6563 8 9.4386 9)
Average genome size in population (length): 79.233
Average program size in population (points): 80.233
Average percent parens in population: 0.013
Minimum age in population: 65.04563935256556
Maximum age in population: 70.50954784334078
Average age in population: 68.13081946913688
Median age in population: 68.14606302547418
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.843
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.843
Total error diversity:				 0.147
Error (vector) diversity:			 0.167
Behavioral diversity:				 0.167
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 90693525
--- Timings ---
Current time: 1529615085376 milliseconds
Total Time:         198.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        76.2 seconds, 38.3%
Fitness Testing:     96.1 seconds, 48.3%
Report:              26.5 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Number IO problem report - generation 47
Test total error for best: 61445.57389999995
Test mean error for best: 30.72279
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.078762     
Correct output: -141.201628771 | Program output: -81.078762    
Correct output: 23.3844813461  | Program output: 23.078762     
Correct output: 91.3818662575  | Program output: 112.078762    
Correct output: 6.0991287499   | Program output: -10.078762    
Correct output: 90.6078865723  | Program output: 88.078762     
Correct output: -16.3558496064 | Program output: 68.078762     
Correct output: 85.2320058807  | Program output: 93.078762     
Correct output: -28.7080490162 | Program output: -43.078762    
Correct output: -10.4844827466 | Program output: 61.078762     
Correct output: -59.408072605  | Program output: -68.078762    
Correct output: 59.1228402624  | Program output: 28.078762     
Correct output: -132.1998002816 | Program output: -84.078762    
Correct output: -128.9949320478 | Program output: -41.078762    
Correct output: -78.0962956202 | Program output: -27.078762    
Correct output: -35.919351649  | Program output: -63.078762    
Correct output: -56.0400311694 | Program output: -24.078762    
Correct output: 137.4302481607 | Program output: 57.078762     
Correct output: 32.7727726522  | Program output: 55.078762     
Correct output: -26.6497561561 | Program output: 86.078762     
Correct output: 95.3927116996  | Program output: 17.078762     
Correct output: -65.8806745395 | Program output: -83.078762    
Correct output: 48.7839285535  | Program output: 26.078762     
Correct output: 176.7350863211 | Program output: 107.078762    
Correct output: -87.9710392115 | Program output: 3.078762      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction 14.354813298606842} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_dec} {:instruction 76} {:instruction float_min} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_sub} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_max} {:instruction print_integer} {:instruction float_rot})
Best program: (float_yankdup in1 float_mod float_tan 93 integer_dup_times float_yankdup integer_mod float_dup_items float_yankdup float_rot -83 integer_div 53.660195741514 14.354813298606842 float_max float_dup_items integer_dup_times float_dup integer_rot float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger integer_dup_items print_float float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove print_integer float_dec 76 float_min 76 float_min print_integer integer_mult float_pop integer_dup float_yankdup integer_dup integer_sub float_pop float_dup integer_swap integer_swap float_min float_stackdepth float_rot float_div float_pop float_yank float_max print_integer float_rot)
Errors: [74.4822 10 60.1229 8 0.3057 8 20.6969 9 16.1779 9 2.5291 7 84.4346 11 7.8468 10 14.3707 9 71.5632 9 8.6707 8 31.0441 9 48.121 11 87.9162 12 51.0175 9 27.1594 10 31.9613 10 80.3515 9 22.306 8 112.7285 10 78.3139 10 17.1981 10 22.7052 10 69.6563 10 91.0498 11]
Total: 1369.7295000000006
Mean: 27.39459
Genome size: 76
Size: 77
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2682.727485499992
Median total errors in population: 1374.7295000000006
Error averages by case: (120.6674025999989 10.395 121.76913990000142 8.715 49.50627279999952 8.639 74.19451340000063 9.887 69.78351010000078 9.652 54.18432579999978 7.941 129.58866859999736 11.289 58.61641019999953 10.435 70.41224949999962 9.886 117.76186910000071 9.565 67.46916690000087 8.586 76.97750989999935 9.872 110.62537309999935 11.292 145.3932972000029 12.265 109.59949870000128 9.857 82.19577159999962 10.554 91.3931833999998 10.55 125.916178600001 9.624 72.85139009999851 8.978 155.45895659999832 10.327 120.22920549999813 10.395 75.4373977000003 10.46 69.14358249999856 10.7 118.73875530000144 10.592 142.71985639999795 11.638)
Error minima by case: (43.4821 8 51.1229 7 0.3055 6 2.6969 9 0.0204 7 0.4709 6 4.2771 7 0.1532 6 4.3707 8 1.5943 7 1.3293 6 2.0444 7 39.121 8 78.9162 9 42.0175 8 17.1594 8 22.9613 9 31.3513 7 1.613 7 14.571 7 1.314 6 7.1981 9 0.7056 7 59.6563 8 75.8923 9)
Average genome size in population (length): 79.371
Average program size in population (points): 80.371
Average percent parens in population: 0.013
Minimum age in population: 67.22468433565894
Maximum age in population: 71.81285776467497
Average age in population: 69.52812165258065
Median age in population: 69.57571789226854
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.875
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.875
Total error diversity:				 0.15
Error (vector) diversity:			 0.168
Behavioral diversity:				 0.168
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 92677800
--- Timings ---
Current time: 1529615089553 milliseconds
Total Time:         203.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        77.7 seconds, 38.3%
Fitness Testing:     98.2 seconds, 48.4%
Report:              27.1 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Number IO problem report - generation 48
Test total error for best: 61445.57389999995
Test mean error for best: 30.72279
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.078762     
Correct output: -141.201628771 | Program output: -81.078762    
Correct output: 23.3844813461  | Program output: 23.078762     
Correct output: 91.3818662575  | Program output: 112.078762    
Correct output: 6.0991287499   | Program output: -10.078762    
Correct output: 90.6078865723  | Program output: 88.078762     
Correct output: -16.3558496064 | Program output: 68.078762     
Correct output: 85.2320058807  | Program output: 93.078762     
Correct output: -28.7080490162 | Program output: -43.078762    
Correct output: -10.4844827466 | Program output: 61.078762     
Correct output: -59.408072605  | Program output: -68.078762    
Correct output: 59.1228402624  | Program output: 28.078762     
Correct output: -132.1998002816 | Program output: -84.078762    
Correct output: -128.9949320478 | Program output: -41.078762    
Correct output: -78.0962956202 | Program output: -27.078762    
Correct output: -35.919351649  | Program output: -63.078762    
Correct output: -56.0400311694 | Program output: -24.078762    
Correct output: 137.4302481607 | Program output: 57.078762     
Correct output: 32.7727726522  | Program output: 55.078762     
Correct output: -26.6497561561 | Program output: 86.078762     
Correct output: 95.3927116996  | Program output: 17.078762     
Correct output: -65.8806745395 | Program output: -83.078762    
Correct output: 48.7839285535  | Program output: 26.078762     
Correct output: 176.7350863211 | Program output: 107.078762    
Correct output: -87.9710392115 | Program output: 3.078762      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 93} {:instruction float_min} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction 14.354813298606842} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction print_integer} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_div} {:instruction float_pop} {:instruction float_dup} {:instruction integer_inc} {:instruction integer_swap} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction tag_float_175} {:instruction float_mod} {:instruction float_sub} {:instruction float_max} {:instruction print_integer} {:instruction float_rot})
Best program: (float_yankdup in1 float_mod float_tan 93 float_min float_yankdup integer_mod integer_mod float_yankdup float_rot -83 integer_div 53.660195741514 14.354813298606842 float_max float_dup_items integer_dup_times float_dup integer_rot float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger integer_dup_items print_float float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove print_integer print_integer 76 float_min print_integer integer_mult float_pop integer_dup float_swap integer_dup integer_div float_pop float_dup integer_inc integer_swap float_min float_stackdepth float_rot float_div float_pop float_yank tag_float_175 float_mod float_sub float_max print_integer float_rot)
Errors: [74.4822 10 60.1229 8 0.3057 8 20.6969 9 16.1779 9 2.5291 7 84.4346 11 7.8468 10 14.3707 9 71.5632 9 8.6707 8 31.0441 9 48.121 11 87.9162 12 51.0175 9 27.1594 10 31.9613 10 80.3515 9 22.306 8 112.7285 10 78.3139 10 17.1981 10 22.7052 10 69.6563 10 91.0498 11]
Total: 1369.7295000000006
Mean: 27.39459
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2751.6261840999923
Median total errors in population: 1372.2295000000006
Error averages by case: (124.55683669999904 10.395 121.34392900000124 8.65 55.073362499999575 8.618 75.31039780000073 9.895 74.44463250000054 9.648 58.27105709999984 7.907 131.07665149999744 11.292 63.55745239999954 10.428 75.42077129999964 9.849 119.35283710000084 9.562 71.05007690000106 8.51 82.01702569999946 9.857 110.19714409999949 11.289 145.14080430000308 12.255 109.45444010000115 9.782 86.12091359999945 10.532 91.31653369999985 10.493 130.35979810000117 9.639 74.12148099999851 8.939 156.76215499999833 10.322 125.44483379999828 10.397 79.95218840000007 10.435 74.30651469999849 10.723 121.99958240000134 10.544 143.44276439999817 11.571)
Error minima by case: (32.1143 8 49.1229 6 0.3037 6 3.6969 8 5.0204 7 0.4709 5 2.7229 7 0.1532 6 0.3485 8 5.9627 7 0.3293 6 5.4626 7 37.121 7 54.0 8 10.0175 6 6.2687 9 5.0387 7 37.9835 7 9.674 7 1.7098 7 0.314 6 2.1981 9 2.2948 7 27.2883 8 10.0 6)
Average genome size in population (length): 79.423
Average program size in population (points): 80.423
Average percent parens in population: 0.013
Minimum age in population: 68.22468433565894
Maximum age in population: 73.14505804151108
Average age in population: 70.88093148534513
Median age in population: 70.90192356039384
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.873
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.873
Total error diversity:				 0.163
Error (vector) diversity:			 0.179
Behavioral diversity:				 0.179
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 94663375
--- Timings ---
Current time: 1529615093501 milliseconds
Total Time:         207.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        79.2 seconds, 38.2%
Fitness Testing:    100.2 seconds, 48.4%
Report:              27.6 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Number IO problem report - generation 49
Test total error for best: 61445.57389999995
Test mean error for best: 30.72279
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.078762     
Correct output: -141.201628771 | Program output: -81.078762    
Correct output: 23.3844813461  | Program output: 23.078762     
Correct output: 91.3818662575  | Program output: 112.078762    
Correct output: 6.0991287499   | Program output: -10.078762    
Correct output: 90.6078865723  | Program output: 88.078762     
Correct output: -16.3558496064 | Program output: 68.078762     
Correct output: 85.2320058807  | Program output: 93.078762     
Correct output: -28.7080490162 | Program output: -43.078762    
Correct output: -10.4844827466 | Program output: 61.078762     
Correct output: -59.408072605  | Program output: -68.078762    
Correct output: 59.1228402624  | Program output: 28.078762     
Correct output: -132.1998002816 | Program output: -84.078762    
Correct output: -128.9949320478 | Program output: -41.078762    
Correct output: -78.0962956202 | Program output: -27.078762    
Correct output: -35.919351649  | Program output: -63.078762    
Correct output: -56.0400311694 | Program output: -24.078762    
Correct output: 137.4302481607 | Program output: 57.078762     
Correct output: 32.7727726522  | Program output: 55.078762     
Correct output: -26.6497561561 | Program output: 86.078762     
Correct output: 95.3927116996  | Program output: 17.078762     
Correct output: -65.8806745395 | Program output: -83.078762    
Correct output: 48.7839285535  | Program output: 26.078762     
Correct output: 176.7350863211 | Program output: 107.078762    
Correct output: -87.9710392115 | Program output: 3.078762      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction integer_yank} {:instruction 93} {:instruction float_sin} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction 14.08824431166829} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mod} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_dec} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_dup} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction integer_rot} {:instruction float_mod} {:instruction float_sub} {:instruction float_max} {:instruction print_integer} {:instruction float_rot})
Best program: (float_yankdup in1 float_mod integer_yank 93 float_sin float_yankdup integer_mod integer_mod float_yankdup integer_dup_items -83 integer_div 53.660195741514 14.08824431166829 float_max float_dup_items integer_dup_times float_dup integer_rot float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger integer_dup_items print_float float_swap 78 float_min print_integer integer_mod float_dup integer_dup_items integer_swap integer_shove print_integer integer_swap integer_shove print_integer float_dec 76 float_min print_integer integer_mult float_pop integer_dup integer_swap integer_sub float_swap integer_dup integer_dup float_pop float_dup float_dup_times float_dec float_min float_stackdepth float_rot float_div float_pop float_yank integer_rot float_mod float_sub float_max print_integer float_rot)
Errors: [74.4822 10 60.1229 8 0.3057 8 20.6969 9 16.1779 9 2.5291 7 84.4346 11 7.8468 10 14.3707 9 71.5632 9 8.6707 8 31.0441 9 48.121 11 87.9162 12 51.0175 9 27.1594 10 31.9613 10 80.3515 9 22.306 8 112.7285 10 78.3139 10 17.1981 10 22.7052 10 69.6563 10 91.0498 11]
Total: 1369.7295000000006
Mean: 27.39459
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2814.0597396999924
Median total errors in population: 1371.7295000000006
Error averages by case: (127.14135709999894 10.455 124.87602950000138 8.708 57.49025499999896 8.684 77.06365730000037 9.912 76.85104740000017 9.676 61.22516219999975 7.977 132.87819959999712 11.356 65.35620529999952 10.506 77.40074299999954 9.877 121.18470500000136 9.635 74.51962050000124 8.645 84.34574879999934 9.922 113.7915966999994 11.36 148.0973117000033 12.328 112.30136150000135 9.864 89.12044839999993 10.579 94.19459789999935 10.574 131.8878462000014 9.685 76.33340379999838 8.989 158.44045579999832 10.371 127.12527989999785 10.46 82.45673929999967 10.481 76.64586669999828 10.76 124.94822790000143 10.644 145.29787319999812 11.638)
Error minima by case: (56.0 7 50.1229 6 0.3055 5 10.6969 8 2.9796 6 0.4709 5 12.0037 6 0.8468 5 0.3485 8 9.12 6 2.6707 6 5.4626 6 38.121 6 54.0 7 4.0175 5 6.2687 8 13.852 6 44.0 6 9.674 7 1.7098 6 4.0 5 5.1981 9 4.8763 6 63.6563 7 10.0 5)
Average genome size in population (length): 79.833
Average program size in population (points): 80.833
Average percent parens in population: 0.012
Minimum age in population: 69.37917857257094
Maximum age in population: 74.44515704790935
Average age in population: 72.28938162852596
Median age in population: 72.30041175602203
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.852
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.852
Total error diversity:				 0.147
Error (vector) diversity:			 0.166
Behavioral diversity:				 0.167
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 96659225
--- Timings ---
Current time: 1529615097711 milliseconds
Total Time:         211.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        80.8 seconds, 38.2%
Fitness Testing:    102.3 seconds, 48.4%
Report:              28.1 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Number IO problem report - generation 50
Test total error for best: 61445.57389999995
Test mean error for best: 30.72279
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.078762     
Correct output: -141.201628771 | Program output: -81.078762    
Correct output: 23.3844813461  | Program output: 23.078762     
Correct output: 91.3818662575  | Program output: 112.078762    
Correct output: 6.0991287499   | Program output: -10.078762    
Correct output: 90.6078865723  | Program output: 88.078762     
Correct output: -16.3558496064 | Program output: 68.078762     
Correct output: 85.2320058807  | Program output: 93.078762     
Correct output: -28.7080490162 | Program output: -43.078762    
Correct output: -10.4844827466 | Program output: 61.078762     
Correct output: -59.408072605  | Program output: -68.078762    
Correct output: 59.1228402624  | Program output: 28.078762     
Correct output: -132.1998002816 | Program output: -84.078762    
Correct output: -128.9949320478 | Program output: -41.078762    
Correct output: -78.0962956202 | Program output: -27.078762    
Correct output: -35.919351649  | Program output: -63.078762    
Correct output: -56.0400311694 | Program output: -24.078762    
Correct output: 137.4302481607 | Program output: 57.078762     
Correct output: 32.7727726522  | Program output: 55.078762     
Correct output: -26.6497561561 | Program output: 86.078762     
Correct output: 95.3927116996  | Program output: 17.078762     
Correct output: -65.8806745395 | Program output: -83.078762    
Correct output: 48.7839285535  | Program output: 26.078762     
Correct output: 176.7350863211 | Program output: 107.078762    
Correct output: -87.9710392115 | Program output: 3.078762      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_mod} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction 14.354813298606842} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction float_dup_times} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_dup} {:instruction integer_inc} {:instruction integer_swap} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction tag_float_175} {:instruction float_mod} {:instruction float_sub} {:instruction float_max} {:instruction print_integer})
Best program: (float_yankdup in1 float_mod float_tan 93 integer_dup_times float_yankdup integer_mod integer_mod -83 integer_div 53.660195741514 14.354813298606842 float_max float_dup_items integer_dup_times float_dup integer_rot float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger integer_dup_items print_float float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove print_integer float_swap 76 float_min print_integer integer_mult float_pop float_dup_times float_swap integer_dup integer_dup float_pop float_dup integer_inc integer_swap float_min float_stackdepth float_rot float_div float_pop float_yank tag_float_175 float_mod float_sub float_max print_integer)
Errors: [74.4822 10 60.1229 8 0.3057 8 20.6969 9 16.1779 9 2.5291 7 84.4346 11 7.8468 10 14.3707 9 71.5632 9 8.6707 8 31.0441 9 48.121 11 87.9162 12 51.0175 9 27.1594 10 31.9613 10 80.3515 9 22.306 8 112.7285 10 78.3139 10 17.1981 10 22.7052 10 69.6563 10 91.0498 11]
Total: 1369.7295000000006
Mean: 27.39459
Genome size: 76
Size: 77
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2915.1313518999923
Median total errors in population: 1371.7295000000006
Error averages by case: (130.48228989999896 10.409 129.05525180000123 8.683 60.53159729999898 8.625 81.51269619999998 9.871 81.92373339999965 9.639 64.58643079999979 7.859 136.29725659999755 11.284 69.71641259999959 10.413 83.39504059999966 9.814 124.57072750000121 9.533 79.40760410000107 8.571 87.56963649999936 9.815 118.0488149999995 11.33 152.3859054000031 12.33 117.07657810000124 9.778 94.1823673000004 10.553 99.10836419999904 10.528 136.13034110000123 9.611 79.54959959999853 8.867 161.97254309999843 10.301 129.98669279999785 10.376 88.21305339999908 10.46 79.78691979999843 10.655 128.31341340000128 10.539 149.916081399999 11.568)
Error minima by case: (51.4822 8 47.123 7 0.3047 6 0.6969 8 0.0204 7 0.4709 5 16.4346 7 0.1532 6 2.3707 8 10.5632 7 0.3293 6 4.9559 7 35.1211 7 54.0 8 38.0176 6 0.8406 8 18.9614 7 44.0 7 1.694 7 8.429 7 3.314 6 5.1981 9 0.7052 7 57.6563 8 10.0 6)
Average genome size in population (length): 79.88
Average program size in population (points): 80.88
Average percent parens in population: 0.012
Minimum age in population: 71.26756205236693
Maximum age in population: 75.73567120354906
Average age in population: 73.690160299353
Median age in population: 73.73448836879105
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.871
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.871
Total error diversity:				 0.162
Error (vector) diversity:			 0.18
Behavioral diversity:				 0.18
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 98656225
--- Timings ---
Current time: 1529615101651 milliseconds
Total Time:         215.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        82.3 seconds, 38.2%
Fitness Testing:    104.3 seconds, 48.5%
Report:              28.6 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Number IO problem report - generation 51
Test total error for best: 61445.57389999995
Test mean error for best: 30.72279
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.078762     
Correct output: -141.201628771 | Program output: -81.078762    
Correct output: 23.3844813461  | Program output: 23.078762     
Correct output: 91.3818662575  | Program output: 112.078762    
Correct output: 6.0991287499   | Program output: -10.078762    
Correct output: 90.6078865723  | Program output: 88.078762     
Correct output: -16.3558496064 | Program output: 68.078762     
Correct output: 85.2320058807  | Program output: 93.078762     
Correct output: -28.7080490162 | Program output: -43.078762    
Correct output: -10.4844827466 | Program output: 61.078762     
Correct output: -59.408072605  | Program output: -68.078762    
Correct output: 59.1228402624  | Program output: 28.078762     
Correct output: -132.1998002816 | Program output: -84.078762    
Correct output: -128.9949320478 | Program output: -41.078762    
Correct output: -78.0962956202 | Program output: -27.078762    
Correct output: -35.919351649  | Program output: -63.078762    
Correct output: -56.0400311694 | Program output: -24.078762    
Correct output: 137.4302481607 | Program output: 57.078762     
Correct output: 32.7727726522  | Program output: 55.078762     
Correct output: -26.6497561561 | Program output: 86.078762     
Correct output: 95.3927116996  | Program output: 17.078762     
Correct output: -65.8806745395 | Program output: -83.078762    
Correct output: 48.7839285535  | Program output: 26.078762     
Correct output: 176.7350863211 | Program output: 107.078762    
Correct output: -87.9710392115 | Program output: 3.078762      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction 14.354813298606842} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_tan} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup} {:instruction float_swap} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction print_integer} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_min} {:instruction integer_min} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_dec} {:instruction print_integer} {:instruction float_rot})
Best program: (float_yankdup in1 float_mod float_tan 93 integer_dup_times float_yankdup integer_mod integer_mod float_yankdup float_rot -83 integer_div 53.660195741514 14.354813298606842 float_max float_dup_items integer_dup_times float_dup integer_rot float_swap float_yankdup float_tan 42.446747745532946 float_tan in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger integer_dup_items print_float float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove 76 float_min print_integer integer_mult float_pop integer_dup float_swap integer_dup float_swap float_pop float_dup integer_swap integer_swap float_min float_stackdepth float_rot float_div float_pop float_yank print_integer float_pop float_dup integer_swap integer_swap float_min integer_min float_rot float_div float_pop float_yank float_dec print_integer float_rot)
Errors: [74.4822 10 60.1229 8 0.3057 8 20.6969 9 16.1779 9 2.5291 7 84.4346 11 7.8468 10 14.3707 9 71.5632 9 8.6707 8 31.0441 9 48.121 11 87.9162 12 51.0175 9 27.1594 10 31.9613 10 80.3515 9 22.306 8 112.7285 10 78.3139 10 17.1981 10 22.7052 10 69.6563 10 91.0498 11]
Total: 1369.7295000000006
Mean: 27.39459
Genome size: 90
Size: 91
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2861.574043599993
Median total errors in population: 1371.1181000000006
Error averages by case: (131.15045929999894 10.475 124.2794752000013 8.801 60.97366369999907 8.74 80.81785240000013 9.962 76.30177410000037 9.762 64.99647669999977 7.996 136.0322568999975 11.368 69.11600829999956 10.523 76.93442509999957 9.932 124.4045419000012 9.653 74.00706280000105 8.707 87.86592329999934 9.938 113.20333549999938 11.4 147.64470600000314 12.352 111.99282230000134 9.915 88.65784560000003 10.667 93.87484689999944 10.639 135.83705120000116 9.722 79.77768829999846 9.025 161.4597820999984 10.406 131.20921529999785 10.499 81.93807329999972 10.556 80.10800749999845 10.757 129.19305990000143 10.641 145.6936899999981 11.668)
Error minima by case: (50.4822 8 51.1229 7 0.3055 6 1.6969 9 4.0204 7 0.4709 5 11.834 7 0.1532 6 2.3707 8 5.9627 7 0.6699 6 5.4626 7 39.121 7 54.0 8 27.0175 6 15.1594 8 4.9613 7 44.0 7 8.844 7 21.9035 7 2.3139 6 5.1981 9 2.2948 7 57.6563 8 10.0 5)
Average genome size in population (length): 79.614
Average program size in population (points): 80.614
Average percent parens in population: 0.012
Minimum age in population: 72.51919978497493
Maximum age in population: 76.97202180029996
Average age in population: 75.07447464543608
Median age in population: 75.12543806555136
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.857
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.857
Total error diversity:				 0.165
Error (vector) diversity:			 0.187
Behavioral diversity:				 0.188
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 100646575
--- Timings ---
Current time: 1529615105953 milliseconds
Total Time:         219.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        83.9 seconds, 38.2%
Fitness Testing:    106.3 seconds, 48.5%
Report:              29.1 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Number IO problem report - generation 52
Test total error for best: 61445.57389999995
Test mean error for best: 30.72279
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.078762     
Correct output: -141.201628771 | Program output: -81.078762    
Correct output: 23.3844813461  | Program output: 23.078762     
Correct output: 91.3818662575  | Program output: 112.078762    
Correct output: 6.0991287499   | Program output: -10.078762    
Correct output: 90.6078865723  | Program output: 88.078762     
Correct output: -16.3558496064 | Program output: 68.078762     
Correct output: 85.2320058807  | Program output: 93.078762     
Correct output: -28.7080490162 | Program output: -43.078762    
Correct output: -10.4844827466 | Program output: 61.078762     
Correct output: -59.408072605  | Program output: -68.078762    
Correct output: 59.1228402624  | Program output: 28.078762     
Correct output: -132.1998002816 | Program output: -84.078762    
Correct output: -128.9949320478 | Program output: -41.078762    
Correct output: -78.0962956202 | Program output: -27.078762    
Correct output: -35.919351649  | Program output: -63.078762    
Correct output: -56.0400311694 | Program output: -24.078762    
Correct output: 137.4302481607 | Program output: 57.078762     
Correct output: 32.7727726522  | Program output: 55.078762     
Correct output: -26.6497561561 | Program output: 86.078762     
Correct output: 95.3927116996  | Program output: 17.078762     
Correct output: -65.8806745395 | Program output: -83.078762    
Correct output: 48.7839285535  | Program output: 26.078762     
Correct output: 176.7350863211 | Program output: 107.078762    
Correct output: -87.9710392115 | Program output: 3.078762      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_mod} {:instruction 53.660195741514} {:instruction 14.354813298606842} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_dec} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction integer_swap} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction tag_float_175} {:instruction float_mod} {:instruction 12.370359535671} {:instruction float_max} {:instruction print_integer} {:instruction float_rot})
Best program: (float_yankdup in1 float_mod float_tan 93 integer_dup_times float_yankdup integer_mod integer_mod 53.660195741514 14.354813298606842 float_max float_dup_items integer_dup_times float_dup integer_rot float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger integer_dup_items print_float float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove print_integer float_dec 76 float_min print_integer integer_mult float_pop integer_dup integer_swap float_min float_stackdepth float_rot float_div float_pop float_yank tag_float_175 float_mod 12.370359535671 float_max print_integer float_rot)
Errors: [74.4822 10 60.1229 8 0.3057 8 20.6969 9 16.1779 9 2.5291 7 84.4346 11 7.8468 10 14.3707 9 71.5632 9 8.6707 8 31.0441 9 48.121 11 87.9162 12 51.0175 9 27.1594 10 31.9613 10 80.3515 9 22.306 8 112.7285 10 78.3139 10 17.1981 10 22.7052 10 69.6563 10 91.0498 11]
Total: 1369.7295000000006
Mean: 27.39459
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2921.9273643999936
Median total errors in population: 1369.7295000000006
Error averages by case: (133.54163849999895 10.421 126.59952760000125 8.721 63.00497699999908 8.683 84.28011540000033 9.888 79.07547850000014 9.67 67.58917289999977 7.945 138.26032639999764 11.331 72.67349189999958 10.484 80.51859289999959 9.86 126.59787730000119 9.595 76.50147720000105 8.614 89.93300149999934 9.887 115.54508449999942 11.345 149.95014780000307 12.292 114.3863301000013 9.831 91.13235499999989 10.578 96.37598689999967 10.574 139.18151810000077 9.656 82.05117129999849 8.983 163.78653709999836 10.366 131.45500579999793 10.436 85.33128509999989 10.486 82.22755429999846 10.715 131.28532410000142 10.602 148.06838719999843 11.612)
Error minima by case: (45.4821 8 51.1229 7 0.3055 6 6.6971 8 1.9796 7 0.4709 5 15.3565 7 0.1535 6 6.37 8 9.4851 7 0.6699 6 5.4626 7 39.121 7 52.9162 8 2.0175 6 6.2687 8 13.852 7 39.3513 7 9.674 7 15.5383 7 2.6862 6 4.1981 9 2.2608 7 61.6563 8 10.0 6)
Average genome size in population (length): 79.134
Average program size in population (points): 80.134
Average percent parens in population: 0.013
Minimum age in population: 73.75572012840911
Maximum age in population: 78.29176108566543
Average age in population: 76.41919465888132
Median age in population: 76.4564963835845
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.857
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.857
Total error diversity:				 0.158
Error (vector) diversity:			 0.177
Behavioral diversity:				 0.178
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 102624925
--- Timings ---
Current time: 1529615110410 milliseconds
Total Time:         223.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        85.5 seconds, 38.2%
Fitness Testing:    108.6 seconds, 48.5%
Report:              29.7 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Number IO problem report - generation 53
Test total error for best: 61445.57389999995
Test mean error for best: 30.72279
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.078762     
Correct output: -141.201628771 | Program output: -81.078762    
Correct output: 23.3844813461  | Program output: 23.078762     
Correct output: 91.3818662575  | Program output: 112.078762    
Correct output: 6.0991287499   | Program output: -10.078762    
Correct output: 90.6078865723  | Program output: 88.078762     
Correct output: -16.3558496064 | Program output: 68.078762     
Correct output: 85.2320058807  | Program output: 93.078762     
Correct output: -28.7080490162 | Program output: -43.078762    
Correct output: -10.4844827466 | Program output: 61.078762     
Correct output: -59.408072605  | Program output: -68.078762    
Correct output: 59.1228402624  | Program output: 28.078762     
Correct output: -132.1998002816 | Program output: -84.078762    
Correct output: -128.9949320478 | Program output: -41.078762    
Correct output: -78.0962956202 | Program output: -27.078762    
Correct output: -35.919351649  | Program output: -63.078762    
Correct output: -56.0400311694 | Program output: -24.078762    
Correct output: 137.4302481607 | Program output: 57.078762     
Correct output: 32.7727726522  | Program output: 55.078762     
Correct output: -26.6497561561 | Program output: 86.078762     
Correct output: 95.3927116996  | Program output: 17.078762     
Correct output: -65.8806745395 | Program output: -83.078762    
Correct output: 48.7839285535  | Program output: 26.078762     
Correct output: 176.7350863211 | Program output: 107.078762    
Correct output: -87.9710392115 | Program output: 3.078762      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 93} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_rot} {:instruction -84} {:instruction integer_div} {:instruction 53.660195741514} {:instruction 14.354813298606842} {:instruction float_max} {:instruction float_mod} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_sub} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_max} {:instruction print_integer} {:instruction float_rot})
Best program: (float_yankdup in1 float_mod float_tan 93 float_yankdup integer_mod integer_mod float_yankdup float_rot -84 integer_div 53.660195741514 14.354813298606842 float_max float_mod integer_dup_times float_dup integer_rot float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger integer_dup_items print_float float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove print_integer float_cos print_integer float_swap 76 float_min print_integer integer_mult float_pop integer_dup float_yankdup integer_dup integer_sub float_pop float_dup integer_swap integer_swap integer_swap float_min float_stackdepth float_rot float_div float_pop float_yank float_max print_integer float_rot)
Errors: [74.4822 10 60.1229 8 0.3057 8 20.6969 9 16.1779 9 2.5291 7 84.4346 11 7.8468 10 14.3707 9 71.5632 9 8.6707 8 31.0441 9 48.121 11 87.9162 12 51.0175 9 27.1594 10 31.9613 10 80.3515 9 22.306 8 112.7285 10 78.3139 10 17.1981 10 22.7052 10 69.6563 10 91.0498 11]
Total: 1369.7295000000006
Mean: 27.39459
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3203.0989598999927
Median total errors in population: 1372.7295000000006
Error averages by case: (143.82920149999893 10.554 138.6049269000009 8.875 74.96367129999892 8.789 94.47643839999934 10.033 91.00769999999909 9.822 78.98976689999974 8.099 148.38979469999842 11.391 83.02563609999964 10.576 91.50010779999968 10.014 136.98687650000122 9.683 88.78818240000119 8.759 101.48602169999933 10.031 127.6838021999994 11.477 161.47867910000332 12.389 126.2120467000013 9.973 102.95745010000054 10.717 108.33769019999902 10.701 148.4454164000001 9.796 93.39344609999833 9.114 173.30281369999832 10.411 143.8594369999989 10.537 96.53555069999861 10.6 93.85411739999827 10.829 141.8725212000014 10.696 157.50666489999878 11.745)
Error minima by case: (36.4822 7 50.1229 7 0.3057 5 10.6969 8 2.0991 8 0.4709 5 12.0037 6 0.8468 5 0.3485 8 9.9056 6 0.6707 6 5.4626 6 38.121 9 58.9162 9 8.0175 7 7.5598 8 4.3415 9 30.3515 6 9.674 7 1.7098 6 4.0 5 4.1981 9 4.8763 6 61.6561 7 17.8923 9)
Average genome size in population (length): 79.681
Average program size in population (points): 80.681
Average percent parens in population: 0.012
Minimum age in population: 75.4756175512003
Maximum age in population: 79.74626574381796
Average age in population: 77.8012608075311
Median age in population: 77.82767782520331
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.884
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.884
Total error diversity:				 0.156
Error (vector) diversity:			 0.179
Behavioral diversity:				 0.179
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 104616950
--- Timings ---
Current time: 1529615114401 milliseconds
Total Time:         228.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        87.0 seconds, 38.2%
Fitness Testing:    110.5 seconds, 48.5%
Report:              30.3 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Number IO problem report - generation 54
Test total error for best: 61445.57389999995
Test mean error for best: 30.72279
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.078762     
Correct output: -141.201628771 | Program output: -81.078762    
Correct output: 23.3844813461  | Program output: 23.078762     
Correct output: 91.3818662575  | Program output: 112.078762    
Correct output: 6.0991287499   | Program output: -10.078762    
Correct output: 90.6078865723  | Program output: 88.078762     
Correct output: -16.3558496064 | Program output: 68.078762     
Correct output: 85.2320058807  | Program output: 93.078762     
Correct output: -28.7080490162 | Program output: -43.078762    
Correct output: -10.4844827466 | Program output: 61.078762     
Correct output: -59.408072605  | Program output: -68.078762    
Correct output: 59.1228402624  | Program output: 28.078762     
Correct output: -132.1998002816 | Program output: -84.078762    
Correct output: -128.9949320478 | Program output: -41.078762    
Correct output: -78.0962956202 | Program output: -27.078762    
Correct output: -35.919351649  | Program output: -63.078762    
Correct output: -56.0400311694 | Program output: -24.078762    
Correct output: 137.4302481607 | Program output: 57.078762     
Correct output: 32.7727726522  | Program output: 55.078762     
Correct output: -26.6497561561 | Program output: 86.078762     
Correct output: 95.3927116996  | Program output: 17.078762     
Correct output: -65.8806745395 | Program output: -83.078762    
Correct output: 48.7839285535  | Program output: 26.078762     
Correct output: 176.7350863211 | Program output: 107.078762    
Correct output: -87.9710392115 | Program output: 3.078762      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction 14.354813298606842} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction tag_integer_244} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_min} {:instruction float_pop} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_sub} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_max} {:instruction print_integer} {:instruction float_rot})
Best program: (float_yankdup in1 float_mod float_tan 93 integer_dup_times float_yankdup integer_mod integer_mod float_yankdup float_rot -83 integer_div 53.660195741514 14.354813298606842 float_max float_dup_items integer_dup_times float_dup integer_rot float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger integer_dup_items print_float float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap tag_integer_244 print_integer float_cos print_integer float_swap 76 float_min print_integer integer_min float_pop integer_dup float_swap integer_dup integer_sub float_pop float_dup integer_swap integer_swap float_min float_stackdepth float_rot float_div float_pop float_yank float_max print_integer float_rot)
Errors: [74.4822 10 60.1229 8 0.3057 8 20.6969 9 16.1779 9 2.5291 7 84.4346 11 7.8468 10 14.3707 9 71.5632 9 8.6707 8 31.0441 9 48.121 11 87.9162 12 51.0175 9 27.1594 10 31.9613 10 80.3515 9 22.306 8 112.7285 10 78.3139 10 17.1981 10 22.7052 10 69.6563 10 91.0498 11]
Total: 1369.7295000000006
Mean: 27.39459
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3087.0100110999915
Median total errors in population: 1371.7295000000006
Error averages by case: (138.789734399999 10.469 134.46234590000097 8.776 69.63586569999913 8.728 88.90487319999959 9.937 86.94741199999936 9.717 73.37273349999978 7.997 144.0392840999982 11.361 77.35545969999957 10.523 87.6767628999996 9.9 132.50994570000105 9.62 84.87133220000092 8.652 96.09034279999936 9.923 123.51698459999949 11.384 157.52147660000287 12.359 122.2751835000013 9.848 99.22371720000048 10.611 104.36714619999897 10.602 143.43589010000028 9.711 88.09378849999861 8.974 169.22804799999852 10.388 138.32844619999864 10.438 92.6808084999991 10.536 88.48359099999855 10.745 136.82149560000144 10.628 154.901342999999 11.649)
Error minima by case: (56.0 7 49.1229 5 0.3055 5 9.6969 9 3.0204 5 0.4709 5 14.3565 6 0.1532 5 7.3681 8 8.4851 6 1.668 6 2.9553 6 37.121 5 54.0 6 40.0 4 20.1567 8 20.9613 5 44.0 6 9.0149 7 24.6504 6 4.0 4 10.1954 9 1.7052 6 62.6571 7 10.0 4)
Average genome size in population (length): 79.097
Average program size in population (points): 80.097
Average percent parens in population: 0.013
Minimum age in population: 76.51682867438372
Maximum age in population: 81.4075442421842
Average age in population: 79.160822086091
Median age in population: 79.24126684271363
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.868
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.868
Total error diversity:				 0.166
Error (vector) diversity:			 0.188
Behavioral diversity:				 0.188
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 106594400
--- Timings ---
Current time: 1529615118576 milliseconds
Total Time:         232.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        88.7 seconds, 38.2%
Fitness Testing:    112.5 seconds, 48.5%
Report:              30.9 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
;;******************************
;; -*- Number IO problem report - generation 55
Test total error for best: 61445.57389999995
Test mean error for best: 30.72279
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.078762     
Correct output: -141.201628771 | Program output: -81.078762    
Correct output: 23.3844813461  | Program output: 23.078762     
Correct output: 91.3818662575  | Program output: 112.078762    
Correct output: 6.0991287499   | Program output: -10.078762    
Correct output: 90.6078865723  | Program output: 88.078762     
Correct output: -16.3558496064 | Program output: 68.078762     
Correct output: 85.2320058807  | Program output: 93.078762     
Correct output: -28.7080490162 | Program output: -43.078762    
Correct output: -10.4844827466 | Program output: 61.078762     
Correct output: -59.408072605  | Program output: -68.078762    
Correct output: 59.1228402624  | Program output: 28.078762     
Correct output: -132.1998002816 | Program output: -84.078762    
Correct output: -128.9949320478 | Program output: -41.078762    
Correct output: -78.0962956202 | Program output: -27.078762    
Correct output: -35.919351649  | Program output: -63.078762    
Correct output: -56.0400311694 | Program output: -24.078762    
Correct output: 137.4302481607 | Program output: 57.078762     
Correct output: 32.7727726522  | Program output: 55.078762     
Correct output: -26.6497561561 | Program output: 86.078762     
Correct output: 95.3927116996  | Program output: 17.078762     
Correct output: -65.8806745395 | Program output: -83.078762    
Correct output: 48.7839285535  | Program output: 26.078762     
Correct output: 176.7350863211 | Program output: 107.078762    
Correct output: -87.9710392115 | Program output: 3.078762      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction integer_yank} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction -83} {:instruction integer_shove} {:instruction 53.660195741514} {:instruction 14.354813298606842} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 40.625808456719426} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_mult} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mod} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction float_inc} {:instruction float_pop} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_dup} {:instruction integer_inc} {:instruction integer_swap} {:instruction float_add} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_mod} {:instruction float_swap} {:instruction tag_float_175} {:instruction integer_shove} {:instruction float_sub} {:instruction float_max} {:instruction print_integer} {:instruction float_rot})
Best program: (float_yankdup in1 float_mod integer_yank 93 integer_dup_times float_yankdup integer_mod integer_mod float_yankdup integer_dup_items -83 integer_shove 53.660195741514 14.354813298606842 float_max float_dup_items integer_dup_times float_dup integer_rot float_swap float_swap float_yankdup float_tan 40.625808456719426 float_swap float_yankdup float_mult 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger integer_dup_items print_float float_swap 78 float_min print_integer integer_mod float_dup integer_dup_items integer_swap integer_shove print_integer float_swap 76 float_min print_integer float_inc float_pop integer_dup float_swap integer_dup integer_dup float_pop float_dup integer_inc integer_swap float_add float_stackdepth float_rot float_div float_mod float_swap tag_float_175 integer_shove float_sub float_max print_integer float_rot)
Errors: [74.4822 10 60.1229 8 0.3057 8 20.6969 9 16.1779 9 2.5291 7 84.4346 11 7.8468 10 14.3707 9 71.5632 9 8.6707 8 31.0441 9 48.121 11 87.9162 12 51.0175 9 27.1594 10 31.9613 10 80.3515 9 22.306 8 112.7285 10 78.3139 10 17.1981 10 22.7052 10 69.6563 10 91.0498 11]
Total: 1369.7295000000006
Mean: 27.39459
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3368.987303599993
Median total errors in population: 1372.7295000000006
Error averages by case: (149.3841309999989 10.479 145.28864880000012 8.77 80.84673089999905 8.709 100.6114811999993 9.966 98.11823219999913 9.76 84.88294239999983 7.993 155.47897749999873 11.357 88.98071699999961 10.511 100.26248109999968 9.905 143.93412990000112 9.643 96.48557970000101 8.652 107.42554479999939 9.925 134.4642124999995 11.41 168.09295860000316 12.338 133.41916360000118 9.886 110.93078490000043 10.617 115.73106579999903 10.595 154.0520637999997 9.744 99.56436099999847 8.993 180.7450026999984 10.383 148.98156879999934 10.486 105.16042139999881 10.5 99.76888449999836 10.747 147.1774418000014 10.602 165.60277769999925 11.626)
Error minima by case: (56.0 6 47.1229 7 0.3047 4 7.6969 8 4.8405 8 0.4709 5 15.3565 5 0.1532 4 6.3707 7 9.4851 5 0.6707 6 4.0441 5 35.121 9 74.9162 10 26.0175 7 16.1594 7 3.9613 9 44.0 5 9.306 7 25.429 5 4.0 4 9.1981 9 3.7482 5 61.6563 6 35.8923 9)
Average genome size in population (length): 78.946
Average program size in population (points): 79.946
Average percent parens in population: 0.013
Minimum age in population: 78.145963543207
Maximum age in population: 82.37712538621378
Average age in population: 80.52019693067042
Median age in population: 80.56376303664752
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.876
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.876
Total error diversity:				 0.169
Error (vector) diversity:			 0.19
Behavioral diversity:				 0.19
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 108568050
--- Timings ---
Current time: 1529615122682 milliseconds
Total Time:         236.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        90.3 seconds, 38.2%
Fitness Testing:    114.5 seconds, 48.4%
Report:              31.4 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
;;******************************
;; -*- Number IO problem report - generation 56
Test total error for best: 61445.57389999995
Test mean error for best: 30.72279
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.078762     
Correct output: -141.201628771 | Program output: -81.078762    
Correct output: 23.3844813461  | Program output: 23.078762     
Correct output: 91.3818662575  | Program output: 112.078762    
Correct output: 6.0991287499   | Program output: -10.078762    
Correct output: 90.6078865723  | Program output: 88.078762     
Correct output: -16.3558496064 | Program output: 68.078762     
Correct output: 85.2320058807  | Program output: 93.078762     
Correct output: -28.7080490162 | Program output: -43.078762    
Correct output: -10.4844827466 | Program output: 61.078762     
Correct output: -59.408072605  | Program output: -68.078762    
Correct output: 59.1228402624  | Program output: 28.078762     
Correct output: -132.1998002816 | Program output: -84.078762    
Correct output: -128.9949320478 | Program output: -41.078762    
Correct output: -78.0962956202 | Program output: -27.078762    
Correct output: -35.919351649  | Program output: -63.078762    
Correct output: -56.0400311694 | Program output: -24.078762    
Correct output: 137.4302481607 | Program output: 57.078762     
Correct output: 32.7727726522  | Program output: 55.078762     
Correct output: -26.6497561561 | Program output: 86.078762     
Correct output: 95.3927116996  | Program output: 17.078762     
Correct output: -65.8806745395 | Program output: -83.078762    
Correct output: 48.7839285535  | Program output: 26.078762     
Correct output: 176.7350863211 | Program output: 107.078762    
Correct output: -87.9710392115 | Program output: 3.078762      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction 14.354813298606842} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction integer_flush} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction float_cos} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_yankdup} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_dup} {:instruction integer_inc} {:instruction integer_dup} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_inc} {:instruction integer_rot} {:instruction float_mod} {:instruction float_sub} {:instruction float_max} {:instruction print_integer} {:instruction float_rot})
Best program: (float_yankdup in1 float_tan 93 integer_dup_times float_yankdup integer_mod integer_mod float_yankdup float_rot -83 integer_div 53.660195741514 14.354813298606842 float_max float_dup_items integer_dup_times float_dup integer_rot float_swap float_yankdup float_tan 42.446747745532946 integer_flush float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger integer_dup_items print_float float_swap 78 float_min print_integer integer_mult float_dup float_cos integer_swap integer_shove integer_dup_times integer_yankdup print_integer float_swap 76 float_min print_integer integer_mult integer_mult float_pop integer_dup float_swap integer_dup integer_dup float_pop float_dup integer_inc integer_dup float_pop float_dup integer_swap float_min float_stackdepth float_rot float_div float_pop float_inc integer_rot float_mod float_sub float_max print_integer float_rot)
Errors: [74.4822 10 60.1229 8 0.3057 8 20.6969 9 16.1779 9 2.5291 7 84.4346 11 7.8468 10 14.3707 9 71.5632 9 8.6707 8 31.0441 9 48.121 11 87.9162 12 51.0175 9 27.1594 10 31.9613 10 80.3515 9 22.306 8 112.7285 10 78.3139 10 17.1981 10 22.7052 10 69.6563 10 91.0498 11]
Total: 1369.7295000000006
Mean: 27.39459
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3160.273349399993
Median total errors in population: 1369.7295000000006
Error averages by case: (143.64710449999896 10.421 134.71838320000086 8.724 74.22320029999905 8.634 94.65882179999967 9.912 87.6574741999997 9.712 78.77625789999975 7.914 148.86620199999862 11.328 82.69074489999963 10.471 88.2390669999997 9.861 137.28388720000103 9.571 85.25473950000108 8.644 101.23700239999938 9.851 123.77495489999946 11.364 157.778863600003 12.349 122.5331319000012 9.87 99.96240230000025 10.607 104.66521939999939 10.577 148.2795646 9.685 93.2673856999985 8.928 174.24311049999855 10.319 142.34065769999884 10.428 93.18872379999922 10.494 93.52867969999845 10.675 141.5848232000013 10.558 155.36794719999904 11.608)
Error minima by case: (56.0 6 47.1229 6 0.2905 4 7.6969 8 1.0204 8 0.4709 5 5.2771 5 0.8468 4 5.3707 8 0.5943 5 0.3293 6 5.4626 5 35.121 9 51.9162 9 1.0175 8 6.2687 8 13.852 9 44.0 5 9.306 7 15.5383 5 2.314 4 8.1981 9 4.8763 5 60.6563 6 10.8923 9)
Average genome size in population (length): 79.63
Average program size in population (points): 80.63
Average percent parens in population: 0.012
Minimum age in population: 79.5419127238443
Maximum age in population: 84.09473216836234
Average age in population: 81.95374734066084
Median age in population: 81.9761558009636
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.849
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.849
Total error diversity:				 0.152
Error (vector) diversity:			 0.171
Behavioral diversity:				 0.171
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 110558800
--- Timings ---
Current time: 1529615126786 milliseconds
Total Time:         240.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        91.9 seconds, 38.2%
Fitness Testing:    116.4 seconds, 48.4%
Report:              31.9 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
;;******************************
;; -*- Number IO problem report - generation 57
Test total error for best: 61445.57389999995
Test mean error for best: 30.72279
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.078762     
Correct output: -141.201628771 | Program output: -81.078762    
Correct output: 23.3844813461  | Program output: 23.078762     
Correct output: 91.3818662575  | Program output: 112.078762    
Correct output: 6.0991287499   | Program output: -10.078762    
Correct output: 90.6078865723  | Program output: 88.078762     
Correct output: -16.3558496064 | Program output: 68.078762     
Correct output: 85.2320058807  | Program output: 93.078762     
Correct output: -28.7080490162 | Program output: -43.078762    
Correct output: -10.4844827466 | Program output: 61.078762     
Correct output: -59.408072605  | Program output: -68.078762    
Correct output: 59.1228402624  | Program output: 28.078762     
Correct output: -132.1998002816 | Program output: -84.078762    
Correct output: -128.9949320478 | Program output: -41.078762    
Correct output: -78.0962956202 | Program output: -27.078762    
Correct output: -35.919351649  | Program output: -63.078762    
Correct output: -56.0400311694 | Program output: -24.078762    
Correct output: 137.4302481607 | Program output: 57.078762     
Correct output: 32.7727726522  | Program output: 55.078762     
Correct output: -26.6497561561 | Program output: 86.078762     
Correct output: 95.3927116996  | Program output: 17.078762     
Correct output: -65.8806745395 | Program output: -83.078762    
Correct output: 48.7839285535  | Program output: 26.078762     
Correct output: 176.7350863211 | Program output: 107.078762    
Correct output: -87.9710392115 | Program output: 3.078762      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_cos} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction 15.12666349363663} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction integer_mod} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_shove} {:instruction print_float} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_max} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction tag_float_175} {:instruction float_sub} {:instruction float_sub} {:instruction float_max} {:instruction print_integer} {:instruction float_rot})
Best program: (float_yankdup in1 float_mod float_tan 93 integer_dup_times float_yankdup integer_mod integer_mod float_cos float_rot -83 integer_div 53.660195741514 15.12666349363663 float_max float_dup_items integer_dup_times float_dup integer_rot float_swap integer_mod float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger integer_shove print_float float_swap 78 float_min print_integer integer_mult float_dup integer_max integer_swap integer_shove print_integer float_cos print_integer float_swap 76 float_min print_integer integer_mult float_pop integer_dup float_swap integer_dup float_min float_stackdepth float_rot float_div float_pop float_yank tag_float_175 float_sub float_sub float_max print_integer float_rot)
Errors: [74.4822 10 60.1229 8 0.3057 8 20.6969 9 16.1779 9 2.5291 7 84.4346 11 7.8468 10 14.3707 9 71.5632 9 8.6707 8 31.0441 9 48.121 11 87.9162 12 51.0175 9 27.1594 10 31.9613 10 80.3515 9 22.306 8 112.7285 10 78.3139 10 17.1981 10 22.7052 10 69.6563 10 91.0498 11]
Total: 1369.7295000000006
Mean: 27.39459
Genome size: 76
Size: 77
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3049.656846399993
Median total errors in population: 1372.7299
Error averages by case: (137.62792169999904 10.463 131.62667100000127 8.791 68.41488609999917 8.719 90.6022690999997 9.97 83.69199509999976 9.733 72.20536799999975 7.984 142.7168114999981 11.345 78.20280959999964 10.49 86.80303279999964 9.917 131.27137880000097 9.627 81.88141240000094 8.655 94.87948589999934 9.934 120.62623379999945 11.382 154.78611780000313 12.345 119.36507210000127 9.907 96.34320870000023 10.628 101.43578479999934 10.612 144.15573980000048 9.717 86.73002109999862 8.986 167.91183529999844 10.383 137.71841619999853 10.453 91.61723969999935 10.538 87.22187889999854 10.745 136.12354790000143 10.634 152.08570829999897 11.654)
Error minima by case: (56.0 8 48.1229 7 0.3055 6 8.6969 9 1.9796 8 0.4683 5 14.9451 7 0.1532 6 3.3707 8 9.0737 7 0.3293 6 5.4626 7 36.121 9 44.9162 9 5.6069 8 16.1594 8 14.0387 9 44.0 7 8.674 7 25.239 7 4.0 6 4.1981 9 3.7052 7 11.3992 8 3.8923 9)
Average genome size in population (length): 79.339
Average program size in population (points): 80.339
Average percent parens in population: 0.013
Minimum age in population: 80.9340516894648
Maximum age in population: 85.1811607723103
Average age in population: 83.35537577979109
Median age in population: 83.39681797521693
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.861
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.861
Total error diversity:				 0.175
Error (vector) diversity:			 0.194
Behavioral diversity:				 0.195
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 112542300
--- Timings ---
Current time: 1529615130923 milliseconds
Total Time:         244.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        93.6 seconds, 38.3%
Fitness Testing:    118.4 seconds, 48.4%
Report:              32.4 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
;;******************************
;; -*- Number IO problem report - generation 58
Test total error for best: 61445.57389999995
Test mean error for best: 30.72279
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.078762     
Correct output: -141.201628771 | Program output: -81.078762    
Correct output: 23.3844813461  | Program output: 23.078762     
Correct output: 91.3818662575  | Program output: 112.078762    
Correct output: 6.0991287499   | Program output: -10.078762    
Correct output: 90.6078865723  | Program output: 88.078762     
Correct output: -16.3558496064 | Program output: 68.078762     
Correct output: 85.2320058807  | Program output: 93.078762     
Correct output: -28.7080490162 | Program output: -43.078762    
Correct output: -10.4844827466 | Program output: 61.078762     
Correct output: -59.408072605  | Program output: -68.078762    
Correct output: 59.1228402624  | Program output: 28.078762     
Correct output: -132.1998002816 | Program output: -84.078762    
Correct output: -128.9949320478 | Program output: -41.078762    
Correct output: -78.0962956202 | Program output: -27.078762    
Correct output: -35.919351649  | Program output: -63.078762    
Correct output: -56.0400311694 | Program output: -24.078762    
Correct output: 137.4302481607 | Program output: 57.078762     
Correct output: 32.7727726522  | Program output: 55.078762     
Correct output: -26.6497561561 | Program output: 86.078762     
Correct output: 95.3927116996  | Program output: 17.078762     
Correct output: -65.8806745395 | Program output: -83.078762    
Correct output: 48.7839285535  | Program output: 26.078762     
Correct output: 176.7350863211 | Program output: 107.078762    
Correct output: -87.9710392115 | Program output: 3.078762      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction integer_yank} {:instruction 93} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction 14.354813298606842} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_mult} {:instruction 42.446747745532946} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_pop} {:instruction integer_inc} {:instruction integer_inc} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_yankdup} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_swap} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_sub} {:instruction float_pop} {:instruction float_dup} {:instruction tagged_3} {:instruction integer_swap} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_max} {:instruction print_integer})
Best program: (float_yankdup in1 float_mod integer_yank 93 integer_add float_yankdup float_rot -83 integer_div 53.660195741514 14.354813298606842 float_max float_dup_items integer_dup_times float_dup integer_rot float_swap float_yankdup float_mult 42.446747745532946 42.446747745532946 float_yank float_yankdup in2 integer_pop integer_inc integer_inc in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger integer_dup_items print_float float_swap 78 float_min print_integer integer_mult float_dup integer_dup_times integer_yankdup print_integer float_swap 76 float_swap 76 float_min print_integer integer_mult float_pop integer_dup float_swap integer_dup integer_sub float_pop float_dup tagged_3 integer_swap float_min float_stackdepth float_rot float_div float_pop float_yank float_max print_integer)
Errors: [74.4822 10 60.1229 8 0.3057 8 20.6969 9 16.1779 9 2.5291 7 84.4346 11 7.8468 10 14.3707 9 71.5632 9 8.6707 8 31.0441 9 48.121 11 87.9162 12 51.0175 9 27.1594 10 31.9613 10 80.3515 9 22.306 8 112.7285 10 78.3139 10 17.1981 10 22.7052 10 69.6563 10 91.0498 11]
Total: 1369.7295000000006
Mean: 27.39459
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3370.954226599994
Median total errors in population: 1374.7296000000006
Error averages by case: (148.09249969999897 10.49 148.3332312999998 8.841 79.4205637999989 8.726 100.54965289999919 9.981 100.34171649999882 9.762 84.01340409999983 8.022 153.0024713999988 11.359 89.01577039999965 10.532 102.50787059999968 9.938 141.57952870000148 9.68 99.13081460000113 8.733 105.54420529999939 9.959 137.5998328000003 11.427 170.44460550000326 12.34 135.51945900000072 9.953 113.05402830000081 10.651 117.85432989999875 10.627 153.44465799999966 9.778 97.89465769999845 9.055 177.98570589999846 10.364 145.8803057999992 10.477 107.93421819999836 10.549 97.96188639999824 10.74 146.60429970000132 10.638 162.98051009999963 11.642)
Error minima by case: (46.4822 7 49.1229 6 0.3047 5 9.6969 8 0.0204 6 0.4709 5 9.1974 6 1.1532 5 6.3707 7 8.0688 6 0.6707 6 5.0441 6 37.121 6 54.0 7 12.0175 5 19.1594 8 10.0387 6 34.3515 6 8.674 7 16.9035 6 4.0 5 0.1981 7 0.2338 6 61.6563 7 10.0 5)
Average genome size in population (length): 79.473
Average program size in population (points): 80.473
Average percent parens in population: 0.013
Minimum age in population: 82.53944117403007
Maximum age in population: 86.95245215494865
Average age in population: 84.75374196114998
Median age in population: 84.7913429483036
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.875
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.875
Total error diversity:				 0.191
Error (vector) diversity:			 0.205
Behavioral diversity:				 0.205
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 114529150
--- Timings ---
Current time: 1529615134964 milliseconds
Total Time:         248.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        95.1 seconds, 38.3%
Fitness Testing:    120.4 seconds, 48.4%
Report:              32.9 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
;;******************************
;; -*- Number IO problem report - generation 59
Test total error for best: 61445.57389999995
Test mean error for best: 30.72279
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.078762     
Correct output: -141.201628771 | Program output: -81.078762    
Correct output: 23.3844813461  | Program output: 23.078762     
Correct output: 91.3818662575  | Program output: 112.078762    
Correct output: 6.0991287499   | Program output: -10.078762    
Correct output: 90.6078865723  | Program output: 88.078762     
Correct output: -16.3558496064 | Program output: 68.078762     
Correct output: 85.2320058807  | Program output: 93.078762     
Correct output: -28.7080490162 | Program output: -43.078762    
Correct output: -10.4844827466 | Program output: 61.078762     
Correct output: -59.408072605  | Program output: -68.078762    
Correct output: 59.1228402624  | Program output: 28.078762     
Correct output: -132.1998002816 | Program output: -84.078762    
Correct output: -128.9949320478 | Program output: -41.078762    
Correct output: -78.0962956202 | Program output: -27.078762    
Correct output: -35.919351649  | Program output: -63.078762    
Correct output: -56.0400311694 | Program output: -24.078762    
Correct output: 137.4302481607 | Program output: 57.078762     
Correct output: 32.7727726522  | Program output: 55.078762     
Correct output: -26.6497561561 | Program output: 86.078762     
Correct output: 95.3927116996  | Program output: 17.078762     
Correct output: -65.8806745395 | Program output: -83.078762    
Correct output: 48.7839285535  | Program output: 26.078762     
Correct output: 176.7350863211 | Program output: 107.078762    
Correct output: -87.9710392115 | Program output: 3.078762      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction float_tan} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_dup} {:instruction integer_sub} {:instruction float_pop} {:instruction float_dup} {:instruction float_sin} {:instruction integer_swap} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction integer_max} {:instruction float_max} {:instruction print_integer} {:instruction float_rot})
Best program: (float_yankdup in1 float_mod float_tan float_tan integer_dup_times float_yankdup integer_yankdup float_yankdup float_rot -83 integer_div 53.660195741514 integer_fromfloat float_max float_dup_items integer_dup_times float_dup integer_rot float_yankdup float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger integer_inc integer_inc integer_inc integer_inc float_frominteger integer_dup_items print_float float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove print_integer float_cos print_integer float_swap 76 float_min print_integer integer_mult float_pop integer_dup integer_max integer_dup integer_sub float_pop float_dup float_sin integer_swap float_min float_stackdepth float_rot float_div float_pop integer_max float_max print_integer float_rot)
Errors: [74.4822 10 60.1229 8 0.3057 8 20.6969 9 16.1779 9 2.5291 7 84.4346 11 7.8468 10 14.3707 9 71.5632 9 8.6707 8 31.0441 9 48.121 11 87.9162 12 51.0175 9 27.1594 10 31.9613 10 80.3515 9 22.306 8 112.7285 10 78.3139 10 17.1981 10 22.7052 10 69.6563 10 91.0498 11]
Total: 1369.7295000000006
Mean: 27.39459
Genome size: 82
Size: 83
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3154.2534183999924
Median total errors in population: 1371.7295000000006
Error averages by case: (139.01668629999898 10.518 139.2162489000009 8.791 69.88471779999914 8.713 91.17793789999969 9.988 91.9497259999994 9.77 73.46269049999978 8.012 145.55183039999778 11.419 77.65281099999957 10.552 92.11886249999962 9.962 133.9881500000011 9.66 88.937258100001 8.691 96.85960979999938 9.967 128.27649769999945 11.415 162.5918450000031 12.367 127.6256565000012 9.925 103.61049500000037 10.65 109.80860759999909 10.623 143.82185270000076 9.762 89.67234839999848 9.038 170.84925429999836 10.419 139.5661050999985 10.5 97.68206809999909 10.548 89.17627659999852 10.785 136.50675080000133 10.688 160.8151313999989 11.671)
Error minima by case: (56.0 8 48.1229 7 0.3055 6 8.6969 9 0.9796 8 0.4681 5 7.7229 7 0.8468 6 0.3485 8 9.4851 7 0.6707 6 5.4626 7 36.121 9 75.9162 9 35.9082 8 6.2687 9 13.852 9 44.0 7 9.0149 7 1.7098 7 4.0 6 5.1981 8 1.2948 7 57.6563 8 45.783 9)
Average genome size in population (length): 79.398
Average program size in population (points): 80.398
Average percent parens in population: 0.013
Minimum age in population: 83.53944117403007
Maximum age in population: 87.92266836106909
Average age in population: 86.16844656985508
Median age in population: 86.21032844865627
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.863
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.863
Total error diversity:				 0.173
Error (vector) diversity:			 0.192
Behavioral diversity:				 0.193
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 116514125
--- Timings ---
Current time: 1529615139193 milliseconds
Total Time:         252.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        96.9 seconds, 38.3%
Fitness Testing:    122.4 seconds, 48.4%
Report:              33.4 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
;;******************************
;; -*- Number IO problem report - generation 60
Test total error for best: 61409.6259
Test mean error for best: 30.70481
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.080762     
Correct output: -141.201628771 | Program output: -81.080762    
Correct output: 23.3844813461  | Program output: 23.080762     
Correct output: 91.3818662575  | Program output: 112.080762    
Correct output: 6.0991287499   | Program output: -10.080762    
Correct output: 90.6078865723  | Program output: 88.080762     
Correct output: -16.3558496064 | Program output: 68.080762     
Correct output: 85.2320058807  | Program output: 93.080762     
Correct output: -28.7080490162 | Program output: -43.080762    
Correct output: -10.4844827466 | Program output: 61.080762     
Correct output: -59.408072605  | Program output: -68.080762    
Correct output: 59.1228402624  | Program output: 28.080762     
Correct output: -132.1998002816 | Program output: -84.080762    
Correct output: -128.9949320478 | Program output: -41.080762    
Correct output: -78.0962956202 | Program output: -27.080762    
Correct output: -35.919351649  | Program output: -63.080762    
Correct output: -56.0400311694 | Program output: -24.080762    
Correct output: 137.4302481607 | Program output: 57.080762     
Correct output: 32.7727726522  | Program output: 55.080762     
Correct output: -26.6497561561 | Program output: 86.080762     
Correct output: 95.3927116996  | Program output: 17.080762     
Correct output: -65.8806745395 | Program output: -83.080762    
Correct output: 48.7839285535  | Program output: 26.080762     
Correct output: 176.7350863211 | Program output: 107.080762    
Correct output: -87.9710392115 | Program output: 3.080762      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction in1} {:instruction integer_rot} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_dup} {:instruction float_swap} {:instruction float_max} {:instruction integer_dup_times} {:instruction float_tan} {:instruction float_dup} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_max} {:instruction print_integer})
Best program: (float_flush in1 integer_rot float_tan 93 integer_dup_times float_yankdup integer_dup_items -83 integer_div 53.660195741514 float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger print_float integer_mod 80 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove integer_dup_items integer_swap integer_shove print_integer float_cos print_integer float_swap 76 float_min print_integer integer_mult float_pop integer_dup float_swap float_max integer_dup_times float_tan float_dup integer_swap integer_swap float_min float_stackdepth float_rot float_div float_pop float_yank float_max print_integer)
Errors: [74.4802 11 60.1209 9 0.3037 8 20.6989 9 16.1799 10 2.5271 9 84.4366 11 7.8488 10 14.3727 7 71.5652 9 8.6727 6 31.0421 8 48.119 11 87.9142 12 51.0155 9 27.1614 10 31.9593 9 80.3495 10 22.308 9 112.7305 10 78.3119 10 17.2001 9 22.7032 11 69.6543 9 91.0518 11]
Total: 1369.7274999999997
Mean: 27.39455
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3205.7784582999934
Median total errors in population: 1371.7295000000006
Error averages by case: (142.601034699999 10.477 139.38163850000043 8.765 73.1761568999992 8.67 94.8309952999993 9.942 92.01639289999906 9.687 77.95932129999973 7.976 149.46098369999874 11.344 82.16681259999959 10.503 92.73185879999966 9.894 137.77004500000115 9.619 89.94332860000081 8.656 99.90285119999936 9.903 128.49174919999945 11.39 162.2115741000028 12.347 127.06845640000127 9.874 104.43621020000055 10.6 109.22808269999898 10.598 147.0718971 9.693 93.60670589999876 8.991 174.81572119999842 10.363 142.13992529999885 10.446 97.86585329999892 10.517 92.30336649999867 10.732 140.70807740000134 10.603 160.69441949999964 11.605)
Error minima by case: (56.0 7 50.1229 6 0.285 5 10.6969 9 0.9796 6 0.4682 5 15.3877 6 0.8468 5 6.3707 7 9.5163 6 0.6707 6 5.4626 6 38.121 6 54.0 7 35.0175 5 7.1594 8 12.9613 6 44.0 6 8.6095 7 16.429 6 4.0 5 9.1981 9 0.2948 6 61.6563 7 10.0 5)
Average genome size in population (length): 78.73
Average program size in population (points): 79.73
Average percent parens in population: 0.013
Minimum age in population: 85.22332885216285
Maximum age in population: 89.44904572143417
Average age in population: 87.51064493513866
Median age in population: 87.54999010952626
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.876
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.876
Total error diversity:				 0.173
Error (vector) diversity:			 0.197
Behavioral diversity:				 0.198
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 118482400
--- Timings ---
Current time: 1529615143553 milliseconds
Total Time:         257.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        98.3 seconds, 38.3%
Fitness Testing:    124.6 seconds, 48.5%
Report:              33.9 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
;;******************************
;; -*- Number IO problem report - generation 61
Test total error for best: 61590.62620000006
Test mean error for best: 30.79531
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.08078761   
Correct output: -141.201628771 | Program output: -81.08078761  
Correct output: 23.3844813461  | Program output: 23.08078761   
Correct output: 91.3818662575  | Program output: 112.08078761  
Correct output: 6.0991287499   | Program output: -10.08078761  
Correct output: 90.6078865723  | Program output: 88.08078761   
Correct output: -16.3558496064 | Program output: 68.08078761   
Correct output: 85.2320058807  | Program output: 93.08078761   
Correct output: -28.7080490162 | Program output: -43.08078761  
Correct output: -10.4844827466 | Program output: 61.08078761   
Correct output: -59.408072605  | Program output: -68.08078761  
Correct output: 59.1228402624  | Program output: 28.08078761   
Correct output: -132.1998002816 | Program output: -84.08078761  
Correct output: -128.9949320478 | Program output: -41.08078761  
Correct output: -78.0962956202 | Program output: -27.08078761  
Correct output: -35.919351649  | Program output: -63.08078761  
Correct output: -56.0400311694 | Program output: -24.08078761  
Correct output: 137.4302481607 | Program output: 57.08078761   
Correct output: 32.7727726522  | Program output: 55.08078761   
Correct output: -26.6497561561 | Program output: 86.08078761   
Correct output: 95.3927116996  | Program output: 17.08078761   
Correct output: -65.8806745395 | Program output: -83.08078761  
Correct output: 48.7839285535  | Program output: 26.08078761   
Correct output: 176.7350863211 | Program output: 107.08078761  
Correct output: -87.9710392115 | Program output: 3.08078761    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction in1} {:instruction integer_rot} {:instruction float_tan} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_yankdup} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_max} {:instruction print_integer})
Best program: (float_flush in1 integer_rot float_tan integer_dup integer_dup_times float_yankdup integer_dup_items -83 integer_div 53.660195741514 float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger print_float integer_mod 80 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove integer_dup_items integer_swap integer_shove print_integer float_cos print_integer float_swap 76 float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove print_integer float_cos print_integer float_swap float_dup integer_dup_items integer_swap integer_shove print_integer integer_yankdup print_integer float_swap 76 float_min print_integer integer_mult float_pop float_yankdup float_swap integer_dup integer_dup_times float_pop float_dup integer_swap integer_swap float_min float_stackdepth float_rot float_min float_stackdepth float_rot float_div float_pop float_yank float_max print_integer)
Errors: [74.4802 10 60.1208 7 0.3037 6 20.6989 10 16.1799 10 2.5271 9 84.4366 11 7.8488 10 14.3727 8 71.5653 8 8.6727 7 31.0421 11 48.119 10 87.9141 13 51.0155 10 27.1614 10 31.9592 9 80.3495 9 22.308 10 112.7305 9 78.3119 10 17.2001 9 22.7031 10 69.6543 10 91.0518 11]
Total: 1369.7271999999998
Mean: 27.394545
Genome size: 95
Size: 96
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2708.104946299995
Median total errors in population: 1369.7295000000006
Error averages by case: (122.00482349999906 10.422 121.12107650000118 8.668 51.47213119999937 8.58 72.90935640000039 9.856 73.71787070000016 9.642 55.53653819999982 7.854 128.3562344999976 11.272 60.918024199999614 10.449 75.12342979999963 9.773 116.46988250000081 9.546 71.02211200000083 8.539 78.81518279999943 9.801 110.0380862999994 11.298 144.64267260000273 12.272 108.97805500000115 9.736 86.11201229999986 10.514 90.88040859999947 10.463 127.74009710000112 9.628 71.0221226999989 8.888 154.3966923999985 10.281 122.07130769999824 10.399 80.09025129999984 10.424 71.01131879999892 10.634 119.81740920000112 10.515 142.8588499999985 11.525)
Error minima by case: (14.4822 8 29.8771 7 0.3037 6 6.6971 8 1.9796 7 0.4702 5 3.7229 7 0.1532 6 0.6293 7 9.4851 7 0.6707 5 5.4626 7 37.121 7 37.9162 8 2.9825 6 7.8406 9 1.0387 7 32.3515 7 4.1546 7 1.429 7 2.6862 6 7.1981 9 2.7052 7 28.3437 8 6.8923 6)
Average genome size in population (length): 79.295
Average program size in population (points): 80.295
Average percent parens in population: 0.013
Minimum age in population: 86.22332885216285
Maximum age in population: 90.95311793758309
Average age in population: 88.85975752137762
Median age in population: 88.85129341947822
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.859
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.859
Total error diversity:				 0.162
Error (vector) diversity:			 0.182
Behavioral diversity:				 0.182
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 120464850
--- Timings ---
Current time: 1529615147533 milliseconds
Total Time:         261.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        99.8 seconds, 38.2%
Fitness Testing:    126.6 seconds, 48.5%
Report:              34.5 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
;;******************************
;; -*- Number IO problem report - generation 62
Test total error for best: 61575.62620000006
Test mean error for best: 30.78781
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.08078762   
Correct output: -141.201628771 | Program output: -81.08078762  
Correct output: 23.3844813461  | Program output: 23.08078762   
Correct output: 91.3818662575  | Program output: 112.08078762  
Correct output: 6.0991287499   | Program output: -10.08078762  
Correct output: 90.6078865723  | Program output: 88.08078762   
Correct output: -16.3558496064 | Program output: 68.08078762   
Correct output: 85.2320058807  | Program output: 93.08078762   
Correct output: -28.7080490162 | Program output: -43.08078762  
Correct output: -10.4844827466 | Program output: 61.08078762   
Correct output: -59.408072605  | Program output: -68.08078762  
Correct output: 59.1228402624  | Program output: 28.08078762   
Correct output: -132.1998002816 | Program output: -84.08078762  
Correct output: -128.9949320478 | Program output: -41.08078762  
Correct output: -78.0962956202 | Program output: -27.08078762  
Correct output: -35.919351649  | Program output: -63.08078762  
Correct output: -56.0400311694 | Program output: -24.08078762  
Correct output: 137.4302481607 | Program output: 57.08078762   
Correct output: 32.7727726522  | Program output: 55.08078762   
Correct output: -26.6497561561 | Program output: 86.08078762   
Correct output: 95.3927116996  | Program output: 17.08078762   
Correct output: -65.8806745395 | Program output: -83.08078762  
Correct output: 48.7839285535  | Program output: 26.08078762   
Correct output: 176.7350863211 | Program output: 107.08078762  
Correct output: -87.9710392115 | Program output: 3.08078762    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction in1} {:instruction integer_rot} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction 78} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction float_dec} {:instruction float_pop} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_yank} {:instruction print_integer} {:instruction float_rot})
Best program: (float_flush in1 integer_rot float_tan 93 integer_dup_times float_yankdup integer_dup_items -83 integer_div 53.660195741514 float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger print_float integer_mod 80 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove integer_dup_items integer_swap integer_shove 78 print_integer float_cos print_integer float_swap 76 float_min print_integer float_dec float_pop float_pop float_dup integer_swap integer_swap float_min float_stackdepth float_rot float_div float_pop float_yank float_yank print_integer float_rot)
Errors: [74.4802 10 60.1208 8 0.3037 7 20.6989 9 16.1799 10 2.5271 8 84.4366 11 7.8488 10 14.3727 7 71.5653 8 8.6727 7 31.0421 10 48.119 10 87.9141 13 51.0155 9 27.1614 10 31.9592 9 80.3495 9 22.308 9 112.7305 10 78.3119 10 17.2001 9 22.7031 10 69.6543 10 91.0518 12]
Total: 1367.7271999999998
Mean: 27.354544
Genome size: 68
Size: 69
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3450.581777599995
Median total errors in population: 1369.7295000000006
Error averages by case: (151.67457939999915 10.546 150.4612035999997 8.892 82.29457279999883 8.765 104.15399849999918 9.974 103.04104579999897 9.829 87.50732299999984 8.097 157.96695329999883 11.406 91.6884824999997 10.559 103.52465549999971 9.895 146.46809190000133 9.69 100.5853110000011 8.677 108.64396579999948 9.926 139.65777170000013 11.451 173.36093160000317 12.396 138.6639295000008 9.944 114.9309711000008 10.688 121.05102099999867 10.625 156.4339339999997 9.803 102.33910069999845 9.092 183.27969959999857 10.438 150.08160229999933 10.515 108.27358349999845 10.543 101.11626549999846 10.779 148.7220440000012 10.63 169.83573999999976 11.665)
Error minima by case: (56.0 8 49.1229 7 0.2905 6 9.6969 9 0.0204 7 0.4709 5 12.0037 7 0.8468 6 4.3707 7 9.9056 7 0.3293 5 5.4626 7 37.121 7 54.0 8 5.0175 6 17.1594 7 17.0387 7 44.0 7 8.306 7 1.7098 7 4.0 6 7.1981 9 4.8763 7 59.6563 8 5.1077 6)
Average genome size in population (length): 78.667
Average program size in population (points): 79.667
Average percent parens in population: 0.013
Minimum age in population: 87.34058378486367
Maximum age in population: 92.48036238700381
Average age in population: 90.20856401600663
Median age in population: 90.23550292403186
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.868
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.868
Total error diversity:				 0.174
Error (vector) diversity:			 0.205
Behavioral diversity:				 0.207
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 122431575
--- Timings ---
Current time: 1529615151611 milliseconds
Total Time:         265.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       101.3 seconds, 38.2%
Fitness Testing:    128.7 seconds, 48.5%
Report:              35.1 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
;;******************************
;; -*- Number IO problem report - generation 63
Test total error for best: 61584.62620000006
Test mean error for best: 30.79231
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.08078765   
Correct output: -141.201628771 | Program output: -81.08078765  
Correct output: 23.3844813461  | Program output: 23.08078765   
Correct output: 91.3818662575  | Program output: 112.08078765  
Correct output: 6.0991287499   | Program output: -10.08078765  
Correct output: 90.6078865723  | Program output: 88.08078765   
Correct output: -16.3558496064 | Program output: 68.08078765   
Correct output: 85.2320058807  | Program output: 93.08078765   
Correct output: -28.7080490162 | Program output: -43.08078765  
Correct output: -10.4844827466 | Program output: 61.08078765   
Correct output: -59.408072605  | Program output: -68.08078765  
Correct output: 59.1228402624  | Program output: 28.08078765   
Correct output: -132.1998002816 | Program output: -84.08078765  
Correct output: -128.9949320478 | Program output: -41.08078765  
Correct output: -78.0962956202 | Program output: -27.08078765  
Correct output: -35.919351649  | Program output: -63.08078765  
Correct output: -56.0400311694 | Program output: -24.08078765  
Correct output: 137.4302481607 | Program output: 57.08078765   
Correct output: 32.7727726522  | Program output: 55.08078765   
Correct output: -26.6497561561 | Program output: 86.08078765   
Correct output: 95.3927116996  | Program output: 17.08078765   
Correct output: -65.8806745395 | Program output: -83.08078765  
Correct output: 48.7839285535  | Program output: 26.08078765   
Correct output: 176.7350863211 | Program output: 107.08078765  
Correct output: -87.9710392115 | Program output: 3.08078765    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 94} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_mod} {:instruction tag_integer_498} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction 14.354813298606842} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_yankdup} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_max} {:instruction print_integer})
Best program: (float_yankdup in1 float_mod float_tan 94 integer_dup_times float_yankdup integer_mod integer_mod tag_integer_498 float_rot -83 integer_div 53.660195741514 14.354813298606842 float_max float_dup_items integer_dup_times float_dup integer_rot float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger print_float integer_mod 80 float_min print_integer integer_mult float_dup integer_dup_items integer_swap float_dup integer_dup_items integer_swap integer_shove print_integer float_cos print_integer float_swap 76 float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove print_integer float_cos print_integer float_swap float_dup integer_dup_items integer_swap integer_shove print_integer integer_yankdup print_integer float_swap 76 float_min print_integer integer_mult float_pop float_yankdup float_swap integer_dup integer_dup_times float_pop float_dup integer_swap integer_swap float_min float_stackdepth float_rot float_min float_stackdepth float_rot float_div float_pop float_yank float_max print_integer)
Errors: [74.4802 9 60.1208 8 0.3037 7 20.6989 9 16.1799 10 2.5271 8 84.4366 11 7.8488 10 14.3727 8 71.5653 8 8.6727 6 31.0421 11 48.119 10 87.9141 13 51.0155 10 27.1614 10 31.9592 9 80.3495 9 22.308 9 112.7305 10 78.3119 10 17.2001 8 22.7031 9 69.6543 11 91.0518 11]
Total: 1366.7271999999998
Mean: 27.334543
Genome size: 108
Size: 109
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3280.514469499994
Median total errors in population: 1371.7275499999996
Error averages by case: (145.7231569999994 10.593 141.95554590000026 8.815 76.870597199999 8.58 96.66293849999992 10.021 96.20534769999978 9.871 80.43530589999982 8.256 151.46110459999875 11.323 84.13376079999976 10.481 96.32786919999997 9.691 140.0032741000008 9.586 93.00882540000094 8.427 103.89615939999976 9.871 131.08398209999984 11.286 165.0729815000025 12.37 130.21933910000064 9.931 107.76535930000011 10.627 112.38255759999933 10.399 150.46545259999988 9.795 95.35864689999872 9.249 176.53136949999904 10.325 146.4761290999994 10.483 100.72693149999914 10.406 96.31808609999885 10.835 144.17970220000075 10.505 163.8830462999993 11.641)
Error minima by case: (56.0 5 48.1208 4 0.3037 3 8.6969 8 0.9796 4 0.4709 4 16.4346 4 0.1512 3 6.3707 7 10.2264 4 0.6707 4 5.0441 4 36.119 4 50.9162 5 0.0175 3 19.1594 8 9.0387 4 44.0 4 9.0149 7 26.2661 4 4.0 3 0.8019 8 2.2948 4 61.6563 5 9.8923 3)
Average genome size in population (length): 78.192
Average program size in population (points): 79.192
Average percent parens in population: 0.013
Minimum age in population: 89.03065116395717
Maximum age in population: 93.64648194483262
Average age in population: 91.5920183063239
Median age in population: 91.62745876656473
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.862
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.862
Total error diversity:				 0.204
Error (vector) diversity:			 0.228
Behavioral diversity:				 0.229
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 124386450
--- Timings ---
Current time: 1529615155657 milliseconds
Total Time:         269.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       102.8 seconds, 38.2%
Fitness Testing:    130.7 seconds, 48.5%
Report:              35.6 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 64
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 64
;;******************************
;; -*- Number IO problem report - generation 64
Test total error for best: 61584.62620000006
Test mean error for best: 30.79231
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.08078765   
Correct output: -141.201628771 | Program output: -81.08078765  
Correct output: 23.3844813461  | Program output: 23.08078765   
Correct output: 91.3818662575  | Program output: 112.08078765  
Correct output: 6.0991287499   | Program output: -10.08078765  
Correct output: 90.6078865723  | Program output: 88.08078765   
Correct output: -16.3558496064 | Program output: 68.08078765   
Correct output: 85.2320058807  | Program output: 93.08078765   
Correct output: -28.7080490162 | Program output: -43.08078765  
Correct output: -10.4844827466 | Program output: 61.08078765   
Correct output: -59.408072605  | Program output: -68.08078765  
Correct output: 59.1228402624  | Program output: 28.08078765   
Correct output: -132.1998002816 | Program output: -84.08078765  
Correct output: -128.9949320478 | Program output: -41.08078765  
Correct output: -78.0962956202 | Program output: -27.08078765  
Correct output: -35.919351649  | Program output: -63.08078765  
Correct output: -56.0400311694 | Program output: -24.08078765  
Correct output: 137.4302481607 | Program output: 57.08078765   
Correct output: 32.7727726522  | Program output: 55.08078765   
Correct output: -26.6497561561 | Program output: 86.08078765   
Correct output: 95.3927116996  | Program output: 17.08078765   
Correct output: -65.8806745395 | Program output: -83.08078765  
Correct output: 48.7839285535  | Program output: 26.08078765   
Correct output: 176.7350863211 | Program output: 107.08078765  
Correct output: -87.9710392115 | Program output: 3.08078765    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 94} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_mod} {:instruction tag_integer_498} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction 14.354813298606842} {:instruction float_max} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_yankdup} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction -99} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_max} {:instruction print_integer})
Best program: (float_yankdup in1 float_mod float_tan 94 integer_dup_times float_yankdup integer_mod integer_mod tag_integer_498 float_rot -83 integer_div 53.660195741514 14.354813298606842 float_max integer_dup_times integer_dup_times float_dup integer_rot float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger print_float integer_mod 80 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove integer_dup_items integer_swap integer_shove print_integer float_cos print_integer float_swap 76 float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove print_integer float_cos print_integer float_swap float_dup integer_dup_items integer_swap integer_shove print_integer integer_yankdup print_integer float_swap 76 float_min print_integer integer_mult float_pop float_yankdup float_swap integer_dup integer_dup_times float_pop float_dup integer_swap -99 float_min float_stackdepth float_rot float_min float_stackdepth float_rot float_div float_pop float_yank float_max print_integer)
Errors: [74.4802 9 60.1208 8 0.3037 7 20.6989 9 16.1799 10 2.5271 8 84.4366 11 7.8488 10 14.3727 8 71.5653 8 8.6727 6 31.0421 11 48.119 10 87.9141 13 51.0155 10 27.1614 10 31.9592 9 80.3495 9 22.308 9 112.7305 10 78.3119 10 17.2001 8 22.7031 9 69.6543 11 91.0518 11]
Total: 1366.7271999999998
Mean: 27.334543
Genome size: 108
Size: 109
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3446.7733852999945
Median total errors in population: 1370.7275999999997
Error averages by case: (150.0976700000002 10.793 151.47959169999982 8.967 82.0233617999992 8.514 100.96805210000039 10.049 105.88119299999997 10.153 85.60077190000041 8.681 155.6079852999988 11.366 89.60767430000062 10.457 106.135872700001 9.214 144.23102660000072 9.535 102.96797120000024 8.022 108.47637600000043 9.869 140.7168778000014 11.224 174.2548761000012 12.423 139.6563830999994 9.97 117.42846459999976 10.677 122.21945539999939 10.192 154.81421539999965 9.986 100.37883269999946 9.508 180.51059600000053 10.359 150.37947799999984 10.556 110.5893093999995 10.174 100.9150234999995 10.93 147.7614419999995 10.404 170.34188469999881 11.706)
Error minima by case: (31.4824 9 47.1209 7 0.3035 5 7.6969 8 0.9796 8 0.4729 6 0.7249 9 0.1512 8 6.3707 6 6.5963 8 0.6707 5 2.0443 7 35.119 9 53.9162 10 3.0175 7 18.8386 9 14.0407 8 31.3493 7 3.692 7 9.569 8 9.688 9 4.2001 8 0.2968 9 11.3439 8 10.0 9)
Average genome size in population (length): 77.861
Average program size in population (points): 78.861
Average percent parens in population: 0.013
Minimum age in population: 90.03065116395717
Maximum age in population: 94.99893692074588
Average age in population: 93.02516344236804
Median age in population: 93.06666867050698
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 34
Genome diversity (% unique Plush genomes):	 0.83
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.83
Total error diversity:				 0.211
Error (vector) diversity:			 0.252
Behavioral diversity:				 0.256
--- Run Statistics ---
Number of program evaluations used so far: 65000
Number of point (instruction) evaluations so far: 126332975
--- Timings ---
Current time: 1529615160159 milliseconds
Total Time:         273.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       104.4 seconds, 38.2%
Fitness Testing:    132.7 seconds, 48.5%
Report:              36.2 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 65
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 65
;;******************************
;; -*- Number IO problem report - generation 65
Test total error for best: 61584.62620000006
Test mean error for best: 30.79231
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.08078765   
Correct output: -141.201628771 | Program output: -81.08078765  
Correct output: 23.3844813461  | Program output: 23.08078765   
Correct output: 91.3818662575  | Program output: 112.08078765  
Correct output: 6.0991287499   | Program output: -10.08078765  
Correct output: 90.6078865723  | Program output: 88.08078765   
Correct output: -16.3558496064 | Program output: 68.08078765   
Correct output: 85.2320058807  | Program output: 93.08078765   
Correct output: -28.7080490162 | Program output: -43.08078765  
Correct output: -10.4844827466 | Program output: 61.08078765   
Correct output: -59.408072605  | Program output: -68.08078765  
Correct output: 59.1228402624  | Program output: 28.08078765   
Correct output: -132.1998002816 | Program output: -84.08078765  
Correct output: -128.9949320478 | Program output: -41.08078765  
Correct output: -78.0962956202 | Program output: -27.08078765  
Correct output: -35.919351649  | Program output: -63.08078765  
Correct output: -56.0400311694 | Program output: -24.08078765  
Correct output: 137.4302481607 | Program output: 57.08078765   
Correct output: 32.7727726522  | Program output: 55.08078765   
Correct output: -26.6497561561 | Program output: 86.08078765   
Correct output: 95.3927116996  | Program output: 17.08078765   
Correct output: -65.8806745395 | Program output: -83.08078765  
Correct output: 48.7839285535  | Program output: 26.08078765   
Correct output: 176.7350863211 | Program output: 107.08078765  
Correct output: -87.9710392115 | Program output: 3.08078765    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 94} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_mod} {:instruction tag_integer_498} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction 14.354813298606842} {:instruction float_max} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_yankdup} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction -99} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_max} {:instruction print_integer})
Best program: (float_yankdup in1 float_mod float_tan 94 integer_dup_times float_yankdup integer_mod integer_mod tag_integer_498 float_rot -83 integer_div 53.660195741514 14.354813298606842 float_max integer_dup_times integer_dup_times float_dup integer_rot float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger print_float integer_mod 80 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove integer_dup_items integer_swap integer_shove print_integer float_cos print_integer float_swap 76 float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove print_integer float_cos print_integer float_swap float_dup integer_dup_items integer_swap integer_shove print_integer integer_yankdup print_integer float_swap 76 float_min print_integer integer_mult float_pop float_yankdup float_swap integer_dup integer_dup_times float_pop float_dup integer_swap -99 float_min float_stackdepth float_rot float_min float_stackdepth float_rot float_div float_pop float_yank float_max print_integer)
Errors: [74.4802 9 60.1208 8 0.3037 7 20.6989 9 16.1799 10 2.5271 8 84.4366 11 7.8488 10 14.3727 8 71.5653 8 8.6727 6 31.0421 11 48.119 10 87.9141 13 51.0155 10 27.1614 10 31.9592 9 80.3495 9 22.308 9 112.7305 10 78.3119 10 17.2001 8 22.7031 9 69.6543 11 91.0518 11]
Total: 1366.7271999999998
Mean: 27.334543
Genome size: 108
Size: 109
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3416.224086799995
Median total errors in population: 1370.7271999999998
Error averages by case: (151.4811099000002 10.911 146.9382531000004 9.101 82.89383249999969 8.339 102.1791812000012 10.238 101.60834430000111 10.523 86.68094490000068 9.193 156.22538409999862 11.402 90.77719730000118 10.475 101.9723409000016 8.726 144.7571104999998 9.376 98.17116729999968 7.693 109.47277650000109 10.163 136.08991740000184 11.031 169.94063949999924 12.578 135.2300065999988 10.103 112.75097189999869 10.807 117.74096679999975 9.951 156.23155109999973 10.084 101.28094410000037 10.009 180.98282440000168 10.467 151.96350520000033 10.658 105.7841384000005 9.907 101.88402180000008 10.937 149.47906009999843 10.377 168.74189699999837 11.917)
Error minima by case: (37.4802 8 49.1208 7 0.3035 6 5.3011 9 0.0204 7 0.4709 7 9.7249 9 0.1512 8 0.3485 6 8.9056 7 1.6727 4 3.9579 7 37.119 8 54.9142 9 4.0155 8 7.5598 8 6.0408 8 31.3495 8 8.674 7 0.569 7 9.312 9 3.7999 8 2.2968 8 57.6543 8 13.8903 9)
Average genome size in population (length): 80.707
Average program size in population (points): 81.707
Average percent parens in population: 0.013
Minimum age in population: 91.88816309605932
Maximum age in population: 96.5867143149708
Average age in population: 94.40146773180201
Median age in population: 94.43723613969772
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 33
Genome diversity (% unique Plush genomes):	 0.799
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.799
Total error diversity:				 0.228
Error (vector) diversity:			 0.266
Behavioral diversity:				 0.267
--- Run Statistics ---
Number of program evaluations used so far: 66000
Number of point (instruction) evaluations so far: 128350650
--- Timings ---
Current time: 1529615165029 milliseconds
Total Time:         278.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       105.9 seconds, 38.1%
Fitness Testing:    135.2 seconds, 48.6%
Report:              37.0 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 65
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 66
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 66
;;******************************
;; -*- Number IO problem report - generation 66
Test total error for best: 61584.62620000006
Test mean error for best: 30.79231
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.08078765   
Correct output: -141.201628771 | Program output: -81.08078765  
Correct output: 23.3844813461  | Program output: 23.08078765   
Correct output: 91.3818662575  | Program output: 112.08078765  
Correct output: 6.0991287499   | Program output: -10.08078765  
Correct output: 90.6078865723  | Program output: 88.08078765   
Correct output: -16.3558496064 | Program output: 68.08078765   
Correct output: 85.2320058807  | Program output: 93.08078765   
Correct output: -28.7080490162 | Program output: -43.08078765  
Correct output: -10.4844827466 | Program output: 61.08078765   
Correct output: -59.408072605  | Program output: -68.08078765  
Correct output: 59.1228402624  | Program output: 28.08078765   
Correct output: -132.1998002816 | Program output: -84.08078765  
Correct output: -128.9949320478 | Program output: -41.08078765  
Correct output: -78.0962956202 | Program output: -27.08078765  
Correct output: -35.919351649  | Program output: -63.08078765  
Correct output: -56.0400311694 | Program output: -24.08078765  
Correct output: 137.4302481607 | Program output: 57.08078765   
Correct output: 32.7727726522  | Program output: 55.08078765   
Correct output: -26.6497561561 | Program output: 86.08078765   
Correct output: 95.3927116996  | Program output: 17.08078765   
Correct output: -65.8806745395 | Program output: -83.08078765  
Correct output: 48.7839285535  | Program output: 26.08078765   
Correct output: 176.7350863211 | Program output: 107.08078765  
Correct output: -87.9710392115 | Program output: 3.08078765    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 94} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_mod} {:instruction tag_integer_498} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction 14.354813298606842} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction float_swap} {:instruction integer_div} {:instruction 53.660195741514} {:instruction 14.354813298606842} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_yankdup} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_max} {:instruction print_integer})
Best program: (float_yankdup in1 float_mod float_tan 94 integer_dup_times float_yankdup integer_mod integer_mod tag_integer_498 float_rot -83 integer_div 53.660195741514 14.354813298606842 float_max float_dup_items integer_dup_times integer_yankdup integer_rot float_swap integer_div 53.660195741514 14.354813298606842 float_max float_dup_items integer_dup_times float_dup integer_rot float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger print_float integer_mod 80 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove integer_dup_items integer_swap integer_shove print_integer float_cos print_integer float_swap 76 float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove print_integer float_cos print_integer float_swap float_dup integer_dup_items integer_swap integer_shove print_integer integer_yankdup print_integer float_swap 76 float_min print_integer integer_mult float_pop float_yankdup float_swap integer_dup integer_dup_times float_pop float_dup integer_swap integer_swap float_min float_stackdepth float_rot float_min float_stackdepth float_rot float_div float_pop float_yank float_max print_integer)
Errors: [74.4802 9 60.1208 8 0.3037 7 20.6989 9 16.1799 10 2.5271 8 84.4366 11 7.8488 10 14.3727 8 71.5653 8 8.6727 6 31.0421 11 48.119 10 87.9141 13 51.0155 10 27.1614 10 31.9592 9 80.3495 9 22.308 9 112.7305 10 78.3119 10 17.2001 8 22.7031 9 69.6543 11 91.0518 11]
Total: 1366.7271999999998
Mean: 27.334543
Genome size: 117
Size: 118
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3360.833116600002
Median total errors in population: 1369.7274999999997
Error averages by case: (150.04247250000068 10.784 143.9179231000008 8.977 80.8764860999997 8.102 100.58838320000136 10.31 98.79176690000112 10.631 85.06598180000059 9.207 154.32700699999916 11.457 89.07875510000103 10.519 98.69900790000165 8.657 142.92103630000025 9.129 95.34491739999953 7.769 107.85393640000123 10.667 133.0813067000018 10.854 167.08835619999837 12.83 132.44998159999855 10.194 110.11947059999883 10.886 114.96928169999929 9.917 154.76423159999936 10.005 99.48209360000054 10.191 179.25335990000215 10.519 150.23917480000046 10.7 102.99071910000059 9.871 100.14465179999958 10.768 147.78954259999813 10.61 165.3032726999986 12.096)
Error minima by case: (51.4802 8 52.1208 6 0.3027 6 12.3011 9 0.0183 8 0.4729 7 3.2771 9 0.1512 8 2.3727 6 2.5943 7 0.3273 5 5.4626 7 40.119 8 45.9141 9 2.9845 8 15.1614 9 6.0408 8 39.3495 8 1.692 8 13.571 8 0.6881 9 3.7999 8 2.7031 9 57.6543 8 4.8903 9)
Average genome size in population (length): 85.192
Average program size in population (points): 86.192
Average percent parens in population: 0.012
Minimum age in population: 93.2367301092046
Maximum age in population: 97.61481798979085
Average age in population: 95.755659636016
Median age in population: 95.82819230562012
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 29
Genome diversity (% unique Plush genomes):	 0.823
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.823
Total error diversity:				 0.221
Error (vector) diversity:			 0.265
Behavioral diversity:				 0.269
--- Run Statistics ---
Number of program evaluations used so far: 67000
Number of point (instruction) evaluations so far: 130480450
--- Timings ---
Current time: 1529615169283 milliseconds
Total Time:         282.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       107.4 seconds, 38.0%
Fitness Testing:    137.4 seconds, 48.6%
Report:              37.9 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 66
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 67
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 67
;;******************************
;; -*- Number IO problem report - generation 67
Test total error for best: 61584.62620000006
Test mean error for best: 30.79231
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.08078765   
Correct output: -141.201628771 | Program output: -81.08078765  
Correct output: 23.3844813461  | Program output: 23.08078765   
Correct output: 91.3818662575  | Program output: 112.08078765  
Correct output: 6.0991287499   | Program output: -10.08078765  
Correct output: 90.6078865723  | Program output: 88.08078765   
Correct output: -16.3558496064 | Program output: 68.08078765   
Correct output: 85.2320058807  | Program output: 93.08078765   
Correct output: -28.7080490162 | Program output: -43.08078765  
Correct output: -10.4844827466 | Program output: 61.08078765   
Correct output: -59.408072605  | Program output: -68.08078765  
Correct output: 59.1228402624  | Program output: 28.08078765   
Correct output: -132.1998002816 | Program output: -84.08078765  
Correct output: -128.9949320478 | Program output: -41.08078765  
Correct output: -78.0962956202 | Program output: -27.08078765  
Correct output: -35.919351649  | Program output: -63.08078765  
Correct output: -56.0400311694 | Program output: -24.08078765  
Correct output: 137.4302481607 | Program output: 57.08078765   
Correct output: 32.7727726522  | Program output: 55.08078765   
Correct output: -26.6497561561 | Program output: 86.08078765   
Correct output: 95.3927116996  | Program output: 17.08078765   
Correct output: -65.8806745395 | Program output: -83.08078765  
Correct output: 48.7839285535  | Program output: 26.08078765   
Correct output: 176.7350863211 | Program output: 107.08078765  
Correct output: -87.9710392115 | Program output: 3.08078765    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 94} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_mod} {:instruction tag_integer_498} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction 14.354813298606842} {:instruction float_max} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_yankdup} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction -99} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_max} {:instruction print_integer})
Best program: (float_yankdup in1 float_mod float_tan 94 integer_dup_times float_yankdup integer_mod integer_mod tag_integer_498 float_rot -83 integer_div 53.660195741514 14.354813298606842 float_max integer_dup_times integer_dup_times float_dup integer_rot float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger print_float integer_mod 80 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove integer_dup_items integer_swap integer_shove print_integer float_cos print_integer float_swap 76 float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove print_integer float_cos print_integer float_swap float_dup integer_dup_items integer_swap integer_shove print_integer integer_yankdup print_integer float_swap 76 float_min print_integer integer_mult float_pop float_yankdup float_swap integer_dup integer_dup_times float_pop float_dup integer_swap -99 float_min float_stackdepth float_rot float_min float_stackdepth float_rot float_div float_pop float_yank float_max print_integer)
Errors: [74.4802 9 60.1208 8 0.3037 7 20.6989 9 16.1799 10 2.5271 8 84.4366 11 7.8488 10 14.3727 8 71.5653 8 8.6727 6 31.0421 11 48.119 10 87.9141 13 51.0155 10 27.1614 10 31.9592 9 80.3495 9 22.308 9 112.7305 10 78.3119 10 17.2001 8 22.7031 9 69.6543 11 91.0518 11]
Total: 1366.7271999999998
Mean: 27.334543
Genome size: 108
Size: 109
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3016.775919499999
Median total errors in population: 1369.7271999999998
Error averages by case: (137.15219940000176 10.601 127.70204210000098 8.913 66.99316149999876 7.977 91.75657940000148 10.196 81.03599170000115 10.601 71.1323034999997 9.029 143.63738209999977 11.467 76.33201760000048 10.535 83.50104540000112 8.547 132.09105940000106 9.018 76.66825480000048 7.788 94.57250420000103 10.803 116.64172390000186 10.732 151.62312429999804 12.941 116.44220489999833 10.161 95.07080779999866 10.825 98.76629419999885 9.847 144.76842399999884 9.908 88.03054560000011 10.154 168.93884350000238 10.601 138.11992730000046 10.703 85.43247970000061 9.755 86.74114009999934 10.606 137.37783249999794 10.698 151.61803059999912 12.224)
Error minima by case: (52.4801 9 48.1208 7 0.3027 6 8.6989 8 1.0184 8 0.4729 5 12.0037 9 0.1512 8 0.3485 6 9.4851 7 1.3273 5 5.4626 8 36.119 8 51.9141 9 1.0155 8 7.5598 8 14.0407 7 40.3493 8 9.674 8 1.7098 9 0.3118 9 4.2001 8 0.2969 8 59.6543 8 10.8903 9)
Average genome size in population (length): 86.081
Average program size in population (points): 87.081
Average percent parens in population: 0.012
Minimum age in population: 94.2367301092046
Maximum age in population: 99.24250485889787
Average age in population: 97.18778765698048
Median age in population: 97.2347882274465
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 39
Genome diversity (% unique Plush genomes):	 0.806
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.806
Total error diversity:				 0.207
Error (vector) diversity:			 0.259
Behavioral diversity:				 0.259
--- Run Statistics ---
Number of program evaluations used so far: 68000
Number of point (instruction) evaluations so far: 132632475
--- Timings ---
Current time: 1529615173909 milliseconds
Total Time:         287.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       108.9 seconds, 37.9%
Fitness Testing:    139.8 seconds, 48.7%
Report:              38.5 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 67
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 68
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 68
;;******************************
;; -*- Number IO problem report - generation 68
Test total error for best: 61584.62620000006
Test mean error for best: 30.79231
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.08078765   
Correct output: -141.201628771 | Program output: -81.08078765  
Correct output: 23.3844813461  | Program output: 23.08078765   
Correct output: 91.3818662575  | Program output: 112.08078765  
Correct output: 6.0991287499   | Program output: -10.08078765  
Correct output: 90.6078865723  | Program output: 88.08078765   
Correct output: -16.3558496064 | Program output: 68.08078765   
Correct output: 85.2320058807  | Program output: 93.08078765   
Correct output: -28.7080490162 | Program output: -43.08078765  
Correct output: -10.4844827466 | Program output: 61.08078765   
Correct output: -59.408072605  | Program output: -68.08078765  
Correct output: 59.1228402624  | Program output: 28.08078765   
Correct output: -132.1998002816 | Program output: -84.08078765  
Correct output: -128.9949320478 | Program output: -41.08078765  
Correct output: -78.0962956202 | Program output: -27.08078765  
Correct output: -35.919351649  | Program output: -63.08078765  
Correct output: -56.0400311694 | Program output: -24.08078765  
Correct output: 137.4302481607 | Program output: 57.08078765   
Correct output: 32.7727726522  | Program output: 55.08078765   
Correct output: -26.6497561561 | Program output: 86.08078765   
Correct output: 95.3927116996  | Program output: 17.08078765   
Correct output: -65.8806745395 | Program output: -83.08078765  
Correct output: 48.7839285535  | Program output: 26.08078765   
Correct output: 176.7350863211 | Program output: 107.08078765  
Correct output: -87.9710392115 | Program output: 3.08078765    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction in1} {:instruction integer_rot} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction float_swap} {:instruction integer_rot} {:instruction float_tan} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 40.47734037109022} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_dup_items} {:instruction print_integer} {:instruction in1} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_max} {:instruction print_integer})
Best program: (float_flush in1 integer_rot float_tan 93 integer_dup_times float_yankdup integer_dup_items -83 integer_div 53.660195741514 float_swap integer_rot float_tan integer_dup integer_dup_times float_yankdup integer_dup_items -83 integer_div 53.660195741514 float_swap float_yankdup float_tan 40.47734037109022 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger print_float integer_mod 80 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove integer_dup_items integer_swap integer_shove print_integer float_cos print_integer float_swap 76 float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove print_integer float_cos print_integer float_swap float_dup integer_dup_items integer_swap float_dup_items print_integer in1 print_integer float_swap 76 float_min print_integer integer_mult float_pop float_yankdup float_swap integer_dup integer_dup_times float_pop float_dup integer_swap integer_swap float_min float_stackdepth float_rot float_min float_stackdepth float_rot float_div float_pop float_yank float_max print_integer)
Errors: [74.4802 9 60.1208 8 0.3037 7 20.6989 9 16.1799 10 2.5271 8 84.4366 11 7.8488 10 14.3727 8 71.5653 8 8.6727 6 31.0421 11 48.119 10 87.9141 13 51.0155 10 27.1614 10 31.9592 9 80.3495 9 22.308 9 112.7305 10 78.3119 10 17.2001 8 22.7031 9 69.6543 11 91.0518 11]
Total: 1366.7271999999998
Mean: 27.334543
Genome size: 105
Size: 106
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3647.295953899997
Median total errors in population: 1369.7271999999998
Error averages by case: (158.91401099999993 10.616 157.4756413000017 9.01 91.30010510000042 8.097 111.15859740000174 10.228 110.91033290000146 10.651 94.94343980000171 9.075 164.68271319999778 11.506 98.96892880000223 10.595 112.73388030000284 8.694 154.40591859999915 9.046 108.37677289999885 7.816 117.75663320000217 10.95 146.77322260000287 10.816 180.2047702999977 13.04 145.8765240999991 10.278 122.90966239999838 10.897 128.68991199999857 9.933 163.6018016000007 9.945 110.56016990000136 10.158 189.19930740000274 10.669 158.86510830000032 10.722 116.84970850000092 9.763 111.1844151999993 10.585 156.52452849999744 10.89 178.21884859999707 12.231)
Error minima by case: (39.4802 8 48.1208 7 0.3036 6 2.6969 8 0.9817 8 0.4729 6 12.0037 9 0.8488 7 0.3485 7 9.8309 7 1.3273 5 5.4626 8 36.119 8 46.1446 9 0.0155 7 7.5598 8 9.0408 7 33.3495 8 8.674 8 1.7098 8 0.3376 9 0.7999 7 0.7031 8 57.6543 8 5.1207 9)
Average genome size in population (length): 89.012
Average program size in population (points): 90.012
Average percent parens in population: 0.011
Minimum age in population: 95.87776437026122
Maximum age in population: 100.576639475736
Average age in population: 98.58078466927385
Median age in population: 98.58914794298875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 36
Genome diversity (% unique Plush genomes):	 0.8
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.8
Total error diversity:				 0.23
Error (vector) diversity:			 0.28
Behavioral diversity:				 0.281
--- Run Statistics ---
Number of program evaluations used so far: 69000
Number of point (instruction) evaluations so far: 134857800
--- Timings ---
Current time: 1529615178286 milliseconds
Total Time:         291.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       110.4 seconds, 37.8%
Fitness Testing:    142.1 seconds, 48.7%
Report:              39.2 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 68
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 69
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 69
;;******************************
;; -*- Number IO problem report - generation 69
Test total error for best: 61584.62620000006
Test mean error for best: 30.79231
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.08078765   
Correct output: -141.201628771 | Program output: -81.08078765  
Correct output: 23.3844813461  | Program output: 23.08078765   
Correct output: 91.3818662575  | Program output: 112.08078765  
Correct output: 6.0991287499   | Program output: -10.08078765  
Correct output: 90.6078865723  | Program output: 88.08078765   
Correct output: -16.3558496064 | Program output: 68.08078765   
Correct output: 85.2320058807  | Program output: 93.08078765   
Correct output: -28.7080490162 | Program output: -43.08078765  
Correct output: -10.4844827466 | Program output: 61.08078765   
Correct output: -59.408072605  | Program output: -68.08078765  
Correct output: 59.1228402624  | Program output: 28.08078765   
Correct output: -132.1998002816 | Program output: -84.08078765  
Correct output: -128.9949320478 | Program output: -41.08078765  
Correct output: -78.0962956202 | Program output: -27.08078765  
Correct output: -35.919351649  | Program output: -63.08078765  
Correct output: -56.0400311694 | Program output: -24.08078765  
Correct output: 137.4302481607 | Program output: 57.08078765   
Correct output: 32.7727726522  | Program output: 55.08078765   
Correct output: -26.6497561561 | Program output: 86.08078765   
Correct output: 95.3927116996  | Program output: 17.08078765   
Correct output: -65.8806745395 | Program output: -83.08078765  
Correct output: 48.7839285535  | Program output: 26.08078765   
Correct output: 176.7350863211 | Program output: 107.08078765  
Correct output: -87.9710392115 | Program output: 3.08078765    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction in1} {:instruction integer_rot} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction float_swap} {:instruction integer_rot} {:instruction float_tan} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction in1} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_max} {:instruction print_integer})
Best program: (float_flush in1 integer_rot float_tan 93 integer_dup_times float_yankdup integer_dup_items -83 integer_div 53.660195741514 float_swap integer_rot float_tan integer_dup integer_dup_times float_yankdup integer_dup_items -83 integer_div 53.660195741514 float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger print_float integer_mod 80 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove integer_dup_items integer_swap integer_shove print_integer float_cos print_integer float_swap 76 float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove print_integer float_cos print_integer float_swap float_dup integer_dup_items integer_swap integer_shove print_integer in1 print_integer float_swap 76 float_min print_integer integer_mult float_pop float_yankdup float_swap integer_dup integer_dup_times float_pop float_dup integer_swap integer_swap float_min float_stackdepth float_rot float_min float_stackdepth float_rot float_div float_pop float_yank float_max print_integer)
Errors: [74.4802 9 60.1208 8 0.3037 7 20.6989 9 16.1799 10 2.5271 8 84.4366 11 7.8488 10 14.3727 8 71.5653 8 8.6727 6 31.0421 11 48.119 10 87.9141 13 51.0155 10 27.1614 10 31.9592 9 80.3495 9 22.308 9 112.7305 10 78.3119 10 17.2001 8 22.7031 9 69.6543 11 91.0518 11]
Total: 1366.7271999999998
Mean: 27.334543
Genome size: 105
Size: 106
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4218.978116199996
Median total errors in population: 1369.7271999999998
Error averages by case: (182.29131449999934 10.5 177.87776060000172 9.093 115.63243370000082 8.121 136.70080070000105 10.269 134.110812700001 10.727 119.78002140000204 9.133 186.25758899999727 11.536 124.74606340000248 10.7 136.4553637000027 8.892 175.34912649999845 9.039 131.07375229999886 7.848 141.7601903000007 11.167 167.46137040000264 10.886 200.1511369999975 13.061 166.8333512000001 10.486 146.32168950000013 10.975 150.08539660000002 9.998 188.69487750000113 9.979 133.64211950000097 10.176 210.1475770000027 10.674 182.82164250000045 10.738 139.37635829999994 9.696 134.2994493999996 10.515 180.93573089999742 11.123 198.6431875999968 12.197)
Error minima by case: (63.4802 7 50.1208 7 0.3035 6 10.6989 8 0.0183 7 0.4729 6 12.0037 9 0.1512 8 0.3485 6 7.866 6 0.3273 4 5.4626 8 38.119 9 45.9141 9 0.0155 8 7.5598 9 10.0408 8 69.3495 8 8.674 8 1.7098 8 41.7325 8 0.2001 8 4.8763 8 58.6543 8 4.8903 9)
Average genome size in population (length): 94.889
Average program size in population (points): 95.889
Average percent parens in population: 0.011
Minimum age in population: 97.19417783280029
Maximum age in population: 102.3105790807395
Average age in population: 99.98238566622526
Median age in population: 100.0236232273703
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 38
Genome diversity (% unique Plush genomes):	 0.842
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 38
Syntactic diversity (% unique Push programs):	 0.842
Total error diversity:				 0.205
Error (vector) diversity:			 0.275
Behavioral diversity:				 0.275
--- Run Statistics ---
Number of program evaluations used so far: 70000
Number of point (instruction) evaluations so far: 137230050
--- Timings ---
Current time: 1529615182880 milliseconds
Total Time:         296.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       111.9 seconds, 37.7%
Fitness Testing:    144.6 seconds, 48.8%
Report:              39.8 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 69
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 70
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 70
;;******************************
;; -*- Number IO problem report - generation 70
Test total error for best: 61440.625900000035
Test mean error for best: 30.72031
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.0807816    
Correct output: -141.201628771 | Program output: -81.0807816   
Correct output: 23.3844813461  | Program output: 23.0807816    
Correct output: 91.3818662575  | Program output: 112.0807816   
Correct output: 6.0991287499   | Program output: -10.0807816   
Correct output: 90.6078865723  | Program output: 88.0807816    
Correct output: -16.3558496064 | Program output: 68.0807816    
Correct output: 85.2320058807  | Program output: 93.0807816    
Correct output: -28.7080490162 | Program output: -43.0807816   
Correct output: -10.4844827466 | Program output: 61.0807816    
Correct output: -59.408072605  | Program output: -68.0807816   
Correct output: 59.1228402624  | Program output: 28.0807816    
Correct output: -132.1998002816 | Program output: -84.0807816   
Correct output: -128.9949320478 | Program output: -41.0807816   
Correct output: -78.0962956202 | Program output: -27.0807816   
Correct output: -35.919351649  | Program output: -63.0807816   
Correct output: -56.0400311694 | Program output: -24.0807816   
Correct output: 137.4302481607 | Program output: 57.0807816    
Correct output: 32.7727726522  | Program output: 55.0807816    
Correct output: -26.6497561561 | Program output: 86.0807816    
Correct output: 95.3927116996  | Program output: 17.0807816    
Correct output: -65.8806745395 | Program output: -83.0807816   
Correct output: 48.7839285535  | Program output: 26.0807816    
Correct output: 176.7350863211 | Program output: 107.0807816   
Correct output: -87.9710392115 | Program output: 3.0807816     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_integer} {:instruction in1} {:instruction integer_rot} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_yankdup} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction -99} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_cos} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_max} {:instruction print_integer})
Best program: (print_integer in1 integer_rot float_tan 93 integer_dup_times float_yankdup integer_dup_items -83 integer_div 53.660195741514 float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger print_float integer_mod 80 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove integer_dup_items integer_swap integer_shove print_integer float_cos print_integer float_swap 76 float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove print_integer float_cos print_integer float_swap float_dup integer_dup_items integer_swap integer_shove print_integer integer_yankdup print_integer float_swap 76 integer_stackdepth print_integer integer_mult float_pop float_yankdup float_swap integer_dup integer_dup_times float_pop float_dup integer_swap -99 float_min float_stackdepth float_rot float_min float_stackdepth float_cos float_rot float_div float_pop float_yank float_max print_integer)
Errors: [74.4802 10 60.1208 9 0.3037 6 20.6989 10 16.1799 10 2.5271 9 84.4366 11 7.8488 10 14.3727 7 71.5653 9 8.6727 7 31.0421 10 48.119 8 87.9142 12 51.0155 10 27.1614 9 31.9592 8 80.3495 8 22.308 10 112.7305 9 78.3119 9 17.2001 9 22.7031 10 69.6543 9 91.0518 11]
Total: 1362.7272999999996
Mean: 27.254545
Genome size: 111
Size: 112
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3809.1586781999977
Median total errors in population: 1369.7271999999998
Error averages by case: (166.87574829999917 10.365 161.30914630000152 9.093 98.95583340000057 8.089 118.23749690000176 10.217 118.58651010000155 10.744 102.84579420000175 9.127 171.36384909999742 11.462 106.93552940000217 10.654 117.89520420000262 8.914 160.17551009999875 8.974 114.12195879999899 7.63 125.77304610000195 11.223 150.67852450000254 10.896 184.4397373999976 13.081 150.71365379999992 10.581 129.04357149999848 10.87 133.67359979999878 9.848 171.62692910000098 9.954 117.4945246000011 10.181 195.89971850000248 10.694 167.9402082000004 10.695 121.60519000000087 9.487 118.1910782999992 10.392 164.25500129999782 11.274 183.94831429999704 12.128)
Error minima by case: (61.4802 8 51.1208 7 0.3035 6 11.6989 9 1.0183 8 0.4729 6 12.0037 8 0.1511 7 0.3485 6 10.7432 6 0.6727 5 5.3577 7 39.119 8 49.9141 10 0.9845 8 7.5598 8 15.0407 7 67.3495 8 9.674 8 1.7098 9 30.9122 8 4.2001 7 2.2969 8 56.6543 9 8.8903 9)
Average genome size in population (length): 101.23
Average program size in population (points): 102.23
Average percent parens in population: 0.010
Minimum age in population: 98.90887868284307
Maximum age in population: 103.3854096903577
Average age in population: 101.3314030162888
Median age in population: 101.3580080595919
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 44
Genome diversity (% unique Plush genomes):	 0.846
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 44
Syntactic diversity (% unique Push programs):	 0.846
Total error diversity:				 0.203
Error (vector) diversity:			 0.263
Behavioral diversity:				 0.263
--- Run Statistics ---
Number of program evaluations used so far: 71000
Number of point (instruction) evaluations so far: 139760800
--- Timings ---
Current time: 1529615187831 milliseconds
Total Time:         301.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       113.3 seconds, 37.6%
Fitness Testing:    147.2 seconds, 48.9%
Report:              40.4 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 70
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 71
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 71
;;******************************
;; -*- Number IO problem report - generation 71
Test total error for best: 61440.625900000035
Test mean error for best: 30.72031
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.0807816    
Correct output: -141.201628771 | Program output: -81.0807816   
Correct output: 23.3844813461  | Program output: 23.0807816    
Correct output: 91.3818662575  | Program output: 112.0807816   
Correct output: 6.0991287499   | Program output: -10.0807816   
Correct output: 90.6078865723  | Program output: 88.0807816    
Correct output: -16.3558496064 | Program output: 68.0807816    
Correct output: 85.2320058807  | Program output: 93.0807816    
Correct output: -28.7080490162 | Program output: -43.0807816   
Correct output: -10.4844827466 | Program output: 61.0807816    
Correct output: -59.408072605  | Program output: -68.0807816   
Correct output: 59.1228402624  | Program output: 28.0807816    
Correct output: -132.1998002816 | Program output: -84.0807816   
Correct output: -128.9949320478 | Program output: -41.0807816   
Correct output: -78.0962956202 | Program output: -27.0807816   
Correct output: -35.919351649  | Program output: -63.0807816   
Correct output: -56.0400311694 | Program output: -24.0807816   
Correct output: 137.4302481607 | Program output: 57.0807816    
Correct output: 32.7727726522  | Program output: 55.0807816    
Correct output: -26.6497561561 | Program output: 86.0807816    
Correct output: 95.3927116996  | Program output: 17.0807816    
Correct output: -65.8806745395 | Program output: -83.0807816   
Correct output: 48.7839285535  | Program output: 26.0807816    
Correct output: 176.7350863211 | Program output: 107.0807816   
Correct output: -87.9710392115 | Program output: 3.0807816     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_integer} {:instruction in1} {:instruction integer_rot} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_yankdup} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction -99} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_cos} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_max} {:instruction print_integer})
Best program: (print_integer in1 integer_rot float_tan 93 integer_dup_times float_yankdup integer_dup_items -83 integer_div 53.660195741514 float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger print_float integer_mod 80 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove integer_dup_items integer_swap integer_shove print_integer float_cos print_integer float_swap 76 float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove print_integer float_cos print_integer float_swap float_dup integer_dup_items integer_swap integer_shove print_integer integer_yankdup print_integer float_swap 76 integer_stackdepth print_integer integer_mult float_pop float_yankdup float_swap integer_dup integer_dup_times float_pop float_dup integer_swap -99 float_min float_stackdepth float_rot float_min float_stackdepth float_cos float_rot float_div float_pop float_yank float_max print_integer)
Errors: [74.4802 10 60.1208 9 0.3037 6 20.6989 10 16.1799 10 2.5271 9 84.4366 11 7.8488 10 14.3727 7 71.5653 9 8.6727 7 31.0421 10 48.119 8 87.9142 12 51.0155 10 27.1614 9 31.9592 8 80.3495 8 22.308 10 112.7305 9 78.3119 9 17.2001 9 22.7031 10 69.6543 9 91.0518 11]
Total: 1362.7272999999996
Mean: 27.254545
Genome size: 111
Size: 112
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3889.320024899997
Median total errors in population: 1369.7271999999998
Error averages by case: (169.32799760000046 10.317 165.07713830000168 9.173 101.86481319999977 8.193 124.87234600000173 10.265 120.0956142000014 10.722 105.59478850000096 9.158 174.66751539999828 11.486 110.88106270000172 10.706 120.95889150000198 9.005 163.5850793999995 9.007 116.62204239999942 7.618 127.88950150000144 11.314 154.55183740000263 10.929 187.81999779999754 13.107 154.12965569999906 10.689 131.26554649999858 10.889 136.88674849999907 9.895 175.44299250000023 10.014 120.95554650000075 10.188 198.93860570000277 10.738 169.95491950000036 10.7 125.2327022000008 9.479 120.32464989999924 10.347 168.4964541999975 11.346 186.48557779999794 12.113)
Error minima by case: (25.5198 8 47.1208 7 0.3027 6 7.6989 8 0.0183 7 0.4729 6 12.0037 8 1.1512 8 0.3485 7 9.4851 7 0.3273 4 4.4626 8 35.119 8 47.9142 9 2.9845 8 7.5598 8 8.4151 7 19.6505 8 9.308 8 1.7098 9 21.6881 8 7.2001 7 1.2969 8 60.6543 9 6.8903 9)
Average genome size in population (length): 104.176
Average program size in population (points): 105.176
Average percent parens in population: 0.010
Minimum age in population: 100.2641094658618
Maximum age in population: 104.8003611167026
Average age in population: 102.7260679189661
Median age in population: 102.7820627791721
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.897
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.897
Total error diversity:				 0.2
Error (vector) diversity:			 0.26
Behavioral diversity:				 0.26
--- Run Statistics ---
Number of program evaluations used so far: 72000
Number of point (instruction) evaluations so far: 142365200
--- Timings ---
Current time: 1529615192585 milliseconds
Total Time:         306.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       114.8 seconds, 37.5%
Fitness Testing:    149.8 seconds, 49.0%
Report:              41.3 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 71
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 72
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 72
;;******************************
;; -*- Number IO problem report - generation 72
Test total error for best: 61440.625900000035
Test mean error for best: 30.72031
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.0807816    
Correct output: -141.201628771 | Program output: -81.0807816   
Correct output: 23.3844813461  | Program output: 23.0807816    
Correct output: 91.3818662575  | Program output: 112.0807816   
Correct output: 6.0991287499   | Program output: -10.0807816   
Correct output: 90.6078865723  | Program output: 88.0807816    
Correct output: -16.3558496064 | Program output: 68.0807816    
Correct output: 85.2320058807  | Program output: 93.0807816    
Correct output: -28.7080490162 | Program output: -43.0807816   
Correct output: -10.4844827466 | Program output: 61.0807816    
Correct output: -59.408072605  | Program output: -68.0807816   
Correct output: 59.1228402624  | Program output: 28.0807816    
Correct output: -132.1998002816 | Program output: -84.0807816   
Correct output: -128.9949320478 | Program output: -41.0807816   
Correct output: -78.0962956202 | Program output: -27.0807816   
Correct output: -35.919351649  | Program output: -63.0807816   
Correct output: -56.0400311694 | Program output: -24.0807816   
Correct output: 137.4302481607 | Program output: 57.0807816    
Correct output: 32.7727726522  | Program output: 55.0807816    
Correct output: -26.6497561561 | Program output: 86.0807816    
Correct output: 95.3927116996  | Program output: 17.0807816    
Correct output: -65.8806745395 | Program output: -83.0807816   
Correct output: 48.7839285535  | Program output: 26.0807816    
Correct output: 176.7350863211 | Program output: 107.0807816   
Correct output: -87.9710392115 | Program output: 3.0807816     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 94} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_mod} {:instruction tag_integer_498} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction 14.354813298606842} {:instruction float_max} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction integer_inc} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_yankdup} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction -99} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction -100} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_max} {:instruction print_integer})
Best program: (float_yankdup in1 float_mod float_tan 94 integer_dup_times float_yankdup integer_mod integer_mod tag_integer_498 float_rot -83 integer_div 53.660195741514 14.354813298606842 float_max integer_dup_times integer_dup_times float_dup integer_rot float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup float_tan 42.446747745532946 integer_inc float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger print_float integer_mod 80 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove integer_dup_items integer_swap integer_shove print_integer float_cos print_integer float_swap 76 float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove print_integer float_cos print_integer float_swap float_dup integer_dup_items integer_swap integer_shove print_integer integer_yankdup print_integer float_swap 76 integer_stackdepth print_integer integer_mult float_pop float_yankdup float_swap integer_dup integer_dup_times float_pop float_dup integer_swap -99 float_min float_stackdepth float_rot float_pop float_dup integer_swap -100 float_min float_stackdepth float_rot float_min float_stackdepth float_rot float_div float_pop float_yank float_max print_integer)
Errors: [74.4802 10 60.1208 9 0.3037 6 20.6989 10 16.1799 10 2.5271 9 84.4366 11 7.8488 10 14.3727 7 71.5653 9 8.6727 7 31.0421 10 48.119 8 87.9142 12 51.0155 10 27.1614 9 31.9592 8 80.3495 8 22.308 10 112.7305 9 78.3119 9 17.2001 9 22.7031 10 69.6543 9 91.0518 11]
Total: 1362.7272999999996
Mean: 27.254545
Genome size: 115
Size: 116
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3805.8533959999977
Median total errors in population: 1369.7271999999998
Error averages by case: (167.28153299999974 10.315 160.34126100000142 9.155 100.82614440000049 8.183 118.92347920000165 10.304 117.18450970000136 10.724 103.69775880000152 9.164 171.91396209999783 11.459 107.69529580000206 10.681 117.02867800000254 8.996 160.7478801999988 8.998 112.68101479999893 7.596 126.09182670000177 11.266 150.6616653000024 10.873 183.20797379999766 13.05 149.29321969999924 10.678 128.2120770999985 10.823 132.10711199999878 9.819 171.94189480000074 9.987 118.01869760000116 10.223 196.35443210000255 10.728 167.92437850000042 10.669 120.20119920000076 9.473 118.53313209999932 10.39 164.91685179999766 11.347 183.0684182999972 12.098)
Error minima by case: (56.0 8 47.1208 7 0.3037 6 7.6989 8 2.9817 8 0.4729 6 12.0037 9 0.1512 8 0.3485 6 7.4037 7 0.3273 5 5.4626 8 35.119 8 51.9141 10 1.0155 7 7.5598 8 15.0408 7 44.0 8 7.909 8 1.7098 8 4.0 8 5.2001 7 0.7031 8 57.6543 8 10.0 8)
Average genome size in population (length): 104.67
Average program size in population (points): 105.67
Average percent parens in population: 0.010
Minimum age in population: 101.6373979691171
Maximum age in population: 106.4668573455236
Average age in population: 104.1728284706086
Median age in population: 104.2029958949989
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.919
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.919
Total error diversity:				 0.219
Error (vector) diversity:			 0.278
Behavioral diversity:				 0.278
--- Run Statistics ---
Number of program evaluations used so far: 73000
Number of point (instruction) evaluations so far: 144981975
--- Timings ---
Current time: 1529615197594 milliseconds
Total Time:         311.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       116.3 seconds, 37.4%
Fitness Testing:    152.7 seconds, 49.1%
Report:              41.9 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 72
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 73
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 73
;;******************************
;; -*- Number IO problem report - generation 73
Test total error for best: 61440.625900000035
Test mean error for best: 30.72031
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.0807816    
Correct output: -141.201628771 | Program output: -81.0807816   
Correct output: 23.3844813461  | Program output: 23.0807816    
Correct output: 91.3818662575  | Program output: 112.0807816   
Correct output: 6.0991287499   | Program output: -10.0807816   
Correct output: 90.6078865723  | Program output: 88.0807816    
Correct output: -16.3558496064 | Program output: 68.0807816    
Correct output: 85.2320058807  | Program output: 93.0807816    
Correct output: -28.7080490162 | Program output: -43.0807816   
Correct output: -10.4844827466 | Program output: 61.0807816    
Correct output: -59.408072605  | Program output: -68.0807816   
Correct output: 59.1228402624  | Program output: 28.0807816    
Correct output: -132.1998002816 | Program output: -84.0807816   
Correct output: -128.9949320478 | Program output: -41.0807816   
Correct output: -78.0962956202 | Program output: -27.0807816   
Correct output: -35.919351649  | Program output: -63.0807816   
Correct output: -56.0400311694 | Program output: -24.0807816   
Correct output: 137.4302481607 | Program output: 57.0807816    
Correct output: 32.7727726522  | Program output: 55.0807816    
Correct output: -26.6497561561 | Program output: 86.0807816    
Correct output: 95.3927116996  | Program output: 17.0807816    
Correct output: -65.8806745395 | Program output: -83.0807816   
Correct output: 48.7839285535  | Program output: 26.0807816    
Correct output: 176.7350863211 | Program output: 107.0807816   
Correct output: -87.9710392115 | Program output: 3.0807816     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 94} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_mod} {:instruction tag_integer_498} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction 14.354813298606842} {:instruction float_max} {:instruction integer_dup_times} {:instruction integer_min} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_inc} {:instruction 42.446747745532946} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_yankdup} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction -99} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_cos} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_max} {:instruction print_integer})
Best program: (float_add in1 float_mod float_tan 94 integer_dup_times float_yankdup integer_mod integer_mod tag_integer_498 float_rot -83 integer_div 53.660195741514 14.354813298606842 float_max integer_dup_times integer_min float_dup integer_rot float_swap float_yankdup float_inc 42.446747745532946 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger print_float integer_mod 80 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove integer_dup_items integer_swap integer_shove print_integer float_cos print_integer float_swap 76 float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove print_integer float_cos print_integer float_swap float_dup integer_dup_items integer_swap integer_shove print_integer integer_yankdup print_integer float_swap 76 integer_stackdepth print_integer integer_mult float_pop float_yankdup float_swap integer_dup integer_dup_times float_pop float_dup integer_swap -99 float_min float_stackdepth float_rot float_min float_stackdepth float_cos float_rot float_div float_pop float_yank float_max print_integer)
Errors: [74.4802 10 60.1208 9 0.3037 6 20.6989 10 16.1799 10 2.5271 9 84.4366 11 7.8488 10 14.3727 7 71.5653 9 8.6727 7 31.0421 10 48.119 8 87.9142 12 51.0155 10 27.1614 9 31.9592 8 80.3495 8 22.308 10 112.7305 9 78.3119 9 17.2001 9 22.7031 10 69.6543 9 91.0518 11]
Total: 1362.7272999999996
Mean: 27.254545
Genome size: 112
Size: 113
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3666.1230595999964
Median total errors in population: 1369.7271999999998
Error averages by case: (162.50861630000006 10.206 155.5201333000017 9.067 94.06027700000053 8.066 113.77344780000168 10.183 110.67807800000134 10.613 98.44248400000177 9.067 166.2009515999978 11.395 102.48176530000228 10.552 110.53798790000249 8.862 155.0465260999994 8.922 107.39924379999898 7.515 120.79952330000194 11.167 144.84749690000277 10.676 178.2852820999977 12.979 144.1029328999984 10.604 121.76663809999854 10.717 126.76521089999864 9.728 167.13572120000072 9.834 112.46077350000108 10.113 190.6683523000027 10.606 162.90887580000046 10.552 114.9772901000008 9.407 113.1410689999992 10.24 160.32658759999754 11.198 177.05579479999744 11.963)
Error minima by case: (48.4802 8 50.1208 7 0.3035 6 3.6989 9 0.0183 7 0.4729 6 0.666 8 0.1512 8 0.3485 6 0.4037 6 0.3273 5 5.4626 8 38.119 8 54.0 10 5.0155 8 7.5598 9 16.0408 8 42.3495 8 9.674 8 1.7098 8 0.3119 8 6.2001 7 2.9726 8 60.6543 8 10.0 8)
Average genome size in population (length): 105.53
Average program size in population (points): 106.53
Average percent parens in population: 0.009
Minimum age in population: 102.9328053766904
Maximum age in population: 107.7203807750864
Average age in population: 105.5861058469147
Median age in population: 105.6157165257459
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.91
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.91
Total error diversity:				 0.2
Error (vector) diversity:			 0.266
Behavioral diversity:				 0.266
--- Run Statistics ---
Number of program evaluations used so far: 74000
Number of point (instruction) evaluations so far: 147620225
--- Timings ---
Current time: 1529615202560 milliseconds
Total Time:         315.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       117.8 seconds, 37.3%
Fitness Testing:    155.3 seconds, 49.2%
Report:              42.6 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 73
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 74
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 74
;;******************************
;; -*- Number IO problem report - generation 74
Test total error for best: 61440.625900000035
Test mean error for best: 30.72031
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.0807816    
Correct output: -141.201628771 | Program output: -81.0807816   
Correct output: 23.3844813461  | Program output: 23.0807816    
Correct output: 91.3818662575  | Program output: 112.0807816   
Correct output: 6.0991287499   | Program output: -10.0807816   
Correct output: 90.6078865723  | Program output: 88.0807816    
Correct output: -16.3558496064 | Program output: 68.0807816    
Correct output: 85.2320058807  | Program output: 93.0807816    
Correct output: -28.7080490162 | Program output: -43.0807816   
Correct output: -10.4844827466 | Program output: 61.0807816    
Correct output: -59.408072605  | Program output: -68.0807816   
Correct output: 59.1228402624  | Program output: 28.0807816    
Correct output: -132.1998002816 | Program output: -84.0807816   
Correct output: -128.9949320478 | Program output: -41.0807816   
Correct output: -78.0962956202 | Program output: -27.0807816   
Correct output: -35.919351649  | Program output: -63.0807816   
Correct output: -56.0400311694 | Program output: -24.0807816   
Correct output: 137.4302481607 | Program output: 57.0807816    
Correct output: 32.7727726522  | Program output: 55.0807816    
Correct output: -26.6497561561 | Program output: 86.0807816    
Correct output: 95.3927116996  | Program output: 17.0807816    
Correct output: -65.8806745395 | Program output: -83.0807816   
Correct output: 48.7839285535  | Program output: 26.0807816    
Correct output: 176.7350863211 | Program output: 107.0807816   
Correct output: -87.9710392115 | Program output: 3.0807816     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 94} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_mod} {:instruction tag_integer_498} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction 14.354813298606842} {:instruction float_max} {:instruction 53.660195741514} {:instruction 14.354813298606842} {:instruction float_max} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_flush} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_tan} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_yankdup} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction -99} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction -100} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_max} {:instruction print_integer})
Best program: (float_yankdup in1 float_mod float_tan 94 integer_dup_times float_yankdup integer_mod integer_mod tag_integer_498 float_rot -83 integer_div 53.660195741514 14.354813298606842 float_max 53.660195741514 14.354813298606842 float_max integer_dup_times integer_dup_times float_dup integer_rot float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger print_float integer_mod 80 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_flush integer_dup_items integer_swap integer_shove print_integer float_cos print_integer float_swap 76 float_tan 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove print_integer float_cos print_integer float_swap float_dup integer_dup_items integer_swap integer_shove print_integer integer_yankdup print_integer float_swap 76 integer_stackdepth print_integer integer_mult integer_dup_times float_pop float_dup integer_swap -99 float_min float_stackdepth float_rot float_pop float_dup integer_swap -100 float_min float_stackdepth float_rot float_min float_stackdepth float_rot float_div float_pop float_yank float_max print_integer)
Errors: [74.4802 10 60.1208 9 0.3037 6 20.6989 10 16.1799 10 2.5271 9 84.4366 11 7.8488 10 14.3727 7 71.5653 9 8.6727 7 31.0421 10 48.119 8 87.9142 12 51.0155 10 27.1614 9 31.9592 8 80.3495 8 22.308 10 112.7305 9 78.3119 9 17.2001 9 22.7031 10 69.6543 9 91.0518 11]
Total: 1362.7272999999996
Mean: 27.254545
Genome size: 110
Size: 111
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3937.860778399999
Median total errors in population: 1369.7271999999998
Error averages by case: (172.2095155000001 10.265 165.85821450000157 9.201 104.55090430000044 8.051 125.44164150000171 10.278 122.24792170000143 10.642 108.95431110000183 9.193 177.02431709999797 11.461 114.04553180000246 10.573 123.09129820000263 8.844 165.81892529999914 9.094 118.7235192999989 7.538 131.25038320000195 11.124 155.31608170000257 10.587 188.4508891999979 12.842 154.76557039999898 10.646 133.3936258999986 10.653 137.67374619999921 9.679 177.74450970000063 9.841 123.24702280000125 10.275 201.6222941000026 10.642 172.06254750000042 10.519 127.34028020000079 9.416 123.70438939999919 10.257 169.90086329999764 11.025 188.89147449999712 11.885)
Error minima by case: (58.6675 8 51.1208 7 0.3027 6 6.4884 8 0.9817 8 0.4729 6 12.0037 9 0.1512 8 0.3485 6 11.2341 7 0.6727 4 5.4626 8 39.119 7 54.5413 9 3.6427 8 4.1614 8 13.1396 7 52.5368 8 9.674 8 1.7098 8 10.4992 8 7.2001 7 4.8763 8 61.6543 8 12.2876 10)
Average genome size in population (length): 105.569
Average program size in population (points): 106.569
Average percent parens in population: 0.009
Minimum age in population: 103.9328053766904
Maximum age in population: 109.1290797817032
Average age in population: 106.9516875395724
Median age in population: 107.0061227014915
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.913
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.913
Total error diversity:				 0.22
Error (vector) diversity:			 0.294
Behavioral diversity:				 0.294
--- Run Statistics ---
Number of program evaluations used so far: 75000
Number of point (instruction) evaluations so far: 150259550
--- Timings ---
Current time: 1529615207247 milliseconds
Total Time:         320.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       119.3 seconds, 37.2%
Fitness Testing:    157.9 seconds, 49.2%
Report:              43.4 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 74
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 75
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 75
;;******************************
;; -*- Number IO problem report - generation 75
Test total error for best: 61440.625900000035
Test mean error for best: 30.72031
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.0807816    
Correct output: -141.201628771 | Program output: -81.0807816   
Correct output: 23.3844813461  | Program output: 23.0807816    
Correct output: 91.3818662575  | Program output: 112.0807816   
Correct output: 6.0991287499   | Program output: -10.0807816   
Correct output: 90.6078865723  | Program output: 88.0807816    
Correct output: -16.3558496064 | Program output: 68.0807816    
Correct output: 85.2320058807  | Program output: 93.0807816    
Correct output: -28.7080490162 | Program output: -43.0807816   
Correct output: -10.4844827466 | Program output: 61.0807816    
Correct output: -59.408072605  | Program output: -68.0807816   
Correct output: 59.1228402624  | Program output: 28.0807816    
Correct output: -132.1998002816 | Program output: -84.0807816   
Correct output: -128.9949320478 | Program output: -41.0807816   
Correct output: -78.0962956202 | Program output: -27.0807816   
Correct output: -35.919351649  | Program output: -63.0807816   
Correct output: -56.0400311694 | Program output: -24.0807816   
Correct output: 137.4302481607 | Program output: 57.0807816    
Correct output: 32.7727726522  | Program output: 55.0807816    
Correct output: -26.6497561561 | Program output: 86.0807816    
Correct output: 95.3927116996  | Program output: 17.0807816    
Correct output: -65.8806745395 | Program output: -83.0807816   
Correct output: 48.7839285535  | Program output: 26.0807816    
Correct output: 176.7350863211 | Program output: 107.0807816   
Correct output: -87.9710392115 | Program output: 3.0807816     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction integer_rot} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_yankdup} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction -99} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_cos} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_max} {:instruction print_integer})
Best program: (float_yankdup in1 integer_rot float_tan 93 integer_dup_times float_yankdup integer_dup_items -83 integer_div 53.660195741514 float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger print_float integer_mod 80 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove integer_dup_items integer_swap integer_shove print_integer float_cos print_integer float_swap 76 float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove print_integer float_cos print_integer float_swap float_dup integer_dup_items integer_swap integer_shove print_integer integer_yankdup print_integer float_swap 76 integer_stackdepth print_integer integer_mult float_pop float_yankdup float_swap integer_dup integer_dup_times float_pop float_dup integer_swap -99 float_min float_stackdepth float_rot float_min float_stackdepth float_cos float_rot float_div float_pop float_yank float_max print_integer)
Errors: [74.4802 10 60.1208 9 0.3037 6 20.6989 10 16.1799 10 2.5271 9 84.4366 11 7.8488 10 14.3727 7 71.5653 9 8.6727 7 31.0421 10 48.119 8 87.9142 12 51.0155 10 27.1614 9 31.9592 8 80.3495 8 22.308 10 112.7305 9 78.3119 9 17.2001 9 22.7031 10 69.6543 9 91.0518 11]
Total: 1362.7272999999996
Mean: 27.254545
Genome size: 111
Size: 112
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3878.7126699
Median total errors in population: 1369.7271999999998
Error averages by case: (169.0092939000002 10.344 165.53941560000163 9.392 101.17438700000001 8.01 121.72110360000187 10.43 121.60139120000157 10.752 105.52661370000128 9.318 172.66824489999794 11.572 110.47366310000199 10.533 121.32426810000253 8.796 161.59283039999914 9.34 118.06271239999919 7.648 127.69604720000181 11.023 154.9735411000029 10.417 188.18866479999812 12.755 154.42786929999932 10.725 132.40743379999856 10.686 137.31452519999922 9.692 174.54769700000045 9.765 119.43554970000082 10.402 196.95933640000277 10.526 169.5699604000005 10.504 125.51805600000093 9.509 120.09066739999922 10.335 166.75219639999753 10.706 187.18120129999744 11.776)
Error minima by case: (56.0 8 51.1208 7 0.3027 6 11.6989 9 4.0183 8 0.4729 6 12.0037 8 0.1512 7 0.3485 7 9.9056 7 0.3273 4 4.4626 8 39.119 7 57.9141 9 7.0155 8 7.5598 8 14.0408 7 44.0 8 9.674 8 1.7098 8 4.0 7 4.2001 7 4.8763 8 57.6543 8 9.0 8)
Average genome size in population (length): 106.941
Average program size in population (points): 107.941
Average percent parens in population: 0.009
Minimum age in population: 105.968620271726
Maximum age in population: 110.7251452965844
Average age in population: 108.4269110841141
Median age in population: 108.461491724612
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.908
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.908
Total error diversity:				 0.234
Error (vector) diversity:			 0.318
Behavioral diversity:				 0.318
--- Run Statistics ---
Number of program evaluations used so far: 76000
Number of point (instruction) evaluations so far: 152933150
--- Timings ---
Current time: 1529615212407 milliseconds
Total Time:         325.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       120.7 seconds, 37.1%
Fitness Testing:    160.9 seconds, 49.4%
Report:              44.1 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 75
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 76
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 76
;;******************************
;; -*- Number IO problem report - generation 76
Test total error for best: 61531.626100000045
Test mean error for best: 30.76581
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.08078265   
Correct output: -141.201628771 | Program output: -81.08078265  
Correct output: 23.3844813461  | Program output: 23.08078265   
Correct output: 91.3818662575  | Program output: 112.08078265  
Correct output: 6.0991287499   | Program output: -10.08078265  
Correct output: 90.6078865723  | Program output: 88.08078265   
Correct output: -16.3558496064 | Program output: 68.08078265   
Correct output: 85.2320058807  | Program output: 93.08078265   
Correct output: -28.7080490162 | Program output: -43.08078265  
Correct output: -10.4844827466 | Program output: 61.08078265   
Correct output: -59.408072605  | Program output: -68.08078265  
Correct output: 59.1228402624  | Program output: 28.08078265   
Correct output: -132.1998002816 | Program output: -84.08078265  
Correct output: -128.9949320478 | Program output: -41.08078265  
Correct output: -78.0962956202 | Program output: -27.08078265  
Correct output: -35.919351649  | Program output: -63.08078265  
Correct output: -56.0400311694 | Program output: -24.08078265  
Correct output: 137.4302481607 | Program output: 57.08078265   
Correct output: 32.7727726522  | Program output: 55.08078265   
Correct output: -26.6497561561 | Program output: 86.08078265   
Correct output: 95.3927116996  | Program output: 17.08078265   
Correct output: -65.8806745395 | Program output: -83.08078265  
Correct output: 48.7839285535  | Program output: 26.08078265   
Correct output: 176.7350863211 | Program output: 107.08078265  
Correct output: -87.9710392115 | Program output: 3.08078265    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_integer} {:instruction in1} {:instruction integer_rot} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_div} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction float_rot} {:instruction float_swap} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction 76} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction -99} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_max} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_cos} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_max} {:instruction print_integer})
Best program: (print_integer in1 integer_rot float_tan 93 integer_dup_times float_yankdup integer_div -83 integer_div 53.660195741514 float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger print_float integer_mod 80 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove integer_dup_items integer_swap integer_shove print_integer float_cos print_integer float_swap 76 float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove print_integer float_cos float_rot float_swap float_dup integer_dup_items integer_swap integer_shove print_integer integer_yankdup integer_yankdup print_integer float_swap 76 76 integer_stackdepth print_integer integer_mult float_pop float_yankdup float_swap integer_dup integer_dup_times float_pop float_dup integer_swap -99 float_min float_stackdepth float_max print_integer float_stackdepth float_rot float_min float_stackdepth float_cos float_rot float_div float_pop float_yank float_max print_integer)
Errors: [74.4802 9 60.1208 9 0.3037 7 20.6989 9 16.1799 11 2.5271 8 84.4366 11 7.8488 10 14.3727 8 71.5653 8 8.6727 5 31.0421 10 48.119 10 87.9141 12 51.0155 10 27.1614 10 31.9592 9 80.3495 9 22.308 8 112.7305 10 78.3119 10 17.2001 8 22.7031 9 69.6543 10 91.0518 10]
Total: 1362.7271999999998
Mean: 27.254543
Genome size: 116
Size: 117
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4153.596427300005
Median total errors in population: 1370.7271999999998
Error averages by case: (181.02872829999882 10.432 173.95850420000144 9.602 113.7462697000006 7.85 133.28430090000154 10.601 132.03657250000128 10.685 118.09624180000185 9.516 185.717172899997 11.745 122.15383200000252 10.447 131.53409760000278 8.664 174.5185064999981 9.631 127.81470609999863 7.69 140.2246009000015 10.839 163.4989119000025 9.933 196.9244505999988 12.529 163.8905786000004 10.786 142.62573269999965 10.43 147.0321010999996 9.427 185.78202450000134 9.562 132.30238100000145 10.693 210.30667890000245 10.429 180.96129760000056 10.286 135.26711830000036 9.543 132.7683384999992 10.416 178.01587479999776 10.254 196.52840539999698 11.589)
Error minima by case: (46.4802 8 47.1208 7 0.3035 6 5.6989 8 0.0183 8 0.4709 6 16.3911 9 0.8488 8 0.3485 6 9.619 7 0.3273 4 2.0906 8 35.119 7 47.9733 9 2.9254 7 7.5598 8 18.9592 7 40.3495 8 9.308 8 26.685 8 1.6881 8 7.2001 7 1.7032 8 59.6543 8 6.9494 8)
Average genome size in population (length): 109.122
Average program size in population (points): 110.122
Average percent parens in population: 0.009
Minimum age in population: 107.5677745319274
Maximum age in population: 112.059047296827
Average age in population: 109.9244329153871
Median age in population: 109.9631518322356
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.901
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.901
Total error diversity:				 0.24
Error (vector) diversity:			 0.314
Behavioral diversity:				 0.314
--- Run Statistics ---
Number of program evaluations used so far: 77000
Number of point (instruction) evaluations so far: 155661250
--- Timings ---
Current time: 1529615217330 milliseconds
Total Time:         330.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       122.3 seconds, 37.0%
Fitness Testing:    163.5 seconds, 49.4%
Report:              44.8 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 76
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 77
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 77
;;******************************
;; -*- Number IO problem report - generation 77
Test total error for best: 61531.626100000045
Test mean error for best: 30.76581
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.08078265   
Correct output: -141.201628771 | Program output: -81.08078265  
Correct output: 23.3844813461  | Program output: 23.08078265   
Correct output: 91.3818662575  | Program output: 112.08078265  
Correct output: 6.0991287499   | Program output: -10.08078265  
Correct output: 90.6078865723  | Program output: 88.08078265   
Correct output: -16.3558496064 | Program output: 68.08078265   
Correct output: 85.2320058807  | Program output: 93.08078265   
Correct output: -28.7080490162 | Program output: -43.08078265  
Correct output: -10.4844827466 | Program output: 61.08078265   
Correct output: -59.408072605  | Program output: -68.08078265  
Correct output: 59.1228402624  | Program output: 28.08078265   
Correct output: -132.1998002816 | Program output: -84.08078265  
Correct output: -128.9949320478 | Program output: -41.08078265  
Correct output: -78.0962956202 | Program output: -27.08078265  
Correct output: -35.919351649  | Program output: -63.08078265  
Correct output: -56.0400311694 | Program output: -24.08078265  
Correct output: 137.4302481607 | Program output: 57.08078265   
Correct output: 32.7727726522  | Program output: 55.08078265   
Correct output: -26.6497561561 | Program output: 86.08078265   
Correct output: 95.3927116996  | Program output: 17.08078265   
Correct output: -65.8806745395 | Program output: -83.08078265  
Correct output: 48.7839285535  | Program output: 26.08078265   
Correct output: 176.7350863211 | Program output: 107.08078265  
Correct output: -87.9710392115 | Program output: 3.08078265    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_integer} {:instruction in1} {:instruction integer_rot} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_div} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction float_rot} {:instruction float_swap} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction 76} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction -99} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_max} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_cos} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_max} {:instruction print_integer})
Best program: (print_integer in1 integer_rot float_tan 93 integer_dup_times float_yankdup integer_div -83 integer_div 53.660195741514 float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger print_float integer_mod 80 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove integer_dup_items integer_swap integer_shove print_integer float_cos print_integer float_swap 76 float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove print_integer float_cos float_rot float_swap float_dup integer_dup_items integer_swap integer_shove print_integer integer_yankdup integer_yankdup print_integer float_swap 76 76 integer_stackdepth print_integer integer_mult float_pop float_yankdup float_swap integer_dup integer_dup_times float_pop float_dup integer_swap -99 float_min float_stackdepth float_max print_integer float_stackdepth float_rot float_min float_stackdepth float_cos float_rot float_div float_pop float_yank float_max print_integer)
Errors: [74.4802 9 60.1208 9 0.3037 7 20.6989 9 16.1799 11 2.5271 8 84.4366 11 7.8488 10 14.3727 8 71.5653 8 8.6727 5 31.0421 10 48.119 10 87.9141 12 51.0155 10 27.1614 10 31.9592 9 80.3495 9 22.308 8 112.7305 10 78.3119 10 17.2001 8 22.7031 9 69.6543 10 91.0518 10]
Total: 1362.7271999999998
Mean: 27.254543
Genome size: 116
Size: 117
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3623.237218900006
Median total errors in population: 1369.7271999999998
Error averages by case: (157.7426541000004 10.392 156.94937610000133 9.639 87.89255140000017 7.565 111.30024000000155 10.677 112.6602211000013 10.64 93.40914770000134 9.607 162.06146059999827 11.784 98.66006360000186 10.406 114.60142940000229 8.422 150.60357129999963 9.831 109.31901969999919 7.676 115.12137520000164 10.663 146.2947486000022 9.578 179.87120669999908 12.38 145.88349419999903 10.843 125.07695749999866 10.259 128.58286169999886 9.23 164.25329560000034 9.349 107.28120170000085 10.738 187.35952340000244 10.155 157.49732010000045 10.125 118.0197423000007 9.472 107.43801489999929 10.34 155.92949799999792 9.846 178.46524399999754 11.346)
Error minima by case: (56.0 8 50.1215 7 0.3017 6 10.6983 9 3.0183 8 0.5271 6 11.2751 9 0.1512 7 0.3485 6 5.4037 7 0.6727 4 5.9579 8 38.1196 7 58.9142 10 8.0155 8 7.5598 8 14.0408 6 44.0 8 7.4243 8 1.7098 8 4.0 7 4.2001 7 1.2969 8 56.6543 8 13.029 9)
Average genome size in population (length): 109.739
Average program size in population (points): 110.739
Average percent parens in population: 0.009
Minimum age in population: 108.7768833780058
Maximum age in population: 113.5086292906036
Average age in population: 111.3129992525905
Median age in population: 111.3442546298248
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.871
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.871
Total error diversity:				 0.235
Error (vector) diversity:			 0.294
Behavioral diversity:				 0.294
--- Run Statistics ---
Number of program evaluations used so far: 78000
Number of point (instruction) evaluations so far: 158404725
--- Timings ---
Current time: 1529615222244 milliseconds
Total Time:         335.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       123.7 seconds, 36.9%
Fitness Testing:    166.2 seconds, 49.5%
Report:              45.5 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 77
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 78
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 78
;;******************************
;; -*- Number IO problem report - generation 78
Test total error for best: 61519.625900000035
Test mean error for best: 30.75981
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.08078165   
Correct output: -141.201628771 | Program output: -81.08078165  
Correct output: 23.3844813461  | Program output: 23.08078165   
Correct output: 91.3818662575  | Program output: 112.08078165  
Correct output: 6.0991287499   | Program output: -10.08078165  
Correct output: 90.6078865723  | Program output: 88.08078165   
Correct output: -16.3558496064 | Program output: 68.08078165   
Correct output: 85.2320058807  | Program output: 93.08078165   
Correct output: -28.7080490162 | Program output: -43.08078165  
Correct output: -10.4844827466 | Program output: 61.08078165   
Correct output: -59.408072605  | Program output: -68.08078165  
Correct output: 59.1228402624  | Program output: 28.08078165   
Correct output: -132.1998002816 | Program output: -84.08078165  
Correct output: -128.9949320478 | Program output: -41.08078165  
Correct output: -78.0962956202 | Program output: -27.08078165  
Correct output: -35.919351649  | Program output: -63.08078165  
Correct output: -56.0400311694 | Program output: -24.08078165  
Correct output: 137.4302481607 | Program output: 57.08078165   
Correct output: 32.7727726522  | Program output: 55.08078165   
Correct output: -26.6497561561 | Program output: 86.08078165   
Correct output: 95.3927116996  | Program output: 17.08078165   
Correct output: -65.8806745395 | Program output: -83.08078165  
Correct output: 48.7839285535  | Program output: 26.08078165   
Correct output: 176.7350863211 | Program output: 107.08078165  
Correct output: -87.9710392115 | Program output: 3.08078165    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction integer_rot} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction float_rot} {:instruction float_swap} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_yankdup} {:instruction print_integer} {:instruction float_swap} {:instruction 77} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction -99} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_max} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_cos} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_max} {:instruction print_integer})
Best program: (float_yankdup in1 integer_rot float_tan 93 integer_dup_times float_yankdup integer_dup_items -83 integer_div 53.660195741514 float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger print_float integer_mod 80 float_min print_integer integer_mult float_dup print_integer float_swap 76 float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove print_integer float_cos float_rot float_swap float_dup integer_dup_items integer_swap integer_shove integer_shove print_integer integer_yankdup print_integer float_swap 77 integer_stackdepth print_integer integer_mult float_pop float_yankdup float_swap integer_dup integer_dup_times float_pop float_dup integer_swap -99 float_min float_stackdepth float_max print_integer float_stackdepth float_rot float_min float_stackdepth float_cos float_rot float_div float_pop float_yank float_max print_integer)
Errors: [74.4802 9 60.1208 9 0.3037 6 20.6989 9 16.1799 11 2.5271 8 84.4366 11 7.8488 10 14.3727 7 71.5653 9 8.6727 6 31.0421 11 48.119 9 87.9142 13 51.0155 10 27.1614 9 31.9592 8 80.3495 8 22.308 9 112.7305 9 78.3119 9 17.2001 8 22.7031 9 69.6543 10 91.0518 10]
Total: 1359.7272999999996
Mean: 27.194546
Genome size: 107
Size: 108
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3910.786522700009
Median total errors in population: 1369.7271999999998
Error averages by case: (169.94749960000001 10.379 164.90551950000133 9.632 103.44956620000048 7.591 124.64139470000153 10.642 122.92875820000131 10.64 106.16828140000142 9.613 175.92461489999786 11.88 112.36185180000176 10.404 124.58368780000212 8.47 163.73680919999913 9.858 117.9012773999994 7.645 129.42203330000166 10.599 154.29756580000222 9.548 188.24601499999923 12.322 154.77579689999953 10.903 133.81468559999885 10.309 137.64798669999934 9.314 177.5375400000008 9.327 121.18128680000082 10.727 200.6272075000025 10.147 170.54685110000057 10.192 127.3849328000007 9.487 121.84576519999925 10.34 167.94757969999782 9.781 187.94501559999745 11.267)
Error minima by case: (38.4802 8 51.1208 8 0.3035 5 11.6989 9 3.935 8 0.4703 7 12.0037 9 0.1512 8 2.3727 6 10.2341 7 0.3273 5 5.4626 8 39.119 7 78.9142 10 42.0155 9 15.1614 8 22.9592 7 32.3495 8 9.674 7 1.7098 8 9.6881 8 5.2001 7 4.8763 8 57.6543 8 4.8903 8)
Average genome size in population (length): 110.597
Average program size in population (points): 111.597
Average percent parens in population: 0.009
Minimum age in population: 110.4131320957576
Maximum age in population: 114.3762184013076
Average age in population: 112.6130528331133
Median age in population: 112.6388882487482
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.912
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.912
Total error diversity:				 0.221
Error (vector) diversity:			 0.28
Behavioral diversity:				 0.28
--- Run Statistics ---
Number of program evaluations used so far: 79000
Number of point (instruction) evaluations so far: 161169650
--- Timings ---
Current time: 1529615227507 milliseconds
Total Time:         341.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       125.3 seconds, 36.7%
Fitness Testing:    169.3 seconds, 49.6%
Report:              46.4 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 78
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 79
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 79
;;******************************
;; -*- Number IO problem report - generation 79
Test total error for best: 61519.625900000035
Test mean error for best: 30.75981
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.08078165   
Correct output: -141.201628771 | Program output: -81.08078165  
Correct output: 23.3844813461  | Program output: 23.08078165   
Correct output: 91.3818662575  | Program output: 112.08078165  
Correct output: 6.0991287499   | Program output: -10.08078165  
Correct output: 90.6078865723  | Program output: 88.08078165   
Correct output: -16.3558496064 | Program output: 68.08078165   
Correct output: 85.2320058807  | Program output: 93.08078165   
Correct output: -28.7080490162 | Program output: -43.08078165  
Correct output: -10.4844827466 | Program output: 61.08078165   
Correct output: -59.408072605  | Program output: -68.08078165  
Correct output: 59.1228402624  | Program output: 28.08078165   
Correct output: -132.1998002816 | Program output: -84.08078165  
Correct output: -128.9949320478 | Program output: -41.08078165  
Correct output: -78.0962956202 | Program output: -27.08078165  
Correct output: -35.919351649  | Program output: -63.08078165  
Correct output: -56.0400311694 | Program output: -24.08078165  
Correct output: 137.4302481607 | Program output: 57.08078165   
Correct output: 32.7727726522  | Program output: 55.08078165   
Correct output: -26.6497561561 | Program output: 86.08078165   
Correct output: 95.3927116996  | Program output: 17.08078165   
Correct output: -65.8806745395 | Program output: -83.08078165  
Correct output: 48.7839285535  | Program output: 26.08078165   
Correct output: 176.7350863211 | Program output: 107.08078165  
Correct output: -87.9710392115 | Program output: 3.08078165    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 94} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_mod} {:instruction tag_integer_498} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction 14.354813298606842} {:instruction float_max} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction integer_swap} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction float_swap} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction float_rot} {:instruction float_swap} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction 76} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction -99} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_max} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_cos} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_max} {:instruction print_integer})
Best program: (float_yankdup in1 float_mod float_tan 94 integer_dup_times float_yankdup integer_mod integer_mod tag_integer_498 float_rot -83 integer_div 53.660195741514 14.354813298606842 float_max integer_dup_times integer_dup_times float_dup integer_rot float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup float_tan 42.446747745532946 float_yank float_yankdup integer_swap integer_inc integer_inc integer_inc float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger print_float integer_mod 80 float_min print_integer integer_mult float_dup float_swap integer_swap integer_shove integer_dup_items integer_swap integer_shove print_integer float_cos print_integer float_swap 76 float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove print_integer float_cos float_rot float_swap float_dup integer_dup_items integer_swap integer_shove print_integer float_pop float_yankdup float_swap 76 integer_stackdepth print_integer integer_mult float_pop float_yankdup float_swap integer_dup integer_dup_times float_pop float_dup integer_swap -99 float_min float_stackdepth float_max print_integer float_stackdepth float_rot float_min float_stackdepth float_cos float_rot float_div float_pop float_yank float_max print_integer)
Errors: [74.4802 9 60.1208 9 0.3037 6 20.6989 9 16.1799 11 2.5271 8 84.4366 11 7.8488 10 14.3727 7 71.5653 9 8.6727 6 31.0421 11 48.119 9 87.9142 13 51.0155 10 27.1614 9 31.9592 8 80.3495 8 22.308 9 112.7305 9 78.3119 9 17.2001 8 22.7031 9 69.6543 10 91.0518 10]
Total: 1359.7272999999996
Mean: 27.194546
Genome size: 117
Size: 118
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3837.207288300008
Median total errors in population: 1370.7271999999998
Error averages by case: (167.4259016 10.394 163.63579950000187 9.648 99.10358410000015 7.641 119.36330640000162 10.598 119.67150360000139 10.703 103.84591980000145 9.576 173.56709829999767 11.864 108.07510490000206 10.428 119.9148843000029 8.466 162.15681439999912 9.792 116.28800819999864 7.549 125.7231259000021 10.6 152.99250820000276 9.65 186.92695769999904 12.27 153.25399659999906 10.783 131.1345456999986 10.328 136.06504759999928 9.313 172.28990260000063 9.403 118.78325790000143 10.623 198.5871995000027 10.24 167.19022340000052 10.257 123.77715870000074 9.445 118.14455309999917 10.324 164.17309219999743 9.803 184.15879409999746 11.261)
Error minima by case: (33.4802 8 49.1208 7 0.2917 6 9.6989 8 2.9817 8 0.4719 6 15.7349 10 0.1512 8 0.3485 6 9.9056 7 0.3273 4 4.4626 8 37.119 7 59.2987 10 8.4 8 7.5598 8 13.6562 7 27.3495 8 7.909 7 26.4894 8 10.6882 8 1.7999 7 3.7031 8 50.6543 8 17.2277 9)
Average genome size in population (length): 110.936
Average program size in population (points): 111.936
Average percent parens in population: 0.009
Minimum age in population: 111.4131320957576
Maximum age in population: 116.0304438402562
Average age in population: 113.9481241214557
Median age in population: 113.9742758772674
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.924
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.924
Total error diversity:				 0.242
Error (vector) diversity:			 0.311
Behavioral diversity:				 0.311
--- Run Statistics ---
Number of program evaluations used so far: 80000
Number of point (instruction) evaluations so far: 163943075
--- Timings ---
Current time: 1529615232262 milliseconds
Total Time:         345.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       126.7 seconds, 36.6%
Fitness Testing:    172.0 seconds, 49.7%
Report:              47.0 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 79
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 80
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 80
;;******************************
;; -*- Number IO problem report - generation 80
Test total error for best: 61519.625900000035
Test mean error for best: 30.75981
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.08078165   
Correct output: -141.201628771 | Program output: -81.08078165  
Correct output: 23.3844813461  | Program output: 23.08078165   
Correct output: 91.3818662575  | Program output: 112.08078165  
Correct output: 6.0991287499   | Program output: -10.08078165  
Correct output: 90.6078865723  | Program output: 88.08078165   
Correct output: -16.3558496064 | Program output: 68.08078165   
Correct output: 85.2320058807  | Program output: 93.08078165   
Correct output: -28.7080490162 | Program output: -43.08078165  
Correct output: -10.4844827466 | Program output: 61.08078165   
Correct output: -59.408072605  | Program output: -68.08078165  
Correct output: 59.1228402624  | Program output: 28.08078165   
Correct output: -132.1998002816 | Program output: -84.08078165  
Correct output: -128.9949320478 | Program output: -41.08078165  
Correct output: -78.0962956202 | Program output: -27.08078165  
Correct output: -35.919351649  | Program output: -63.08078165  
Correct output: -56.0400311694 | Program output: -24.08078165  
Correct output: 137.4302481607 | Program output: 57.08078165   
Correct output: 32.7727726522  | Program output: 55.08078165   
Correct output: -26.6497561561 | Program output: 86.08078165   
Correct output: 95.3927116996  | Program output: 17.08078165   
Correct output: -65.8806745395 | Program output: -83.08078165  
Correct output: 48.7839285535  | Program output: 26.08078165   
Correct output: 176.7350863211 | Program output: 107.08078165  
Correct output: -87.9710392115 | Program output: 3.08078165    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 94} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_mod} {:instruction tag_integer_498} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction 14.354813298606842} {:instruction float_max} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction integer_swap} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction float_swap} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction float_rot} {:instruction float_swap} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction 76} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction -99} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_max} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_cos} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_max} {:instruction print_integer})
Best program: (float_yankdup in1 float_mod float_tan 94 integer_dup_times float_yankdup integer_mod integer_mod tag_integer_498 float_rot -83 integer_div 53.660195741514 14.354813298606842 float_max integer_dup_times integer_dup_times float_dup integer_rot float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup float_tan 42.446747745532946 float_yank float_yankdup integer_swap integer_inc integer_inc integer_inc float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger print_float integer_mod 80 float_min print_integer integer_mult float_dup float_swap integer_swap integer_shove integer_dup_items integer_swap integer_shove print_integer float_cos print_integer float_swap 76 float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove print_integer float_cos float_rot float_swap float_dup integer_dup_items integer_swap integer_shove print_integer float_pop float_yankdup float_swap 76 integer_stackdepth print_integer integer_mult float_pop float_yankdup float_swap integer_dup integer_dup_times float_pop float_dup integer_swap -99 float_min float_stackdepth float_max print_integer float_stackdepth float_rot float_min float_stackdepth float_cos float_rot float_div float_pop float_yank float_max print_integer)
Errors: [74.4802 9 60.1208 9 0.3037 6 20.6989 9 16.1799 11 2.5271 8 84.4366 11 7.8488 10 14.3727 7 71.5653 9 8.6727 6 31.0421 11 48.119 9 87.9142 13 51.0155 10 27.1614 9 31.9592 8 80.3495 8 22.308 9 112.7305 9 78.3119 9 17.2001 8 22.7031 9 69.6543 10 91.0518 10]
Total: 1359.7272999999996
Mean: 27.194546
Genome size: 117
Size: 118
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3972.825958000006
Median total errors in population: 1370.7272999999996
Error averages by case: (173.42778019999983 10.344 166.77473800000172 9.67 106.31016380000041 7.684 127.53041920000179 10.4 123.98035650000146 10.786 110.19223900000179 9.463 178.34826409999783 11.794 115.31643720000243 10.415 125.5943415000028 8.535 167.14266349999892 9.605 119.90053459999878 7.446 133.1966940000022 10.549 156.18810790000273 9.86 189.96681039999874 12.267 156.5037133999993 10.728 135.7269839999986 10.39 139.46397309999918 9.359 180.05057780000072 9.484 124.93380460000141 10.421 202.9351876000029 10.301 174.6661613000005 10.302 128.34432340000097 9.413 125.68967759999921 10.246 171.4738390999974 9.915 188.6021661999976 11.189)
Error minima by case: (17.5199 8 49.1208 7 0.3017 5 1.9971 8 0.0183 7 0.4729 6 15.3565 9 0.1512 8 1.3727 6 9.4851 7 0.3273 3 15.0 8 37.119 7 45.2248 10 5.0155 8 14.1614 8 17.0408 7 11.6507 8 2.308 7 25.6504 8 4.0 8 4.2001 7 6.0785 8 22.3459 7 4.2009 8)
Average genome size in population (length): 111.499
Average program size in population (points): 112.499
Average percent parens in population: 0.009
Minimum age in population: 113.0075506442977
Maximum age in population: 117.4425320936765
Average age in population: 115.28127137042
Median age in population: 115.3409961737748
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.914
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.914
Total error diversity:				 0.254
Error (vector) diversity:			 0.335
Behavioral diversity:				 0.335
--- Run Statistics ---
Number of program evaluations used so far: 81000
Number of point (instruction) evaluations so far: 166730575
--- Timings ---
Current time: 1529615237255 milliseconds
Total Time:         350.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       128.1 seconds, 36.5%
Fitness Testing:    174.7 seconds, 49.8%
Report:              47.6 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 80
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 81
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 81
;;******************************
;; -*- Number IO problem report - generation 81
Test total error for best: 61519.625900000035
Test mean error for best: 30.75981
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.08078165   
Correct output: -141.201628771 | Program output: -81.08078165  
Correct output: 23.3844813461  | Program output: 23.08078165   
Correct output: 91.3818662575  | Program output: 112.08078165  
Correct output: 6.0991287499   | Program output: -10.08078165  
Correct output: 90.6078865723  | Program output: 88.08078165   
Correct output: -16.3558496064 | Program output: 68.08078165   
Correct output: 85.2320058807  | Program output: 93.08078165   
Correct output: -28.7080490162 | Program output: -43.08078165  
Correct output: -10.4844827466 | Program output: 61.08078165   
Correct output: -59.408072605  | Program output: -68.08078165  
Correct output: 59.1228402624  | Program output: 28.08078165   
Correct output: -132.1998002816 | Program output: -84.08078165  
Correct output: -128.9949320478 | Program output: -41.08078165  
Correct output: -78.0962956202 | Program output: -27.08078165  
Correct output: -35.919351649  | Program output: -63.08078165  
Correct output: -56.0400311694 | Program output: -24.08078165  
Correct output: 137.4302481607 | Program output: 57.08078165   
Correct output: 32.7727726522  | Program output: 55.08078165   
Correct output: -26.6497561561 | Program output: 86.08078165   
Correct output: 95.3927116996  | Program output: 17.08078165   
Correct output: -65.8806745395 | Program output: -83.08078165  
Correct output: 48.7839285535  | Program output: 26.08078165   
Correct output: 176.7350863211 | Program output: 107.08078165  
Correct output: -87.9710392115 | Program output: 3.08078165    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction integer_rot} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction float_swap} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction float_swap} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction float_rot} {:instruction float_swap} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction 76} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction -99} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_max} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_cos} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_max} {:instruction print_integer})
Best program: (float_yankdup in1 integer_rot float_tan 93 integer_dup_times float_yankdup float_swap -83 integer_div 53.660195741514 float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger print_float integer_mod 80 float_min print_integer integer_mult float_dup float_swap integer_swap integer_shove integer_dup_items integer_swap integer_shove print_integer float_cos print_integer float_swap 76 float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove print_integer float_cos float_rot float_swap float_dup integer_dup_items integer_swap integer_shove print_integer float_pop float_yankdup float_swap 76 integer_stackdepth print_integer integer_mult float_pop float_yankdup float_swap integer_dup integer_dup_times float_pop float_dup integer_swap -99 float_min float_stackdepth float_max print_integer float_stackdepth float_rot float_min float_stackdepth float_cos float_rot float_div float_pop float_yank float_max print_integer)
Errors: [74.4802 9 60.1208 9 0.3037 6 20.6989 9 16.1799 11 2.5271 8 84.4366 11 7.8488 10 14.3727 7 71.5653 9 8.6727 6 31.0421 11 48.119 9 87.9142 13 51.0155 10 27.1614 9 31.9592 8 80.3495 8 22.308 9 112.7305 9 78.3119 9 17.2001 8 22.7031 9 69.6543 10 91.0518 10]
Total: 1359.7272999999996
Mean: 27.194546
Genome size: 123
Size: 124
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 4128.658587900003
Median total errors in population: 1370.7272999999996
Error averages by case: (178.30087569999912 10.26 175.0764354000019 9.663 110.54534210000051 7.77 131.77761410000167 10.23 132.01335280000146 10.95 115.29582220000209 9.302 182.931093599997 11.795 120.53244340000268 10.439 133.90643450000314 8.74 171.69451909999827 9.36 128.92876139999842 7.255 137.37465450000187 10.534 164.60717530000304 10.274 197.7065137999984 12.247 165.3933923000002 10.643 143.98598889999988 10.563 148.60727890000024 9.499 184.02383600000152 9.68 129.59271960000177 10.061 207.62539780000287 10.419 178.92689630000058 10.458 137.30567340000033 9.309 129.85535819999922 10.044 175.08363159999735 10.176 196.81637699999698 11.08)
Error minima by case: (53.4802 8 48.1208 7 0.3035 5 8.6989 8 3.0183 8 0.4729 6 12.0037 8 0.1512 7 0.3485 6 9.619 7 0.3273 4 10.0421 8 36.119 7 48.9141 9 1.9845 7 6.1614 8 16.0408 7 44.0 7 6.308 8 1.7098 8 4.0 7 3.7999 7 1.7031 8 48.6543 8 7.8903 7)
Average genome size in population (length): 112.717
Average program size in population (points): 113.717
Average percent parens in population: 0.009
Minimum age in population: 114.1198661481423
Maximum age in population: 118.7936366883057
Average age in population: 116.6891558218002
Median age in population: 116.7127088050736
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.9
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.9
Total error diversity:				 0.266
Error (vector) diversity:			 0.369
Behavioral diversity:				 0.369
--- Run Statistics ---
Number of program evaluations used so far: 82000
Number of point (instruction) evaluations so far: 169548600
--- Timings ---
Current time: 1529615242605 milliseconds
Total Time:         356.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       129.6 seconds, 36.4%
Fitness Testing:    177.8 seconds, 49.9%
Report:              48.5 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 81
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 82
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 82
;;******************************
;; -*- Number IO problem report - generation 82
Test total error for best: 61519.625900000035
Test mean error for best: 30.75981
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.08078165   
Correct output: -141.201628771 | Program output: -81.08078165  
Correct output: 23.3844813461  | Program output: 23.08078165   
Correct output: 91.3818662575  | Program output: 112.08078165  
Correct output: 6.0991287499   | Program output: -10.08078165  
Correct output: 90.6078865723  | Program output: 88.08078165   
Correct output: -16.3558496064 | Program output: 68.08078165   
Correct output: 85.2320058807  | Program output: 93.08078165   
Correct output: -28.7080490162 | Program output: -43.08078165  
Correct output: -10.4844827466 | Program output: 61.08078165   
Correct output: -59.408072605  | Program output: -68.08078165  
Correct output: 59.1228402624  | Program output: 28.08078165   
Correct output: -132.1998002816 | Program output: -84.08078165  
Correct output: -128.9949320478 | Program output: -41.08078165  
Correct output: -78.0962956202 | Program output: -27.08078165  
Correct output: -35.919351649  | Program output: -63.08078165  
Correct output: -56.0400311694 | Program output: -24.08078165  
Correct output: 137.4302481607 | Program output: 57.08078165   
Correct output: 32.7727726522  | Program output: 55.08078165   
Correct output: -26.6497561561 | Program output: 86.08078165   
Correct output: 95.3927116996  | Program output: 17.08078165   
Correct output: -65.8806745395 | Program output: -83.08078165  
Correct output: 48.7839285535  | Program output: 26.08078165   
Correct output: 176.7350863211 | Program output: 107.08078165  
Correct output: -87.9710392115 | Program output: 3.08078165    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 94} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_mod} {:instruction tag_integer_498} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction 14.354813298606842} {:instruction float_max} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction integer_swap} {:instruction integer_mult} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction float_swap} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction float_rot} {:instruction float_swap} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction 76} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction -99} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_max} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_cos} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_max} {:instruction print_integer})
Best program: (float_yankdup in1 float_mod float_tan 94 integer_dup_times float_yankdup integer_mod integer_mod tag_integer_498 float_rot -83 integer_div 53.660195741514 14.354813298606842 float_max integer_dup_times integer_dup_times float_dup integer_rot float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup float_tan 42.446747745532946 float_yank float_yankdup integer_swap integer_mult integer_inc integer_inc float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger print_float integer_mod 80 float_min print_integer integer_mult float_dup float_swap integer_swap integer_shove integer_dup_items integer_swap integer_shove print_integer float_cos print_integer float_swap 76 float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove print_integer float_cos float_rot float_swap float_dup integer_dup_items integer_swap integer_shove print_integer float_pop float_yankdup float_swap 76 integer_stackdepth print_integer integer_mult float_pop float_yankdup float_swap integer_dup integer_dup_times float_pop float_dup integer_swap -99 float_min float_stackdepth float_max print_integer float_stackdepth float_rot float_min float_stackdepth float_cos float_rot float_div float_pop float_yank float_max print_integer)
Errors: [74.4802 9 60.1208 9 0.3037 6 20.6989 9 16.1799 11 2.5271 8 84.4366 11 7.8488 10 14.3727 7 71.5653 9 8.6727 6 31.0421 11 48.119 9 87.9142 13 51.0155 10 27.1614 9 31.9592 8 80.3495 8 22.308 9 112.7305 9 78.3119 9 17.2001 8 22.7031 9 69.6543 10 91.0518 10]
Total: 1359.7272999999996
Mean: 27.194546
Genome size: 117
Size: 118
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 4194.8179561000015
Median total errors in population: 1370.7272999999996
Error averages by case: (180.9475320999995 10.306 178.0287914000016 9.912 112.71859630000066 7.917 133.25559790000133 10.185 136.87569440000064 11.239 118.02158830000174 9.297 185.9193719999975 11.82 122.0639629000021 10.626 136.15068140000272 8.836 174.7103407999984 9.383 132.22712279999863 7.229 140.25948520000134 10.697 167.5966858000024 10.594 201.1245855999983 12.401 168.32069590000032 10.634 147.2106142999996 10.67 151.58700070000023 9.574 185.7369839000011 9.932 132.38757530000137 9.949 210.52097050000262 10.605 180.23836240000045 10.565 139.61166550000013 9.282 132.79458339999937 10.062 177.82905459999753 10.429 195.40141269999708 11.135)
Error minima by case: (45.4802 7 51.1208 8 0.3037 5 6.6989 8 2.0183 7 0.4723 6 12.0037 8 0.1512 7 0.3485 6 9.619 7 0.3273 4 12.0421 8 39.119 8 47.9141 9 2.9845 7 7.5598 8 15.0408 7 39.3495 8 9.674 7 1.7098 8 2.6881 7 3.2001 6 1.7031 8 55.6543 7 6.8903 7)
Average genome size in population (length): 113.369
Average program size in population (points): 114.369
Average percent parens in population: 0.009
Minimum age in population: 115.5948071256965
Maximum age in population: 120.062944992099
Average age in population: 118.0485826390161
Median age in population: 118.0903987046436
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.904
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.904
Total error diversity:				 0.274
Error (vector) diversity:			 0.394
Behavioral diversity:				 0.394
--- Run Statistics ---
Number of program evaluations used so far: 83000
Number of point (instruction) evaluations so far: 172382850
--- Timings ---
Current time: 1529615247549 milliseconds
Total Time:         361.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       131.0 seconds, 36.3%
Fitness Testing:    180.7 seconds, 50.1%
Report:              49.2 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 82
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 83
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 83
;;******************************
;; -*- Number IO problem report - generation 83
Test total error for best: 61519.625900000035
Test mean error for best: 30.75981
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.08078165   
Correct output: -141.201628771 | Program output: -81.08078165  
Correct output: 23.3844813461  | Program output: 23.08078165   
Correct output: 91.3818662575  | Program output: 112.08078165  
Correct output: 6.0991287499   | Program output: -10.08078165  
Correct output: 90.6078865723  | Program output: 88.08078165   
Correct output: -16.3558496064 | Program output: 68.08078165   
Correct output: 85.2320058807  | Program output: 93.08078165   
Correct output: -28.7080490162 | Program output: -43.08078165  
Correct output: -10.4844827466 | Program output: 61.08078165   
Correct output: -59.408072605  | Program output: -68.08078165  
Correct output: 59.1228402624  | Program output: 28.08078165   
Correct output: -132.1998002816 | Program output: -84.08078165  
Correct output: -128.9949320478 | Program output: -41.08078165  
Correct output: -78.0962956202 | Program output: -27.08078165  
Correct output: -35.919351649  | Program output: -63.08078165  
Correct output: -56.0400311694 | Program output: -24.08078165  
Correct output: 137.4302481607 | Program output: 57.08078165   
Correct output: 32.7727726522  | Program output: 55.08078165   
Correct output: -26.6497561561 | Program output: 86.08078165   
Correct output: 95.3927116996  | Program output: 17.08078165   
Correct output: -65.8806745395 | Program output: -83.08078165  
Correct output: 48.7839285535  | Program output: 26.08078165   
Correct output: 176.7350863211 | Program output: 107.08078165  
Correct output: -87.9710392115 | Program output: 3.08078165    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 94} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_mod} {:instruction tag_integer_498} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction 14.354813298606842} {:instruction float_max} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction print_float} {:instruction float_dec} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_add} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction float_rot} {:instruction float_swap} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_yankdup} {:instruction print_integer} {:instruction float_swap} {:instruction 77} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction -99} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_max} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_cos} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_max} {:instruction print_integer})
Best program: (float_yankdup in1 float_mod float_tan 94 integer_dup_times float_yankdup integer_mod integer_mod tag_integer_498 float_rot -83 integer_div 53.660195741514 14.354813298606842 float_max integer_dup_times integer_dup_times float_dup integer_rot float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger print_float float_dec 80 float_min print_integer integer_mult float_dup print_integer float_swap 76 float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_add integer_shove print_integer float_cos float_rot float_swap float_dup integer_dup_items integer_swap integer_shove integer_shove print_integer integer_yankdup print_integer float_swap 77 integer_stackdepth print_integer integer_mult float_pop float_yankdup float_swap integer_dup integer_dup_times float_pop float_dup integer_swap -99 float_min float_stackdepth float_max print_integer float_stackdepth float_rot float_min float_stackdepth float_cos float_rot float_div float_pop float_yank float_max print_integer)
Errors: [74.4802 9 60.1208 9 0.3037 6 20.6989 9 16.1799 11 2.5271 8 84.4366 11 7.8488 10 14.3727 7 71.5653 9 8.6727 6 31.0421 11 48.119 9 87.9142 13 51.0155 10 27.1614 9 31.9592 8 80.3495 8 22.308 9 112.7305 9 78.3119 9 17.2001 8 22.7031 9 69.6543 10 91.0518 10]
Total: 1359.7272999999996
Mean: 27.194546
Genome size: 102
Size: 103
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4182.345656400006
Median total errors in population: 1370.4235499999998
Error averages by case: (180.05466479999924 10.21 176.0425381000016 9.79 114.00426240000085 7.607 133.13018740000146 10.073 135.6057167000011 11.187 116.71463140000189 9.14 186.9539257999973 11.752 121.91078860000219 10.614 134.62606250000263 8.587 175.70552799999822 9.454 130.39355249999858 7.172 140.62193280000156 10.852 165.5550998000026 10.416 199.6334274999986 12.497 166.9046053 10.606 145.76264379999972 10.363 150.0913769999999 9.266 185.9196601000012 9.706 132.5331995000014 9.96 211.6339302000026 10.378 181.32273790000045 10.311 137.8459963000002 9.174 133.18570859999937 9.973 176.60571779999756 10.396 199.04876159999685 11.055)
Error minima by case: (67.4802 8 49.1208 7 0.3035 5 8.6982 8 0.0183 8 0.4729 6 12.0037 9 0.8488 8 0.3485 6 13.1013 7 1.6727 4 5.4626 7 37.119 7 76.9142 10 40.0155 8 7.5598 8 20.9592 7 73.3495 8 1.692 7 1.7098 8 41.7325 7 10.2001 7 4.8763 7 62.6543 7 35.8903 9)
Average genome size in population (length): 112.818
Average program size in population (points): 113.818
Average percent parens in population: 0.009
Minimum age in population: 117.2286799303468
Maximum age in population: 121.4877331680094
Average age in population: 119.3917253984043
Median age in population: 119.4259517007423
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.899
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.899
Total error diversity:				 0.246
Error (vector) diversity:			 0.357
Behavioral diversity:				 0.357
--- Run Statistics ---
Number of program evaluations used so far: 84000
Number of point (instruction) evaluations so far: 175203300
--- Timings ---
Current time: 1529615252608 milliseconds
Total Time:         365.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       132.5 seconds, 36.2%
Fitness Testing:    183.5 seconds, 50.1%
Report:              49.8 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 83
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 84
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 84
;;******************************
;; -*- Number IO problem report - generation 84
Test total error for best: 61519.625900000035
Test mean error for best: 30.75981
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.08078165   
Correct output: -141.201628771 | Program output: -81.08078165  
Correct output: 23.3844813461  | Program output: 23.08078165   
Correct output: 91.3818662575  | Program output: 112.08078165  
Correct output: 6.0991287499   | Program output: -10.08078165  
Correct output: 90.6078865723  | Program output: 88.08078165   
Correct output: -16.3558496064 | Program output: 68.08078165   
Correct output: 85.2320058807  | Program output: 93.08078165   
Correct output: -28.7080490162 | Program output: -43.08078165  
Correct output: -10.4844827466 | Program output: 61.08078165   
Correct output: -59.408072605  | Program output: -68.08078165  
Correct output: 59.1228402624  | Program output: 28.08078165   
Correct output: -132.1998002816 | Program output: -84.08078165  
Correct output: -128.9949320478 | Program output: -41.08078165  
Correct output: -78.0962956202 | Program output: -27.08078165  
Correct output: -35.919351649  | Program output: -63.08078165  
Correct output: -56.0400311694 | Program output: -24.08078165  
Correct output: 137.4302481607 | Program output: 57.08078165   
Correct output: 32.7727726522  | Program output: 55.08078165   
Correct output: -26.6497561561 | Program output: 86.08078165   
Correct output: 95.3927116996  | Program output: 17.08078165   
Correct output: -65.8806745395 | Program output: -83.08078165  
Correct output: 48.7839285535  | Program output: 26.08078165   
Correct output: 176.7350863211 | Program output: 107.08078165  
Correct output: -87.9710392115 | Program output: 3.08078165    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction integer_rot} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction float_rot} {:instruction float_swap} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_swap} {:instruction print_integer} {:instruction integer_yankdup} {:instruction print_integer} {:instruction float_swap} {:instruction 77} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction -99} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_max} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_cos} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_max} {:instruction print_integer})
Best program: (float_yankdup in1 integer_rot float_tan 93 integer_dup_times float_yankdup integer_dup_items -83 integer_div 53.660195741514 float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger print_float integer_mod 80 float_min print_integer integer_mult float_dup print_integer float_swap 76 float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove print_integer float_cos float_rot float_swap float_dup integer_dup_items integer_swap integer_shove integer_swap print_integer integer_yankdup print_integer float_swap 77 integer_stackdepth print_integer integer_mult float_pop float_yankdup float_swap integer_dup integer_dup_times float_pop float_dup integer_swap -99 float_min float_stackdepth float_max print_integer float_stackdepth float_rot float_min float_stackdepth float_cos float_rot float_div float_pop float_yank float_max print_integer)
Errors: [74.4802 9 60.1208 9 0.3037 6 20.6989 9 16.1799 11 2.5271 8 84.4366 11 7.8488 10 14.3727 7 71.5653 9 8.6727 6 31.0421 11 48.119 9 87.9142 13 51.0155 10 27.1614 9 31.9592 8 80.3495 8 22.308 9 112.7305 9 78.3119 9 17.2001 8 22.7031 9 69.6543 10 91.0518 10]
Total: 1359.7272999999996
Mean: 27.194546
Genome size: 103
Size: 104
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4566.525919800007
Median total errors in population: 1370.7272999999996
Error averages by case: (186.96910919999934 10.384 202.06710910000203 10.057 120.66161820000039 7.776 143.7687663000009 10.357 160.48618539999993 11.414 124.76501640000164 9.38 193.03260149999753 11.905 130.73689630000217 10.762 161.06482050000304 8.78 182.07707429999854 9.798 156.41922639999845 7.693 146.97634790000095 11.181 191.95812190000294 10.548 224.2389256999989 12.84 192.37303980000047 10.954 170.80768730000096 10.555 176.11273650000092 9.423 193.43333080000113 9.781 140.82995960000056 10.362 217.05987850000287 10.385 187.92880300000056 10.381 164.58206379999908 9.5 139.5756367999999 10.178 184.42096889999746 10.616 217.95499569999677 11.215)
Error minima by case: (56.0 7 49.1208 7 0.3017 5 9.6989 8 2.0183 8 0.4723 5 6.7013 9 0.1511 8 2.3727 6 9.9056 7 0.6701 4 1.0421 8 37.119 8 54.0 10 5.0162 8 15.1614 7 14.7662 7 44.0 8 9.674 7 3.5746 7 4.0 8 4.9256 7 5.8763 8 57.6543 7 10.0 8)
Average genome size in population (length): 112.156
Average program size in population (points): 113.156
Average percent parens in population: 0.009
Minimum age in population: 118.6119612590217
Maximum age in population: 122.7798804871317
Average age in population: 120.7270831957255
Median age in population: 120.7414897994815
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.916
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.916
Total error diversity:				 0.29
Error (vector) diversity:			 0.397
Behavioral diversity:				 0.397
--- Run Statistics ---
Number of program evaluations used so far: 85000
Number of point (instruction) evaluations so far: 178007225
--- Timings ---
Current time: 1529615257665 milliseconds
Total Time:         371.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       134.2 seconds, 36.1%
Fitness Testing:    186.2 seconds, 50.2%
Report:              50.6 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 84
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 85
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 85
;;******************************
;; -*- Number IO problem report - generation 85
Test total error for best: 61519.625900000035
Test mean error for best: 30.75981
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.08078165   
Correct output: -141.201628771 | Program output: -81.08078165  
Correct output: 23.3844813461  | Program output: 23.08078165   
Correct output: 91.3818662575  | Program output: 112.08078165  
Correct output: 6.0991287499   | Program output: -10.08078165  
Correct output: 90.6078865723  | Program output: 88.08078165   
Correct output: -16.3558496064 | Program output: 68.08078165   
Correct output: 85.2320058807  | Program output: 93.08078165   
Correct output: -28.7080490162 | Program output: -43.08078165  
Correct output: -10.4844827466 | Program output: 61.08078165   
Correct output: -59.408072605  | Program output: -68.08078165  
Correct output: 59.1228402624  | Program output: 28.08078165   
Correct output: -132.1998002816 | Program output: -84.08078165  
Correct output: -128.9949320478 | Program output: -41.08078165  
Correct output: -78.0962956202 | Program output: -27.08078165  
Correct output: -35.919351649  | Program output: -63.08078165  
Correct output: -56.0400311694 | Program output: -24.08078165  
Correct output: 137.4302481607 | Program output: 57.08078165   
Correct output: 32.7727726522  | Program output: 55.08078165   
Correct output: -26.6497561561 | Program output: 86.08078165   
Correct output: 95.3927116996  | Program output: 17.08078165   
Correct output: -65.8806745395 | Program output: -83.08078165  
Correct output: 48.7839285535  | Program output: 26.08078165   
Correct output: 176.7350863211 | Program output: 107.08078165  
Correct output: -87.9710392115 | Program output: 3.08078165    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 94} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction 53.660195741514} {:instruction 14.354813298606842} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_cos} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_yank} {:instruction float_cos} {:instruction print_integer} {:instruction float_dup_items} {:instruction 76} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_min} {:instruction print_integer} {:instruction integer_yankdup} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_dec} {:instruction integer_dup} {:instruction in2} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction -99} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_max} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_cos} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_max} {:instruction print_integer})
Best program: (float_yankdup in1 float_mod float_tan 94 integer_dup_times float_yankdup 53.660195741514 14.354813298606842 integer_rot float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger print_float integer_mod 80 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove integer_dup_items integer_swap print_integer float_swap 76 float_cos integer_swap integer_shove integer_dup_items integer_swap integer_shove integer_yank float_cos print_integer float_dup_items 76 float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove print_integer float_cos print_integer float_swap float_dup integer_dup_items integer_swap integer_min print_integer integer_yankdup print_integer float_swap 76 integer_stackdepth print_integer integer_mult float_pop float_yankdup float_swap float_dec integer_dup in2 float_pop float_dup integer_swap -99 float_min float_stackdepth float_max print_integer float_stackdepth float_rot float_min float_stackdepth float_cos float_rot float_div float_pop float_yank float_max print_integer)
Errors: [74.4802 9 60.1208 9 0.3037 6 20.6989 9 16.1799 11 2.5271 8 84.4366 11 7.8488 10 14.3727 7 71.5653 9 8.6727 6 31.0421 11 48.119 9 87.9142 13 51.0155 10 27.1614 9 31.9592 8 80.3495 8 22.308 9 112.7305 9 78.3119 9 17.2001 8 22.7031 9 69.6543 10 91.0518 10]
Total: 1359.7272999999996
Mean: 27.194546
Genome size: 118
Size: 119
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 4324.751913500011
Median total errors in population: 1370.7272999999996
Error averages by case: (182.23793339999884 10.326 188.47442640000193 9.95 115.62736050000055 7.548 134.96249910000154 10.358 145.8573201000006 11.307 119.77454320000184 9.332 186.51732719999697 11.848 123.84586750000238 10.67 145.81814820000298 8.527 175.48773229999833 9.848 142.5044577999987 7.661 141.9453440000014 11.205 178.19185580000288 10.393 210.7990764999992 12.877 178.14101750000054 10.928 156.69333410000024 10.315 161.46516050000042 9.223 186.8433939000015 9.584 133.87889470000107 10.428 210.70541440000287 10.184 183.07743880000055 10.217 149.82352059999957 9.41 134.47920949999943 10.107 179.8015128999976 10.567 203.81912459999666 11.167)
Error minima by case: (43.4802 8 51.1208 7 0.3035 5 8.6989 8 0.9817 7 0.4729 6 12.0037 7 0.1512 6 0.3485 6 6.8683 7 0.6701 4 5.4626 7 39.119 7 54.0 10 40.0 8 7.5598 8 22.9592 7 37.3495 7 9.674 8 1.7098 7 4.0 6 6.2001 7 3.5492 7 58.6543 8 10.0 6)
Average genome size in population (length): 112.575
Average program size in population (points): 113.575
Average percent parens in population: 0.009
Minimum age in population: 119.7363355326775
Maximum age in population: 123.9212905866722
Average age in population: 122.1744808718747
Median age in population: 122.1989303775371
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.927
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.927
Total error diversity:				 0.277
Error (vector) diversity:			 0.358
Behavioral diversity:				 0.358
--- Run Statistics ---
Number of program evaluations used so far: 86000
Number of point (instruction) evaluations so far: 180821650
--- Timings ---
Current time: 1529615263041 milliseconds
Total Time:         376.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       135.8 seconds, 36.1%
Fitness Testing:    189.1 seconds, 50.3%
Report:              51.3 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 85
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 86
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 86
;;******************************
;; -*- Number IO problem report - generation 86
Test total error for best: 61519.625900000035
Test mean error for best: 30.75981
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.08078165   
Correct output: -141.201628771 | Program output: -81.08078165  
Correct output: 23.3844813461  | Program output: 23.08078165   
Correct output: 91.3818662575  | Program output: 112.08078165  
Correct output: 6.0991287499   | Program output: -10.08078165  
Correct output: 90.6078865723  | Program output: 88.08078165   
Correct output: -16.3558496064 | Program output: 68.08078165   
Correct output: 85.2320058807  | Program output: 93.08078165   
Correct output: -28.7080490162 | Program output: -43.08078165  
Correct output: -10.4844827466 | Program output: 61.08078165   
Correct output: -59.408072605  | Program output: -68.08078165  
Correct output: 59.1228402624  | Program output: 28.08078165   
Correct output: -132.1998002816 | Program output: -84.08078165  
Correct output: -128.9949320478 | Program output: -41.08078165  
Correct output: -78.0962956202 | Program output: -27.08078165  
Correct output: -35.919351649  | Program output: -63.08078165  
Correct output: -56.0400311694 | Program output: -24.08078165  
Correct output: 137.4302481607 | Program output: 57.08078165   
Correct output: 32.7727726522  | Program output: 55.08078165   
Correct output: -26.6497561561 | Program output: 86.08078165   
Correct output: 95.3927116996  | Program output: 17.08078165   
Correct output: -65.8806745395 | Program output: -83.08078165  
Correct output: 48.7839285535  | Program output: 26.08078165   
Correct output: 176.7350863211 | Program output: 107.08078165  
Correct output: -87.9710392115 | Program output: 3.08078165    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction integer_rot} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_add} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction float_rot} {:instruction float_swap} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_yankdup} {:instruction print_integer} {:instruction float_swap} {:instruction 77} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction -99} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_max} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_cos} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_max} {:instruction print_integer})
Best program: (float_yankdup in1 integer_rot float_tan 93 integer_dup_times float_yankdup integer_dup_items -83 integer_div 53.660195741514 float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger print_float integer_mod 80 float_min print_integer integer_mult float_dup print_integer float_swap 76 float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_add integer_shove print_integer float_cos float_rot float_swap float_dup integer_dup_items integer_swap integer_shove integer_shove print_integer integer_yankdup print_integer float_swap 77 integer_stackdepth print_integer integer_mult float_pop float_yankdup float_swap integer_dup integer_dup_times float_pop float_dup integer_swap -99 float_min float_stackdepth float_max print_integer float_stackdepth float_rot float_min float_stackdepth float_cos float_rot float_div float_pop float_yank float_max print_integer)
Errors: [74.4802 9 60.1208 9 0.3037 6 20.6989 9 16.1799 11 2.5271 8 84.4366 11 7.8488 10 14.3727 7 71.5653 9 8.6727 6 31.0421 11 48.119 9 87.9142 13 51.0155 10 27.1614 9 31.9592 8 80.3495 8 22.308 9 112.7305 9 78.3119 9 17.2001 8 22.7031 9 69.6543 10 91.0518 10]
Total: 1359.7272999999996
Mean: 27.194546
Genome size: 107
Size: 108
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4885.395073600007
Median total errors in population: 1369.7272999999996
Error averages by case: (206.1406004999985 10.37 206.38044560000205 9.948 140.48255040000052 7.528 162.05493919999984 10.327 165.5949980999995 11.299 145.37788430000248 9.325 210.5826018999963 11.839 151.3050597000029 10.688 166.14323840000327 8.549 199.87434219999756 9.897 161.70017379999828 7.688 166.96598650000044 11.287 196.3199115000032 10.363 228.38923129999912 12.913 196.553143200001 10.932 176.75764760000112 10.281 180.27849320000107 9.193 212.526804600002 9.525 159.11888929999978 10.429 234.07549090000313 10.159 205.81226870000057 10.176 168.83796259999875 9.412 158.73549000000102 10.124 204.0885033999972 10.651 227.2294166999961 11.166)
Error minima by case: (32.439 8 50.1215 7 0.3017 5 7.6991 8 3.981 7 0.4729 7 12.0037 8 0.8488 7 0.3485 6 10.7432 7 2.3273 5 11.0427 8 38.1197 8 54.0 10 21.0155 8 7.1608 8 1.0408 7 38.5698 7 9.3077 8 1.7098 8 4.0 6 2.8005 7 2.7038 8 0.7351 8 30.8903 8)
Average genome size in population (length): 112.674
Average program size in population (points): 113.674
Average percent parens in population: 0.009
Minimum age in population: 120.7542113290035
Maximum age in population: 125.4332881457005
Average age in population: 123.5527850706661
Median age in population: 123.5846179228171
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.916
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.916
Total error diversity:				 0.262
Error (vector) diversity:			 0.345
Behavioral diversity:				 0.345
--- Run Statistics ---
Number of program evaluations used so far: 87000
Number of point (instruction) evaluations so far: 183638525
--- Timings ---
Current time: 1529615268540 milliseconds
Total Time:         382.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       137.3 seconds, 36.0%
Fitness Testing:    192.4 seconds, 50.4%
Report:              52.1 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 86
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 87
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 87
;;******************************
;; -*- Number IO problem report - generation 87
Test total error for best: 61519.625900000035
Test mean error for best: 30.75981
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.08078165   
Correct output: -141.201628771 | Program output: -81.08078165  
Correct output: 23.3844813461  | Program output: 23.08078165   
Correct output: 91.3818662575  | Program output: 112.08078165  
Correct output: 6.0991287499   | Program output: -10.08078165  
Correct output: 90.6078865723  | Program output: 88.08078165   
Correct output: -16.3558496064 | Program output: 68.08078165   
Correct output: 85.2320058807  | Program output: 93.08078165   
Correct output: -28.7080490162 | Program output: -43.08078165  
Correct output: -10.4844827466 | Program output: 61.08078165   
Correct output: -59.408072605  | Program output: -68.08078165  
Correct output: 59.1228402624  | Program output: 28.08078165   
Correct output: -132.1998002816 | Program output: -84.08078165  
Correct output: -128.9949320478 | Program output: -41.08078165  
Correct output: -78.0962956202 | Program output: -27.08078165  
Correct output: -35.919351649  | Program output: -63.08078165  
Correct output: -56.0400311694 | Program output: -24.08078165  
Correct output: 137.4302481607 | Program output: 57.08078165   
Correct output: 32.7727726522  | Program output: 55.08078165   
Correct output: -26.6497561561 | Program output: 86.08078165   
Correct output: 95.3927116996  | Program output: 17.08078165   
Correct output: -65.8806745395 | Program output: -83.08078165  
Correct output: 48.7839285535  | Program output: 26.08078165   
Correct output: 176.7350863211 | Program output: 107.08078165  
Correct output: -87.9710392115 | Program output: 3.08078165    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_integer} {:instruction in1} {:instruction integer_rot} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_div} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_add} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction float_rot} {:instruction float_swap} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_yankdup} {:instruction print_integer} {:instruction float_swap} {:instruction 77} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction -99} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_max} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_cos} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_max} {:instruction print_integer})
Best program: (print_integer in1 integer_rot float_tan 93 integer_dup_times float_yankdup integer_div -83 integer_div 53.660195741514 float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger print_float integer_mod 80 float_min print_integer integer_mult float_dup print_integer float_swap 76 float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_add integer_shove print_integer float_cos float_rot float_swap float_dup integer_dup_items integer_swap integer_shove integer_shove print_integer integer_yankdup print_integer float_swap 77 integer_stackdepth print_integer integer_mult float_pop float_yankdup float_swap integer_dup integer_dup_times float_pop float_dup integer_swap -99 float_min float_stackdepth float_max print_integer float_stackdepth float_rot float_min float_stackdepth float_cos float_rot float_div float_pop float_yank float_max print_integer)
Errors: [74.4802 9 60.1208 9 0.3037 6 20.6989 9 16.1799 11 2.5271 8 84.4366 11 7.8488 10 14.3727 7 71.5653 9 8.6727 6 31.0421 11 48.119 9 87.9142 13 51.0155 10 27.1614 9 31.9592 8 80.3495 8 22.308 9 112.7305 9 78.3119 9 17.2001 8 22.7031 9 69.6543 10 91.0518 10]
Total: 1359.7272999999996
Mean: 27.194546
Genome size: 99
Size: 100
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4116.709293400009
Median total errors in population: 1369.7272999999996
Error averages by case: (173.28383989999978 10.218 180.34726170000172 9.831 105.7918306000008 7.402 128.9255668000017 10.248 136.96046770000106 11.223 109.82813640000217 9.22 178.2857058999977 11.752 116.7829476000025 10.596 139.75068030000287 8.446 167.15607119999856 9.797 133.30102659999858 7.542 132.38560760000206 11.172 169.9731594000028 10.284 202.94750699999923 12.825 170.0574069000001 10.878 147.80758859999975 10.173 153.28271500000014 9.053 180.73726600000086 9.431 125.03052690000152 10.335 202.6817280000027 10.021 173.5164296000005 10.112 143.64415229999994 9.288 124.8421426999992 9.987 170.75268299999755 10.536 197.209845699997 11.057)
Error minima by case: (64.4802 7 48.1208 7 0.3017 5 8.6989 8 0.9817 8 0.4729 6 12.0037 9 0.1512 8 4.3727 6 9.9056 8 0.3273 4 3.0421 8 36.119 8 54.0 9 8.0155 8 17.1614 8 14.0407 7 70.3495 7 9.674 8 1.7098 8 39.3119 8 4.2001 7 4.8763 8 59.6543 8 17.8903 8)
Average genome size in population (length): 112.775
Average program size in population (points): 113.775
Average percent parens in population: 0.009
Minimum age in population: 122.6426061407695
Maximum age in population: 126.8674437611397
Average age in population: 124.9011933863219
Median age in population: 124.9471693390623
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.926
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.926
Total error diversity:				 0.269
Error (vector) diversity:			 0.352
Behavioral diversity:				 0.352
--- Run Statistics ---
Number of program evaluations used so far: 88000
Number of point (instruction) evaluations so far: 186457900
--- Timings ---
Current time: 1529615273458 milliseconds
Total Time:         386.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       138.9 seconds, 35.9%
Fitness Testing:    195.1 seconds, 50.4%
Report:              52.8 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 87
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 88
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 88
;;******************************
;; -*- Number IO problem report - generation 88
Test total error for best: 61519.625900000035
Test mean error for best: 30.75981
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.08078165   
Correct output: -141.201628771 | Program output: -81.08078165  
Correct output: 23.3844813461  | Program output: 23.08078165   
Correct output: 91.3818662575  | Program output: 112.08078165  
Correct output: 6.0991287499   | Program output: -10.08078165  
Correct output: 90.6078865723  | Program output: 88.08078165   
Correct output: -16.3558496064 | Program output: 68.08078165   
Correct output: 85.2320058807  | Program output: 93.08078165   
Correct output: -28.7080490162 | Program output: -43.08078165  
Correct output: -10.4844827466 | Program output: 61.08078165   
Correct output: -59.408072605  | Program output: -68.08078165  
Correct output: 59.1228402624  | Program output: 28.08078165   
Correct output: -132.1998002816 | Program output: -84.08078165  
Correct output: -128.9949320478 | Program output: -41.08078165  
Correct output: -78.0962956202 | Program output: -27.08078165  
Correct output: -35.919351649  | Program output: -63.08078165  
Correct output: -56.0400311694 | Program output: -24.08078165  
Correct output: 137.4302481607 | Program output: 57.08078165   
Correct output: 32.7727726522  | Program output: 55.08078165   
Correct output: -26.6497561561 | Program output: 86.08078165   
Correct output: 95.3927116996  | Program output: 17.08078165   
Correct output: -65.8806745395 | Program output: -83.08078165  
Correct output: 48.7839285535  | Program output: 26.08078165   
Correct output: 176.7350863211 | Program output: 107.08078165  
Correct output: -87.9710392115 | Program output: 3.08078165    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_integer} {:instruction in1} {:instruction integer_rot} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_div} {:instruction -83} {:instruction integer_div} {:instruction 54.34656699849809} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction 75} {:instruction float_swap} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_yank} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_min} {:instruction print_integer} {:instruction integer_yankdup} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction float_swap} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction -99} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_max} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_cos} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_max} {:instruction print_integer})
Best program: (print_integer in1 integer_rot float_tan 93 integer_dup_times float_yankdup integer_div -83 integer_div 54.34656699849809 float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger print_float integer_mod 80 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove integer_dup_items integer_swap integer_shove print_integer float_cos 75 float_swap integer_dup_items integer_swap integer_shove integer_yank float_cos print_integer float_swap 76 float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove print_integer float_cos print_integer float_swap float_dup integer_dup_items integer_swap integer_min print_integer integer_yankdup print_integer float_swap 76 integer_stackdepth print_integer float_swap float_pop float_yankdup float_swap integer_dup integer_dup integer_dup_times float_pop float_dup integer_swap -99 float_min float_stackdepth float_max print_integer float_stackdepth float_rot float_min float_stackdepth float_cos float_rot float_div float_pop float_yank float_max print_integer)
Errors: [74.4802 9 60.1208 9 0.3037 6 20.6989 9 16.1799 11 2.5271 8 84.4366 11 7.8488 10 14.3727 7 71.5653 9 8.6727 6 31.0421 11 48.119 9 87.9142 13 51.0155 10 27.1614 9 31.9592 8 80.3495 8 22.308 9 112.7305 9 78.3119 9 17.2001 8 22.7031 9 69.6543 10 91.0518 10]
Total: 1359.7272999999996
Mean: 27.194546
Genome size: 122
Size: 123
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 4496.422786500008
Median total errors in population: 1370.7272999999996
Error averages by case: (190.15785759999926 10.318 193.41819720000183 9.875 122.01126180000067 7.499 145.1708794000006 10.314 152.74584730000007 11.328 128.04881400000204 9.311 194.31978469999672 11.85 133.0682809000026 10.679 154.00488720000317 8.509 183.17910109999846 9.909 148.30688729999835 7.602 148.13997340000097 11.264 183.166447200003 10.381 216.09763249999918 12.919 183.84036940000036 10.931 163.86638950000048 10.258 167.31855490000038 9.16 196.73097310000153 9.502 140.98717430000096 10.423 218.96277150000287 10.15 188.4745560000005 10.185 156.56198539999923 9.347 140.80615739999985 10.058 187.56841319999737 10.618 205.96659019999672 11.113)
Error minima by case: (50.4804 8 50.1208 6 0.3017 5 7.6982 8 4.2186 7 0.4729 6 12.0037 9 0.1512 7 0.3485 6 9.9056 8 0.3273 5 4.4626 9 38.119 8 77.9141 10 41.0155 8 7.5598 8 21.9592 7 38.3498 7 4.2131 8 1.7098 8 1.6883 7 6.1995 7 4.8763 8 21.2649 8 7.3318 9)
Average genome size in population (length): 112.757
Average program size in population (points): 113.757
Average percent parens in population: 0.009
Minimum age in population: 123.7940850184662
Maximum age in population: 128.2991948987166
Average age in population: 126.195225981049
Median age in population: 126.2874329504763
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.935
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.935
Total error diversity:				 0.251
Error (vector) diversity:			 0.35
Behavioral diversity:				 0.35
--- Run Statistics ---
Number of program evaluations used so far: 89000
Number of point (instruction) evaluations so far: 189276850
--- Timings ---
Current time: 1529615279008 milliseconds
Total Time:         392.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       140.5 seconds, 35.8%
Fitness Testing:    198.1 seconds, 50.5%
Report:              53.5 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 88
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 89
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 89
;;******************************
;; -*- Number IO problem report - generation 89
Test total error for best: 61519.625900000035
Test mean error for best: 30.75981
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.08078165   
Correct output: -141.201628771 | Program output: -81.08078165  
Correct output: 23.3844813461  | Program output: 23.08078165   
Correct output: 91.3818662575  | Program output: 112.08078165  
Correct output: 6.0991287499   | Program output: -10.08078165  
Correct output: 90.6078865723  | Program output: 88.08078165   
Correct output: -16.3558496064 | Program output: 68.08078165   
Correct output: 85.2320058807  | Program output: 93.08078165   
Correct output: -28.7080490162 | Program output: -43.08078165  
Correct output: -10.4844827466 | Program output: 61.08078165   
Correct output: -59.408072605  | Program output: -68.08078165  
Correct output: 59.1228402624  | Program output: 28.08078165   
Correct output: -132.1998002816 | Program output: -84.08078165  
Correct output: -128.9949320478 | Program output: -41.08078165  
Correct output: -78.0962956202 | Program output: -27.08078165  
Correct output: -35.919351649  | Program output: -63.08078165  
Correct output: -56.0400311694 | Program output: -24.08078165  
Correct output: 137.4302481607 | Program output: 57.08078165   
Correct output: 32.7727726522  | Program output: 55.08078165   
Correct output: -26.6497561561 | Program output: 86.08078165   
Correct output: 95.3927116996  | Program output: 17.08078165   
Correct output: -65.8806745395 | Program output: -83.08078165  
Correct output: 48.7839285535  | Program output: 26.08078165   
Correct output: 176.7350863211 | Program output: 107.08078165  
Correct output: -87.9710392115 | Program output: 3.08078165    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction integer_rot} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction integer_pop} {:instruction integer_dup_items} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_add} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction print_float} {:instruction float_cos} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction float_rot} {:instruction float_sub} {:instruction float_dup} {:instruction integer_dup_items} {:instruction float_swap} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_yankdup} {:instruction print_integer} {:instruction float_swap} {:instruction 77} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_sub} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction -99} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_max} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_cos} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_max} {:instruction print_integer})
Best program: (float_yankdup in1 integer_rot float_tan 93 integer_dup_times integer_pop integer_dup_items -83 integer_div 53.660195741514 float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_add integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger print_float float_cos 80 float_min print_integer integer_mult float_dup print_integer float_swap 76 float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_dup integer_shove print_integer float_cos float_rot float_sub float_dup integer_dup_items float_swap float_dup integer_dup_items integer_swap integer_shove integer_shove print_integer integer_yankdup print_integer float_swap 77 integer_stackdepth print_integer integer_sub float_pop float_yankdup float_swap integer_dup integer_dup_times float_pop float_dup integer_swap -99 float_min float_stackdepth float_max print_integer float_stackdepth float_rot float_min float_stackdepth float_cos float_rot float_div float_pop float_yank float_max print_integer)
Errors: [74.4802 9 60.1208 9 0.3037 6 20.6989 9 16.1799 11 2.5271 8 84.4366 11 7.8488 10 14.3727 7 71.5653 9 8.6727 6 31.0421 11 48.119 9 87.9142 13 51.0155 10 27.1614 9 31.9592 8 80.3495 8 22.308 9 112.7305 9 78.3119 9 17.2001 8 22.7031 9 69.6543 10 91.0518 10]
Total: 1359.7272999999996
Mean: 27.194546
Genome size: 115
Size: 116
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4297.057344800007
Median total errors in population: 1370.7272499999997
Error averages by case: (182.752061899999 10.243 184.85053430000195 9.802 116.69693000000075 7.412 136.32853900000129 10.27 141.82802490000046 11.199 120.20666780000204 9.228 189.0105707999967 11.787 124.2532635000023 10.636 141.48068250000264 8.405 177.96866449999786 9.831 137.91990779999873 7.534 142.59605020000078 11.202 174.51355870000276 10.256 207.41825209999917 12.875 174.75833840000078 10.879 152.4276896000003 10.177 158.07084930000062 9.068 187.4194861000017 9.45 135.73570760000095 10.343 213.1959509000029 10.071 183.8420149000004 10.114 145.24648499999947 9.275 135.15566259999977 10.015 180.14788569999723 10.515 201.57256669999651 11.074)
Error minima by case: (56.0 8 47.1208 8 0.3027 5 5.3011 8 0.0183 6 0.4729 6 13.4362 9 0.1512 8 0.3485 6 9.1272 8 0.6727 5 6.0421 8 35.119 7 54.0 10 7.29 8 7.5598 8 13.398 6 44.0 7 9.308 8 14.5843 8 4.0 7 1.2001 7 0.2969 7 53.6543 8 10.0 7)
Average genome size in population (length): 112.317
Average program size in population (points): 113.317
Average percent parens in population: 0.009
Minimum age in population: 125.2869788348232
Maximum age in population: 129.4632413463244
Average age in population: 127.5549536288901
Median age in population: 127.5716552230489
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.924
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.924
Total error diversity:				 0.26
Error (vector) diversity:			 0.344
Behavioral diversity:				 0.344
--- Run Statistics ---
Number of program evaluations used so far: 90000
Number of point (instruction) evaluations so far: 192084850
--- Timings ---
Current time: 1529615283949 milliseconds
Total Time:         397.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       142.0 seconds, 35.7%
Fitness Testing:    200.9 seconds, 50.5%
Report:              54.4 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 89
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 90
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 90
;;******************************
;; -*- Number IO problem report - generation 90
Test total error for best: 61519.625900000035
Test mean error for best: 30.75981
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.08078165   
Correct output: -141.201628771 | Program output: -81.08078165  
Correct output: 23.3844813461  | Program output: 23.08078165   
Correct output: 91.3818662575  | Program output: 112.08078165  
Correct output: 6.0991287499   | Program output: -10.08078165  
Correct output: 90.6078865723  | Program output: 88.08078165   
Correct output: -16.3558496064 | Program output: 68.08078165   
Correct output: 85.2320058807  | Program output: 93.08078165   
Correct output: -28.7080490162 | Program output: -43.08078165  
Correct output: -10.4844827466 | Program output: 61.08078165   
Correct output: -59.408072605  | Program output: -68.08078165  
Correct output: 59.1228402624  | Program output: 28.08078165   
Correct output: -132.1998002816 | Program output: -84.08078165  
Correct output: -128.9949320478 | Program output: -41.08078165  
Correct output: -78.0962956202 | Program output: -27.08078165  
Correct output: -35.919351649  | Program output: -63.08078165  
Correct output: -56.0400311694 | Program output: -24.08078165  
Correct output: 137.4302481607 | Program output: 57.08078165   
Correct output: 32.7727726522  | Program output: 55.08078165   
Correct output: -26.6497561561 | Program output: 86.08078165   
Correct output: 95.3927116996  | Program output: 17.08078165   
Correct output: -65.8806745395 | Program output: -83.08078165  
Correct output: 48.7839285535  | Program output: 26.08078165   
Correct output: 176.7350863211 | Program output: 107.08078165  
Correct output: -87.9710392115 | Program output: 3.08078165    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_yankdup} {:instruction in1} {:instruction integer_rot} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_yank} {:instruction integer_swap} {:instruction integer_flush} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction print_integer} {:instruction float_swap} {:instruction integer_dup_times} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_min} {:instruction print_integer} {:instruction integer_yankdup} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_yankdup} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction print_integer} {:instruction integer_mod} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction -99} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_max} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_cos} {:instruction 88.48353280813589} {:instruction float_yank} {:instruction float_rot} {:instruction print_integer})
Best program: (float_yankdup float_yankdup in1 integer_rot float_tan 93 integer_dup_times float_yankdup integer_dup_items -83 integer_div 53.660195741514 float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_yankdup integer_inc integer_inc integer_inc integer_inc integer_inc float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger print_float integer_mod 80 float_min print_integer integer_mult float_dup integer_yank integer_swap integer_flush integer_dup_items integer_swap integer_shove print_integer float_cos print_integer print_integer float_swap integer_dup_times float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items float_cos print_integer float_swap float_dup integer_dup_items integer_swap integer_min print_integer integer_yankdup float_cos print_integer float_swap float_dup integer_dup_items integer_swap integer_shove print_integer integer_yankdup print_integer float_swap 76 integer_stackdepth print_integer integer_mult float_pop float_yankdup print_integer integer_mod float_pop float_yankdup float_swap integer_dup integer_dup_times float_pop float_dup integer_swap -99 float_min float_stackdepth float_max print_integer float_stackdepth float_rot float_min float_stackdepth float_cos 88.48353280813589 float_yank float_rot print_integer)
Errors: [74.4802 9 60.1208 9 0.3037 6 20.6989 9 16.1799 11 2.5271 8 84.4366 11 7.8488 10 14.3727 7 71.5653 9 8.6727 6 31.0421 11 48.119 9 87.9142 13 51.0155 10 27.1614 9 31.9592 8 80.3495 8 22.308 9 112.7305 9 78.3119 9 17.2001 8 22.7031 9 69.6543 10 91.0518 10]
Total: 1359.7272999999996
Mean: 27.194546
Genome size: 124
Size: 125
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 4210.322407200009
Median total errors in population: 1369.7272999999996
Error averages by case: (178.7624698999996 10.18 181.88635850000162 9.788 111.87532980000034 7.364 133.24510760000177 10.225 139.90190300000108 11.219 115.86301300000179 9.168 182.96405649999758 11.756 121.02835660000244 10.576 140.36914000000272 8.403 172.00130219999878 9.763 135.79650209999892 7.534 138.30988720000147 11.179 171.4860077000027 10.239 204.6220644999993 12.855 171.7871255000002 10.853 151.3131775999998 10.162 155.03211770000036 9.07 185.29298360000087 9.392 130.23068820000125 10.281 207.2217160000026 9.98 179.72872260000054 10.062 143.16385340000022 9.262 130.8842005999992 9.984 177.02861029999764 10.49 199.69271309999678 11.05)
Error minima by case: (56.0 8 14.1235 7 0.3035 5 7.6989 8 1.9817 7 0.4729 6 3.7243 10 0.1512 8 0.3485 6 9.1272 8 0.3273 4 1.9559 8 2.1216 7 41.9168 10 5.0181 8 4.022 8 11.0749 7 44.0 7 9.308 8 1.7098 7 4.0 8 6.2001 7 4.8763 7 58.6543 8 10.0 9)
Average genome size in population (length): 111.97
Average program size in population (points): 112.97
Average percent parens in population: 0.009
Minimum age in population: 126.3172804859872
Maximum age in population: 131.2387905161903
Average age in population: 128.925746975182
Median age in population: 129.0008940932134
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.915
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.915
Total error diversity:				 0.272
Error (vector) diversity:			 0.36
Behavioral diversity:				 0.36
--- Run Statistics ---
Number of program evaluations used so far: 91000
Number of point (instruction) evaluations so far: 194884100
--- Timings ---
Current time: 1529615289389 milliseconds
Total Time:         402.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       143.8 seconds, 35.7%
Fitness Testing:    203.7 seconds, 50.6%
Report:              55.0 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 90
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 91
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 91
;;******************************
;; -*- Number IO problem report - generation 91
Test total error for best: 61519.625900000035
Test mean error for best: 30.75981
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.08078165   
Correct output: -141.201628771 | Program output: -81.08078165  
Correct output: 23.3844813461  | Program output: 23.08078165   
Correct output: 91.3818662575  | Program output: 112.08078165  
Correct output: 6.0991287499   | Program output: -10.08078165  
Correct output: 90.6078865723  | Program output: 88.08078165   
Correct output: -16.3558496064 | Program output: 68.08078165   
Correct output: 85.2320058807  | Program output: 93.08078165   
Correct output: -28.7080490162 | Program output: -43.08078165  
Correct output: -10.4844827466 | Program output: 61.08078165   
Correct output: -59.408072605  | Program output: -68.08078165  
Correct output: 59.1228402624  | Program output: 28.08078165   
Correct output: -132.1998002816 | Program output: -84.08078165  
Correct output: -128.9949320478 | Program output: -41.08078165  
Correct output: -78.0962956202 | Program output: -27.08078165  
Correct output: -35.919351649  | Program output: -63.08078165  
Correct output: -56.0400311694 | Program output: -24.08078165  
Correct output: 137.4302481607 | Program output: 57.08078165   
Correct output: 32.7727726522  | Program output: 55.08078165   
Correct output: -26.6497561561 | Program output: 86.08078165   
Correct output: 95.3927116996  | Program output: 17.08078165   
Correct output: -65.8806745395 | Program output: -83.08078165  
Correct output: 48.7839285535  | Program output: 26.08078165   
Correct output: 176.7350863211 | Program output: 107.08078165  
Correct output: -87.9710392115 | Program output: 3.08078165    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction integer_rot} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction float_rot} {:instruction float_swap} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_yankdup} {:instruction print_integer} {:instruction tagged_527} {:instruction 77} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction -99} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_max} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_cos} {:instruction float_rot} {:instruction float_div} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_mult} {:instruction print_integer})
Best program: (float_yankdup in1 integer_rot float_tan 93 integer_dup_times float_yankdup integer_dup_items float_yankdup integer_dup_items -83 integer_div 53.660195741514 float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger print_float integer_mod 80 float_min print_integer integer_mult float_dup print_integer float_swap 76 float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove print_integer float_cos float_rot float_swap float_dup integer_dup_items integer_swap integer_shove integer_shove print_integer integer_yankdup print_integer tagged_527 77 integer_stackdepth print_integer integer_mult float_pop float_yankdup float_swap integer_dup integer_dup_times float_pop float_dup integer_swap -99 float_min float_stackdepth float_max print_integer float_stackdepth float_rot float_min float_stackdepth float_cos float_rot float_div float_div float_pop float_yank float_mult print_integer)
Errors: [74.4802 9 60.1208 9 0.3037 6 20.6989 9 16.1799 11 2.5271 8 84.4366 11 7.8488 10 14.3727 7 71.5653 9 8.6727 6 31.0421 11 48.119 9 87.9142 13 51.0155 10 27.1614 9 31.9592 8 80.3495 8 22.308 9 112.7305 9 78.3119 9 17.2001 8 22.7031 9 69.6543 10 91.0518 10]
Total: 1359.7272999999996
Mean: 27.194546
Genome size: 103
Size: 104
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4397.791859300008
Median total errors in population: 1369.7272999999996
Error averages by case: (188.43973009999914 10.356 187.09253190000175 9.944 122.11510760000088 7.531 141.6353381000008 10.368 145.06557400000057 11.372 126.59803070000207 9.338 191.87522149999694 11.838 130.6111939000025 10.692 144.4915242000027 8.541 181.028700299998 9.897 141.08086299999877 7.695 148.41295340000093 11.261 176.79046210000288 10.36 209.39379299999922 12.955 176.63221610000022 10.973 155.32525590000026 10.27 160.00296050000043 9.214 192.97651090000141 9.512 140.29869520000062 10.438 215.68212530000284 10.123 188.99578630000047 10.186 148.35396779999977 9.461 141.0011302000002 10.124 186.09276579999732 10.587 203.60842149999672 11.155)
Error minima by case: (54.439 8 47.1208 8 0.3037 5 7.6989 8 0.9817 7 0.4729 6 11.834 9 0.8488 8 0.3485 6 5.9627 8 0.6727 5 4.4626 8 35.119 8 56.9142 10 6.0155 9 7.5598 8 14.0408 7 44.0 7 2.308 8 1.7098 8 4.0 8 4.2001 7 5.8763 8 21.2649 8 10.0 8)
Average genome size in population (length): 111.592
Average program size in population (points): 112.592
Average percent parens in population: 0.009
Minimum age in population: 127.7418673074244
Maximum age in population: 132.5469750174397
Average age in population: 130.217019541586
Median age in population: 130.2578616434085
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.932
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.932
Total error diversity:				 0.266
Error (vector) diversity:			 0.35
Behavioral diversity:				 0.35
--- Run Statistics ---
Number of program evaluations used so far: 92000
Number of point (instruction) evaluations so far: 197673950
--- Timings ---
Current time: 1529615294593 milliseconds
Total Time:         408.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       145.6 seconds, 35.7%
Fitness Testing:    206.5 seconds, 50.6%
Report:              55.9 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 91
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 92
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 92
;;******************************
;; -*- Number IO problem report - generation 92
Test total error for best: 61519.625900000035
Test mean error for best: 30.75981
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.08078165   
Correct output: -141.201628771 | Program output: -81.08078165  
Correct output: 23.3844813461  | Program output: 23.08078165   
Correct output: 91.3818662575  | Program output: 112.08078165  
Correct output: 6.0991287499   | Program output: -10.08078165  
Correct output: 90.6078865723  | Program output: 88.08078165   
Correct output: -16.3558496064 | Program output: 68.08078165   
Correct output: 85.2320058807  | Program output: 93.08078165   
Correct output: -28.7080490162 | Program output: -43.08078165  
Correct output: -10.4844827466 | Program output: 61.08078165   
Correct output: -59.408072605  | Program output: -68.08078165  
Correct output: 59.1228402624  | Program output: 28.08078165   
Correct output: -132.1998002816 | Program output: -84.08078165  
Correct output: -128.9949320478 | Program output: -41.08078165  
Correct output: -78.0962956202 | Program output: -27.08078165  
Correct output: -35.919351649  | Program output: -63.08078165  
Correct output: -56.0400311694 | Program output: -24.08078165  
Correct output: 137.4302481607 | Program output: 57.08078165   
Correct output: 32.7727726522  | Program output: 55.08078165   
Correct output: -26.6497561561 | Program output: 86.08078165   
Correct output: 95.3927116996  | Program output: 17.08078165   
Correct output: -65.8806745395 | Program output: -83.08078165  
Correct output: 48.7839285535  | Program output: 26.08078165   
Correct output: 176.7350863211 | Program output: 107.08078165  
Correct output: -87.9710392115 | Program output: 3.08078165    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_yankdup} {:instruction in1} {:instruction integer_rot} {:instruction float_tan} {:instruction 93} {:instruction integer_mult} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction integer_dup_items} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction integer_swap} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction float_swap} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction float_min} {:instruction float_yankdup} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction float_swap} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_min} {:instruction print_integer} {:instruction integer_yankdup} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction float_swap} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction -99} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_max} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_cos} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_rot} {:instruction print_integer})
Best program: (float_yankdup float_yankdup in1 integer_rot float_tan 93 integer_mult float_yankdup integer_dup_items -83 integer_div 53.660195741514 float_swap float_yankdup float_tan 42.446747745532946 float_yank integer_dup_items in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_yankdup float_tan 42.446747745532946 float_yank integer_fromfloat float_tan 42.446747745532946 float_yank float_yankdup integer_swap integer_inc integer_inc integer_inc float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger print_float integer_mod 80 float_min print_integer integer_mult float_dup float_swap integer_swap integer_shove integer_dup_items float_min float_yankdup print_integer float_cos print_integer float_swap 76 float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove float_swap float_dup integer_dup_items integer_swap integer_min print_integer integer_yankdup print_integer float_swap 76 integer_stackdepth print_integer float_swap float_pop float_yankdup float_swap integer_dup integer_dup integer_dup_times float_pop float_dup integer_swap -99 float_min float_stackdepth float_max print_integer float_stackdepth float_rot float_min float_stackdepth float_cos float_rot float_div float_pop float_yank float_rot print_integer)
Errors: [74.4802 9 60.1208 9 0.3037 6 20.6989 9 16.1799 11 2.5271 8 84.4366 11 7.8488 10 14.3727 7 71.5653 9 8.6727 6 31.0421 11 48.119 9 87.9142 13 51.0155 10 27.1614 9 31.9592 8 80.3495 8 22.308 9 112.7305 9 78.3119 9 17.2001 8 22.7031 9 69.6543 10 91.0518 10]
Total: 1359.7272999999996
Mean: 27.194546
Genome size: 122
Size: 123
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 4330.011461200008
Median total errors in population: 1369.7272999999996
Error averages by case: (184.39863119999868 10.234 186.50049900000187 9.85 116.89506340000105 7.402 137.88993860000073 10.258 144.82018400000018 11.279 120.99695160000226 9.275 187.85830759999666 11.761 126.84582270000263 10.638 144.37047050000308 8.461 176.81252809999765 9.83 140.79718709999847 7.567 143.30970470000094 11.219 176.16728320000294 10.309 209.1548838999992 12.914 176.52219010000098 10.915 155.28346040000062 10.171 159.830937800001 9.078 189.93045480000194 9.42 135.3310855000014 10.372 212.09923000000273 10.071 183.1737118000005 10.081 148.1341649999993 9.284 135.85623829999977 10.036 181.7515916999974 10.552 203.21794019999618 11.086)
Error minima by case: (34.4802 8 48.1208 6 0.2907 5 8.6989 8 4.981 8 0.4729 6 12.0037 9 0.1512 8 0.3485 6 9.5163 8 0.3273 4 5.4626 9 36.119 8 75.9141 10 39.0155 8 7.5598 8 19.9592 7 28.3495 8 9.674 8 1.7098 8 4.0 7 7.2001 7 4.7038 8 59.6543 7 10.0 8)
Average genome size in population (length): 111.428
Average program size in population (points): 112.428
Average percent parens in population: 0.009
Minimum age in population: 129.1106169868539
Maximum age in population: 133.452748039971
Average age in population: 131.4965167061537
Median age in population: 131.5442083178285
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.93
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.93
Total error diversity:				 0.268
Error (vector) diversity:			 0.337
Behavioral diversity:				 0.337
--- Run Statistics ---
Number of program evaluations used so far: 93000
Number of point (instruction) evaluations so far: 200459850
--- Timings ---
Current time: 1529615299761 milliseconds
Total Time:         413.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       146.9 seconds, 35.6%
Fitness Testing:    209.4 seconds, 50.7%
Report:              56.5 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 92
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 93
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 93
;;******************************
;; -*- Number IO problem report - generation 93
Test total error for best: 61519.625900000035
Test mean error for best: 30.75981
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.08078165   
Correct output: -141.201628771 | Program output: -81.08078165  
Correct output: 23.3844813461  | Program output: 23.08078165   
Correct output: 91.3818662575  | Program output: 112.08078165  
Correct output: 6.0991287499   | Program output: -10.08078165  
Correct output: 90.6078865723  | Program output: 88.08078165   
Correct output: -16.3558496064 | Program output: 68.08078165   
Correct output: 85.2320058807  | Program output: 93.08078165   
Correct output: -28.7080490162 | Program output: -43.08078165  
Correct output: -10.4844827466 | Program output: 61.08078165   
Correct output: -59.408072605  | Program output: -68.08078165  
Correct output: 59.1228402624  | Program output: 28.08078165   
Correct output: -132.1998002816 | Program output: -84.08078165  
Correct output: -128.9949320478 | Program output: -41.08078165  
Correct output: -78.0962956202 | Program output: -27.08078165  
Correct output: -35.919351649  | Program output: -63.08078165  
Correct output: -56.0400311694 | Program output: -24.08078165  
Correct output: 137.4302481607 | Program output: 57.08078165   
Correct output: 32.7727726522  | Program output: 55.08078165   
Correct output: -26.6497561561 | Program output: 86.08078165   
Correct output: 95.3927116996  | Program output: 17.08078165   
Correct output: -65.8806745395 | Program output: -83.08078165  
Correct output: 48.7839285535  | Program output: 26.08078165   
Correct output: 176.7350863211 | Program output: 107.08078165  
Correct output: -87.9710392115 | Program output: 3.08078165    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 94} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_mod} {:instruction tag_integer_498} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction 14.354813298606842} {:instruction float_max} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction integer_swap} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_cos} {:instruction integer_inc} {:instruction integer_inc} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction float_swap} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_cos} {:instruction tag_integer_314} {:instruction float_swap} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_div} {:instruction print_integer} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction 76} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction -99} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_max} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_cos} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_mult} {:instruction print_integer})
Best program: (integer_fromfloat in1 float_mod float_tan 94 integer_dup_times float_yankdup integer_mod integer_mod tag_integer_498 float_rot -83 integer_div 53.660195741514 14.354813298606842 float_max integer_dup_times integer_dup_times float_dup integer_rot float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup float_tan 42.446747745532946 float_yank float_yankdup integer_swap integer_inc integer_inc integer_inc float_yankdup in2 integer_inc integer_inc float_cos integer_inc integer_inc in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger print_float integer_mod 80 float_min print_integer integer_mult float_dup float_swap integer_swap integer_shove integer_dup_items integer_swap integer_shove print_integer float_cos print_integer float_swap 76 float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove float_dup_times float_cos tag_integer_314 float_swap float_dup integer_dup_items integer_swap integer_div print_integer float_pop float_yankdup float_swap 76 integer_stackdepth print_integer integer_mult float_pop float_yankdup float_swap integer_dup integer_dup_times float_pop float_dup integer_swap -99 float_min float_stackdepth float_max print_integer float_stackdepth float_rot float_min float_stackdepth float_cos float_rot float_div float_pop float_yank float_mult print_integer)
Errors: [74.4802 9 60.1208 9 0.3037 6 20.6989 9 16.1799 11 2.5271 8 84.4366 11 7.8488 10 14.3727 7 71.5653 9 8.6727 6 31.0421 11 48.119 9 87.9142 13 51.0155 10 27.1614 9 31.9592 8 80.3495 8 22.308 9 112.7305 9 78.3119 9 17.2001 8 22.7031 9 69.6543 10 91.0518 10]
Total: 1359.7272999999996
Mean: 27.194546
Genome size: 123
Size: 124
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 4616.8538279000095
Median total errors in population: 1369.7272999999996
Error averages by case: (193.40981369999835 10.282 199.49818250000206 9.884 125.84842870000102 7.444 150.6393658999995 10.291 156.27186959999895 11.259 131.6368894000027 9.255 199.11715049999583 11.843 137.52129570000315 10.663 158.40476420000357 8.497 188.46150869999727 9.868 153.72959549999817 7.589 152.14571140000024 11.256 189.33002100000317 10.333 221.3048395999992 12.911 189.96478560000142 10.892 168.21525860000187 10.21 173.38350990000168 9.132 200.0007388000024 9.477 146.19142209999973 10.383 223.56469240000297 10.121 192.10736020000058 10.12 161.91878509999782 9.347 145.58965730000114 10.06 191.0129400999972 10.621 214.76224139999576 11.085)
Error minima by case: (25.5198 8 47.1215 7 0.3017 5 7.6983 8 0.0182 8 0.4729 6 16.3911 10 0.1512 8 0.3485 6 9.9056 8 0.3273 5 2.9579 9 35.1196 8 54.0 10 38.0161 8 7.5598 8 18.9599 6 19.6505 7 9.3074 8 26.685 7 21.6881 7 5.1995 7 4.8763 8 57.6543 8 10.0 9)
Average genome size in population (length): 110.894
Average program size in population (points): 111.894
Average percent parens in population: 0.009
Minimum age in population: 130.220196400438
Maximum age in population: 135.1352785824799
Average age in population: 132.8678724901484
Median age in population: 132.8782795078441
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.94
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.94
Total error diversity:				 0.271
Error (vector) diversity:			 0.339
Behavioral diversity:				 0.339
--- Run Statistics ---
Number of program evaluations used so far: 94000
Number of point (instruction) evaluations so far: 203232275
--- Timings ---
Current time: 1529615305056 milliseconds
Total Time:         418.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       148.5 seconds, 35.5%
Fitness Testing:    212.4 seconds, 50.8%
Report:              57.4 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 93
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 94
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 94
;;******************************
;; -*- Number IO problem report - generation 94
Test total error for best: 61519.625900000035
Test mean error for best: 30.75981
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.08078165   
Correct output: -141.201628771 | Program output: -81.08078165  
Correct output: 23.3844813461  | Program output: 23.08078165   
Correct output: 91.3818662575  | Program output: 112.08078165  
Correct output: 6.0991287499   | Program output: -10.08078165  
Correct output: 90.6078865723  | Program output: 88.08078165   
Correct output: -16.3558496064 | Program output: 68.08078165   
Correct output: 85.2320058807  | Program output: 93.08078165   
Correct output: -28.7080490162 | Program output: -43.08078165  
Correct output: -10.4844827466 | Program output: 61.08078165   
Correct output: -59.408072605  | Program output: -68.08078165  
Correct output: 59.1228402624  | Program output: 28.08078165   
Correct output: -132.1998002816 | Program output: -84.08078165  
Correct output: -128.9949320478 | Program output: -41.08078165  
Correct output: -78.0962956202 | Program output: -27.08078165  
Correct output: -35.919351649  | Program output: -63.08078165  
Correct output: -56.0400311694 | Program output: -24.08078165  
Correct output: 137.4302481607 | Program output: 57.08078165   
Correct output: 32.7727726522  | Program output: 55.08078165   
Correct output: -26.6497561561 | Program output: 86.08078165   
Correct output: 95.3927116996  | Program output: 17.08078165   
Correct output: -65.8806745395 | Program output: -83.08078165  
Correct output: 48.7839285535  | Program output: 26.08078165   
Correct output: 176.7350863211 | Program output: 107.08078165  
Correct output: -87.9710392115 | Program output: 3.08078165    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction integer_rot} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_swap} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_yankdup} {:instruction print_integer} {:instruction float_swap} {:instruction 77} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction -99} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_max} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_cos} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction tagged_606} {:instruction print_integer})
Best program: (float_yankdup in1 integer_rot float_tan 93 integer_dup_times float_yankdup integer_dup_items -83 integer_div 53.660195741514 float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger float_frominteger print_float integer_mod 80 float_min print_integer integer_mult float_dup print_integer float_swap 76 float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove print_integer float_stackdepth float_rot float_swap float_dup integer_dup_items integer_swap integer_shove integer_shove print_integer integer_yankdup print_integer float_swap 77 integer_stackdepth print_integer integer_mult float_pop float_yankdup float_swap integer_dup integer_dup_times float_pop float_dup integer_swap -99 float_min float_stackdepth float_max print_integer float_stackdepth float_rot float_min float_stackdepth float_cos float_rot float_div float_pop float_yank tagged_606 print_integer)
Errors: [74.4802 9 60.1208 9 0.3037 6 20.6989 9 16.1799 11 2.5271 8 84.4366 11 7.8488 10 14.3727 7 71.5653 9 8.6727 6 31.0421 11 48.119 9 87.9142 13 51.0155 10 27.1614 9 31.9592 8 80.3495 8 22.308 9 112.7305 9 78.3119 9 17.2001 8 22.7031 9 69.6543 10 91.0518 10]
Total: 1359.7272999999996
Mean: 27.194546
Genome size: 108
Size: 109
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4087.944645700009
Median total errors in population: 1369.7272999999996
Error averages by case: (174.77101799999966 10.162 176.04961530000145 9.777 106.72024840000049 7.304 129.74599930000164 10.187 132.16884070000117 11.224 111.46000170000157 9.149 180.08856719999775 11.739 117.54306450000227 10.571 134.3911519000027 8.32 168.86307039999878 9.749 128.70911629999873 7.425 133.4949915000015 11.172 165.58935230000247 10.182 199.01608949999923 12.881 165.9754973 10.827 143.4465570999997 10.104 149.10121690000005 8.997 182.29985230000094 9.3 126.54721830000125 10.283 204.75002730000256 10.005 174.59971010000055 10.013 138.06649239999982 9.208 125.9428446999992 9.961 171.78921199999772 10.479 196.80189029999713 10.994)
Error minima by case: (56.0 7 48.1216 7 0.3027 5 8.6982 8 1.9817 8 0.4729 6 11.0264 9 0.1512 7 0.3485 6 5.1551 8 0.3273 4 3.9595 9 36.1197 8 58.9142 10 8.0155 8 0.8386 7 12.9599 6 44.0 8 8.674 8 1.7098 8 4.0 7 4.2001 7 1.2969 8 56.6543 8 10.0 8)
Average genome size in population (length): 110.172
Average program size in population (points): 111.172
Average percent parens in population: 0.009
Minimum age in population: 131.7614445337575
Maximum age in population: 136.4156211532413
Average age in population: 134.168824375061
Median age in population: 134.1965311824622
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.928
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.928
Total error diversity:				 0.251
Error (vector) diversity:			 0.337
Behavioral diversity:				 0.337
--- Run Statistics ---
Number of program evaluations used so far: 95000
Number of point (instruction) evaluations so far: 205986750
--- Timings ---
Current time: 1529615310052 milliseconds
Total Time:         423.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       150.2 seconds, 35.5%
Fitness Testing:    215.1 seconds, 50.8%
Report:              58.1 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 94
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 95
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 95
;;******************************
;; -*- Number IO problem report - generation 95
Test total error for best: 61519.625900000035
Test mean error for best: 30.75981
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.08078165   
Correct output: -141.201628771 | Program output: -81.08078165  
Correct output: 23.3844813461  | Program output: 23.08078165   
Correct output: 91.3818662575  | Program output: 112.08078165  
Correct output: 6.0991287499   | Program output: -10.08078165  
Correct output: 90.6078865723  | Program output: 88.08078165   
Correct output: -16.3558496064 | Program output: 68.08078165   
Correct output: 85.2320058807  | Program output: 93.08078165   
Correct output: -28.7080490162 | Program output: -43.08078165  
Correct output: -10.4844827466 | Program output: 61.08078165   
Correct output: -59.408072605  | Program output: -68.08078165  
Correct output: 59.1228402624  | Program output: 28.08078165   
Correct output: -132.1998002816 | Program output: -84.08078165  
Correct output: -128.9949320478 | Program output: -41.08078165  
Correct output: -78.0962956202 | Program output: -27.08078165  
Correct output: -35.919351649  | Program output: -63.08078165  
Correct output: -56.0400311694 | Program output: -24.08078165  
Correct output: 137.4302481607 | Program output: 57.08078165   
Correct output: 32.7727726522  | Program output: 55.08078165   
Correct output: -26.6497561561 | Program output: 86.08078165   
Correct output: 95.3927116996  | Program output: 17.08078165   
Correct output: -65.8806745395 | Program output: -83.08078165  
Correct output: 48.7839285535  | Program output: 26.08078165   
Correct output: 176.7350863211 | Program output: 107.08078165  
Correct output: -87.9710392115 | Program output: 3.08078165    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_integer} {:instruction in1} {:instruction integer_rot} {:instruction float_tan} {:instruction in1} {:instruction integer_rot} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction float_cos} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_shove} {:instruction float_cos} {:instruction print_integer} {:instruction print_integer} {:instruction 76} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_pop} {:instruction integer_swap} {:instruction integer_shove} {:instruction tagged_920} {:instruction float_cos} {:instruction float_rot} {:instruction in2} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction float_swap} {:instruction 77} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_sub} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction -99} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_max} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_cos} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_max} {:instruction print_integer})
Best program: (print_integer in1 integer_rot float_tan in1 integer_rot float_tan 93 integer_dup_times float_yankdup integer_dup_items -83 integer_div 53.660195741514 float_swap float_yankdup float_tan 42.446747745532946 float_yank integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger print_float integer_mod 80 float_min print_integer integer_mult float_dup float_cos integer_swap integer_shove integer_dup_items integer_swap integer_shove integer_shove float_cos print_integer print_integer 76 float_swap 78 float_min print_integer integer_mult float_dup integer_pop integer_swap integer_shove tagged_920 float_cos float_rot in2 float_dup integer_dup_items integer_swap integer_shove integer_shove print_integer integer_yankdup integer_inc float_swap 77 integer_stackdepth print_integer integer_sub float_pop float_yankdup float_swap integer_dup integer_dup_times float_pop float_dup integer_swap -99 float_min float_stackdepth float_max print_integer float_stackdepth float_rot float_rot float_min float_stackdepth float_cos float_rot float_div float_pop float_yank float_max print_integer)
Errors: [74.4802 9 60.1208 9 0.3037 6 20.6989 9 16.1799 11 2.5271 8 84.4366 11 7.8488 10 14.3727 7 71.5653 9 8.6727 6 31.0421 11 48.119 9 87.9142 13 51.0155 10 27.1614 9 31.9592 8 80.3495 8 22.308 9 112.7305 9 78.3119 9 17.2001 8 22.7031 9 69.6543 10 91.0518 10]
Total: 1359.7272999999996
Mean: 27.194546
Genome size: 110
Size: 111
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4419.097158700009
Median total errors in population: 1369.7272999999996
Error averages by case: (188.50848769999874 10.307 188.09000380000185 9.84 122.42647650000113 7.446 141.23618380000093 10.332 146.79134120000015 11.306 126.23736580000222 9.284 193.2887528999967 11.836 130.03784920000277 10.678 146.55288950000306 8.499 182.279709699998 9.825 142.95694319999848 7.635 148.816116600001 11.293 177.85844610000277 10.304 210.52789949999917 12.909 178.1892291000006 10.91 157.51827170000058 10.256 161.64870910000087 9.109 193.17455300000174 9.455 140.60113550000094 10.383 217.4434035000029 10.085 189.38290940000056 10.114 150.32915379999937 9.325 141.39428769999998 10.043 185.79781239999738 10.58 205.14122799999657 11.114)
Error minima by case: (50.4809 8 48.1208 7 0.3027 5 1.6982 8 5.0183 7 0.4729 6 12.0037 7 0.8488 6 4.3727 6 9.4851 7 1.3273 4 15.0 7 36.119 7 54.0 8 39.0155 6 17.1614 7 19.9592 6 44.0 7 9.674 8 1.7098 7 2.3126 6 7.2001 7 6.3372 7 59.6543 8 10.0 6)
Average genome size in population (length): 110.702
Average program size in population (points): 111.702
Average percent parens in population: 0.009
Minimum age in population: 132.7614445337575
Maximum age in population: 137.7103419746981
Average age in population: 135.5025559539338
Median age in population: 135.5471314327193
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.926
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.926
Total error diversity:				 0.263
Error (vector) diversity:			 0.348
Behavioral diversity:				 0.349
--- Run Statistics ---
Number of program evaluations used so far: 96000
Number of point (instruction) evaluations so far: 208754625
--- Timings ---
Current time: 1529615315552 milliseconds
Total Time:         428.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       151.8 seconds, 35.4%
Fitness Testing:    218.1 seconds, 50.9%
Report:              58.8 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 95
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 96
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 96
;;******************************
;; -*- Number IO problem report - generation 96
Test total error for best: 61519.625900000035
Test mean error for best: 30.75981
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.08078165   
Correct output: -141.201628771 | Program output: -81.08078165  
Correct output: 23.3844813461  | Program output: 23.08078165   
Correct output: 91.3818662575  | Program output: 112.08078165  
Correct output: 6.0991287499   | Program output: -10.08078165  
Correct output: 90.6078865723  | Program output: 88.08078165   
Correct output: -16.3558496064 | Program output: 68.08078165   
Correct output: 85.2320058807  | Program output: 93.08078165   
Correct output: -28.7080490162 | Program output: -43.08078165  
Correct output: -10.4844827466 | Program output: 61.08078165   
Correct output: -59.408072605  | Program output: -68.08078165  
Correct output: 59.1228402624  | Program output: 28.08078165   
Correct output: -132.1998002816 | Program output: -84.08078165  
Correct output: -128.9949320478 | Program output: -41.08078165  
Correct output: -78.0962956202 | Program output: -27.08078165  
Correct output: -35.919351649  | Program output: -63.08078165  
Correct output: -56.0400311694 | Program output: -24.08078165  
Correct output: 137.4302481607 | Program output: 57.08078165   
Correct output: 32.7727726522  | Program output: 55.08078165   
Correct output: -26.6497561561 | Program output: 86.08078165   
Correct output: 95.3927116996  | Program output: 17.08078165   
Correct output: -65.8806745395 | Program output: -83.08078165  
Correct output: 48.7839285535  | Program output: 26.08078165   
Correct output: 176.7350863211 | Program output: 107.08078165  
Correct output: -87.9710392115 | Program output: 3.08078165    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction integer_flush} {:instruction 95} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_shove} {:instruction tag_integer_498} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction 14.354813298606842} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_inc} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_swap} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction float_swap} {:instruction 76} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_pop} {:instruction float_swap} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_yankdup} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction -99} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_max} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_cos} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_max} {:instruction print_integer})
Best program: (float_yankdup in1 float_mod integer_flush 95 integer_dup_times float_yankdup integer_mod integer_shove tag_integer_498 float_rot -83 integer_div 53.660195741514 14.354813298606842 integer_rot float_swap float_yankdup float_inc 42.446747745532946 float_yank integer_inc integer_inc integer_inc integer_swap integer_inc integer_inc float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger integer_inc integer_inc integer_inc float_frominteger print_float integer_mod 80 float_min print_integer integer_mult float_dup float_swap 76 float_swap 78 float_min print_integer integer_pop float_dup integer_dup_items integer_swap integer_shove print_integer integer_pop float_swap float_dup integer_dup_items integer_mult integer_shove print_integer integer_yankdup print_integer float_swap 76 integer_stackdepth print_integer -99 float_min float_stackdepth float_max print_integer float_stackdepth float_rot float_min float_stackdepth float_cos float_rot float_div float_pop float_yank float_max print_integer)
Errors: [74.4802 9 60.1208 9 0.3037 6 20.6989 9 16.1799 11 2.5271 8 84.4366 11 7.8488 10 14.3727 7 71.5653 9 8.6727 6 31.0421 11 48.119 9 87.9142 13 51.0155 10 27.1614 9 31.9592 8 80.3495 8 22.308 9 112.7305 9 78.3119 9 17.2001 8 22.7031 9 69.6543 10 91.0518 10]
Total: 1359.7272999999996
Mean: 27.194546
Genome size: 95
Size: 96
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4510.696692500008
Median total errors in population: 1370.7271999999998
Error averages by case: (191.051374399999 10.299 191.9586643000018 9.892 126.37918910000087 7.499 145.30743700000113 10.37 151.54377440000027 11.285 129.18630010000228 9.288 195.8001478999969 11.862 133.32429890000276 10.645 152.13670020000316 8.517 184.9005696999981 9.861 146.49226299999845 7.654 151.63249160000123 11.292 182.65498370000287 10.328 214.4121446999991 12.904 181.98764770000068 10.953 162.9253502000005 10.305 165.47680750000046 9.169 196.6330661000016 9.471 143.65491370000112 10.472 219.8693582000029 10.157 191.94637480000048 10.155 153.75899999999942 9.349 144.26366559999968 10.065 189.22648029999743 10.57 210.70168939999624 11.11)
Error minima by case: (50.4809 8 49.1208 7 0.3035 5 1.6982 8 3.0183 8 0.4722 6 12.0037 9 0.1512 8 0.3485 6 9.619 8 0.3273 5 14.894 8 37.119 8 49.9141 9 0.9845 8 7.5598 8 5.9592 7 44.0 8 9.674 8 1.7098 8 2.3126 7 3.499 7 4.5551 8 56.6543 8 8.8903 8)
Average genome size in population (length): 110.536
Average program size in population (points): 111.536
Average percent parens in population: 0.009
Minimum age in population: 134.5017531700397
Maximum age in population: 138.900162327205
Average age in population: 136.8297374259219
Median age in population: 136.8727911549275
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.941
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.941
Total error diversity:				 0.268
Error (vector) diversity:			 0.359
Behavioral diversity:				 0.359
--- Run Statistics ---
Number of program evaluations used so far: 97000
Number of point (instruction) evaluations so far: 211518325
--- Timings ---
Current time: 1529615320347 milliseconds
Total Time:         433.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       153.3 seconds, 35.3%
Fitness Testing:    220.8 seconds, 50.9%
Report:              59.6 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 96
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 97
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 97
;;******************************
;; -*- Number IO problem report - generation 97
Test total error for best: 61519.625900000035
Test mean error for best: 30.75981
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.08078165   
Correct output: -141.201628771 | Program output: -81.08078165  
Correct output: 23.3844813461  | Program output: 23.08078165   
Correct output: 91.3818662575  | Program output: 112.08078165  
Correct output: 6.0991287499   | Program output: -10.08078165  
Correct output: 90.6078865723  | Program output: 88.08078165   
Correct output: -16.3558496064 | Program output: 68.08078165   
Correct output: 85.2320058807  | Program output: 93.08078165   
Correct output: -28.7080490162 | Program output: -43.08078165  
Correct output: -10.4844827466 | Program output: 61.08078165   
Correct output: -59.408072605  | Program output: -68.08078165  
Correct output: 59.1228402624  | Program output: 28.08078165   
Correct output: -132.1998002816 | Program output: -84.08078165  
Correct output: -128.9949320478 | Program output: -41.08078165  
Correct output: -78.0962956202 | Program output: -27.08078165  
Correct output: -35.919351649  | Program output: -63.08078165  
Correct output: -56.0400311694 | Program output: -24.08078165  
Correct output: 137.4302481607 | Program output: 57.08078165   
Correct output: 32.7727726522  | Program output: 55.08078165   
Correct output: -26.6497561561 | Program output: 86.08078165   
Correct output: 95.3927116996  | Program output: 17.08078165   
Correct output: -65.8806745395 | Program output: -83.08078165  
Correct output: 48.7839285535  | Program output: 26.08078165   
Correct output: 176.7350863211 | Program output: 107.08078165  
Correct output: -87.9710392115 | Program output: 3.08078165    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction integer_rot} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_dec} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_pop} {:instruction float_rot} {:instruction float_swap} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_yankdup} {:instruction print_integer} {:instruction float_swap} {:instruction 77} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction -99} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_max} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_cos} {:instruction integer_dec} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction tagged_668} {:instruction print_integer})
Best program: (float_yankdup in1 integer_rot float_tan 93 integer_dup_times float_yankdup integer_dup_items -83 integer_div 53.660195741514 float_swap float_yankdup float_dec 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger float_frominteger print_float integer_mod 80 float_min print_integer integer_mult float_dup print_integer float_swap 76 float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove print_integer integer_pop float_rot float_swap float_dup integer_dup_items integer_swap integer_shove integer_shove print_integer integer_yankdup print_integer float_swap 77 integer_stackdepth print_integer integer_mult float_pop float_yankdup float_swap integer_dup integer_dup_times float_pop float_dup integer_swap -99 float_min float_stackdepth float_max print_integer float_stackdepth float_rot float_min float_stackdepth float_cos integer_dec float_div float_pop float_yank tagged_668 print_integer)
Errors: [74.4802 9 60.1208 9 0.3037 6 20.6989 9 16.1799 11 2.5271 8 84.4366 11 7.8488 10 14.3727 7 71.5653 9 8.6727 6 31.0421 11 48.119 9 87.9142 13 51.0155 10 27.1614 9 31.9592 8 80.3495 8 22.308 9 112.7305 9 78.3119 9 17.2001 8 22.7031 9 69.6543 10 91.0518 10]
Total: 1359.7272999999996
Mean: 27.194546
Genome size: 108
Size: 109
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4953.027612700008
Median total errors in population: 1370.7271999999998
Error averages by case: (208.13109329999824 10.321 210.60617320000193 9.883 142.57870180000023 7.479 165.44912379999954 10.308 168.40384239999915 11.263 147.60203630000257 9.315 213.73290949999603 11.845 151.53467390000304 10.673 169.73207000000315 8.53 202.9794689999972 9.884 165.2181872999983 7.659 167.4670177000002 11.28 200.61813180000289 10.334 231.78332979999917 12.915 200.85632400000173 10.916 180.31862160000165 10.286 184.71824300000165 9.174 212.97094500000208 9.46 162.28712129999974 10.439 237.33937180000302 10.176 207.17689720000052 10.153 172.3758863999983 9.375 161.05768810000123 10.076 206.16200199999744 10.586 228.51375249999555 11.084)
Error minima by case: (16.4802 8 31.8792 7 0.3027 5 12.6989 8 0.0183 8 0.4729 6 12.0037 9 0.1512 8 0.3485 6 9.619 8 0.3273 5 5.4626 8 40.119 8 35.9142 9 13.0155 8 7.5598 8 3.0408 7 34.3495 7 9.674 8 1.7098 8 4.0 7 5.7999 7 4.5551 8 26.3457 8 10.0 8)
Average genome size in population (length): 110.623
Average program size in population (points): 111.623
Average percent parens in population: 0.009
Minimum age in population: 135.8622053590638
Maximum age in population: 140.3384759450936
Average age in population: 138.1866132971531
Median age in population: 138.2401538304586
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.933
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.933
Total error diversity:				 0.266
Error (vector) diversity:			 0.353
Behavioral diversity:				 0.353
--- Run Statistics ---
Number of program evaluations used so far: 98000
Number of point (instruction) evaluations so far: 214284025
--- Timings ---
Current time: 1529615325279 milliseconds
Total Time:         438.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       154.9 seconds, 35.3%
Fitness Testing:    223.5 seconds, 50.9%
Report:              60.2 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 97
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 98
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 98
;;******************************
;; -*- Number IO problem report - generation 98
Test total error for best: 61519.625900000035
Test mean error for best: 30.75981
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.08078165   
Correct output: -141.201628771 | Program output: -81.08078165  
Correct output: 23.3844813461  | Program output: 23.08078165   
Correct output: 91.3818662575  | Program output: 112.08078165  
Correct output: 6.0991287499   | Program output: -10.08078165  
Correct output: 90.6078865723  | Program output: 88.08078165   
Correct output: -16.3558496064 | Program output: 68.08078165   
Correct output: 85.2320058807  | Program output: 93.08078165   
Correct output: -28.7080490162 | Program output: -43.08078165  
Correct output: -10.4844827466 | Program output: 61.08078165   
Correct output: -59.408072605  | Program output: -68.08078165  
Correct output: 59.1228402624  | Program output: 28.08078165   
Correct output: -132.1998002816 | Program output: -84.08078165  
Correct output: -128.9949320478 | Program output: -41.08078165  
Correct output: -78.0962956202 | Program output: -27.08078165  
Correct output: -35.919351649  | Program output: -63.08078165  
Correct output: -56.0400311694 | Program output: -24.08078165  
Correct output: 137.4302481607 | Program output: 57.08078165   
Correct output: 32.7727726522  | Program output: 55.08078165   
Correct output: -26.6497561561 | Program output: 86.08078165   
Correct output: 95.3927116996  | Program output: 17.08078165   
Correct output: -65.8806745395 | Program output: -83.08078165  
Correct output: 48.7839285535  | Program output: 26.08078165   
Correct output: 176.7350863211 | Program output: 107.08078165  
Correct output: -87.9710392115 | Program output: 3.08078165    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction integer_rot} {:instruction float_dup_times} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in1} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction 78} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_min} {:instruction print_integer} {:instruction integer_yankdup} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction -99} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_max} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_cos} {:instruction float_rot} {:instruction float_div} {:instruction float_div} {:instruction float_sin} {:instruction float_yank} {:instruction float_rot} {:instruction print_integer})
Best program: (float_yankdup in1 integer_rot float_dup_times 93 integer_dup_times float_yankdup integer_dup_items -83 integer_div 53.660195741514 float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in1 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger print_float integer_mod 80 float_min print_integer integer_mult float_dup 78 float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove print_integer float_cos print_integer float_swap float_dup integer_dup_items integer_swap integer_min print_integer integer_yankdup print_integer float_swap 76 integer_stackdepth print_integer integer_mult float_pop float_yankdup float_swap integer_dup integer_dup integer_dup_times float_pop float_dup integer_swap -99 float_min float_stackdepth float_max print_integer float_stackdepth float_rot float_min float_stackdepth float_cos float_rot float_div float_div float_sin float_yank float_rot print_integer)
Errors: [74.4802 9 60.1208 9 0.3037 6 20.6989 9 16.1799 11 2.5271 8 84.4366 11 7.8488 10 14.3727 7 71.5653 9 8.6727 6 31.0421 11 48.119 9 87.9142 13 51.0155 10 27.1614 9 31.9592 8 80.3495 8 22.308 9 112.7305 9 78.3119 9 17.2001 8 22.7031 9 69.6543 10 91.0518 10]
Total: 1359.7272999999996
Mean: 27.194546
Genome size: 102
Size: 103
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4595.2568201000095
Median total errors in population: 1369.7272999999996
Error averages by case: (191.76353219999862 10.297 199.59677150000218 9.881 125.18858210000121 7.45 146.44664400000067 10.275 157.9039857999996 11.287 130.59950070000252 9.289 196.64928789999627 11.823 135.33395070000293 10.687 157.88741800000338 8.476 185.6750010999975 9.869 154.68243849999809 7.622 151.14379640000112 11.287 189.5063681000032 10.327 221.30676739999913 12.904 189.13781500000118 10.906 168.83633880000136 10.212 172.77809510000122 9.109 197.17115920000217 9.443 144.27126280000076 10.394 220.58420000000308 10.12 192.02877880000054 10.104 162.03129149999856 9.34 144.6282746000004 10.076 189.41563919999717 10.563 217.86892069999564 11.08)
Error minima by case: (21.439 8 47.1208 7 0.3035 5 1.6982 8 4.2186 8 0.4729 6 12.0037 9 0.8488 8 0.3485 6 9.9056 8 0.6727 4 4.7763 9 35.119 8 45.9142 10 4.9845 8 7.5598 7 18.9592 6 27.5698 7 9.3073 8 1.7098 8 2.3126 7 7.2001 7 0.2963 8 11.7351 7 4.8903 8)
Average genome size in population (length): 110.146
Average program size in population (points): 111.146
Average percent parens in population: 0.009
Minimum age in population: 136.8622053590638
Maximum age in population: 141.3692111568308
Average age in population: 139.5524998996949
Median age in population: 139.5631662399866
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.94
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.94
Total error diversity:				 0.27
Error (vector) diversity:			 0.36
Behavioral diversity:				 0.36
--- Run Statistics ---
Number of program evaluations used so far: 99000
Number of point (instruction) evaluations so far: 217037825
--- Timings ---
Current time: 1529615330613 milliseconds
Total Time:         443.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       156.5 seconds, 35.3%
Fitness Testing:    226.4 seconds, 51.0%
Report:              60.9 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 98
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 99
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 99
;;******************************
;; -*- Number IO problem report - generation 99
Test total error for best: 61519.625900000035
Test mean error for best: 30.75981
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.08078165   
Correct output: -141.201628771 | Program output: -81.08078165  
Correct output: 23.3844813461  | Program output: 23.08078165   
Correct output: 91.3818662575  | Program output: 112.08078165  
Correct output: 6.0991287499   | Program output: -10.08078165  
Correct output: 90.6078865723  | Program output: 88.08078165   
Correct output: -16.3558496064 | Program output: 68.08078165   
Correct output: 85.2320058807  | Program output: 93.08078165   
Correct output: -28.7080490162 | Program output: -43.08078165  
Correct output: -10.4844827466 | Program output: 61.08078165   
Correct output: -59.408072605  | Program output: -68.08078165  
Correct output: 59.1228402624  | Program output: 28.08078165   
Correct output: -132.1998002816 | Program output: -84.08078165  
Correct output: -128.9949320478 | Program output: -41.08078165  
Correct output: -78.0962956202 | Program output: -27.08078165  
Correct output: -35.919351649  | Program output: -63.08078165  
Correct output: -56.0400311694 | Program output: -24.08078165  
Correct output: 137.4302481607 | Program output: 57.08078165   
Correct output: 32.7727726522  | Program output: 55.08078165   
Correct output: -26.6497561561 | Program output: 86.08078165   
Correct output: 95.3927116996  | Program output: 17.08078165   
Correct output: -65.8806745395 | Program output: -83.08078165  
Correct output: 48.7839285535  | Program output: 26.08078165   
Correct output: 176.7350863211 | Program output: 107.08078165  
Correct output: -87.9710392115 | Program output: 3.08078165    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction integer_rot} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction -83} {:instruction 53.660195741514} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_sub} {:instruction float_dup} {:instruction integer_swap} {:instruction float_swap} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_yank} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_min} {:instruction print_integer} {:instruction integer_yankdup} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction -99} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_max} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_cos} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_max} {:instruction print_integer})
Best program: (float_yankdup in1 integer_rot float_tan 93 integer_dup_times float_yankdup integer_dup_items -83 53.660195741514 float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger print_float integer_mod 80 float_min print_integer integer_sub float_dup integer_swap float_swap integer_swap integer_shove integer_dup_items integer_swap integer_shove integer_yank float_cos print_integer float_swap 76 float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove print_integer float_cos print_integer float_swap float_dup integer_dup_items integer_swap integer_min print_integer integer_yankdup print_integer float_swap 76 integer_stackdepth print_integer integer_mult float_pop float_yankdup float_swap integer_dup integer_dup integer_dup_times float_pop float_dup integer_swap -99 float_min float_stackdepth float_max print_integer float_stackdepth float_rot float_min float_stackdepth float_cos float_rot float_div float_pop float_yank float_max print_integer)
Errors: [74.4802 9 60.1208 9 0.3037 6 20.6989 9 16.1799 11 2.5271 8 84.4366 11 7.8488 10 14.3727 7 71.5653 9 8.6727 6 31.0421 11 48.119 9 87.9142 13 51.0155 10 27.1614 9 31.9592 8 80.3495 8 22.308 9 112.7305 9 78.3119 9 17.2001 8 22.7031 9 69.6543 10 91.0518 10]
Total: 1359.7272999999996
Mean: 27.194546
Genome size: 114
Size: 115
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4547.672210900008
Median total errors in population: 1370.7272999999996
Error averages by case: (193.42994759999894 10.351 193.73633000000203 9.929 127.65660330000061 7.502 147.76900040000012 10.365 151.46260989999985 11.31 132.6553636000022 9.294 198.48058879999667 11.867 136.46761010000264 10.689 151.38388160000338 8.566 187.48979849999787 9.896 148.17781759999818 7.731 153.35852280000077 11.295 183.55654420000317 10.377 215.5759450999992 12.953 183.04848550000048 10.978 162.34137200000075 10.29 166.54742730000103 9.224 197.86845490000178 9.512 146.2193451000002 10.471 222.65326250000288 10.168 192.8609326000005 10.14 155.54014029999905 9.407 146.10147320000064 10.089 191.0713799999973 10.607 208.08537399999665 11.123)
Error minima by case: (21.439 8 49.1208 7 0.2867 5 2.4424 8 0.0183 7 0.4703 6 12.0037 7 0.1512 7 0.3485 6 10.5653 7 0.3273 4 14.0 7 38.119 8 36.9142 10 4.0155 8 7.5598 8 18.0408 7 27.5698 8 8.674 8 1.7098 7 3.0 6 5.2001 7 4.5551 7 0.7351 8 4.1097 8)
Average genome size in population (length): 110.224
Average program size in population (points): 111.224
Average percent parens in population: 0.009
Minimum age in population: 138.5442867450417
Maximum age in population: 142.8251242913618
Average age in population: 140.9066189633083
Median age in population: 140.9549540061844
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.936
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.936
Total error diversity:				 0.286
Error (vector) diversity:			 0.381
Behavioral diversity:				 0.381
--- Run Statistics ---
Number of program evaluations used so far: 100000
Number of point (instruction) evaluations so far: 219793650
--- Timings ---
Current time: 1529615335524 milliseconds
Total Time:         448.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       158.1 seconds, 35.2%
Fitness Testing:    229.1 seconds, 51.0%
Report:              61.7 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 99
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 100
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 100
;;******************************
;; -*- Number IO problem report - generation 100
Test total error for best: 61519.625900000035
Test mean error for best: 30.75981
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.08078165   
Correct output: -141.201628771 | Program output: -81.08078165  
Correct output: 23.3844813461  | Program output: 23.08078165   
Correct output: 91.3818662575  | Program output: 112.08078165  
Correct output: 6.0991287499   | Program output: -10.08078165  
Correct output: 90.6078865723  | Program output: 88.08078165   
Correct output: -16.3558496064 | Program output: 68.08078165   
Correct output: 85.2320058807  | Program output: 93.08078165   
Correct output: -28.7080490162 | Program output: -43.08078165  
Correct output: -10.4844827466 | Program output: 61.08078165   
Correct output: -59.408072605  | Program output: -68.08078165  
Correct output: 59.1228402624  | Program output: 28.08078165   
Correct output: -132.1998002816 | Program output: -84.08078165  
Correct output: -128.9949320478 | Program output: -41.08078165  
Correct output: -78.0962956202 | Program output: -27.08078165  
Correct output: -35.919351649  | Program output: -63.08078165  
Correct output: -56.0400311694 | Program output: -24.08078165  
Correct output: 137.4302481607 | Program output: 57.08078165   
Correct output: 32.7727726522  | Program output: 55.08078165   
Correct output: -26.6497561561 | Program output: 86.08078165   
Correct output: 95.3927116996  | Program output: 17.08078165   
Correct output: -65.8806745395 | Program output: -83.08078165  
Correct output: 48.7839285535  | Program output: 26.08078165   
Correct output: 176.7350863211 | Program output: 107.08078165  
Correct output: -87.9710392115 | Program output: 3.08078165    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction integer_rot} {:instruction integer_shove} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction -83} {:instruction integer_div} {:instruction 55.16335289302777} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction 77} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_min} {:instruction print_integer} {:instruction integer_yankdup} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction -99} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_max} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_cos} {:instruction float_rot} {:instruction float_div} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_rot} {:instruction print_integer})
Best program: (float_yankdup in1 integer_rot integer_shove 93 integer_dup_times float_yankdup integer_dup_items -83 integer_div 55.16335289302777 float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger print_float integer_mod 80 float_min print_integer integer_mult float_dup 77 float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove print_integer float_cos print_integer float_swap float_dup integer_dup_items integer_swap integer_min print_integer integer_yankdup print_integer float_swap 76 integer_stackdepth print_integer integer_mult float_pop float_yankdup float_swap integer_dup integer_dup integer_dup_times float_pop float_dup integer_swap -99 float_min float_stackdepth float_max print_integer float_stackdepth float_rot float_min float_stackdepth float_cos float_rot float_div float_div float_pop float_yank float_rot print_integer)
Errors: [74.4802 9 60.1208 9 0.3037 6 20.6989 9 16.1799 11 2.5271 8 84.4366 11 7.8488 10 14.3727 7 71.5653 9 8.6727 6 31.0421 11 48.119 9 87.9142 13 51.0155 10 27.1614 9 31.9592 8 80.3495 8 22.308 9 112.7305 9 78.3119 9 17.2001 8 22.7031 9 69.6543 10 91.0518 10]
Total: 1359.7272999999996
Mean: 27.194546
Genome size: 107
Size: 108
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4312.03939390001
Median total errors in population: 1369.7272999999996
Error averages by case: (183.30893769999892 10.175 184.74358650000187 9.788 116.51159010000076 7.396 136.171593400001 10.234 143.6263793000002 11.235 120.75344310000234 9.165 188.88027879999686 11.77 124.89058620000279 10.549 143.16605680000316 8.402 177.732730499998 9.823 139.35771709999838 7.535 142.84945910000118 11.206 174.42094370000285 10.222 207.68610719999933 12.847 175.16598940000048 10.834 154.16433140000092 10.171 158.49633380000066 9.105 188.12297400000153 9.392 135.22631100000123 10.355 213.50567600000284 10.072 183.99668690000053 10.086 146.72675839999914 9.291 135.4717365999996 10.004 180.1564075999974 10.479 205.7307792999962 11.04)
Error minima by case: (3.4802 7 18.8792 7 0.3027 5 8.6982 8 0.9817 8 0.5271 6 14.3158 9 0.1512 8 3.3721 6 13.1013 7 0.3273 4 1.0421 8 33.881 7 48.9142 9 26.0155 8 16.1608 8 9.9592 7 21.3495 7 9.4738 8 27.8624 8 3.0 8 6.1995 7 4.8763 8 39.3457 7 10.0 8)
Average genome size in population (length): 110.056
Average program size in population (points): 111.056
Average percent parens in population: 0.009
Minimum age in population: 139.6778535639979
Maximum age in population: 144.1442616785694
Average age in population: 142.2391672339578
Median age in population: 142.2743803211571
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.903
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.903
Total error diversity:				 0.256
Error (vector) diversity:			 0.349
Behavioral diversity:				 0.349
--- Run Statistics ---
Number of program evaluations used so far: 101000
Number of point (instruction) evaluations so far: 222545150
--- Timings ---
Current time: 1529615340677 milliseconds
Total Time:         454.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       159.6 seconds, 35.2%
Fitness Testing:    232.0 seconds, 51.1%
Report:              62.4 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 100
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 101
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 101
;;******************************
;; -*- Number IO problem report - generation 101
Test total error for best: 61519.625900000035
Test mean error for best: 30.75981
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.08078165   
Correct output: -141.201628771 | Program output: -81.08078165  
Correct output: 23.3844813461  | Program output: 23.08078165   
Correct output: 91.3818662575  | Program output: 112.08078165  
Correct output: 6.0991287499   | Program output: -10.08078165  
Correct output: 90.6078865723  | Program output: 88.08078165   
Correct output: -16.3558496064 | Program output: 68.08078165   
Correct output: 85.2320058807  | Program output: 93.08078165   
Correct output: -28.7080490162 | Program output: -43.08078165  
Correct output: -10.4844827466 | Program output: 61.08078165   
Correct output: -59.408072605  | Program output: -68.08078165  
Correct output: 59.1228402624  | Program output: 28.08078165   
Correct output: -132.1998002816 | Program output: -84.08078165  
Correct output: -128.9949320478 | Program output: -41.08078165  
Correct output: -78.0962956202 | Program output: -27.08078165  
Correct output: -35.919351649  | Program output: -63.08078165  
Correct output: -56.0400311694 | Program output: -24.08078165  
Correct output: 137.4302481607 | Program output: 57.08078165   
Correct output: 32.7727726522  | Program output: 55.08078165   
Correct output: -26.6497561561 | Program output: 86.08078165   
Correct output: 95.3927116996  | Program output: 17.08078165   
Correct output: -65.8806745395 | Program output: -83.08078165  
Correct output: 48.7839285535  | Program output: 26.08078165   
Correct output: 176.7350863211 | Program output: 107.08078165  
Correct output: -87.9710392115 | Program output: 3.08078165    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction print_integer} {:instruction in1} {:instruction integer_rot} {:instruction integer_div} {:instruction float_add} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction 94} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction float_rot} {:instruction integer_mod} {:instruction tag_integer_498} {:instruction integer_dup_times} {:instruction -82} {:instruction integer_div} {:instruction 53.660195741514} {:instruction 14.354813298606842} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction integer_dec} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction 77} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction tagged_920} {:instruction float_cos} {:instruction float_rot} {:instruction float_swap} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction float_swap} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_dup} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_max} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_cos} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_dup} {:instruction print_integer})
Best program: (float_yankdup in1 print_integer in1 integer_rot integer_div float_add in1 float_mod float_tan 94 integer_dup_times float_yankdup float_rot integer_mod tag_integer_498 integer_dup_times -82 integer_div 53.660195741514 14.354813298606842 integer_rot float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup integer_inc integer_inc float_yankdup integer_dec integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger print_float integer_mod 80 float_min print_integer integer_mult float_dup 77 float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove print_integer float_cos print_integer float_swap tagged_920 float_cos float_rot float_swap float_dup integer_dup_items integer_swap integer_shove integer_shove print_integer integer_yankdup integer_inc float_swap integer_dup_items integer_swap integer_shove integer_yankdup integer_yankdup print_integer float_swap 76 integer_stackdepth print_integer integer_mult float_pop float_yankdup float_swap integer_dup integer_dup_times float_pop float_dup float_min float_stackdepth float_max print_integer float_stackdepth float_rot float_min float_stackdepth float_cos float_rot float_div float_pop float_yank float_dup print_integer)
Errors: [74.4802 9 60.1208 9 0.3037 6 20.6989 9 16.1799 11 2.5271 8 84.4366 11 7.8488 10 14.3727 7 71.5653 9 8.6727 6 31.0421 11 48.119 9 87.9142 13 51.0155 10 27.1614 9 31.9592 8 80.3495 8 22.308 9 112.7305 9 78.3119 9 17.2001 8 22.7031 9 69.6543 10 91.0518 10]
Total: 1359.7272999999996
Mean: 27.194546
Genome size: 122
Size: 123
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 4676.289005300009
Median total errors in population: 1370.4235499999998
Error averages by case: (193.0622088999986 10.301 205.46118630000194 9.883 126.4185980000011 7.493 146.20869870000053 10.302 164.3497771999989 11.323 131.08014190000262 9.282 198.9134855999963 11.853 134.23525520000285 10.676 163.73963800000314 8.515 188.00347179999744 9.852 159.9951396999983 7.672 153.49610620000075 11.294 195.37637940000295 10.365 227.7496338999992 12.9 196.00929020000137 10.928 174.4304102000019 10.293 179.7880469000018 9.151 197.7124016000019 9.464 146.48780030000043 10.427 222.8383050000031 10.117 192.79391460000048 10.184 167.1646636999981 9.384 146.1287912000005 10.06 189.52275459999717 10.614 221.89290619999574 11.097)
Error minima by case: (56.0 8 49.1208 7 0.3037 5 9.6982 8 0.9817 8 0.4729 6 12.0037 9 0.8488 8 0.3485 6 9.5321 7 0.3273 4 5.0421 8 37.119 8 54.0 10 6.0155 8 7.5598 7 16.0408 7 44.0 7 0.692 8 1.7098 8 4.0 7 6.2001 7 1.7037 8 60.6543 8 10.0 8)
Average genome size in population (length): 110.106
Average program size in population (points): 111.106
Average percent parens in population: 0.009
Minimum age in population: 141.0220211424136
Maximum age in population: 145.6271841356422
Average age in population: 143.525672547228
Median age in population: 143.541924833495
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.913
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.913
Total error diversity:				 0.274
Error (vector) diversity:			 0.368
Behavioral diversity:				 0.368
--- Run Statistics ---
Number of program evaluations used so far: 102000
Number of point (instruction) evaluations so far: 225297900
--- Timings ---
Current time: 1529615345795 milliseconds
Total Time:         459.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       161.2 seconds, 35.1%
Fitness Testing:    234.7 seconds, 51.1%
Report:              63.0 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 101
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 102
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 102
;;******************************
;; -*- Number IO problem report - generation 102
Test total error for best: 61519.625900000035
Test mean error for best: 30.75981
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.08078165   
Correct output: -141.201628771 | Program output: -81.08078165  
Correct output: 23.3844813461  | Program output: 23.08078165   
Correct output: 91.3818662575  | Program output: 112.08078165  
Correct output: 6.0991287499   | Program output: -10.08078165  
Correct output: 90.6078865723  | Program output: 88.08078165   
Correct output: -16.3558496064 | Program output: 68.08078165   
Correct output: 85.2320058807  | Program output: 93.08078165   
Correct output: -28.7080490162 | Program output: -43.08078165  
Correct output: -10.4844827466 | Program output: 61.08078165   
Correct output: -59.408072605  | Program output: -68.08078165  
Correct output: 59.1228402624  | Program output: 28.08078165   
Correct output: -132.1998002816 | Program output: -84.08078165  
Correct output: -128.9949320478 | Program output: -41.08078165  
Correct output: -78.0962956202 | Program output: -27.08078165  
Correct output: -35.919351649  | Program output: -63.08078165  
Correct output: -56.0400311694 | Program output: -24.08078165  
Correct output: 137.4302481607 | Program output: 57.08078165   
Correct output: 32.7727726522  | Program output: 55.08078165   
Correct output: -26.6497561561 | Program output: 86.08078165   
Correct output: 95.3927116996  | Program output: 17.08078165   
Correct output: -65.8806745395 | Program output: -83.08078165  
Correct output: 48.7839285535  | Program output: 26.08078165   
Correct output: 176.7350863211 | Program output: 107.08078165  
Correct output: -87.9710392115 | Program output: 3.08078165    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction integer_rot} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_div} {:instruction -83} {:instruction integer_div} {:instruction 54.34656699849809} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_rot} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_swap} {:instruction 76} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_pop} {:instruction float_rot} {:instruction float_swap} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_yankdup} {:instruction print_integer} {:instruction float_swap} {:instruction 77} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_dup} {:instruction integer_div} {:instruction -99} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_max} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_min} {:instruction float_yankdup} {:instruction float_mult} {:instruction print_integer})
Best program: (float_yankdup in1 integer_rot float_tan 93 integer_dup_times float_yankdup integer_dup_items integer_mod float_yankdup integer_div -83 integer_div 54.34656699849809 float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc float_dec integer_inc integer_inc integer_inc integer_inc float_rot integer_inc integer_inc float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger print_float integer_mod 80 float_min print_integer integer_mult float_dup integer_shove integer_swap float_swap 76 float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove print_integer integer_pop float_rot float_swap float_dup integer_dup_items integer_swap integer_shove integer_shove print_integer integer_yankdup print_integer float_swap 77 integer_stackdepth print_integer integer_mult float_pop float_yankdup float_swap integer_dup integer_dup_times float_pop float_dup integer_div -99 float_min float_stackdepth float_max print_integer float_stackdepth float_rot float_min float_stackdepth float_min float_yankdup float_mult print_integer)
Errors: [74.4802 9 60.1208 9 0.3037 6 20.6989 9 16.1799 11 2.5271 8 84.4366 11 7.8488 10 14.3727 7 71.5653 9 8.6727 6 31.0421 11 48.119 9 87.9142 13 51.0155 10 27.1614 9 31.9592 8 80.3495 8 22.308 9 112.7305 9 78.3119 9 17.2001 8 22.7031 9 69.6543 10 91.0518 10]
Total: 1359.7272999999996
Mean: 27.194546
Genome size: 108
Size: 109
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4483.47639650001
Median total errors in population: 1369.7272999999996
Error averages by case: (187.90850910000017 10.294 193.616249100002 9.847 121.80629820000021 7.442 144.35058200000103 10.292 150.89459520000045 11.301 126.11919390000173 9.255 194.9159249999975 11.847 131.24258250000213 10.667 151.71995890000306 8.513 183.87527169999888 9.863 147.3756316999986 7.636 147.96170460000124 11.279 183.4296949000031 10.308 215.7185570999992 12.897 183.35568479999958 10.943 162.7341864000002 10.276 166.83835750000043 9.151 194.23910210000093 9.457 142.3095199000006 10.425 219.163320800003 10.126 188.70075940000052 10.14 154.8068412999996 9.375 140.5827684 10.057 186.37494039999723 10.586 210.35016159999702 11.109)
Error minima by case: (21.439 8 47.1208 6 0.3027 5 7.6989 8 2.8287 8 0.4729 6 12.0037 9 0.1512 8 0.3485 6 9.4881 8 0.3273 4 4.4626 9 35.119 8 54.0 9 19.0155 8 7.5598 8 3.0408 7 27.5698 8 9.308 8 1.7098 8 4.0 7 6.7999 7 4.5551 8 11.7351 7 10.0 9)
Average genome size in population (length): 109.713
Average program size in population (points): 110.713
Average percent parens in population: 0.009
Minimum age in population: 142.3127532801426
Maximum age in population: 146.824648768828
Average age in population: 144.8477727071462
Median age in population: 144.8576533066936
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.925
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.925
Total error diversity:				 0.267
Error (vector) diversity:			 0.356
Behavioral diversity:				 0.356
--- Run Statistics ---
Number of program evaluations used so far: 103000
Number of point (instruction) evaluations so far: 228040950
--- Timings ---
Current time: 1529615350868 milliseconds
Total Time:         464.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       162.8 seconds, 35.1%
Fitness Testing:    237.5 seconds, 51.2%
Report:              63.9 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 102
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 103
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 103
;;******************************
;; -*- Number IO problem report - generation 103
Test total error for best: 61519.625900000035
Test mean error for best: 30.75981
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.08078165   
Correct output: -141.201628771 | Program output: -81.08078165  
Correct output: 23.3844813461  | Program output: 23.08078165   
Correct output: 91.3818662575  | Program output: 112.08078165  
Correct output: 6.0991287499   | Program output: -10.08078165  
Correct output: 90.6078865723  | Program output: 88.08078165   
Correct output: -16.3558496064 | Program output: 68.08078165   
Correct output: 85.2320058807  | Program output: 93.08078165   
Correct output: -28.7080490162 | Program output: -43.08078165  
Correct output: -10.4844827466 | Program output: 61.08078165   
Correct output: -59.408072605  | Program output: -68.08078165  
Correct output: 59.1228402624  | Program output: 28.08078165   
Correct output: -132.1998002816 | Program output: -84.08078165  
Correct output: -128.9949320478 | Program output: -41.08078165  
Correct output: -78.0962956202 | Program output: -27.08078165  
Correct output: -35.919351649  | Program output: -63.08078165  
Correct output: -56.0400311694 | Program output: -24.08078165  
Correct output: 137.4302481607 | Program output: 57.08078165   
Correct output: 32.7727726522  | Program output: 55.08078165   
Correct output: -26.6497561561 | Program output: 86.08078165   
Correct output: 95.3927116996  | Program output: 17.08078165   
Correct output: -65.8806745395 | Program output: -83.08078165  
Correct output: 48.7839285535  | Program output: 26.08078165   
Correct output: 176.7350863211 | Program output: 107.08078165  
Correct output: -87.9710392115 | Program output: 3.08078165    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction integer_rot} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_dup} {:instruction -83} {:instruction integer_div} {:instruction 54.882273917339376} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction integer_dup_items} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_inc} {:instruction float_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction float_swap} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction -99} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_max} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_cos} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_max} {:instruction print_integer})
Best program: (float_yankdup in1 integer_rot float_tan 93 integer_dup_times float_yankdup integer_dup -83 integer_div 54.882273917339376 float_swap float_yankdup float_tan 42.446747745532946 float_yank integer_dup_items in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger print_float integer_mod 80 float_min print_integer integer_mult float_dup print_integer float_swap 76 float_swap 78 float_min print_integer integer_inc float_dup integer_dup_items print_integer float_cos print_integer float_swap float_dup integer_dup_items integer_mult integer_shove print_integer float_swap print_integer float_swap 76 integer_stackdepth print_integer -99 float_min float_stackdepth float_max print_integer float_stackdepth float_rot float_min float_stackdepth float_cos float_rot float_div float_pop float_yank float_max print_integer)
Errors: [74.4802 9 60.1208 9 0.3037 6 20.6989 9 16.1799 11 2.5271 8 84.4366 11 7.8488 10 14.3727 7 71.5653 9 8.6727 6 31.0421 11 48.119 9 87.9142 13 51.0155 10 27.1614 9 31.9592 8 80.3495 8 22.308 9 112.7305 9 78.3119 9 17.2001 8 22.7031 9 69.6543 10 91.0518 10]
Total: 1359.7272999999996
Mean: 27.194546
Genome size: 94
Size: 95
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4332.116787700011
Median total errors in population: 1369.7273499999997
Error averages by case: (184.51784719999924 10.175 186.03768140000173 9.747 117.770382800001 7.327 136.72265360000148 10.18 144.15069390000065 11.202 122.51558070000237 9.148 188.85851619999727 11.716 125.60439040000276 10.577 143.82518180000304 8.415 177.82959739999805 9.714 140.30495009999842 7.509 144.90699170000153 11.163 175.7327708000029 10.219 208.48283989999928 12.842 175.8141876000005 10.838 154.72213950000042 10.163 159.17908530000065 9.055 188.22615730000126 9.339 137.1125966000014 10.315 213.0647621000027 9.978 184.73688630000058 10.048 147.63124349999998 9.246 136.61760289999944 9.937 180.9711266999975 10.521 206.37892199999652 11.028)
Error minima by case: (31.4802 7 49.1208 7 0.3027 5 1.3017 8 0.9817 8 0.4729 6 12.0037 9 0.1512 8 0.3485 6 10.7432 7 2.3299 5 4.0421 8 37.119 8 54.0 10 8.7166 8 7.5598 8 13.3396 7 25.3495 8 9.674 8 1.7098 8 4.0 7 3.499 7 4.5551 8 0.7351 8 10.0 8)
Average genome size in population (length): 109.369
Average program size in population (points): 110.369
Average percent parens in population: 0.009
Minimum age in population: 143.970118211686
Maximum age in population: 148.5540055809315
Average age in population: 146.2107761097269
Median age in population: 146.2442391918541
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.919
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.919
Total error diversity:				 0.269
Error (vector) diversity:			 0.361
Behavioral diversity:				 0.361
--- Run Statistics ---
Number of program evaluations used so far: 104000
Number of point (instruction) evaluations so far: 230775325
--- Timings ---
Current time: 1529615355942 milliseconds
Total Time:         469.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       164.3 seconds, 35.0%
Fitness Testing:    240.3 seconds, 51.2%
Report:              64.5 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 103
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 104
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 104
;;******************************
;; -*- Number IO problem report - generation 104
Test total error for best: 61519.625900000035
Test mean error for best: 30.75981
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.08078165   
Correct output: -141.201628771 | Program output: -81.08078165  
Correct output: 23.3844813461  | Program output: 23.08078165   
Correct output: 91.3818662575  | Program output: 112.08078165  
Correct output: 6.0991287499   | Program output: -10.08078165  
Correct output: 90.6078865723  | Program output: 88.08078165   
Correct output: -16.3558496064 | Program output: 68.08078165   
Correct output: 85.2320058807  | Program output: 93.08078165   
Correct output: -28.7080490162 | Program output: -43.08078165  
Correct output: -10.4844827466 | Program output: 61.08078165   
Correct output: -59.408072605  | Program output: -68.08078165  
Correct output: 59.1228402624  | Program output: 28.08078165   
Correct output: -132.1998002816 | Program output: -84.08078165  
Correct output: -128.9949320478 | Program output: -41.08078165  
Correct output: -78.0962956202 | Program output: -27.08078165  
Correct output: -35.919351649  | Program output: -63.08078165  
Correct output: -56.0400311694 | Program output: -24.08078165  
Correct output: 137.4302481607 | Program output: 57.08078165   
Correct output: 32.7727726522  | Program output: 55.08078165   
Correct output: -26.6497561561 | Program output: 86.08078165   
Correct output: 95.3927116996  | Program output: 17.08078165   
Correct output: -65.8806745395 | Program output: -83.08078165  
Correct output: 48.7839285535  | Program output: 26.08078165   
Correct output: 176.7350863211 | Program output: 107.08078165  
Correct output: -87.9710392115 | Program output: 3.08078165    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction integer_rot} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction integer_sub} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_inc} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction float_swap} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction -99} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_max} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_cos} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_dup} {:instruction print_integer})
Best program: (float_yankdup in1 integer_rot float_tan 93 integer_dup_times float_yankdup integer_dup_items -83 integer_div 53.660195741514 float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc 42.446747745532946 float_yank float_yankdup integer_sub integer_inc float_frominteger integer_inc float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger print_float integer_mod 80 float_min print_integer integer_mult float_dup float_swap integer_swap integer_shove integer_dup_items integer_swap integer_shove print_integer float_cos integer_shove print_integer float_cos print_integer float_swap 76 78 float_min print_integer integer_mult float_dup integer_dup_items integer_dup_times integer_shove print_integer float_cos print_integer float_swap float_dup integer_dup_items integer_swap integer_shove integer_yankdup integer_yankdup print_integer float_swap 76 integer_stackdepth print_integer float_stackdepth float_pop float_yankdup float_pop float_yankdup float_swap integer_dup integer_dup_times float_pop float_dup integer_swap -99 float_min float_stackdepth float_max print_integer float_stackdepth float_rot float_min float_stackdepth float_cos float_rot float_div float_pop float_yank float_dup print_integer)
Errors: [74.4802 9 60.1208 9 0.3037 6 20.6989 9 16.1799 11 2.5271 8 84.4366 11 7.8488 10 14.3727 7 71.5653 9 8.6727 6 31.0421 11 48.119 9 87.9142 13 51.0155 10 27.1614 9 31.9592 8 80.3495 8 22.308 9 112.7305 9 78.3119 9 17.2001 8 22.7031 9 69.6543 10 91.0518 10]
Total: 1359.7272999999996
Mean: 27.194546
Genome size: 123
Size: 124
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 4663.44403370001
Median total errors in population: 1369.7291999999998
Error averages by case: (197.79850189999857 10.278 197.28877640000204 9.89 132.81127840000107 7.465 153.1422476999998 10.289 155.61878369999926 11.282 136.91834850000262 9.222 203.41772239999614 11.795 142.02368410000292 10.62 155.3615983000032 8.511 192.46154529999717 9.881 152.11018339999816 7.625 158.54489969999995 11.251 187.17095440000324 10.313 219.19796089999923 12.897 186.93167420000105 10.927 166.33375690000162 10.252 170.47458640000184 9.184 203.25800770000217 9.471 151.18351109999972 10.445 227.4603682000029 10.125 197.9751215000006 10.136 159.49138059999822 9.354 151.3027154000012 10.056 195.35579059999716 10.616 216.81563599999583 11.11)
Error minima by case: (19.4802 8 34.8792 7 0.3035 5 8.6989 8 3.9817 8 0.4693 6 12.0037 8 0.1512 7 0.3485 6 9.9056 7 0.3273 5 4.4626 8 36.119 7 32.9142 10 10.0155 8 6.2615 8 6.0408 7 37.3495 7 8.8741 8 1.7098 8 4.0 7 6.2001 7 4.5492 7 10.2649 8 5.8903 9)
Average genome size in population (length): 109.124
Average program size in population (points): 110.124
Average percent parens in population: 0.009
Minimum age in population: 145.0686016819
Maximum age in population: 149.6408924930663
Average age in population: 147.5664270082746
Median age in population: 147.6150997300862
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.932
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.932
Total error diversity:				 0.268
Error (vector) diversity:			 0.357
Behavioral diversity:				 0.357
--- Run Statistics ---
Number of program evaluations used so far: 105000
Number of point (instruction) evaluations so far: 233503600
--- Timings ---
Current time: 1529615361198 milliseconds
Total Time:         474.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       166.0 seconds, 35.0%
Fitness Testing:    243.2 seconds, 51.2%
Report:              65.3 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 104
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 105
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 105
;;******************************
;; -*- Number IO problem report - generation 105
Test total error for best: 61519.625900000035
Test mean error for best: 30.75981
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.08078165   
Correct output: -141.201628771 | Program output: -81.08078165  
Correct output: 23.3844813461  | Program output: 23.08078165   
Correct output: 91.3818662575  | Program output: 112.08078165  
Correct output: 6.0991287499   | Program output: -10.08078165  
Correct output: 90.6078865723  | Program output: 88.08078165   
Correct output: -16.3558496064 | Program output: 68.08078165   
Correct output: 85.2320058807  | Program output: 93.08078165   
Correct output: -28.7080490162 | Program output: -43.08078165  
Correct output: -10.4844827466 | Program output: 61.08078165   
Correct output: -59.408072605  | Program output: -68.08078165  
Correct output: 59.1228402624  | Program output: 28.08078165   
Correct output: -132.1998002816 | Program output: -84.08078165  
Correct output: -128.9949320478 | Program output: -41.08078165  
Correct output: -78.0962956202 | Program output: -27.08078165  
Correct output: -35.919351649  | Program output: -63.08078165  
Correct output: -56.0400311694 | Program output: -24.08078165  
Correct output: 137.4302481607 | Program output: 57.08078165   
Correct output: 32.7727726522  | Program output: 55.08078165   
Correct output: -26.6497561561 | Program output: 86.08078165   
Correct output: 95.3927116996  | Program output: 17.08078165   
Correct output: -65.8806745395 | Program output: -83.08078165  
Correct output: 48.7839285535  | Program output: 26.08078165   
Correct output: 176.7350863211 | Program output: 107.08078165  
Correct output: -87.9710392115 | Program output: 3.08078165    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_integer} {:instruction in1} {:instruction float_dup_times} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_yank} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 43.884644180170966} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction float_cos} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_yank} {:instruction float_cos} {:instruction print_integer} {:instruction integer_mod} {:instruction 76} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction float_rot} {:instruction tagged_168} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_yankdup} {:instruction print_integer} {:instruction float_swap} {:instruction 77} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_sub} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_pop} {:instruction integer_div} {:instruction integer_swap} {:instruction -99} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_max} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_cos} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_max} {:instruction print_integer})
Best program: (print_integer in1 float_dup_times float_tan 93 integer_dup_times float_yankdup integer_yank -83 integer_div 53.660195741514 float_swap float_yankdup float_tan 43.884644180170966 float_yank float_yankdup in2 42.446747745532946 float_yank float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger print_float integer_mod 80 float_min print_integer integer_mult float_dup float_cos integer_swap integer_shove integer_dup_items integer_swap integer_shove integer_yank float_cos print_integer integer_mod 76 float_swap 78 float_min print_integer integer_shove float_dup integer_dup_items integer_swap integer_shove print_integer float_cos float_rot tagged_168 float_dup integer_dup_items integer_swap integer_shove integer_shove print_integer integer_yankdup print_integer float_swap 77 integer_stackdepth print_integer integer_sub float_pop float_yankdup float_swap integer_dup integer_dup_times float_pop integer_div integer_swap -99 float_min float_stackdepth float_max print_integer float_stackdepth float_rot float_min float_stackdepth float_cos float_rot float_div float_pop float_yank float_max print_integer)
Errors: [74.4802 9 60.1208 9 0.3037 6 20.6989 9 16.1799 11 2.5271 8 84.4366 11 7.8488 10 14.3727 7 71.5653 9 8.6727 6 31.0421 11 48.119 9 87.9142 13 51.0155 10 27.1614 9 31.9592 8 80.3495 8 22.308 9 112.7305 9 78.3119 9 17.2001 8 22.7031 9 69.6543 10 91.0518 10]
Total: 1359.7272999999996
Mean: 27.194546
Genome size: 119
Size: 120
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3941.1335184000095
Median total errors in population: 1369.7272999999996
Error averages by case: (169.9011584999996 10.187 169.61211370000157 9.79 102.73761390000071 7.375 121.35859640000147 10.224 126.38588180000134 11.221 106.81497980000186 9.15 174.89547069999773 11.731 110.92647190000217 10.543 126.47551850000234 8.389 163.7366856999989 9.769 122.85673489999887 7.532 129.31865870000203 11.169 159.10130460000227 10.189 192.4706139999993 12.842 159.1052362 10.821 137.41902969999902 10.164 142.0675363999996 9.071 174.59516130000085 9.359 121.25330440000128 10.368 199.47340230000256 10.043 170.84063660000052 10.045 130.34447600000075 9.314 121.85634329999927 9.99 166.4258254999978 10.505 190.34076359999702 11.029)
Error minima by case: (32.439 8 51.1207 7 0.3027 5 6.6181 8 2.5626 7 0.4729 6 10.7361 7 0.1512 6 1.6161 6 8.9696 7 0.3273 5 4.4626 7 39.1189 7 54.0 9 40.0 8 7.1614 8 22.9591 7 38.5698 7 9.3078 8 0.4422 7 2.6073 6 2.7999 7 0.2969 7 0.7351 8 10.0 8)
Average genome size in population (length): 108.836
Average program size in population (points): 109.836
Average percent parens in population: 0.009
Minimum age in population: 146.1329617452702
Maximum age in population: 150.7779313564713
Average age in population: 148.8777982588084
Median age in population: 148.8840722021299
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.924
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.924
Total error diversity:				 0.257
Error (vector) diversity:			 0.345
Behavioral diversity:				 0.345
--- Run Statistics ---
Number of program evaluations used so far: 106000
Number of point (instruction) evaluations so far: 236224700
--- Timings ---
Current time: 1529615366231 milliseconds
Total Time:         479.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       167.6 seconds, 35.0%
Fitness Testing:    245.9 seconds, 51.3%
Report:              66.0 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 105
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 106
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 106
;;******************************
;; -*- Number IO problem report - generation 106
Test total error for best: 61519.625900000035
Test mean error for best: 30.75981
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.08078165   
Correct output: -141.201628771 | Program output: -81.08078165  
Correct output: 23.3844813461  | Program output: 23.08078165   
Correct output: 91.3818662575  | Program output: 112.08078165  
Correct output: 6.0991287499   | Program output: -10.08078165  
Correct output: 90.6078865723  | Program output: 88.08078165   
Correct output: -16.3558496064 | Program output: 68.08078165   
Correct output: 85.2320058807  | Program output: 93.08078165   
Correct output: -28.7080490162 | Program output: -43.08078165  
Correct output: -10.4844827466 | Program output: 61.08078165   
Correct output: -59.408072605  | Program output: -68.08078165  
Correct output: 59.1228402624  | Program output: 28.08078165   
Correct output: -132.1998002816 | Program output: -84.08078165  
Correct output: -128.9949320478 | Program output: -41.08078165  
Correct output: -78.0962956202 | Program output: -27.08078165  
Correct output: -35.919351649  | Program output: -63.08078165  
Correct output: -56.0400311694 | Program output: -24.08078165  
Correct output: 137.4302481607 | Program output: 57.08078165   
Correct output: 32.7727726522  | Program output: 55.08078165   
Correct output: -26.6497561561 | Program output: 86.08078165   
Correct output: 95.3927116996  | Program output: 17.08078165   
Correct output: -65.8806745395 | Program output: -83.08078165  
Correct output: 48.7839285535  | Program output: 26.08078165   
Correct output: 176.7350863211 | Program output: 107.08078165  
Correct output: -87.9710392115 | Program output: 3.08078165    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction integer_dup_items} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction -83} {:instruction integer_fromfloat} {:instruction 53.660195741514} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 53.660195741514} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction integer_max} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_min} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction float_cos} {:instruction integer_swap} {:instruction float_cos} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_yank} {:instruction float_cos} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction float_swap} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_rot} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction 76} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_max} {:instruction -99} {:instruction float_min} {:instruction integer_swap} {:instruction -99} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_max} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_mult} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_cos} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_max} {:instruction print_integer})
Best program: (float_yankdup in1 integer_dup_items float_tan 93 integer_dup_times float_yankdup -83 integer_fromfloat 53.660195741514 float_swap float_yankdup float_tan 53.660195741514 float_swap float_yankdup float_tan 42.446747745532946 integer_max float_yankdup in2 integer_inc integer_inc integer_inc float_dec integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger print_float integer_min 80 float_min print_integer integer_mult float_dup float_cos integer_swap float_cos integer_dup_items integer_swap integer_shove integer_yank float_cos float_min print_integer integer_mult float_dup float_swap integer_swap integer_add integer_dup_items integer_swap float_rot print_integer float_cos print_integer float_swap 76 float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove print_integer 76 integer_stackdepth print_integer integer_mult float_dup integer_max -99 float_min integer_swap -99 float_min float_stackdepth float_max print_integer float_stackdepth float_mult float_min float_stackdepth float_cos float_rot float_div float_pop float_yank float_max print_integer)
Errors: [74.4802 9 60.1208 9 0.3037 6 20.6989 9 16.1799 11 2.5271 8 84.4366 11 7.8488 10 14.3727 7 71.5653 9 8.6727 6 31.0421 11 48.119 9 87.9142 13 51.0155 10 27.1614 9 31.9592 8 80.3495 8 22.308 9 112.7305 9 78.3119 9 17.2001 8 22.7031 9 69.6543 10 91.0518 10]
Total: 1359.7272999999996
Mean: 27.194546
Genome size: 115
Size: 116
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4393.988513700011
Median total errors in population: 1369.7272999999996
Error averages by case: (186.22232619999897 10.327 187.84416260000174 9.892 120.50738760000085 7.435 140.1202475000012 10.363 145.7955532000002 11.329 123.99277520000209 9.271 192.74924489999682 11.856 128.0292149000025 10.671 145.21046890000278 8.55 181.71322049999793 9.877 141.44979289999856 7.665 146.81550760000079 11.312 177.52638320000275 10.339 210.61037209999918 12.926 178.1036957000007 10.95 156.13287830000078 10.275 161.48822700000096 9.185 190.95513290000156 9.504 139.762943900001 10.472 216.98915640000277 10.162 186.82327430000052 10.162 148.7697294999994 9.415 139.4297350999997 10.056 183.2757821999974 10.612 209.9293010999962 11.136)
Error minima by case: (32.439 8 47.1208 7 0.3017 5 7.6989 8 0.0183 7 0.4729 6 1.3614 9 0.1512 8 0.3727 6 4.51 8 0.3273 4 14.549 9 35.119 8 59.6153 10 8.7166 9 6.8386 8 13.3396 7 38.5698 7 8.3077 8 2.431 8 4.0 7 3.499 7 4.2101 7 0.7351 7 18.5914 9)
Average genome size in population (length): 108.153
Average program size in population (points): 109.153
Average percent parens in population: 0.009
Minimum age in population: 147.1329617452702
Maximum age in population: 152.4178070976304
Average age in population: 150.2151175774629
Median age in population: 150.2741980266709
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.929
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.929
Total error diversity:				 0.273
Error (vector) diversity:			 0.358
Behavioral diversity:				 0.358
--- Run Statistics ---
Number of program evaluations used so far: 107000
Number of point (instruction) evaluations so far: 238928650
--- Timings ---
Current time: 1529615371210 milliseconds
Total Time:         484.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       169.2 seconds, 34.9%
Fitness Testing:    248.6 seconds, 51.3%
Report:              66.7 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 106
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 107
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 107
;;******************************
;; -*- Number IO problem report - generation 107
Test total error for best: 61519.625900000035
Test mean error for best: 30.75981
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.08078165   
Correct output: -141.201628771 | Program output: -81.08078165  
Correct output: 23.3844813461  | Program output: 23.08078165   
Correct output: 91.3818662575  | Program output: 112.08078165  
Correct output: 6.0991287499   | Program output: -10.08078165  
Correct output: 90.6078865723  | Program output: 88.08078165   
Correct output: -16.3558496064 | Program output: 68.08078165   
Correct output: 85.2320058807  | Program output: 93.08078165   
Correct output: -28.7080490162 | Program output: -43.08078165  
Correct output: -10.4844827466 | Program output: 61.08078165   
Correct output: -59.408072605  | Program output: -68.08078165  
Correct output: 59.1228402624  | Program output: 28.08078165   
Correct output: -132.1998002816 | Program output: -84.08078165  
Correct output: -128.9949320478 | Program output: -41.08078165  
Correct output: -78.0962956202 | Program output: -27.08078165  
Correct output: -35.919351649  | Program output: -63.08078165  
Correct output: -56.0400311694 | Program output: -24.08078165  
Correct output: 137.4302481607 | Program output: 57.08078165   
Correct output: 32.7727726522  | Program output: 55.08078165   
Correct output: -26.6497561561 | Program output: 86.08078165   
Correct output: 95.3927116996  | Program output: 17.08078165   
Correct output: -65.8806745395 | Program output: -83.08078165  
Correct output: 48.7839285535  | Program output: 26.08078165   
Correct output: 176.7350863211 | Program output: 107.08078165  
Correct output: -87.9710392115 | Program output: 3.08078165    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_integer} {:instruction in1} {:instruction integer_rot} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_div} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction float_swap} {:instruction float_yankdup} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_swap} {:instruction integer_div} {:instruction float_swap} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction float_swap} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_swap} {:instruction float_swap} {:instruction 76} {:instruction float_swap} {:instruction 76} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction integer_div} {:instruction float_rot} {:instruction float_swap} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_yankdup} {:instruction print_integer} {:instruction float_swap} {:instruction in2} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction tagged_397} {:instruction float_pop} {:instruction float_cos} {:instruction integer_swap} {:instruction -99} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_max} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_cos} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_max} {:instruction print_integer})
Best program: (print_integer in1 integer_rot float_tan 93 integer_dup_times float_yankdup integer_div -83 integer_div 53.660195741514 float_swap float_yankdup integer_dup_times float_dup integer_rot float_swap integer_div float_swap float_tan 42.446747745532946 float_yank float_yankdup in2 float_swap integer_inc integer_inc integer_inc float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger integer_inc integer_inc integer_inc integer_inc float_frominteger print_float integer_mod 80 float_min print_integer integer_mult float_dup integer_swap float_swap 76 float_swap 76 float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove integer_stackdepth integer_div float_rot float_swap float_dup integer_dup_items integer_swap integer_shove integer_shove print_integer integer_yankdup print_integer float_swap in2 integer_stackdepth print_integer tagged_397 float_pop float_cos integer_swap -99 float_min float_stackdepth float_max print_integer float_stackdepth float_rot float_min float_stackdepth float_cos float_rot float_div float_pop float_yank float_max print_integer)
Errors: [74.4802 9 60.1208 9 0.3037 6 20.6989 9 16.1799 11 2.5271 8 84.4366 11 7.8488 10 14.3727 7 71.5653 9 8.6727 6 31.0421 11 48.119 9 87.9142 13 51.0155 10 27.1614 9 31.9592 8 80.3495 8 22.308 9 112.7305 9 78.3119 9 17.2001 8 22.7031 9 69.6543 10 91.0518 10]
Total: 1359.7272999999996
Mean: 27.194546
Genome size: 106
Size: 107
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4231.166280700009
Median total errors in population: 1369.7272999999996
Error averages by case: (180.0505053999999 10.181 182.8595460000016 9.792 113.38042930000054 7.339 132.86090300000188 10.197 140.717796200001 11.196 117.62159980000186 9.163 184.42184439999767 11.713 121.71433250000241 10.559 140.39781400000265 8.403 173.36094679999897 9.793 136.798209599999 7.522 139.83641980000127 11.171 172.50429710000267 10.2 205.51203189999927 12.821 172.69627019999993 10.845 151.32817369999978 10.139 155.9356787999998 9.052 184.66027720000054 9.376 131.782495500001 10.365 208.69039160000273 10.032 180.9375123000005 10.048 144.1400907999998 9.27 132.39270469999923 9.955 177.60776429999765 10.48 198.36424579999726 10.982)
Error minima by case: (40.4802 7 47.1208 7 0.3024 5 7.6989 8 4.841 8 0.4729 6 2.719 8 0.8488 6 3.3727 6 9.719 7 0.3273 4 5.4626 9 35.119 8 55.0 8 8.7166 8 13.1614 8 6.9592 7 34.3495 7 7.308 8 13.0786 8 3.0 7 3.499 7 3.5492 8 58.6543 8 10.0 7)
Average genome size in population (length): 108.002
Average program size in population (points): 109.002
Average percent parens in population: 0.009
Minimum age in population: 148.9041178829775
Maximum age in population: 153.6391437819245
Average age in population: 151.5747012799265
Median age in population: 151.6416800107112
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.937
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.937
Total error diversity:				 0.252
Error (vector) diversity:			 0.35
Behavioral diversity:				 0.35
--- Run Statistics ---
Number of program evaluations used so far: 108000
Number of point (instruction) evaluations so far: 241628875
--- Timings ---
Current time: 1529615376078 milliseconds
Total Time:         489.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       170.7 seconds, 34.9%
Fitness Testing:    251.4 seconds, 51.4%
Report:              67.3 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 107
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 108
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 108
;;******************************
;; -*- Number IO problem report - generation 108
Test total error for best: 61519.625900000035
Test mean error for best: 30.75981
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.08078165   
Correct output: -141.201628771 | Program output: -81.08078165  
Correct output: 23.3844813461  | Program output: 23.08078165   
Correct output: 91.3818662575  | Program output: 112.08078165  
Correct output: 6.0991287499   | Program output: -10.08078165  
Correct output: 90.6078865723  | Program output: 88.08078165   
Correct output: -16.3558496064 | Program output: 68.08078165   
Correct output: 85.2320058807  | Program output: 93.08078165   
Correct output: -28.7080490162 | Program output: -43.08078165  
Correct output: -10.4844827466 | Program output: 61.08078165   
Correct output: -59.408072605  | Program output: -68.08078165  
Correct output: 59.1228402624  | Program output: 28.08078165   
Correct output: -132.1998002816 | Program output: -84.08078165  
Correct output: -128.9949320478 | Program output: -41.08078165  
Correct output: -78.0962956202 | Program output: -27.08078165  
Correct output: -35.919351649  | Program output: -63.08078165  
Correct output: -56.0400311694 | Program output: -24.08078165  
Correct output: 137.4302481607 | Program output: 57.08078165   
Correct output: 32.7727726522  | Program output: 55.08078165   
Correct output: -26.6497561561 | Program output: 86.08078165   
Correct output: 95.3927116996  | Program output: 17.08078165   
Correct output: -65.8806745395 | Program output: -83.08078165  
Correct output: 48.7839285535  | Program output: 26.08078165   
Correct output: 176.7350863211 | Program output: 107.08078165  
Correct output: -87.9710392115 | Program output: 3.08078165    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction integer_add} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction integer_div} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction float_swap} {:instruction integer_dup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction float_tan} {:instruction integer_inc} {:instruction float_shove} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction float_cos} {:instruction integer_swap} {:instruction 78} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction -99} {:instruction -99} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_max} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_cos} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_max} {:instruction print_integer})
Best program: (float_yankdup in1 integer_add float_tan 93 integer_dup_times float_yankdup integer_dup_items float_yankdup integer_div -83 integer_div 53.660195741514 float_swap integer_dup float_tan 42.446747745532946 float_tan 42.446747745532946 float_yank float_yankdup float_tan integer_inc float_shove integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger print_float integer_mod 80 float_min print_integer integer_mult float_dup float_cos integer_swap 78 integer_swap integer_shove print_integer float_cos print_integer float_swap float_dup integer_dup_items integer_swap integer_shove integer_yankdup integer_dup_times print_integer float_swap 76 integer_stackdepth print_integer integer_mult float_pop float_yankdup float_yankdup float_swap integer_dup integer_dup integer_dup_times float_pop float_dup integer_swap -99 -99 float_min float_stackdepth float_max print_integer float_stackdepth float_rot float_min float_stackdepth float_cos float_rot float_div float_pop float_yank float_max print_integer)
Errors: [74.4802 9 60.1208 9 0.3037 6 20.6989 9 16.1799 11 2.5271 8 84.4366 11 7.8488 10 14.3727 7 71.5653 9 8.6727 6 31.0421 11 48.119 9 87.9142 13 51.0155 10 27.1614 9 31.9592 8 80.3495 8 22.308 9 112.7305 9 78.3119 9 17.2001 8 22.7031 9 69.6543 10 91.0518 10]
Total: 1359.7272999999996
Mean: 27.194546
Genome size: 101
Size: 102
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3912.42683780001
Median total errors in population: 1369.7272999999996
Error averages by case: (167.79310559999985 10.166 170.40602000000172 9.733 99.89090440000021 7.32 119.60431380000166 10.22 127.26251580000148 11.21 104.09081830000142 9.182 172.03678189999795 11.766 107.20249120000175 10.543 127.11757700000271 8.387 160.84227539999895 9.741 123.59256319999886 7.515 126.83959800000194 11.176 159.87804350000258 10.197 193.3281111999992 12.85 159.9434279999997 10.852 138.22511909999932 10.153 142.91685289999967 9.074 172.5493573000006 9.356 118.47646750000116 10.322 196.6765555000025 10.014 167.42879520000048 10.08 131.0411514000009 9.246 119.36346379999924 9.955 165.1325258999977 10.487 190.1700018999973 11.073)
Error minima by case: (43.439 8 49.1208 6 0.3017 5 2.3011 7 1.9817 8 0.4729 6 13.2751 9 0.1512 7 2.3725 6 7.4037 7 0.3273 4 5.4626 8 37.119 8 59.6153 10 8.7166 9 15.1612 7 2.9592 7 44.0 8 9.674 8 23.569 8 4.0 8 3.499 7 4.5551 8 10.2649 8 15.1097 9)
Average genome size in population (length): 108.242
Average program size in population (points): 109.242
Average percent parens in population: 0.009
Minimum age in population: 149.9760675788619
Maximum age in population: 155.0184002668701
Average age in population: 152.845921915508
Median age in population: 152.8945107281853
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.932
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.932
Total error diversity:				 0.263
Error (vector) diversity:			 0.347
Behavioral diversity:				 0.347
--- Run Statistics ---
Number of program evaluations used so far: 109000
Number of point (instruction) evaluations so far: 244335150
--- Timings ---
Current time: 1529615380813 milliseconds
Total Time:         494.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       172.2 seconds, 34.8%
Fitness Testing:    254.0 seconds, 51.4%
Report:              68.0 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 108
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 109
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 109
;;******************************
;; -*- Number IO problem report - generation 109
Test total error for best: 61519.625900000035
Test mean error for best: 30.75981
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.08078165   
Correct output: -141.201628771 | Program output: -81.08078165  
Correct output: 23.3844813461  | Program output: 23.08078165   
Correct output: 91.3818662575  | Program output: 112.08078165  
Correct output: 6.0991287499   | Program output: -10.08078165  
Correct output: 90.6078865723  | Program output: 88.08078165   
Correct output: -16.3558496064 | Program output: 68.08078165   
Correct output: 85.2320058807  | Program output: 93.08078165   
Correct output: -28.7080490162 | Program output: -43.08078165  
Correct output: -10.4844827466 | Program output: 61.08078165   
Correct output: -59.408072605  | Program output: -68.08078165  
Correct output: 59.1228402624  | Program output: 28.08078165   
Correct output: -132.1998002816 | Program output: -84.08078165  
Correct output: -128.9949320478 | Program output: -41.08078165  
Correct output: -78.0962956202 | Program output: -27.08078165  
Correct output: -35.919351649  | Program output: -63.08078165  
Correct output: -56.0400311694 | Program output: -24.08078165  
Correct output: 137.4302481607 | Program output: 57.08078165   
Correct output: 32.7727726522  | Program output: 55.08078165   
Correct output: -26.6497561561 | Program output: 86.08078165   
Correct output: 95.3927116996  | Program output: 17.08078165   
Correct output: -65.8806745395 | Program output: -83.08078165  
Correct output: 48.7839285535  | Program output: 26.08078165   
Correct output: 176.7350863211 | Program output: 107.08078165  
Correct output: -87.9710392115 | Program output: 3.08078165    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction float_mod} {:instruction float_tan} {:instruction float_dup_items} {:instruction float_stackdepth} {:instruction float_yankdup} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction -83} {:instruction integer_div} {:instruction integer_div} {:instruction 53.660195741514} {:instruction 14.354813298606842} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_inc} {:instruction 43.44642848993953} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_dup_times} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_pop} {:instruction float_rot} {:instruction float_swap} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_shove} {:instruction print_integer} {:instruction float_yank} {:instruction print_integer} {:instruction float_swap} {:instruction 77} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction -99} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_max} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_add} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_cos} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_dec} {:instruction print_integer})
Best program: (float_yankdup in1 float_mod float_tan float_dup_items float_stackdepth float_yankdup integer_dup_times float_yankdup integer_dup_items -83 integer_div integer_div 53.660195741514 14.354813298606842 integer_rot float_swap float_yankdup float_inc 43.44642848993953 float_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_dup_times integer_inc integer_inc integer_inc integer_inc float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger print_float integer_mod 80 float_min print_integer integer_mult float_dup print_integer float_swap 76 float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove print_integer integer_pop float_rot float_swap float_dup integer_dup_items integer_swap integer_shove integer_shove print_integer float_yank print_integer float_swap 77 integer_stackdepth print_integer integer_mult float_pop float_yankdup float_frominteger integer_dup integer_dup_times float_pop float_dup integer_swap -99 float_min float_stackdepth float_max print_integer float_stackdepth float_add float_min float_stackdepth float_cos float_rot float_div float_pop float_yank float_dec print_integer)
Errors: [74.4802 9 60.1208 9 0.3037 6 20.6989 9 16.1799 11 2.5271 8 84.4366 11 7.8488 10 14.3727 7 71.5653 9 8.6727 6 31.0421 11 48.119 9 87.9142 13 51.0155 10 27.1614 9 31.9592 8 80.3495 8 22.308 9 112.7305 9 78.3119 9 17.2001 8 22.7031 9 69.6543 10 91.0518 10]
Total: 1359.7272999999996
Mean: 27.194546
Genome size: 108
Size: 109
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4540.3623365000085
Median total errors in population: 1369.9238999999998
Error averages by case: (190.21439159999886 10.226 196.442702400002 9.795 124.73091930000109 7.38 143.1374071000007 10.247 155.0082244999995 11.245 128.16843730000275 9.207 195.52221399999655 11.804 131.894058100003 10.585 155.32712030000351 8.484 184.57792949999808 9.799 151.57058759999822 7.572 150.85427000000058 11.217 186.25143940000322 10.23 218.1993853999992 12.845 186.69951950000055 10.893 166.0949066000014 10.213 170.356652900001 9.097 194.91339400000183 9.426 142.79811850000036 10.424 219.6061351000028 10.089 190.74294750000058 10.104 158.7914122999986 9.307 143.48036530000044 9.991 187.3582588999972 10.532 215.8655393999959 11.044)
Error minima by case: (43.439 8 48.1208 6 0.3027 5 8.6989 8 0.0183 7 0.4729 5 15.7349 7 0.1512 6 4.3707 6 5.9643 7 0.3273 5 4.4626 7 36.119 7 45.9141 8 1.9845 6 17.1594 8 13.3396 7 44.0 7 8.674 8 27.1036 7 4.0 6 3.499 7 4.3375 7 10.2649 7 4.8903 6)
Average genome size in population (length): 107.618
Average program size in population (points): 108.618
Average percent parens in population: 0.009
Minimum age in population: 150.9760675788619
Maximum age in population: 156.7884182939576
Average age in population: 154.1488233600582
Median age in population: 154.1897551390443
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.923
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.923
Total error diversity:				 0.274
Error (vector) diversity:			 0.364
Behavioral diversity:				 0.364
--- Run Statistics ---
Number of program evaluations used so far: 110000
Number of point (instruction) evaluations so far: 247025875
--- Timings ---
Current time: 1529615385937 milliseconds
Total Time:         499.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       173.8 seconds, 34.8%
Fitness Testing:    256.9 seconds, 51.4%
Report:              68.6 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 109
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 110
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 110
;;******************************
;; -*- Number IO problem report - generation 110
Test total error for best: 61519.625900000035
Test mean error for best: 30.75981
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.08078165   
Correct output: -141.201628771 | Program output: -81.08078165  
Correct output: 23.3844813461  | Program output: 23.08078165   
Correct output: 91.3818662575  | Program output: 112.08078165  
Correct output: 6.0991287499   | Program output: -10.08078165  
Correct output: 90.6078865723  | Program output: 88.08078165   
Correct output: -16.3558496064 | Program output: 68.08078165   
Correct output: 85.2320058807  | Program output: 93.08078165   
Correct output: -28.7080490162 | Program output: -43.08078165  
Correct output: -10.4844827466 | Program output: 61.08078165   
Correct output: -59.408072605  | Program output: -68.08078165  
Correct output: 59.1228402624  | Program output: 28.08078165   
Correct output: -132.1998002816 | Program output: -84.08078165  
Correct output: -128.9949320478 | Program output: -41.08078165  
Correct output: -78.0962956202 | Program output: -27.08078165  
Correct output: -35.919351649  | Program output: -63.08078165  
Correct output: -56.0400311694 | Program output: -24.08078165  
Correct output: 137.4302481607 | Program output: 57.08078165   
Correct output: 32.7727726522  | Program output: 55.08078165   
Correct output: -26.6497561561 | Program output: 86.08078165   
Correct output: 95.3927116996  | Program output: 17.08078165   
Correct output: -65.8806745395 | Program output: -83.08078165  
Correct output: 48.7839285535  | Program output: 26.08078165   
Correct output: 176.7350863211 | Program output: 107.08078165  
Correct output: -87.9710392115 | Program output: 3.08078165    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction integer_add} {:instruction float_tan} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction integer_div} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction float_swap} {:instruction integer_dup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction float_tan} {:instruction integer_inc} {:instruction float_shove} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_swap} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_pop} {:instruction float_dup} {:instruction float_cos} {:instruction integer_swap} {:instruction integer_shove} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_yank} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_yank} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_stackdepth} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_cos} {:instruction integer_flush} {:instruction float_swap} {:instruction float_swap} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_dup} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_max} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction float_cos} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_max} {:instruction print_integer})
Best program: (float_yankdup in1 integer_add float_tan 93 integer_dup_times float_yankdup integer_dup_items float_yankdup integer_div -83 integer_div 53.660195741514 float_swap integer_dup float_tan 42.446747745532946 float_tan 42.446747745532946 float_yank float_yankdup float_tan integer_inc float_shove integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_swap in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger print_float integer_mod 80 float_min print_integer integer_pop float_dup float_cos integer_swap integer_shove float_dup_times integer_swap integer_shove integer_yank float_cos print_integer float_swap integer_swap integer_shove integer_yank float_cos print_integer float_swap 76 float_stackdepth 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap integer_shove float_dup_times float_cos integer_flush float_swap float_swap float_dup integer_dup_items integer_swap integer_shove integer_yankdup integer_yankdup print_integer float_swap 76 integer_stackdepth print_integer integer_mult float_pop float_yankdup float_swap integer_dup integer_dup_times float_pop float_dup float_min float_stackdepth float_max print_integer float_stackdepth float_stackdepth float_cos float_rot float_div float_pop float_yank float_max print_integer)
Errors: [74.4802 9 60.1208 9 0.3037 6 20.6989 9 16.1799 11 2.5271 8 84.4366 11 7.8488 10 14.3727 7 71.5653 9 8.6727 6 31.0421 11 48.119 9 87.9142 13 51.0155 10 27.1614 9 31.9592 8 80.3495 8 22.308 9 112.7305 9 78.3119 9 17.2001 8 22.7031 9 69.6543 10 91.0518 10]
Total: 1359.7272999999996
Mean: 27.194546
Genome size: 116
Size: 117
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4336.00705450001
Median total errors in population: 1369.7272999999996
Error averages by case: (180.37407519999968 10.183 191.40676820000192 9.804 113.63580470000038 7.355 133.27001270000179 10.241 149.6556257999999 11.265 117.99791190000177 9.165 185.75438069999743 11.755 122.10651890000224 10.56 149.30784590000297 8.444 174.5990850999987 9.785 145.76297059999848 7.602 139.76223910000172 11.161 181.12601730000299 10.26 213.9117437999992 12.84 181.41195010000052 10.919 160.14329810000044 10.221 164.79320650000054 9.158 185.05947870000108 9.371 132.25624870000127 10.345 210.23392150000288 10.061 180.7455315000005 10.126 153.05997469999915 9.354 132.36879839999932 9.964 177.57213379999743 10.54 208.12651259999652 11.086)
Error minima by case: (0.561 8 50.1208 7 0.3027 5 10.6989 9 1.0183 8 0.4729 5 12.0037 8 0.1512 7 0.3485 5 8.9056 7 0.3273 5 5.4626 8 38.119 8 77.9142 10 35.3675 8 2.5667 8 14.312 7 5.5698 7 8.1119 8 1.7098 7 4.0 7 6.2001 7 4.3375 8 33.7351 8 1.8909 7)
Average genome size in population (length): 107.465
Average program size in population (points): 108.465
Average percent parens in population: 0.009
Minimum age in population: 151.9760675788619
Maximum age in population: 157.3927796068349
Average age in population: 155.5461533298147
Median age in population: 155.5776912401084
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.927
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.927
Total error diversity:				 0.277
Error (vector) diversity:			 0.359
Behavioral diversity:				 0.359
--- Run Statistics ---
Number of program evaluations used so far: 111000
Number of point (instruction) evaluations so far: 249712675
--- Timings ---
Current time: 1529615390839 milliseconds
Total Time:         504.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       175.3 seconds, 34.8%
Fitness Testing:    259.5 seconds, 51.5%
Report:              69.2 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 110
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 111
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 111
;;******************************
;; -*- Number IO problem report - generation 111
Test total error for best: 61519.625900000035
Test mean error for best: 30.75981
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 69.08078165   
Correct output: -141.201628771 | Program output: -81.08078165  
Correct output: 23.3844813461  | Program output: 23.08078165   
Correct output: 91.3818662575  | Program output: 112.08078165  
Correct output: 6.0991287499   | Program output: -10.08078165  
Correct output: 90.6078865723  | Program output: 88.08078165   
Correct output: -16.3558496064 | Program output: 68.08078165   
Correct output: 85.2320058807  | Program output: 93.08078165   
Correct output: -28.7080490162 | Program output: -43.08078165  
Correct output: -10.4844827466 | Program output: 61.08078165   
Correct output: -59.408072605  | Program output: -68.08078165  
Correct output: 59.1228402624  | Program output: 28.08078165   
Correct output: -132.1998002816 | Program output: -84.08078165  
Correct output: -128.9949320478 | Program output: -41.08078165  
Correct output: -78.0962956202 | Program output: -27.08078165  
Correct output: -35.919351649  | Program output: -63.08078165  
Correct output: -56.0400311694 | Program output: -24.08078165  
Correct output: 137.4302481607 | Program output: 57.08078165   
Correct output: 32.7727726522  | Program output: 55.08078165   
Correct output: -26.6497561561 | Program output: 86.08078165   
Correct output: 95.3927116996  | Program output: 17.08078165   
Correct output: -65.8806745395 | Program output: -83.08078165  
Correct output: 48.7839285535  | Program output: 26.08078165   
Correct output: 176.7350863211 | Program output: 107.08078165  
Correct output: -87.9710392115 | Program output: 3.08078165    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction integer_rot} {:instruction float_tan} {:instruction 93} {:instruction integer_sub} {:instruction float_yankdup} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_min} {:instruction tag_integer_498} {:instruction integer_dup} {:instruction -83} {:instruction tag_integer_498} {:instruction float_rot} {:instruction -83} {:instruction integer_div} {:instruction 53.660195741514} {:instruction 14.354813298606842} {:instruction integer_rot} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_inc} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_dup_times} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_min} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction integer_dup_times} {:instruction float_swap} {:instruction integer_dup_times} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_dup_times} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_yankdup} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction -99} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_max} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_cos} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_max} {:instruction print_integer})
Best program: (float_yankdup in1 integer_rot float_tan 93 integer_sub float_yankdup integer_dup_times float_yankdup integer_mod integer_min tag_integer_498 integer_dup -83 tag_integer_498 float_rot -83 integer_div 53.660195741514 14.354813298606842 integer_rot float_swap float_yankdup float_inc 42.446747745532946 float_yank integer_inc integer_inc integer_inc integer_inc integer_dup_times integer_inc integer_inc integer_min float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_frominteger print_float integer_mod 80 float_min print_integer integer_mult float_dup float_min print_integer integer_mult float_dup integer_yankdup integer_swap integer_shove print_integer float_cos print_integer integer_dup_times float_swap integer_dup_times float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_swap float_dup_times print_integer float_cos print_integer float_swap float_dup integer_dup_items integer_mult integer_shove print_integer integer_yankdup print_integer float_swap 76 integer_stackdepth print_integer -99 float_min float_stackdepth float_max print_integer float_stackdepth float_rot float_min float_stackdepth float_cos float_rot float_div float_pop float_yank float_max print_integer)
Errors: [74.4802 9 60.1208 9 0.3037 6 20.6989 9 16.1799 11 2.5271 8 84.4366 11 7.8488 10 14.3727 7 71.5653 9 8.6727 6 31.0421 11 48.119 9 87.9142 13 51.0155 10 27.1614 9 31.9592 8 80.3495 8 22.308 9 112.7305 9 78.3119 9 17.2001 8 22.7031 9 69.6543 10 91.0518 10]
Total: 1359.7272999999996
Mean: 27.194546
Genome size: 110
Size: 111
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4174.781398700008
Median total errors in population: 1370.7272999999996
Error averages by case: (179.33420699999968 10.137 177.86535680000202 9.72 112.54559030000064 7.37 133.15822690000138 10.215 135.4678246000011 11.152 117.01415620000185 9.124 184.4360043999972 11.7 122.02343190000249 10.513 136.4774510000029 8.382 173.4047507999987 9.782 131.6973865999986 7.464 138.7870558000018 11.135 167.46451820000283 10.146 200.56037789999914 12.779 167.62388540000015 10.833 146.4137167999999 10.152 150.85501730000018 9.045 184.9292932000014 9.352 131.5685743000013 10.367 208.67466950000295 10.068 179.40429370000038 10.054 140.0060075 9.261 131.32304319999946 9.974 176.67232369999724 10.478 196.90723569999676 10.964)
Error minima by case: (27.4802 7 47.1208 7 0.2975 5 7.6989 8 4.0183 8 0.4723 6 1.8482 9 0.1512 8 0.3485 6 3.5114 7 0.3273 4 3.0421 8 35.119 8 45.9142 9 4.9845 8 1.8386 8 6.0408 7 32.3495 7 9.308 7 1.7098 8 4.0 7 1.2001 7 1.7031 8 0.7351 8 4.8903 8)
Average genome size in population (length): 107.128
Average program size in population (points): 108.128
Average percent parens in population: 0.009
Minimum age in population: 152.9760675788619
Maximum age in population: 158.9302321496046
Average age in population: 156.9656185704876
Median age in population: 157.0230276188407
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.92
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.92
Total error diversity:				 0.287
Error (vector) diversity:			 0.37
Behavioral diversity:				 0.37
--- Run Statistics ---
Number of program evaluations used so far: 112000
Number of point (instruction) evaluations so far: 252391225
--- Timings ---
Current time: 1529615395740 milliseconds
Total Time:         509.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       176.9 seconds, 34.7%
Fitness Testing:    262.2 seconds, 51.5%
Report:              70.0 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 111
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 112
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 112
;;******************************
;; -*- Number IO problem report - generation 112
Test total error for best: 58928.03680000003
Test mean error for best: 29.46402
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 87.560997883580781766
Correct output: -141.201628771 | Program output: -94.080781766 
Correct output: 23.3844813461  | Program output: 13.384481346180781766
Correct output: 91.3818662575  | Program output: -7.618133742580781766
Correct output: 6.0991287499   | Program output: -23.080781766 
Correct output: 90.6078865723  | Program output: 15.607886572380781766
Correct output: -16.3558496064 | Program output: -71.355849606480781766
Correct output: 85.2320058807  | Program output: 5.232005880780781766
Correct output: -28.7080490162 | Program output: -56.080781766 
Correct output: -10.4844827466 | Program output: -58.484482746680781766
Correct output: -59.408072605  | Program output: -81.080781766 
Correct output: 59.1228402624  | Program output: 44.122840262480781766
Correct output: -132.1998002816 | Program output: -97.080781766 
Correct output: -128.9949320478 | Program output: -54.080781766 
Correct output: -78.0962956202 | Program output: -40.080781766 
Correct output: -35.919351649  | Program output: -76.080781766 
Correct output: -56.0400311694 | Program output: -37.080781766 
Correct output: 137.4302481607 | Program output: 93.430248160780781766
Correct output: 32.7727726522  | Program output: -9.227227347880781766
Correct output: -26.6497561561 | Program output: -99.649756156180781766
Correct output: 95.3927116996  | Program output: 91.392711699680781766
Correct output: -65.8806745395 | Program output: -96.080781766 
Correct output: 48.7839285535  | Program output: 35.783928553580781766
Correct output: 176.7350863211 | Program output: 82.735086321180781766
Correct output: -87.9710392115 | Program output: -77.971039211580781766
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction integer_rot} {:instruction float_min} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction -83} {:instruction integer_div} {:instruction 54.34656699849809} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction float_sub} {:instruction float_frominteger} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction print_integer} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_max} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_dup_items} {:instruction tag_integer_542} {:instruction integer_shove} {:instruction float_swap} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_yankdup} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction -99} {:instruction float_min} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_cos} {:instruction float_rot} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_max} {:instruction print_integer})
Best program: (float_yankdup in1 integer_rot float_min 93 integer_dup_times float_yankdup integer_dup_items -83 integer_div 54.34656699849809 float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 float_sub float_frominteger integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc print_integer integer_inc integer_inc integer_inc integer_inc integer_inc float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_yankdup integer_inc integer_inc integer_inc integer_inc float_frominteger print_float integer_mod 80 float_min print_integer integer_shove float_dup integer_rot integer_swap integer_add integer_dup_items integer_swap integer_shove integer_max float_cos print_integer float_swap 76 float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items float_dup integer_dup_items integer_swap integer_dup_items tag_integer_542 integer_shove float_swap float_dup integer_dup_items integer_mult integer_shove print_integer integer_yankdup print_integer float_swap 76 integer_stackdepth print_integer -99 float_min float_stackdepth integer_yankdup print_integer float_stackdepth float_rot float_min float_stackdepth float_cos float_rot float_div float_pop float_yank float_max print_integer)
Errors: [56.0 11 47.1208 9 10.0 9 99.0 15 29.1799 11 75.0 10 55.0 10 80.0 9 27.3727 8 48.0 10 21.6727 8 15.0 10 35.119 10 74.9142 13 38.0155 11 40.1614 10 18.9592 8 44.0 10 42.0 16 73.0 10 4.0 9 30.2001 9 13.0 10 94.0 11 10.0 9]
Total: 1336.7155
Mean: 26.73431
Genome size: 115
Size: 116
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4270.898193100013
Median total errors in population: 1369.7272999999996
Error averages by case: (172.4791772999998 10.229 195.30778970000185 9.899 105.83446620000048 7.43 128.4369629000016 10.31 152.61377510000017 11.301 110.19346460000155 9.188 178.8934006999978 11.791 115.17792050000205 10.614 153.82349340000317 8.485 167.64070119999903 9.88 149.1758294999982 7.635 131.8224797000017 11.257 185.08118590000294 10.271 217.83491389999926 12.929 185.57204180000076 10.925 163.6410043000009 10.229 169.01807300000098 9.148 178.05879110000078 9.433 125.32921800000135 10.412 203.5247425000026 10.134 171.9808055000006 10.132 157.45663209999918 9.384 124.42028149999932 10.057 170.60116509999764 10.578 204.26987759999662 11.059)
Error minima by case: (21.439 7 47.1208 7 0.3023 5 7.6989 8 2.0183 7 0.4703 6 12.0037 8 0.1512 7 0.3485 6 7.3116 7 0.3273 4 1.9573 8 35.119 7 54.0 10 38.0155 8 7.5598 8 18.9592 7 19.6505 7 3.6923 8 1.7098 8 2.3119 7 7.2001 7 0.7037 7 0.7351 8 10.0 7)
Average genome size in population (length): 107.394
Average program size in population (points): 108.394
Average percent parens in population: 0.009
Minimum age in population: 155.5982032334883
Maximum age in population: 160.3545736022088
Average age in population: 158.2760452007602
Median age in population: 158.2843811974502
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.915
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.915
Total error diversity:				 0.294
Error (vector) diversity:			 0.371
Behavioral diversity:				 0.371
--- Run Statistics ---
Number of program evaluations used so far: 113000
Number of point (instruction) evaluations so far: 255076375
--- Timings ---
Current time: 1529615400506 milliseconds
Total Time:         513.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       178.4 seconds, 34.7%
Fitness Testing:    264.8 seconds, 51.5%
Report:              70.6 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 112
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 113
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 113
;;******************************
;; -*- Number IO problem report - generation 113
Test total error for best: 58186.03680000002
Test mean error for best: 29.09302
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 87.56099788358078142
Correct output: -141.201628771 | Program output: -94.08078142  
Correct output: 23.3844813461  | Program output: 13.38448134618078142
Correct output: 91.3818662575  | Program output: -7.61813374258078142
Correct output: 6.0991287499   | Program output: -23.08078142  
Correct output: 90.6078865723  | Program output: 15.60788657238078142
Correct output: -16.3558496064 | Program output: -71.35584960648078142
Correct output: 85.2320058807  | Program output: 5.23200588078078142
Correct output: -28.7080490162 | Program output: -56.08078142  
Correct output: -10.4844827466 | Program output: -58.48448274668078142
Correct output: -59.408072605  | Program output: -81.08078142  
Correct output: 59.1228402624  | Program output: 44.12284026248078142
Correct output: -132.1998002816 | Program output: -97.08078142  
Correct output: -128.9949320478 | Program output: -54.08078142  
Correct output: -78.0962956202 | Program output: -40.08078142  
Correct output: -35.919351649  | Program output: -76.08078142  
Correct output: -56.0400311694 | Program output: -37.08078142  
Correct output: 137.4302481607 | Program output: 93.43024816078078142
Correct output: 32.7727726522  | Program output: -9.22722734788078142
Correct output: -26.6497561561 | Program output: -99.64975615618078142
Correct output: 95.3927116996  | Program output: 91.39271169968078142
Correct output: -65.8806745395 | Program output: -96.08078142  
Correct output: 48.7839285535  | Program output: 35.78392855358078142
Correct output: 176.7350863211 | Program output: 82.73508632118078142
Correct output: -87.9710392115 | Program output: -77.97103921158078142
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction integer_rot} {:instruction float_min} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction -83} {:instruction integer_div} {:instruction 54.34656699849809} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction float_sub} {:instruction float_frominteger} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction print_integer} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_div} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_cos} {:instruction tag_integer_314} {:instruction integer_flush} {:instruction float_dup} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_div} {:instruction print_integer} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction 76} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_div} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction -99} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_max} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_cos} {:instruction float_mult} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_mult} {:instruction print_integer})
Best program: (float_yankdup in1 integer_rot float_min 93 integer_dup_times float_yankdup integer_dup_items -83 integer_div 54.34656699849809 float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 float_sub float_frominteger integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc print_integer integer_inc integer_inc integer_inc integer_inc integer_inc float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_yankdup integer_inc integer_inc integer_inc integer_inc float_frominteger print_float integer_mod 80 float_min print_integer integer_shove float_dup integer_rot integer_swap integer_add integer_dup_items integer_swap integer_shove float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_div integer_shove integer_dup_items integer_swap integer_shove float_dup_times float_cos tag_integer_314 integer_flush float_dup float_tan integer_swap integer_div print_integer float_pop float_yankdup float_swap 76 integer_stackdepth print_integer integer_mult float_pop float_yankdup float_swap integer_dup integer_div float_pop float_dup integer_swap -99 float_min float_stackdepth float_max print_integer float_stackdepth float_rot float_min float_stackdepth float_cos float_mult float_div float_pop float_yank float_mult print_integer)
Errors: [56.0 10 47.1208 9 10.0 8 99.0 14 29.1799 10 75.0 9 55.0 9 80.0 8 27.3727 7 48.0 9 21.6727 7 15.0 9 35.119 10 74.9142 12 38.0155 10 40.1614 9 18.9592 9 44.0 9 42.0 14 73.0 9 4.0 8 30.2001 9 13.0 9 94.0 10 10.0 8]
Total: 1315.7155
Mean: 26.31431
Genome size: 121
Size: 122
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 4342.853935900011
Median total errors in population: 1369.7272999999996
Error averages by case: (183.7346490999994 10.14 186.76023700000175 9.826 117.02599350000067 7.371 139.05065540000123 10.219 144.95635580000047 11.211 122.0729658000018 9.121 188.4740697999973 11.687 126.85312120000238 10.54 146.58911380000296 8.436 177.41375929999833 9.792 141.11489219999862 7.561 143.82703350000114 11.166 176.47010890000269 10.229 209.15390079999924 12.87 176.4689971000005 10.87 157.4601331000003 10.201 159.92007800000042 9.085 189.99862220000125 9.372 136.1555204000012 10.375 212.77830700000263 10.018 184.12937100000053 10.015 148.34505729999952 9.285 135.54947389999947 9.928 182.99677209999746 10.476 204.74474769999654 11.016)
Error minima by case: (40.4804 7 47.1208 7 0.3027 5 0.6989 8 0.9817 8 0.4729 5 13.2191 8 0.1512 7 5.3727 7 9.9056 7 0.3273 4 4.4626 8 35.119 8 49.9142 10 0.9845 8 18.1614 7 13.3396 6 34.3498 7 1.3076 8 23.978 8 3.3119 7 3.499 7 4.5551 8 60.6543 8 8.8903 7)
Average genome size in population (length): 106.617
Average program size in population (points): 107.617
Average percent parens in population: 0.009
Minimum age in population: 156.8062206004846
Maximum age in population: 161.9226977373262
Average age in population: 159.6731920022883
Median age in population: 159.7094088937828
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.905
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.905
Total error diversity:				 0.276
Error (vector) diversity:			 0.38
Behavioral diversity:				 0.38
--- Run Statistics ---
Number of program evaluations used so far: 114000
Number of point (instruction) evaluations so far: 257742075
--- Timings ---
Current time: 1529615405572 milliseconds
Total Time:         519.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       179.9 seconds, 34.7%
Fitness Testing:    267.6 seconds, 51.6%
Report:              71.3 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 113
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 114
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 114
;;******************************
;; -*- Number IO problem report - generation 114
Test total error for best: 35840.48160000002
Test mean error for best: 17.92024
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 143.56099788358078131
Correct output: -141.201628771 | Program output: -188.08078131 
Correct output: 23.3844813461  | Program output: 23.38448134618078131
Correct output: 91.3818662575  | Program output: 91.38186625758078131
Correct output: 6.0991287499   | Program output: -46.08078131  
Correct output: 90.6078865723  | Program output: 90.60788657238078131
Correct output: -16.3558496064 | Program output: -16.35584960648078131
Correct output: 85.2320058807  | Program output: 85.23200588078078131
Correct output: -28.7080490162 | Program output: -112.08078131 
Correct output: -10.4844827466 | Program output: -10.48448274668078131
Correct output: -59.408072605  | Program output: -162.08078131 
Correct output: 59.1228402624  | Program output: 59.12284026248078131
Correct output: -132.1998002816 | Program output: -194.08078131 
Correct output: -128.9949320478 | Program output: -108.08078131 
Correct output: -78.0962956202 | Program output: -80.08078131  
Correct output: -35.919351649  | Program output: -152.08078131 
Correct output: -56.0400311694 | Program output: -74.08078131  
Correct output: 137.4302481607 | Program output: 137.43024816078078131
Correct output: 32.7727726522  | Program output: 32.77277265228078131
Correct output: -26.6497561561 | Program output: -26.64975615618078131
Correct output: 95.3927116996  | Program output: 95.39271169968078131
Correct output: -65.8806745395 | Program output: -192.08078131 
Correct output: 48.7839285535  | Program output: 48.78392855358078131
Correct output: 176.7350863211 | Program output: 176.73508632118078131
Correct output: -87.9710392115 | Program output: -87.97103921158078131
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction integer_rot} {:instruction float_min} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction -83} {:instruction integer_div} {:instruction 54.34656699849809} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction float_sub} {:instruction float_frominteger} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction print_integer} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_add} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_div} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_cos} {:instruction tag_integer_314} {:instruction integer_flush} {:instruction float_dup} {:instruction float_tan} {:instruction float_dec} {:instruction integer_div} {:instruction print_integer} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction 76} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_div} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction -99} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_max} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_cos} {:instruction float_mult} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_mult} {:instruction print_integer})
Best program: (float_yankdup in1 integer_rot float_min 93 integer_dup_times float_yankdup integer_dup_items -83 integer_div 54.34656699849809 float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 float_sub float_frominteger integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc print_integer integer_inc integer_inc integer_inc integer_inc integer_inc float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_yankdup integer_inc integer_inc integer_inc integer_inc float_add print_float integer_mod 80 float_min print_integer integer_shove float_dup integer_rot integer_swap integer_add integer_dup_items integer_swap integer_shove float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_div integer_shove integer_dup_items integer_swap integer_shove float_dup_times float_cos tag_integer_314 integer_flush float_dup float_tan float_dec integer_div print_integer float_pop float_yankdup float_swap 76 integer_stackdepth print_integer integer_mult float_pop float_yankdup float_swap integer_dup integer_div float_pop float_dup integer_swap -99 float_min float_stackdepth float_max print_integer float_stackdepth float_rot float_min float_stackdepth float_cos float_mult float_div float_pop float_yank float_mult print_integer)
Errors: [0.0 7 46.8792 8 0.0 7 0.0 7 52.1799 10 0.0 7 0.0 7 0.0 7 83.3727 9 0.0 7 102.6727 8 0.0 7 61.881 9 20.9142 11 1.9845 11 116.1614 10 18.0408 9 0.0 7 0.0 7 0.0 7 0.0 7 126.2001 9 0.0 7 0.0 7 0.0 7]
Total: 829.2865
Mean: 16.58573
Genome size: 121
Size: 122
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 4654.5722647000075
Median total errors in population: 1369.7272999999996
Error averages by case: (193.27619859999936 10.225 202.89365200000162 9.806 128.11057100000056 7.387 148.20703870000088 10.257 162.5278994999996 11.185 133.14269590000168 9.176 197.42595239999739 11.723 137.13418740000196 10.541 163.19847590000296 8.408 186.42656589999845 9.792 158.71216649999855 7.516 153.221698300001 11.151 192.81342130000257 10.233 225.0531669999993 12.834 193.16453670000084 10.852 172.99131170000095 10.142 176.87524600000077 9.05 198.57003780000124 9.395 145.86855780000073 10.415 221.2886990000024 10.111 192.7544206000005 10.06 165.93354409999893 9.263 145.98069749999988 9.988 190.13728559999768 10.534 217.78223749999688 11.038)
Error minima by case: (0.0 7 46.8792 7 0.0 5 0.0 7 2.0183 7 0.0 6 0.0 6 0.0 5 0.3727 6 0.0 6 1.6727 4 0.0 6 35.119 8 20.9142 10 1.9845 8 13.1614 8 18.0408 7 0.0 6 0.0 7 0.0 6 0.0 5 3.2001 7 0.0 6 0.0 7 0.0 5)
Average genome size in population (length): 105.783
Average program size in population (points): 106.783
Average percent parens in population: 0.009
Minimum age in population: 158.4155081430826
Maximum age in population: 163.2466327947972
Average age in population: 161.0176365323925
Median age in population: 161.0040539228643
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.91
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.91
Total error diversity:				 0.267
Error (vector) diversity:			 0.36
Behavioral diversity:				 0.36
--- Run Statistics ---
Number of program evaluations used so far: 115000
Number of point (instruction) evaluations so far: 260387075
--- Timings ---
Current time: 1529615410495 milliseconds
Total Time:         523.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       181.3 seconds, 34.6%
Fitness Testing:    270.3 seconds, 51.6%
Report:              72.1 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 114
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 115
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 115
;;******************************
;; -*- Number IO problem report - generation 115
Test total error for best: 34565.862000000016
Test mean error for best: 17.28293
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 143.560997883578131
Correct output: -141.201628771 | Program output: -188.078131   
Correct output: 23.3844813461  | Program output: 23.384481346178131
Correct output: 91.3818662575  | Program output: 91.381866257578131
Correct output: 6.0991287499   | Program output: -46.078131    
Correct output: 90.6078865723  | Program output: 90.607886572378131
Correct output: -16.3558496064 | Program output: -16.355849606478131
Correct output: 85.2320058807  | Program output: 85.232005880778131
Correct output: -28.7080490162 | Program output: -112.078131   
Correct output: -10.4844827466 | Program output: -10.484482746678131
Correct output: -59.408072605  | Program output: -162.078131   
Correct output: 59.1228402624  | Program output: 59.122840262478131
Correct output: -132.1998002816 | Program output: -194.078131   
Correct output: -128.9949320478 | Program output: -108.078131   
Correct output: -78.0962956202 | Program output: -80.078131    
Correct output: -35.919351649  | Program output: -152.078131   
Correct output: -56.0400311694 | Program output: -74.078131    
Correct output: 137.4302481607 | Program output: 137.430248160778131
Correct output: 32.7727726522  | Program output: 32.772772652278131
Correct output: -26.6497561561 | Program output: -26.649756156178131
Correct output: 95.3927116996  | Program output: 95.392711699678131
Correct output: -65.8806745395 | Program output: -192.078131   
Correct output: 48.7839285535  | Program output: 48.783928553578131
Correct output: 176.7350863211 | Program output: 176.735086321178131
Correct output: -87.9710392115 | Program output: -87.971039211578131
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction integer_rot} {:instruction float_min} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction -83} {:instruction integer_div} {:instruction 54.34656699849809} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction float_sub} {:instruction float_frominteger} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction print_integer} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_add} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction integer_min} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_div} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_cos} {:instruction tag_integer_314} {:instruction integer_flush} {:instruction float_dup} {:instruction float_tan} {:instruction float_dec} {:instruction integer_div} {:instruction print_integer} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction 76} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_div} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction -99} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_max} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_cos} {:instruction float_mult} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_mult} {:instruction print_integer})
Best program: (float_yankdup in1 integer_rot float_min 93 integer_dup_times float_yankdup integer_dup_items -83 integer_div 54.34656699849809 float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 float_sub float_frominteger integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc print_integer integer_inc integer_inc integer_inc integer_inc integer_inc float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_yankdup integer_inc integer_inc integer_inc integer_inc float_add print_float integer_mod 80 float_min integer_min integer_shove float_dup integer_rot integer_swap integer_add integer_dup_items integer_swap integer_shove float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_div integer_shove integer_dup_items integer_swap integer_shove float_dup_times float_cos tag_integer_314 integer_flush float_dup float_tan float_dec integer_div print_integer float_pop float_yankdup float_swap 76 integer_stackdepth print_integer integer_mult float_pop float_yankdup float_swap integer_dup integer_div float_pop float_dup integer_swap -99 float_min float_stackdepth float_max print_integer float_stackdepth float_rot float_min float_stackdepth float_cos float_mult float_div float_pop float_yank float_mult print_integer)
Errors: [0.0 5 46.8765 8 0.0 5 0.0 5 52.1773 10 0.0 5 0.0 5 0.0 5 83.3701 11 0.0 5 102.6701 10 0.0 5 61.8783 10 20.9168 10 1.9818 11 116.1588 10 18.0381 9 0.0 5 0.0 5 0.0 5 0.0 5 126.1975 10 0.0 5 0.0 5 0.0 5]
Total: 804.2653
Mean: 16.085306
Genome size: 121
Size: 122
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 4631.577959400008
Median total errors in population: 1369.7272999999996
Error averages by case: (191.9948375999995 10.284 201.6753597000019 9.99 127.2939204000007 7.624 151.066481300001 10.476 161.3706272000002 11.385 135.02441360000253 9.25 195.54304619999732 11.653 139.2049295000028 10.475 162.41513400000323 8.658 184.91594929999877 9.911 158.2516003999983 7.818 151.78442620000143 11.156 191.70925780000306 10.454 223.2345433999992 12.891 191.26054880000032 11.008 172.14398770000054 10.408 175.08355270000067 9.313 196.6277130000011 9.505 145.85509370000102 10.71 219.00821310000276 10.123 187.51627290000047 10.084 166.47466169999922 9.501 144.8065257999999 10.012 191.31095409999745 10.589 211.73390929999695 10.994)
Error minima by case: (0.0 5 46.8765 7 0.0 5 0.0 5 4.0183 7 0.0 5 0.0 5 0.0 5 4.3727 6 0.0 5 0.6727 5 0.0 5 35.119 7 20.9142 8 1.9818 6 5.1596 8 13.4005 7 0.0 5 0.0 5 0.0 5 0.0 5 7.2001 7 0.0 5 0.0 5 0.0 5)
Average genome size in population (length): 105.418
Average program size in population (points): 106.418
Average percent parens in population: 0.009
Minimum age in population: 159.7476887431842
Maximum age in population: 164.741453524797
Average age in population: 162.4217466137732
Median age in population: 162.4388925092807
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.922
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.922
Total error diversity:				 0.31
Error (vector) diversity:			 0.414
Behavioral diversity:				 0.414
--- Run Statistics ---
Number of program evaluations used so far: 116000
Number of point (instruction) evaluations so far: 263022675
--- Timings ---
Current time: 1529615415339 milliseconds
Total Time:         528.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       182.8 seconds, 34.6%
Fitness Testing:    272.9 seconds, 51.6%
Report:              72.9 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 115
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 116
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 116
;;******************************
;; -*- Number IO problem report - generation 116
Test total error for best: 29823.454700000028
Test mean error for best: 14.91173
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 143.560997883580782
Correct output: -141.201628771 | Program output: -85.049287386780782
Correct output: 23.3844813461  | Program output: 23.384481346180782
Correct output: 91.3818662575  | Program output: 91.381866257580782
Correct output: 6.0991287499   | Program output: -46.080782    
Correct output: 90.6078865723  | Program output: 90.607886572380782
Correct output: -16.3558496064 | Program output: -16.355849606480782
Correct output: 85.2320058807  | Program output: 85.232005880780782
Correct output: -28.7080490162 | Program output: -87.890826774680782
Correct output: -10.4844827466 | Program output: -10.484482746680782
Correct output: -59.408072605  | Program output: -85.737246458380782
Correct output: 59.1228402624  | Program output: 59.122840262480782
Correct output: -132.1998002816 | Program output: -86.389686422480782
Correct output: -128.9949320478 | Program output: -84.040138146480782
Correct output: -78.0962956202 | Program output: -80.080782    
Correct output: -35.919351649  | Program output: -86.794612154180782
Correct output: -56.0400311694 | Program output: -74.080782    
Correct output: 137.4302481607 | Program output: 137.430248160780782
Correct output: 32.7727726522  | Program output: 32.772772652280782
Correct output: -26.6497561561 | Program output: -26.649756156180782
Correct output: 95.3927116996  | Program output: 95.392711699680782
Correct output: -65.8806745395 | Program output: -92.00384817680782
Correct output: 48.7839285535  | Program output: 48.783928553580782
Correct output: 176.7350863211 | Program output: 176.735086321180782
Correct output: -87.9710392115 | Program output: -87.971039211580782
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction integer_rot} {:instruction float_min} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction -83} {:instruction integer_div} {:instruction 54.34656699849809} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction float_sub} {:instruction float_frominteger} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction print_integer} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_max} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_add} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_div} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_cos} {:instruction tag_integer_314} {:instruction integer_flush} {:instruction float_dup} {:instruction float_tan} {:instruction float_dec} {:instruction integer_div} {:instruction print_integer} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_add} {:instruction float_stackdepth} {:instruction float_cos} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_max} {:instruction print_integer})
Best program: (float_yankdup in1 integer_rot float_min 93 integer_dup_times float_yankdup integer_dup_items -83 integer_div 54.34656699849809 float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 float_sub float_frominteger integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc print_integer integer_inc integer_inc float_max integer_inc integer_inc float_yankdup in2 integer_inc integer_max integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_yankdup integer_inc integer_inc integer_inc integer_inc float_add print_float integer_mod 80 float_min print_integer integer_shove float_dup integer_rot integer_swap integer_add integer_dup_items integer_swap integer_shove float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_div integer_shove integer_dup_items integer_swap integer_shove float_dup_times float_cos tag_integer_314 integer_flush float_dup float_tan float_dec integer_div print_integer float_pop float_yankdup float_swap float_stackdepth float_rot float_add float_stackdepth float_cos float_div float_pop float_yank float_max print_integer)
Errors: [0.0 5 56.1523 14 0.0 5 0.0 5 52.1799 10 0.0 5 0.0 5 0.0 5 59.1828 12 0.0 5 26.3292 15 0.0 5 45.8101 14 44.9548 14 1.9845 10 50.8753 13 18.0408 10 0.0 5 0.0 5 0.0 5 0.0 5 26.1232 14 0.0 5 0.0 5 0.0 5]
Total: 582.6329
Mean: 11.652658
Genome size: 103
Size: 104
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 5304.3007573000095
Median total errors in population: 1369.7272999999996
Error averages by case: (217.82140599999857 10.4 224.66752500000194 10.15 159.36274109999968 8.012 189.93204129999856 11.061 187.45945149999812 11.511 175.27453140000247 9.453 218.96711519999684 11.352 178.15709020000253 10.24 189.02844880000333 9.073 209.5682157999977 9.94 186.96955919999795 8.316 180.17960109999947 10.995 215.55304440000305 10.695 243.7875795999993 12.867 212.8089970000016 11.246 199.65496300000294 10.689 197.82462120000196 9.62 219.04738910000185 9.605 178.684621299999 11.437 239.85950380000233 10.128 207.22068930000037 9.922 194.29880679999715 9.893 173.48563650000165 10.054 222.29211379999776 10.706 224.2780648999969 10.752)
Error minima by case: (0.0 4 38.2509 6 0.0 3 0.0 4 1.9817 6 0.0 4 0.0 4 0.0 3 0.2651 6 0.0 4 0.3273 4 0.0 4 24.5895 6 20.9141 7 1.9818 5 2.3661 8 13.4005 6 0.0 4 0.0 4 0.0 4 0.0 3 4.2001 7 0.0 4 0.0 4 0.0 3)
Average genome size in population (length): 105.791
Average program size in population (points): 106.791
Average percent parens in population: 0.009
Minimum age in population: 161.229547582152
Maximum age in population: 165.8380894481551
Average age in population: 163.8755752380626
Median age in population: 163.920330465083
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.921
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.921
Total error diversity:				 0.388
Error (vector) diversity:			 0.478
Behavioral diversity:				 0.48
--- Run Statistics ---
Number of program evaluations used so far: 117000
Number of point (instruction) evaluations so far: 265667700
--- Timings ---
Current time: 1529615420520 milliseconds
Total Time:         533.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       184.3 seconds, 34.5%
Fitness Testing:    275.8 seconds, 51.7%
Report:              73.6 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 116
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 117
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 117
;;******************************
;; -*- Number IO problem report - generation 117
Test total error for best: 29834.454700000024
Test mean error for best: 14.91723
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 143.560997883580781
Correct output: -141.201628771 | Program output: -85.049287386780781
Correct output: 23.3844813461  | Program output: 23.384481346180781
Correct output: 91.3818662575  | Program output: 91.381866257580781
Correct output: 6.0991287499   | Program output: -46.080781    
Correct output: 90.6078865723  | Program output: 90.607886572380781
Correct output: -16.3558496064 | Program output: -16.355849606480781
Correct output: 85.2320058807  | Program output: 85.232005880780781
Correct output: -28.7080490162 | Program output: -87.890826774680781
Correct output: -10.4844827466 | Program output: -10.484482746680781
Correct output: -59.408072605  | Program output: -85.737246458380781
Correct output: 59.1228402624  | Program output: 59.122840262480781
Correct output: -132.1998002816 | Program output: -86.389686422480781
Correct output: -128.9949320478 | Program output: -84.040138146480781
Correct output: -78.0962956202 | Program output: -80.080781    
Correct output: -35.919351649  | Program output: -86.794612154180781
Correct output: -56.0400311694 | Program output: -74.080781    
Correct output: 137.4302481607 | Program output: 137.430248160780781
Correct output: 32.7727726522  | Program output: 32.772772652280781
Correct output: -26.6497561561 | Program output: -26.649756156180781
Correct output: 95.3927116996  | Program output: 95.392711699680781
Correct output: -65.8806745395 | Program output: -92.00384817680781
Correct output: 48.7839285535  | Program output: 48.783928553580781
Correct output: 176.7350863211 | Program output: 176.735086321180781
Correct output: -87.9710392115 | Program output: -87.971039211580781
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction integer_rot} {:instruction float_min} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction -83} {:instruction integer_div} {:instruction 54.34656699849809} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction float_sub} {:instruction float_frominteger} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction print_integer} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_max} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_add} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_div} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_cos} {:instruction tag_integer_314} {:instruction integer_flush} {:instruction float_dup} {:instruction float_tan} {:instruction float_dec} {:instruction integer_div} {:instruction print_integer} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_add} {:instruction float_stackdepth} {:instruction float_cos} {:instruction float_div} {:instruction float_pop} {:instruction float_yank} {:instruction float_max} {:instruction print_integer})
Best program: (float_yankdup in1 integer_rot float_min 93 integer_dup_times float_yankdup integer_dup_items -83 integer_div 54.34656699849809 float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 float_sub float_frominteger integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc print_integer integer_inc integer_inc float_max integer_inc integer_inc float_yankdup in2 integer_inc integer_max integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_yankdup integer_inc integer_inc integer_inc integer_inc float_add print_float integer_mod 80 float_min print_integer integer_shove integer_max integer_rot integer_swap integer_add integer_dup_items integer_swap integer_shove float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_div integer_shove integer_dup_items integer_swap integer_shove float_dup_times float_cos tag_integer_314 integer_flush float_dup float_tan float_dec integer_div print_integer float_pop float_yankdup float_swap float_stackdepth float_rot float_add float_stackdepth float_cos float_div float_pop float_yank float_max print_integer)
Errors: [0.0 5 56.1523 13 0.0 5 0.0 5 52.1799 10 0.0 5 0.0 5 0.0 5 59.1828 13 0.0 5 26.3292 15 0.0 5 45.8101 14 44.9548 14 1.9845 11 50.8753 13 18.0407 9 0.0 5 0.0 5 0.0 5 0.0 5 26.1232 14 0.0 5 0.0 5 0.0 5]
Total: 582.6328
Mean: 11.652656
Genome size: 103
Size: 104
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 5033.836593400003
Median total errors in population: 1359.7272999999996
Error averages by case: (202.2104830999994 9.851 206.69277970000098 9.998 159.25515689999966 8.131 202.83951519999923 11.568 177.8919721999988 11.364 188.39477560000083 9.073 201.60734939999872 10.005 189.19470120000088 8.984 183.1931268000029 9.553 194.87421599999917 9.374 183.7584992999983 8.678 169.77287639999983 9.732 199.887560100002 10.923 220.0118066999995 12.299 189.85054790000052 11.285 195.8449008000023 10.993 177.87720580000047 9.971 198.73249090000058 9.21 178.1662593999995 12.111 217.43497980000103 9.488 177.8880893000003 8.958 192.81458909999768 10.155 166.3051422000008 9.344 217.954948899999 9.996 190.75462069999898 9.584)
Error minima by case: (0.0 2 4.677 6 0.0 1 0.0 2 0.0 4 0.0 2 0.0 2 0.0 1 0.0135 7 0.0 2 0.6727 5 0.0 2 5.8792 6 0.3466 7 0.0155 5 2.3661 8 0.0405 6 0.0 2 0.0 2 0.0 2 0.0 1 9.2001 7 0.0 2 0.0 2 0.0 1)
Average genome size in population (length): 107.051
Average program size in population (points): 108.051
Average percent parens in population: 0.009
Minimum age in population: 162.229547582152
Maximum age in population: 167.2315706862822
Average age in population: 165.516489161124
Median age in population: 165.5536476135474
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.893
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.893
Total error diversity:				 0.484
Error (vector) diversity:			 0.564
Behavioral diversity:				 0.567
--- Run Statistics ---
Number of program evaluations used so far: 118000
Number of point (instruction) evaluations so far: 268344075
--- Timings ---
Current time: 1529615425612 milliseconds
Total Time:         538.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       185.9 seconds, 34.5%
Fitness Testing:    278.6 seconds, 51.7%
Report:              74.3 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 117
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 118
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 118
;;******************************
;; -*- Number IO problem report - generation 118
Test total error for best: 5000.0
Test mean error for best: 2.50000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 143.560997883580781
Correct output: -141.201628771 | Program output: -141.20162877180781
Correct output: 23.3844813461  | Program output: 23.384481346180781
Correct output: 91.3818662575  | Program output: 91.381866257580781
Correct output: 6.0991287499   | Program output: 6.099128749980781
Correct output: 90.6078865723  | Program output: 90.607886572380781
Correct output: -16.3558496064 | Program output: -16.355849606480781
Correct output: 85.2320058807  | Program output: 85.232005880780781
Correct output: -28.7080490162 | Program output: -28.708049016280781
Correct output: -10.4844827466 | Program output: -10.484482746680781
Correct output: -59.408072605  | Program output: -59.40807260580781
Correct output: 59.1228402624  | Program output: 59.122840262480781
Correct output: -132.1998002816 | Program output: -132.199800281680781
Correct output: -128.9949320478 | Program output: -128.994932047880781
Correct output: -78.0962956202 | Program output: -78.096295620280781
Correct output: -35.919351649  | Program output: -35.91935164980781
Correct output: -56.0400311694 | Program output: -56.040031169480781
Correct output: 137.4302481607 | Program output: 137.430248160780781
Correct output: 32.7727726522  | Program output: 32.772772652280781
Correct output: -26.6497561561 | Program output: -26.649756156180781
Correct output: 95.3927116996  | Program output: 95.392711699680781
Correct output: -65.8806745395 | Program output: -65.880674539580781
Correct output: 48.7839285535  | Program output: 48.783928553580781
Correct output: 176.7350863211 | Program output: 176.735086321180781
Correct output: -87.9710392115 | Program output: -87.971039211580781
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction integer_rot} {:instruction float_yankdup} {:instruction in1} {:instruction integer_rot} {:instruction float_min} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction -83} {:instruction integer_div} {:instruction 54.34656699849809} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction float_mod} {:instruction float_yankdup} {:instruction in2} {:instruction float_sub} {:instruction float_frominteger} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction print_integer} {:instruction integer_inc} {:instruction integer_inc} {:instruction print_integer} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_dup} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction in1} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_pop} {:instruction integer_inc} {:instruction float_add} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction print_integer} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_div} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_cos} {:instruction tag_integer_314} {:instruction integer_flush} {:instruction float_dup} {:instruction float_tan} {:instruction float_dec} {:instruction integer_div} {:instruction print_integer} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction 76} {:instruction integer_stackdepth} {:instruction print_integer})
Best program: (float_yankdup in1 integer_rot float_yankdup in1 integer_rot float_min 93 integer_dup_times float_yankdup integer_dup_items -83 integer_div 54.34656699849809 float_swap float_yankdup float_tan float_mod float_yankdup in2 float_sub float_frominteger integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc print_integer integer_inc integer_inc print_integer integer_inc integer_inc integer_inc integer_inc integer_inc float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_dup integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc in1 float_yankdup integer_inc integer_inc float_pop integer_inc float_add print_float integer_mod 80 float_min print_integer integer_shove float_dup integer_rot integer_swap integer_add integer_dup_items integer_swap integer_shove float_swap 78 float_min print_integer integer_mult float_dup integer_dup_items integer_div integer_shove integer_dup_items integer_swap integer_shove float_dup_times float_cos tag_integer_314 integer_flush float_dup float_tan float_dec integer_div print_integer float_pop float_yankdup float_swap 76 integer_stackdepth print_integer)
Errors: [0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5 0.0 5]
Total: 125.0
Mean: 2.5
Genome size: 101
Size: 102
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4106.414018499997
Median total errors in population: 1275.7156
Error averages by case: (150.87418479999982 8.286 174.09538459999996 9.72 126.52375200000014 7.546 164.38675509999996 10.083 156.86086129999947 11.098 152.78344370000002 7.997 151.69881519999979 8.159 152.3031884 7.472 168.701680600002 10.213 147.53538830000008 8.104 175.16280359999888 9.329 129.47939100000016 8.118 172.9983673000002 10.633 173.0409276999997 11.347 146.1249818999996 11.193 186.27589150000176 11.241 143.1838064 10.345 146.71393240000003 7.985 140.4467027000001 10.6 160.9247265000002 8.179 126.58495490000011 7.671 188.72091509999834 10.806 128.7608071 8.041 167.31169099999994 8.461 144.0136653999999 8.28)
Error minima by case: (0.0 2 0.0 4 0.0 1 0.0 2 0.0 4 0.0 2 0.0 2 0.0 1 0.0 4 0.0 2 0.0 4 0.0 2 0.0 4 0.0 4 0.0 4 0.0 4 0.0 4 0.0 2 0.0 2 0.0 2 0.0 1 0.0 4 0.0 2 0.0 2 0.0 1)
Average genome size in population (length): 106.867
Average program size in population (points): 107.867
Average percent parens in population: 0.009
Minimum age in population: 164.6377731676873
Maximum age in population: 168.7457987558009
Average age in population: 167.0862477258979
Median age in population: 167.1445693209774
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.905
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.905
Total error diversity:				 0.527
Error (vector) diversity:			 0.583
Behavioral diversity:				 0.583
--- Run Statistics ---
Number of program evaluations used so far: 119000
Number of point (instruction) evaluations so far: 271015825
--- Timings ---
Current time: 1529615430854 milliseconds
Total Time:         544.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       187.5 seconds, 34.4%
Fitness Testing:    281.6 seconds, 51.7%
Report:              75.1 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 118
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 119
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 119
;;******************************
;; -*- Number IO problem report - generation 119
Test total error for best: 3000.0
Test mean error for best: 1.50000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 143.5609978835781
Correct output: -141.201628771 | Program output: -141.201628771781
Correct output: 23.3844813461  | Program output: 23.3844813461781
Correct output: 91.3818662575  | Program output: 91.3818662575781
Correct output: 6.0991287499   | Program output: 6.0991287499781
Correct output: 90.6078865723  | Program output: 90.6078865723781
Correct output: -16.3558496064 | Program output: -16.3558496064781
Correct output: 85.2320058807  | Program output: 85.2320058807781
Correct output: -28.7080490162 | Program output: -28.7080490162781
Correct output: -10.4844827466 | Program output: -10.4844827466781
Correct output: -59.408072605  | Program output: -59.408072605781
Correct output: 59.1228402624  | Program output: 59.1228402624781
Correct output: -132.1998002816 | Program output: -132.1998002816781
Correct output: -128.9949320478 | Program output: -128.9949320478781
Correct output: -78.0962956202 | Program output: -78.0962956202781
Correct output: -35.919351649  | Program output: -35.919351649781
Correct output: -56.0400311694 | Program output: -56.0400311694781
Correct output: 137.4302481607 | Program output: 137.4302481607781
Correct output: 32.7727726522  | Program output: 32.7727726522781
Correct output: -26.6497561561 | Program output: -26.6497561561781
Correct output: 95.3927116996  | Program output: 95.3927116996781
Correct output: -65.8806745395 | Program output: -65.8806745395781
Correct output: 48.7839285535  | Program output: 48.7839285535781
Correct output: 176.7350863211 | Program output: 176.7350863211781
Correct output: -87.9710392115 | Program output: -87.9710392115781
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction integer_rot} {:instruction float_min} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction -83} {:instruction integer_div} {:instruction 54.34656699849809} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction float_sub} {:instruction float_frominteger} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction print_integer} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_add} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction integer_min} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_max} {:instruction integer_add} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction print_integer} {:instruction integer_mult} {:instruction float_swap} {:instruction 78} {:instruction float_min} {:instruction integer_sub} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_dup} {:instruction float_max} {:instruction print_integer} {:instruction float_stackdepth} {:instruction in1} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_cos} {:instruction float_rot} {:instruction float_mod} {:instruction float_pop} {:instruction float_yank} {:instruction float_max} {:instruction print_integer})
Best program: (float_yankdup in1 integer_rot float_min 93 integer_dup_times float_yankdup integer_dup_items -83 integer_div 54.34656699849809 float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 float_sub float_frominteger integer_inc integer_inc integer_yankdup integer_inc integer_inc integer_inc integer_inc print_integer integer_inc integer_inc integer_inc integer_inc integer_inc float_yankdup in2 integer_stackdepth integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_yankdup integer_inc integer_inc integer_inc integer_inc float_add print_float integer_mod 80 float_min integer_min integer_shove float_dup integer_rot integer_max integer_add integer_dup_items integer_swap integer_shove float_swap 78 float_min print_integer integer_mult float_swap 78 float_min integer_sub float_pop float_yankdup float_swap integer_dup integer_dup_times float_pop float_dup float_max print_integer float_stackdepth in1 float_min float_stackdepth float_cos float_rot float_mod float_pop float_yank float_max print_integer)
Errors: [0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3]
Total: 75.0
Mean: 1.5
Genome size: 98
Size: 99
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4177.116978399999
Median total errors in population: 813.77575
Error averages by case: (141.6487037999999 7.196 182.16187419999906 9.917 129.9296260000001 7.255 146.11502780000015 7.588 174.44379639999948 10.618 140.62174729999992 7.363 146.20173309999993 7.406 139.35219159999994 7.103 196.13250300000183 10.869 143.0189942000001 7.405 208.02693489999913 10.266 131.99750670000014 7.437 189.54192299999897 10.481 165.09266820000005 10.811 145.3226532000006 10.982 217.5131315000019 11.292 154.3350491000003 10.302 140.78531749999993 7.243 137.78672890000004 7.878 151.39018030000003 7.436 129.88265240000018 7.344 224.24389109999845 11.456 131.69138600000008 7.366 145.20127709999994 7.329 146.4944810999999 7.842)
Error minima by case: (0.0 1 0.0 2 0.0 1 0.0 1 0.0 2 0.0 1 0.0 1 0.0 1 0.0 2 0.0 1 0.0 2 0.0 1 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 1 0.0 1 0.0 1 0.0 1 0.0 2 0.0 1 0.0 1 0.0 1)
Average genome size in population (length): 106.996
Average program size in population (points): 107.996
Average percent parens in population: 0.009
Minimum age in population: 166.3243618120996
Maximum age in population: 170.493812109442
Average age in population: 168.5174516790355
Median age in population: 168.5496956572668
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.913
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.913
Total error diversity:				 0.526
Error (vector) diversity:			 0.574
Behavioral diversity:				 0.578
--- Run Statistics ---
Number of program evaluations used so far: 120000
Number of point (instruction) evaluations so far: 273690800
--- Timings ---
Current time: 1529615435930 milliseconds
Total Time:         549.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       188.9 seconds, 34.4%
Fitness Testing:    284.4 seconds, 51.8%
Report:              75.8 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 119
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 120
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 120
;;******************************
;; -*- Number IO problem report - generation 120
Test total error for best: 1000.0
Test mean error for best: 0.50000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 143.56099788351
Correct output: -141.201628771 | Program output: -141.2016287711
Correct output: 23.3844813461  | Program output: 23.38448134611
Correct output: 91.3818662575  | Program output: 91.38186625751
Correct output: 6.0991287499   | Program output: 6.09912874991 
Correct output: 90.6078865723  | Program output: 90.60788657231
Correct output: -16.3558496064 | Program output: -16.35584960641
Correct output: 85.2320058807  | Program output: 85.23200588071
Correct output: -28.7080490162 | Program output: -28.70804901621
Correct output: -10.4844827466 | Program output: -10.48448274661
Correct output: -59.408072605  | Program output: -59.4080726051
Correct output: 59.1228402624  | Program output: 59.12284026241
Correct output: -132.1998002816 | Program output: -132.19980028161
Correct output: -128.9949320478 | Program output: -128.99493204781
Correct output: -78.0962956202 | Program output: -78.09629562021
Correct output: -35.919351649  | Program output: -35.9193516491
Correct output: -56.0400311694 | Program output: -56.04003116941
Correct output: 137.4302481607 | Program output: 137.43024816071
Correct output: 32.7727726522  | Program output: 32.77277265221
Correct output: -26.6497561561 | Program output: -26.64975615611
Correct output: 95.3927116996  | Program output: 95.39271169961
Correct output: -65.8806745395 | Program output: -65.88067453951
Correct output: 48.7839285535  | Program output: 48.78392855351
Correct output: 176.7350863211 | Program output: 176.73508632111
Correct output: -87.9710392115 | Program output: -87.97103921151
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction integer_rot} {:instruction float_min} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction -83} {:instruction integer_div} {:instruction 54.34656699849809} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction float_sub} {:instruction float_frominteger} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction print_integer} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_add} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_min} {:instruction integer_max} {:instruction float_cos} {:instruction print_integer} {:instruction float_swap} {:instruction 76} {:instruction float_swap} {:instruction float_min} {:instruction float_min} {:instruction integer_dup_items} {:instruction integer_div} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_cos} {:instruction tag_integer_314} {:instruction integer_flush} {:instruction float_dup} {:instruction float_tan} {:instruction float_dec} {:instruction integer_div} {:instruction print_integer} {:instruction print_integer} {:instruction float_swap} {:instruction float_swap} {:instruction 76} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_div} {:instruction float_pop} {:instruction float_dup} {:instruction integer_swap} {:instruction -99} {:instruction float_inc} {:instruction float_pop} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction print_integer})
Best program: (float_yankdup in1 integer_rot float_min 93 integer_dup_times float_yankdup integer_dup_items -83 integer_div 54.34656699849809 float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 float_sub float_frominteger integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc print_integer integer_inc integer_inc integer_inc integer_inc integer_inc float_yankdup in2 integer_stackdepth integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_yankdup integer_inc integer_inc integer_inc integer_inc float_add print_float integer_mod 80 integer_rot integer_swap integer_add integer_dup_items integer_swap float_min integer_max float_cos print_integer float_swap 76 float_swap float_min float_min integer_dup_items integer_div integer_shove integer_dup_items integer_swap integer_shove float_dup_times float_cos tag_integer_314 integer_flush float_dup float_tan float_dec integer_div print_integer print_integer float_swap float_swap 76 integer_stackdepth print_integer integer_mult float_pop float_yankdup float_swap integer_dup integer_div float_pop float_dup integer_swap -99 float_inc float_pop float_yank float_yank float_mult print_integer)
Errors: [0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1]
Total: 25.0
Mean: 0.5
Genome size: 110
Size: 111
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3731.150992299999
Median total errors in population: 772.7456999999999
Error averages by case: (126.61270979999999 6.409 165.94318429999942 10.895 120.87355940000005 6.573 128.44792680000012 6.518 150.48788730000027 9.883 124.07795229999995 6.542 131.09131699999998 6.591 124.6627249999999 6.37 171.35095020000065 11.779 128.67741210000003 6.63 176.39849249999972 11.637 121.12242630000001 6.737 169.7345155000002 11.372 150.38417550000108 11.253 127.8671306000006 10.301 185.80668310000084 11.569 137.26287150000002 9.99 126.57897620000021 6.585 124.40044769999996 6.794 134.9290352999999 6.631 124.24688590000008 6.767 188.23393149999976 11.959 121.4349696 6.629 127.48544549999986 6.518 133.13438139999994 6.973)
Error minima by case: (0.0 0 0.0 1 0.0 0 0.0 0 0.0 1 0.0 0 0.0 0 0.0 0 0.0 1 0.0 0 0.0 1 0.0 0 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 0 0.0 0 0.0 0 0.0 0 0.0 1 0.0 0 0.0 0 0.0 0)
Average genome size in population (length): 103.066
Average program size in population (points): 104.066
Average percent parens in population: 0.010
Minimum age in population: 167.846451545754
Maximum age in population: 171.8583029430616
Average age in population: 170.0448117842766
Median age in population: 170.0901235266974
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.904
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.904
Total error diversity:				 0.495
Error (vector) diversity:			 0.519
Behavioral diversity:				 0.53
--- Run Statistics ---
Number of program evaluations used so far: 121000
Number of point (instruction) evaluations so far: 276267500
--- Timings ---
Current time: 1529615440952 milliseconds
Total Time:         554.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       190.7 seconds, 34.4%
Fitness Testing:    287.0 seconds, 51.8%
Report:              76.6 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 120
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 121
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 121
;;******************************
;; -*- Number IO problem report - generation 121
Test total error for best: 0.0
Test mean error for best: 0.00000
Test Case    0 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    1 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    2 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    3 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    4 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    5 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    6 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    7 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    8 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    9 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   10 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   11 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   12 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   13 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   14 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   15 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   16 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   17 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   18 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   19 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   20 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   21 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   22 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   23 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   24 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   25 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   26 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   27 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   28 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   29 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   30 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   31 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   32 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   33 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   34 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   35 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   36 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   37 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   38 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   39 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   40 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   41 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   42 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   43 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   44 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   45 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   46 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   47 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   48 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   49 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   50 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   51 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   52 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   53 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   54 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   55 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   56 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   57 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   58 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   59 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   60 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   61 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   62 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   63 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   64 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   65 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   66 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   67 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   68 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   69 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   70 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   71 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   72 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   73 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   74 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   75 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   76 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   77 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   78 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   79 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   80 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   81 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   82 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   83 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   84 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   85 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   86 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   87 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   88 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   89 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   90 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   91 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   92 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   93 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   94 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   95 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   96 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   97 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   98 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   99 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  100 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  101 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  102 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  103 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  104 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  105 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  106 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  107 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  108 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  109 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  110 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  111 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  112 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  113 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  114 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  115 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  116 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  117 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  118 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  119 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  120 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  121 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  122 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  123 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  124 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  125 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  126 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  127 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  128 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  129 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  130 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  131 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  132 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  133 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  134 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  135 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  136 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  137 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  138 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  139 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  140 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  141 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  142 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  143 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  144 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  145 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  146 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  147 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  148 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  149 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  150 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  151 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  152 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  153 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  154 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  155 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  156 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  157 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  158 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  159 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  160 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  161 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  162 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  163 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  164 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  165 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  166 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  167 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  168 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  169 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  170 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  171 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  172 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  173 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  174 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  175 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  176 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  177 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  178 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  179 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  180 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  181 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  182 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  183 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  184 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  185 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  186 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  187 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  188 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  189 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  190 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  191 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  192 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  193 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  194 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  195 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  196 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  197 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  198 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  199 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  200 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  201 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  202 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  203 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  204 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  205 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  206 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  207 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  208 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  209 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  210 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  211 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  212 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  213 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  214 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  215 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  216 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  217 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  218 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  219 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  220 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  221 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  222 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  223 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  224 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  225 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  226 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  227 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  228 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  229 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  230 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  231 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  232 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  233 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  234 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  235 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  236 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  237 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  238 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  239 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  240 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  241 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  242 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  243 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  244 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  245 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  246 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  247 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  248 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  249 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  250 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  251 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  252 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  253 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  254 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  255 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  256 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  257 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  258 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  259 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  260 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  261 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  262 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  263 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  264 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  265 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  266 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  267 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  268 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  269 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  270 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  271 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  272 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  273 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  274 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  275 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  276 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  277 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  278 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  279 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  280 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  281 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  282 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  283 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  284 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  285 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  286 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  287 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  288 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  289 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  290 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  291 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  292 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  293 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  294 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  295 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  296 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  297 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  298 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  299 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  300 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  301 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  302 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  303 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  304 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  305 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  306 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  307 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  308 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  309 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  310 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  311 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  312 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  313 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  314 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  315 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  316 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  317 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  318 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  319 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  320 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  321 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  322 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  323 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  324 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  325 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  326 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  327 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  328 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  329 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  330 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  331 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  332 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  333 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  334 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  335 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  336 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  337 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  338 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  339 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  340 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  341 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  342 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  343 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  344 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  345 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  346 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  347 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  348 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  349 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  350 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  351 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  352 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  353 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  354 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  355 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  356 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  357 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  358 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  359 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  360 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  361 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  362 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  363 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  364 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  365 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  366 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  367 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  368 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  369 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  370 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  371 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  372 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  373 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  374 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  375 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  376 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  377 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  378 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  379 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  380 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  381 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  382 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  383 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  384 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  385 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  386 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  387 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  388 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  389 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  390 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  391 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  392 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  393 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  394 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  395 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  396 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  397 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  398 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  399 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  400 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  401 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  402 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  403 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  404 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  405 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  406 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  407 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  408 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  409 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  410 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  411 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  412 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  413 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  414 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  415 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  416 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  417 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  418 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  419 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  420 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  421 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  422 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  423 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  424 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  425 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  426 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  427 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  428 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  429 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  430 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  431 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  432 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  433 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  434 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  435 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  436 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  437 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  438 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  439 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  440 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  441 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  442 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  443 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  444 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  445 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  446 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  447 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  448 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  449 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  450 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  451 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  452 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  453 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  454 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  455 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  456 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  457 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  458 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  459 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  460 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  461 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  462 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  463 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  464 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  465 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  466 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  467 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  468 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  469 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  470 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  471 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  472 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  473 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  474 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  475 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  476 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  477 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  478 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  479 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  480 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  481 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  482 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  483 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  484 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  485 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  486 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  487 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  488 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  489 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  490 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  491 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  492 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  493 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  494 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  495 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  496 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  497 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  498 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  499 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  500 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  501 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  502 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  503 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  504 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  505 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  506 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  507 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  508 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  509 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  510 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  511 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  512 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  513 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  514 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  515 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  516 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  517 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  518 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  519 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  520 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  521 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  522 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  523 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  524 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  525 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  526 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  527 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  528 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  529 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  530 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  531 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  532 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  533 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  534 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  535 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  536 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  537 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  538 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  539 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  540 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  541 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  542 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  543 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  544 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  545 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  546 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  547 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  548 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  549 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  550 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  551 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  552 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  553 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  554 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  555 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  556 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  557 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  558 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  559 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  560 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  561 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  562 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  563 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  564 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  565 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  566 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  567 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  568 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  569 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  570 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  571 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  572 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  573 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  574 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  575 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  576 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  577 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  578 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  579 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  580 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  581 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  582 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  583 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  584 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  585 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  586 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  587 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  588 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  589 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  590 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  591 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  592 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  593 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  594 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  595 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  596 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  597 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  598 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  599 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  600 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  601 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  602 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  603 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  604 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  605 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  606 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  607 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  608 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  609 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  610 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  611 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  612 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  613 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  614 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  615 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  616 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  617 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  618 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  619 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  620 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  621 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  622 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  623 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  624 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  625 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  626 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  627 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  628 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  629 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  630 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  631 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  632 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  633 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  634 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  635 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  636 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  637 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  638 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  639 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  640 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  641 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  642 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  643 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  644 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  645 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  646 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  647 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  648 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  649 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  650 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  651 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  652 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  653 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  654 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  655 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  656 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  657 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  658 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  659 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  660 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  661 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  662 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  663 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  664 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  665 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  666 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  667 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  668 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  669 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  670 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  671 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  672 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  673 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  674 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  675 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  676 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  677 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  678 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  679 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  680 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  681 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  682 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  683 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  684 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  685 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  686 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  687 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  688 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  689 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  690 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  691 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  692 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  693 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  694 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  695 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  696 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  697 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  698 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  699 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  700 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  701 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  702 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  703 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  704 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  705 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  706 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  707 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  708 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  709 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  710 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  711 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  712 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  713 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  714 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  715 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  716 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  717 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  718 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  719 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  720 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  721 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  722 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  723 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  724 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  725 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  726 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  727 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  728 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  729 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  730 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  731 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  732 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  733 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  734 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  735 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  736 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  737 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  738 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  739 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  740 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  741 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  742 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  743 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  744 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  745 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  746 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  747 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  748 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  749 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  750 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  751 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  752 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  753 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  754 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  755 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  756 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  757 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  758 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  759 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  760 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  761 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  762 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  763 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  764 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  765 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  766 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  767 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  768 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  769 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  770 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  771 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  772 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  773 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  774 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  775 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  776 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  777 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  778 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  779 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  780 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  781 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  782 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  783 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  784 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  785 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  786 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  787 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  788 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  789 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  790 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  791 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  792 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  793 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  794 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  795 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  796 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  797 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  798 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  799 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  800 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  801 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  802 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  803 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  804 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  805 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  806 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  807 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  808 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  809 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  810 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  811 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  812 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  813 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  814 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  815 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  816 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  817 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  818 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  819 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  820 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  821 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  822 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  823 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  824 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  825 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  826 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  827 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  828 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  829 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  830 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  831 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  832 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  833 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  834 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  835 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  836 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  837 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  838 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  839 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  840 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  841 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  842 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  843 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  844 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  845 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  846 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  847 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  848 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  849 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  850 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  851 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  852 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  853 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  854 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  855 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  856 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  857 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  858 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  859 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  860 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  861 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  862 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  863 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  864 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  865 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  866 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  867 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  868 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  869 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  870 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  871 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  872 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  873 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  874 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  875 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  876 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  877 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  878 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  879 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  880 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  881 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  882 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  883 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  884 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  885 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  886 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  887 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  888 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  889 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  890 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  891 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  892 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  893 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  894 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  895 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  896 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  897 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  898 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  899 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  900 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  901 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  902 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  903 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  904 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  905 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  906 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  907 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  908 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  909 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  910 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  911 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  912 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  913 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  914 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  915 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  916 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  917 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  918 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  919 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  920 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  921 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  922 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  923 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  924 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  925 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  926 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  927 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  928 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  929 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  930 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  931 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  932 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  933 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  934 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  935 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  936 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  937 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  938 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  939 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  940 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  941 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  942 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  943 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  944 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  945 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  946 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  947 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  948 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  949 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  950 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  951 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  952 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  953 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  954 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  955 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  956 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  957 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  958 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  959 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  960 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  961 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  962 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  963 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  964 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  965 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  966 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  967 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  968 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  969 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  970 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  971 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  972 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  973 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  974 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  975 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  976 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  977 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  978 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  979 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  980 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  981 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  982 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  983 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  984 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  985 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  986 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  987 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  988 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  989 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  990 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  991 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  992 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  993 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  994 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  995 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  996 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  997 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  998 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  999 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 143.5609978835
Correct output: -141.201628771 | Program output: -141.201628771
Correct output: 23.3844813461  | Program output: 23.3844813461 
Correct output: 91.3818662575  | Program output: 91.3818662575 
Correct output: 6.0991287499   | Program output: 6.0991287499  
Correct output: 90.6078865723  | Program output: 90.6078865723 
Correct output: -16.3558496064 | Program output: -16.3558496064
Correct output: 85.2320058807  | Program output: 85.2320058807 
Correct output: -28.7080490162 | Program output: -28.7080490162
Correct output: -10.4844827466 | Program output: -10.4844827466
Correct output: -59.408072605  | Program output: -59.408072605 
Correct output: 59.1228402624  | Program output: 59.1228402624 
Correct output: -132.1998002816 | Program output: -132.1998002816
Correct output: -128.9949320478 | Program output: -128.9949320478
Correct output: -78.0962956202 | Program output: -78.0962956202
Correct output: -35.919351649  | Program output: -35.919351649 
Correct output: -56.0400311694 | Program output: -56.0400311694
Correct output: 137.4302481607 | Program output: 137.4302481607
Correct output: 32.7727726522  | Program output: 32.7727726522 
Correct output: -26.6497561561 | Program output: -26.6497561561
Correct output: 95.3927116996  | Program output: 95.3927116996 
Correct output: -65.8806745395 | Program output: -65.8806745395
Correct output: 48.7839285535  | Program output: 48.7839285535 
Correct output: 176.7350863211 | Program output: 176.7350863211
Correct output: -87.9710392115 | Program output: -87.9710392115
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction integer_rot} {:instruction float_min} {:instruction 93} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction -83} {:instruction integer_div} {:instruction 54.34656699849809} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_tan} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction float_sub} {:instruction float_frominteger} {:instruction 42.446747745532946} {:instruction float_yank} {:instruction float_yankdup} {:instruction in2} {:instruction float_sub} {:instruction float_frominteger} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_div} {:instruction integer_inc} {:instruction print_integer} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_dup_times} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_add} {:instruction print_float} {:instruction integer_mod} {:instruction 80} {:instruction float_min} {:instruction integer_min} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_div} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_cos} {:instruction tag_integer_314} {:instruction integer_flush} {:instruction float_dup} {:instruction float_tan} {:instruction float_dec} {:instruction integer_div} {:instruction print_integer} {:instruction float_pop} {:instruction float_swap} {:instruction tagged_599} {:instruction float_yank} {:instruction float_max} {:instruction print_integer})
Best program: (float_yankdup in1 integer_rot float_min 93 integer_dup_times float_yankdup integer_dup_items -83 integer_div 54.34656699849809 float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 float_sub float_frominteger 42.446747745532946 float_yank float_yankdup in2 float_sub float_frominteger integer_inc integer_inc integer_inc integer_inc integer_inc integer_div integer_inc print_integer integer_inc integer_inc integer_dup_times integer_inc integer_inc float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc float_stackdepth integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_yankdup integer_inc integer_inc integer_inc integer_inc float_add print_float integer_mod 80 float_min integer_min integer_shove float_dup integer_rot integer_swap integer_add integer_dup_items integer_swap float_dup integer_dup_items integer_div integer_shove integer_dup_items integer_swap integer_shove float_dup_times float_cos tag_integer_314 integer_flush float_dup float_tan float_dec integer_div print_integer float_pop float_swap tagged_599 float_yank float_max print_integer)
Errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
Total: 0.0
Mean: 0.0
Genome size: 96
Size: 97
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4388.629439099999
Median total errors in population: 562.13195
Error averages by case: (157.56094579999993 6.965 196.17693999999904 11.002 148.38414090000003 7.097 160.70593790000004 7.161 169.85909279999987 8.674 156.10377339999994 7.161 163.6698256999999 7.291 154.05078379999998 6.995 180.14949420000076 11.691 161.59772959999995 7.32 184.79515050000026 11.701 148.66961020000008 7.337 195.13902060000046 11.247 182.0195360000014 11.037 164.4290508 8.789 187.43073580000035 11.038 167.58288350000004 8.733 157.61120090000014 7.314 155.34903969999996 7.511 166.5713861000001 7.24 153.9188681 7.527 188.5556558999996 11.306 150.6774336 7.211 159.04448209999987 7.128 164.64472119999988 7.456)
Error minima by case: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
Average genome size in population (length): 102.774
Average program size in population (points): 103.774
Average percent parens in population: 0.010
Minimum age in population: 168.9780733032776
Maximum age in population: 173.5734541232759
Average age in population: 171.5480132627801
Median age in population: 171.6004727913934
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.907
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.907
Total error diversity:				 0.479
Error (vector) diversity:			 0.516
Behavioral diversity:				 0.575
--- Run Statistics ---
Number of program evaluations used so far: 122000
Number of point (instruction) evaluations so far: 278836903
--- Timings ---
Current time: 1529615445907 milliseconds
Total Time:         559.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       192.1 seconds, 34.3%
Fitness Testing:    290.0 seconds, 51.8%
Report:              77.2 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 121
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 121
Successful program: (float_yankdup in1 integer_rot float_min 93 integer_dup_times float_yankdup integer_dup_items -83 integer_div 54.34656699849809 float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 float_sub float_frominteger 42.446747745532946 float_yank float_yankdup in2 float_sub float_frominteger integer_inc integer_inc integer_inc integer_inc integer_inc integer_div integer_inc print_integer integer_inc integer_inc integer_dup_times integer_inc integer_inc float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc float_stackdepth integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_yankdup integer_inc integer_inc integer_inc integer_inc float_add print_float integer_mod 80 float_min integer_min integer_shove float_dup integer_rot integer_swap integer_add integer_dup_items integer_swap float_dup integer_dup_items integer_div integer_shove integer_dup_items integer_swap integer_shove float_dup_times float_cos tag_integer_314 integer_flush float_dup float_tan float_dec integer_div print_integer float_pop float_swap tagged_599 float_yank float_max print_integer)
Errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
Total error: 0.0
History: null
Size: 97


Auto-simplifying with starting size: 97
step: 0
program: (float_yankdup in1 integer_rot float_min 93 integer_dup_times float_yankdup integer_dup_items -83 integer_div 54.34656699849809 float_swap float_yankdup float_tan 42.446747745532946 float_yank float_yankdup in2 float_sub float_frominteger 42.446747745532946 float_yank float_yankdup in2 float_sub float_frominteger integer_inc integer_inc integer_inc integer_inc integer_inc integer_div integer_inc print_integer integer_inc integer_inc integer_dup_times integer_inc integer_inc float_yankdup in2 integer_inc integer_inc integer_inc integer_inc integer_inc float_stackdepth integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc integer_inc float_yankdup integer_inc integer_inc integer_inc integer_inc float_add print_float integer_mod 80 float_min integer_min integer_shove float_dup integer_rot integer_swap integer_add integer_dup_items integer_swap float_dup integer_dup_items integer_div integer_shove integer_dup_items integer_swap integer_shove float_dup_times float_cos tag_integer_314 integer_flush float_dup float_tan float_dec integer_div print_integer float_pop float_swap tagged_599 float_yank float_max print_integer)
errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
total: 0.0
size: 97

step: 500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 1000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 1500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 2000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 2500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 3000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 3500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 4000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 4500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 5000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Number IO problem report - generation 121
Test total error for best: 0.0
Test mean error for best: 0.00000
Test Case    0 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    1 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    2 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    3 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    4 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    5 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    6 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    7 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    8 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    9 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   10 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   11 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   12 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   13 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   14 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   15 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   16 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   17 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   18 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   19 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   20 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   21 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   22 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   23 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   24 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   25 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   26 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   27 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   28 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   29 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   30 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   31 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   32 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   33 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   34 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   35 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   36 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   37 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   38 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   39 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   40 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   41 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   42 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   43 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   44 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   45 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   46 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   47 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   48 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   49 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   50 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   51 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   52 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   53 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   54 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   55 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   56 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   57 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   58 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   59 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   60 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   61 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   62 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   63 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   64 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   65 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   66 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   67 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   68 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   69 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   70 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   71 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   72 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   73 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   74 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   75 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   76 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   77 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   78 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   79 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   80 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   81 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   82 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   83 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   84 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   85 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   86 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   87 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   88 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   89 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   90 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   91 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   92 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   93 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   94 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   95 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   96 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   97 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   98 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   99 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  100 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  101 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  102 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  103 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  104 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  105 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  106 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  107 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  108 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  109 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  110 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  111 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  112 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  113 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  114 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  115 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  116 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  117 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  118 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  119 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  120 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  121 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  122 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  123 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  124 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  125 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  126 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  127 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  128 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  129 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  130 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  131 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  132 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  133 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  134 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  135 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  136 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  137 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  138 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  139 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  140 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  141 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  142 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  143 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  144 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  145 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  146 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  147 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  148 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  149 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  150 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  151 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  152 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  153 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  154 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  155 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  156 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  157 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  158 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  159 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  160 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  161 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  162 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  163 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  164 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  165 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  166 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  167 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  168 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  169 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  170 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  171 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  172 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  173 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  174 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  175 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  176 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  177 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  178 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  179 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  180 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  181 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  182 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  183 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  184 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  185 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  186 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  187 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  188 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  189 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  190 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  191 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  192 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  193 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  194 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  195 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  196 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  197 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  198 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  199 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  200 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  201 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  202 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  203 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  204 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  205 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  206 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  207 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  208 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  209 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  210 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  211 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  212 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  213 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  214 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  215 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  216 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  217 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  218 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  219 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  220 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  221 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  222 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  223 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  224 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  225 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  226 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  227 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  228 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  229 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  230 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  231 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  232 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  233 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  234 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  235 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  236 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  237 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  238 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  239 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  240 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  241 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  242 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  243 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  244 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  245 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  246 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  247 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  248 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  249 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  250 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  251 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  252 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  253 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  254 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  255 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  256 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  257 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  258 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  259 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  260 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  261 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  262 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  263 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  264 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  265 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  266 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  267 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  268 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  269 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  270 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  271 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  272 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  273 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  274 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  275 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  276 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  277 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  278 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  279 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  280 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  281 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  282 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  283 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  284 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  285 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  286 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  287 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  288 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  289 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  290 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  291 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  292 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  293 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  294 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  295 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  296 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  297 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  298 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  299 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  300 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  301 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  302 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  303 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  304 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  305 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  306 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  307 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  308 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  309 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  310 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  311 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  312 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  313 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  314 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  315 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  316 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  317 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  318 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  319 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  320 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  321 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  322 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  323 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  324 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  325 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  326 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  327 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  328 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  329 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  330 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  331 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  332 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  333 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  334 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  335 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  336 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  337 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  338 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  339 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  340 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  341 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  342 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  343 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  344 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  345 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  346 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  347 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  348 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  349 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  350 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  351 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  352 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  353 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  354 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  355 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  356 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  357 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  358 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  359 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  360 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  361 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  362 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  363 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  364 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  365 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  366 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  367 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  368 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  369 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  370 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  371 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  372 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  373 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  374 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  375 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  376 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  377 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  378 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  379 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  380 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  381 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  382 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  383 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  384 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  385 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  386 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  387 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  388 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  389 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  390 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  391 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  392 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  393 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  394 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  395 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  396 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  397 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  398 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  399 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  400 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  401 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  402 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  403 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  404 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  405 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  406 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  407 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  408 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  409 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  410 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  411 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  412 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  413 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  414 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  415 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  416 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  417 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  418 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  419 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  420 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  421 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  422 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  423 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  424 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  425 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  426 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  427 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  428 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  429 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  430 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  431 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  432 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  433 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  434 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  435 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  436 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  437 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  438 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  439 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  440 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  441 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  442 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  443 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  444 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  445 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  446 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  447 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  448 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  449 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  450 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  451 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  452 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  453 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  454 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  455 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  456 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  457 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  458 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  459 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  460 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  461 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  462 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  463 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  464 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  465 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  466 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  467 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  468 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  469 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  470 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  471 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  472 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  473 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  474 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  475 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  476 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  477 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  478 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  479 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  480 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  481 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  482 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  483 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  484 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  485 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  486 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  487 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  488 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  489 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  490 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  491 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  492 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  493 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  494 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  495 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  496 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  497 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  498 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  499 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  500 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  501 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  502 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  503 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  504 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  505 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  506 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  507 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  508 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  509 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  510 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  511 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  512 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  513 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  514 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  515 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  516 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  517 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  518 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  519 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  520 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  521 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  522 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  523 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  524 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  525 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  526 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  527 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  528 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  529 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  530 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  531 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  532 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  533 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  534 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  535 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  536 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  537 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  538 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  539 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  540 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  541 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  542 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  543 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  544 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  545 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  546 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  547 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  548 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  549 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  550 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  551 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  552 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  553 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  554 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  555 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  556 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  557 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  558 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  559 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  560 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  561 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  562 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  563 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  564 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  565 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  566 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  567 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  568 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  569 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  570 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  571 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  572 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  573 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  574 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  575 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  576 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  577 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  578 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  579 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  580 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  581 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  582 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  583 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  584 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  585 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  586 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  587 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  588 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  589 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  590 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  591 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  592 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  593 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  594 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  595 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  596 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  597 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  598 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  599 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  600 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  601 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  602 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  603 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  604 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  605 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  606 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  607 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  608 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  609 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  610 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  611 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  612 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  613 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  614 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  615 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  616 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  617 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  618 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  619 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  620 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  621 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  622 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  623 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  624 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  625 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  626 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  627 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  628 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  629 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  630 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  631 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  632 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  633 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  634 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  635 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  636 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  637 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  638 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  639 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  640 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  641 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  642 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  643 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  644 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  645 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  646 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  647 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  648 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  649 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  650 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  651 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  652 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  653 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  654 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  655 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  656 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  657 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  658 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  659 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  660 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  661 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  662 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  663 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  664 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  665 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  666 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  667 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  668 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  669 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  670 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  671 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  672 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  673 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  674 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  675 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  676 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  677 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  678 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  679 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  680 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  681 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  682 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  683 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  684 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  685 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  686 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  687 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  688 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  689 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  690 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  691 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  692 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  693 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  694 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  695 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  696 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  697 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  698 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  699 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  700 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  701 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  702 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  703 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  704 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  705 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  706 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  707 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  708 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  709 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  710 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  711 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  712 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  713 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  714 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  715 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  716 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  717 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  718 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  719 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  720 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  721 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  722 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  723 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  724 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  725 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  726 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  727 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  728 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  729 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  730 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  731 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  732 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  733 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  734 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  735 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  736 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  737 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  738 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  739 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  740 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  741 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  742 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  743 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  744 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  745 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  746 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  747 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  748 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  749 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  750 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  751 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  752 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  753 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  754 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  755 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  756 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  757 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  758 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  759 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  760 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  761 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  762 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  763 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  764 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  765 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  766 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  767 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  768 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  769 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  770 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  771 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  772 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  773 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  774 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  775 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  776 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  777 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  778 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  779 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  780 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  781 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  782 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  783 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  784 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  785 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  786 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  787 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  788 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  789 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  790 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  791 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  792 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  793 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  794 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  795 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  796 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  797 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  798 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  799 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  800 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  801 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  802 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  803 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  804 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  805 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  806 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  807 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  808 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  809 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  810 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  811 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  812 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  813 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  814 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  815 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  816 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  817 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  818 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  819 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  820 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  821 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  822 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  823 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  824 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  825 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  826 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  827 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  828 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  829 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  830 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  831 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  832 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  833 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  834 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  835 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  836 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  837 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  838 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  839 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  840 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  841 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  842 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  843 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  844 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  845 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  846 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  847 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  848 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  849 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  850 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  851 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  852 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  853 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  854 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  855 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  856 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  857 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  858 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  859 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  860 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  861 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  862 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  863 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  864 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  865 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  866 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  867 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  868 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  869 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  870 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  871 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  872 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  873 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  874 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  875 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  876 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  877 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  878 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  879 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  880 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  881 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  882 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  883 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  884 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  885 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  886 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  887 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  888 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  889 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  890 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  891 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  892 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  893 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  894 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  895 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  896 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  897 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  898 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  899 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  900 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  901 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  902 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  903 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  904 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  905 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  906 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  907 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  908 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  909 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  910 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  911 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  912 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  913 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  914 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  915 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  916 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  917 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  918 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  919 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  920 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  921 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  922 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  923 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  924 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  925 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  926 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  927 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  928 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  929 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  930 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  931 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  932 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  933 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  934 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  935 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  936 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  937 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  938 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  939 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  940 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  941 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  942 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  943 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  944 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  945 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  946 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  947 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  948 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  949 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  950 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  951 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  952 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  953 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  954 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  955 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  956 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  957 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  958 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  959 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  960 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  961 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  962 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  963 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  964 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  965 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  966 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  967 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  968 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  969 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  970 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  971 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  972 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  973 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  974 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  975 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  976 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  977 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  978 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  979 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  980 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  981 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  982 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  983 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  984 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  985 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  986 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  987 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  988 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  989 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  990 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  991 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  992 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  993 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  994 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  995 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  996 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  997 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  998 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  999 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 143.5609978835 | Program output: 143.5609978835
Correct output: -141.201628771 | Program output: -141.201628771
Correct output: 23.3844813461  | Program output: 23.3844813461 
Correct output: 91.3818662575  | Program output: 91.3818662575 
Correct output: 6.0991287499   | Program output: 6.0991287499  
Correct output: 90.6078865723  | Program output: 90.6078865723 
Correct output: -16.3558496064 | Program output: -16.3558496064
Correct output: 85.2320058807  | Program output: 85.2320058807 
Correct output: -28.7080490162 | Program output: -28.7080490162
Correct output: -10.4844827466 | Program output: -10.4844827466
Correct output: -59.408072605  | Program output: -59.408072605 
Correct output: 59.1228402624  | Program output: 59.1228402624 
Correct output: -132.1998002816 | Program output: -132.1998002816
Correct output: -128.9949320478 | Program output: -128.9949320478
Correct output: -78.0962956202 | Program output: -78.0962956202
Correct output: -35.919351649  | Program output: -35.919351649 
Correct output: -56.0400311694 | Program output: -56.0400311694
Correct output: 137.4302481607 | Program output: 137.4302481607
Correct output: 32.7727726522  | Program output: 32.7727726522 
Correct output: -26.6497561561 | Program output: -26.6497561561
Correct output: 95.3927116996  | Program output: 95.3927116996 
Correct output: -65.8806745395 | Program output: -65.8806745395
Correct output: 48.7839285535  | Program output: 48.7839285535 
Correct output: 176.7350863211 | Program output: 176.7350863211
Correct output: -87.9710392115 | Program output: -87.9710392115
;;******************************
